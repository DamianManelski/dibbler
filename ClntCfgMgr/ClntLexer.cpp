#line 2 "ClntLexer.cpp"

#line 4 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 64
#define YY_END_OF_BUFFER 65
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[569] =
    {   0,
        1,    1,    0,    0,    0,    0,   65,   63,    2,    1,
        1,   63,   46,   63,   63,   62,   62,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   50,   50,   64,    1,    1,    1,
        0,   58,   46,    0,   58,   48,   47,   62,    0,    0,
       61,    0,   55,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,    6,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   17,   18,    7,   59,
       59,   59,   59,   59,   49,   47,   62,    0,    0,   54,
       60,   53,   53,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       62,    0,    0,    0,   52,   52,    0,   53,    0,   53,
       59,   59,   43,   59,   59,   59,   59,   26,    8,   59,
       59,   59,    0,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   62,
        0,    0,    0,    0,   52,    0,   52,    0,   53,   53,
       53,   53,   59,   59,   59,   59,   59,   59,    3,   59,
       59,   59,   59,    0,   59,   59,   59,    9,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,    0,    0,    0,    0,   52,   52,   52,
       52,    0,   53,   53,   53,    0,   53,   59,   59,   59,
       21,   59,   59,   59,   59,   59,   59,   59,    0,    0,
       59,   59,   59,   59,   19,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,    0,    0,
        0,   52,   52,   52,    0,   52,    0,    0,   53,   53,
       53,   53,    5,   59,   59,   41,   39,   59,   59,   59,
       59,   59,    0,    0,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   35,   59,   59,
       59,    0,    0,    0,    0,    0,   52,   52,   52,   52,

        0,   53,   53,   53,    0,   53,   59,   59,   59,   40,
       59,   31,   59,   12,   13,    0,    0,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   14,    0,    0,    0,   52,   52,   52,    0,
       52,   57,   53,   53,   53,   53,   59,   59,   59,   38,
       11,    0,    0,   59,   59,    4,   59,   59,   59,   59,
       59,   59,   59,   10,   59,   23,   59,   59,    0,    0,
        0,   56,   52,   52,   52,   52,   53,   53,   53,    0,
       53,   59,   59,   20,    0,    0,   28,   27,   22,   59,
       59,   59,   59,   59,   25,   24,   59,   59,   59,    0,

        0,   52,   52,   52,    0,   52,   53,   53,   53,   53,
       59,   44,   30,   29,   59,   59,   59,   59,   59,   59,
       59,   42,    0,    0,    0,   52,   52,   52,   52,   53,
       53,   53,    0,   53,   59,   59,   59,   59,   34,   59,
       59,   59,    0,    0,   52,   52,   52,    0,   52,   53,
       53,   53,   53,   59,   59,   59,   59,   32,   59,   59,
        0,    0,    0,   52,   52,   52,   52,   53,   53,   53,
        0,   53,   59,   59,   59,   59,   59,   16,    0,   51,
       54,   52,   52,   52,    0,   52,   53,   53,   53,   53,
       59,   59,   33,   59,   59,    0,   51,    0,   52,   52,

       52,   52,   52,   53,   53,   53,    0,   53,   45,   59,
       59,   59,   51,   54,   52,    0,   52,   52,   52,   52,
       53,   53,   53,   15,   37,   59,   51,   52,   52,   52,
       52,   53,   53,   53,   59,   52,   52,    0,   52,   52,
       53,   59,   52,   52,   53,   59,   52,   52,    0,   36,
       52,   52,   52,   52,    0,   52,   52,   52,   52,    0,
       52,   52,   52,   52,    0,   52,   52,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   16,   16,   16,   16,   16,   16,   17,    1,    1,
        1,    1,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
        1,    1,    1,    1,    1,    1,   18,   19,   20,   21,

       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[44] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        3,    1,    4,    4,    4,    4,    5,    4,    4,    4,
        4,    4,    4,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[648] =
    {   0,
        0,    0, 1887, 1886,    0,    0, 1893, 1896, 1896,   41,
       43, 1887,    0, 1884,   40,   40, 1849, 1872,   69,   95,
       38, 1854, 1870,   49,  102,  104,   60,   33,   56,  105,
      109,  108,   78,  112, 1896, 1874, 1896,   76,   94,   98,
     1880, 1896,    0, 1877, 1876, 1896,    0,  132, 1865,   90,
     1896,    0,  145, 1864,  149, 1859, 1862,   34,  116,  120,
      149,  156,  157,  158,  159,  115,  163,  164,  173,  168,
      169,  171,  172,  175,  174,  177, 1861, 1860, 1859,  179,
      182,  181,  180,  186, 1896,    0,  209,  200, 1858,  204,
        0,  224,  237,  241, 1839,  241,  248,  257,  251,  254,

      255,  256,  216,  259,  268,  270,  271,  272,  266,  267,
      276,  277,  286,  278,  281,  283,  284,  291,  289,  292,
      308,  298, 1856, 1855,  323,  336,  340,  346,  357,  363,
      367,  374, 1854,  299,  358,  367,  382, 1853, 1852,  378,
      380,  381, 1858,  384,  386,  301,  385,  387,  405,  392,
      406,  407,  408,  412,  397,  398,  416,  417,  425,  431,
     1850, 1849, 1848,  425,  439,  450,  456,  462,  468,  481,
      487,  500, 1847,  457,  482,  495,  501,  504, 1846,  503,
      505,  419,  506,  504,  511,  513,  514, 1845,  517,  519,
      520,   58,  532,  521,  527,  529,  451,  530,  315,  535,

      543,  531,  540, 1844, 1843, 1842,  559,  565,  578,  584,
      597,  549,  603, 1841,  610,  621,  627,  560,  605,  622,
     1840,  537,  627,  628,  539,  629,  630,  631, 1824, 1833,
      632,  636,  635,  637, 1837,  633,  649,  643,  657,  647,
      648,  656,  659,  658,  662,  663,  671,  665, 1836, 1835,
      671,  687, 1834,  694,  680,  707,  713,  719,  725,  738,
      744,  757, 1833,  752,  680, 1832,  739,  757,  758,  762,
      764,  765, 1818, 1812,  771,  761,  768,  774,  775,  776,
      778,  573,  781,  784,  689,  785,  786, 1829,  788,  714,
      787, 1828, 1827, 1826,  813,  819,  825,  838,  844,  857,

      793,  863, 1825,  870,  881,  887,  795,  799,  882, 1824,
      888, 1823,  889, 1822, 1821, 1819, 1797,  890,  891,  794,
      892,  865,  895,  820,  898,  902,  904,  894,  798,  905,
      906,  907, 1818, 1817, 1816,  918,  928, 1815,  935,  922,
      948,  952,  958,  971,  977,  990,  990,  985,  992, 1814,
     1813, 1803, 1806,  993,  994, 1810,  995,  996,  997,  839,
      998, 1000, 1001, 1809, 1002, 1808, 1006, 1017, 1807, 1806,
     1805, 1027, 1033, 1046, 1052, 1065, 1071, 1804, 1078, 1089,
     1095, 1018, 1090, 1803, 1788, 1783, 1800, 1799, 1798, 1096,
     1097, 1098, 1099,  908, 1797, 1796, 1073, 1100, 1101, 1795,

     1794, 1113, 1793, 1127, 1118, 1140, 1146, 1159, 1165, 1178,
     1180, 1792, 1896, 1896,  966, 1160, 1179, 1181, 1182, 1183,
     1184, 1791, 1790, 1789, 1788, 1208, 1221, 1227, 1240, 1246,
     1787, 1253, 1192, 1266, 1028, 1194, 1119, 1003, 1786, 1185,
     1261, 1122, 1785, 1784, 1272, 1783, 1283, 1294, 1300, 1306,
     1319, 1325, 1338, 1192, 1196, 1273, 1275, 1782, 1248, 1333,
     1781, 1780, 1779, 1345, 1358, 1364, 1377, 1383, 1778, 1390,
     1401, 1407, 1407, 1402, 1409, 1410, 1412, 1777, 1776, 1775,
        0, 1424, 1774, 1437, 1417, 1450, 1456, 1469, 1475, 1488,
     1198, 1222, 1773, 1417, 1483, 1772, 1771, 1770, 1769, 1505,

     1494, 1518, 1531, 1537, 1768, 1544,    0, 1557, 1767, 1489,
     1518, 1020, 1766, 1896, 1765,    0, 1563, 1764, 1570, 1583,
     1589, 1602,    0, 1763, 1762, 1320, 1761, 1665, 1652, 1608,
     1621, 1627, 1629,    0, 1622, 1628, 1616,    0, 1636, 1896,
        0, 1570, 1608, 1603, 1896, 1267, 1597, 1578,    0, 1565,
     1558, 1552, 1539, 1526,    0, 1513, 1500, 1497, 1496,    0,
     1495, 1470, 1464, 1451,    0, 1445, 1429, 1896, 1652, 1657,
     1662, 1667, 1672, 1675, 1680, 1682, 1441, 1439, 1684, 1438,
     1686, 1688, 1398, 1690, 1692, 1391, 1694, 1696, 1385, 1698,
     1700, 1372, 1702, 1704, 1366, 1706, 1708, 1327, 1710, 1712,

     1314, 1714, 1716, 1167, 1718, 1720, 1131, 1722, 1724, 1119,
     1726, 1728, 1073, 1730, 1732,  966,  956, 1734, 1736,  815,
     1738, 1740,  733,  685, 1742, 1744,  404, 1746,  402,  344,
     1748, 1750, 1752,  245, 1754, 1756, 1758,  200, 1760, 1762,
     1764,  139, 1766, 1768, 1770,   45, 1772
    } ;

static yyconst flex_int16_t yy_def[648] =
    {   0,
      568,    1,  569,  569,  570,  570,  568,  568,  568,  568,
      568,  571,  572,  573,  568,  568,   16,  568,  574,  574,
       20,   20,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  568,  568,  568,  568,  568,  568,
      571,  568,  572,  573,  568,  568,  575,  568,  576,   48,
      568,  577,  578,  574,   20,   55,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  568,  575,  568,   87,  579,  580,
      577,  568,   92,   55,   94,  574,  574,  574,  574,  574,

      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      568,  121,  581,  582,  568,  125,  568,  568,  583,  128,
       94,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  568,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  122,
      122,  584,  585,  568,  568,  586,  165,  568,  568,  169,
      568,  171,  131,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  568,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,

      574,  574,  574,  568,  587,  588,  568,  568,  208,  568,
      210,  568,  568,  568,  568,  589,  215,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  568,  568,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  590,  591,
      568,  568,  568,  568,  592,  254,  568,  568,  568,  259,
      568,  261,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  568,  568,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  568,  593,  594,  568,  568,  568,  297,  568,  299,

      568,  568,  568,  568,  595,  304,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  568,  568,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  596,  597,  568,  568,  568,  568,  598,
      339,  568,  568,  343,  568,  345,  574,  574,  574,  574,
      574,  568,  568,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  568,  599,
      600,  568,  568,  373,  568,  375,  568,  568,  568,  601,
      379,  574,  574,  574,  568,  568,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  602,

      603,  568,  568,  568,  604,  404,  568,  407,  568,  409,
      574,  574,  568,  568,  574,  574,  574,  574,  574,  574,
      574,  574,  568,  605,  606,  568,  426,  568,  428,  568,
      568,  568,  607,  432,  574,  574,  574,  574,  574,  574,
      574,  574,  608,  609,  568,  568,  568,  610,  447,  568,
      450,  568,  452,  574,  574,  574,  574,  574,  574,  574,
      568,  611,  612,  568,  464,  568,  466,  568,  568,  568,
      613,  470,  574,  574,  574,  574,  574,  574,  614,  615,
      616,  568,  568,  568,  617,  484,  568,  487,  568,  489,
      574,  574,  574,  574,  574,  568,  618,  568,  619,  568,

      500,  568,  502,  568,  568,  568,  620,  506,  574,  574,
      574,  574,  621,  568,  622,  623,  568,  568,  568,  519,
      568,  521,  624,  574,  574,  574,  568,  625,  626,  568,
      530,  568,  568,  627,  574,  568,  628,  629,  568,  568,
      630,  574,  631,  632,  568,  574,  568,  633,  634,  574,
      635,  636,  568,  637,  638,  639,  640,  568,  641,  642,
      643,  644,  568,  645,  646,  647,  568,    0,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,

      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568
    } ;

static yyconst flex_int16_t yy_nxt[1940] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   18,   19,   20,   20,
       21,   20,   22,   23,   23,   24,   23,   23,   25,   23,
       26,   27,   28,   23,   29,   30,   31,   32,   33,   34,
       23,   23,   23,   38,   39,   40,   39,   46,  503,  568,
      568,   47,   48,   48,   48,   48,   49,   50,   50,   50,
       50,   50,   50,   59,   51,  568,   64,   72,   60,   61,
       96,   65,  568,   73,  568,   62,  568,   74,   38,   39,
       52,   55,   55,   55,   55,   49,   55,   55,   55,   56,
       55,   55,   71,   57,  568,   82,   40,   39,  237,   83,

       38,   39,   88,   88,   88,   88,   58,   55,   55,   55,
       55,   49,   55,   55,   55,   55,   55,   55,  568,   57,
      568,  568,   77,   78,  568,  568,   79,   66,  568,   68,
       75,  568,  568,   67,   80,   69,  568,  104,   81,   97,
       70,   76,  562,   84,   87,   87,   87,   87,   49,   88,
       88,   88,   88,   88,   88,   98,   51,   92,   92,   92,
       92,   94,   94,   94,   94,  568,   94,   94,   94,   94,
       94,   94,  568,  568,  568,  568,  103,  101,   99,  568,
      568,  100,  107,  102,  568,  568,  105,  568,  568,  568,
      568,  568,  110,  568,  114,  568,  568,  568,  568,  106,

      108,  112,  568,  557,  111,  109,  113,  117,  116,  118,
      119,  115,  122,  122,  122,  122,  125,  125,  125,  125,
      120,  121,  121,  121,  121,   49,  122,  122,  122,  122,
      122,  122,  568,   51,  127,  140,  128,  128,  128,  128,
      129,  130,  130,  130,  130,  130,  130,  568,  552,  130,
      130,  130,  130,  131,  131,  131,  131,  568,  131,  131,
      131,  131,  131,  131,  568,  133,  135,  568,  136,  134,
      568,  568,  568,  568,  137,  568,  139,  142,  143,  144,
      141,  147,  568,  568,  568,  138,  568,  568,  568,  149,
      145,  148,  568,  568,  568,  152,  146,  568,  151,  568,

      568,  150,  568,  156,  155,  568,  154,  568,  568,  158,
      161,  161,  161,  161,  153,  568,  157,  568,  188,  159,
      160,  160,  160,  160,   49,  161,  161,  161,  161,  161,
      161,  568,   51,  164,  175,  165,  165,  165,  165,  166,
      167,  167,  167,  167,  167,  167,  568,  545,  167,  167,
      167,  167,  168,  168,  168,  168,  127,  244,  169,  169,
      169,  169,  129,  170,  170,  170,  170,  170,  170,  171,
      171,  171,  171,  568,  568,  170,  170,  170,  170,  173,
      173,  173,  173,  568,  173,  173,  173,  173,  173,  173,
      568,  178,  177,  176,  568,  174,  568,  568,  568,  179,

      568,  568,  568,  568,  185,  544,  199,  541,  568,  181,
      182,  183,  193,  568,  568,  200,  180,  187,  190,  186,
      189,  568,  568,  568,  568,  194,  191,  195,  568,  197,
      192,  198,  568,  568,  203,  568,  201,  207,  207,  207,
      207,  568,  196,  160,  160,  160,  160,  568,  202,  164,
      227,  208,  208,  208,  208,  166,  209,  209,  209,  209,
      209,  209,  210,  210,  210,  210,  568,  568,  209,  209,
      209,  209,  212,  568,  168,  168,  168,  168,  127,  242,
      213,  213,  213,  213,  129,  214,  214,  214,  214,  214,
      214,  568,  218,  214,  214,  214,  214,  127,  568,  215,

      215,  215,  215,  216,  217,  217,  217,  217,  217,  217,
      568,  568,  217,  217,  217,  217,  220,  568,  219,  568,
      568,  568,  568,  228,  229,  222,  226,  568,  225,  568,
      568,  221,  223,  568,  232,  568,  568,  568,  234,  230,
      224,  238,  231,  568,  233,  568,  568,  568,  568,  235,
      241,  568,  246,  568,  236,  568,  568,  239,  240,  568,
      248,  257,  257,  257,  257,  247,  243,  266,  269,  251,
      245,  207,  207,  207,  207,  164,  568,  252,  252,  252,
      252,  166,  253,  253,  253,  253,  253,  253,  568,  568,
      253,  253,  253,  253,  164,  263,  254,  254,  254,  254,

      255,  256,  256,  256,  256,  256,  256,  568,  325,  256,
      256,  256,  256,  127,  264,  258,  258,  258,  258,  129,
      127,  568,  259,  259,  259,  259,  216,  260,  260,  260,
      260,  260,  260,  261,  261,  261,  261,  568,  568,  260,
      260,  260,  260,  568,  568,  568,  568,  568,  568,  568,
      271,  568,  568,  568,  279,  267,  265,  277,  280,  568,
      272,  275,  281,  568,  568,  568,  282,  270,  286,  268,
      276,  278,  568,  568,  568,  568,  283,  285,  568,  568,
      290,  568,  284,  295,  295,  295,  295,  568,  534,  287,
      291,  289,  299,  299,  299,  299,  568,  164,  288,  296,

      296,  296,  296,  166,  164,  568,  297,  297,  297,  297,
      255,  298,  298,  298,  298,  298,  298,  568,  309,  298,
      298,  298,  298,  301,  328,  257,  257,  257,  257,  127,
      568,  258,  258,  258,  258,  127,  529,  302,  302,  302,
      302,  216,  303,  303,  303,  303,  303,  303,  568,  332,
      303,  303,  303,  303,  127,  568,  304,  304,  304,  304,
      305,  306,  306,  306,  306,  306,  306,  568,  568,  306,
      306,  306,  306,  568,  568,  310,  307,  568,  568,  312,
      568,  568,  308,  313,  568,  314,  315,  568,  318,  311,
      568,  568,  568,  320,  568,  322,  323,  568,  326,  319,

      568,  568,  568,  568,  568,  342,  342,  342,  342,  324,
      568,  568,  321,  331,  568,  568,  330,  356,  523,  329,
      365,  333,  327,  336,  347,  295,  295,  295,  295,  164,
      348,  296,  296,  296,  296,  164,  568,  337,  337,  337,
      337,  255,  338,  338,  338,  338,  338,  338,  568,  360,
      338,  338,  338,  338,  164,  568,  339,  339,  339,  339,
      340,  341,  341,  341,  341,  341,  341,  568,  393,  341,
      341,  341,  341,  127,  358,  258,  258,  258,  258,  216,
      127,  568,  343,  343,  343,  343,  305,  344,  344,  344,
      344,  344,  344,  345,  345,  345,  345,  568,  568,  344,

      344,  344,  344,  349,  568,  568,  568,  568,  568,  350,
      568,  568,  355,  357,  568,  354,  359,  351,  568,  361,
      568,  568,  568,  568,  568,  363,  366,  362,  367,  364,
      372,  372,  372,  372,  375,  375,  375,  375,  164,  368,
      296,  296,  296,  296,  255,  164,  419,  373,  373,  373,
      373,  340,  374,  374,  374,  374,  374,  374,  568,  503,
      374,  374,  374,  374,  342,  342,  342,  342,  127,  499,
      377,  377,  377,  377,  305,  378,  378,  378,  378,  378,
      378,  568,  568,  378,  378,  378,  378,  127,  436,  379,
      379,  379,  379,  380,  381,  381,  381,  381,  381,  381,

      568,  568,  381,  381,  381,  381,  568,  382,  568,  568,
      568,  568,  568,  568,  568,  383,  568,  568,  568,  568,
      457,  397,  568,  387,  390,  392,  384,  398,  388,  389,
      395,  391,  394,  568,  568,  396,  568,  411,  399,  372,
      372,  372,  372,  164,  568,  402,  402,  402,  402,  340,
      403,  403,  403,  403,  403,  403,  568,  526,  403,  403,
      403,  403,  164,  454,  404,  404,  404,  404,  405,  406,
      406,  406,  406,  406,  406,  568,  490,  406,  406,  406,
      406,  127,  420,  258,  258,  258,  258,  305,  127,  568,
      407,  407,  407,  407,  380,  408,  408,  408,  408,  408,

      408,  409,  409,  409,  409,  568,  568,  408,  408,  408,
      408,  412,  568,  568,  568,  568,  568,  568,  416,  417,
      422,  415,  467,  164,  418,  296,  296,  296,  296,  340,
      428,  428,  428,  428,  453,  568,  421,  164,  568,  426,
      426,  426,  426,  405,  427,  427,  427,  427,  427,  427,
      568,  460,  427,  427,  427,  427,  127,  456,  430,  430,
      430,  430,  380,  431,  431,  431,  431,  431,  431,  568,
      429,  431,  431,  431,  431,  127,  568,  432,  432,  432,
      432,  433,  434,  434,  434,  434,  434,  434,  568,  435,
      434,  434,  434,  434,  437,  568,  568,  568,  568,  568,

      568,  568,  438,  440,  452,  452,  452,  452,  568,  442,
      568,  509,  568,  441,  568,  455,  473,  439,  164,  458,
      445,  445,  445,  445,  405,  446,  446,  446,  446,  446,
      446,  568,  474,  446,  446,  446,  446,  164,  568,  447,
      447,  447,  447,  448,  449,  449,  449,  449,  449,  449,
      568,  510,  449,  449,  449,  449,  127,  477,  258,  258,
      258,  258,  380,  127,  568,  450,  450,  450,  450,  433,
      451,  451,  451,  451,  451,  451,  568,  568,  451,  451,
      451,  451,  164,  568,  296,  296,  296,  296,  405,  568,
      550,  568,  459,  164,  475,  464,  464,  464,  464,  448,

      465,  465,  465,  465,  465,  465,  466,  466,  466,  466,
      568,  476,  465,  465,  465,  465,  127,  410,  468,  468,
      468,  468,  433,  469,  469,  469,  469,  469,  469,  568,
      376,  469,  469,  469,  469,  127,  568,  470,  470,  470,
      470,  471,  472,  472,  472,  472,  472,  472,  568,  568,
      472,  472,  472,  472,  478,  164,  535,  482,  482,  482,
      482,  448,  483,  483,  483,  483,  483,  483,  568,  346,
      483,  483,  483,  483,  164,  300,  484,  484,  484,  484,
      485,  486,  486,  486,  486,  486,  486,  568,  262,  486,
      486,  486,  486,  127,  211,  258,  258,  258,  258,  433,

      127,  172,  487,  487,  487,  487,  471,  488,  488,  488,
      488,  488,  488,  489,  489,  489,  489,  568,  568,  488,
      488,  488,  488,  568,  491,  568,  568,  492,  568,  502,
      502,  502,  502,  568,  164,  494,  296,  296,  296,  296,
      448,  126,   93,  493,   91,  565,  495,  164,  511,  500,
      500,  500,  500,  485,  501,  501,  501,  501,  501,  501,
      568,  565,  501,  501,  501,  501,  127,  565,  504,  504,
      504,  504,  471,  505,  505,  505,  505,  505,  505,  568,
      560,  505,  505,  505,  505,  127,  565,  506,  506,  506,
      506,  507,  508,  508,  508,  508,  508,  508,  568,  568,

      508,  508,  508,  508,  568,  568,  518,  518,  518,  518,
      524,  560,  560,  555,  512,  164,  560,  517,  517,  517,
      517,  485,  518,  518,  518,  518,  518,  518,  164,  555,
      519,  519,  519,  519,  568,  520,  520,  520,  520,  520,
      520,  568,  555,  520,  520,  520,  520,  127,  525,  258,
      258,  258,  258,  471,  127,  549,  521,  521,  521,  521,
      507,  522,  522,  522,  522,  522,  522,  568,  555,  522,
      522,  522,  522,  164,  549,  296,  296,  296,  296,  485,
      164,  568,  530,  530,  530,  530,  568,  531,  531,  531,
      531,  531,  531,  568,  549,  531,  531,  531,  531,  127,

      546,  532,  532,  532,  532,  507,  533,  533,  533,  533,
      533,  533,  568,  538,  533,  533,  533,  533,  164,  549,
      539,  539,  539,  539,  538,  540,  540,  540,  540,  540,
      540,  568,  538,  540,  540,  540,  540,  127,  568,  258,
      258,  258,  258,  507,  516,  507,  164,  542,  296,  296,
      296,  296,   35,   35,   35,   35,   35,   37,   37,   37,
       37,   37,   41,   41,   41,   41,   41,   43,  538,   43,
       43,   43,   44,   44,   44,   44,   44,   54,   54,   54,
       86,  516,   86,   86,   86,   89,   89,  123,  123,  162,
      162,  163,  163,  204,  204,  205,  205,  249,  249,  250,

      250,  292,  292,  293,  293,  334,  334,  335,  335,  369,
      369,  370,  370,  400,  400,  401,  401,  423,  423,  424,
      424,  443,  443,  444,  444,  461,  461,  462,  462,  479,
      479,  480,  480,  496,  496,  497,  497,  513,  513,  515,
      515,  527,  527,  528,  528,  536,  536,  537,  537,  543,
      543,  547,  547,  548,  548,  551,  551,  553,  553,  554,
      554,  556,  556,  558,  558,  559,  559,  561,  561,  563,
      563,  564,  564,  566,  566,  567,  567,  498,  568,  568,
      485,  516,  498,  568,  471,  516,  514,  498,  463,  568,
      448,  498,  463,  568,  433,  481,  463,  425,  568,  405,

      463,  425,  568,  380,   90,  425,  371,  568,  568,  340,
      425,  371,  568,  568,  568,  568,  568,  414,  413,  568,
      305,   90,  371,  294,  568,  568,  568,  386,  385,  568,
      568,  255,  371,  294,  568,  353,  352,  568,  568,  568,
      568,  216,   90,  294,  206,  568,  317,  316,  568,  568,
      166,  294,  206,  568,  274,  273,  568,  129,   90,  206,
      124,  568,  568,  568,  206,  124,  568,  184,  568,  568,
      568,   90,  124,  132,  124,  568,  568,  568,  568,   95,
      568,   90,   44,   45,   42,   85,  568,   63,   53,  568,
       45,   42,  568,   36,   36,    7,  568,  568,  568,  568,

      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568
    } ;

static yyconst flex_int16_t yy_chk[1940] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   10,   10,   11,   11,   15,  646,   28,
       58,   15,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   21,   16,   24,   24,   28,   21,   21,
       58,   24,   29,   29,  192,   21,   27,   29,   38,   38,
       16,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   27,   19,   33,   33,   39,   39,  192,   33,

       40,   40,   50,   50,   50,   50,   19,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   25,   20,
       26,   30,   31,   31,   32,   31,   31,   25,   34,   26,
       30,   66,   59,   25,   31,   26,   60,   66,   32,   59,
       26,   30,  642,   34,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   60,   48,   53,   53,   53,
       53,   55,   55,   55,   55,   61,   55,   55,   55,   55,
       55,   55,   62,   63,   64,   65,   65,   63,   61,   67,
       68,   62,   69,   64,   70,   71,   67,   72,   73,   69,
       75,   74,   72,   76,   76,   80,   83,   82,   81,   68,

       70,   74,   84,  638,   73,   71,   75,   81,   80,   82,
       83,   76,   88,   88,   88,   88,   90,   90,   90,   90,
       84,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,  103,   87,   92,  103,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   93,  634,   93,
       93,   93,   93,   94,   94,   94,   94,   96,   94,   94,
       94,   94,   94,   94,   97,   96,   98,   99,   99,   97,
      100,  101,  102,   98,  100,  104,  102,  105,  106,  106,
      104,  108,  109,  110,  105,  101,  106,  107,  108,  110,
      107,  109,  111,  112,  114,  113,  107,  115,  112,  116,

      117,  111,  113,  117,  116,  119,  115,  118,  120,  119,
      122,  122,  122,  122,  114,  134,  118,  146,  146,  120,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  199,  121,  125,  134,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  126,  630,  126,  126,
      126,  126,  127,  127,  127,  127,  128,  199,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  129,
      129,  129,  129,  130,  135,  130,  130,  130,  130,  131,
      131,  131,  131,  136,  131,  131,  131,  131,  131,  131,
      132,  137,  136,  135,  140,  132,  141,  142,  137,  140,

      144,  147,  145,  148,  144,  629,  155,  627,  150,  142,
      142,  142,  150,  155,  156,  156,  141,  145,  148,  144,
      147,  149,  151,  152,  153,  151,  149,  152,  154,  153,
      149,  154,  157,  158,  159,  182,  157,  164,  164,  164,
      164,  159,  152,  160,  160,  160,  160,  160,  158,  165,
      182,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  166,  166,  166,  166,  167,  197,  167,  167,
      167,  167,  168,  174,  168,  168,  168,  168,  169,  197,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  170,  174,  170,  170,  170,  170,  171,  175,  171,

      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      172,  176,  172,  172,  172,  172,  176,  177,  175,  180,
      178,  181,  183,  183,  184,  178,  181,  185,  180,  186,
      187,  177,  178,  189,  186,  190,  191,  194,  189,  184,
      178,  193,  185,  195,  187,  196,  198,  202,  193,  190,
      196,  200,  201,  222,  191,  225,  203,  194,  195,  201,
      203,  212,  212,  212,  212,  202,  198,  222,  225,  207,
      200,  207,  207,  207,  207,  208,  218,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  209,  282,
      209,  209,  209,  209,  210,  218,  210,  210,  210,  210,

      210,  210,  210,  210,  210,  210,  210,  211,  282,  211,
      211,  211,  211,  213,  219,  213,  213,  213,  213,  213,
      215,  219,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  216,  216,  216,  216,  217,  220,  217,
      217,  217,  217,  223,  224,  226,  227,  228,  231,  236,
      227,  233,  232,  234,  236,  223,  220,  233,  237,  238,
      228,  231,  238,  240,  241,  237,  239,  226,  243,  224,
      232,  234,  242,  239,  244,  243,  240,  242,  245,  246,
      247,  248,  241,  251,  251,  251,  251,  247,  624,  244,
      248,  246,  255,  255,  255,  255,  265,  252,  245,  252,

      252,  252,  252,  252,  254,  285,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  256,  265,  256,
      256,  256,  256,  257,  285,  257,  257,  257,  257,  258,
      290,  258,  258,  258,  258,  259,  623,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  260,  290,
      260,  260,  260,  260,  261,  267,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  262,  264,  262,
      262,  262,  262,  268,  269,  267,  264,  276,  270,  269,
      271,  272,  264,  270,  277,  271,  272,  275,  275,  268,
      278,  279,  280,  277,  281,  279,  280,  283,  283,  276,

      284,  286,  287,  291,  289,  301,  301,  301,  301,  281,
      320,  307,  278,  289,  329,  308,  287,  320,  620,  286,
      329,  291,  284,  295,  307,  295,  295,  295,  295,  296,
      308,  296,  296,  296,  296,  297,  324,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  298,  324,
      298,  298,  298,  298,  299,  360,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  300,  360,  300,
      300,  300,  300,  302,  322,  302,  302,  302,  302,  302,
      304,  322,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  305,  305,  305,  305,  306,  309,  306,

      306,  306,  306,  309,  311,  313,  318,  319,  321,  311,
      328,  323,  319,  321,  325,  318,  323,  313,  326,  325,
      327,  330,  331,  332,  394,  327,  330,  326,  331,  328,
      336,  336,  336,  336,  340,  340,  340,  340,  337,  332,
      337,  337,  337,  337,  337,  339,  394,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  341,  617,
      341,  341,  341,  341,  342,  342,  342,  342,  343,  616,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  344,  415,  344,  344,  344,  344,  345,  415,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,

      346,  348,  346,  346,  346,  346,  347,  347,  349,  354,
      355,  357,  358,  359,  361,  348,  362,  363,  365,  438,
      438,  365,  367,  354,  358,  359,  349,  367,  355,  357,
      362,  358,  361,  368,  382,  363,  512,  382,  368,  372,
      372,  372,  372,  373,  435,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  374,  512,  374,  374,
      374,  374,  375,  435,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  376,  613,  376,  376,  376,
      376,  377,  397,  377,  377,  377,  377,  377,  379,  397,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,

      379,  380,  380,  380,  380,  381,  383,  381,  381,  381,
      381,  383,  390,  391,  392,  393,  398,  399,  391,  392,
      399,  390,  610,  402,  393,  402,  402,  402,  402,  402,
      405,  405,  405,  405,  607,  437,  398,  404,  442,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      406,  442,  406,  406,  406,  406,  407,  437,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  408,
      604,  408,  408,  408,  408,  409,  416,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  410,  411,
      410,  410,  410,  410,  416,  417,  411,  418,  419,  420,

      421,  440,  417,  419,  433,  433,  433,  433,  454,  421,
      436,  491,  455,  420,  491,  436,  454,  418,  426,  440,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  427,  455,  427,  427,  427,  427,  428,  492,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      429,  492,  429,  429,  429,  429,  430,  459,  430,  430,
      430,  430,  430,  432,  459,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  434,  441,  434,  434,
      434,  434,  445,  546,  445,  445,  445,  445,  445,  456,
      546,  457,  441,  447,  456,  447,  447,  447,  447,  447,

      447,  447,  447,  447,  447,  447,  448,  448,  448,  448,
      449,  457,  449,  449,  449,  449,  450,  601,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  451,
      598,  451,  451,  451,  451,  452,  526,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  453,  460,
      453,  453,  453,  453,  460,  464,  526,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  465,  595,
      465,  465,  465,  465,  466,  592,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  467,  589,  467,
      467,  467,  467,  468,  586,  468,  468,  468,  468,  468,

      470,  583,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  471,  471,  471,  471,  472,  474,  472,
      472,  472,  472,  473,  473,  475,  476,  474,  477,  485,
      485,  485,  485,  494,  482,  476,  482,  482,  482,  482,
      482,  580,  578,  475,  577,  567,  477,  484,  494,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      486,  566,  486,  486,  486,  486,  487,  564,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  488,
      563,  488,  488,  488,  488,  489,  562,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  490,  495,

      490,  490,  490,  490,  501,  510,  501,  501,  501,  501,
      510,  561,  559,  558,  495,  500,  557,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  502,  556,
      502,  502,  502,  502,  511,  502,  502,  502,  502,  502,
      502,  503,  554,  503,  503,  503,  503,  504,  511,  504,
      504,  504,  504,  504,  506,  553,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  508,  552,  508,
      508,  508,  508,  517,  551,  517,  517,  517,  517,  517,
      519,  550,  519,  519,  519,  519,  542,  519,  519,  519,
      519,  519,  519,  520,  548,  520,  520,  520,  520,  521,

      542,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  522,  547,  522,  522,  522,  522,  530,  544,
      530,  530,  530,  530,  543,  530,  530,  530,  530,  530,
      530,  531,  537,  531,  531,  531,  531,  532,  535,  532,
      532,  532,  532,  532,  536,  533,  539,  535,  539,  539,
      539,  539,  569,  569,  569,  569,  569,  570,  570,  570,
      570,  570,  571,  571,  571,  571,  571,  572,  529,  572,
      572,  572,  573,  573,  573,  573,  573,  574,  574,  574,
      575,  528,  575,  575,  575,  576,  576,  579,  579,  581,
      581,  582,  582,  584,  584,  585,  585,  587,  587,  588,

      588,  590,  590,  591,  591,  593,  593,  594,  594,  596,
      596,  597,  597,  599,  599,  600,  600,  602,  602,  603,
      603,  605,  605,  606,  606,  608,  608,  609,  609,  611,
      611,  612,  612,  614,  614,  615,  615,  618,  618,  619,
      619,  621,  621,  622,  622,  625,  625,  626,  626,  628,
      628,  631,  631,  632,  632,  633,  633,  635,  635,  636,
      636,  637,  637,  639,  639,  640,  640,  641,  641,  643,
      643,  644,  644,  645,  645,  647,  647,  527,  525,  524,
      518,  515,  513,  509,  505,  499,  498,  497,  496,  493,
      483,  480,  479,  478,  469,  463,  462,  461,  458,  446,

      444,  443,  439,  431,  425,  424,  423,  422,  412,  403,
      401,  400,  396,  395,  389,  388,  387,  386,  385,  384,
      378,  371,  370,  369,  366,  364,  356,  353,  352,  351,
      350,  338,  335,  334,  333,  317,  316,  315,  314,  312,
      310,  303,  294,  293,  292,  288,  274,  273,  266,  263,
      253,  250,  249,  235,  230,  229,  221,  214,  206,  205,
      204,  188,  179,  173,  163,  162,  161,  143,  139,  138,
      133,  124,  123,   95,   89,   79,   78,   77,   57,   56,
       54,   49,   45,   44,   41,   36,   23,   22,   18,   17,
       14,   12,    7,    4,    3,  568,  568,  568,  568,  568,

      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[65] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "ClntLexer.l"
#line 5 "ClntLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 31 "ClntLexer.l"
  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_ClntParser_stype yylval;
}
#line 1068 "ClntLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 44 "ClntLexer.l"


#line 1173 "ClntLexer.cpp"

	if ( (yy_init) )
		{
		(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 569 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1896 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 46 "ClntLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 47 "ClntLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "ClntLexer.l"
{ return ClntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "ClntLexer.l"
{ return ClntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "ClntLexer.l"
{ return ClntParser::ADDRES_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "ClntLexer.l"
{ return ClntParser::IA_;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "ClntLexer.l"
{ return ClntParser::TA_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "ClntLexer.l"
{ return ClntParser::IAID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "ClntLexer.l"
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 55 "ClntLexer.l"
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 56 "ClntLexer.l"
{ return ClntParser::LOGLEVEL_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 57 "ClntLexer.l"
{ return ClntParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 58 "ClntLexer.l"
{ return ClntParser::LOGNAME_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 59 "ClntLexer.l"
{ return ClntParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 60 "ClntLexer.l"
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 61 "ClntLexer.l"
{ return ClntParser::VALID_TIME_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 62 "ClntLexer.l"
{ return ClntParser::T1_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 63 "ClntLexer.l"
{ return ClntParser::T2_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 64 "ClntLexer.l"
{ return ClntParser::OPTION_; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 65 "ClntLexer.l"
{ return ClntParser::DNS_SERVER_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 66 "ClntLexer.l"
{ return ClntParser::DOMAIN_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 67 "ClntLexer.l"
{ return ClntParser::NTP_SERVER_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 68 "ClntLexer.l"
{ return ClntParser::TIME_ZONE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 69 "ClntLexer.l"
{ return ClntParser::SIP_SERVER_; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 70 "ClntLexer.l"
{ return ClntParser::SIP_DOMAIN_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 71 "ClntLexer.l"
{ return ClntParser::FQDN_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 72 "ClntLexer.l"
{ return ClntParser::NIS_SERVER_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 73 "ClntLexer.l"
{ return ClntParser::NIS_DOMAIN_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 74 "ClntLexer.l"
{ return ClntParser::NISP_SERVER_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 75 "ClntLexer.l"
{ return ClntParser::NISP_DOMAIN_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 76 "ClntLexer.l"
{ return ClntParser::LIFETIME_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 77 "ClntLexer.l"
{ return ClntParser::REJECT_SERVERS_;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 78 "ClntLexer.l"
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 79 "ClntLexer.l"
{ return ClntParser::RAPID_COMMIT_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 80 "ClntLexer.l"
{ return ClntParser::UNICAST_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 81 "ClntLexer.l"
{ return ClntParser::STRICT_RFC_NO_ROUTING_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 82 "ClntLexer.l"
{ return ClntParser::PD_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 83 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 84 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_LL_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 85 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_LLT_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 86 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_EN_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 87 "ClntLexer.l"
{ return ClntParser::VENDOR_SPEC_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 88 "ClntLexer.l"
{ return ClntParser::AUTH_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 89 "ClntLexer.l"
{ return ClntParser::DIGEST_NONE_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 90 "ClntLexer.l"
{ return ClntParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 91 "ClntLexer.l"
;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 93 "ClntLexer.l"
;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 95 "ClntLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 101 "ClntLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 102 "ClntLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 103 "ClntLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 51:
YY_RULE_SETUP
#line 110 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 119 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 128 "ClntLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 138 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 147 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 156 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 165 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 174 "ClntLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 181 "ClntLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return ClntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return ClntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 202 "ClntLexer.l"
{
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return ClntParser::DUID_;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 233 "ClntLexer.l"
{ 
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::HEXNUMBER_;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 242 "ClntLexer.l"
{ 
    if(!sscanf(yytext,"%u",(unsigned int*)&(yylval.ival))) { 
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::INTNUMBER_;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 252 "ClntLexer.l"
{return yytext[0];} 
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 256 "ClntLexer.l"
ECHO;
	YY_BREAK
#line 1717 "ClntLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 569 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 569 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 568);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
    	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
    	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef yytext_ptr
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
#endif
#line 256 "ClntLexer.l"



