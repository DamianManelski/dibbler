#line 2 "ClntLexer.cpp"

#line 4 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 67
#define YY_END_OF_BUFFER 68
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[600] =
    {   0,
        1,    1,    0,    0,    0,    0,   68,   66,    2,    1,
        1,   66,   49,   66,   66,   65,   65,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   53,   53,   67,    1,    1,    1,
        0,   61,   49,    0,   61,   51,   50,   65,    0,    0,
       64,    0,   58,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,    6,   62,   62,   62,   62,   62,
       62,   62,   39,   62,   62,   62,   62,   62,   62,   18,
       19,    7,   62,   62,   62,   62,   62,   52,   50,   65,
        0,    0,   57,   63,   56,   56,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   65,    0,    0,    0,   55,
       55,    0,   56,    0,   56,   62,   62,   62,   45,   62,
       62,   62,   62,   27,    8,   62,   62,   62,    0,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   65,    0,    0,    0,
        0,   55,    0,   55,    0,   56,   56,   56,   56,   62,
       62,   62,   62,   62,   62,   62,    3,   62,   62,   62,
       62,    0,   62,   62,   62,    9,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,    0,    0,    0,    0,   55,   55,   55,   55,
        0,   56,   56,   56,    0,   56,   62,   62,   62,   62,
       22,   62,   62,   62,   62,   62,   62,   62,    0,    0,
       62,   62,   62,   62,   20,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,    0,
        0,    0,   55,   55,   55,    0,   55,    0,    0,   56,
       56,   56,   56,    5,   62,   62,   62,   43,   41,   62,
       62,   62,   62,   62,    0,    0,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       36,   62,   62,   62,    0,    0,    0,    0,    0,   55,
       55,   55,   55,    0,   56,   56,   56,    0,   56,   62,
       62,   62,   62,   42,   62,   32,   62,   12,   13,    0,
        0,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   14,    0,    0,
        0,   55,   55,   55,    0,   55,   60,   56,   56,   56,
       56,   62,   62,   62,   62,   40,   11,    0,    0,   62,
       62,    4,   62,   62,   62,   62,   62,   62,   62,   62,
       10,   62,   24,   62,   62,    0,    0,    0,   59,   55,
       55,   55,   55,   56,   56,   56,    0,   56,   62,   62,

       62,   21,    0,    0,   29,   28,   23,   62,   62,   62,
       62,   62,   62,   26,   25,   62,   62,   62,    0,    0,
       55,   55,   55,    0,   55,   56,   56,   56,   56,   62,
       62,   46,   31,   30,   62,   62,   62,   62,   62,   15,
       62,   62,   44,    0,    0,    0,   55,   55,   55,   55,
       56,   56,   56,    0,   56,   62,   62,   62,   62,   62,
       35,   62,   62,   62,    0,    0,   55,   55,   55,    0,
       55,   56,   56,   56,   56,   62,   62,   62,   62,   62,
       33,   62,   62,    0,    0,    0,   55,   55,   55,   55,
       56,   56,   56,    0,   56,   62,   62,   62,   62,   62,

       62,   17,    0,   54,   57,   55,   55,   55,    0,   55,
       56,   56,   56,   56,   62,   62,   62,   34,   62,   62,
        0,   54,    0,   55,   55,   55,   55,   55,   56,   56,
       56,    0,   56,   62,   47,   62,   62,   62,   54,   57,
       55,    0,   55,   55,   55,   55,   56,   56,   56,   62,
       16,   38,   62,   54,   55,   55,   55,   55,   56,   56,
       56,   62,   62,   55,   55,    0,   55,   55,   56,   62,
       62,   55,   55,   56,   62,   62,   55,   55,    0,   48,
       37,   55,   55,   55,   55,    0,   55,   55,   55,   55,
        0,   55,   55,   55,   55,    0,   55,   55,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   16,   16,   16,   16,   16,   16,   17,    1,    1,
        1,    1,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
        1,    1,    1,    1,    1,    1,   18,   19,   20,   21,

       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[44] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    4,    3,    3,    3,
        3,    3,    3,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[678] =
    {   0,
        0,    0, 1653, 1652,    0,    0, 1659, 1662, 1662,   41,
       43, 1653,    0, 1650,   40,   40, 1615, 1638,   72,   46,
       95,   97,  123,   46,   40,   42, 1621,   99,   53,  127,
      137, 1622,   58, 1620, 1662, 1639, 1662,   46,  119,  121,
     1645, 1662,    0, 1642, 1641, 1662,    0,  152, 1630,  143,
     1662,    0,  165,    0,  169, 1625,    0, 1613, 1607, 1619,
     1606, 1611, 1614, 1618, 1612, 1619, 1613, 1611, 1598, 1623,
     1599, 1594,    0, 1608, 1596, 1601, 1592, 1593,  114,    0,
        0,    0, 1595, 1598, 1594, 1591, 1586, 1662,    0,  182,
      195, 1603,  199,    0,  205,  218,  222, 1584, 1587, 1592,

     1594, 1605, 1596, 1592, 1581, 1590, 1590, 1587, 1598,  120,
      226, 1597, 1580, 1582, 1578, 1581, 1576, 1591, 1563, 1573,
     1576, 1577, 1570, 1574, 1566,  240,  234, 1576, 1575,  255,
      268,  272,  278,  289,  295,  299, 1569, 1548,    0, 1553,
     1552, 1561, 1576,    0,    0, 1563, 1547,  294, 1573,  295,
     1550, 1563, 1544, 1547,  304, 1557, 1557, 1543,  306, 1553,
     1554, 1563, 1554, 1550, 1538, 1559,  319, 1551, 1550, 1549,
      324,  332,  343,  349,  355,  361,  374,  380,  393, 1548,
     1528, 1533, 1525, 1539, 1529,  383,    0, 1533, 1536, 1525,
     1538,  308, 1523, 1532, 1522,    0, 1530, 1520, 1515, 1508,

     1538, 1510, 1509, 1513, 1522, 1514, 1505, 1498, 1504, 1529,
     1503, 1516, 1519, 1518, 1517,  400,  410,  423,  429,  442,
      446,  452, 1516,  459,  470,  476, 1496, 1499, 1520, 1494,
        0, 1497, 1498, 1484, 1495, 1485, 1502, 1492, 1489, 1498,
     1489, 1483, 1494, 1481,    0, 1493, 1504, 1493, 1502, 1475,
     1480, 1474, 1486, 1497, 1474, 1468, 1475, 1493, 1476, 1484,
     1483,  480,  486, 1482,  493,  504,  510,  516,  522,  528,
      541,  547,  560,    0, 1460,  336, 1458,    0, 1459, 1462,
     1472, 1471, 1470, 1469, 1460, 1454, 1470, 1448, 1460, 1446,
     1463, 1462, 1450, 1445, 1470, 1461, 1439, 1441, 1441, 1444,

        0, 1448, 1437, 1437, 1454, 1453, 1452,  566,  572,  578,
      591,  597,  610,  614,  620, 1451,  627,  638,  644, 1431,
     1436, 1433, 1442,    0, 1441,    0, 1433,    0,    0, 1443,
     1421, 1433, 1436, 1433, 1434, 1445, 1432, 1423, 1430, 1430,
     1424, 1427, 1412, 1424, 1424, 1422, 1411,    0, 1426, 1425,
      648,  654, 1424,  661,  672,  678,  682,  688,  701,  707,
      720, 1430, 1421, 1407, 1402,    0,    0, 1410, 1413, 1403,
     1398,    0, 1397,  381, 1402, 1400, 1394, 1402, 1396, 1391,
        0, 1405,    0, 1402, 1401, 1405, 1404, 1403,  724,  730,
      743,  749,  762,  768, 1402,  775,  786,  792, 1392, 1397,

     1394,    0, 1384, 1379,    0,    0,    0, 1387, 1390, 1389,
     1384, 1370, 1373,    0,    0, 1397, 1369, 1291, 1286, 1268,
      798, 1261,  805,  816,  822,  828,  841,  847,  860, 1241,
     1254,    0, 1662, 1662, 1236, 1218, 1216, 1197, 1204,    0,
     1190, 1188,    0, 1191, 1178, 1171,  866,  879,  885,  898,
      904, 1165,  911,  922,  928, 1151, 1133, 1141, 1111, 1126,
        0, 1096, 1093, 1082, 1089, 1072,  934, 1065,  941,  952,
      958,  964,  977,  983,  996, 1066, 1034, 1015, 1024,  996,
        0, 1017,  992,  991,  978,  972, 1002, 1015, 1021, 1034,
     1040,  959, 1047, 1058, 1064,  935,  935,  920,  905,  897,

      881,    0,  893,  880,    0, 1070,  874, 1077, 1088, 1094,
     1100, 1113, 1119, 1132,  856,  858,  829,    0,  821,  808,
      817,  800,  793,  787, 1138, 1151, 1157, 1170, 1176,  770,
     1183,    0, 1196,  746,    0,  752,  730,  717,  725, 1662,
      715,    0, 1202,  702, 1209, 1222, 1228, 1241,    0,  675,
        0,    0,  663,  673,  656,  649, 1247, 1260, 1266,  639,
        0,  617,  606,  605,  592,    0, 1273, 1662,    0,  567,
      559,  567,  561, 1662,  535,  535,  536,  523,    0,    0,
        0,  517,  511,  505,  488,    0,  481,  471,  454,  447,
        0,  437,  424,  418,  405,    0,  402,  401, 1662, 1289,

     1293, 1297, 1301, 1305, 1309, 1311,  389,  383, 1313,  370,
     1315, 1317,  338, 1319, 1321,  325, 1323, 1325,  304, 1327,
     1329,  287, 1331, 1333,  277, 1335, 1337,  264, 1339, 1341,
      261, 1343, 1345,  248, 1347, 1349,  236, 1351, 1353,  227,
     1355, 1357,  214, 1359, 1361,  203,  190, 1363, 1365,  173,
     1367, 1369,  159,  157, 1371, 1373,  147, 1375,  116,  114,
     1377, 1379, 1381,   75, 1383, 1385, 1387,   70, 1389, 1391,
     1393,   67, 1395, 1397, 1399,   48, 1401
    } ;

static yyconst flex_int16_t yy_def[678] =
    {   0,
      599,    1,  600,  600,  601,  601,  599,  599,  599,  599,
      599,  602,  603,  604,  599,  599,   16,  599,  599,   19,
       19,   19,   19,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,  599,  599,  599,  599,  599,  599,
      602,  599,  603,  604,  599,  599,  605,  599,  606,   48,
      599,  607,  608,   23,   23,   55,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,  599,  605,  599,
       90,  609,  610,  607,  599,   95,   55,   97,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,  599,  126,  611,  612,  599,
      130,  599,  599,  613,  133,   97,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,  599,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,  127,  127,  614,  615,
      599,  599,  616,  172,  599,  599,  176,  599,  178,  136,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,  599,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,  599,  617,  618,  599,  599,  217,  599,  219,
      599,  599,  599,  599,  619,  224,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,  599,  599,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,  620,
      621,  599,  599,  599,  599,  622,  265,  599,  599,  599,
      270,  599,  272,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,  599,  599,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,  599,  623,  624,  599,  599,  599,
      310,  599,  312,  599,  599,  599,  599,  625,  317,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,  599,
      599,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,  626,  627,
      599,  599,  599,  599,  628,  354,  599,  599,  358,  599,
      360,   23,   23,   23,   23,   23,   23,  599,  599,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,  599,  629,  630,  599,  599,
      390,  599,  392,  599,  599,  599,  631,  396,   23,   23,

       23,   23,  599,  599,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,  632,  633,
      599,  599,  599,  634,  423,  599,  426,  599,  428,   23,
       23,   23,  599,  599,   23,   23,   23,   23,   23,   23,
       23,   23,   23,  599,  635,  636,  599,  447,  599,  449,
      599,  599,  599,  637,  453,   23,   23,   23,   23,   23,
       23,   23,   23,   23,  638,  639,  599,  599,  599,  640,
      469,  599,  472,  599,  474,   23,   23,   23,   23,   23,
       23,   23,   23,  599,  641,  642,  599,  487,  599,  489,
      599,  599,  599,  643,  493,   23,   23,   23,   23,   23,

       23,   23,  644,  645,  646,  599,  599,  599,  647,  508,
      599,  511,  599,  513,   23,   23,   23,   23,   23,   23,
      599,  648,  599,  649,  599,  525,  599,  527,  599,  599,
      599,  650,  531,   23,   23,   23,   23,   23,  651,  599,
      652,  653,  599,  599,  599,  545,  599,  547,  654,   23,
       23,   23,   23,  599,  655,  656,  599,  557,  599,  599,
      657,   23,   23,  599,  658,  659,  599,  599,  660,   23,
       23,  661,  662,  599,   23,   23,  599,  663,  664,   23,
       23,  665,  666,  599,  667,  668,  669,  670,  599,  671,
      672,  673,  674,  599,  675,  676,  677,  599,    0,  599,

      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599
    } ;

static yyconst flex_int16_t yy_nxt[1706] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   18,   19,   20,   20,
       21,   20,   22,   23,   23,   24,   23,   23,   25,   23,
       26,   27,   28,   23,   29,   30,   31,   32,   33,   34,
       23,   23,   23,   38,   39,   40,   39,   46,   38,   39,
      528,   47,   48,   48,   48,   48,   49,   50,   50,   50,
       50,   50,   50,   65,   51,   67,   55,   69,   66,  593,
       75,   68,  588,   70,   76,   85,   54,  583,   71,   86,
       52,   54,   54,   54,   55,   55,   55,   55,   49,   55,
       55,   55,   56,   55,   55,   54,   57,   54,   54,   54,

       54,   54,   58,   54,   54,   54,   54,   54,   54,   59,
       54,   54,   54,   54,   54,   55,  574,   55,  573,   73,
       60,   40,   39,   38,   39,   61,   62,   54,  149,  150,
       64,  119,   63,   74,   54,   54,   54,   54,   54,  599,
       54,   54,   54,   54,   54,   54,   77,   54,  120,  569,
       80,   81,   78,   54,   82,   91,   91,   91,   91,  561,
       54,  556,   83,   79,   90,   90,   90,   90,   49,   91,
       91,   91,   91,   91,   91,  549,   51,   95,   95,   95,
       95,   97,   97,   97,   97,   49,   97,   97,   97,   97,
       97,   97,  528,   57,  126,  126,  126,  126,   49,  127,

      127,  127,  127,  127,  127,  524,   51,  127,  127,  127,
      127,  130,  130,  130,  130,  132,  514,  133,  133,  133,
      133,  134,  135,  135,  135,  135,  135,  135,  599,  490,
      135,  135,  135,  135,  136,  136,  136,  136,  475,  136,
      136,  136,  136,  136,  136,  151,  168,  168,  168,  168,
      450,  152,  167,  167,  167,  167,   49,  168,  168,  168,
      168,  168,  168,  429,   51,  171,  393,  172,  172,  172,
      172,  173,  174,  174,  174,  174,  174,  174,  599,  361,
      174,  174,  174,  174,  175,  175,  175,  175,  132,  313,
      176,  176,  176,  176,  134,  177,  177,  177,  177,  177,

      177,  178,  178,  178,  178,  599,  273,  177,  177,  177,
      177,  180,  180,  180,  180,  193,  180,  180,  180,  180,
      180,  180,  189,  190,  191,  199,  204,  220,  239,  200,
      194,  167,  167,  167,  167,  599,  216,  216,  216,  216,
      179,  205,  171,  240,  217,  217,  217,  217,  173,  218,
      218,  218,  218,  218,  218,  219,  219,  219,  219,  599,
      321,  218,  218,  218,  218,  221,  322,  175,  175,  175,
      175,  132,  131,  222,  222,  222,  222,  134,  223,  223,
      223,  223,  223,  223,  599,   96,  223,  223,  223,  223,
      132,   94,  224,  224,  224,  224,  225,  226,  226,  226,

      226,  226,  226,  599,  232,  226,  226,  226,  226,  408,
      262,  233,  216,  216,  216,  216,  409,  596,  596,  234,
      171,  596,  263,  263,  263,  263,  173,  264,  264,  264,
      264,  264,  264,  599,  591,  264,  264,  264,  264,  171,
      596,  265,  265,  265,  265,  266,  267,  267,  267,  267,
      267,  267,  599,  591,  267,  267,  267,  267,  268,  268,
      268,  268,  132,  591,  269,  269,  269,  269,  134,  132,
      586,  270,  270,  270,  270,  225,  271,  271,  271,  271,
      271,  271,  272,  272,  272,  272,  599,  591,  271,  271,
      271,  271,  308,  308,  308,  308,  171,  586,  309,  309,

      309,  309,  173,  171,  586,  310,  310,  310,  310,  266,
      311,  311,  311,  311,  311,  311,  312,  312,  312,  312,
      599,  579,  311,  311,  311,  311,  314,  586,  268,  268,
      268,  268,  132,  579,  269,  269,  269,  269,  132,  579,
      315,  315,  315,  315,  225,  316,  316,  316,  316,  316,
      316,  599,  566,  316,  316,  316,  316,  132,  581,  317,
      317,  317,  317,  318,  319,  319,  319,  319,  319,  319,
      599,  580,  319,  319,  319,  319,  351,  579,  308,  308,
      308,  308,  171,  566,  309,  309,  309,  309,  171,  576,
      352,  352,  352,  352,  266,  353,  353,  353,  353,  353,

      353,  599,  575,  353,  353,  353,  353,  171,  566,  354,
      354,  354,  354,  355,  356,  356,  356,  356,  356,  356,
      599,  542,  356,  356,  356,  356,  357,  357,  357,  357,
      132,  571,  269,  269,  269,  269,  225,  132,  570,  358,
      358,  358,  358,  318,  359,  359,  359,  359,  359,  359,
      360,  360,  360,  360,  599,  532,  359,  359,  359,  359,
      389,  389,  389,  389,  171,  566,  309,  309,  309,  309,
      266,  171,  542,  390,  390,  390,  390,  355,  391,  391,
      391,  391,  391,  391,  392,  392,  392,  392,  599,  523,
      391,  391,  391,  391,  357,  357,  357,  357,  132,  563,

      394,  394,  394,  394,  318,  395,  395,  395,  395,  395,
      395,  599,  562,  395,  395,  395,  395,  132,  509,  396,
      396,  396,  396,  397,  398,  398,  398,  398,  398,  398,
      599,  542,  398,  398,  398,  398,  389,  389,  389,  389,
      171,  523,  421,  421,  421,  421,  355,  422,  422,  422,
      422,  422,  422,  599,  553,  422,  422,  422,  422,  171,
      552,  423,  423,  423,  423,  424,  425,  425,  425,  425,
      425,  425,  599,  551,  425,  425,  425,  425,  132,  550,
      269,  269,  269,  269,  318,  132,  494,  426,  426,  426,
      426,  397,  427,  427,  427,  427,  427,  427,  428,  428,

      428,  428,  599,  542,  427,  427,  427,  427,  171,  540,
      309,  309,  309,  309,  355,  171,  523,  447,  447,  447,
      447,  424,  448,  448,  448,  448,  448,  448,  449,  449,
      449,  449,  599,  486,  448,  448,  448,  448,  132,  538,
      451,  451,  451,  451,  397,  452,  452,  452,  452,  452,
      452,  599,  537,  452,  452,  452,  452,  132,  536,  453,
      453,  453,  453,  454,  455,  455,  455,  455,  455,  455,
      599,  535,  455,  455,  455,  455,  171,  534,  467,  467,
      467,  467,  424,  468,  468,  468,  468,  468,  468,  599,
      470,  468,  468,  468,  468,  171,  523,  469,  469,  469,

      469,  470,  471,  471,  471,  471,  471,  471,  599,  486,
      471,  471,  471,  471,  132,  520,  269,  269,  269,  269,
      397,  132,  519,  472,  472,  472,  472,  454,  473,  473,
      473,  473,  473,  473,  474,  474,  474,  474,  599,  518,
      473,  473,  473,  473,  171,  517,  309,  309,  309,  309,
      424,  171,  516,  487,  487,  487,  487,  470,  488,  488,
      488,  488,  488,  488,  489,  489,  489,  489,  599,  515,
      488,  488,  488,  488,  132,  454,  491,  491,  491,  491,
      454,  492,  492,  492,  492,  492,  492,  599,  505,  492,
      492,  492,  492,  132,  486,  493,  493,  493,  493,  494,

      495,  495,  495,  495,  495,  495,  599,  446,  495,  495,
      495,  495,  171,  502,  506,  506,  506,  506,  470,  507,
      507,  507,  507,  507,  507,  599,  501,  507,  507,  507,
      507,  171,  500,  508,  508,  508,  508,  509,  510,  510,
      510,  510,  510,  510,  599,  499,  510,  510,  510,  510,
      132,  498,  269,  269,  269,  269,  454,  132,  497,  511,
      511,  511,  511,  494,  512,  512,  512,  512,  512,  512,
      513,  513,  513,  513,  599,  496,  512,  512,  512,  512,
      171,  424,  309,  309,  309,  309,  470,  171,  486,  525,
      525,  525,  525,  509,  526,  526,  526,  526,  526,  526,

      527,  527,  527,  527,  599,  446,  526,  526,  526,  526,
      132,  483,  529,  529,  529,  529,  494,  530,  530,  530,
      530,  530,  530,  599,  482,  530,  530,  530,  530,  132,
      481,  531,  531,  531,  531,  532,  533,  533,  533,  533,
      533,  533,  599,  480,  533,  533,  533,  533,  171,  479,
      543,  543,  543,  543,  509,  544,  544,  544,  544,  544,
      544,  599,  478,  544,  544,  544,  544,  171,  477,  545,
      545,  545,  545,  476,  546,  546,  546,  546,  546,  546,
      599,  397,  546,  546,  546,  546,  132,   93,  269,  269,
      269,  269,  494,  132,  446,  547,  547,  547,  547,  532,

      548,  548,  548,  548,  548,  548,  599,  388,  548,  548,
      548,  548,  171,  464,  309,  309,  309,  309,  509,  171,
      463,  557,  557,  557,  557,  462,  558,  558,  558,  558,
      558,  558,  599,  461,  558,  558,  558,  558,  132,  460,
      559,  559,  559,  559,  532,  560,  560,  560,  560,  560,
      560,  599,  459,  560,  560,  560,  560,  171,  458,  567,
      567,  567,  567,  457,  568,  568,  568,  568,  568,  568,
      599,  456,  568,  568,  568,  568,  132,  355,  269,  269,
      269,  269,  532,  171,  446,  309,  309,  309,  309,   35,
       35,   35,   35,   37,   37,   37,   37,   41,   41,   41,

       41,   43,  388,   43,   43,   44,   44,   44,   44,   89,
      443,   89,   89,   92,   92,  128,  128,  169,  169,  170,
      170,  213,  213,  214,  214,  260,  260,  261,  261,  305,
      305,  306,  306,  349,  349,  350,  350,  386,  386,  387,
      387,  419,  419,  420,  420,  444,  444,  445,  445,  465,
      465,  466,  466,  484,  484,  485,  485,  503,  503,  504,
      504,  521,  521,  522,  522,  539,  539,  541,  541,  554,
      554,  555,  555,  564,  564,  565,  565,  572,  572,  577,
      577,  578,  578,  582,  582,  584,  584,  585,  585,  587,
      587,  589,  589,  590,  590,  592,  592,  594,  594,  595,

      595,  597,  597,  598,  598,  442,  441,  440,  439,  438,
      437,  436,  435,  434,  433,  432,  431,  430,  318,   93,
      388,  307,  418,  417,  416,  415,  414,  413,  412,  411,
      410,  407,  406,  405,  404,  403,  402,  401,  400,  399,
      266,  388,  307,  385,  384,  383,  382,  381,  380,  379,
      378,  377,  376,  375,  374,  373,  372,  371,  370,  369,
      368,  367,  366,  365,  364,  363,  362,  225,   93,  307,
      215,  348,  347,  346,  345,  344,  343,  342,  341,  340,
      339,  338,  337,  336,  335,  334,  333,  332,  331,  330,
      329,  328,  327,  326,  325,  324,  323,  320,  173,  307,

      215,  304,  303,  302,  301,  300,  299,  298,  297,  296,
      295,  294,  293,  292,  291,  290,  289,  288,  287,  286,
      285,  284,  283,  282,  281,  280,  279,  278,  277,  276,
      275,  274,  134,   93,  215,  129,  259,  258,  257,  256,
      255,  254,  253,  252,  251,  250,  249,  248,  247,  246,
      245,  244,  243,  242,  241,  238,  237,  236,  235,  231,
      230,  229,  228,  227,  599,  215,  129,  599,  212,  211,
      210,  209,  208,  207,  206,  203,  202,  201,  198,  197,
      196,  195,  192,  188,  187,  186,  185,  184,  183,  182,
      181,   93,  129,  166,  165,  164,  163,  162,  161,  160,

      159,  158,  157,  156,  155,  154,  153,  148,  147,  146,
      145,  144,  143,  142,  141,  140,  139,  138,  137,  129,
      125,  124,  123,  122,  121,  118,  117,  116,  115,  114,
      113,  112,  111,  110,  109,  108,  107,  106,  105,  104,
      103,  102,  101,  100,   99,   98,   93,   44,   45,   42,
       88,   87,   84,   72,   53,  599,   45,   42,  599,   36,
       36,    7,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,

      599,  599,  599,  599,  599
    } ;

static yyconst flex_int16_t yy_chk[1706] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   10,   10,   11,   11,   15,   38,   38,
      676,   15,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   24,   16,   25,   20,   26,   24,  672,
       29,   25,  668,   26,   29,   33,   20,  664,   26,   33,
       16,   19,   19,   20,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   21,  660,   22,  659,   28,
       21,   39,   39,   40,   40,   21,   21,   22,  110,  110,
       22,   79,   21,   28,   22,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   30,   23,   79,  657,
       31,   31,   30,   23,   31,   50,   50,   50,   50,  654,
       23,  653,   31,   30,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,  650,   48,   53,   53,   53,
       53,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,  647,   55,   90,   90,   90,   90,   90,   90,

       90,   90,   90,   90,   90,  646,   90,   91,   91,   91,
       91,   93,   93,   93,   93,   95,  643,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   96,  640,
       96,   96,   96,   96,   97,   97,   97,   97,  637,   97,
       97,   97,   97,   97,   97,  111,  127,  127,  127,  127,
      634,  111,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  631,  126,  130,  628,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  131,  625,
      131,  131,  131,  131,  132,  132,  132,  132,  133,  622,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,

      133,  134,  134,  134,  134,  135,  619,  135,  135,  135,
      135,  136,  136,  136,  136,  150,  136,  136,  136,  136,
      136,  136,  148,  148,  148,  155,  159,  616,  192,  155,
      150,  167,  167,  167,  167,  167,  171,  171,  171,  171,
      613,  159,  172,  192,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  173,  173,  173,  173,  174,
      276,  174,  174,  174,  174,  175,  276,  175,  175,  175,
      175,  176,  610,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  177,  608,  177,  177,  177,  177,
      178,  607,  178,  178,  178,  178,  178,  178,  178,  178,

      178,  178,  178,  179,  186,  179,  179,  179,  179,  374,
      216,  186,  216,  216,  216,  216,  374,  598,  597,  186,
      217,  595,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  218,  594,  218,  218,  218,  218,  219,
      593,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  220,  592,  220,  220,  220,  220,  221,  221,
      221,  221,  222,  590,  222,  222,  222,  222,  222,  224,
      589,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  225,  225,  225,  225,  226,  588,  226,  226,
      226,  226,  262,  262,  262,  262,  263,  587,  263,  263,

      263,  263,  263,  265,  585,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  266,  266,  266,  266,
      267,  584,  267,  267,  267,  267,  268,  583,  268,  268,
      268,  268,  269,  582,  269,  269,  269,  269,  270,  578,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  271,  577,  271,  271,  271,  271,  272,  576,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      273,  575,  273,  273,  273,  273,  308,  573,  308,  308,
      308,  308,  309,  572,  309,  309,  309,  309,  310,  571,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,

      310,  311,  570,  311,  311,  311,  311,  312,  565,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      313,  564,  313,  313,  313,  313,  314,  314,  314,  314,
      315,  563,  315,  315,  315,  315,  315,  317,  562,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      318,  318,  318,  318,  319,  560,  319,  319,  319,  319,
      351,  351,  351,  351,  352,  556,  352,  352,  352,  352,
      352,  354,  555,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  355,  355,  355,  355,  356,  554,
      356,  356,  356,  356,  357,  357,  357,  357,  358,  553,

      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  359,  550,  359,  359,  359,  359,  360,  544,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      361,  541,  361,  361,  361,  361,  389,  389,  389,  389,
      390,  539,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  391,  538,  391,  391,  391,  391,  392,
      537,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  393,  536,  393,  393,  393,  393,  394,  534,
      394,  394,  394,  394,  394,  396,  530,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  397,  397,

      397,  397,  398,  524,  398,  398,  398,  398,  421,  523,
      421,  421,  421,  421,  421,  423,  522,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  424,  424,
      424,  424,  425,  521,  425,  425,  425,  425,  426,  520,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  427,  519,  427,  427,  427,  427,  428,  517,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      429,  516,  429,  429,  429,  429,  447,  515,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  448,
      507,  448,  448,  448,  448,  449,  504,  449,  449,  449,

      449,  449,  449,  449,  449,  449,  449,  449,  450,  503,
      450,  450,  450,  450,  451,  501,  451,  451,  451,  451,
      451,  453,  500,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  454,  454,  454,  454,  455,  499,
      455,  455,  455,  455,  467,  498,  467,  467,  467,  467,
      467,  469,  497,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  470,  470,  470,  470,  471,  496,
      471,  471,  471,  471,  472,  492,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  473,  486,  473,
      473,  473,  473,  474,  485,  474,  474,  474,  474,  474,

      474,  474,  474,  474,  474,  474,  475,  484,  475,  475,
      475,  475,  487,  483,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  488,  482,  488,  488,  488,
      488,  489,  480,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  490,  479,  490,  490,  490,  490,
      491,  478,  491,  491,  491,  491,  491,  493,  477,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      494,  494,  494,  494,  495,  476,  495,  495,  495,  495,
      506,  468,  506,  506,  506,  506,  506,  508,  466,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,

      509,  509,  509,  509,  510,  465,  510,  510,  510,  510,
      511,  464,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  512,  463,  512,  512,  512,  512,  513,
      462,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  514,  460,  514,  514,  514,  514,  525,  459,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  526,  458,  526,  526,  526,  526,  527,  457,  527,
      527,  527,  527,  456,  527,  527,  527,  527,  527,  527,
      528,  452,  528,  528,  528,  528,  529,  446,  529,  529,
      529,  529,  529,  531,  445,  531,  531,  531,  531,  531,

      531,  531,  531,  531,  531,  531,  533,  444,  533,  533,
      533,  533,  543,  442,  543,  543,  543,  543,  543,  545,
      441,  545,  545,  545,  545,  439,  545,  545,  545,  545,
      545,  545,  546,  438,  546,  546,  546,  546,  547,  437,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  548,  436,  548,  548,  548,  548,  557,  435,  557,
      557,  557,  557,  431,  557,  557,  557,  557,  557,  557,
      558,  430,  558,  558,  558,  558,  559,  422,  559,  559,
      559,  559,  559,  567,  420,  567,  567,  567,  567,  600,
      600,  600,  600,  601,  601,  601,  601,  602,  602,  602,

      602,  603,  419,  603,  603,  604,  604,  604,  604,  605,
      418,  605,  605,  606,  606,  609,  609,  611,  611,  612,
      612,  614,  614,  615,  615,  617,  617,  618,  618,  620,
      620,  621,  621,  623,  623,  624,  624,  626,  626,  627,
      627,  629,  629,  630,  630,  632,  632,  633,  633,  635,
      635,  636,  636,  638,  638,  639,  639,  641,  641,  642,
      642,  644,  644,  645,  645,  648,  648,  649,  649,  651,
      651,  652,  652,  655,  655,  656,  656,  658,  658,  661,
      661,  662,  662,  663,  663,  665,  665,  666,  666,  667,
      667,  669,  669,  670,  670,  671,  671,  673,  673,  674,

      674,  675,  675,  677,  677,  417,  416,  413,  412,  411,
      410,  409,  408,  404,  403,  401,  400,  399,  395,  388,
      387,  386,  385,  384,  382,  380,  379,  378,  377,  376,
      375,  373,  371,  370,  369,  368,  365,  364,  363,  362,
      353,  350,  349,  347,  346,  345,  344,  343,  342,  341,
      340,  339,  338,  337,  336,  335,  334,  333,  332,  331,
      330,  327,  325,  323,  322,  321,  320,  316,  307,  306,
      305,  304,  303,  302,  300,  299,  298,  297,  296,  295,
      294,  293,  292,  291,  290,  289,  288,  287,  286,  285,
      284,  283,  282,  281,  280,  279,  277,  275,  264,  261,

      260,  259,  258,  257,  256,  255,  254,  253,  252,  251,
      250,  249,  248,  247,  246,  244,  243,  242,  241,  240,
      239,  238,  237,  236,  235,  234,  233,  232,  230,  229,
      228,  227,  223,  215,  214,  213,  212,  211,  210,  209,
      208,  207,  206,  205,  204,  203,  202,  201,  200,  199,
      198,  197,  195,  194,  193,  191,  190,  189,  188,  185,
      184,  183,  182,  181,  180,  170,  169,  168,  166,  165,
      164,  163,  162,  161,  160,  158,  157,  156,  154,  153,
      152,  151,  149,  147,  146,  143,  142,  141,  140,  138,
      137,  129,  128,  125,  124,  123,  122,  121,  120,  119,

      118,  117,  116,  115,  114,  113,  112,  109,  108,  107,
      106,  105,  104,  103,  102,  101,  100,   99,   98,   92,
       87,   86,   85,   84,   83,   78,   77,   76,   75,   74,
       72,   71,   70,   69,   68,   67,   66,   65,   64,   63,
       62,   61,   60,   59,   58,   56,   49,   45,   44,   41,
       36,   34,   32,   27,   18,   17,   14,   12,    7,    4,
        3,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,

      599,  599,  599,  599,  599
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[68] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "ClntLexer.l"
#line 5 "ClntLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 31 "ClntLexer.l"
  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_ClntParser_stype yylval;
}
#line 1043 "ClntLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 44 "ClntLexer.l"


#line 1148 "ClntLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 600 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1662 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 46 "ClntLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 47 "ClntLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "ClntLexer.l"
{ return ClntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "ClntLexer.l"
{ return ClntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "ClntLexer.l"
{ return ClntParser::ADDRES_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "ClntLexer.l"
{ return ClntParser::IA_;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "ClntLexer.l"
{ return ClntParser::TA_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "ClntLexer.l"
{ return ClntParser::IAID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "ClntLexer.l"
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 55 "ClntLexer.l"
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 56 "ClntLexer.l"
{ return ClntParser::LOGLEVEL_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 57 "ClntLexer.l"
{ return ClntParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 58 "ClntLexer.l"
{ return ClntParser::LOGNAME_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 59 "ClntLexer.l"
{ return ClntParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 60 "ClntLexer.l"
{ return ClntParser::SCRIPTS_DIR_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 61 "ClntLexer.l"
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 62 "ClntLexer.l"
{ return ClntParser::VALID_TIME_; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 63 "ClntLexer.l"
{ return ClntParser::T1_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 64 "ClntLexer.l"
{ return ClntParser::T2_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 65 "ClntLexer.l"
{ return ClntParser::OPTION_; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 66 "ClntLexer.l"
{ return ClntParser::DNS_SERVER_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 67 "ClntLexer.l"
{ return ClntParser::DOMAIN_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 68 "ClntLexer.l"
{ return ClntParser::NTP_SERVER_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 69 "ClntLexer.l"
{ return ClntParser::TIME_ZONE_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 70 "ClntLexer.l"
{ return ClntParser::SIP_SERVER_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 71 "ClntLexer.l"
{ return ClntParser::SIP_DOMAIN_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 72 "ClntLexer.l"
{ return ClntParser::FQDN_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 73 "ClntLexer.l"
{ return ClntParser::NIS_SERVER_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 74 "ClntLexer.l"
{ return ClntParser::NIS_DOMAIN_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 75 "ClntLexer.l"
{ return ClntParser::NISP_SERVER_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 76 "ClntLexer.l"
{ return ClntParser::NISP_DOMAIN_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 77 "ClntLexer.l"
{ return ClntParser::LIFETIME_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 78 "ClntLexer.l"
{ return ClntParser::REJECT_SERVERS_;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 79 "ClntLexer.l"
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 80 "ClntLexer.l"
{ return ClntParser::RAPID_COMMIT_;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 81 "ClntLexer.l"
{ return ClntParser::UNICAST_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 82 "ClntLexer.l"
{ return ClntParser::STRICT_RFC_NO_ROUTING_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 83 "ClntLexer.l"
{ return ClntParser::PD_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 84 "ClntLexer.l"
{ return ClntParser::PD_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 85 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 86 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_LL_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 87 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_LLT_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 88 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_EN_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 89 "ClntLexer.l"
{ return ClntParser::VENDOR_SPEC_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 90 "ClntLexer.l"
{ return ClntParser::AUTH_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 91 "ClntLexer.l"
{ return ClntParser::DIGEST_NONE_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 92 "ClntLexer.l"
{ return ClntParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 93 "ClntLexer.l"
{ return ClntParser::ANON_INF_REQUEST_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 94 "ClntLexer.l"
;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 96 "ClntLexer.l"
;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 98 "ClntLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 104 "ClntLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 105 "ClntLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 106 "ClntLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 54:
YY_RULE_SETUP
#line 113 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 122 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 131 "ClntLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 141 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 150 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 159 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 168 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 177 "ClntLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 184 "ClntLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return ClntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return ClntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 205 "ClntLexer.l"
{
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return ClntParser::DUID_;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 236 "ClntLexer.l"
{ 
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::HEXNUMBER_;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 245 "ClntLexer.l"
{ 
    if(!sscanf(yytext,"%u",(unsigned int*)&(yylval.ival))) { 
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::INTNUMBER_;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 255 "ClntLexer.l"
{return yytext[0];} 
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 259 "ClntLexer.l"
ECHO;
	YY_BREAK
#line 1707 "ClntLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 600 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 600 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 599);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

yyFlexLexer::~yyFlexLexer()
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

	delete [] (yy_state_buf);
	yyfree((yy_start_stack)  );

}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 259 "ClntLexer.l"



