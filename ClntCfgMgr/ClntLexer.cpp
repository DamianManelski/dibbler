
#line 3 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 92
#define YY_END_OF_BUFFER 93
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[786] =
    {   0,
        1,    1,    0,    0,    0,    0,   93,   91,    2,    1,
        1,   91,   73,   91,   91,   90,   90,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   77,   77,   92,    1,    1,
        1,    0,   85,   73,    0,   85,   75,   74,   90,    0,
        0,   89,    0,   82,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,    9,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   48,   86,
       86,   86,   86,   86,   86,   86,   23,   24,   10,   86,
       86,   86,   86,   86,   76,   74,   90,    0,    0,    0,

       81,   87,   80,   80,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   90,    0,    0,    0,    0,   79,   79,
        0,   80,    0,   80,   86,   86,   69,   86,   86,   86,
       86,   86,   86,   86,   86,   32,   11,   86,   86,   86,
       86,   86,    8,    0,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   90,    0,   88,    0,    0,

        0,   79,    0,   79,    0,   80,   80,   80,   80,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,    3,   86,   86,   86,   86,   86,   86,   86,    0,
       86,   86,   86,   12,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,    0,    0,    0,    0,    0,
       79,   79,   79,   79,    0,   80,   80,   80,    0,   80,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   27,
       86,   86,   86,   86,   33,   86,   86,   86,   86,   86,
       86,   86,    0,    0,   86,   86,   86,   86,   25,   86,

       49,   86,   86,   86,   86,   86,   19,   86,   86,   86,
       86,   86,    6,   86,   86,   86,   86,   86,    0,    0,
        0,    0,   79,   79,   79,    0,   79,    0,    0,   80,
       80,   80,   80,   86,    5,   86,   86,   86,   86,   86,
       86,   86,   53,   51,   86,   86,   86,   86,   86,   86,
       86,   86,   86,    0,    0,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   72,   86,   86,   86,   86,
       86,   86,   45,   86,   86,   86,   88,    0,    0,    0,
        0,    0,   79,   79,   79,   79,    0,   80,   80,   80,
        0,   80,   86,   86,   86,   86,   86,   86,   86,   86,

       86,   86,   86,   52,   86,   86,   86,   86,   40,   86,
       86,   15,   16,    0,    0,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   18,    0,    0,    0,    0,   79,   79,
       79,    0,   79,   84,   80,   80,   80,   80,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   50,
       86,   86,   86,   86,   14,    0,    0,   86,   86,    4,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       13,   86,   29,   86,   86,    0,    0,    0,    0,   83,
       79,   79,   79,   79,   80,   80,   80,    0,   80,   86,

       86,   86,   86,   86,   86,   86,   86,   86,   86,   26,
       86,   86,   86,   17,    0,    0,   37,   36,   28,   86,
       86,   86,   86,   86,   86,   86,   31,   30,   86,   86,
       86,   86,   88,    0,    0,   79,   79,   79,    0,   79,
       80,   80,   80,   80,   71,   86,   86,   86,   86,   86,
       86,   86,   60,   86,   86,   86,   56,   39,   38,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   54,
        0,    0,    0,    0,   79,   79,   79,   79,   80,   80,
       80,    0,   80,    7,   86,   86,   58,   86,   35,   86,
       61,   70,   86,   86,   86,   86,   43,   86,   86,   86,

       68,   86,   86,    0,    0,    0,   79,   79,   79,    0,
       79,   80,   80,   80,   80,   86,   86,   34,   86,   86,
       57,   86,   86,   86,   86,   41,   86,   86,   86,   88,
        0,    0,    0,   79,   79,   79,   79,   80,   80,   80,
        0,   80,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   21,    0,    0,   78,   81,   79,   79,   79,
        0,   79,   80,   80,   80,   80,   86,   86,   62,   86,
       86,   42,   86,   86,   22,   86,    0,    0,   78,    0,
       79,   79,   79,   79,   79,   80,   80,   80,    0,   80,
       86,   86,   63,   86,   86,   86,   86,   86,   86,   86,

       88,   78,   81,   79,    0,   79,   79,   79,   79,   80,
       80,   80,   86,   86,   86,   86,   86,   86,   20,   47,
       86,   86,    0,   78,   79,   79,   79,   79,   80,   80,
       80,   86,   86,   64,   65,   66,   67,   44,   86,    0,
       79,   79,    0,   79,   79,   80,   86,   59,   86,   88,
       79,   79,   80,   86,   86,    0,   79,   79,    0,   55,
       46,   78,   79,   79,   78,   79,   79,    0,    0,   79,
       79,    0,   79,   79,    0,   88,   79,   79,    0,   79,
       79,    0,   79,   79,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
        1,    1,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,    1,    1,    1,    1,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    3,    3,    3,    3,    3,    3,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[871] =
    {   0,
        0,    0, 1600, 1561,    0,    0, 1560, 3862, 3862,   72,
       74, 1554,    0, 1551,   71,   71,   34, 1535,  134,  183,
      227,  187,  239,  296,   77,   71,  194,   43,  188,   87,
      235,  313,   67,   88,   67, 3862, 1544, 3862,  115,  129,
      217, 1550, 3862,    0, 1546, 1512, 3862,    0,  358, 1496,
      376, 3862,    0,  402,    0,  444,   83,   70,    0,   79,
      170,  180,  189,  181,  189,  215,  209,  235,  238,  248,
      284,  246,  247,  245,  264, 1506,  291,  288,    0,  307,
      297,  448,  297,  300,  309,  452,    0,    0,    0,  306,
      311,  309,  351,  358, 3862,    0,  506, 1493,  418, 1492,

      550,    0,  594,  429,  636,  436,  437,  442,  449,  440,
      455, 1503,  461,  459,  459,  452,  463,  465,  466,  504,
      519, 1502,  526,  289,  640, 1501,  523,  569,  567,  569,
      613,  604,  599,  638, 1491,  632,  630,  642,  647,  650,
      645,  651,  645,  692,  524, 1461, 1449, 1445,  738,  570,
      710,  782,  824,  756,  866,  758,    0,  674, 1456, 1455,
      745,  753,  796, 1454,  788, 1446,    0,  802,  788,  805,
      820,  870,    0, 1445,  870,  834,  875,  858,  863,  876,
      875,  866,  883,  867,  883,  874,  913, 1444,  887,  916,
     1443,  900,  916,  906, 1349,  942, 1336, 1335, 1334, 1333,

      719,  970, 1012,  988, 1030, 1056, 1074, 1100, 1118, 1323,
      906,  904,  911,  924, 1102,  906,  923,  917, 1114,  985,
      993,    0, 1055, 1062, 1111, 1106, 1118, 1109, 1124, 1134,
     1118, 1130, 1122,    0, 1132, 1125, 1122, 1117, 1297, 1136,
     1123, 1149, 1136, 1136, 1142, 1153, 1167, 1159, 1152, 1166,
     1148, 1156, 1296, 1158, 1173, 1283, 1282, 1281, 1280, 1196,
     1215, 1233, 1259, 1277, 1242, 1303, 1278, 1315, 1357, 1333,
     1222, 1248, 1264, 1335, 1325, 1322, 1332, 1289, 1339,    0,
     1354, 1357, 1345, 1358,    0, 1350, 1217, 1360, 1362, 1353,
     1372, 1364, 1363, 1374, 1367, 1363, 1376, 1372,    0, 1386,

     1198, 1389, 1384, 1190, 1093, 1389,    0, 1397, 1393, 1397,
     1408, 1092,    0, 1399, 1395, 1408, 1091, 1412, 1078, 1077,
     1076, 1431, 1459, 1075, 1471, 1513, 1489, 1531, 1557, 1568,
     1586, 1612, 1630, 1477, 1086, 1492, 1529, 1575, 1579, 1617,
     1637, 1609,    0, 1612, 1617, 1629, 1630, 1623, 1632, 1623,
     1641, 1642, 1643, 1636, 1632, 1651, 1632, 1646, 1643, 1662,
     1663, 1653, 1662, 1651, 1681,    0, 1682, 1662, 1671, 1667,
     1669, 1674,    0, 1680, 1671, 1679, 1046, 1037, 1036, 1035,
     1733, 1744, 1755, 1773, 1799, 1817, 1707, 1843, 1034, 1855,
     1897, 1873, 1718, 1751, 1762, 1814, 1876, 1859, 1875, 1868,

     1882, 1896, 1904,    0, 1905, 1897, 1045, 1897,    0, 1895,
     1902,    0,    0, 1914, 1894, 1908, 1913, 1912, 1915, 1044,
     1916, 1909, 1909, 1926, 1911, 1924, 1944, 1944, 1932, 1946,
     1948, 1948, 1939,    0, 1031, 1030,  996, 1969, 1993,  995,
     2005, 2047, 2023, 2032, 2091, 2065, 2135, 2109, 1956, 2038,
     1005, 2039, 2087, 2101, 2102, 2143, 2131, 2145, 2129,    0,
     2128, 2136, 2146, 2132,    0, 2143, 2148, 2140, 2137,    0,
     2138, 2149, 2145, 2145, 2141, 2142, 2149, 2174, 2171, 2181,
        0, 2188,    0, 2187, 2188,  992,  991,  990,  989, 2205,
     2231, 2249, 2275, 2293, 2319,  988, 2331, 2373, 2349, 2194,

     2238, 2286, 2334, 2350, 2353, 2336, 2370, 2379, 2376,    0,
     2385, 2372, 2383,    0, 2375, 2372,    0,    0,    0, 2382,
     2387, 2388, 2385, 2390, 2374, 2382,    0,    0, 2380,  990,
     2386, 2404,  960,  953,  944, 2445,  891, 2457, 2499, 2475,
     2543, 2517, 2587, 2561,    0, 2389, 2467,  860, 2495, 2536,
     2548,  859,    0, 2555, 2584, 2593,    0, 3862, 3862, 2592,
     2581, 2593, 2581,  858, 2597, 2600, 2591, 2591, 2597,    0,
      845,  844,  843,  842, 2644, 2662, 2688, 2706, 2732,  841,
     2744, 2786, 2762,    0, 2602, 2639,    0, 2658,    0, 2780,
        0,    0, 2703, 2763, 2747, 2769,    0, 2785, 2779, 2783,

        0, 2785, 2788,  839,  838,  837, 2839,  836, 2851, 2893,
     2869, 2937, 2911, 2981, 2955,  847, 2798,    0, 2871, 2885,
        0, 2925, 2957, 2943, 2987,    0, 2977,  816, 2987,  803,
      802,  801,  800, 3030, 3004, 3074, 3048, 3092,  799, 3118,
     3160, 3136, 2976, 3018,  801, 3055, 3091, 3123, 3133, 3140,
     3138, 3142,    0,  796,  795,  794,    0, 3182,  793, 3204,
     3246, 3222, 3290, 3264, 3334, 3308, 3223, 3238,    0,  385,
     3285,    0, 3300, 3311,    0, 3328,  792,  791,  762,  761,
      760, 3381, 3355, 3425, 3399, 3443,  759, 3469,    0, 3487,
     3328, 3374,    0,  214,  759,  765, 3394, 3393, 3435, 3466,

      756,  728, 3862,  672,    0, 3523,  671, 3535, 3553, 3579,
     3597,    0, 3488, 3539,  675,  665,  666,  667,    0,    0,
     3541, 3577,  659,  658,  657,  617, 3635, 3623, 3653,  616,
        0, 3594, 3616,    0,    0,    0,    0,    0, 3634,  615,
      614,  613,    0, 3679, 3862,    0, 3635,    0, 3641,  612,
      611,  609, 3862, 3636, 3650,  608,  607,  606,    0,    0,
        0,  605,  604,  603,  574,  573,  572,    0,  571,  570,
      560,    0,  530,  529,    0,  528,  527,  526,  525,  419,
      384,    0,  383,  382, 3862, 3705, 3709, 3713, 3717, 3721,
     3725, 3727,  399, 3729, 3731, 3733, 3735, 3737, 3739, 3741,

     3743, 3745, 3747, 3749, 3751, 3753, 3755, 3757, 3759, 3761,
     3763, 3765, 3767, 3769, 3771, 3773, 3775, 3777, 3779, 3781,
     3783, 3785, 3787, 3789, 3791, 3793, 3795, 3797, 3799,  356,
     3801, 3803, 3805,  354, 3807, 3809, 3811,  351,  350, 3813,
     3815, 3817,  285, 3819, 3821,  282,  280, 3823, 3825, 3827,
     3829, 3831,  231, 3833, 3835, 3837, 3839, 3841,  224, 3843,
     3845, 3847,  207, 3849,  143, 3851, 3853, 3855,   79, 3857
    } ;

static yyconst flex_int16_t yy_def[871] =
    {   0,
      785,    1,  786,  786,  787,  787,  785,  785,  785,  785,
      785,  788,  789,  790,  785,  785,   16,  785,  785,   19,
       19,   19,   19,   19,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  785,  785,  785,  785,  785,
      785,  788,  785,  789,  790,  785,  785,  791,  785,  792,
       49,  785,  793,  785,   24,   24,   56,   56,   24,   24,
       24,   56,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  785,  791,  785,  794,   97,  795,

      785,  793,  785,  103,   56,  105,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  785,  144,  796,  797,  798,  785,  149,
      785,  785,  785,  152,  105,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  785,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  145,  145,  797,  799,  800,

      785,  785,  785,  202,  785,  785,  206,  785,  208,  155,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  785,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  801,  785,  802,  803,  785,
      785,  261,  785,  263,  785,  785,  785,  785,  785,  268,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  785,  785,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  804,  805,
      806,  785,  785,  785,  785,  785,  325,  785,  785,  785,
      330,  785,  332,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  785,  785,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  802,  785,  807,  808,
      785,  785,  785,  383,  785,  385,  785,  785,  785,  785,
      785,  390,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  785,  785,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  809,  810,  811,  785,  785,  785,
      785,  785,  441,  785,  785,  445,  785,  447,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  785,  785,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  812,  785,  813,  814,  785,
      785,  491,  785,  493,  785,  785,  785,  785,  497,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  785,  785,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  815,  816,  817,  785,  785,  785,  785,  538,
      785,  541,  785,  543,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  785,  785,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      818,  785,  819,  820,  785,  575,  785,  577,  785,  785,
      785,  785,  581,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,  821,  822,  823,  785,  785,  785,  785,
      609,  785,  612,  785,  614,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  824,
      785,  825,  826,  785,  634,  785,  636,  785,  785,  785,
      785,  640,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  827,  828,  829,  830,  785,  785,  785,
      785,  660,  785,  663,  785,  665,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  831,  785,  832,  785,
      833,  785,  682,  785,  684,  785,  785,  785,  834,  688,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

      835,  836,  785,  837,  838,  785,  785,  785,  708,  785,
      710,  839,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  840,  785,  841,  842,  785,  727,  785,  785,
      843,   24,   24,   24,   24,   24,   24,   24,   24,  844,
      785,  845,  846,  785,  785,  847,   24,   24,   24,  848,
      849,  850,  785,   24,   24,  851,  785,  852,  853,   24,
       24,  854,  855,  856,  857,  785,  858,  859,  860,  861,
      862,  863,  785,  864,  865,  785,  866,  867,  860,  785,
      868,  869,  870,  785,    0,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,

      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785
    } ;

static yyconst flex_int16_t yy_nxt[3937] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   20,   21,   22,   23,   24,   24,
       25,   24,   24,   26,   24,   27,   28,   29,   24,   30,
       31,   32,   33,   34,   35,   24,   24,   24,   19,   20,
       20,   21,   22,   23,   24,   24,   25,   24,   24,   26,
       24,   27,   28,   29,   24,   30,   31,   32,   33,   34,
       35,   24,   24,   24,   39,   40,   41,   40,   47,  785,
       78,  685,   48,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   50,   51,   51,   51,   51,   51,   51,   69,

       52,   72,   91,   94,   70,  785,   78,   73,  106,   81,
       92,  107,   71,   82,   93,  108,   53,   39,   40,   51,
       51,   51,   51,   51,   51,   69,   52,   72,   91,   94,
       70,   41,   40,   73,  106,   81,   92,  107,   71,   82,
       93,  108,   53,   55,   55,  778,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   50,   56,   56,   56,   57,
       56,   58,   55,   59,   55,   55,   55,   55,   55,   60,
       55,   55,   55,   55,   55,   55,   61,   55,   55,   55,
       55,   55,   56,   56,   56,   57,   56,   58,   55,   59,
       55,   55,   55,   55,   55,   60,   55,   55,   55,   55,

       55,   55,   61,   55,   55,   55,   55,   55,   56,  776,
       56,  109,   56,   79,   56,  110,   74,  111,   55,   39,
       40,  112,   55,  113,   75,   55,  771,   80,  715,   55,
       76,  716,   67,  764,   56,   77,   56,  109,   56,   79,
       56,  110,   74,  111,   55,  114,  115,  112,   55,  113,
       75,   55,   62,   80,   56,   55,   76,   63,   67,   83,
      116,   77,   64,   65,   56,   84,   56,   85,  117,   66,
      118,  114,  115,  121,   55,  122,   86,   68,   62,  123,
       56,   55,  753,   63,  752,   83,  116,  746,   64,   65,
       56,   84,   56,   85,  117,   66,  118,  174,  175,  121,

       55,  122,   86,   68,  124,  123,  119,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,  785,   55,   55,
       55,   55,   55,   55,  120,   55,   87,   88,  126,  127,
      124,   55,  119,  128,  129,   89,  134,  135,   55,  136,
      139,  140,  141,   90,   55,   55,   55,   55,   55,   55,
      120,   55,  731,  726,  126,  127,  712,   55,  681,  128,
      129,   89,  134,  135,   55,  136,  139,  140,  141,   90,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   98,
       99,   99,   99,   99,   99,   99,  142,   52,   99,   99,
       99,   99,   99,   99,   99,   99,   99,  143,  693,  694,

      695,  102,  696,  782,  782,  782,   99,   99,   99,   99,
       99,   99,  142,   52,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  143,  104,  104,  104,  104,  104,  104,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  785,
      775,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      104,  104,  104,  104,  104,  104,  105,  105,  105,  105,
      105,  105,  105,  105,  105,   98,  105,  105,  105,  105,
      105,  105,  130,   59,  137,  156,  157,  158,  159,  131,
      160,  161,  132,  163,  164,  165,  133,  166,  167,  168,
      169,  138,  105,  105,  105,  105,  105,  105,  130,   59,

      137,  156,  157,  158,  159,  131,  160,  161,  132,  163,
      164,  165,  133,  166,  167,  168,  169,  138,  144,  144,
      144,  144,  144,  144,  144,  144,  144,   50,  145,  145,
      145,  145,  145,  145,  170,   52,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  171,  785,  782,  775,  779,
      775,  768,  173,  179,  145,  145,  145,  145,  145,  145,
      170,   52,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  171,  150,  150,  150,  150,  150,  150,  173,  179,
      785,  775,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  768,  703,  768,  759,  769,  180,  181,  150,  150,

      150,  150,  150,  150,  151,  182,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  153,  154,  154,  154,  154,
      154,  154,  180,  181,  768,  759,  680,  759,  743,  657,
      759,  182,  743,  756,  743,  705,  633,  689,  743,  183,
      184,  185,  154,  154,  154,  154,  154,  154,  155,  155,
      155,  155,  155,  155,  155,  155,  155,   50,  155,  155,
      155,  155,  155,  155,  176,  183,  184,  185,  186,  188,
      177,  189,  190,  191,  192,  193,  194,  195,  705,  680,
      101,  737,  736,  735,  155,  155,  155,  155,  155,  155,
      176,  734,  661,  705,  186,  188,  177,  189,  190,  191,

      192,  193,  194,  195,  196,  196,  196,  196,  196,  196,
      196,  196,  196,   50,  197,  197,  197,  197,  197,  197,
      213,   52,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      197,  197,  197,  197,  197,  197,  213,   52,  201,  680,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  203,
      204,  204,  204,  204,  204,  204,  785,  211,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  723,  718,  717,
      641,  705,  703,  680,  212,  216,  204,  204,  204,  204,
      204,  204,  151,  217,  206,  206,  206,  206,  206,  206,

      206,  206,  206,  153,  207,  207,  207,  207,  207,  207,
      212,  216,  633,  574,  610,  680,  633,  101,  669,  217,
      582,  657,  633,  574,  654,  652,  218,  220,  222,  223,
      207,  207,  207,  207,  207,  207,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  224,  209,  209,  209,  209,
      209,  209,  218,  220,  222,  223,  643,  539,  633,  574,
      489,  225,  498,  101,  574,  489,  101,  598,  590,  586,
      233,  224,  209,  209,  209,  209,  209,  209,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  225,  210,  210,
      210,  210,  210,  210,  226,  231,  233,  234,  235,  236,

      239,  240,  237,  227,  228,  229,  238,  241,  242,  243,
      232,  244,  442,  248,  210,  210,  210,  210,  210,  210,
      226,  231,  252,  234,  235,  236,  239,  240,  237,  227,
      228,  229,  238,  241,  242,  243,  232,  244,  245,  248,
      249,  253,  254,  271,  272,  273,  274,  278,  252,  279,
      275,  250,  280,  246,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  785,  245,  574,  249,  253,  254,  271,
      272,  273,  274,  278,  489,  279,  275,  250,  280,  246,
      201,  571,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  203,  262,  262,  262,  262,  262,  262,  785,  568,

      262,  262,  262,  262,  262,  262,  262,  262,  262,  391,
      101,  489,  380,  380,  502,  284,  326,  489,  262,  262,
      262,  262,  262,  262,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  285,  264,  264,  264,  264,  264,  264,
      265,  284,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  380,  101,  472,  462,  269,  101,  380,  259,  285,
      264,  264,  264,  264,  264,  264,  151,  435,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  153,  267,  267,
      267,  267,  267,  267,  785,  286,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  394,  203,  380,  259,  259,

      375,  371,  365,  287,  267,  267,  267,  267,  267,  267,
      151,  286,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  269,  270,  270,  270,  270,  270,  270,  785,  287,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  276,
      281,  288,  289,  277,  290,  291,  292,  282,  270,  270,
      270,  270,  270,  270,  295,  283,  296,  297,  298,  293,
      299,  300,  301,  303,  304,  276,  281,  288,  289,  277,
      290,  291,  292,  282,  294,  305,  306,  307,  308,  309,
      295,  283,  296,  297,  298,  293,  299,  300,  301,  303,
      304,  310,  311,  312,  313,  314,  315,  317,  318,  364,

      294,  305,  306,  307,  308,  309,  322,  361,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  310,  311,  312,
      313,  314,  315,  317,  318,  201,  348,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  203,  324,  324,  324,
      324,  324,  324,  785,  334,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  324,  324,  324,  324,  324,  324,  201,
      334,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      326,  327,  327,  327,  327,  327,  327,  785,  335,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  341,  153,

      336,  101,  259,  148,  101,  316,  302,  327,  327,  327,
      327,  327,  327,  151,  335,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  153,  151,  336,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  269,  331,  331,  331,
      331,  331,  331,  785,  785,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  259,  148,  256,  785,  255,  337,
      338,  339,  340,  331,  331,  331,  331,  331,  331,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  342,  333,
      333,  333,  333,  333,  333,  337,  338,  339,  340,  343,
      344,  345,  346,  347,  349,  350,  351,  352,  353,  354,

      355,  356,  357,  358,  342,  333,  333,  333,  333,  333,
      333,  359,  360,  362,  363,  343,  344,  345,  346,  347,
      349,  350,  351,  352,  353,  354,  355,  356,  357,  358,
      366,  367,  368,  369,  370,  372,  373,  359,  360,  362,
      363,  374,  376,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  251,  247,  230,  221,  366,  367,  368,  369,
      370,  372,  373,  219,  215,  214,  101,  374,  376,  201,
      148,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      203,  201,  148,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  326,  384,  384,  384,  384,  384,  384,  785,

      187,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      178,  172,  162,  148,  101,  125,  393,  101,   45,  384,
      384,  384,  384,  384,  384,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  395,  386,  386,  386,  386,  386,
      386,  387,  393,  328,  328,  328,  328,  328,  328,  328,
      328,  328,   46,  396,   43,   95,   54,   46,   43,  785,
      395,  386,  386,  386,  386,  386,  386,  151,   37,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  151,  396,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  269,
      389,  389,  389,  389,  389,  389,  785,  397,  389,  389,

      389,  389,  389,  389,  389,  389,  389,   37,  785,  785,
      785,  785,  785,  785,  785,  398,  389,  389,  389,  389,
      389,  389,  151,  397,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  391,  392,  392,  392,  392,  392,  392,
      785,  398,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  399,  403,  404,  405,  406,  407,  408,  409,  410,
      392,  392,  392,  392,  392,  392,  400,  411,  412,  413,
      414,  415,  401,  416,  402,  417,  418,  399,  403,  404,
      405,  406,  407,  408,  409,  410,  419,  420,  421,  422,
      423,  424,  400,  411,  412,  413,  414,  415,  401,  416,

      402,  417,  418,  425,  426,  427,  428,  429,  430,  431,
      432,  433,  419,  420,  421,  422,  423,  424,  434,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  785,  425,
      426,  427,  428,  429,  430,  431,  432,  433,  785,  785,
      449,  785,  785,  438,  434,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  201,  785,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  201,  449,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  326,  440,  440,  440,
      440,  440,  440,  785,  450,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  785,  785,  785,  785,  785,  785,

      785,  785,  451,  440,  440,  440,  440,  440,  440,  201,
      450,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      442,  443,  443,  443,  443,  443,  443,  785,  451,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  785,  785,
      452,  785,  785,  785,  785,  785,  785,  443,  443,  443,
      443,  443,  443,  151,  785,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  269,  151,  452,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  391,  446,  446,  446,
      446,  446,  446,  785,  785,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  785,  785,  785,  785,  785,  453,

      454,  455,  456,  446,  446,  446,  446,  446,  446,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  457,  448,
      448,  448,  448,  448,  448,  453,  454,  455,  456,  458,
      459,  460,  461,  463,  464,  465,  466,  467,  468,  469,
      470,  471,  473,  474,  457,  448,  448,  448,  448,  448,
      448,  475,  476,  477,  478,  458,  459,  460,  461,  463,
      464,  465,  466,  467,  468,  469,  470,  471,  473,  474,
      479,  480,  481,  482,  483,  484,  485,  475,  476,  477,
      478,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      500,  785,  785,  785,  785,  785,  479,  480,  481,  482,

      483,  484,  485,  201,  785,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  326,  201,  500,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  442,  492,  492,  492,
      492,  492,  492,  785,  785,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  492,  492,  492,  492,  492,  492,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  501,  494,
      494,  494,  494,  494,  494,  785,  503,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  785,  785,  785,  785,
      785,  785,  785,  785,  501,  494,  494,  494,  494,  494,

      494,  151,  503,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  391,  496,  496,  496,  496,  496,  496,  785,
      504,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      785,  785,  785,  785,  785,  785,  785,  505,  506,  496,
      496,  496,  496,  496,  496,  151,  504,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  498,  499,  499,  499,
      499,  499,  499,  505,  506,  507,  508,  509,  510,  511,
      512,  513,  514,  515,  516,  517,  518,  519,  522,  523,
      524,  525,  520,  499,  499,  499,  499,  499,  499,  521,
      526,  507,  508,  509,  510,  511,  512,  513,  514,  515,

      516,  517,  518,  519,  522,  523,  524,  525,  520,  527,
      528,  529,  530,  531,  532,  521,  526,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  785,  785,  785,  785,
      785,  785,  785,  785,  545,  527,  528,  529,  530,  531,
      532,  201,  785,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  442,  537,  537,  537,  537,  537,  537,  785,
      545,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      785,  785,  785,  785,  785,  785,  785,  785,  546,  537,
      537,  537,  537,  537,  537,  201,  785,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  539,  540,  540,  540,

      540,  540,  540,  785,  546,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  785,  785,  547,  785,  785,  785,
      785,  785,  785,  540,  540,  540,  540,  540,  540,  151,
      785,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      391,  151,  547,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  498,  542,  542,  542,  542,  542,  542,  785,
      785,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      785,  785,  785,  785,  785,  548,  549,  550,  551,  542,
      542,  542,  542,  542,  542,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  552,  544,  544,  544,  544,  544,

      544,  548,  549,  550,  551,  553,  554,  555,  556,  557,
      558,  559,  560,  561,  562,  563,  564,  565,  566,  567,
      552,  544,  544,  544,  544,  544,  544,  569,  570,  785,
      584,  553,  554,  555,  556,  557,  558,  559,  560,  561,
      562,  563,  564,  565,  566,  567,  785,  785,  785,  785,
      785,  785,  785,  569,  570,  201,  584,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  442,  201,  785,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  539,  576,
      576,  576,  576,  576,  576,  785,  785,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  785,  785,  785,  785,

      785,  785,  585,  785,  785,  576,  576,  576,  576,  576,
      576,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      587,  578,  578,  578,  578,  578,  578,  785,  585,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  785,  785,
      785,  785,  785,  785,  785,  785,  587,  578,  578,  578,
      578,  578,  578,  151,  785,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  498,  580,  580,  580,  580,  580,
      580,  785,  588,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  785,  785,  785,  785,  785,  785,  785,  589,
      591,  580,  580,  580,  580,  580,  580,  151,  588,  581,

      581,  581,  581,  581,  581,  581,  581,  581,  582,  583,
      583,  583,  583,  583,  583,  589,  591,  592,  593,  594,
      595,  596,  597,  599,  600,  601,  602,  603,  785,  616,
      785,  785,  785,  785,  785,  583,  583,  583,  583,  583,
      583,  785,  785,  592,  593,  594,  595,  596,  597,  599,
      600,  601,  602,  603,  201,  616,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  539,  608,  608,  608,  608,
      608,  608,  785,  617,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  785,  785,  785,  785,  785,  785,  785,
      785,  618,  608,  608,  608,  608,  608,  608,  201,  617,

      609,  609,  609,  609,  609,  609,  609,  609,  609,  610,
      611,  611,  611,  611,  611,  611,  785,  618,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  785,  785,  621,
      785,  785,  785,  785,  785,  785,  611,  611,  611,  611,
      611,  611,  151,  785,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  498,  151,  621,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  582,  613,  613,  613,  613,
      613,  613,  785,  785,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  785,  785,  785,  785,  785,  785,  622,
      623,  624,  613,  613,  613,  613,  613,  613,  614,  614,

      614,  614,  614,  614,  614,  614,  614,  625,  615,  615,
      615,  615,  615,  615,  619,  622,  623,  624,  626,  627,
      620,  628,  629,  785,  644,  785,  785,  785,  785,  785,
      785,  785,  785,  625,  615,  615,  615,  615,  615,  615,
      619,  785,  785,  785,  626,  627,  620,  628,  629,  201,
      644,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      539,  201,  785,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  610,  635,  635,  635,  635,  635,  635,  785,
      785,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      785,  785,  785,  785,  785,  785,  645,  785,  785,  635,

      635,  635,  635,  635,  635,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  646,  637,  637,  637,  637,  637,
      637,  785,  645,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  785,  785,  785,  785,  785,  785,  785,  785,
      646,  637,  637,  637,  637,  637,  637,  151,  785,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  582,  639,
      639,  639,  639,  639,  639,  785,  647,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  785,  785,  785,  785,
      785,  785,  785,  648,  649,  639,  639,  639,  639,  639,
      639,  151,  647,  640,  640,  640,  640,  640,  640,  640,

      640,  640,  641,  642,  642,  642,  642,  642,  642,  648,
      649,  650,  651,  653,  785,  667,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  785,  785,  785,  785,  642,
      642,  642,  642,  642,  642,  785,  785,  650,  651,  653,
      201,  667,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  610,  659,  659,  659,  659,  659,  659,  785,  668,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  785,
      785,  785,  785,  785,  785,  785,  785,  670,  659,  659,
      659,  659,  659,  659,  201,  668,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  661,  662,  662,  662,  662,

      662,  662,  151,  670,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  582,  785,  785,  785,  785,  785,  785,
      785,  671,  662,  662,  662,  662,  662,  662,  151,  785,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  641,
      664,  664,  664,  664,  664,  664,  785,  671,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  785,  785,  785,
      785,  785,  672,  673,  674,  675,  664,  664,  664,  664,
      664,  664,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  676,  666,  666,  666,  666,  666,  666,  672,  673,
      674,  675,  201,  785,  382,  382,  382,  382,  382,  382,

      382,  382,  382,  610,  785,  785,  785,  676,  666,  666,
      666,  666,  666,  666,  201,  785,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  661,  683,  683,  683,  683,
      683,  683,  785,  785,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  785,  785,  785,  785,  785,  785,  691,
      785,  785,  683,  683,  683,  683,  683,  683,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  692,  685,  685,
      685,  685,  685,  685,  785,  691,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  785,  785,  785,  785,  785,
      785,  785,  785,  692,  685,  685,  685,  685,  685,  685,

      151,  785,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  641,  687,  687,  687,  687,  687,  687,  785,  697,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  785,
      785,  785,  785,  785,  785,  785,  698,  699,  687,  687,
      687,  687,  687,  687,  151,  697,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  689,  690,  690,  690,  690,
      690,  690,  698,  699,  700,  785,  713,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  785,  785,  785,  785,
      785,  785,  690,  690,  690,  690,  690,  690,  785,  785,
      700,  201,  713,  706,  706,  706,  706,  706,  706,  706,

      706,  706,  661,  707,  707,  707,  707,  707,  707,  785,
      714,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      719,  785,  785,  785,  785,  785,  785,  785,  720,  707,
      707,  707,  707,  707,  707,  201,  714,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  719,  709,  709,  709,
      709,  709,  709,  151,  720,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  641,  785,  785,  785,  785,  785,
      785,  785,  721,  709,  709,  709,  709,  709,  709,  151,
      785,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      689,  711,  711,  711,  711,  711,  711,  785,  721,  711,

      711,  711,  711,  711,  711,  711,  711,  711,  722,  785,
      785,  785,  785,  785,  785,  785,  785,  711,  711,  711,
      711,  711,  711,  785,  785,  785,  785,  785,  785,  785,
      732,  785,  785,  201,  722,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  661,  201,  785,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  732,  728,  728,  728,
      728,  728,  728,  785,  733,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  785,  785,  785,  785,  785,  785,
      785,  785,  738,  728,  728,  728,  728,  728,  728,  151,
      733,  729,  729,  729,  729,  729,  729,  729,  729,  729,

      689,  730,  730,  730,  730,  730,  730,  785,  738,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  739,  785,
      747,  785,  785,  785,  785,  785,  785,  730,  730,  730,
      730,  730,  730,  785,  785,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  739,  201,  747,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  748,  745,  745,  745,
      745,  745,  745,  151,  749,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  689,  754,  755,  760,  761,  785,
      785,  785,  748,  745,  745,  745,  745,  745,  745,  201,
      749,  382,  382,  382,  382,  382,  382,  382,  382,  382,

      785,  754,  755,  760,  761,   36,   36,   36,   36,   38,
       38,   38,   38,   42,   42,   42,   42,   44,  785,   44,
       44,   45,   45,   45,   45,   96,  785,   96,   96,  100,
      100,  146,  146,  147,  147,  198,  198,  199,  199,  200,
      200,  257,  257,  258,  258,  319,  319,  320,  320,  321,
      321,  377,  377,  378,  378,  379,  379,  436,  436,  437,
      437,  486,  486,  487,  487,  488,  488,  533,  533,  534,
      534,  535,  535,  436,  436,  572,  572,  573,  573,  604,
      604,  605,  605,  606,  606,  630,  630,  631,  631,  632,
      632,  534,  534,  655,  655,  656,  656,  677,  677,  678,

      678,  679,  679,  701,  701,  702,  702,  704,  704,  605,
      605,  724,  724,  725,  725,  740,  740,  741,  741,  742,
      742,  750,  750,  751,  751,  655,  655,  757,  757,  758,
      758,  762,  762,  763,  763,  765,  765,  766,  766,  767,
      767,  702,  702,  770,  770,  772,  772,  773,  773,  774,
      774,  777,  777,  780,  780,  781,  781,  783,  783,  784,
      784,    7,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,

      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785
    } ;

static yyconst flex_int16_t yy_chk[3937] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   10,   10,   11,   11,   15,   17,
       28,  869,   15,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   25,

       16,   26,   33,   35,   25,   17,   28,   26,   57,   30,
       34,   58,   25,   30,   34,   60,   16,   39,   39,   16,
       16,   16,   16,   16,   16,   25,   16,   26,   33,   35,
       25,   40,   40,   26,   57,   30,   34,   58,   25,   30,
       34,   60,   16,   19,   19,  865,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   20,  863,
       20,   61,   22,   29,   22,   62,   27,   63,   20,   41,
       41,   64,   22,   65,   27,   20,  859,   29,  694,   22,
       27,  694,   22,  853,   20,   27,   20,   61,   22,   29,
       22,   62,   27,   63,   20,   66,   67,   64,   22,   65,
       27,   20,   21,   29,   21,   22,   27,   21,   22,   31,
       68,   27,   21,   21,   23,   31,   23,   31,   69,   21,
       70,   66,   67,   72,   23,   73,   31,   23,   21,   74,
       21,   23,  847,   21,  846,   31,   68,  843,   21,   21,
       23,   31,   23,   31,   69,   21,   70,  124,  124,   72,

       23,   73,   31,   23,   75,   74,   71,   23,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   71,   24,   32,   32,   77,   78,
       75,   24,   71,   80,   81,   32,   83,   84,   24,   85,
       90,   91,   92,   32,   24,   24,   24,   24,   24,   24,
       71,   24,  839,  838,   77,   78,  834,   24,  830,   80,
       81,   32,   83,   84,   24,   85,   90,   91,   92,   32,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   93,   49,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   94,  670,  670,

      670,  793,  670,  784,  783,  781,   49,   49,   49,   49,
       49,   49,   93,   49,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   94,   54,   54,   54,   54,   54,   54,
       99,   99,   99,   99,   99,   99,   99,   99,   99,  104,
      780,  104,  104,  104,  104,  104,  104,  104,  104,  104,
       54,   54,   54,   54,   54,   54,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   82,   56,   86,  106,  107,  108,  109,   82,
      110,  111,   82,  113,  114,  115,   82,  116,  117,  118,
      119,   86,   56,   56,   56,   56,   56,   56,   82,   56,

       86,  106,  107,  108,  109,   82,  110,  111,   82,  113,
      114,  115,   82,  116,  117,  118,  119,   86,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,  120,   97,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  121,  779,  778,  777,  776,
      774,  773,  123,  127,   97,   97,   97,   97,   97,   97,
      120,   97,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  121,  101,  101,  101,  101,  101,  101,  123,  127,
      150,  771,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  770,  769,  767,  766,  765,  128,  129,  101,  101,

      101,  101,  101,  101,  103,  130,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  128,  129,  764,  763,  762,  758,  757,  756,
      752,  130,  751,  750,  742,  741,  740,  730,  726,  131,
      132,  133,  103,  103,  103,  103,  103,  103,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  125,  131,  132,  133,  134,  136,
      125,  137,  138,  139,  140,  141,  142,  143,  725,  724,
      723,  718,  717,  716,  105,  105,  105,  105,  105,  105,
      125,  715,  707,  704,  134,  136,  125,  137,  138,  139,

      140,  141,  142,  143,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      158,  144,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      144,  144,  144,  144,  144,  144,  158,  144,  149,  702,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  154,  156,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  701,  696,  695,
      687,  681,  680,  679,  156,  161,  149,  149,  149,  149,
      149,  149,  152,  162,  152,  152,  152,  152,  152,  152,

      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      156,  161,  678,  677,  659,  656,  655,  654,  645,  162,
      639,  633,  632,  631,  630,  628,  163,  165,  168,  169,
      152,  152,  152,  152,  152,  152,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  170,  153,  153,  153,  153,
      153,  153,  163,  165,  168,  169,  616,  608,  606,  605,
      604,  171,  580,  574,  573,  572,  571,  564,  552,  548,
      176,  170,  153,  153,  153,  153,  153,  153,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  171,  155,  155,
      155,  155,  155,  155,  172,  175,  176,  177,  178,  179,

      181,  182,  180,  172,  172,  172,  180,  183,  184,  185,
      175,  186,  537,  189,  155,  155,  155,  155,  155,  155,
      172,  175,  192,  177,  178,  179,  181,  182,  180,  172,
      172,  172,  180,  183,  184,  185,  175,  186,  187,  189,
      190,  193,  194,  211,  212,  213,  214,  216,  192,  217,
      214,  190,  218,  187,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  187,  535,  190,  193,  194,  211,
      212,  213,  214,  216,  534,  217,  214,  190,  218,  187,
      202,  533,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  204,  530,

      204,  204,  204,  204,  204,  204,  204,  204,  204,  496,
      489,  488,  487,  486,  451,  220,  440,  437,  202,  202,
      202,  202,  202,  202,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  221,  203,  203,  203,  203,  203,  203,
      205,  220,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  436,  435,  420,  407,  389,  380,  379,  378,  221,
      203,  203,  203,  203,  203,  203,  206,  377,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  207,  223,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  335,  324,  321,  320,  319,

      317,  312,  305,  224,  206,  206,  206,  206,  206,  206,
      208,  223,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  209,  224,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  215,
      219,  225,  226,  215,  227,  228,  229,  219,  208,  208,
      208,  208,  208,  208,  231,  219,  232,  233,  235,  230,
      236,  237,  238,  240,  241,  215,  219,  225,  226,  215,
      227,  228,  229,  219,  230,  242,  243,  244,  245,  246,
      231,  219,  232,  233,  235,  230,  236,  237,  238,  240,
      241,  247,  248,  249,  250,  251,  252,  254,  255,  304,

      230,  242,  243,  244,  245,  246,  260,  301,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  247,  248,  249,
      250,  251,  252,  254,  255,  261,  287,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  262,  271,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  261,  261,  261,  261,  261,  261,  263,
      271,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  264,  272,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  278,  267,

      273,  259,  258,  257,  256,  253,  239,  263,  263,  263,
      263,  263,  263,  266,  272,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  268,  273,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  270,  210,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  200,  199,  198,  197,  195,  274,
      275,  276,  277,  268,  268,  268,  268,  268,  268,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  279,  269,
      269,  269,  269,  269,  269,  274,  275,  276,  277,  281,
      282,  283,  284,  286,  288,  289,  290,  291,  292,  293,

      294,  295,  296,  297,  279,  269,  269,  269,  269,  269,
      269,  298,  300,  302,  303,  281,  282,  283,  284,  286,
      288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
      306,  308,  309,  310,  311,  314,  315,  298,  300,  302,
      303,  316,  318,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  191,  188,  174,  166,  306,  308,  309,  310,
      311,  314,  315,  164,  160,  159,  148,  316,  318,  323,
      147,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  325,  146,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  327,

      135,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      126,  122,  112,  100,   98,   76,  334,   50,   46,  325,
      325,  325,  325,  325,  325,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  336,  326,  326,  326,  326,  326,
      326,  328,  334,  328,  328,  328,  328,  328,  328,  328,
      328,  328,   45,  337,   42,   37,   18,   14,   12,    7,
      336,  326,  326,  326,  326,  326,  326,  329,    4,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  330,  337,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  331,  338,  331,  331,

      331,  331,  331,  331,  331,  331,  331,    3,    0,    0,
        0,    0,    0,    0,    0,  339,  330,  330,  330,  330,
      330,  330,  332,  338,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      333,  339,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  340,  342,  344,  345,  346,  347,  348,  349,  350,
      332,  332,  332,  332,  332,  332,  341,  351,  352,  353,
      354,  355,  341,  356,  341,  357,  358,  340,  342,  344,
      345,  346,  347,  348,  349,  350,  359,  360,  361,  362,
      363,  364,  341,  351,  352,  353,  354,  355,  341,  356,

      341,  357,  358,  365,  367,  368,  369,  370,  371,  372,
      374,  375,  359,  360,  361,  362,  363,  364,  376,  387,
      387,  387,  387,  387,  387,  387,  387,  387,    0,  365,
      367,  368,  369,  370,  371,  372,  374,  375,    0,    0,
      393,    0,    0,  381,  376,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  382,    0,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  383,  393,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  384,  394,  384,  384,  384,  384,  384,
      384,  384,  384,  384,    0,    0,    0,    0,    0,    0,

        0,    0,  395,  383,  383,  383,  383,  383,  383,  385,
      394,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  386,  395,  386,
      386,  386,  386,  386,  386,  386,  386,  386,    0,    0,
      396,    0,    0,    0,    0,    0,    0,  385,  385,  385,
      385,  385,  385,  388,    0,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  390,  396,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  392,    0,  392,  392,  392,  392,  392,
      392,  392,  392,  392,    0,    0,    0,    0,    0,  397,

      398,  399,  400,  390,  390,  390,  390,  390,  390,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  401,  391,
      391,  391,  391,  391,  391,  397,  398,  399,  400,  402,
      403,  405,  406,  408,  410,  411,  414,  415,  416,  417,
      418,  419,  421,  422,  401,  391,  391,  391,  391,  391,
      391,  423,  424,  425,  426,  402,  403,  405,  406,  408,
      410,  411,  414,  415,  416,  417,  418,  419,  421,  422,
      427,  428,  429,  430,  431,  432,  433,  423,  424,  425,
      426,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      449,    0,    0,    0,    0,    0,  427,  428,  429,  430,

      431,  432,  433,  439,    0,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  441,  449,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  443,    0,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  441,  441,  441,  441,  441,  441,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  450,  442,
      442,  442,  442,  442,  442,  446,  452,  446,  446,  446,
      446,  446,  446,  446,  446,  446,    0,    0,    0,    0,
        0,    0,    0,    0,  450,  442,  442,  442,  442,  442,

      442,  445,  452,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  448,
      453,  448,  448,  448,  448,  448,  448,  448,  448,  448,
        0,    0,    0,    0,    0,    0,    0,  454,  455,  445,
      445,  445,  445,  445,  445,  447,  453,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  454,  455,  456,  457,  458,  459,  461,
      462,  463,  464,  466,  467,  468,  469,  471,  473,  474,
      475,  476,  472,  447,  447,  447,  447,  447,  447,  472,
      477,  456,  457,  458,  459,  461,  462,  463,  464,  466,

      467,  468,  469,  471,  473,  474,  475,  476,  472,  478,
      479,  480,  482,  484,  485,  472,  477,  490,  490,  490,
      490,  490,  490,  490,  490,  490,    0,    0,    0,    0,
        0,    0,    0,    0,  500,  478,  479,  480,  482,  484,
      485,  491,    0,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  492,
      500,  492,  492,  492,  492,  492,  492,  492,  492,  492,
        0,    0,    0,    0,    0,    0,    0,    0,  501,  491,
      491,  491,  491,  491,  491,  493,    0,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  494,  501,  494,  494,  494,  494,  494,
      494,  494,  494,  494,    0,    0,  502,    0,    0,    0,
        0,    0,    0,  493,  493,  493,  493,  493,  493,  495,
        0,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  497,  502,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  499,
        0,  499,  499,  499,  499,  499,  499,  499,  499,  499,
        0,    0,    0,    0,    0,  503,  504,  505,  506,  497,
      497,  497,  497,  497,  497,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  507,  498,  498,  498,  498,  498,

      498,  503,  504,  505,  506,  508,  509,  511,  512,  513,
      515,  516,  520,  521,  522,  523,  524,  525,  526,  529,
      507,  498,  498,  498,  498,  498,  498,  531,  532,    0,
      546,  508,  509,  511,  512,  513,  515,  516,  520,  521,
      522,  523,  524,  525,  526,  529,    0,    0,    0,    0,
        0,    0,    0,  531,  532,  536,  546,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  538,    0,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  540,    0,  540,  540,  540,
      540,  540,  540,  540,  540,  540,    0,    0,    0,    0,

        0,    0,  547,    0,    0,  538,  538,  538,  538,  538,
      538,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      549,  539,  539,  539,  539,  539,  539,  542,  547,  542,
      542,  542,  542,  542,  542,  542,  542,  542,    0,    0,
        0,    0,    0,    0,    0,    0,  549,  539,  539,  539,
      539,  539,  539,  541,    0,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  544,  550,  544,  544,  544,  544,  544,  544,  544,
      544,  544,    0,    0,    0,    0,    0,    0,    0,  551,
      554,  541,  541,  541,  541,  541,  541,  543,  550,  543,

      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  551,  554,  555,  556,  560,
      561,  562,  563,  565,  566,  567,  568,  569,    0,  585,
        0,    0,    0,    0,    0,  543,  543,  543,  543,  543,
      543,    0,    0,  555,  556,  560,  561,  562,  563,  565,
      566,  567,  568,  569,  575,  585,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  576,  586,  576,  576,  576,  576,  576,  576,
      576,  576,  576,    0,    0,    0,    0,    0,    0,    0,
        0,  588,  575,  575,  575,  575,  575,  575,  577,  586,

      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  578,  588,  578,  578,
      578,  578,  578,  578,  578,  578,  578,    0,    0,  593,
        0,    0,    0,    0,    0,    0,  577,  577,  577,  577,
      577,  577,  579,    0,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  581,  593,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  583,    0,  583,  583,  583,  583,  583,  583,
      583,  583,  583,    0,    0,    0,    0,    0,    0,  594,
      595,  596,  581,  581,  581,  581,  581,  581,  582,  582,

      582,  582,  582,  582,  582,  582,  582,  598,  582,  582,
      582,  582,  582,  582,  590,  594,  595,  596,  599,  600,
      590,  602,  603,    0,  617,    0,    0,    0,    0,    0,
        0,    0,    0,  598,  582,  582,  582,  582,  582,  582,
      590,    0,    0,    0,  599,  600,  590,  602,  603,  607,
      617,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  609,    0,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  611,
        0,  611,  611,  611,  611,  611,  611,  611,  611,  611,
        0,    0,    0,    0,    0,    0,  619,    0,    0,  609,

      609,  609,  609,  609,  609,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  620,  610,  610,  610,  610,  610,
      610,  613,  619,  613,  613,  613,  613,  613,  613,  613,
      613,  613,    0,    0,    0,    0,    0,    0,    0,    0,
      620,  610,  610,  610,  610,  610,  610,  612,    0,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  615,  622,  615,  615,  615,
      615,  615,  615,  615,  615,  615,    0,    0,    0,    0,
        0,    0,    0,  623,  624,  612,  612,  612,  612,  612,
      612,  614,  622,  614,  614,  614,  614,  614,  614,  614,

      614,  614,  614,  614,  614,  614,  614,  614,  614,  623,
      624,  625,  627,  629,  635,  643,  635,  635,  635,  635,
      635,  635,  635,  635,  635,    0,    0,    0,    0,  614,
      614,  614,  614,  614,  614,    0,    0,  625,  627,  629,
      634,  643,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  637,  644,
      637,  637,  637,  637,  637,  637,  637,  637,  637,    0,
        0,    0,    0,    0,    0,    0,    0,  646,  634,  634,
      634,  634,  634,  634,  636,  644,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,

      636,  636,  638,  646,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,    0,    0,    0,    0,    0,    0,
        0,  647,  636,  636,  636,  636,  636,  636,  640,    0,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  642,  647,  642,  642,
      642,  642,  642,  642,  642,  642,  642,    0,    0,    0,
        0,    0,  648,  649,  650,  651,  640,  640,  640,  640,
      640,  640,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  652,  641,  641,  641,  641,  641,  641,  648,  649,
      650,  651,  658,    0,  658,  658,  658,  658,  658,  658,

      658,  658,  658,  658,    0,    0,    0,  652,  641,  641,
      641,  641,  641,  641,  660,    0,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  662,    0,  662,  662,  662,  662,  662,  662,
      662,  662,  662,    0,    0,    0,    0,    0,    0,  667,
        0,    0,  660,  660,  660,  660,  660,  660,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  668,  661,  661,
      661,  661,  661,  661,  664,  667,  664,  664,  664,  664,
      664,  664,  664,  664,  664,    0,    0,    0,    0,    0,
        0,    0,    0,  668,  661,  661,  661,  661,  661,  661,

      663,    0,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  666,  671,
      666,  666,  666,  666,  666,  666,  666,  666,  666,    0,
        0,    0,    0,    0,    0,    0,  673,  674,  663,  663,
      663,  663,  663,  663,  665,  671,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  673,  674,  676,  683,  691,  683,  683,  683,
      683,  683,  683,  683,  683,  683,    0,    0,    0,    0,
        0,    0,  665,  665,  665,  665,  665,  665,    0,    0,
      676,  682,  691,  682,  682,  682,  682,  682,  682,  682,

      682,  682,  682,  682,  682,  682,  682,  682,  682,  685,
      692,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      697,    0,    0,    0,    0,    0,    0,    0,  698,  682,
      682,  682,  682,  682,  682,  684,  692,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  697,  684,  684,  684,
      684,  684,  684,  686,  698,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,    0,    0,    0,    0,    0,
        0,    0,  699,  684,  684,  684,  684,  684,  684,  688,
        0,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  690,  699,  690,

      690,  690,  690,  690,  690,  690,  690,  690,  700,    0,
        0,    0,    0,    0,    0,    0,    0,  688,  688,  688,
      688,  688,  688,    0,    0,    0,    0,    0,    0,    0,
      713,    0,    0,  706,  700,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  708,    0,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  713,  708,  708,  708,
      708,  708,  708,  709,  714,  709,  709,  709,  709,  709,
      709,  709,  709,  709,    0,    0,    0,    0,    0,    0,
        0,    0,  721,  708,  708,  708,  708,  708,  708,  710,
      714,  710,  710,  710,  710,  710,  710,  710,  710,  710,

      710,  710,  710,  710,  710,  710,  710,  711,  721,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  722,    0,
      732,    0,    0,    0,    0,    0,    0,  710,  710,  710,
      710,  710,  710,  728,    0,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  722,  727,  732,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  733,  727,  727,  727,
      727,  727,  727,  729,  739,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  747,  749,  754,  755,    0,
        0,    0,  733,  727,  727,  727,  727,  727,  727,  744,
      739,  744,  744,  744,  744,  744,  744,  744,  744,  744,

        0,  747,  749,  754,  755,  786,  786,  786,  786,  787,
      787,  787,  787,  788,  788,  788,  788,  789,    0,  789,
      789,  790,  790,  790,  790,  791,    0,  791,  791,  792,
      792,  794,  794,  795,  795,  796,  796,  797,  797,  798,
      798,  799,  799,  800,  800,  801,  801,  802,  802,  803,
      803,  804,  804,  805,  805,  806,  806,  807,  807,  808,
      808,  809,  809,  810,  810,  811,  811,  812,  812,  813,
      813,  814,  814,  815,  815,  816,  816,  817,  817,  818,
      818,  819,  819,  820,  820,  821,  821,  822,  822,  823,
      823,  824,  824,  825,  825,  826,  826,  827,  827,  828,

      828,  829,  829,  831,  831,  832,  832,  833,  833,  835,
      835,  836,  836,  837,  837,  840,  840,  841,  841,  842,
      842,  844,  844,  845,  845,  848,  848,  849,  849,  850,
      850,  851,  851,  852,  852,  854,  854,  855,  855,  856,
      856,  857,  857,  858,  858,  860,  860,  861,  861,  862,
      862,  864,  864,  866,  866,  867,  867,  868,  868,  870,
      870,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,

      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[93] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_ClntParser_stype yylval;
}

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 786 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3862 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
{ return ClntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
{ return ClntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
{ return ClntParser::ADDRESS_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
{ return ClntParser::STRING_KEYWORD_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ return ClntParser::ADDRESS_LIST_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ return ClntParser::NAME_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ return ClntParser::IA_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
{ return ClntParser::TA_; }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ return ClntParser::IAID_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 13:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
{ return ClntParser::LOGLEVEL_; }
	YY_BREAK
case 15:
YY_RULE_SETUP
{ return ClntParser::LOGMODE_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ return ClntParser::LOGNAME_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ return ClntParser::LOGCOLORS_; }
	YY_BREAK
case 18:
YY_RULE_SETUP
{ return ClntParser::WORKDIR_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
{ return ClntParser::SCRIPT_; }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ return ClntParser::VALID_TIME_; }
	YY_BREAK
case 22:
YY_RULE_SETUP
{ return ClntParser::REMOTE_AUTOCONF_; }
	YY_BREAK
case 23:
YY_RULE_SETUP
{ return ClntParser::T1_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
{ return ClntParser::T2_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
{ return ClntParser::OPTION_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
{ return ClntParser::DNS_SERVER_;}
	YY_BREAK
case 27:
YY_RULE_SETUP
{ return ClntParser::DOMAIN_;}
	YY_BREAK
case 28:
YY_RULE_SETUP
{ return ClntParser::NTP_SERVER_;}
	YY_BREAK
case 29:
YY_RULE_SETUP
{ return ClntParser::TIME_ZONE_;}
	YY_BREAK
case 30:
YY_RULE_SETUP
{ return ClntParser::SIP_SERVER_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
{ return ClntParser::SIP_DOMAIN_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
{ return ClntParser::FQDN_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ return ClntParser::FQDN_S_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ return ClntParser::DDNS_PROTOCOL_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ return ClntParser::DDNS_TIMEOUT_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ return ClntParser::NIS_SERVER_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
{ return ClntParser::NIS_DOMAIN_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ return ClntParser::NISP_SERVER_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ return ClntParser::NISP_DOMAIN_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ return ClntParser::LIFETIME_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
{ return ClntParser::REJECT_SERVERS_;}
	YY_BREAK
case 42:
YY_RULE_SETUP
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 43:
YY_RULE_SETUP
{ return ClntParser::RAPID_COMMIT_;}
	YY_BREAK
case 44:
YY_RULE_SETUP
{ return ClntParser::RECONFIGURE_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
{ return ClntParser::UNICAST_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ return ClntParser::STRICT_RFC_NO_ROUTING_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ return ClntParser::PREFIX_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LL_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LLT_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_EN_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ return ClntParser::VENDOR_SPEC_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ return ClntParser::ANON_INF_REQUEST_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ return ClntParser::INSIST_MODE_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ return ClntParser::INACTIVE_MODE_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ return ClntParser::AUTH_ENABLED_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ return ClntParser::AUTH_ACCEPT_METHODS_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ return ClntParser::DIGEST_NONE_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ return ClntParser::DIGEST_PLAIN_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
{ return ClntParser::SKIP_CONFIRM_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ return ClntParser::AFTR_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
{ return ClntParser::EXPERIMENTAL_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
{ return ClntParser::ADDR_PARAMS_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
{ return ClntParser::REQUEST_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
;
	YY_BREAK
case 74:
YY_RULE_SETUP
;
	YY_BREAK
case 75:
YY_RULE_SETUP
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
BEGIN(INITIAL);
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 78:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 79:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 80:
YY_RULE_SETUP
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 81:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 82:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 83:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 84:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return ClntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return ClntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
{
    // DUID in 0x00010203 format
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return ClntParser::DUID_;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
{
   // DUID in 00:01:02:03 format
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
        x = (toupper(*pos)-'A' + 10);
      else
        x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))	
        x += (toupper(*(pos+1))-'A' + 10);
      else
        x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }
   
   return ClntParser::DUID_;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
{ 
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::HEXNUMBER_;
}
	YY_BREAK
case 90:
YY_RULE_SETUP
{ 
    if(!sscanf(yytext,"%u",(unsigned int*)&(yylval.ival))) { 
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::INTNUMBER_;
}
	YY_BREAK
case 91:
YY_RULE_SETUP
{return yytext[0];} 
	YY_BREAK
case 92:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 786 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 786 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 785);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

