#line 2 "ClntLexer.cpp"

#line 4 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 66
#define YY_END_OF_BUFFER 67
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[580] =
    {   0,
        1,    1,    0,    0,    0,    0,   67,   65,    2,    1,
        1,   65,   48,   65,   65,   64,   64,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   52,   52,   66,    1,    1,    1,
        0,   60,   48,    0,   60,   50,   49,   64,    0,    0,
       63,    0,   57,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,    6,   61,   61,   61,   61,   61,   61,
       61,   39,   61,   61,   61,   61,   61,   61,   18,   19,
        7,   61,   61,   61,   61,   61,   51,   49,   64,    0,
        0,   56,   62,   55,   55,   61,   61,   61,   61,   61,

       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   64,    0,    0,    0,   54,   54,    0,
       55,    0,   55,   61,   61,   45,   61,   61,   61,   61,
       27,    8,   61,   61,   61,    0,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   64,    0,    0,    0,    0,   54,    0,
       54,    0,   55,   55,   55,   55,   61,   61,   61,   61,
       61,   61,    3,   61,   61,   61,   61,    0,   61,   61,
       61,    9,   61,   61,   61,   61,   61,   61,   61,   61,

       61,   61,   61,   61,   61,   61,   61,   61,    0,    0,
        0,    0,   54,   54,   54,   54,    0,   55,   55,   55,
        0,   55,   61,   61,   61,   22,   61,   61,   61,   61,
       61,   61,   61,    0,    0,   61,   61,   61,   61,   20,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,    0,    0,    0,   54,   54,   54,
        0,   54,    0,    0,   55,   55,   55,   55,    5,   61,
       61,   43,   41,   61,   61,   61,   61,   61,    0,    0,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   36,   61,   61,   61,    0,    0,

        0,    0,    0,   54,   54,   54,   54,    0,   55,   55,
       55,    0,   55,   61,   61,   61,   42,   61,   32,   61,
       12,   13,    0,    0,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       14,    0,    0,    0,   54,   54,   54,    0,   54,   59,
       55,   55,   55,   55,   61,   61,   61,   40,   11,    0,
        0,   61,   61,    4,   61,   61,   61,   61,   61,   61,
       61,   61,   10,   61,   24,   61,   61,    0,    0,    0,
       58,   54,   54,   54,   54,   55,   55,   55,    0,   55,
       61,   61,   21,    0,    0,   29,   28,   23,   61,   61,

       61,   61,   61,   61,   26,   25,   61,   61,   61,    0,
        0,   54,   54,   54,    0,   54,   55,   55,   55,   55,
       61,   46,   31,   30,   61,   61,   61,   61,   61,   15,
       61,   61,   44,    0,    0,    0,   54,   54,   54,   54,
       55,   55,   55,    0,   55,   61,   61,   61,   61,   35,
       61,   61,   61,    0,    0,   54,   54,   54,    0,   54,
       55,   55,   55,   55,   61,   61,   61,   61,   33,   61,
       61,    0,    0,    0,   54,   54,   54,   54,   55,   55,
       55,    0,   55,   61,   61,   61,   61,   61,   17,    0,
       53,   56,   54,   54,   54,    0,   54,   55,   55,   55,

       55,   61,   61,   34,   61,   61,    0,   53,    0,   54,
       54,   54,   54,   54,   55,   55,   55,    0,   55,   47,
       61,   61,   61,   53,   56,   54,    0,   54,   54,   54,
       54,   55,   55,   55,   16,   38,   61,   53,   54,   54,
       54,   54,   55,   55,   55,   61,   54,   54,    0,   54,
       54,   55,   61,   54,   54,   55,   61,   54,   54,    0,
       37,   54,   54,   54,   54,    0,   54,   54,   54,   54,
        0,   54,   54,   54,   54,    0,   54,   54,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   16,   16,   16,   16,   16,   16,   17,    1,    1,
        1,    1,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
        1,    1,    1,    1,    1,    1,   18,   19,   20,   21,

       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[44] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        3,    1,    4,    4,    4,    4,    5,    4,    4,    4,
        4,    4,    4,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[659] =
    {   0,
        0,    0, 1909, 1908,    0,    0, 1915, 1918, 1918,   41,
       43, 1909,    0, 1906,   40,   40, 1871, 1894,   69,   95,
       38, 1876, 1892,   49,  102,  104,   60,  105,   56,  107,
      128,  106,   78,  115, 1918, 1896, 1918,   46,   76,   94,
     1902, 1918,    0, 1899, 1898, 1918,    0,  142, 1887,   88,
     1918,    0,  135, 1886,  155, 1881, 1884,   34,   51,   89,
      122,  112,  114,  155,  162,   82,  165,  149,  173,  167,
      169, 1883,  170,  171,  174,  176,  177,  178, 1882, 1881,
     1880,  182,  181,  180,  185,  186, 1918,    0,  209,  204,
     1879,  222,    0,  228,  241,  245, 1860,  245,  252,  198,

      254,  256,  258,  259,  261,  262,  223,  273,  268,  276,
      188,  274,  270,  278,  275,  288,  282,  285,  286,  287,
      289,  292,  293,  309,  322, 1877, 1876,  328,  341,  345,
      351,  362,  368,  372,  295, 1875,  297,  363,  372,  386,
     1874, 1873,  380,  303,  383, 1879,  384,  387,  389,  391,
      392,  399,  394,  406,  400,  401,  412,  411,  422,  418,
      421,  413,  430,  435, 1871, 1870, 1869,  440,  446,  457,
      463,  469,  475,  488,  494,  507, 1868,  464,  489,  424,
      427,  502, 1867,  508,  510,  511,  512,  512,  518,  519,
      520, 1866,  523,  521,  525,  527,  536,  530,  532,  538,

      537,  458,  539,  540,  541,  554,  544,  545, 1865, 1864,
     1863,  571,  577,  590,  596,  609,  559,  615, 1862,  622,
      633,  639,  572,  617,  546, 1861,  634,  639,  640,  548,
      563,  641,  642, 1845, 1854,  643,  644,  646,  649, 1858,
      653,  654,  657,  666,  650,  661,  663,  668,  671,  670,
      672,  675,  683,  677, 1857, 1856,  692,  699, 1855,  706,
      717,  723,  729,  735,  741,  754,  760,  773, 1854,  768,
      679, 1853,  755,  678,  773,  774,  780,  781, 1839, 1833,
      783,  777,  787,  788,  680,  789,  790,  730,  798,  794,
      792,  797,  718,  801, 1850,  800,  802,  804, 1849, 1848,

     1847,  829,  835,  841,  854,  860,  873,  821,  879, 1846,
      886,  897,  903,  811,  898,  803, 1845,  807, 1844,  903,
     1843, 1842, 1840, 1818,  905,  904,  806,  906,  881,  907,
      836,  916,  918,  908,  919,  910,  920,  923,  925,  927,
     1839, 1838, 1837,  936,  942, 1836,  950,  961,  967,  971,
      977,  990,  996, 1009, 1009, 1004, 1011, 1835, 1834, 1824,
     1827, 1012, 1013, 1831, 1014, 1015, 1016,  855, 1017, 1021,
     1019, 1020, 1830, 1022, 1829, 1036, 1037, 1828, 1827, 1826,
     1047, 1053, 1066, 1072, 1085, 1091, 1825, 1098, 1109, 1115,
     1115, 1116, 1824, 1809, 1804, 1821, 1820, 1819, 1039, 1117,

     1119, 1120, 1110, 1123, 1818, 1817,  937, 1125, 1127, 1816,
     1815, 1137, 1814, 1152, 1163, 1169, 1175, 1188, 1194, 1207,
     1093, 1813, 1918, 1918,  985, 1126, 1140, 1189, 1138, 1812,
     1128, 1202, 1811, 1810, 1809, 1808, 1218, 1231, 1237, 1250,
     1256, 1807, 1263, 1274, 1280, 1061, 1208, 1210, 1023, 1806,
     1275, 1280, 1170, 1805, 1804, 1287, 1803, 1302, 1292, 1315,
     1321, 1334, 1340, 1353, 1348, 1335, 1292, 1353, 1802, 1258,
     1354, 1801, 1800, 1799, 1380, 1364, 1393, 1370, 1406, 1798,
     1413, 1424, 1430, 1370, 1425, 1357, 1430, 1431, 1797, 1796,
     1795,    0, 1444, 1794, 1456, 1449, 1469, 1475, 1488, 1494,

     1507, 1435, 1316, 1793, 1436, 1502, 1792, 1791, 1790, 1789,
     1524, 1513, 1537, 1550, 1556, 1788, 1563,    0, 1576, 1787,
     1508, 1537, 1558, 1786, 1918, 1785,    0, 1584, 1784, 1591,
     1604, 1610, 1623,    0, 1783, 1782, 1388, 1781, 1780, 1684,
     1629, 1642, 1648, 1671,    0, 1577, 1650, 1643,    0, 1655,
     1918,    0, 1591, 1637, 1629, 1918, 1365, 1624, 1618,    0,
     1599, 1576, 1571, 1545, 1532,    0, 1519, 1516, 1515, 1514,
        0, 1489, 1483, 1470, 1464,    0, 1437, 1433, 1918, 1671,
     1676, 1681, 1686, 1691, 1694, 1699, 1701, 1414, 1323, 1703,
     1307, 1705, 1707, 1295, 1709, 1711, 1258, 1713, 1715, 1239,

     1717, 1719, 1220, 1721, 1723, 1177, 1725, 1727, 1152, 1729,
     1731, 1080, 1733, 1735, 1053, 1737, 1739,  985, 1741, 1743,
      975, 1745, 1747,  958, 1749, 1751,  843,  737, 1753, 1755,
      695, 1757, 1759,  617,  439, 1761, 1763,  406, 1765,  359,
      349, 1767, 1769, 1771,  314, 1773, 1775, 1777,  312, 1779,
     1781, 1783,  249, 1785, 1787, 1789,  149, 1791
    } ;

static yyconst flex_int16_t yy_def[659] =
    {   0,
      579,    1,  580,  580,  581,  581,  579,  579,  579,  579,
      579,  582,  583,  584,  579,  579,   16,  579,  585,  585,
       20,   20,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  579,  579,  579,  579,  579,  579,
      582,  579,  583,  584,  579,  579,  586,  579,  587,   48,
      579,  588,  589,  585,   20,   55,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  579,  586,  579,   89,
      590,  591,  588,  579,   94,   55,   96,  585,  585,  585,

      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  579,  124,  592,  593,  579,  128,  579,
      579,  594,  131,   96,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  579,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  125,  125,  595,  596,  579,  579,  597,
      169,  579,  579,  173,  579,  175,  134,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  579,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,

      585,  585,  585,  585,  585,  585,  585,  585,  579,  598,
      599,  579,  579,  213,  579,  215,  579,  579,  579,  579,
      600,  220,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  579,  579,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  601,  602,  579,  579,  579,  579,
      603,  260,  579,  579,  579,  265,  579,  267,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  579,  579,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  579,  604,

      605,  579,  579,  579,  304,  579,  306,  579,  579,  579,
      579,  606,  311,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  579,  579,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  607,  608,  579,  579,  579,  579,  609,  347,  579,
      579,  351,  579,  353,  585,  585,  585,  585,  585,  579,
      579,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  579,  610,  611,
      579,  579,  382,  579,  384,  579,  579,  579,  612,  388,
      585,  585,  585,  579,  579,  585,  585,  585,  585,  585,

      585,  585,  585,  585,  585,  585,  585,  585,  585,  613,
      614,  579,  579,  579,  615,  414,  579,  417,  579,  419,
      585,  585,  579,  579,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  579,  616,  617,  579,  437,  579,  439,
      579,  579,  579,  618,  443,  585,  585,  585,  585,  585,
      585,  585,  585,  619,  620,  579,  579,  579,  621,  458,
      579,  461,  579,  463,  585,  585,  585,  585,  585,  585,
      585,  579,  622,  623,  579,  475,  579,  477,  579,  579,
      579,  624,  481,  585,  585,  585,  585,  585,  585,  625,
      626,  627,  579,  579,  579,  628,  495,  579,  498,  579,

      500,  585,  585,  585,  585,  585,  579,  629,  579,  630,
      579,  511,  579,  513,  579,  579,  579,  631,  517,  585,
      585,  585,  585,  632,  579,  633,  634,  579,  579,  579,
      530,  579,  532,  635,  585,  585,  585,  579,  636,  637,
      579,  541,  579,  579,  638,  585,  579,  639,  640,  579,
      579,  641,  585,  642,  643,  579,  585,  579,  644,  645,
      585,  646,  647,  579,  648,  649,  650,  651,  579,  652,
      653,  654,  655,  579,  656,  657,  658,  579,    0,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,

      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579
    } ;

static yyconst flex_int16_t yy_nxt[1962] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   18,   19,   20,   20,
       21,   20,   22,   23,   23,   24,   23,   23,   25,   23,
       26,   27,   28,   23,   29,   30,   31,   32,   33,   34,
       23,   23,   23,   38,   39,   40,   39,   46,   38,   39,
      579,   47,   48,   48,   48,   48,   49,   50,   50,   50,
       50,   50,   50,   59,   51,  579,   64,  579,   60,   61,
       98,   65,  579,   74,   99,   62,  579,   75,   40,   39,
       52,   55,   55,   55,   55,   49,   55,   55,   55,   56,
       55,   55,   71,   57,  579,   84,   38,   39,  579,   85,

       90,   90,   90,   90,  106,  579,   58,   55,   55,   55,
       55,   49,   55,   55,   55,   55,   55,   55,  579,   57,
      579,  579,  579,  579,  100,   72,   76,   66,  579,   68,
      579,  579,   77,   67,  103,   69,   83,  102,  579,   73,
       70,   79,   80,   78,  579,   81,   86,   94,   94,   94,
       94,  101,  514,   82,   89,   89,   89,   89,   49,   90,
       90,   90,   90,   90,   90,  579,   51,   96,   96,   96,
       96,  579,   96,   96,   96,   96,   96,   96,  579,  105,
      104,  579,  109,  579,  108,  579,  579,  579,  107,  579,
      579,  112,  579,  579,  579,  117,  579,  579,  579,  110,

      114,  579,  579,  113,  579,  111,  120,  138,  121,  116,
      115,  119,  118,  151,  579,  122,  125,  125,  125,  125,
      123,  124,  124,  124,  124,   49,  125,  125,  125,  125,
      125,  125,  145,   51,  128,  128,  128,  128,  130,  579,
      131,  131,  131,  131,  132,  133,  133,  133,  133,  133,
      133,  579,  573,  133,  133,  133,  133,  134,  134,  134,
      134,  579,  134,  134,  134,  134,  134,  134,  579,  136,
      579,  139,  579,  137,  579,  579,  140,  579,  579,  142,
      143,  146,  147,  144,  579,  150,  579,  148,  141,  579,
      579,  579,  579,  149,  579,  153,  152,  156,  579,  154,

      155,  579,  579,  579,  579,  579,  160,  159,  579,  579,
      158,  579,  162,  579,  161,  568,  178,  563,  157,  579,
      163,  164,  164,  164,  164,   49,  165,  165,  165,  165,
      165,  165,  179,   51,  165,  165,  165,  165,  168,  184,
      169,  169,  169,  169,  170,  171,  171,  171,  171,  171,
      171,  579,  556,  171,  171,  171,  171,  172,  172,  172,
      172,  130,  555,  173,  173,  173,  173,  132,  174,  174,
      174,  174,  174,  174,  175,  175,  175,  175,  579,  579,
      174,  174,  174,  174,  177,  177,  177,  177,  579,  177,
      177,  177,  177,  177,  177,  182,  579,  181,  180,  579,

      579,  183,  579,  579,  189,  579,  192,  579,  579,  552,
      579,  185,  186,  187,  197,  579,  579,  579,  191,  190,
      195,  200,  579,  194,  196,  198,  193,  579,  579,  579,
      203,  204,  199,  202,  579,  205,  201,  579,  579,  208,
      579,  206,  545,  579,  207,  225,  579,  164,  164,  164,
      164,  579,  212,  212,  212,  212,  168,  226,  213,  213,
      213,  213,  170,  214,  214,  214,  214,  214,  214,  215,
      215,  215,  215,  579,  579,  214,  214,  214,  214,  217,
      579,  172,  172,  172,  172,  130,  248,  218,  218,  218,
      218,  132,  219,  219,  219,  219,  219,  219,  579,  223,

      219,  219,  219,  219,  130,  579,  220,  220,  220,  220,
      221,  222,  222,  222,  222,  222,  222,  579,  579,  222,
      222,  222,  222,  227,  579,  224,  579,  579,  579,  233,
      228,  231,  234,  230,  579,  579,  579,  579,  229,  579,
      237,  579,  232,  579,  239,  243,  579,  235,  579,  236,
      238,  240,  579,  579,  579,  579,  579,  579,  247,  241,
      579,  579,  579,  252,  579,  254,  244,  242,  245,  246,
      579,  263,  263,  263,  263,  249,  251,  275,  253,  579,
      271,  257,  250,  212,  212,  212,  212,  168,  579,  258,
      258,  258,  258,  170,  259,  259,  259,  259,  259,  259,

      579,  276,  259,  259,  259,  259,  168,  269,  260,  260,
      260,  260,  261,  262,  262,  262,  262,  262,  262,  579,
      540,  262,  262,  262,  262,  130,  270,  264,  264,  264,
      264,  132,  130,  579,  265,  265,  265,  265,  221,  266,
      266,  266,  266,  266,  266,  267,  267,  267,  267,  579,
      579,  266,  266,  266,  266,  579,  579,  579,  579,  579,
      579,  277,  579,  286,  272,  579,  579,  273,  283,  579,
      579,  278,  281,  579,  285,  288,  287,  579,  282,  579,
      293,  274,  579,  284,  579,  289,  579,  579,  579,  292,
      290,  579,  297,  579,  579,  579,  579,  291,  534,  579,

      329,  294,  298,  296,  302,  302,  302,  302,  295,  168,
      318,  303,  303,  303,  303,  170,  168,  316,  304,  304,
      304,  304,  261,  305,  305,  305,  305,  305,  305,  306,
      306,  306,  306,  579,  579,  305,  305,  305,  305,  308,
      514,  263,  263,  263,  263,  130,  579,  264,  264,  264,
      264,  130,  337,  309,  309,  309,  309,  221,  310,  310,
      310,  310,  310,  310,  579,  332,  310,  310,  310,  310,
      130,  579,  311,  311,  311,  311,  312,  313,  313,  313,
      313,  313,  313,  579,  579,  313,  313,  313,  313,  579,
      579,  317,  314,  579,  319,  320,  579,  579,  315,  579,

      325,  321,  322,  579,  579,  579,  579,  333,  579,  330,
      579,  334,  327,  579,  579,  326,  579,  579,  579,  579,
      579,  331,  579,  579,  357,  339,  328,  579,  358,  364,
      335,  338,  336,  350,  350,  350,  350,  340,  341,  344,
      355,  302,  302,  302,  302,  168,  510,  303,  303,  303,
      303,  168,  579,  345,  345,  345,  345,  261,  346,  346,
      346,  346,  346,  346,  579,  368,  346,  346,  346,  346,
      168,  579,  347,  347,  347,  347,  348,  349,  349,  349,
      349,  349,  349,  579,  402,  349,  349,  349,  349,  130,
      366,  264,  264,  264,  264,  221,  130,  579,  351,  351,

      351,  351,  312,  352,  352,  352,  352,  352,  352,  353,
      353,  353,  353,  579,  579,  352,  352,  352,  352,  579,
      579,  579,  579,  579,  579,  363,  579,  365,  367,  356,
      362,  359,  579,  371,  579,  579,  579,  369,  370,  579,
      372,  579,  374,  579,  375,  373,  431,  376,  381,  381,
      381,  381,  168,  579,  303,  303,  303,  303,  261,  377,
      168,  501,  382,  382,  382,  382,  348,  383,  383,  383,
      383,  383,  383,  384,  384,  384,  384,  579,  478,  383,
      383,  383,  383,  350,  350,  350,  350,  130,  464,  386,
      386,  386,  386,  312,  387,  387,  387,  387,  387,  387,

      579,  579,  387,  387,  387,  387,  130,  447,  388,  388,
      388,  388,  389,  390,  390,  390,  390,  390,  390,  579,
      579,  390,  390,  390,  390,  579,  391,  579,  579,  579,
      579,  579,  579,  579,  392,  579,  579,  579,  579,  579,
      468,  407,  396,  399,  401,  393,  404,  397,  398,  405,
      400,  403,  579,  579,  406,  579,  440,  408,  409,  381,
      381,  381,  381,  168,  425,  412,  412,  412,  412,  348,
      413,  413,  413,  413,  413,  413,  579,  579,  413,  413,
      413,  413,  168,  420,  414,  414,  414,  414,  415,  416,
      416,  416,  416,  416,  416,  579,  465,  416,  416,  416,

      416,  130,  446,  264,  264,  264,  264,  312,  130,  579,
      417,  417,  417,  417,  389,  418,  418,  418,  418,  418,
      418,  419,  419,  419,  419,  579,  579,  418,  418,  418,
      418,  579,  579,  579,  421,  579,  579,  422,  426,  579,
      427,  579,  579,  579,  579,  428,  433,  168,  429,  303,
      303,  303,  303,  348,  579,  385,  579,  430,  452,  451,
      448,  432,  168,  449,  437,  437,  437,  437,  415,  438,
      438,  438,  438,  438,  438,  439,  439,  439,  439,  579,
      354,  438,  438,  438,  438,  130,  579,  441,  441,  441,
      441,  389,  442,  442,  442,  442,  442,  442,  579,  471,

      442,  442,  442,  442,  130,  579,  443,  443,  443,  443,
      444,  445,  445,  445,  445,  445,  445,  579,  579,  445,
      445,  445,  445,  307,  579,  450,  579,  453,  168,  466,
      456,  456,  456,  456,  415,  457,  457,  457,  457,  457,
      457,  579,  268,  457,  457,  457,  457,  168,  467,  458,
      458,  458,  458,  459,  460,  460,  460,  460,  460,  460,
      579,  216,  460,  460,  460,  460,  130,  488,  264,  264,
      264,  264,  389,  130,  579,  461,  461,  461,  461,  444,
      462,  462,  462,  462,  462,  462,  463,  463,  463,  463,
      579,  579,  462,  462,  462,  462,  579,  168,  176,  303,

      303,  303,  303,  415,  477,  477,  477,  477,  579,  469,
      129,  470,  168,  486,  475,  475,  475,  475,  459,  476,
      476,  476,  476,  476,  476,  579,   95,  476,  476,  476,
      476,  130,  579,  479,  479,  479,  479,  444,  480,  480,
      480,  480,  480,  480,  579,  521,  480,  480,  480,  480,
      130,  579,  481,  481,  481,  481,  482,  483,  483,  483,
      483,  483,  483,  579,  579,  483,  483,  483,  483,  579,
      579,  485,  484,  579,  579,  489,  494,  494,  494,  494,
      579,  579,  497,  497,  497,  497,  579,  502,  561,  487,
      168,  504,  493,  493,  493,  493,  459,  494,  494,  494,

      494,  494,  494,  168,  579,  495,  495,  495,  495,  496,
      497,  497,  497,  497,  497,  497,  130,   93,  264,  264,
      264,  264,  444,  130,  546,  498,  498,  498,  498,  482,
      499,  499,  499,  499,  499,  499,  500,  500,  500,  500,
      579,  579,  499,  499,  499,  499,  579,  579,  520,  576,
      503,  579,  579,  576,  168,  505,  303,  303,  303,  303,
      459,  513,  513,  513,  513,  506,  168,  522,  511,  511,
      511,  511,  496,  512,  512,  512,  512,  512,  512,  579,
      576,  512,  512,  512,  512,  130,  571,  515,  515,  515,
      515,  482,  516,  516,  516,  516,  516,  516,  579,  576,

      516,  516,  516,  516,  130,  571,  517,  517,  517,  517,
      518,  519,  519,  519,  519,  519,  519,  579,  579,  519,
      519,  519,  519,  579,  579,  529,  529,  529,  529,  535,
      571,  566,  571,  523,  168,  566,  528,  528,  528,  528,
      496,  529,  529,  529,  529,  529,  529,  168,  566,  530,
      530,  530,  530,  579,  531,  531,  531,  531,  531,  531,
      579,  560,  531,  531,  531,  531,  130,  536,  264,  264,
      264,  264,  482,  130,  579,  532,  532,  532,  532,  518,
      533,  533,  533,  533,  533,  533,  579,  566,  533,  533,
      533,  533,  560,  579,  168,  537,  303,  303,  303,  303,

      496,  168,  553,  541,  541,  541,  541,  579,  542,  542,
      542,  542,  542,  542,  579,  579,  542,  542,  542,  542,
      130,  557,  543,  543,  543,  543,  518,  544,  544,  544,
      544,  544,  544,  579,  560,  544,  544,  544,  544,  168,
      549,  550,  550,  550,  550,  560,  551,  551,  551,  551,
      551,  551,  579,  549,  551,  551,  551,  551,  130,  549,
      264,  264,  264,  264,  518,  168,  527,  303,  303,  303,
      303,   35,   35,   35,   35,   35,   37,   37,   37,   37,
       37,   41,   41,   41,   41,   41,   43,  518,   43,   43,
       43,   44,   44,   44,   44,   44,   54,   54,   54,   88,

      549,   88,   88,   88,   91,   91,  126,  126,  166,  166,
      167,  167,  209,  209,  210,  210,  255,  255,  256,  256,
      299,  299,  300,  300,  342,  342,  343,  343,  378,  378,
      379,  379,  410,  410,  411,  411,  434,  434,  435,  435,
      454,  454,  455,  455,  472,  472,  473,  473,  490,  490,
      491,  491,  507,  507,  508,  508,  524,  524,  526,  526,
      538,  538,  539,  539,  547,  547,  548,  548,  554,  554,
      558,  558,  559,  559,  562,  562,  564,  564,  565,  565,
      567,  567,  569,  569,  570,  570,  572,  572,  574,  574,
      575,  575,  577,  577,  578,  578,  527,  509,  579,  579,

      496,  527,  509,  579,  482,  527,  525,  509,  474,  579,
      459,  509,  474,  579,  444,  492,  474,  436,  579,  415,
      474,  436,  579,  389,   92,  436,  380,  579,  579,  579,
      348,  436,  380,  579,  579,  579,  579,  579,  424,  423,
      579,  312,   92,  380,  301,  579,  579,  579,  395,  394,
      579,  579,  261,  380,  301,  579,  361,  360,  579,  579,
      579,  579,  221,   92,  301,  211,  579,  324,  323,  579,
      579,  170,  301,  211,  579,  280,  279,  579,  132,   92,
      211,  127,  579,  579,  579,  211,  127,  579,  188,  579,
      579,  579,   92,  127,  135,  127,  579,  579,  579,  579,

      579,   97,  579,   92,   44,   45,   42,   87,  579,   63,
       53,  579,   45,   42,  579,   36,   36,    7,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579
    } ;

static yyconst flex_int16_t yy_chk[1962] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   10,   10,   11,   11,   15,   38,   38,
       58,   15,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   21,   16,   24,   24,   59,   21,   21,
       58,   24,   29,   29,   59,   21,   27,   29,   39,   39,
       16,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   27,   19,   33,   33,   40,   40,   66,   33,

       50,   50,   50,   50,   66,   60,   19,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   25,   20,
       26,   28,   32,   30,   60,   28,   30,   25,   62,   26,
       63,   34,   30,   25,   63,   26,   32,   62,   61,   28,
       26,   31,   31,   30,   31,   31,   34,   53,   53,   53,
       53,   61,  657,   31,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   68,   48,   55,   55,   55,
       55,   64,   55,   55,   55,   55,   55,   55,   65,   65,
       64,   67,   69,   70,   68,   71,   73,   74,   67,   69,
       75,   73,   76,   77,   78,   78,   84,   83,   82,   70,

       75,   85,   86,   74,  111,   71,   83,  100,   84,   77,
       76,   82,   78,  111,  100,   85,   90,   90,   90,   90,
       86,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,  107,   89,   92,   92,   92,   92,   94,  107,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   95,  653,   95,   95,   95,   95,   96,   96,   96,
       96,   98,   96,   96,   96,   96,   96,   96,   99,   98,
      101,  101,  102,   99,  103,  104,  102,  105,  106,  104,
      105,  108,  108,  106,  109,  110,  113,  109,  103,  108,
      112,  115,  110,  109,  114,  113,  112,  116,  117,  114,

      115,  118,  119,  120,  116,  121,  120,  119,  122,  123,
      118,  135,  122,  137,  121,  649,  135,  645,  117,  144,
      123,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  137,  124,  125,  125,  125,  125,  128,  144,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  129,  641,  129,  129,  129,  129,  130,  130,  130,
      130,  131,  640,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  132,  132,  132,  132,  133,  138,
      133,  133,  133,  133,  134,  134,  134,  134,  139,  134,
      134,  134,  134,  134,  134,  140,  143,  139,  138,  145,

      147,  143,  140,  148,  147,  149,  149,  150,  151,  638,
      153,  145,  145,  145,  153,  152,  155,  156,  148,  147,
      152,  156,  154,  151,  152,  154,  150,  158,  157,  162,
      158,  159,  155,  157,  160,  160,  156,  161,  159,  163,
      180,  161,  635,  181,  162,  180,  163,  164,  164,  164,
      164,  164,  168,  168,  168,  168,  169,  181,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  170,
      170,  170,  170,  171,  202,  171,  171,  171,  171,  172,
      178,  172,  172,  172,  172,  173,  202,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  174,  178,

      174,  174,  174,  174,  175,  179,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  176,  182,  176,
      176,  176,  176,  182,  184,  179,  185,  186,  187,  187,
      182,  185,  188,  184,  189,  190,  191,  194,  182,  193,
      190,  195,  186,  196,  193,  197,  198,  188,  199,  189,
      191,  194,  197,  201,  200,  203,  204,  205,  201,  195,
      207,  208,  225,  206,  230,  208,  198,  196,  199,  200,
      206,  217,  217,  217,  217,  203,  205,  230,  207,  231,
      225,  212,  204,  212,  212,  212,  212,  213,  223,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,

      214,  231,  214,  214,  214,  214,  215,  223,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  216,
      634,  216,  216,  216,  216,  218,  224,  218,  218,  218,
      218,  218,  220,  224,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  221,  221,  221,  221,  222,
      227,  222,  222,  222,  222,  228,  229,  232,  233,  236,
      237,  232,  238,  242,  227,  239,  245,  228,  238,  241,
      242,  233,  236,  243,  241,  244,  243,  246,  237,  247,
      249,  229,  244,  239,  248,  245,  250,  249,  251,  248,
      246,  252,  253,  254,  274,  271,  285,  247,  631,  253,

      285,  250,  254,  252,  257,  257,  257,  257,  251,  258,
      274,  258,  258,  258,  258,  258,  260,  271,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  261,
      261,  261,  261,  262,  293,  262,  262,  262,  262,  263,
      628,  263,  263,  263,  263,  264,  288,  264,  264,  264,
      264,  265,  293,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  266,  288,  266,  266,  266,  266,
      267,  273,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  268,  270,  268,  268,  268,  268,  275,
      276,  273,  270,  282,  275,  276,  277,  278,  270,  281,

      281,  277,  278,  283,  284,  286,  287,  289,  291,  286,
      290,  290,  283,  292,  289,  282,  296,  294,  297,  316,
      298,  287,  327,  318,  316,  296,  284,  314,  318,  327,
      291,  294,  292,  308,  308,  308,  308,  297,  298,  302,
      314,  302,  302,  302,  302,  303,  627,  303,  303,  303,
      303,  304,  331,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  305,  331,  305,  305,  305,  305,
      306,  368,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  307,  368,  307,  307,  307,  307,  309,
      329,  309,  309,  309,  309,  309,  311,  329,  311,  311,

      311,  311,  311,  311,  311,  311,  311,  311,  311,  312,
      312,  312,  312,  313,  315,  313,  313,  313,  313,  320,
      326,  325,  328,  330,  334,  326,  336,  328,  330,  315,
      325,  320,  332,  334,  333,  335,  337,  332,  333,  338,
      335,  339,  337,  340,  338,  336,  407,  339,  344,  344,
      344,  344,  345,  407,  345,  345,  345,  345,  345,  340,
      347,  624,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  348,  348,  348,  348,  349,  621,  349,
      349,  349,  349,  350,  350,  350,  350,  351,  618,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,

      352,  425,  352,  352,  352,  352,  353,  425,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  354,
      356,  354,  354,  354,  354,  355,  355,  357,  362,  363,
      365,  366,  367,  369,  356,  371,  372,  370,  374,  449,
      449,  374,  362,  366,  367,  357,  370,  363,  365,  371,
      366,  369,  376,  377,  372,  399,  615,  376,  377,  381,
      381,  381,  381,  382,  399,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  383,  446,  383,  383,
      383,  383,  384,  612,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  385,  446,  385,  385,  385,

      385,  386,  421,  386,  386,  386,  386,  386,  388,  421,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  389,  389,  389,  389,  390,  403,  390,  390,  390,
      390,  391,  392,  400,  391,  401,  402,  392,  400,  404,
      401,  408,  426,  409,  431,  402,  409,  412,  403,  412,
      412,  412,  412,  412,  429,  609,  427,  404,  431,  429,
      426,  408,  414,  427,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  415,  415,  415,  415,  416,
      606,  416,  416,  416,  416,  417,  453,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  418,  453,

      418,  418,  418,  418,  419,  428,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  420,  432,  420,
      420,  420,  420,  603,  447,  428,  448,  432,  437,  447,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  438,  600,  438,  438,  438,  438,  439,  448,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      440,  597,  440,  440,  440,  440,  441,  470,  441,  441,
      441,  441,  441,  443,  470,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  444,  444,  444,  444,
      445,  451,  445,  445,  445,  445,  452,  456,  594,  456,

      456,  456,  456,  456,  459,  459,  459,  459,  467,  451,
      591,  452,  458,  467,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  460,  589,  460,  460,  460,
      460,  461,  503,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  462,  503,  462,  462,  462,  462,
      463,  466,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  464,  465,  464,  464,  464,  464,  468,
      471,  466,  465,  486,  476,  471,  476,  476,  476,  476,
      478,  557,  478,  478,  478,  478,  484,  484,  557,  468,
      475,  486,  475,  475,  475,  475,  475,  475,  475,  475,

      475,  475,  475,  477,  537,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  479,  588,  479,  479,
      479,  479,  479,  481,  537,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  482,  482,  482,  482,
      483,  485,  483,  483,  483,  483,  487,  488,  502,  578,
      485,  502,  505,  577,  493,  487,  493,  493,  493,  493,
      493,  496,  496,  496,  496,  488,  495,  505,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  497,
      575,  497,  497,  497,  497,  498,  574,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  499,  573,

      499,  499,  499,  499,  500,  572,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  501,  506,  501,
      501,  501,  501,  512,  521,  512,  512,  512,  512,  521,
      570,  569,  568,  506,  511,  567,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  513,  565,  513,
      513,  513,  513,  522,  513,  513,  513,  513,  513,  513,
      514,  564,  514,  514,  514,  514,  515,  522,  515,  515,
      515,  515,  515,  517,  523,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  519,  563,  519,  519,
      519,  519,  562,  546,  528,  523,  528,  528,  528,  528,

      528,  530,  546,  530,  530,  530,  530,  553,  530,  530,
      530,  530,  530,  530,  531,  561,  531,  531,  531,  531,
      532,  553,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  533,  559,  533,  533,  533,  533,  541,
      558,  541,  541,  541,  541,  555,  541,  541,  541,  541,
      541,  541,  542,  554,  542,  542,  542,  542,  543,  548,
      543,  543,  543,  543,  543,  550,  547,  550,  550,  550,
      550,  580,  580,  580,  580,  580,  581,  581,  581,  581,
      581,  582,  582,  582,  582,  582,  583,  544,  583,  583,
      583,  584,  584,  584,  584,  584,  585,  585,  585,  586,

      540,  586,  586,  586,  587,  587,  590,  590,  592,  592,
      593,  593,  595,  595,  596,  596,  598,  598,  599,  599,
      601,  601,  602,  602,  604,  604,  605,  605,  607,  607,
      608,  608,  610,  610,  611,  611,  613,  613,  614,  614,
      616,  616,  617,  617,  619,  619,  620,  620,  622,  622,
      623,  623,  625,  625,  626,  626,  629,  629,  630,  630,
      632,  632,  633,  633,  636,  636,  637,  637,  639,  639,
      642,  642,  643,  643,  644,  644,  646,  646,  647,  647,
      648,  648,  650,  650,  651,  651,  652,  652,  654,  654,
      655,  655,  656,  656,  658,  658,  539,  538,  536,  535,

      529,  526,  524,  520,  516,  510,  509,  508,  507,  504,
      494,  491,  490,  489,  480,  474,  473,  472,  469,  457,
      455,  454,  450,  442,  436,  435,  434,  433,  430,  422,
      413,  411,  410,  406,  405,  398,  397,  396,  395,  394,
      393,  387,  380,  379,  378,  375,  373,  364,  361,  360,
      359,  358,  346,  343,  342,  341,  324,  323,  322,  321,
      319,  317,  310,  301,  300,  299,  295,  280,  279,  272,
      269,  259,  256,  255,  240,  235,  234,  226,  219,  211,
      210,  209,  192,  183,  177,  167,  166,  165,  146,  142,
      141,  136,  127,  126,   97,   91,   81,   80,   79,   72,

       57,   56,   54,   49,   45,   44,   41,   36,   23,   22,
       18,   17,   14,   12,    7,    4,    3,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[67] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
    1, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "ClntLexer.l"
#line 5 "ClntLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 31 "ClntLexer.l"
  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_ClntParser_stype yylval;
}
#line 1092 "ClntLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 44 "ClntLexer.l"


#line 1197 "ClntLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 580 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1918 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 46 "ClntLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 47 "ClntLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "ClntLexer.l"
{ return ClntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "ClntLexer.l"
{ return ClntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "ClntLexer.l"
{ return ClntParser::ADDRES_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "ClntLexer.l"
{ return ClntParser::IA_;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "ClntLexer.l"
{ return ClntParser::TA_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "ClntLexer.l"
{ return ClntParser::IAID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "ClntLexer.l"
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 55 "ClntLexer.l"
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 56 "ClntLexer.l"
{ return ClntParser::LOGLEVEL_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 57 "ClntLexer.l"
{ return ClntParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 58 "ClntLexer.l"
{ return ClntParser::LOGNAME_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 59 "ClntLexer.l"
{ return ClntParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 60 "ClntLexer.l"
{ return ClntParser::SCRIPTS_DIR_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 61 "ClntLexer.l"
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 62 "ClntLexer.l"
{ return ClntParser::VALID_TIME_; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 63 "ClntLexer.l"
{ return ClntParser::T1_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 64 "ClntLexer.l"
{ return ClntParser::T2_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 65 "ClntLexer.l"
{ return ClntParser::OPTION_; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 66 "ClntLexer.l"
{ return ClntParser::DNS_SERVER_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 67 "ClntLexer.l"
{ return ClntParser::DOMAIN_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 68 "ClntLexer.l"
{ return ClntParser::NTP_SERVER_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 69 "ClntLexer.l"
{ return ClntParser::TIME_ZONE_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 70 "ClntLexer.l"
{ return ClntParser::SIP_SERVER_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 71 "ClntLexer.l"
{ return ClntParser::SIP_DOMAIN_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 72 "ClntLexer.l"
{ return ClntParser::FQDN_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 73 "ClntLexer.l"
{ return ClntParser::NIS_SERVER_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 74 "ClntLexer.l"
{ return ClntParser::NIS_DOMAIN_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 75 "ClntLexer.l"
{ return ClntParser::NISP_SERVER_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 76 "ClntLexer.l"
{ return ClntParser::NISP_DOMAIN_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 77 "ClntLexer.l"
{ return ClntParser::LIFETIME_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 78 "ClntLexer.l"
{ return ClntParser::REJECT_SERVERS_;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 79 "ClntLexer.l"
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 80 "ClntLexer.l"
{ return ClntParser::RAPID_COMMIT_;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 81 "ClntLexer.l"
{ return ClntParser::UNICAST_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 82 "ClntLexer.l"
{ return ClntParser::STRICT_RFC_NO_ROUTING_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 83 "ClntLexer.l"
{ return ClntParser::PD_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 84 "ClntLexer.l"
{ return ClntParser::PD_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 85 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 86 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_LL_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 87 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_LLT_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 88 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_EN_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 89 "ClntLexer.l"
{ return ClntParser::VENDOR_SPEC_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 90 "ClntLexer.l"
{ return ClntParser::AUTH_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 91 "ClntLexer.l"
{ return ClntParser::DIGEST_NONE_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 92 "ClntLexer.l"
{ return ClntParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 93 "ClntLexer.l"
;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 95 "ClntLexer.l"
;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 97 "ClntLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 103 "ClntLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 104 "ClntLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 105 "ClntLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 53:
YY_RULE_SETUP
#line 112 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 121 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 130 "ClntLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 140 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 149 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 158 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 167 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 176 "ClntLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 183 "ClntLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return ClntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return ClntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 204 "ClntLexer.l"
{
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return ClntParser::DUID_;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 235 "ClntLexer.l"
{ 
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::HEXNUMBER_;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 244 "ClntLexer.l"
{ 
    if(!sscanf(yytext,"%u",(unsigned int*)&(yylval.ival))) { 
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::INTNUMBER_;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 254 "ClntLexer.l"
{return yytext[0];} 
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 258 "ClntLexer.l"
ECHO;
	YY_BREAK
#line 1751 "ClntLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 580 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 580 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 579);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

yyFlexLexer::~yyFlexLexer()
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

	delete [] (yy_state_buf);
	yyfree((yy_start_stack)  );

}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 258 "ClntLexer.l"



