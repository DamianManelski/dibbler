#line 2 "ClntLexer.cpp"

#line 4 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 79
#define YY_END_OF_BUFFER 80
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[683] =
    {   0,
        1,    1,    0,    0,    0,    0,   80,   78,    2,    1,
        1,   78,   61,   78,   78,   77,   77,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   65,   65,   79,    1,    1,
        1,    0,   73,   61,    0,   73,   63,   62,   77,    0,
        0,   76,    0,   70,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,    6,   74,   74,   74,
       74,   74,   74,   74,   74,   40,   74,   74,   74,   74,
       74,   74,   18,   19,    7,   74,   74,   74,   74,   74,
       64,   62,   77,    0,    0,   69,   75,   68,   68,   74,

       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   77,    0,    0,    0,   67,   67,    0,   68,    0,
       68,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       27,    8,   74,   74,   74,   74,   74,    0,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   77,    0,    0,    0,    0,
       67,    0,   67,    0,   68,   68,   68,   68,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,    3,

       74,   74,   74,   74,   74,   74,    0,   74,   74,   74,
        9,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,    0,    0,    0,
        0,   67,   67,   67,   67,    0,   68,   68,   68,    0,
       68,   74,   74,   74,   74,   74,   74,   74,   22,   74,
       74,   74,   74,   28,   74,   74,   74,   74,   74,   74,
        0,    0,   74,   74,   74,   74,   20,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,    0,    0,    0,   67,   67,   67,    0,   67,    0,
        0,   68,   68,   68,   68,   74,    5,   74,   74,   74,

       74,   74,   44,   42,   74,   74,   74,   74,   74,   74,
       74,   74,    0,    0,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   37,   74,
       74,   74,    0,    0,    0,    0,    0,   67,   67,   67,
       67,    0,   68,   68,   68,    0,   68,   74,   74,   74,
       74,   74,   74,   74,   74,   43,   74,   74,   74,   74,
       33,   74,   12,   13,    0,    0,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   14,    0,    0,    0,   67,   67,   67,    0,
       67,   72,   68,   68,   68,   68,   74,   74,   74,   74,

       74,   74,   74,   74,   41,   74,   74,   74,   11,    0,
        0,   74,   74,    4,   74,   74,   74,   74,   74,   74,
       74,   74,   10,   74,   24,   74,   74,    0,    0,    0,
       71,   67,   67,   67,   67,   68,   68,   68,    0,   68,
       74,   74,   74,   74,   74,   74,   74,   21,   74,   74,
       74,    0,    0,   30,   29,   23,   74,   74,   74,   74,
       74,   74,   26,   25,   74,   74,   74,    0,    0,   67,
       67,   67,    0,   67,   68,   68,   68,   68,   50,   74,
       74,   74,   74,   53,   74,   74,   74,   47,   32,   31,
       74,   74,   74,   74,   74,   15,   74,   74,   45,    0,

        0,    0,   67,   67,   67,   67,   68,   68,   68,    0,
       68,   74,   74,   51,   74,   54,   49,   74,   74,   74,
       74,   36,   74,   74,   74,    0,    0,   67,   67,   67,
        0,   67,   68,   68,   68,   68,   74,   74,   74,   74,
       48,   74,   74,   74,   34,   74,   74,    0,    0,    0,
       67,   67,   67,   67,   68,   68,   68,    0,   68,   74,
       74,   74,   74,   74,   74,   74,   74,   17,    0,   66,
       69,   67,   67,   67,    0,   67,   68,   68,   68,   68,
       74,   74,   55,   74,   74,   35,   74,   74,    0,   66,
        0,   67,   67,   67,   67,   67,   68,   68,   68,    0,

       68,   74,   74,   56,   74,   74,   74,   74,   74,   74,
       66,   69,   67,    0,   67,   67,   67,   67,   68,   68,
       68,   74,   74,   74,   74,   74,   74,   16,   39,   74,
       66,   67,   67,   67,   67,   68,   68,   68,   74,   74,
       57,   58,   59,   60,   74,   67,   67,    0,   67,   67,
       68,   74,   52,   74,   67,   67,   68,   74,   74,   67,
       67,    0,   46,   38,   67,   67,   67,   67,    0,   67,
       67,   67,   67,    0,   67,   67,   67,   67,    0,   67,
       67,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
        1,    1,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,    1,    1,    1,    1,    1,   23,   24,   25,   26,

       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[49] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        4,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    6,    7,    7,    7,    7,    7,    7,    3,    8,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[815] =
    {   0,
        0,    0, 1953, 1952,    0,    0, 1959, 1962, 1962,   46,
       48, 1953,    0, 1950,   45,   45, 1910, 1933,   82,   51,
      105,  107,  108,    0,   53,   43,   48, 1916,  106,   55,
      114,  140, 1917,   61, 1915, 1962, 1939, 1962,   51,  134,
      154, 1945, 1962,    0, 1942, 1941, 1962,    0,  159, 1925,
      130, 1962,    0,  141,    0,  177, 1920,    0, 1908, 1902,
     1914, 1901, 1906, 1909, 1901, 1912, 1906, 1913,  147, 1907,
     1905, 1892, 1922, 1893, 1888,    0, 1902, 1890, 1895, 1886,
     1887,  183,    0,    0,    0, 1889, 1892, 1888, 1885, 1880,
     1962,    0,  211,  186, 1897,  186,    0,  231, 1896,  247,

     1877, 1880, 1885, 1887, 1903, 1889, 1885, 1883, 1873, 1882,
     1882, 1881, 1874, 1877, 1893,  152,  190, 1892, 1870, 1872,
     1868, 1871, 1866, 1886, 1853, 1863, 1866, 1867, 1860, 1864,
     1856,  263,  270, 1866, 1865,  290, 1864,    0,  308,  271,
     1863,  324,  336, 1837, 1873, 1841, 1840, 1849, 1869, 1838,
     1867,    0, 1849, 1833, 1833, 1831,  183, 1862,  327, 1834,
     1847, 1828, 1831,  327, 1841, 1841, 1827,  329, 1837, 1838,
     1852, 1838, 1834, 1822, 1848, 1835,  334, 1834, 1833,    0,
      360,  366, 1832, 1842,  384, 1830,  402, 1829, 1828, 1811,
     1807, 1812,  334, 1804, 1818, 1808,  404, 1812, 1801,    0,

     1810, 1798, 1808, 1811, 1800, 1813,  406, 1798, 1807, 1797,
        0, 1805, 1795, 1790, 1783, 1818, 1785, 1784, 1788, 1797,
     1789, 1780, 1773, 1779, 1809, 1778, 1791, 1794, 1793, 1792,
     1802,  437, 1790,  455, 1789,    0,  422, 1788,  473,  479,
     1787, 1785, 1766, 1769, 1780, 1768, 1793, 1762,    0, 1765,
     1766, 1752, 1763,    0, 1753, 1786, 1760, 1750, 1767, 1757,
     1754, 1763, 1754, 1748, 1759, 1746,    0, 1758, 1774, 1758,
     1772, 1740, 1745, 1739, 1751, 1767, 1739, 1733, 1740, 1763,
     1741, 1749, 1748,    0,  423, 1747,  497,  503, 1746, 1756,
      521,  533, 1744,  551, 1743, 1724,    0, 1720, 1737, 1738,

      329, 1716,    0, 1717, 1720, 1730, 1729, 1720, 1727, 1726,
     1725, 1724, 1715, 1709, 1725, 1703, 1715, 1701, 1718, 1717,
     1705, 1700, 1730, 1716, 1694, 1696, 1696, 1699,    0, 1703,
     1692, 1692, 1709, 1708, 1707, 1717,  523,  569, 1705,  587,
     1704,    0, 1703, 1702,  605,  512, 1701, 1699, 1680, 1693,
     1695, 1683, 1680, 1682, 1688,    0, 1687, 1677, 1702, 1674,
        0, 1676,    0,    0, 1686, 1664, 1676, 1679, 1676, 1677,
     1693, 1675, 1666, 1673, 1673, 1667, 1670, 1655, 1667, 1667,
     1665, 1654,    0, 1669, 1668,    0, 1667, 1666,  623,  629,
     1665,    0,  647, 1664,  665, 1663, 1649, 1673, 1644, 1647,

     1657, 1643, 1655, 1637,    0, 1634, 1640, 1648,    0, 1642,
     1645, 1635, 1630,    0, 1629,  328, 1634, 1632, 1626, 1634,
     1628, 1623,    0, 1637,    0, 1634, 1633, 1637, 1636, 1635,
        0,  683, 1634,  701, 1633, 1632, 1631,  719,  725, 1630,
     1610, 1619, 1607, 1621, 1622, 1619, 1614,    0, 1621, 1606,
     1615, 1605, 1600,    0,    0,    0, 1608, 1611, 1610, 1605,
     1591, 1594,    0,    0, 1623, 1590, 1606, 1608, 1607, 1606,
     1605,  743,  749, 1604,  767, 1603,  785, 1602,    0, 1587,
     1612, 1595, 1610,    0, 1583, 1584, 1591,    0, 1962, 1962,
     1588, 1575, 1585, 1571, 1585,    0, 1575, 1579,    0, 1587,

     1586, 1585,  803, 1584,  821, 1583, 1582, 1581,  839,  845,
     1580, 1573, 1565,    0,  325,    0,    0, 1572, 1571, 1553,
     1573,    0, 1555, 1557, 1558, 1570, 1569, 1568, 1567,  863,
      869, 1566,  887, 1565,  905, 1564, 1575, 1557, 1557, 1552,
        0, 1539, 1553, 1537,    0, 1568, 1550, 1554, 1549, 1537,
      923, 1525,  941, 1513, 1501, 1498,  959,  965, 1492, 1471,
     1460, 1478, 1470, 1450, 1438, 1426, 1414,    0, 1420, 1396,
        0, 1384, 1360,  983,  989, 1348, 1007, 1324, 1025, 1312,
     1283, 1265,    0,  421, 1233,    0, 1219, 1200, 1205, 1202,
     1187, 1183, 1043, 1165, 1061,    0, 1133, 1123, 1079,    0,

     1105, 1080, 1072,    0,   68, 1070, 1069, 1046, 1019,  994,
      997, 1962,  973,    0,  949,  931, 1097,    0, 1115,  913,
        0,  874,  873,  858,  832,  816,  800,    0,    0,  755,
      757,  733,  709, 1133,    0,  691,  673,    0,  650,  618,
        0,    0,    0,    0,  604,  595,  577,    0,    0, 1962,
        0,  540,    0,  527,  520,  519, 1962,  491,  480,  463,
      445,    0,    0,    0,  427,  421,  420,  419,    0,  418,
      392,  374,  350,    0,  298,  280,  247,  221,    0,  218,
      200, 1962, 1161, 1169, 1177, 1185, 1193, 1199, 1207, 1211,
     1214, 1218, 1221, 1224, 1228, 1231, 1234, 1237, 1241, 1244,

     1247,  215, 1250, 1253, 1256, 1259,  154, 1262, 1265, 1268,
     1271, 1274, 1277, 1280, 1283,  144, 1287, 1289, 1292, 1295,
     1298,  135, 1302, 1304, 1307, 1310, 1313, 1316, 1319, 1322,
     1325,  130, 1328, 1331, 1334, 1337,   51, 1340, 1343, 1346,
     1349, 1352, 1355, 1358, 1361, 1364, 1367, 1370, 1373, 1376,
     1379, 1382, 1385, 1388, 1391, 1394, 1397, 1400, 1403, 1406,
     1409, 1412, 1415, 1418, 1421, 1424, 1427, 1430, 1433, 1436,
     1439, 1442, 1445, 1448, 1451, 1454, 1457, 1460, 1463, 1466,
     1469, 1472, 1475, 1478, 1481, 1484, 1487, 1490, 1493, 1496,
     1499, 1502, 1505, 1508, 1511, 1514, 1517, 1520, 1523, 1526,

     1529, 1532, 1535, 1538, 1541, 1544, 1547, 1550, 1553, 1556,
     1559, 1562, 1565, 1568
    } ;

static yyconst flex_int16_t yy_def[815] =
    {   0,
      682,    1,  683,  683,  684,  684,  682,  682,  682,  682,
      682,  685,  686,  687,  682,  682,   16,  682,  682,   19,
       19,   19,   19,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  682,  682,  682,  682,  682,
      682,  685,  682,  686,  687,  682,  682,  689,  682,  690,
      691,  682,  692,  693,  688,  688,   56,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      682,  689,  682,  694,  695,  696,  692,  682,  697,   56,

      100,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  682,  698,  699,  700,  682,  701,  702,  682,  703,
      704,  100,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  682,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  132,  698,  705,  706,  707,
      682,  708,  709,  702,  682,  710,  682,  711,  142,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,

      688,  688,  688,  688,  688,  688,  682,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  682,  712,  713,
      707,  682,  714,  682,  715,  716,  717,  682,  682,  718,
      719,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      682,  682,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  720,  721,  722,  723,  682,  682,  724,  725,  716,
      717,  682,  726,  682,  727,  688,  688,  688,  688,  688,

      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  682,  682,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  682,  728,  729,  722,  723,  682,  730,  682,
      731,  732,  291,  682,  682,  733,  734,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  682,  682,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  735,  736,  737,  337,  682,  682,  738,
      739,  732,  682,  740,  682,  741,  688,  688,  688,  688,

      688,  688,  688,  688,  688,  688,  688,  688,  688,  682,
      682,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  682,  742,  743,
      737,  682,  744,  682,  745,  291,  682,  682,  746,  747,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  682,  682,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  748,  749,  337,
      682,  682,  750,  751,  682,  752,  682,  753,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  682,  682,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  682,

      754,  755,  682,  756,  682,  757,  291,  682,  682,  758,
      759,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  760,  761,  337,  682,  682,
      762,  763,  682,  764,  682,  765,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  682,  766,  767,
      682,  768,  682,  769,  291,  682,  682,  770,  771,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  772,  773,
      774,  337,  682,  682,  775,  776,  682,  777,  682,  778,
      688,  688,  688,  688,  688,  688,  688,  688,  682,  779,
      682,  780,  682,  781,  682,  782,  291,  682,  682,  783,

      784,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      785,  682,  786,  787,  337,  682,  682,  788,  682,  789,
      790,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      682,  791,  792,  682,  793,  291,  682,  794,  688,  688,
      688,  688,  688,  688,  688,  682,  795,  796,  337,  682,
      797,  688,  688,  688,  798,  799,  682,  688,  688,  682,
      800,  801,  688,  688,  802,  803,  682,  804,  805,  806,
      807,  682,  808,  809,  810,  811,  682,  812,  813,  814,
      682,    0,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,

      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,

      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682
    } ;

static yyconst flex_int16_t yy_nxt[2011] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   20,   21,   22,   23,   24,   24,
       25,   24,   24,   26,   24,   27,   28,   29,   24,   30,
       31,   32,   33,   34,   35,   24,   24,   24,   39,   40,
       41,   40,   47,   39,   40,  431,   48,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   50,   51,   51,   51,
       51,   51,   51,   70,   52,   67,   56,   78,   72,   71,
       68,   79,  624,   88,   73,  625,   55,   89,   69,   74,
       53,   55,   55,   55,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   50,   56,   56,   56,   57,   56,   56,
       55,   58,   55,   55,   55,   55,   55,   59,   55,   55,
       55,   55,   55,   55,   60,   55,   55,   55,   55,   55,
       56,   76,   56,   56,  392,   61,   41,   40,   80,  336,
       62,   63,   55,   55,   81,   77,   66,   64,  290,   55,
       55,   50,   65,   83,   84,   82,   39,   40,  231,   52,
      158,  159,   85,   99,   99,   99,   99,   99,   99,  112,
       86,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       50,   94,   94,   94,   94,   94,   94,  113,   52,  100,
      100,  100,  100,  100,  100,  100,  100,  100,   50,  100,

      100,  100,  100,  100,  100,  125,   58,   50,  137,  137,
      137,  137,  137,  137,  160,   52,  204,  205,  206,  184,
      161,  679,  126,  132,  132,  132,  132,  132,  132,  132,
      132,  132,   50,  133,  133,  133,  133,  133,  133,  679,
       52,  138,  679,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  140,  141,  141,  141,  141,  141,  141,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  674,  142,
      142,  142,  142,  142,  142,  176,  176,  176,  176,  176,
      176,  176,  176,  176,   50,  177,  177,  177,  177,  177,
      177,   50,   52,  188,  188,  188,  188,  188,  188,   52,

      180,  679,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  182,  183,  183,  183,  183,  183,  183,  138,  674,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  140,
      186,  186,  186,  186,  186,  186,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  190,  189,  189,  189,  189,
      189,  189,  208,  214,  219,  682,  245,  215,  352,  539,
      246,  457,  191,   52,  353,  540,  354,  209,  458,  220,
      180,  674,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  182,  233,  233,  233,  233,  233,  233,  235,  235,
      235,  235,  235,  235,  138,  669,  237,  237,  237,  237,

      237,  237,  237,  237,  237,  140,  238,  238,  238,  238,
      238,  238,  138,  674,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  240,  241,  241,  241,  241,  241,  241,
      250,  261,  138,  180,  604,  605,  606,  251,  607,  669,
      669,  662,  669,  140,  182,  252,  262,  180,  662,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  182,  286,
      286,  286,  286,  286,  286,  180,  662,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  288,  289,  289,  289,
      289,  289,  289,  138,  648,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  240,  293,  293,  293,  293,  293,

      293,  295,  295,  295,  295,  295,  295,  180,  664,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  288,  339,
      339,  339,  339,  339,  339,  341,  341,  341,  341,  341,
      341,  138,  663,  180,  396,  396,  396,  396,  396,  396,
      662,  648,  682,  138,  682,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  240,  344,  344,  344,  344,  344,
      344,  138,  659,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  346,  347,  347,  347,  347,  347,  347,  180,
      658,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      288,  388,  388,  388,  388,  388,  388,  180,  648,  389,

      389,  389,  389,  389,  389,  389,  389,  389,  390,  391,
      391,  391,  391,  391,  391,  138,  614,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  346,  394,  394,  394,
      394,  394,  394,  180,  654,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  390,  433,  433,  433,  433,  433,
      433,  435,  435,  435,  435,  435,  435,  138,  653,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  346,  437,
      437,  437,  437,  437,  437,  138,  652,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  439,  440,  440,  440,
      440,  440,  440,  180,  600,  470,  470,  470,  470,  470,

      470,  470,  470,  470,  390,  471,  471,  471,  471,  471,
      471,  180,  600,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  473,  474,  474,  474,  474,  474,  474,  138,
      648,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      439,  476,  476,  476,  476,  476,  476,  478,  478,  478,
      478,  478,  478,  180,  614,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  473,  504,  504,  504,  504,  504,
      504,  506,  506,  506,  506,  506,  506,  138,  591,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  439,  508,
      508,  508,  508,  508,  508,  138,  645,  509,  509,  509,

      509,  509,  509,  509,  509,  509,  510,  511,  511,  511,
      511,  511,  511,  180,  644,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  473,  529,  529,  529,  529,  529,
      529,  180,  643,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  531,  532,  532,  532,  532,  532,  532,  138,
      642,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      510,  534,  534,  534,  534,  534,  534,  536,  536,  536,
      536,  536,  536,  180,  641,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  531,  552,  552,  552,  552,  552,
      552,  554,  554,  554,  554,  554,  554,  138,  640,  555,

      555,  555,  555,  555,  555,  555,  555,  555,  510,  556,
      556,  556,  556,  556,  556,  138,  639,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  558,  559,  559,  559,
      559,  559,  559,  180,  600,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  531,  573,  573,  573,  573,  573,
      573,  180,  575,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  575,  576,  576,  576,  576,  576,  576,  138,
      575,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      558,  578,  578,  578,  578,  578,  578,  580,  580,  580,
      580,  580,  580,  180,  614,  593,  593,  593,  593,  593,

      593,  593,  593,  593,  575,  594,  594,  594,  594,  594,
      594,  596,  596,  596,  596,  596,  596,  138,  591,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  558,  598,
      598,  598,  598,  598,  598,  138,  630,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  600,  601,  601,  601,
      601,  601,  601,  180,  629,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  575,  616,  616,  616,  616,  616,
      616,  180,  628,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  627,  618,  618,  618,  618,  618,  618,  138,
      626,  619,  619,  619,  619,  619,  619,  619,  619,  619,

      600,  620,  620,  620,  620,  620,  620,  180,  623,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  622,  635,
      635,  635,  635,  635,  635,  138,  600,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  600,  637,  637,  637,
      637,  637,  637,  180,  558,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  558,  650,  650,  650,  650,  650,
      650,   36,   36,   36,   36,   36,   36,   36,   36,   38,
       38,   38,   38,   38,   38,   38,   38,   42,   42,   42,
       42,   42,   42,   42,   42,   44,  575,   44,   44,   44,
       44,   44,   44,   45,   45,   45,   45,   45,   45,   45,

       45,   55,   55,   55,  614,   55,   55,   92,  612,   92,
       92,   92,   92,   92,   92,   95,   95,   95,   94,   94,
       94,   94,   97,  591,   97,   98,  550,   98,  133,  133,
      133,  133,  134,  134,  134,  136,  610,  136,  141,  141,
      141,  177,  177,  177,  177,  178,  178,  178,  179,  179,
      179,  183,  183,  183,  187,  609,  187,  186,  186,  186,
      228,  228,  228,  229,  229,  229,  234,  608,  234,  233,
      233,  233,  238,  238,  238,  241,  241,  241,  282,  282,
      282,  283,  283,  283,  286,  286,  286,  289,  289,  289,
      291,  291,  291,  294,  603,  294,  293,  293,  293,  333,

      333,  333,  334,  334,  334,  337,  337,  337,  340,  602,
      340,  339,  339,  339,  344,  344,  344,  347,  347,  347,
      384,  384,  384,  385,  385,  385,  388,  388,  388,  391,
      391,  391,  395,  600,  395,  394,  394,  394,  428,  428,
      428,  429,  429,  429,  434,  558,  434,  433,  433,  433,
      437,  437,  437,  440,  440,  440,  468,  468,  468,  469,
      469,  469,  471,  471,  471,  474,  474,  474,  477,  575,
      477,  476,  476,  476,  500,  500,  500,  501,  501,  501,
      505,  531,  505,  504,  504,  504,  508,  508,  508,  511,
      511,  511,  526,  526,  526,  527,  527,  527,  529,  529,

      529,  532,  532,  532,  535,  531,  535,  534,  534,  534,
      548,  548,  548,  549,  549,  549,  553,  591,  553,  552,
      552,  552,  556,  556,  556,  559,  559,  559,  569,  569,
      569,  570,  570,  570,  573,  573,  573,  576,  576,  576,
      579,  550,  579,  578,  578,  578,  589,  589,  589,  590,
      590,  590,  592,  588,  592,  595,  587,  595,  594,  594,
      594,  598,  598,  598,  601,  601,  601,  611,  611,  611,
      613,  613,  613,  616,  616,  616,  618,  586,  618,  621,
      585,  621,  620,  620,  620,  631,  631,  631,  632,  632,
      632,  633,  584,  633,  635,  583,  635,  637,  637,  637,

      638,  582,  638,  646,  646,  646,  647,  647,  647,  650,
      581,  650,  651,  558,  651,  655,  655,  655,  656,  510,
      656,  657,  510,  657,  660,  660,  660,  661,  661,  661,
      665,  665,  665,  666,  575,  666,  667,  667,  667,  668,
      668,  668,  670,  670,  670,  671,  531,  671,  672,  672,
      672,  673,  673,  673,  675,  675,  675,  676,  571,  676,
      677,  677,  677,  678,  678,  678,  680,  680,  680,  596,
      550,  596,  681,  681,  681,  502,  568,  567,  566,  565,
      564,  563,  562,  561,  560,  558,  510,  531,  473,  473,
      550,  502,  547,  546,  545,  544,  543,  542,  541,  538,

      537,  510,  439,  439,  531,  473,   96,  502,  430,  525,
      524,  523,  522,  521,  520,  519,  518,  517,  516,  515,
      514,  513,  512,  510,  439,  473,  390,  390,  502,  430,
      499,  498,  497,  496,  495,  494,  493,  492,  491,  490,
      489,  488,  487,  486,  485,  484,  483,  482,  481,  480,
      479,  439,  346,  346,  473,  390,   96,  430,  335,  467,
      466,  465,  464,  463,  462,  461,  460,  459,  456,  455,
      454,  453,  452,  451,  450,  449,  448,  447,  446,  445,
      444,  443,  442,  441,  439,  346,  390,  288,  288,  430,
      335,  427,  426,  425,  424,  423,  422,  421,  420,  419,

      418,  417,  416,  415,  414,  413,  412,  411,  410,  409,
      408,  407,  406,  405,  404,  403,  402,  401,  400,  399,
      398,  397,  346,  240,  240,  390,  288,  386,   96,  335,
      230,  383,  382,  381,  380,  379,  378,  377,  376,  375,
      374,  373,  372,  371,  370,  369,  368,  367,  366,  365,
      364,  363,  362,  361,  360,  359,  358,  357,  356,  355,
      351,  350,  349,  348,  346,  240,  342,  288,  182,  335,
      230,  332,  331,  330,  329,  328,  327,  326,  325,  324,
      323,  322,  321,  320,  319,  318,  317,  316,  315,  314,
      313,  312,  311,  310,  309,  308,  307,  306,  305,  304,

      303,  302,  301,  300,  299,  298,  297,  296,  240,  140,
      288,  182,  284,   96,  230,  135,  281,  280,  279,  278,
      277,  276,  275,  274,  273,  272,  271,  270,  269,  268,
      267,  266,  265,  264,  263,  260,  259,  258,  257,  256,
      255,  254,  253,  249,  248,  247,  244,  243,  242,  682,
      240,  140,  236,  182,  230,  135,  682,  227,  226,  225,
      224,  223,  222,  221,  218,  217,  216,  213,  212,  211,
      210,  207,  203,  202,  201,  200,  199,  198,  197,  196,
      195,  194,  193,  192,  140,  182,   96,  135,  175,  174,
      173,  172,  171,  170,  169,  168,  167,  166,  165,  164,

      163,  162,  157,  156,  155,  154,  153,  152,  151,  150,
      149,  148,  147,  146,  145,  144,  143,  140,  135,  131,
      130,  129,  128,  127,  124,  123,  122,  121,  120,  119,
      118,  117,  116,  115,  114,  111,  110,  109,  108,  107,
      106,  105,  104,  103,  102,  101,   96,   45,   46,   43,
       91,   90,   87,   75,   54,  682,   46,   43,  682,   37,
       37,    7,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,

      682,  682,  682,  682,  682,  682,  682,  682,  682,  682
    } ;

static yyconst flex_int16_t yy_chk[2011] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   10,   10,
       11,   11,   15,   39,   39,  737,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   26,   16,   25,   20,   30,   27,   26,
       25,   30,  605,   34,   27,  605,   20,   34,   25,   27,
       16,   19,   19,   20,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       21,   29,   22,   23,  732,   21,   40,   40,   31,  722,
       21,   21,   22,   23,   31,   29,   23,   21,  716,   22,
       23,   51,   22,   32,   32,   31,   41,   41,  707,   51,
      116,  116,   32,   54,   54,   54,   54,   54,   54,   69,
       32,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   69,   49,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   82,   56,   94,   96,   96,
       96,   96,   96,   96,  117,   94,  157,  157,  157,  702,
      117,  681,   82,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,  680,
       93,   98,  678,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  677,  100,
      100,  100,  100,  100,  100,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  133,  132,  140,  140,  140,  140,  140,  140,  133,

      136,  676,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  139,  675,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  143,  142,  142,  142,  142,
      142,  142,  159,  164,  168,  177,  193,  164,  301,  515,
      193,  416,  143,  177,  301,  515,  301,  159,  416,  168,
      181,  673,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  182,  182,
      182,  182,  182,  182,  185,  672,  185,  185,  185,  185,

      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  187,  671,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      197,  207,  237,  285,  584,  584,  584,  197,  584,  670,
      668,  667,  666,  237,  285,  197,  207,  232,  665,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  234,  661,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  239,  660,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,

      239,  240,  240,  240,  240,  240,  240,  287,  659,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  288,  288,  288,  288,  288,
      288,  291,  658,  337,  346,  346,  346,  346,  346,  346,
      656,  655,  291,  292,  337,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  294,  654,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  338,
      652,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  340,  647,  340,

      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  345,  646,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  389,  645,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  390,  390,  390,  390,  390,  390,  393,  640,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  395,  639,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  432,  637,  432,  432,  432,  432,  432,

      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  434,  636,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  438,
      633,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  439,  439,  439,
      439,  439,  439,  472,  632,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  473,  473,  473,  473,  473,  473,  475,  631,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  477,  630,  477,  477,  477,

      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  503,  627,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  505,  626,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  509,
      625,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  510,  510,  510,
      510,  510,  510,  530,  624,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  531,  531,  531,  531,  531,  531,  533,  623,  533,

      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  535,  622,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  551,  620,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  553,  616,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  557,
      615,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  558,  558,  558,
      558,  558,  558,  574,  613,  574,  574,  574,  574,  574,

      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  575,  575,  575,  575,  575,  575,  577,  611,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  579,  610,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  593,  609,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  595,  608,  595,  595,  595,  595,  595,  595,  595,
      595,  595,  607,  595,  595,  595,  595,  595,  595,  599,
      606,  599,  599,  599,  599,  599,  599,  599,  599,  599,

      599,  599,  599,  599,  599,  599,  599,  617,  603,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  602,  617,
      617,  617,  617,  617,  617,  619,  601,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  634,  598,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  597,  634,  634,  634,  634,  634,
      634,  683,  683,  683,  683,  683,  683,  683,  683,  684,
      684,  684,  684,  684,  684,  684,  684,  685,  685,  685,
      685,  685,  685,  685,  685,  686,  594,  686,  686,  686,
      686,  686,  686,  687,  687,  687,  687,  687,  687,  687,

      687,  688,  688,  688,  592,  688,  688,  689,  591,  689,
      689,  689,  689,  689,  689,  690,  690,  690,  691,  691,
      691,  691,  692,  590,  692,  693,  589,  693,  694,  694,
      694,  694,  695,  695,  695,  696,  588,  696,  697,  697,
      697,  698,  698,  698,  698,  699,  699,  699,  700,  700,
      700,  701,  701,  701,  703,  587,  703,  704,  704,  704,
      705,  705,  705,  706,  706,  706,  708,  585,  708,  709,
      709,  709,  710,  710,  710,  711,  711,  711,  712,  712,
      712,  713,  713,  713,  714,  714,  714,  715,  715,  715,
      717,  717,  717,  718,  582,  718,  719,  719,  719,  720,

      720,  720,  721,  721,  721,  723,  723,  723,  724,  581,
      724,  725,  725,  725,  726,  726,  726,  727,  727,  727,
      728,  728,  728,  729,  729,  729,  730,  730,  730,  731,
      731,  731,  733,  580,  733,  734,  734,  734,  735,  735,
      735,  736,  736,  736,  738,  578,  738,  739,  739,  739,
      740,  740,  740,  741,  741,  741,  742,  742,  742,  743,
      743,  743,  744,  744,  744,  745,  745,  745,  746,  576,
      746,  747,  747,  747,  748,  748,  748,  749,  749,  749,
      750,  573,  750,  751,  751,  751,  752,  752,  752,  753,
      753,  753,  754,  754,  754,  755,  755,  755,  756,  756,

      756,  757,  757,  757,  758,  572,  758,  759,  759,  759,
      760,  760,  760,  761,  761,  761,  762,  570,  762,  763,
      763,  763,  764,  764,  764,  765,  765,  765,  766,  766,
      766,  767,  767,  767,  768,  768,  768,  769,  769,  769,
      770,  569,  770,  771,  771,  771,  772,  772,  772,  773,
      773,  773,  774,  567,  774,  775,  566,  775,  776,  776,
      776,  777,  777,  777,  778,  778,  778,  779,  779,  779,
      780,  780,  780,  781,  781,  781,  782,  565,  782,  783,
      564,  783,  784,  784,  784,  785,  785,  785,  786,  786,
      786,  787,  563,  787,  788,  562,  788,  789,  789,  789,

      790,  561,  790,  791,  791,  791,  792,  792,  792,  793,
      560,  793,  794,  559,  794,  795,  795,  795,  796,  556,
      796,  797,  555,  797,  798,  798,  798,  799,  799,  799,
      800,  800,  800,  801,  554,  801,  802,  802,  802,  803,
      803,  803,  804,  804,  804,  805,  552,  805,  806,  806,
      806,  807,  807,  807,  808,  808,  808,  809,  550,  809,
      810,  810,  810,  811,  811,  811,  812,  812,  812,  813,
      549,  813,  814,  814,  814,  548,  547,  546,  544,  543,
      542,  540,  539,  538,  537,  536,  534,  532,  529,  528,
      527,  526,  525,  524,  523,  521,  520,  519,  518,  513,

      512,  511,  508,  507,  506,  504,  502,  501,  500,  498,
      497,  495,  494,  493,  492,  491,  487,  486,  485,  483,
      482,  481,  480,  478,  476,  474,  471,  470,  469,  468,
      467,  466,  465,  462,  461,  460,  459,  458,  457,  453,
      452,  451,  450,  449,  447,  446,  445,  444,  443,  442,
      441,  440,  437,  436,  435,  433,  430,  429,  428,  427,
      426,  424,  422,  421,  420,  419,  418,  417,  415,  413,
      412,  411,  410,  408,  407,  406,  404,  403,  402,  401,
      400,  399,  398,  397,  396,  394,  391,  388,  387,  385,
      384,  382,  381,  380,  379,  378,  377,  376,  375,  374,

      373,  372,  371,  370,  369,  368,  367,  366,  365,  362,
      360,  359,  358,  357,  355,  354,  353,  352,  351,  350,
      349,  348,  347,  344,  343,  341,  339,  336,  335,  334,
      333,  332,  331,  330,  328,  327,  326,  325,  324,  323,
      322,  321,  320,  319,  318,  317,  316,  315,  314,  313,
      312,  311,  310,  309,  308,  307,  306,  305,  304,  302,
      300,  299,  298,  296,  295,  293,  290,  289,  286,  283,
      282,  281,  280,  279,  278,  277,  276,  275,  274,  273,
      272,  271,  270,  269,  268,  266,  265,  264,  263,  262,
      261,  260,  259,  258,  257,  256,  255,  253,  252,  251,

      250,  248,  247,  246,  245,  244,  243,  242,  241,  238,
      235,  233,  231,  230,  229,  228,  227,  226,  225,  224,
      223,  222,  221,  220,  219,  218,  217,  216,  215,  214,
      213,  212,  210,  209,  208,  206,  205,  204,  203,  202,
      201,  199,  198,  196,  195,  194,  192,  191,  190,  189,
      188,  186,  184,  183,  179,  178,  176,  175,  174,  173,
      172,  171,  170,  169,  167,  166,  165,  163,  162,  161,
      160,  158,  156,  155,  154,  153,  151,  150,  149,  148,
      147,  146,  145,  144,  141,  137,  135,  134,  131,  130,
      129,  128,  127,  126,  125,  124,  123,  122,  121,  120,

      119,  118,  115,  114,  113,  112,  111,  110,  109,  108,
      107,  106,  105,  104,  103,  102,  101,   99,   95,   90,
       89,   88,   87,   86,   81,   80,   79,   78,   77,   75,
       74,   73,   72,   71,   70,   68,   67,   66,   65,   64,
       63,   62,   61,   60,   59,   57,   50,   46,   45,   42,
       37,   35,   33,   28,   18,   17,   14,   12,    7,    4,
        3,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,

      682,  682,  682,  682,  682,  682,  682,  682,  682,  682
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[80] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
        };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "ClntLexer.l"
#line 5 "ClntLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 31 "ClntLexer.l"
  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_ClntParser_stype yylval;
}
#line 1151 "ClntLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 44 "ClntLexer.l"


#line 1256 "ClntLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 683 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1962 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 46 "ClntLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 47 "ClntLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "ClntLexer.l"
{ return ClntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "ClntLexer.l"
{ return ClntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "ClntLexer.l"
{ return ClntParser::ADDRES_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "ClntLexer.l"
{ return ClntParser::IA_;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "ClntLexer.l"
{ return ClntParser::TA_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "ClntLexer.l"
{ return ClntParser::IAID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "ClntLexer.l"
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 55 "ClntLexer.l"
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 56 "ClntLexer.l"
{ return ClntParser::LOGLEVEL_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 57 "ClntLexer.l"
{ return ClntParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 58 "ClntLexer.l"
{ return ClntParser::LOGNAME_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 59 "ClntLexer.l"
{ return ClntParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 60 "ClntLexer.l"
{ return ClntParser::SCRIPTS_DIR_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 61 "ClntLexer.l"
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 62 "ClntLexer.l"
{ return ClntParser::VALID_TIME_; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 63 "ClntLexer.l"
{ return ClntParser::T1_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 64 "ClntLexer.l"
{ return ClntParser::T2_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 65 "ClntLexer.l"
{ return ClntParser::OPTION_; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 66 "ClntLexer.l"
{ return ClntParser::DNS_SERVER_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 67 "ClntLexer.l"
{ return ClntParser::DOMAIN_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 68 "ClntLexer.l"
{ return ClntParser::NTP_SERVER_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 69 "ClntLexer.l"
{ return ClntParser::TIME_ZONE_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 70 "ClntLexer.l"
{ return ClntParser::SIP_SERVER_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 71 "ClntLexer.l"
{ return ClntParser::SIP_DOMAIN_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 72 "ClntLexer.l"
{ return ClntParser::FQDN_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 73 "ClntLexer.l"
{ return ClntParser::FQDN_S_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 74 "ClntLexer.l"
{ return ClntParser::NIS_SERVER_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 75 "ClntLexer.l"
{ return ClntParser::NIS_DOMAIN_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 76 "ClntLexer.l"
{ return ClntParser::NISP_SERVER_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 77 "ClntLexer.l"
{ return ClntParser::NISP_DOMAIN_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 78 "ClntLexer.l"
{ return ClntParser::LIFETIME_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 79 "ClntLexer.l"
{ return ClntParser::REJECT_SERVERS_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 80 "ClntLexer.l"
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 81 "ClntLexer.l"
{ return ClntParser::RAPID_COMMIT_;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 82 "ClntLexer.l"
{ return ClntParser::UNICAST_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 83 "ClntLexer.l"
{ return ClntParser::STRICT_RFC_NO_ROUTING_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 84 "ClntLexer.l"
{ return ClntParser::PD_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 85 "ClntLexer.l"
{ return ClntParser::PD_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 86 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 87 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_LL_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 88 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_LLT_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 89 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_EN_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 90 "ClntLexer.l"
{ return ClntParser::VENDOR_SPEC_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 91 "ClntLexer.l"
{ return ClntParser::ANON_INF_REQUEST_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 92 "ClntLexer.l"
{ return ClntParser::INSIST_MODE_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 93 "ClntLexer.l"
{ return ClntParser::INACTIVE_MODE_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 94 "ClntLexer.l"
{ return ClntParser::EXPERIMENTAL_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 95 "ClntLexer.l"
{ return ClntParser::ADDR_PARAMS_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 96 "ClntLexer.l"
{ return ClntParser::AUTH_ENABLED_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 97 "ClntLexer.l"
{ return ClntParser::AUTH_ACCEPT_METHODS_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 98 "ClntLexer.l"
{ return ClntParser::DIGEST_NONE_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 99 "ClntLexer.l"
{ return ClntParser::DIGEST_PLAIN_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 100 "ClntLexer.l"
{ return ClntParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 101 "ClntLexer.l"
{ return ClntParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 102 "ClntLexer.l"
{ return ClntParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 103 "ClntLexer.l"
{ return ClntParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 104 "ClntLexer.l"
{ return ClntParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 105 "ClntLexer.l"
{ return ClntParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 106 "ClntLexer.l"
;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 108 "ClntLexer.l"
;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 110 "ClntLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 116 "ClntLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 117 "ClntLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 118 "ClntLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 66:
YY_RULE_SETUP
#line 125 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 134 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 143 "ClntLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 153 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 162 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 171 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 180 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 189 "ClntLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 196 "ClntLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return ClntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return ClntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 217 "ClntLexer.l"
{
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return ClntParser::DUID_;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 248 "ClntLexer.l"
{ 
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::HEXNUMBER_;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 257 "ClntLexer.l"
{ 
    if(!sscanf(yytext,"%u",(unsigned int*)&(yylval.ival))) { 
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::INTNUMBER_;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 265 "ClntLexer.l"
{return yytext[0];} 
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 267 "ClntLexer.l"
ECHO;
	YY_BREAK
#line 1875 "ClntLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 683 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 683 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 682);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

yyFlexLexer::~yyFlexLexer()
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

	delete [] (yy_state_buf);
	yyfree((yy_start_stack)  );

}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 267 "ClntLexer.l"



