#line 2 "ClntLexer.cpp"

#line 4 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 55
#define YY_END_OF_BUFFER 56
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[511] =
    {   0,
        1,    1,    0,    0,    0,    0,   56,   54,    2,    1,
        1,   54,   37,   54,   54,   53,   53,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   41,   41,   55,    1,    1,    1,
        0,   49,   37,    0,   49,   39,   38,   53,    0,    0,
       52,    0,   46,   50,   50,   50,   50,   50,   50,   50,
        6,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   17,   18,    7,   50,   50,   50,   50,
       40,   38,   53,    0,    0,   45,   51,   44,   44,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,

       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   53,    0,    0,    0,   43,   43,    0,   44,
        0,   44,   50,   50,   50,   50,   26,    8,   50,   50,
       50,    0,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   53,    0,    0,
        0,    0,   43,    0,   43,    0,   44,   44,   44,   44,
       50,   50,   50,   50,    3,   50,   50,   50,   50,    0,
       50,   50,   50,    9,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,    0,    0,    0,
        0,   43,   43,   43,   43,    0,   44,   44,   44,    0,

       44,   50,   50,   21,   50,   50,   50,   50,    0,    0,
       50,   50,   50,   50,   19,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,    0,    0,    0,   43,
       43,   43,    0,   43,    0,    0,   44,   44,   44,   44,
        5,   50,   50,   50,   50,   50,    0,    0,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       35,   50,   50,    0,    0,    0,    0,    0,   43,   43,
       43,   43,    0,   44,   44,   44,    0,   44,   50,   31,
       50,   12,   13,    0,    0,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   14,    0,

        0,    0,   43,   43,   43,    0,   43,   48,   44,   44,
       44,   44,   50,   11,    0,    0,   50,   50,    4,   50,
       50,   50,   50,   50,   50,   10,   50,   23,   50,    0,
        0,    0,   47,   43,   43,   43,   43,   44,   44,   44,
        0,   44,   20,    0,    0,   28,   27,   22,   50,   50,
       50,   50,   25,   24,   50,   50,    0,    0,   43,   43,
       43,    0,   43,   44,   44,   44,   44,   30,   29,   50,
       50,   50,   50,   50,   50,    0,    0,    0,   43,   43,
       43,   43,   44,   44,   44,    0,   44,   50,   50,   34,
       50,   50,   50,    0,    0,   43,   43,   43,    0,   43,

       44,   44,   44,   44,   50,   50,   32,   50,   50,    0,
        0,    0,   43,   43,   43,   43,   44,   44,   44,    0,
       44,   50,   50,   50,   16,    0,   42,   45,   43,   43,
       43,    0,   43,   44,   44,   44,   44,   50,   33,   50,
        0,   42,    0,   43,   43,   43,   43,   43,   44,   44,
       44,    0,   44,   50,   50,   42,   45,   43,    0,   43,
       43,   43,   43,   44,   44,   44,   15,   50,   42,   43,
       43,   43,   43,   44,   44,   44,   50,   43,   43,    0,
       43,   43,   44,   50,   43,   43,   44,   50,   43,   43,
        0,   36,   43,   43,   43,   43,    0,   43,   43,   43,

       43,    0,   43,   43,   43,   43,    0,   43,   43,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   16,   16,   16,   16,   16,   16,   17,    1,    1,
        1,    1,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
        1,    1,    1,    1,    1,    1,   18,   19,   20,   21,

       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[44] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        3,    1,    4,    4,    4,    4,    5,    4,    4,    4,
        4,    4,    4,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[590] =
    {   0,
        0,    0, 1771, 1770,    0,    0, 1777, 1780, 1780,   41,
       43, 1771,    0, 1768,   40,   40, 1733, 1756,   69,   82,
       18, 1738, 1754,   49,   47,   89,   60,   34,   53,   91,
       96,   92,  101,   95, 1780, 1758, 1780,  121,  126,  128,
     1764, 1780,    0, 1761, 1760, 1780,    0,  120, 1749,  133,
     1780,    0,  137, 1748,  141, 1743, 1746,  141,  148,   57,
      149,  150,  153,  155,  152,  163,  154,  157,  164,  165,
      166,  167,  172, 1745, 1744, 1743,  174,  175,   51,  168,
     1780,    0,  195,  208, 1742,  212,    0,  218,  231,  235,
     1723,  185,  179,  188,   99,  242,  243,  189,  254,  249,

      251,  226,  250,  253,  255,  264,  259,  261,  263,  266,
      265,  267,  284,  297, 1740, 1739,  303,  316,  320,  326,
      337,  343,  347,  271,  272,  338, 1738, 1737,  354,  355,
      356, 1743,  357,  358,  362,  360,  365,  366,  273,  364,
      374,  372,  381,  389,  385,  383,  395,  400, 1735, 1734,
     1733,  405,  411,  422,  428,  434,  440,  453,  459,  472,
     1732,  429,  467,  392, 1731,  473,  474,  475,  390,  472,
      477,  478,  480, 1730,  481,  484,  485,  495,  487,  489,
      496,  423,  493,  497,  499,  509,  506, 1729, 1728, 1727,
      518,  530,  543,  549,  562,  523,  568, 1726,  575,  586,

      592,  525,  587, 1725,  298,  570,  593,  594, 1709, 1718,
      595,  596,  505,  598, 1722,  599,  600,  609,  606,  610,
      612,  618,  615,  601,  613,  620, 1721, 1720,  635,  641,
     1719,  648,  659,  665,  671,  677,  683,  696,  702,  715,
     1718,  697,  622,  710,  716,  717, 1704, 1698,  623,  718,
      720,  723,  724,  726,  538,  730,  725,  672,  660,  732,
     1715,  727,  733, 1714, 1713, 1712,  756,  762,  768,  781,
      787,  800,  804,  810, 1711,  817,  828,  834,  734, 1710,
      737, 1709, 1708, 1706, 1684,  735,  738,  636,  829,  812,
      763,  835,  748,  836,  837,  838,  842,  839, 1705, 1704,

     1703,  852,  861, 1702,  868,  879,  885,  889,  895,  908,
      914,  927,  909, 1701, 1691, 1694,  922,  928, 1698,  929,
      930,  782,  932,  931,  933, 1697,  843, 1696,  934, 1695,
     1694, 1693,  956,  962,  975,  981,  994, 1000, 1692, 1007,
     1018, 1024, 1691, 1676, 1671, 1688, 1687, 1686,  854,  935,
      948, 1002, 1685, 1684,  944, 1019, 1683, 1682, 1031, 1681,
     1046, 1036, 1059, 1065, 1078, 1084, 1097, 1780, 1780,  970,
     1036, 1079,  938, 1092, 1098, 1680, 1679, 1678, 1114, 1106,
     1127, 1140, 1146, 1677, 1153, 1164, 1170, 1165, 1038, 1676,
     1171, 1026,  890, 1675, 1674, 1178, 1673, 1196, 1183, 1189,

     1209, 1222, 1228, 1241, 1184, 1236, 1672, 1148, 1242, 1671,
     1670, 1669, 1254, 1267, 1273, 1286, 1292, 1668, 1299, 1247,
     1312, 1307, 1173, 1294, 1667, 1666, 1665,    0, 1321, 1664,
     1328, 1339, 1345, 1351, 1364, 1370, 1383, 1109, 1663, 1378,
     1662, 1661, 1660, 1659, 1400, 1389, 1413, 1426, 1432, 1658,
     1439,    0, 1452, 1384, 1392, 1657, 1780, 1656,    0, 1458,
     1655, 1465, 1478, 1484, 1497,    0, 1654, 1427, 1558, 1545,
     1524, 1503, 1516, 1522, 1517,    0, 1314, 1511, 1503,    0,
     1529, 1780,    0, 1465, 1498, 1492, 1780, 1453, 1473, 1434,
        0, 1421, 1408, 1395, 1391, 1390,    0, 1365, 1359, 1346,

     1340,    0, 1313, 1287, 1281, 1268,    0, 1262, 1249, 1780,
     1545, 1550, 1555, 1560, 1565, 1568, 1573, 1575, 1236, 1230,
     1577, 1148, 1579, 1581, 1114, 1583, 1585, 1110, 1587, 1589,
     1086, 1591, 1593, 1050, 1595, 1597, 1008, 1599, 1601, 1002,
     1603, 1605,  954, 1607, 1609,  893, 1611, 1613,  866, 1615,
     1617,  865, 1619, 1621,  755, 1623, 1625,  679,  639, 1627,
     1629,  576, 1631, 1633,  521,  513, 1635, 1637,  467, 1639,
      407,  334, 1641, 1643, 1645,  288, 1647, 1649, 1651,  226,
     1653, 1655, 1657,  140, 1659, 1661, 1663,   72, 1665
    } ;

static yyconst flex_int16_t yy_def[590] =
    {   0,
      510,    1,  511,  511,  512,  512,  510,  510,  510,  510,
      510,  513,  514,  515,  510,  510,   16,  510,  516,  516,
       20,   20,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  510,  510,  510,  510,  510,  510,
      513,  510,  514,  515,  510,  510,  517,  510,  518,   48,
      510,  519,  520,  516,   20,   55,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      510,  517,  510,   83,  521,  522,  519,  510,   88,   55,
       90,  516,  516,  516,  516,  516,  516,  516,  516,  516,

      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  510,  113,  523,  524,  510,  117,  510,  510,
      525,  120,   90,  516,  516,  516,  516,  516,  516,  516,
      516,  510,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  114,  114,  526,
      527,  510,  510,  528,  153,  510,  510,  157,  510,  159,
      123,  516,  516,  516,  516,  516,  516,  516,  516,  510,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  510,  529,  530,
      510,  510,  192,  510,  194,  510,  510,  510,  510,  531,

      199,  516,  516,  516,  516,  516,  516,  516,  510,  510,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  532,  533,  510,  510,
      510,  510,  534,  232,  510,  510,  510,  237,  510,  239,
      516,  516,  516,  516,  516,  516,  510,  510,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  510,  535,  536,  510,  510,  510,  269,
      510,  271,  510,  510,  510,  510,  537,  276,  516,  516,
      516,  516,  516,  510,  510,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  538,

      539,  510,  510,  510,  510,  540,  305,  510,  510,  309,
      510,  311,  516,  516,  510,  510,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  510,
      541,  542,  510,  510,  334,  510,  336,  510,  510,  510,
      543,  340,  516,  510,  510,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  544,  545,  510,  510,
      510,  546,  361,  510,  364,  510,  366,  510,  510,  516,
      516,  516,  516,  516,  516,  510,  547,  548,  510,  379,
      510,  381,  510,  510,  510,  549,  385,  516,  516,  516,
      516,  516,  516,  550,  551,  510,  510,  510,  552,  398,

      510,  401,  510,  403,  516,  516,  516,  516,  516,  510,
      553,  554,  510,  413,  510,  415,  510,  510,  510,  555,
      419,  516,  516,  516,  516,  556,  557,  558,  510,  510,
      510,  559,  431,  510,  434,  510,  436,  516,  516,  516,
      510,  560,  510,  561,  510,  445,  510,  447,  510,  510,
      510,  562,  451,  516,  516,  563,  510,  564,  565,  510,
      510,  510,  462,  510,  464,  566,  516,  516,  510,  567,
      568,  510,  472,  510,  510,  569,  516,  510,  570,  571,
      510,  510,  572,  516,  573,  574,  510,  516,  510,  575,
      576,  516,  577,  578,  510,  579,  580,  581,  582,  510,

      583,  584,  585,  586,  510,  587,  588,  589,  510,    0,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510
    } ;

static yyconst flex_int16_t yy_nxt[1824] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   18,   19,   20,   20,
       21,   20,   22,   23,   23,   24,   23,   23,   25,   23,
       26,   27,   28,   23,   29,   30,   31,   32,   33,   34,
       23,   23,   23,   38,   39,   40,   39,   46,   58,   59,
      510,   47,   48,   48,   48,   48,   49,   50,   50,   50,
       50,   50,   50,  510,   51,  510,   61,  510,   69,  510,
       70,   62,   63,  510,   71,  448,  510,   94,   64,  111,
       52,   55,   55,   55,   55,   49,   55,   55,   55,   56,
       55,   55,   68,   57,   55,   55,   55,   55,   49,   55,

       55,   55,   55,   55,   55,  510,   57,  510,  510,   74,
       75,  510,  510,   76,   65,  510,   72,  510,   79,  128,
       66,   77,   78,   38,   39,   67,   80,   73,   40,   39,
       38,   39,   83,   83,   83,   83,   49,   84,   84,   84,
       84,   84,   84,  504,   51,   84,   84,   84,   84,   88,
       88,   88,   88,   90,   90,   90,   90,  510,   90,   90,
       90,   90,   90,   90,  510,  510,  510,   96,  510,  510,
      510,  510,  100,  510,   95,   97,   92,   93,   98,  510,
      510,  510,  510,  510,  510,  103,  101,   99,  510,  107,
      510,  510,  105,  102,  125,  510,  126,  104,  131,  106,

      110,  510,  112,  109,  510,  510,  108,  113,  113,  113,
      113,   49,  114,  114,  114,  114,  114,  114,  127,   51,
      114,  114,  114,  114,  117,  117,  117,  117,  119,  499,
      120,  120,  120,  120,  121,  122,  122,  122,  122,  122,
      122,  510,  510,  122,  122,  122,  122,  123,  123,  123,
      123,  137,  123,  123,  123,  123,  123,  123,  510,  510,
      136,  129,  132,  133,  130,  510,  510,  510,  134,  510,
      510,  510,  138,  141,  135,  510,  140,  510,  139,  510,
      510,  510,  510,  510,  144,  145,  143,  510,  510,  510,
      146,  494,  162,  178,  147,  142,  148,  148,  148,  148,

       49,  149,  149,  149,  149,  149,  149,  163,   51,  149,
      149,  149,  149,  152,  510,  153,  153,  153,  153,  154,
      155,  155,  155,  155,  155,  155,  510,  243,  155,  155,
      155,  155,  156,  156,  156,  156,  119,  487,  157,  157,
      157,  157,  121,  158,  158,  158,  158,  158,  158,  159,
      159,  159,  159,  510,  510,  158,  158,  158,  158,  161,
      161,  161,  161,  164,  161,  161,  161,  161,  161,  161,
      510,  510,  510,  510,  510,  165,  510,  171,  510,  174,
      510,  510,  510,  179,  167,  168,  169,  177,  510,  173,
      510,  166,  172,  182,  180,  175,  176,  510,  184,  510,

      183,  510,  185,  186,  187,  510,  510,  208,  510,  181,
      486,  510,  148,  148,  148,  148,  510,  191,  191,  191,
      191,  152,  204,  192,  192,  192,  192,  154,  193,  193,
      193,  193,  193,  193,  194,  194,  194,  194,  510,  510,
      193,  193,  193,  193,  196,  510,  156,  156,  156,  156,
      119,  221,  197,  197,  197,  197,  121,  198,  198,  198,
      198,  198,  198,  510,  202,  198,  198,  198,  198,  119,
      483,  199,  199,  199,  199,  200,  201,  201,  201,  201,
      201,  201,  510,  510,  201,  201,  201,  201,  203,  510,
      510,  510,  209,  510,  510,  206,  510,  510,  205,  212,

      510,  510,  214,  510,  217,  510,  207,  210,  211,  510,
      213,  510,  510,  510,  215,  510,  476,  220,  225,  216,
      219,  510,  510,  218,  471,  510,  226,  251,  229,  222,
      191,  191,  191,  191,  224,  235,  235,  235,  235,  223,
      152,  510,  230,  230,  230,  230,  154,  231,  231,  231,
      231,  231,  231,  510,  510,  231,  231,  231,  231,  152,
      241,  232,  232,  232,  232,  233,  234,  234,  234,  234,
      234,  234,  510,  292,  234,  234,  234,  234,  119,  466,
      236,  236,  236,  236,  121,  119,  510,  237,  237,  237,
      237,  200,  238,  238,  238,  238,  238,  238,  239,  239,

      239,  239,  510,  510,  238,  238,  238,  238,  244,  510,
      510,  510,  510,  245,  510,  510,  510,  510,  255,  254,
      253,  242,  510,  246,  249,  510,  510,  259,  510,  510,
      250,  510,  252,  258,  510,  256,  510,  261,  510,  510,
      286,  262,  448,  280,  257,  263,  260,  267,  267,  267,
      267,  152,  510,  268,  268,  268,  268,  154,  152,  319,
      269,  269,  269,  269,  233,  270,  270,  270,  270,  270,
      270,  271,  271,  271,  271,  510,  510,  270,  270,  270,
      270,  273,  444,  235,  235,  235,  235,  119,  510,  236,
      236,  236,  236,  119,  296,  274,  274,  274,  274,  200,

      275,  275,  275,  275,  275,  275,  510,  295,  275,  275,
      275,  275,  119,  510,  276,  276,  276,  276,  277,  278,
      278,  278,  278,  278,  278,  510,  510,  278,  278,  278,
      278,  281,  510,  510,  510,  279,  510,  282,  283,  510,
      510,  510,  510,  510,  290,  288,  510,  293,  510,  510,
      510,  510,  298,  510,  510,  313,  287,  291,  437,  318,
      317,  289,  297,  294,  510,  314,  302,  299,  267,  267,
      267,  267,  152,  324,  268,  268,  268,  268,  152,  510,
      303,  303,  303,  303,  233,  304,  304,  304,  304,  304,
      304,  510,  322,  304,  304,  304,  304,  152,  510,  305,

      305,  305,  305,  306,  307,  307,  307,  307,  307,  307,
      510,  351,  307,  307,  307,  307,  308,  308,  308,  308,
      119,  321,  236,  236,  236,  236,  200,  119,  510,  309,
      309,  309,  309,  277,  310,  310,  310,  310,  310,  310,
      311,  311,  311,  311,  510,  510,  310,  310,  310,  310,
      320,  510,  510,  510,  510,  510,  323,  325,  510,  510,
      327,  329,  355,  328,  333,  333,  333,  333,  416,  404,
      510,  152,  326,  268,  268,  268,  268,  233,  152,  370,
      334,  334,  334,  334,  306,  335,  335,  335,  335,  335,
      335,  336,  336,  336,  336,  510,  382,  335,  335,  335,

      335,  308,  308,  308,  308,  119,  510,  338,  338,  338,
      338,  277,  339,  339,  339,  339,  339,  339,  510,  409,
      339,  339,  339,  339,  119,  510,  340,  340,  340,  340,
      341,  342,  342,  342,  342,  342,  342,  510,  510,  342,
      342,  342,  342,  343,  510,  510,  510,  510,  510,  510,
      510,  510,  346,  374,  510,  356,  371,  367,  349,  391,
      510,  353,  347,  348,  510,  350,  352,  354,  333,  333,
      333,  333,  152,  372,  359,  359,  359,  359,  306,  360,
      360,  360,  360,  360,  360,  510,  510,  360,  360,  360,
      360,  152,  388,  361,  361,  361,  361,  362,  363,  363,

      363,  363,  363,  363,  510,  337,  363,  363,  363,  363,
      119,  312,  236,  236,  236,  236,  277,  119,  510,  364,
      364,  364,  364,  341,  365,  365,  365,  365,  365,  365,
      366,  366,  366,  366,  510,  510,  365,  365,  365,  365,
      373,  152,  510,  268,  268,  268,  268,  306,  381,  381,
      381,  381,  510,  272,  510,  375,  152,  408,  379,  379,
      379,  379,  362,  380,  380,  380,  380,  380,  380,  510,
      389,  380,  380,  380,  380,  119,  406,  383,  383,  383,
      383,  341,  384,  384,  384,  384,  384,  384,  510,  240,
      384,  384,  384,  384,  119,  510,  385,  385,  385,  385,

      386,  387,  387,  387,  387,  387,  387,  510,  510,  387,
      387,  387,  387,  195,  510,  390,  510,  160,  397,  397,
      397,  397,  392,  393,  152,  510,  396,  396,  396,  396,
      362,  397,  397,  397,  397,  397,  397,  152,  454,  398,
      398,  398,  398,  399,  400,  400,  400,  400,  400,  400,
      510,  118,  400,  400,  400,  400,  119,  424,  236,  236,
      236,  236,  341,  119,  510,  401,  401,  401,  401,  386,
      402,  402,  402,  402,  402,  402,  403,  403,  403,  403,
      510,  510,  402,  402,  402,  402,  405,  510,  152,  510,
      268,  268,  268,  268,  362,  415,  415,  415,  415,  510,

      510,  414,  414,  414,  414,  407,  152,  439,  413,  413,
      413,  413,  399,  414,  414,  414,  414,  414,  414,  119,
      422,  417,  417,  417,  417,  386,  418,  418,  418,  418,
      418,  418,  510,   89,  418,  418,  418,  418,  119,   87,
      419,  419,  419,  419,  420,  421,  421,  421,  421,  421,
      421,  510,  510,  421,  421,  421,  421,  423,  510,  436,
      436,  436,  436,  425,  152,  507,  429,  429,  429,  429,
      399,  430,  430,  430,  430,  430,  430,  510,  507,  430,
      430,  430,  430,  152,  507,  431,  431,  431,  431,  432,
      433,  433,  433,  433,  433,  433,  510,  502,  433,  433,

      433,  433,  119,  507,  236,  236,  236,  236,  386,  119,
      510,  434,  434,  434,  434,  420,  435,  435,  435,  435,
      435,  435,  510,  510,  435,  435,  435,  435,  440,  502,
      510,  152,  438,  268,  268,  268,  268,  399,  152,  484,
      445,  445,  445,  445,  432,  446,  446,  446,  446,  446,
      446,  447,  447,  447,  447,  510,  502,  446,  446,  446,
      446,  119,  497,  449,  449,  449,  449,  420,  450,  450,
      450,  450,  450,  450,  510,  502,  450,  450,  450,  450,
      119,  497,  451,  451,  451,  451,  452,  453,  453,  453,
      453,  453,  453,  510,  510,  453,  453,  453,  453,  510,

      510,  461,  461,  461,  461,  467,  497,  491,  510,  455,
      152,  497,  460,  460,  460,  460,  432,  461,  461,  461,
      461,  461,  461,  152,  491,  462,  462,  462,  462,  468,
      463,  463,  463,  463,  463,  463,  510,  510,  463,  463,
      463,  463,  119,  510,  236,  236,  236,  236,  420,  119,
      491,  464,  464,  464,  464,  452,  465,  465,  465,  465,
      465,  465,  510,  477,  465,  465,  465,  465,  152,  510,
      268,  268,  268,  268,  432,  152,  492,  472,  472,  472,
      472,  510,  473,  473,  473,  473,  473,  473,  510,  480,
      473,  473,  473,  473,  119,  488,  474,  474,  474,  474,

      452,  475,  475,  475,  475,  475,  475,  510,  491,  475,
      475,  475,  475,  152,  480,  481,  481,  481,  481,  480,
      482,  482,  482,  482,  482,  482,  510,  459,  482,  482,
      482,  482,  119,  452,  236,  236,  236,  236,  452,  152,
      480,  268,  268,  268,  268,   35,   35,   35,   35,   35,
       37,   37,   37,   37,   37,   41,   41,   41,   41,   41,
       43,  459,   43,   43,   43,   44,   44,   44,   44,   44,
       54,   54,   54,   82,  443,   82,   82,   82,   85,   85,
      115,  115,  150,  150,  151,  151,  188,  188,  189,  189,
      227,  227,  228,  228,  264,  264,  265,  265,  300,  300,

      301,  301,  330,  330,  331,  331,  357,  357,  358,  358,
      376,  376,  377,  377,  394,  394,  395,  395,  410,  410,
      411,  411,  426,  426,  427,  427,  441,  441,  442,  442,
      456,  456,  458,  458,  469,  469,  470,  470,  478,  478,
      479,  479,  485,  485,  489,  489,  490,  490,  493,  493,
      495,  495,  496,  496,  498,  498,  500,  500,  501,  501,
      503,  503,  505,  505,  506,  506,  508,  508,  509,  509,
      510,  432,  459,  443,  420,  459,  457,  443,  412,  510,
      399,  443,  412,  510,  386,  428,  412,  378,  510,  362,
      412,  378,  510,  341,   86,  378,  332,  306,  378,  332,

      510,  510,  510,  510,  510,  369,  368,  510,  277,   86,
      332,  266,  510,  510,  510,  345,  344,  510,  233,  332,
      266,  510,  316,  315,  510,  510,  510,  200,   86,  266,
      190,  510,  285,  284,  510,  154,  266,  190,  510,  248,
      247,  510,  121,   86,  190,  116,  510,  510,  510,  190,
      116,  510,  170,  510,  510,   86,  116,  124,  116,  510,
      510,  510,  510,   91,  510,   86,   44,   45,   42,   81,
      510,   60,   53,  510,   45,   42,  510,   36,   36,    7,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,

      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510
    } ;

static yyconst flex_int16_t yy_chk[1824] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   10,   10,   11,   11,   15,   21,   21,
       28,   15,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   25,   16,   24,   24,   79,   28,   29,
       29,   24,   25,   60,   29,  588,   27,   60,   25,   79,
       16,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   27,   19,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   26,   20,   30,   32,   31,
       31,   34,   31,   31,   26,   95,   30,   33,   33,   95,
       26,   31,   32,   38,   38,   26,   34,   30,   39,   39,
       40,   40,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,  584,   48,   50,   50,   50,   50,   53,
       53,   53,   53,   55,   55,   55,   55,   58,   55,   55,
       55,   55,   55,   55,   59,   61,   62,   62,   65,   63,
       67,   64,   66,   68,   61,   63,   58,   59,   64,   66,
       69,   70,   71,   72,   80,   69,   67,   65,   73,   73,
       77,   78,   71,   68,   92,   93,   93,   70,   98,   72,

       78,   92,   80,   77,   94,   98,   73,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   94,   83,
       84,   84,   84,   84,   86,   86,   86,   86,   88,  580,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   89,  102,   89,   89,   89,   89,   90,   90,   90,
       90,  102,   90,   90,   90,   90,   90,   90,   96,   97,
      101,   96,   99,   99,   97,  100,  103,  101,  100,  104,
       99,  105,  103,  106,  100,  107,  105,  108,  104,  109,
      106,  111,  110,  112,  109,  110,  108,  124,  125,  139,
      111,  576,  124,  139,  112,  107,  113,  113,  113,  113,

      113,  113,  113,  113,  113,  113,  113,  125,  113,  114,
      114,  114,  114,  117,  205,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  118,  205,  118,  118,
      118,  118,  119,  119,  119,  119,  120,  572,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  121,
      121,  121,  121,  122,  126,  122,  122,  122,  122,  123,
      123,  123,  123,  126,  123,  123,  123,  123,  123,  123,
      129,  130,  131,  133,  134,  129,  136,  133,  135,  135,
      140,  137,  138,  140,  131,  131,  131,  138,  142,  134,
      141,  130,  133,  142,  141,  136,  137,  143,  144,  146,

      143,  145,  145,  146,  147,  144,  169,  169,  164,  141,
      571,  147,  148,  148,  148,  148,  148,  152,  152,  152,
      152,  153,  164,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  154,  154,  154,  154,  155,  182,
      155,  155,  155,  155,  156,  162,  156,  156,  156,  156,
      157,  182,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  158,  162,  158,  158,  158,  158,  159,
      569,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  160,  163,  160,  160,  160,  160,  163,  166,
      167,  168,  170,  171,  172,  167,  173,  175,  166,  172,

      176,  177,  175,  179,  178,  180,  168,  170,  171,  183,
      173,  178,  181,  184,  176,  185,  566,  181,  186,  177,
      180,  213,  187,  179,  565,  186,  187,  213,  191,  183,
      191,  191,  191,  191,  185,  196,  196,  196,  196,  184,
      192,  202,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  193,  255,  193,  193,  193,  193,  194,
      202,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  195,  255,  195,  195,  195,  195,  197,  562,
      197,  197,  197,  197,  197,  199,  206,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  200,  200,

      200,  200,  201,  203,  201,  201,  201,  201,  206,  207,
      208,  211,  212,  207,  214,  216,  217,  224,  218,  217,
      216,  203,  219,  208,  211,  218,  220,  222,  221,  225,
      212,  223,  214,  221,  222,  219,  226,  224,  243,  249,
      249,  225,  559,  243,  220,  226,  223,  229,  229,  229,
      229,  230,  288,  230,  230,  230,  230,  230,  232,  288,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  233,  233,  233,  233,  234,  259,  234,  234,  234,
      234,  235,  558,  235,  235,  235,  235,  236,  258,  236,
      236,  236,  236,  237,  259,  237,  237,  237,  237,  237,

      237,  237,  237,  237,  237,  237,  238,  258,  238,  238,
      238,  238,  239,  242,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  240,  244,  240,  240,  240,
      240,  244,  245,  246,  250,  242,  251,  245,  246,  252,
      253,  257,  254,  262,  253,  251,  256,  256,  260,  263,
      279,  286,  262,  281,  287,  279,  250,  254,  555,  287,
      286,  252,  260,  257,  293,  281,  267,  263,  267,  267,
      267,  267,  268,  293,  268,  268,  268,  268,  269,  291,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  270,  291,  270,  270,  270,  270,  271,  322,  271,

      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      272,  322,  272,  272,  272,  272,  273,  273,  273,  273,
      274,  290,  274,  274,  274,  274,  274,  276,  290,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      277,  277,  277,  277,  278,  289,  278,  278,  278,  278,
      289,  292,  294,  295,  296,  298,  292,  294,  297,  327,
      296,  298,  327,  297,  302,  302,  302,  302,  552,  549,
      349,  303,  295,  303,  303,  303,  303,  303,  305,  349,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  306,  306,  306,  306,  307,  546,  307,  307,  307,

      307,  308,  308,  308,  308,  309,  393,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  310,  393,
      310,  310,  310,  310,  311,  313,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  312,  317,  312,
      312,  312,  312,  313,  318,  320,  321,  324,  323,  325,
      329,  350,  317,  355,  373,  329,  350,  543,  321,  373,
      355,  324,  318,  320,  351,  321,  323,  325,  333,  333,
      333,  333,  334,  351,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  335,  370,  335,  335,  335,
      335,  336,  370,  336,  336,  336,  336,  336,  336,  336,

      336,  336,  336,  336,  337,  540,  337,  337,  337,  337,
      338,  537,  338,  338,  338,  338,  338,  340,  352,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      341,  341,  341,  341,  342,  356,  342,  342,  342,  342,
      352,  359,  392,  359,  359,  359,  359,  359,  362,  362,
      362,  362,  371,  534,  389,  356,  361,  392,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  363,
      371,  363,  363,  363,  363,  364,  389,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  365,  531,
      365,  365,  365,  365,  366,  372,  366,  366,  366,  366,

      366,  366,  366,  366,  366,  366,  366,  367,  374,  367,
      367,  367,  367,  528,  375,  372,  380,  525,  380,  380,
      380,  380,  374,  375,  379,  438,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  381,  438,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      382,  522,  382,  382,  382,  382,  383,  408,  383,  383,
      383,  383,  383,  385,  408,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  386,  386,  386,  386,
      387,  388,  387,  387,  387,  387,  388,  391,  396,  423,
      396,  396,  396,  396,  396,  399,  399,  399,  399,  400,

      405,  400,  400,  400,  400,  391,  398,  423,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  401,
      405,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  402,  520,  402,  402,  402,  402,  403,  519,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  404,  406,  404,  404,  404,  404,  406,  409,  420,
      420,  420,  420,  409,  413,  509,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  414,  508,  414,
      414,  414,  414,  415,  506,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  416,  505,  416,  416,

      416,  416,  417,  504,  417,  417,  417,  417,  417,  419,
      424,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  421,  422,  421,  421,  421,  421,  424,  503,
      477,  429,  422,  429,  429,  429,  429,  429,  431,  477,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  432,  432,  432,  432,  433,  501,  433,  433,  433,
      433,  434,  500,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  435,  499,  435,  435,  435,  435,
      436,  498,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  437,  440,  437,  437,  437,  437,  446,

      454,  446,  446,  446,  446,  454,  496,  495,  455,  440,
      445,  494,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  447,  493,  447,  447,  447,  447,  455,
      447,  447,  447,  447,  447,  447,  448,  492,  448,  448,
      448,  448,  449,  468,  449,  449,  449,  449,  449,  451,
      490,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  453,  468,  453,  453,  453,  453,  460,  488,
      460,  460,  460,  460,  460,  462,  488,  462,  462,  462,
      462,  484,  462,  462,  462,  462,  462,  462,  463,  489,
      463,  463,  463,  463,  464,  484,  464,  464,  464,  464,

      464,  464,  464,  464,  464,  464,  464,  465,  486,  465,
      465,  465,  465,  472,  485,  472,  472,  472,  472,  479,
      472,  472,  472,  472,  472,  472,  473,  478,  473,  473,
      473,  473,  474,  475,  474,  474,  474,  474,  474,  481,
      471,  481,  481,  481,  481,  511,  511,  511,  511,  511,
      512,  512,  512,  512,  512,  513,  513,  513,  513,  513,
      514,  470,  514,  514,  514,  515,  515,  515,  515,  515,
      516,  516,  516,  517,  469,  517,  517,  517,  518,  518,
      521,  521,  523,  523,  524,  524,  526,  526,  527,  527,
      529,  529,  530,  530,  532,  532,  533,  533,  535,  535,

      536,  536,  538,  538,  539,  539,  541,  541,  542,  542,
      544,  544,  545,  545,  547,  547,  548,  548,  550,  550,
      551,  551,  553,  553,  554,  554,  556,  556,  557,  557,
      560,  560,  561,  561,  563,  563,  564,  564,  567,  567,
      568,  568,  570,  570,  573,  573,  574,  574,  575,  575,
      577,  577,  578,  578,  579,  579,  581,  581,  582,  582,
      583,  583,  585,  585,  586,  586,  587,  587,  589,  589,
      467,  461,  458,  456,  450,  444,  443,  442,  441,  439,
      430,  427,  426,  425,  418,  412,  411,  410,  407,  397,
      395,  394,  390,  384,  378,  377,  376,  360,  358,  357,

      354,  353,  348,  347,  346,  345,  344,  343,  339,  332,
      331,  330,  328,  326,  319,  316,  315,  314,  304,  301,
      300,  299,  285,  284,  283,  282,  280,  275,  266,  265,
      264,  261,  248,  247,  241,  231,  228,  227,  215,  210,
      209,  204,  198,  190,  189,  188,  174,  165,  161,  151,
      150,  149,  132,  128,  127,  116,  115,   91,   85,   76,
       75,   74,   57,   56,   54,   49,   45,   44,   41,   36,
       23,   22,   18,   17,   14,   12,    7,    4,    3,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,

      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[56] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "ClntLexer.l"
#line 5 "ClntLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 31 "ClntLexer.l"
  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_ClntParser_stype yylval;
}
#line 1038 "ClntLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 44 "ClntLexer.l"


#line 1143 "ClntLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 511 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1780 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 46 "ClntLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 47 "ClntLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "ClntLexer.l"
{ return ClntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "ClntLexer.l"
{ return ClntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "ClntLexer.l"
{ return ClntParser::ADDRES_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "ClntLexer.l"
{ return ClntParser::IA_;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "ClntLexer.l"
{ return ClntParser::TA_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "ClntLexer.l"
{ return ClntParser::IAID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "ClntLexer.l"
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 55 "ClntLexer.l"
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 56 "ClntLexer.l"
{ return ClntParser::LOGLEVEL_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 57 "ClntLexer.l"
{ return ClntParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 58 "ClntLexer.l"
{ return ClntParser::LOGNAME_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 59 "ClntLexer.l"
{ return ClntParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 60 "ClntLexer.l"
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 61 "ClntLexer.l"
{ return ClntParser::VALID_TIME_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 62 "ClntLexer.l"
{ return ClntParser::T1_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 63 "ClntLexer.l"
{ return ClntParser::T2_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 64 "ClntLexer.l"
{ return ClntParser::OPTION_; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 65 "ClntLexer.l"
{ return ClntParser::DNS_SERVER_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 66 "ClntLexer.l"
{ return ClntParser::DOMAIN_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 67 "ClntLexer.l"
{ return ClntParser::NTP_SERVER_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 68 "ClntLexer.l"
{ return ClntParser::TIME_ZONE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 69 "ClntLexer.l"
{ return ClntParser::SIP_SERVER_; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 70 "ClntLexer.l"
{ return ClntParser::SIP_DOMAIN_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 71 "ClntLexer.l"
{ return ClntParser::FQDN_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 72 "ClntLexer.l"
{ return ClntParser::NIS_SERVER_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 73 "ClntLexer.l"
{ return ClntParser::NIS_DOMAIN_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 74 "ClntLexer.l"
{ return ClntParser::NISP_SERVER_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 75 "ClntLexer.l"
{ return ClntParser::NISP_DOMAIN_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 76 "ClntLexer.l"
{ return ClntParser::LIFETIME_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 77 "ClntLexer.l"
{ return ClntParser::REJECT_SERVERS_;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 78 "ClntLexer.l"
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 79 "ClntLexer.l"
{ return ClntParser::RAPID_COMMIT_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 80 "ClntLexer.l"
{ return ClntParser::UNICAST_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 81 "ClntLexer.l"
{ return ClntParser::STRICT_RFC_NO_ROUTING_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 83 "ClntLexer.l"
;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 85 "ClntLexer.l"
;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 87 "ClntLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 93 "ClntLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 94 "ClntLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 95 "ClntLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 42:
YY_RULE_SETUP
#line 102 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 111 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 120 "ClntLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 130 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 139 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 148 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 157 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 166 "ClntLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 173 "ClntLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return ClntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return ClntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 194 "ClntLexer.l"
{
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return ClntParser::DUID_;
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 225 "ClntLexer.l"
{ 
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::HEXNUMBER_;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 234 "ClntLexer.l"
{ 
    if(!sscanf(yytext,"%u",(unsigned int*)&(yylval.ival))) { 
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::INTNUMBER_;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 244 "ClntLexer.l"
{return yytext[0];} 
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 248 "ClntLexer.l"
ECHO;
	YY_BREAK
#line 1642 "ClntLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 511 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 511 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 510);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

yyFlexLexer::~yyFlexLexer()
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

	delete [] (yy_state_buf);
	yyfree((yy_start_stack)  );

}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 248 "ClntLexer.l"



