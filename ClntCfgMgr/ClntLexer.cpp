
#line 3 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 87
#define YY_END_OF_BUFFER 88
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[767] =
    {   0,
        1,    1,    0,    0,    0,    0,   88,   86,    2,    1,
        1,   86,   68,   86,   86,   85,   85,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   72,   72,   87,    1,    1,
        1,    0,   80,   68,    0,   80,   70,   69,   85,    0,
        0,   84,    0,   77,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,    9,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   45,   81,   81,
       81,   81,   81,   81,   81,   23,   24,   10,   81,   81,
       81,   81,   81,   71,   69,   85,    0,    0,    0,   76,

       82,   75,   75,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       85,    0,    0,    0,    0,   74,   74,    0,   75,    0,
       75,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   32,   11,   81,   81,   81,   81,   81,    8,    0,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       85,    0,   83,    0,    0,    0,   74,    0,   74,    0,

       75,   75,   75,   75,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,    3,   81,   81,   81,
       81,   81,   81,    0,   81,   81,   81,   12,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,    0,    0,
        0,    0,    0,   74,   74,   74,   74,    0,   75,   75,
       75,    0,   75,   81,   81,   81,   81,   81,   81,   81,
       27,   81,   81,   81,   81,   81,   33,   81,   81,   81,
       81,   81,   81,    0,    0,   81,   81,   81,   81,   81,
       25,   81,   81,   81,   81,   81,   81,   81,   81,   81,

       81,   81,    6,   81,   81,   81,   81,   81,    0,    0,
        0,    0,   74,   74,   74,    0,   74,    0,    0,   75,
       75,   75,   75,   81,    5,   81,   81,   81,   81,   81,
       81,   49,   47,   81,   81,   81,   81,   81,   81,   81,
       81,    0,    0,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       42,   81,   81,   81,   83,    0,    0,    0,    0,    0,
       74,   74,   74,   74,    0,   75,   75,   75,    0,   75,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       48,   81,   81,   81,   81,   38,   81,   15,   16,    0,

        0,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       17,    0,    0,    0,    0,   74,   74,   74,    0,   74,
       79,   75,   75,   75,   75,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   46,   81,   81,   81,   14,
        0,    0,   81,   81,    4,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   13,   81,   29,   81,
       81,    0,    0,    0,    0,   78,   74,   74,   74,   74,
       75,   75,   75,    0,   75,   81,   81,   81,   81,   81,
       81,   81,   81,   26,   81,   81,   81,   81,    0,    0,

       35,   34,   81,   28,   81,   81,   81,   81,   81,   81,
       81,   31,   30,   81,   81,   81,   81,   83,    0,    0,
       74,   74,   74,    0,   74,   75,   75,   75,   75,   65,
       81,   81,   81,   81,   81,   56,   81,   81,   81,   81,
       52,   37,   36,   81,   81,   81,   81,   81,   81,   81,
       18,   81,   81,   81,   50,    0,    0,    0,    0,   74,
       74,   74,   74,   75,   75,   75,    0,   75,    7,   81,
       81,   54,   81,   57,   81,   64,   81,   81,   81,   81,
       81,   41,   81,   81,   66,   81,   81,    0,    0,    0,
       74,   74,   74,    0,   74,   75,   75,   75,   75,   81,

       81,   81,   81,   81,   53,   81,   81,   81,   81,   39,
       81,   81,   81,   83,    0,    0,    0,   74,   74,   74,
       74,   75,   75,   75,    0,   75,   81,   81,   81,   81,
       67,   19,   81,   81,   81,   81,   81,   21,    0,    0,
       73,   76,   74,   74,   74,    0,   74,   75,   75,   75,
       75,   81,   81,   58,   81,   81,   40,   81,   22,   81,
        0,    0,   73,    0,   74,   74,   74,   74,   74,   75,
       75,   75,    0,   75,   81,   81,   59,   81,   81,   81,
       81,   81,   81,   83,   73,   76,   74,    0,   74,   74,
       74,   74,   75,   75,   75,   81,   81,   81,   81,   81,

       81,   20,   44,   81,    0,   73,   74,   74,   74,   74,
       75,   75,   75,   81,   81,   60,   61,   62,   63,   81,
        0,   74,   74,    0,   74,   74,   75,   81,   55,   81,
       83,   74,   74,   75,   81,   81,    0,   74,   74,    0,
       51,   43,   73,   74,   74,   73,   74,   74,    0,    0,
       74,   74,    0,   74,   74,    0,   83,   74,   74,    0,
       74,   74,    0,   74,   74,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
        1,    1,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,    1,    1,    1,    1,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    3,    3,    3,    3,    3,    3,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[852] =
    {   0,
        0,    0, 1313, 1312,    0,    0, 1319, 3870, 3870,   72,
       74, 1313,    0, 1310,   71,   71,   34, 1294,  134,  183,
      227,  185,  186,  284,   77,   71,  308,   43,  184,   87,
      290,  218,   67,   88,   67, 3870, 1302, 3870,  115,  129,
      210, 1308, 3870,    0, 1217, 1209, 3870,    0,  364, 1192,
      382, 3870,    0,  408,    0,  450,   83,    0,   75,   74,
      187,  176,  183, 1109,  189,  192,  208,  208,  217,  246,
      231,  233,  256,  251,  251,  278,  280,    0,  298,  288,
      421,  288,  291,  299,  458,    0,    0,    0,  308,  313,
      333,  368,  371, 3870,    0,  512, 1096,  425, 1095,  556,

        0,  600,  472,  642,  444,  458,  465,  469, 1106,  474,
      481,  491,  491,  483,  526,  534,  535,  536,  576, 1105,
      577,  262,  646,  581, 1104,  615,  619,  617,  648,  639,
      647, 1103,  641,  638,  650,  655,  658,  653,  659,  653,
      700,  581, 1090, 1062, 1053,  746,  718,  727,  790,  832,
      764,  874,  766,  747, 1064,  761,  794,  805,  806, 1063,
      798, 1062,    0,  827,  828,  836,  836,  871,    0, 1061,
      888,  871,  886,  882,  870,  875,  886,  889,  891,  876,
      881,  920, 1060,  894,  923, 1059,  907,  923,  913, 1058,
      949, 1012, 1011, 1009, 1008,  975,  986, 1028, 1004, 1046,

     1072, 1090, 1116, 1134, 1007,  913,  911,  918,  931,  915,
      933,  996, 1008, 1129, 1071, 1079,    0, 1126, 1116, 1128,
     1133, 1124, 1139, 1138, 1135, 1146, 1138,    0, 1128, 1149,
     1141, 1138, 1134, 1018, 1139, 1164, 1150, 1156, 1167, 1170,
     1162, 1166, 1180, 1162, 1170, 1017, 1172, 1187, 1004,  994,
      976,  960, 1212, 1229, 1247, 1273, 1291, 1256, 1317,  959,
     1329, 1371, 1347, 1192, 1218, 1266, 1290, 1338,  963, 1335,
        0, 1349, 1341, 1359, 1357, 1370,    0, 1362,  912, 1372,
     1364, 1383, 1375, 1374, 1385, 1378, 1374, 1387,  910, 1376,
        0, 1390,  869, 1393,  866,  865, 1385, 1392, 1388, 1392,

     1418,  864,    0, 1409, 1405, 1414,  863, 1418,  850,  849,
      847, 1443, 1465,  846, 1477, 1519, 1495, 1537, 1563, 1574,
     1592, 1618, 1636, 1411,  857, 1480, 1516, 1537, 1628, 1560,
      856,    0, 1580, 1621, 1633, 1634, 1627, 1636, 1638, 1646,
     1647, 1640, 1636, 1654, 1634, 1648, 1639, 1637, 1656, 1657,
     1656, 1653, 1672,  855, 1673, 1653, 1662, 1669, 1671, 1676,
        0, 1682, 1673, 1675,  812,  811,  810,  809, 1714, 1731,
     1742, 1760, 1786, 1804, 1769, 1830,  808, 1842, 1884, 1860,
     1694, 1738, 1775, 1801, 1863, 1853, 1852, 1856, 1879, 1875,
        0, 1891, 1883,  819, 1883,    0, 1887,    0,    0, 1899,

     1879, 1893, 1898, 1897, 1902, 1901,  817, 1902, 1895, 1904,
     1896, 1914, 1910, 1915, 1930, 1918, 1932, 1934, 1934, 1925,
        0,  804,  803,  802, 1956, 1979,  801, 1991, 2033, 2009,
     2018, 2077, 2051, 2121, 2095, 2020, 2032,  812, 2069, 2090,
     2102, 2116, 2130, 2114, 2112,    0, 2114, 2122, 2132,    0,
     2128, 2133, 2125, 2122,    0, 2123, 2124, 2135, 2131, 2131,
     2127, 2126, 2146, 2160, 2157, 2167,    0, 2174,    0, 2173,
     2174,  799,  770,  769,  768, 2191, 2217, 2235, 2261, 2279,
     2305,  767, 2317, 2359, 2335, 2180, 2224, 2272, 2320, 2336,
     2339, 2338, 2350,    0, 2356, 2370, 2357, 2368, 2360, 2357,

        0,    0, 2367,    0, 2368, 2373, 2374, 2371, 2359, 2367,
     2365,    0,    0, 2366,  778, 2372, 2390,  765,  764,  736,
     2431,  733, 2443, 2485, 2461, 2529, 2503, 2573, 2547,    0,
     2375, 2453,  690, 2481,  689,    0, 2523, 2540, 2543, 2578,
        0, 3870, 3870, 2567, 2578, 2567, 2579, 2567, 2583, 2586,
        0, 2577, 2577, 2583,    0,  676,  668,  667,  666, 2630,
     2648, 2674, 2692, 2718,  665, 2730, 2772, 2748,    0, 2588,
     2625,    0, 2766,    0, 2651,    0, 2689, 2734, 2750, 2734,
     2771,    0, 2765, 2769,    0, 2771, 2774,  623,  622,  621,
     2825,  620, 2837, 2879, 2855, 2923, 2897, 2967, 2941,  631,

     2784, 2857, 2871, 2919,    0, 2929, 2929, 2971, 2957,    0,
     2964,  630, 2974,  617,  615,  614,  613, 3017, 2991, 3061,
     3035, 3079,  612, 3105, 3147, 3123, 2963, 3005,  615, 3042,
        0,    0, 3078, 3110, 3120, 3124, 3113,    0,  610,  609,
      570,    0, 3169,  569, 3191, 3233, 3209, 3277, 3251, 3321,
     3295, 3142, 3207,    0,  262, 3220,    0, 3270,    0, 3287,
      568,  567,  566,  565,  536, 3365, 3340, 3409, 3383, 3427,
      535, 3453,    0, 3471, 3330, 3368,    0,  268,  535,  541,
     3386, 3421, 3450,  532,  531, 3870,  529,    0, 3507,  528,
     3519, 3537, 3563, 3581,    0, 3472, 3523,  532,  529,  530,

      531,    0,    0, 3525,  494,  492,  491,  490, 3607, 3625,
     3651,  489,    0, 3576, 3570,    0,    0,    0,    0, 3617,
      487,  486,  483,    0, 3664, 3870,    0, 3609,    0, 3627,
      433,  432,  430, 3870, 3644, 3658,  429,  428,  427,    0,
        0,    0,  426,  425,  397,  390,  388,  387,    0,  386,
      385,  384,    0,  383,  353,    0,  352,  351,  350,  346,
      344,  342,    0,  341,  340, 3870, 3713, 3717, 3721, 3725,
     3729, 3733, 3735,  358, 3737, 3739, 3741, 3743, 3745, 3747,
     3749, 3751, 3753, 3755, 3757, 3759, 3761, 3763, 3765, 3767,
     3769, 3771, 3773, 3775, 3777, 3779, 3781, 3783, 3785, 3787,

     3789, 3791, 3793, 3795, 3797, 3799, 3801, 3803, 3805, 3807,
      357, 3809, 3811, 3813,  356, 3815, 3817, 3819,  321,  279,
     3821, 3823, 3825,  278, 3827, 3829,  271,  270, 3831, 3833,
     3835, 3837, 3839,  224, 3841, 3843, 3845, 3847, 3849,  220,
     3851, 3853, 3855,  212, 3857,  143, 3859, 3861, 3863,   79,
     3865
    } ;

static yyconst flex_int16_t yy_def[852] =
    {   0,
      766,    1,  767,  767,  768,  768,  766,  766,  766,  766,
      766,  769,  770,  771,  766,  766,   16,  766,  766,   19,
       19,   19,   19,   19,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  766,  766,  766,  766,  766,
      766,  769,  766,  770,  771,  766,  766,  772,  766,  773,
       49,  766,  774,  766,   24,   24,   56,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  766,  772,  766,  775,   96,  776,  766,

      774,  766,  102,   56,  104,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      766,  141,  777,  778,  779,  766,  146,  766,  766,  766,
      149,  104,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  766,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      142,  142,  778,  780,  781,  766,  766,  766,  197,  766,

      766,  201,  766,  203,  152,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  766,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  782,  766,
      783,  784,  766,  766,  254,  766,  256,  766,  766,  766,
      766,  766,  261,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  766,  766,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,  785,  786,
      787,  766,  766,  766,  766,  766,  315,  766,  766,  766,
      320,  766,  322,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  766,  766,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  783,  766,  788,  789,  766,  766,
      766,  371,  766,  373,  766,  766,  766,  766,  766,  378,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  766,

      766,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  790,  791,  792,  766,  766,  766,  766,  766,  428,
      766,  766,  432,  766,  434,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      766,  766,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  793,  766,  794,  795,  766,  766,  477,  766,  479,
      766,  766,  766,  766,  483,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  766,  766,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  796,  797,  798,
      766,  766,  766,  766,  523,  766,  526,  766,  528,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  766,  766,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  799,  766,  800,  801,  766,
      560,  766,  562,  766,  766,  766,  766,  566,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  802,  803,  804,
      766,  766,  766,  766,  593,  766,  596,  766,  598,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  805,  766,  806,  807,  766,  618,  766,
      620,  766,  766,  766,  766,  624,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  808,  809,
      810,  811,  766,  766,  766,  766,  645,  766,  648,  766,
      650,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      812,  766,  813,  766,  814,  766,  666,  766,  668,  766,
      766,  766,  815,  672,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  816,  817,  766,  818,  819,  766,  766,
      766,  691,  766,  693,  820,   24,   24,   24,   24,   24,

       24,   24,   24,   24,  821,  766,  822,  823,  766,  709,
      766,  766,  824,   24,   24,   24,   24,   24,   24,   24,
      825,  766,  826,  827,  766,  766,  828,   24,   24,   24,
      829,  830,  831,  766,   24,   24,  832,  766,  833,  834,
       24,   24,  835,  836,  837,  838,  766,  839,  840,  841,
      842,  843,  844,  766,  845,  846,  766,  847,  848,  841,
      766,  849,  850,  851,  766,    0,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,

      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766
    } ;

static yyconst flex_int16_t yy_nxt[3945] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   20,   21,   22,   23,   24,   24,
       25,   24,   24,   26,   24,   27,   28,   29,   24,   30,
       31,   32,   33,   34,   35,   24,   24,   24,   19,   20,
       20,   21,   22,   23,   24,   24,   25,   24,   24,   26,
       24,   27,   28,   29,   24,   30,   31,   32,   33,   34,
       35,   24,   24,   24,   39,   40,   41,   40,   47,  766,
       77,  669,   48,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   50,   51,   51,   51,   51,   51,   51,   68,

       52,   71,   90,   93,   69,  766,   77,   72,  105,   80,
       91,  106,   70,   81,   92,  107,   53,   39,   40,   51,
       51,   51,   51,   51,   51,   68,   52,   71,   90,   93,
       69,   41,   40,   72,  105,   80,   91,  106,   70,   81,
       92,  107,   53,   55,   55,  759,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   50,   56,   56,   56,   57,
       56,   56,   55,   58,   55,   55,   55,   55,   55,   59,
       55,   55,   55,   55,   55,   55,   60,   55,   55,   55,
       55,   55,   56,   56,   56,   57,   56,   56,   55,   58,
       55,   55,   55,   55,   55,   59,   55,   55,   55,   55,

       55,   55,   60,   55,   55,   55,   55,   55,   56,   78,
       56,   56,   39,   40,  757,  108,  109,  110,   55,  112,
       55,   55,  752,   79,   67,   55,  745,   55,   55,  113,
       66,   86,   87,  114,   56,   78,   56,   56,  115,  116,
       88,  108,  109,  110,   55,  112,   55,   55,   89,   79,
       67,   55,   56,   55,   55,  113,   66,   61,  119,  114,
      123,  120,   62,   63,  115,  116,   88,   64,  117,   65,
      170,  171,  734,  733,   89,  677,  678,  679,   56,  680,
      727,  713,  698,   61,  119,  699,  118,  120,   62,   63,
      121,  122,  124,   64,  117,   65,   55,   55,   55,   55,

       55,   55,   55,   55,   55,  766,   55,   55,   55,   55,
       55,   55,  118,   55,   82,  125,  121,  122,  124,   55,
       83,  126,   84,  708,  127,  128,   55,  131,  132,  133,
       73,   85,   55,   55,   55,   55,   55,   55,   74,   55,
       82,  125,  136,  137,   75,   55,   83,  126,   84,   76,
      127,  128,   55,  131,  132,  133,   73,   85,  695,  665,
      101,  763,  763,  763,   74,  756,  138,  766,  136,  137,
       75,  763,  756,  760,  756,   76,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   97,   98,   98,   98,   98,
       98,   98,  138,   52,   98,   98,   98,   98,   98,   98,

       98,   98,   98,  139,  749,  756,  749,  686,  749,  740,
      140,  750,   98,   98,   98,   98,   98,   98,  749,   52,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  139,
      103,  103,  103,  103,  103,  103,  140,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  740,  664,  740,  724,
      642,  740,  129,  724,  737,  130,  103,  103,  103,  103,
      103,  103,  104,  104,  104,  104,  104,  104,  104,  104,
      104,   97,  104,  104,  104,  104,  104,  104,  129,   58,
      134,  130,  766,  153,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  154,  155,  156,  158,  135,  104,  104,

      104,  104,  104,  104,  724,   58,  134,  688,  617,  153,
      673,  724,  688,  664,  159,  100,  160,  161,  162,  154,
      155,  156,  158,  135,  141,  141,  141,  141,  141,  141,
      141,  141,  141,   50,  142,  142,  142,  142,  142,  142,
      159,   52,  160,  161,  162,  719,  718,  717,  716,  646,
      688,  163,  664,  705,  701,  700,  625,  688,  164,  165,
      142,  142,  142,  142,  142,  142,  166,   52,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  163,  147,  147,
      147,  147,  147,  147,  164,  165,  686,  664,  617,  559,
      594,  664,  166,  192,  192,  192,  192,  192,  192,  192,

      192,  192,  167,  169,  147,  147,  147,  147,  147,  147,
      148,  174,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  150,  151,  151,  151,  151,  151,  151,  167,  169,
      617,  100,  654,  567,  642,  617,  559,  174,  639,  637,
      627,  524,  617,  559,  475,  176,  177,  178,  151,  151,
      151,  151,  151,  151,  152,  152,  152,  152,  152,  152,
      152,  152,  152,   50,  152,  152,  152,  152,  152,  152,
      172,  176,  177,  178,  179,  180,  173,  181,  183,  184,
      185,  186,  187,  188,  189,  190,  484,  100,  559,  475,
      152,  152,  152,  152,  152,  152,  172,  100,  573,  571,

      179,  180,  173,  181,  183,  184,  185,  186,  187,  188,
      189,  190,  191,  191,  191,  191,  191,  191,  191,  191,
      191,   50,  192,  192,  192,  192,  192,  192,  766,   52,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  192,  192,
      192,  192,  192,  192,  429,   52,  196,  559,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  198,  199,  199,
      199,  199,  199,  199,  766,  206,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  475,  556,  553,  379,  100,
      475,  368,  207,  208,  199,  199,  199,  199,  199,  199,

      148,  210,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  150,  202,  202,  202,  202,  202,  202,  207,  208,
      368,  488,  316,  475,  368,  100,  458,  210,  448,  262,
      100,  368,  252,  422,  211,  212,  213,  215,  202,  202,
      202,  202,  202,  202,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  217,  204,  204,  204,  204,  204,  204,
      211,  212,  213,  215,  412,  390,  382,  198,  368,  218,
      252,  252,  363,  359,  353,  352,  219,  220,  350,  217,
      204,  204,  204,  204,  204,  204,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  218,  205,  205,  205,  205,

      205,  205,  219,  220,  221,  222,  223,  227,  228,  229,
      230,  231,  232,  225,  234,  235,  233,  236,  237,  347,
      241,  337,  205,  205,  205,  205,  205,  205,  226,  245,
      221,  222,  223,  227,  228,  229,  230,  231,  232,  225,
      234,  235,  233,  236,  237,  238,  241,  242,  246,  247,
      264,  265,  266,  267,  226,  245,  269,  268,  243,  270,
      239,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      766,  238,  329,  242,  246,  247,  264,  265,  266,  267,
      150,  100,  269,  268,  243,  270,  239,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  196,  252,  254,  254,

      254,  254,  254,  254,  254,  254,  254,  198,  255,  255,
      255,  255,  255,  255,  766,  145,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  100,  306,  294,  766,  252,
      145,  271,  249,  766,  255,  255,  255,  255,  255,  255,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  272,
      257,  257,  257,  257,  257,  257,  258,  271,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  248,  244,  240,
      224,  216,  214,  209,  100,  272,  257,  257,  257,  257,
      257,  257,  148,  145,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  150,  260,  260,  260,  260,  260,  260,

      766,  276,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  145,  182,  175,  168,  157,  145,  100,  111,  277,
      260,  260,  260,  260,  260,  260,  148,  276,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  262,  263,  263,
      263,  263,  263,  263,  766,  277,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  273,  278,  279,  280,  281,
      282,  283,  274,  284,  263,  263,  263,  263,  263,  263,
      275,  286,  287,  288,  289,  290,  291,  292,  285,  293,
      295,  273,  278,  279,  280,  281,  282,  283,  274,  284,
      296,  297,  298,  299,  300,  301,  275,  286,  287,  288,

      289,  290,  291,  292,  285,  293,  295,  302,  303,  304,
      305,  307,  308,  100,  324,   45,  296,  297,  298,  299,
      300,  301,  312,   46,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  302,  303,  304,  305,  307,  308,  196,
      324,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      198,  314,  314,  314,  314,  314,  314,  766,  325,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  314,  314,  314,
      314,  314,  314,  196,  325,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  316,  317,  317,  317,  317,  317,

      317,  766,  326,  317,  317,  317,  317,  317,  317,  317,
      317,  317,   43,   94,  327,   54,   46,   43,  766,   37,
       37,  317,  317,  317,  317,  317,  317,  148,  326,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  150,  148,
      327,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      262,  321,  321,  321,  321,  321,  321,  766,  766,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  766,  766,
      766,  766,  766,  328,  330,  331,  332,  321,  321,  321,
      321,  321,  321,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  333,  323,  323,  323,  323,  323,  323,  328,

      330,  331,  332,  334,  335,  336,  338,  339,  340,  341,
      342,  343,  344,  345,  346,  348,  349,  351,  333,  323,
      323,  323,  323,  323,  323,  354,  355,  356,  357,  334,
      335,  336,  338,  339,  340,  341,  342,  343,  344,  345,
      346,  348,  349,  351,  358,  360,  361,  362,  364,  766,
      381,  354,  355,  356,  357,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  766,  766,  766,  766,  766,  766,
      358,  360,  361,  362,  364,  196,  381,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  198,  196,  766,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  316,  372,

      372,  372,  372,  372,  372,  766,  766,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  766,  766,  766,  766,
      766,  766,  383,  766,  766,  372,  372,  372,  372,  372,
      372,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      384,  374,  374,  374,  374,  374,  374,  375,  383,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  766,  385,
      766,  766,  766,  766,  766,  766,  384,  374,  374,  374,
      374,  374,  374,  148,  766,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  148,  385,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  262,  377,  377,  377,  377,

      377,  377,  766,  389,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  766,  766,  766,  766,  766,  766,  766,
      766,  391,  377,  377,  377,  377,  377,  377,  148,  389,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  379,
      380,  380,  380,  380,  380,  380,  766,  391,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  386,  392,  393,
      394,  395,  396,  387,  397,  388,  380,  380,  380,  380,
      380,  380,  398,  399,  400,  401,  402,  403,  404,  405,
      406,  407,  408,  386,  392,  393,  394,  395,  396,  387,
      397,  388,  409,  410,  411,  413,  414,  415,  398,  399,

      400,  401,  402,  403,  404,  405,  406,  407,  408,  416,
      417,  418,  419,  420,  421,  766,  436,  766,  409,  410,
      411,  413,  414,  415,  425,  766,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  416,  417,  418,  419,  420,
      421,  196,  436,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  196,  766,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  316,  427,  427,  427,  427,  427,  427,
      766,  437,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      427,  427,  427,  427,  427,  427,  196,  437,  428,  428,

      428,  428,  428,  428,  428,  428,  428,  429,  430,  430,
      430,  430,  430,  430,  766,  438,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  766,  766,  439,  766,  766,
      766,  766,  766,  766,  430,  430,  430,  430,  430,  430,
      148,  438,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  262,  148,  439,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  379,  433,  433,  433,  433,  433,  433,
      766,  766,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  766,  766,  766,  766,  766,  440,  441,  442,  443,
      433,  433,  433,  433,  433,  433,  434,  434,  434,  434,

      434,  434,  434,  434,  434,  444,  435,  435,  435,  435,
      435,  435,  440,  441,  442,  443,  445,  446,  447,  449,
      450,  451,  452,  453,  454,  455,  456,  457,  459,  460,
      461,  444,  435,  435,  435,  435,  435,  435,  462,  463,
      464,  465,  445,  446,  447,  449,  450,  451,  452,  453,
      454,  455,  456,  457,  459,  460,  461,  466,  467,  468,
      469,  470,  471,  766,  462,  463,  464,  465,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  766,  766,  766,
      766,  766,  766,  466,  467,  468,  469,  470,  471,  196,
      766,  370,  370,  370,  370,  370,  370,  370,  370,  370,

      316,  196,  766,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  429,  478,  478,  478,  478,  478,  478,  766,
      766,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  478,
      478,  478,  478,  478,  478,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  486,  480,  480,  480,  480,  480,
      480,  766,  487,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  766,  766,  766,  766,  766,  766,  766,  766,
      486,  480,  480,  480,  480,  480,  480,  148,  487,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  379,  482,

      482,  482,  482,  482,  482,  766,  489,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  766,  766,  766,  766,
      766,  766,  766,  490,  491,  482,  482,  482,  482,  482,
      482,  148,  489,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  484,  485,  485,  485,  485,  485,  485,  490,
      491,  492,  493,  494,  495,  496,  497,  498,  499,  500,
      501,  502,  503,  504,  507,  508,  509,  510,  505,  485,
      485,  485,  485,  485,  485,  506,  511,  492,  493,  494,
      495,  496,  497,  498,  499,  500,  501,  502,  503,  504,
      507,  508,  509,  510,  505,  512,  513,  514,  515,  516,

      517,  506,  511,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  766,  766,  766,  766,  766,  766,  766,  766,
      530,  512,  513,  514,  515,  516,  517,  196,  766,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  429,  522,
      522,  522,  522,  522,  522,  766,  530,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  766,  766,  766,  766,
      766,  766,  766,  766,  531,  522,  522,  522,  522,  522,
      522,  196,  766,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  524,  525,  525,  525,  525,  525,  525,  766,
      531,  525,  525,  525,  525,  525,  525,  525,  525,  525,

      766,  766,  532,  766,  766,  766,  766,  766,  766,  525,
      525,  525,  525,  525,  525,  148,  766,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  379,  148,  532,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  484,  527,
      527,  527,  527,  527,  527,  766,  766,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  766,  766,  766,  766,
      766,  533,  534,  535,  536,  527,  527,  527,  527,  527,
      527,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      537,  529,  529,  529,  529,  529,  529,  533,  534,  535,
      536,  538,  539,  540,  541,  542,  543,  544,  545,  546,

      547,  548,  549,  550,  551,  552,  537,  529,  529,  529,
      529,  529,  529,  554,  555,  766,  569,  538,  539,  540,
      541,  542,  543,  544,  545,  546,  547,  548,  549,  550,
      551,  552,  766,  766,  766,  766,  766,  766,  766,  554,
      555,  196,  569,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  429,  196,  766,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  524,  561,  561,  561,  561,  561,
      561,  766,  766,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  766,  766,  766,  766,  766,  766,  570,  766,
      766,  561,  561,  561,  561,  561,  561,  562,  562,  562,

      562,  562,  562,  562,  562,  562,  572,  563,  563,  563,
      563,  563,  563,  766,  570,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  766,  766,  766,  766,  766,  766,
      766,  766,  572,  563,  563,  563,  563,  563,  563,  148,
      766,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      484,  565,  565,  565,  565,  565,  565,  766,  574,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  766,  766,
      766,  766,  766,  766,  766,  575,  576,  565,  565,  565,
      565,  565,  565,  148,  574,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  567,  568,  568,  568,  568,  568,

      568,  575,  576,  577,  578,  579,  580,  581,  582,  583,
      584,  585,  586,  587,  766,  600,  766,  766,  766,  766,
      766,  568,  568,  568,  568,  568,  568,  766,  766,  577,
      578,  579,  580,  581,  582,  583,  584,  585,  586,  587,
      196,  600,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  524,  592,  592,  592,  592,  592,  592,  766,  601,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  766,
      766,  766,  766,  766,  766,  766,  766,  604,  592,  592,
      592,  592,  592,  592,  196,  601,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  594,  595,  595,  595,  595,

      595,  595,  766,  604,  595,  595,  595,  595,  595,  595,
      595,  595,  595,  766,  766,  605,  766,  766,  766,  766,
      766,  766,  595,  595,  595,  595,  595,  595,  148,  766,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  484,
      148,  605,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  567,  597,  597,  597,  597,  597,  597,  766,  766,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  766,
      766,  766,  766,  766,  766,  606,  607,  608,  597,  597,
      597,  597,  597,  597,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  609,  599,  599,  599,  599,  599,  599,

      602,  606,  607,  608,  610,  611,  603,  612,  613,  766,
      628,  766,  766,  766,  766,  766,  766,  766,  766,  609,
      599,  599,  599,  599,  599,  599,  602,  766,  766,  766,
      610,  611,  603,  612,  613,  196,  628,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  524,  196,  766,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  594,  619,
      619,  619,  619,  619,  619,  766,  766,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  766,  766,  766,  766,
      766,  766,  629,  766,  766,  619,  619,  619,  619,  619,
      619,  620,  620,  620,  620,  620,  620,  620,  620,  620,

      630,  621,  621,  621,  621,  621,  621,  766,  629,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  766,  766,
      766,  766,  766,  766,  766,  766,  630,  621,  621,  621,
      621,  621,  621,  148,  766,  622,  622,  622,  622,  622,
      622,  622,  622,  622,  567,  623,  623,  623,  623,  623,
      623,  766,  631,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  766,  766,  766,  766,  766,  766,  766,  632,
      633,  623,  623,  623,  623,  623,  623,  148,  631,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  625,  626,
      626,  626,  626,  626,  626,  632,  633,  634,  635,  636,

      638,  766,  652,  644,  644,  644,  644,  644,  644,  644,
      644,  644,  766,  766,  766,  626,  626,  626,  626,  626,
      626,  766,  766,  634,  635,  636,  638,  196,  652,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  594,  644,
      644,  644,  644,  644,  644,  766,  653,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  766,  766,  766,  766,
      766,  766,  766,  766,  655,  644,  644,  644,  644,  644,
      644,  196,  653,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  646,  647,  647,  647,  647,  647,  647,  148,
      655,  319,  319,  319,  319,  319,  319,  319,  319,  319,

      567,  766,  766,  766,  766,  766,  766,  766,  656,  647,
      647,  647,  647,  647,  647,  148,  766,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  625,  649,  649,  649,
      649,  649,  649,  766,  656,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  766,  766,  766,  766,  766,  657,
      658,  659,  660,  649,  649,  649,  649,  649,  649,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  675,  651,
      651,  651,  651,  651,  651,  657,  658,  659,  660,  196,
      766,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      594,  766,  766,  766,  675,  651,  651,  651,  651,  651,

      651,  196,  766,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  646,  667,  667,  667,  667,  667,  667,  766,
      766,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      766,  766,  766,  766,  766,  766,  676,  766,  766,  667,
      667,  667,  667,  667,  667,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  681,  669,  669,  669,  669,  669,
      669,  766,  676,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  766,  766,  766,  766,  766,  766,  766,  766,
      681,  669,  669,  669,  669,  669,  669,  148,  766,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  625,  671,

      671,  671,  671,  671,  671,  766,  682,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  766,  766,  766,  766,
      766,  766,  766,  683,  766,  671,  671,  671,  671,  671,
      671,  148,  682,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  673,  674,  674,  674,  674,  674,  674,  683,
      766,  766,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  766,  766,  766,  766,  766,  766,  766,  696,  674,
      674,  674,  674,  674,  674,  196,  766,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  646,  690,  690,  690,
      690,  690,  690,  766,  696,  692,  692,  692,  692,  692,

      692,  692,  692,  692,  697,  766,  766,  766,  766,  766,
      766,  766,  702,  690,  690,  690,  690,  690,  690,  196,
      766,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      697,  692,  692,  692,  692,  692,  692,  148,  702,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  625,  766,
      766,  766,  766,  766,  766,  766,  703,  692,  692,  692,
      692,  692,  692,  148,  766,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  673,  694,  694,  694,  694,  694,
      694,  766,  703,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  704,  766,  766,  766,  766,  766,  766,  766,

      766,  694,  694,  694,  694,  694,  694,  766,  766,  766,
      766,  766,  766,  766,  714,  766,  766,  196,  704,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  646,  196,
      766,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      714,  710,  710,  710,  710,  710,  710,  766,  715,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  766,  766,
      766,  766,  766,  766,  766,  766,  720,  710,  710,  710,
      710,  710,  710,  148,  715,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  673,  712,  712,  712,  712,  712,
      712,  766,  720,  712,  712,  712,  712,  712,  712,  712,

      712,  712,  728,  766,  766,  766,  766,  766,  766,  766,
      729,  712,  712,  712,  712,  712,  712,  196,  766,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  728,  726,
      726,  726,  726,  726,  726,  766,  729,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  766,  730,  766,  735,
      766,  766,  766,  766,  766,  726,  726,  726,  726,  726,
      726,  148,  736,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  673,  730,  196,  735,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  741,  742,  766,  736,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,

      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  741,  742,   36,   36,   36,   36,   38,   38,   38,
       38,   42,   42,   42,   42,   44,  766,   44,   44,   45,
       45,   45,   45,   95,  766,   95,   95,   99,   99,  143,
      143,  144,  144,  193,  193,  194,  194,  195,  195,  250,
      250,  251,  251,  309,  309,  310,  310,  311,  311,  365,
      365,  366,  366,  367,  367,  423,  423,  424,  424,  472,
      472,  473,  473,  474,  474,  518,  518,  519,  519,  520,
      520,  423,  423,  557,  557,  558,  558,  588,  588,  589,
      589,  590,  590,  614,  614,  615,  615,  616,  616,  519,

      519,  640,  640,  641,  641,  661,  661,  662,  662,  663,
      663,  684,  684,  685,  685,  687,  687,  589,  589,  706,
      706,  707,  707,  721,  721,  722,  722,  723,  723,  731,
      731,  732,  732,  640,  640,  738,  738,  739,  739,  743,
      743,  744,  744,  746,  746,  747,  747,  748,  748,  685,
      685,  751,  751,  753,  753,  754,  754,  755,  755,  758,
      758,  761,  761,  762,  762,  764,  764,  765,  765,    7,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,

      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766
    } ;

static yyconst flex_int16_t yy_chk[3945] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   10,   10,   11,   11,   15,   17,
       28,  850,   15,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   25,

       16,   26,   33,   35,   25,   17,   28,   26,   57,   30,
       34,   59,   25,   30,   34,   60,   16,   39,   39,   16,
       16,   16,   16,   16,   16,   25,   16,   26,   33,   35,
       25,   40,   40,   26,   57,   30,   34,   59,   25,   30,
       34,   60,   16,   19,   19,  846,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   20,   29,
       22,   23,   41,   41,  844,   61,   62,   63,   20,   65,
       22,   23,  840,   29,   23,   20,  834,   22,   23,   66,
       22,   32,   32,   67,   20,   29,   22,   23,   68,   69,
       32,   61,   62,   63,   20,   65,   22,   23,   32,   29,
       23,   20,   21,   22,   23,   66,   22,   21,   71,   67,
       75,   72,   21,   21,   68,   69,   32,   21,   70,   21,
      122,  122,  828,  827,   32,  655,  655,  655,   21,  655,
      824,  820,  678,   21,   71,  678,   70,   72,   21,   21,
       73,   74,   75,   21,   70,   21,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   70,   24,   31,   76,   73,   74,   75,   24,
       31,   77,   31,  819,   79,   80,   24,   82,   83,   84,
       27,   31,   24,   24,   24,   24,   24,   24,   27,   24,
       31,   76,   89,   90,   27,   24,   31,   77,   31,   27,
       79,   80,   24,   82,   83,   84,   27,   31,  815,  811,
      774,  765,  764,  762,   27,  761,   91,  760,   89,   90,
       27,  759,  758,  757,  755,   27,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   91,   49,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   92,  754,  752,  751,  750,  748,  747,
       93,  746,   49,   49,   49,   49,   49,   49,  745,   49,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   92,
       54,   54,   54,   54,   54,   54,   93,   98,   98,   98,
       98,   98,   98,   98,   98,   98,  744,  743,  739,  738,
      737,  733,   81,  732,  731,   81,   54,   54,   54,   54,
       54,   54,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   81,   56,
       85,   81,  103,  105,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  106,  107,  108,  110,   85,   56,   56,

       56,   56,   56,   56,  723,   56,   85,  722,  721,  105,
      712,  708,  707,  706,  111,  705,  112,  113,  114,  106,
      107,  108,  110,   85,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
      111,   96,  112,  113,  114,  701,  700,  699,  698,  690,
      687,  115,  685,  684,  680,  679,  671,  665,  116,  117,
       96,   96,   96,   96,   96,   96,  118,   96,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  115,  100,  100,
      100,  100,  100,  100,  116,  117,  664,  663,  662,  661,
      644,  641,  118,  142,  142,  142,  142,  142,  142,  142,

      142,  142,  119,  121,  100,  100,  100,  100,  100,  100,
      102,  124,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  119,  121,
      640,  639,  629,  623,  617,  616,  615,  124,  614,  612,
      600,  592,  590,  589,  588,  126,  127,  128,  102,  102,
      102,  102,  102,  102,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      123,  126,  127,  128,  129,  130,  123,  131,  133,  134,
      135,  136,  137,  138,  139,  140,  565,  559,  558,  557,
      104,  104,  104,  104,  104,  104,  123,  556,  535,  533,

      129,  130,  123,  131,  133,  134,  135,  136,  137,  138,
      139,  140,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  147,  141,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  141,  141,
      141,  141,  141,  141,  522,  141,  146,  520,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  151,  153,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  519,  518,  515,  482,  475,
      474,  473,  153,  154,  146,  146,  146,  146,  146,  146,

      149,  156,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  153,  154,
      472,  438,  427,  424,  423,  422,  407,  156,  394,  377,
      368,  367,  366,  365,  157,  158,  159,  161,  149,  149,
      149,  149,  149,  149,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  164,  150,  150,  150,  150,  150,  150,
      157,  158,  159,  161,  354,  331,  325,  314,  311,  165,
      310,  309,  307,  302,  296,  295,  166,  167,  293,  164,
      150,  150,  150,  150,  150,  150,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  165,  152,  152,  152,  152,

      152,  152,  166,  167,  168,  168,  168,  172,  173,  174,
      175,  176,  177,  171,  178,  179,  177,  180,  181,  289,
      184,  279,  152,  152,  152,  152,  152,  152,  171,  187,
      168,  168,  168,  172,  173,  174,  175,  176,  177,  171,
      178,  179,  177,  180,  181,  182,  184,  185,  188,  189,
      206,  207,  208,  209,  171,  187,  210,  209,  185,  211,
      182,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  182,  269,  185,  188,  189,  206,  207,  208,  209,
      260,  252,  210,  209,  185,  211,  182,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  197,  251,  197,  197,

      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  199,  250,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  249,  246,  234,  205,  195,
      194,  212,  193,  192,  197,  197,  197,  197,  197,  197,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  213,
      198,  198,  198,  198,  198,  198,  200,  212,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  190,  186,  183,
      170,  162,  160,  155,  145,  213,  198,  198,  198,  198,
      198,  198,  201,  144,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,

      202,  215,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  143,  132,  125,  120,  109,   99,   97,   64,  216,
      201,  201,  201,  201,  201,  201,  203,  215,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  204,  216,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  214,  218,  219,  220,  221,
      222,  223,  214,  224,  203,  203,  203,  203,  203,  203,
      214,  225,  226,  227,  229,  230,  231,  232,  224,  233,
      235,  214,  218,  219,  220,  221,  222,  223,  214,  224,
      236,  237,  238,  239,  240,  241,  214,  225,  226,  227,

      229,  230,  231,  232,  224,  233,  235,  242,  243,  244,
      245,  247,  248,   50,  264,   46,  236,  237,  238,  239,
      240,  241,  253,   45,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  242,  243,  244,  245,  247,  248,  254,
      264,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  255,  265,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  254,  254,  254,
      254,  254,  254,  256,  265,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,

      256,  257,  266,  257,  257,  257,  257,  257,  257,  257,
      257,  257,   42,   37,  267,   18,   14,   12,    7,    4,
        3,  256,  256,  256,  256,  256,  256,  259,  266,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  261,
      267,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  263,    0,  263,
      263,  263,  263,  263,  263,  263,  263,  263,    0,    0,
        0,    0,    0,  268,  270,  272,  273,  261,  261,  261,
      261,  261,  261,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  274,  262,  262,  262,  262,  262,  262,  268,

      270,  272,  273,  275,  276,  278,  280,  281,  282,  283,
      284,  285,  286,  287,  288,  290,  292,  294,  274,  262,
      262,  262,  262,  262,  262,  297,  298,  299,  300,  275,
      276,  278,  280,  281,  282,  283,  284,  285,  286,  287,
      288,  290,  292,  294,  301,  304,  305,  306,  308,    0,
      324,  297,  298,  299,  300,  312,  312,  312,  312,  312,
      312,  312,  312,  312,    0,    0,    0,    0,    0,    0,
      301,  304,  305,  306,  308,  313,  324,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  315,    0,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,

      315,  315,  315,  315,  315,  317,    0,  317,  317,  317,
      317,  317,  317,  317,  317,  317,    0,    0,    0,    0,
        0,    0,  326,    0,    0,  315,  315,  315,  315,  315,
      315,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      327,  316,  316,  316,  316,  316,  316,  318,  326,  318,
      318,  318,  318,  318,  318,  318,  318,  318,    0,  328,
        0,    0,    0,    0,    0,    0,  327,  316,  316,  316,
      316,  316,  316,  319,    0,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  320,  328,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,

      320,  320,  321,  330,  321,  321,  321,  321,  321,  321,
      321,  321,  321,    0,    0,    0,    0,    0,    0,    0,
        0,  333,  320,  320,  320,  320,  320,  320,  322,  330,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  323,  333,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  329,  334,  335,
      336,  337,  338,  329,  339,  329,  322,  322,  322,  322,
      322,  322,  340,  341,  342,  343,  344,  345,  346,  347,
      348,  349,  350,  329,  334,  335,  336,  337,  338,  329,
      339,  329,  351,  352,  353,  355,  356,  357,  340,  341,

      342,  343,  344,  345,  346,  347,  348,  349,  350,  358,
      359,  360,  362,  363,  364,    0,  381,    0,  351,  352,
      353,  355,  356,  357,  369,    0,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  358,  359,  360,  362,  363,
      364,  370,  381,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  371,    0,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      372,  382,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      371,  371,  371,  371,  371,  371,  373,  382,  373,  373,

      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  374,  383,  374,  374,  374,  374,
      374,  374,  374,  374,  374,    0,    0,  384,    0,    0,
        0,    0,    0,    0,  373,  373,  373,  373,  373,  373,
      376,  383,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  378,  384,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      380,    0,  380,  380,  380,  380,  380,  380,  380,  380,
      380,    0,    0,    0,    0,    0,  385,  386,  387,  388,
      378,  378,  378,  378,  378,  378,  379,  379,  379,  379,

      379,  379,  379,  379,  379,  389,  379,  379,  379,  379,
      379,  379,  385,  386,  387,  388,  390,  392,  393,  395,
      397,  400,  401,  402,  403,  404,  405,  406,  408,  409,
      410,  389,  379,  379,  379,  379,  379,  379,  411,  412,
      413,  414,  390,  392,  393,  395,  397,  400,  401,  402,
      403,  404,  405,  406,  408,  409,  410,  415,  416,  417,
      418,  419,  420,    0,  411,  412,  413,  414,  425,  425,
      425,  425,  425,  425,  425,  425,  425,    0,    0,    0,
        0,    0,    0,  415,  416,  417,  418,  419,  420,  426,
        0,  426,  426,  426,  426,  426,  426,  426,  426,  426,

      426,  428,    0,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  430,
        0,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  428,
      428,  428,  428,  428,  428,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  436,  429,  429,  429,  429,  429,
      429,  433,  437,  433,  433,  433,  433,  433,  433,  433,
      433,  433,    0,    0,    0,    0,    0,    0,    0,    0,
      436,  429,  429,  429,  429,  429,  429,  432,  437,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,

      432,  432,  432,  432,  432,  435,  439,  435,  435,  435,
      435,  435,  435,  435,  435,  435,    0,    0,    0,    0,
        0,    0,    0,  440,  441,  432,  432,  432,  432,  432,
      432,  434,  439,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  440,
      441,  442,  443,  444,  445,  447,  448,  449,  451,  452,
      453,  454,  456,  457,  459,  460,  461,  462,  458,  434,
      434,  434,  434,  434,  434,  458,  463,  442,  443,  444,
      445,  447,  448,  449,  451,  452,  453,  454,  456,  457,
      459,  460,  461,  462,  458,  464,  465,  466,  468,  470,

      471,  458,  463,  476,  476,  476,  476,  476,  476,  476,
      476,  476,    0,    0,    0,    0,    0,    0,    0,    0,
      486,  464,  465,  466,  468,  470,  471,  477,    0,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  478,  486,  478,  478,  478,
      478,  478,  478,  478,  478,  478,    0,    0,    0,    0,
        0,    0,    0,    0,  487,  477,  477,  477,  477,  477,
      477,  479,    0,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  480,
      487,  480,  480,  480,  480,  480,  480,  480,  480,  480,

        0,    0,  488,    0,    0,    0,    0,    0,    0,  479,
      479,  479,  479,  479,  479,  481,    0,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  483,  488,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  485,    0,  485,  485,  485,
      485,  485,  485,  485,  485,  485,    0,    0,    0,    0,
        0,  489,  490,  491,  492,  483,  483,  483,  483,  483,
      483,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      493,  484,  484,  484,  484,  484,  484,  489,  490,  491,
      492,  495,  496,  497,  498,  499,  500,  503,  505,  506,

      507,  508,  509,  510,  511,  514,  493,  484,  484,  484,
      484,  484,  484,  516,  517,    0,  531,  495,  496,  497,
      498,  499,  500,  503,  505,  506,  507,  508,  509,  510,
      511,  514,    0,    0,    0,    0,    0,    0,    0,  516,
      517,  521,  531,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  523,    0,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  525,    0,  525,  525,  525,  525,  525,  525,  525,
      525,  525,    0,    0,    0,    0,    0,    0,  532,    0,
        0,  523,  523,  523,  523,  523,  523,  524,  524,  524,

      524,  524,  524,  524,  524,  524,  534,  524,  524,  524,
      524,  524,  524,  527,  532,  527,  527,  527,  527,  527,
      527,  527,  527,  527,    0,    0,    0,    0,    0,    0,
        0,    0,  534,  524,  524,  524,  524,  524,  524,  526,
        0,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  529,  537,  529,
      529,  529,  529,  529,  529,  529,  529,  529,    0,    0,
        0,    0,    0,    0,    0,  538,  539,  526,  526,  526,
      526,  526,  526,  528,  537,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,

      528,  538,  539,  540,  544,  545,  546,  547,  548,  549,
      550,  552,  553,  554,    0,  570,    0,    0,    0,    0,
        0,  528,  528,  528,  528,  528,  528,    0,    0,  540,
      544,  545,  546,  547,  548,  549,  550,  552,  553,  554,
      560,  570,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  561,  571,
      561,  561,  561,  561,  561,  561,  561,  561,  561,    0,
        0,    0,    0,    0,    0,    0,    0,  575,  560,  560,
      560,  560,  560,  560,  562,  571,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,

      562,  562,  563,  575,  563,  563,  563,  563,  563,  563,
      563,  563,  563,    0,    0,  577,    0,    0,    0,    0,
        0,    0,  562,  562,  562,  562,  562,  562,  564,    0,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      566,  577,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  568,    0,
      568,  568,  568,  568,  568,  568,  568,  568,  568,    0,
        0,    0,    0,    0,    0,  578,  579,  580,  566,  566,
      566,  566,  566,  566,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  581,  567,  567,  567,  567,  567,  567,

      573,  578,  579,  580,  583,  584,  573,  586,  587,    0,
      601,    0,    0,    0,    0,    0,    0,    0,    0,  581,
      567,  567,  567,  567,  567,  567,  573,    0,    0,    0,
      583,  584,  573,  586,  587,  591,  601,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  593,    0,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  595,    0,  595,  595,  595,
      595,  595,  595,  595,  595,  595,    0,    0,    0,    0,
        0,    0,  602,    0,    0,  593,  593,  593,  593,  593,
      593,  594,  594,  594,  594,  594,  594,  594,  594,  594,

      603,  594,  594,  594,  594,  594,  594,  597,  602,  597,
      597,  597,  597,  597,  597,  597,  597,  597,    0,    0,
        0,    0,    0,    0,    0,    0,  603,  594,  594,  594,
      594,  594,  594,  596,    0,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  599,  604,  599,  599,  599,  599,  599,  599,  599,
      599,  599,    0,    0,    0,    0,    0,    0,    0,  606,
      607,  596,  596,  596,  596,  596,  596,  598,  604,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  606,  607,  608,  609,  611,

      613,  619,  627,  619,  619,  619,  619,  619,  619,  619,
      619,  619,    0,    0,    0,  598,  598,  598,  598,  598,
      598,    0,    0,  608,  609,  611,  613,  618,  627,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  621,  628,  621,  621,  621,
      621,  621,  621,  621,  621,  621,    0,    0,    0,    0,
        0,    0,    0,    0,  630,  618,  618,  618,  618,  618,
      618,  620,  628,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  622,
      630,  622,  622,  622,  622,  622,  622,  622,  622,  622,

      622,    0,    0,    0,    0,    0,    0,    0,  633,  620,
      620,  620,  620,  620,  620,  624,    0,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  626,  633,  626,  626,  626,  626,  626,
      626,  626,  626,  626,    0,    0,    0,    0,    0,  634,
      635,  636,  637,  624,  624,  624,  624,  624,  624,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  652,  625,
      625,  625,  625,  625,  625,  634,  635,  636,  637,  643,
        0,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,    0,    0,    0,  652,  625,  625,  625,  625,  625,

      625,  645,    0,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  647,
        0,  647,  647,  647,  647,  647,  647,  647,  647,  647,
        0,    0,    0,    0,    0,    0,  653,    0,    0,  645,
      645,  645,  645,  645,  645,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  656,  646,  646,  646,  646,  646,
      646,  649,  653,  649,  649,  649,  649,  649,  649,  649,
      649,  649,    0,    0,    0,    0,    0,    0,    0,    0,
      656,  646,  646,  646,  646,  646,  646,  648,    0,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,

      648,  648,  648,  648,  648,  651,  658,  651,  651,  651,
      651,  651,  651,  651,  651,  651,    0,    0,    0,    0,
        0,    0,    0,  660,    0,  648,  648,  648,  648,  648,
      648,  650,  658,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  660,
      667,    0,  667,  667,  667,  667,  667,  667,  667,  667,
      667,    0,    0,    0,    0,    0,    0,    0,  675,  650,
      650,  650,  650,  650,  650,  666,    0,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  669,  675,  669,  669,  669,  669,  669,

      669,  669,  669,  669,  676,    0,    0,    0,    0,    0,
        0,    0,  681,  666,  666,  666,  666,  666,  666,  668,
        0,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      676,  668,  668,  668,  668,  668,  668,  670,  681,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,    0,
        0,    0,    0,    0,    0,    0,  682,  668,  668,  668,
      668,  668,  668,  672,    0,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  674,  682,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  683,    0,    0,    0,    0,    0,    0,    0,

        0,  672,  672,  672,  672,  672,  672,    0,    0,    0,
        0,    0,    0,    0,  696,    0,    0,  689,  683,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  691,
        0,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      696,  691,  691,  691,  691,  691,  691,  692,  697,  692,
      692,  692,  692,  692,  692,  692,  692,  692,    0,    0,
        0,    0,    0,    0,    0,    0,  704,  691,  691,  691,
      691,  691,  691,  693,  697,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  694,  704,  694,  694,  694,  694,  694,  694,  694,

      694,  694,  714,    0,    0,    0,    0,    0,    0,    0,
      715,  693,  693,  693,  693,  693,  693,  709,    0,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  714,  709,
      709,  709,  709,  709,  709,  710,  715,  710,  710,  710,
      710,  710,  710,  710,  710,  710,    0,  720,    0,  728,
        0,    0,    0,    0,    0,  709,  709,  709,  709,  709,
      709,  711,  730,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  720,  725,  728,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  735,  736,    0,  730,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  735,  736,  767,  767,  767,  767,  768,  768,  768,
      768,  769,  769,  769,  769,  770,    0,  770,  770,  771,
      771,  771,  771,  772,    0,  772,  772,  773,  773,  775,
      775,  776,  776,  777,  777,  778,  778,  779,  779,  780,
      780,  781,  781,  782,  782,  783,  783,  784,  784,  785,
      785,  786,  786,  787,  787,  788,  788,  789,  789,  790,
      790,  791,  791,  792,  792,  793,  793,  794,  794,  795,
      795,  796,  796,  797,  797,  798,  798,  799,  799,  800,
      800,  801,  801,  802,  802,  803,  803,  804,  804,  805,

      805,  806,  806,  807,  807,  808,  808,  809,  809,  810,
      810,  812,  812,  813,  813,  814,  814,  816,  816,  817,
      817,  818,  818,  821,  821,  822,  822,  823,  823,  825,
      825,  826,  826,  829,  829,  830,  830,  831,  831,  832,
      832,  833,  833,  835,  835,  836,  836,  837,  837,  838,
      838,  839,  839,  841,  841,  842,  842,  843,  843,  845,
      845,  847,  847,  848,  848,  849,  849,  851,  851,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,

      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[88] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
    1, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_ClntParser_stype yylval;
}

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 767 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3870 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
{ return ClntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
{ return ClntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
{ return ClntParser::ADDRESS_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
{ return ClntParser::STRING_KEYWORD_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ return ClntParser::ADDRESS_LIST_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ return ClntParser::NAME_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ return ClntParser::IA_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
{ return ClntParser::TA_; }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ return ClntParser::IAID_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 13:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
{ return ClntParser::LOGLEVEL_; }
	YY_BREAK
case 15:
YY_RULE_SETUP
{ return ClntParser::LOGMODE_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ return ClntParser::LOGNAME_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ return ClntParser::WORKDIR_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
{ return ClntParser::SCRIPTS_DIR_; }
	YY_BREAK
case 19:
YY_RULE_SETUP
{ return ClntParser::NOTIFY_SCRIPTS_; }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ return ClntParser::VALID_TIME_; }
	YY_BREAK
case 22:
YY_RULE_SETUP
{ return ClntParser::REMOTE_AUTOCONF_; }
	YY_BREAK
case 23:
YY_RULE_SETUP
{ return ClntParser::T1_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
{ return ClntParser::T2_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
{ return ClntParser::OPTION_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
{ return ClntParser::DNS_SERVER_;}
	YY_BREAK
case 27:
YY_RULE_SETUP
{ return ClntParser::DOMAIN_;}
	YY_BREAK
case 28:
YY_RULE_SETUP
{ return ClntParser::NTP_SERVER_;}
	YY_BREAK
case 29:
YY_RULE_SETUP
{ return ClntParser::TIME_ZONE_;}
	YY_BREAK
case 30:
YY_RULE_SETUP
{ return ClntParser::SIP_SERVER_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
{ return ClntParser::SIP_DOMAIN_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
{ return ClntParser::FQDN_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ return ClntParser::FQDN_S_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ return ClntParser::NIS_SERVER_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ return ClntParser::NIS_DOMAIN_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ return ClntParser::NISP_SERVER_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
{ return ClntParser::NISP_DOMAIN_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ return ClntParser::LIFETIME_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ return ClntParser::REJECT_SERVERS_;}
	YY_BREAK
case 40:
YY_RULE_SETUP
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 41:
YY_RULE_SETUP
{ return ClntParser::RAPID_COMMIT_;}
	YY_BREAK
case 42:
YY_RULE_SETUP
{ return ClntParser::UNICAST_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
{ return ClntParser::STRICT_RFC_NO_ROUTING_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LL_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LLT_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_EN_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ return ClntParser::VENDOR_SPEC_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ return ClntParser::ANON_INF_REQUEST_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ return ClntParser::INSIST_MODE_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ return ClntParser::INACTIVE_MODE_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ return ClntParser::AUTH_ENABLED_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ return ClntParser::AUTH_ACCEPT_METHODS_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ return ClntParser::DIGEST_NONE_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ return ClntParser::DIGEST_PLAIN_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ return ClntParser::EXPERIMENTAL_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
{ return ClntParser::ADDR_PARAMS_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ return ClntParser::SKIP_CONFIRM_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
{ return ClntParser::DS_LITE_TUNNEL_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
;
	YY_BREAK
case 69:
YY_RULE_SETUP
;
	YY_BREAK
case 70:
YY_RULE_SETUP
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
BEGIN(INITIAL);
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 73:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 74:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 75:
YY_RULE_SETUP
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 76:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 77:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 78:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 79:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return ClntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return ClntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 82:
YY_RULE_SETUP
{
    // DUID in 0x00010203 format
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return ClntParser::DUID_;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
{
   // DUID in 00:01:02:03 format
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
        x = (toupper(*pos)-'A' + 10);
      else
        x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))	
        x += (toupper(*(pos+1))-'A' + 10);
      else
        x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }
   
   return ClntParser::DUID_;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
{ 
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::HEXNUMBER_;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
{ 
    if(!sscanf(yytext,"%u",(unsigned int*)&(yylval.ival))) { 
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::INTNUMBER_;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
{return yytext[0];} 
	YY_BREAK
case 87:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 767 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 767 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 766);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

