
#line 3 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 91
#define YY_END_OF_BUFFER 92
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[787] =
    {   0,
        1,    1,    0,    0,    0,    0,   92,   90,    2,    1,
        1,   90,   72,   90,   90,   89,   89,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   76,   76,   91,    1,    1,
        1,    0,   84,   72,    0,   84,   74,   73,   89,    0,
        0,   88,    0,   81,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,    9,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   47,   85,   85,
       85,   85,   85,   85,   85,   24,   25,   10,   85,   85,
       85,   85,   85,   75,   73,   89,    0,    0,    0,   80,

       86,   79,   79,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   89,    0,    0,    0,    0,   78,   78,    0,
       79,    0,   79,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   33,   11,   85,   85,   85,   85,   85,
        8,    0,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   89,    0,   87,    0,    0,    0,

       78,    0,   78,    0,   79,   79,   79,   79,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
        3,   85,   85,   85,   85,   85,   85,   85,    0,   85,
       85,   85,   12,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,    0,    0,    0,    0,    0,
       78,   78,   78,   78,    0,   79,   79,   79,    0,   79,
       85,   85,   85,   85,   85,   85,   85,   28,   85,   85,
       85,   85,   85,   34,   85,   85,   85,   85,   85,   85,
       85,    0,    0,   85,   85,   85,   85,   85,   26,   85,

       48,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,    6,   85,   85,   85,   85,   85,    0,    0,
        0,    0,   78,   78,   78,    0,   78,    0,    0,   79,
       79,   79,   79,   85,    5,   85,   85,   85,   85,   85,
       68,   52,   50,   85,   85,   85,   85,   85,   85,   85,
       85,   85,    0,    0,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   71,   85,   85,   85,   85,
       85,   85,   85,   44,   85,   85,   85,   87,    0,    0,
        0,    0,    0,   78,   78,   78,   78,    0,   79,   79,
       79,    0,   79,   85,   85,   85,   85,   85,   85,   85,

       85,   85,   51,   85,   85,   85,   85,   39,   85,   85,
       15,   16,    0,    0,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   18,    0,    0,    0,    0,   78,
       78,   78,    0,   78,   83,   79,   79,   79,   79,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   49,   85,
       85,   85,   85,   14,    0,    0,   85,   85,    4,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   13,   85,   30,   85,   85,    0,    0,    0,    0,
       82,   78,   78,   78,   78,   79,   79,   79,    0,   79,

       85,   85,   85,   85,   85,   85,   85,   85,   27,   85,
       85,   85,   17,    0,    0,   36,   35,   85,   29,   85,
       85,   85,   85,   85,   85,   85,   85,   32,   31,   85,
       85,   85,   85,   87,    0,    0,   78,   78,   78,    0,
       78,   79,   79,   79,   79,   70,   85,   85,   85,   85,
       85,   59,   85,   85,   85,   55,   38,   37,   85,   85,
       85,   85,   85,   85,   85,   85,   19,   85,   85,   85,
       53,    0,    0,    0,    0,   78,   78,   78,   78,   79,
       79,   79,    0,   79,    7,   85,   85,   57,   85,   60,
       69,   85,   85,   85,   85,   85,   42,   85,   85,   85,

       67,   85,   85,    0,    0,    0,   78,   78,   78,    0,
       78,   79,   79,   79,   79,   85,   85,   85,   85,   56,
       85,   85,   85,   85,   85,   40,   85,   85,   85,   87,
        0,    0,    0,   78,   78,   78,   78,   79,   79,   79,
        0,   79,   85,   85,   85,   85,   20,   85,   85,   85,
       85,   85,   85,   22,    0,    0,   77,   80,   78,   78,
       78,    0,   78,   79,   79,   79,   79,   85,   85,   61,
       85,   85,   41,   85,   85,   23,   85,    0,    0,   77,
        0,   78,   78,   78,   78,   78,   79,   79,   79,    0,
       79,   85,   85,   62,   85,   85,   85,   85,   85,   85,

       85,   87,   77,   80,   78,    0,   78,   78,   78,   78,
       79,   79,   79,   85,   85,   85,   85,   85,   85,   21,
       46,   85,   85,    0,   77,   78,   78,   78,   78,   79,
       79,   79,   85,   85,   63,   64,   65,   66,   43,   85,
        0,   78,   78,    0,   78,   78,   79,   85,   58,   85,
       87,   78,   78,   79,   85,   85,    0,   78,   78,    0,
       54,   45,   77,   78,   78,   77,   78,   78,    0,    0,
       78,   78,    0,   78,   78,    0,   87,   78,   78,    0,
       78,   78,    0,   78,   78,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
        1,    1,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,    1,    1,    1,    1,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    3,    3,    3,    3,    3,    3,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[872] =
    {   0,
        0,    0, 1518, 1516,    0,    0, 1523, 3857, 3857,   72,
       74, 1517,    0, 1514,   71,   71,   34, 1498,  134,  183,
      227,  185,  186,  284,   77,   71,  308,   43,  184,   87,
      290,  218,   67,   88,   67, 3857, 1507, 3857,  115,  129,
      210, 1504, 3857,    0, 1484, 1472, 3857,    0,  364, 1453,
      382, 3857,    0,  408,    0,  450,   83,    0,   75,   74,
      187,  176,  183, 1464,  189,  192,  208,  208,  217,  246,
      231,  233,  256,  251,  251,  278,  280,    0,  298,  288,
      454,  288,  291,  299,  458,    0,    0,    0,  308,  313,
      333,  368,  371, 3857,    0,  512, 1451,  425, 1450,  556,

        0,  600,  530,  642,  416,  447,  454,  458, 1454,  464,
      454,  464,  464,  456,  468,  470,  471,  466,  525, 1453,
      532,  262,  646,  529, 1452,  536,  575,  573,  575,  619,
      610,  605,  644, 1451,  638,  636,  648,  653,  656,  651,
      657,  651,  698,  434, 1345, 1344, 1343,  744,  581,  716,
      788,  830,  762,  872,  764,  680, 1354,  751,  759,  802,
      803, 1353,  795, 1343,    0,  809,  810,  827,  833,  877,
        0, 1305,  877,  867,  882,  878,  866,  871,  883,  883,
      879,  891,  875,  892,  882,  921, 1304,  900,  923, 1303,
      926,  924,  914, 1302,  950, 1289, 1288, 1286, 1285,  725,

      978, 1020,  996, 1038, 1064, 1082, 1108, 1126, 1213,  914,
      913,  920,  933,  915,  931,  925,  982, 1121, 1011, 1053,
        0, 1081, 1107, 1119, 1114, 1125, 1116, 1131, 1130, 1127,
     1138, 1130,    0, 1120, 1141, 1133, 1130, 1126, 1206, 1145,
     1141, 1157, 1144, 1144, 1150, 1161, 1175, 1167, 1160, 1174,
     1156, 1164, 1198, 1166, 1181, 1089, 1088, 1087, 1086, 1204,
     1223, 1241, 1267, 1285, 1250, 1311, 1085, 1323, 1365, 1341,
     1230, 1256, 1272, 1343, 1333, 1096, 1330,    0, 1344, 1351,
     1364, 1352, 1365,    0, 1357, 1095, 1367, 1369, 1360, 1379,
     1371, 1370, 1381, 1374, 1370, 1383, 1094, 1372,    0, 1393,

     1066, 1396, 1391, 1057, 1056, 1381, 1398, 1405, 1401, 1405,
     1416, 1055,    0, 1407, 1403, 1416, 1054, 1420, 1041, 1040,
     1039, 1439, 1467, 1038, 1479, 1521, 1497, 1539, 1565, 1576,
     1594, 1620, 1638, 1485, 1016, 1500, 1537, 1583, 1630, 1580,
        0,    0, 1619, 1624, 1636, 1637, 1630, 1640, 1638, 1649,
     1650, 1651, 1644, 1640, 1658, 1638, 1652, 1643, 1641, 1669,
     1670, 1660, 1669, 1658, 1677,    0, 1015, 1689, 1669, 1678,
     1674, 1676, 1681,    0, 1687, 1678, 1680, 1001, 1000,  999,
      998, 1716, 1736, 1747, 1765, 1791, 1809, 1774, 1835,  997,
     1847, 1889, 1865, 1754, 1787, 1792, 1865, 1869, 1859, 1858,

     1877, 1895,    0, 1896, 1888, 1008, 1888,    0, 1886, 1893,
        0,    0, 1905, 1885, 1899, 1904, 1903, 1908, 1907,  998,
     1908, 1901, 1901, 1918, 1903, 1921, 1932, 1937, 1937, 1925,
     1939, 1941, 1941, 1936,    0,  968,  957,  855, 1962, 1988,
      854, 2000, 2042, 2018, 2027, 2086, 2060, 2130, 2104, 1951,
     2033,  864, 2034, 2082, 2110, 2098, 2138, 2122,    0, 2121,
     2129, 2139, 2125,    0, 2136, 2141, 2133, 2130,    0, 2131,
     2132, 2144, 2139, 2139, 2135, 2136, 2135, 2155, 2169, 2166,
     2176,    0, 2183,    0, 2182, 2183,  851,  850,  849,  848,
     2200, 2226, 2244, 2270, 2288, 2314,  847, 2326, 2368, 2344,

     2189, 2233, 2281, 2329, 2345, 2348, 2347, 2359,    0, 2378,
     2365, 2376,    0, 2368, 2365,    0,    0, 2375,    0, 2376,
     2381, 2382, 2379, 2384, 2368, 2376, 2374,    0,    0, 2375,
      857, 2381, 2399,  844,  843,  842, 2440,  841, 2452, 2494,
     2470, 2538, 2512, 2582, 2556,    0, 2384, 2462,  822, 2490,
      821,    0, 2532, 2551, 2560,    0, 3857, 3857, 2575, 2586,
     2575, 2587, 2575,  820, 2591, 2594,    0, 2585, 2585, 2591,
        0,  807,  806,  805,  803, 2638, 2656, 2682, 2700, 2726,
      802, 2738, 2780, 2756,    0, 2596, 2633,    0, 2774,    0,
        0, 2659, 2682, 2757, 2741, 2763,    0, 2779, 2773, 2777,

        0, 2779, 2782,  801,  800,  799, 2833,  798, 2845, 2887,
     2863, 2931, 2905, 2975, 2949,  809, 2792, 2865, 2879,    0,
     2920, 2936, 2952, 2964, 2982,    0, 2972,  780, 2982,  767,
      766,  765,  764, 3025, 2999, 3069, 3043, 3087,  763, 3113,
     3155, 3131, 2971, 3013,  766, 3050,    0, 3086, 3118, 3128,
     3135, 3133, 3137,    0,  734,  678,  677,    0, 3177,  676,
     3199, 3241, 3217, 3285, 3259, 3329, 3303, 3218, 3233,    0,
      262, 3280,    0, 3295, 3306,    0, 3323,  668,  667,  666,
      665,  664, 3376, 3350, 3420, 3394, 3438,  663, 3464,    0,
     3482, 3323, 3369,    0,  268,  624,  630, 3389, 3388, 3430,

     3461,  621,  620, 3857,  619,    0, 3518,  618, 3530, 3548,
     3574, 3592,    0, 3483, 3534,  622,  618,  619,  620,    0,
        0, 3536, 3572,  612,  611,  610,  609, 3630, 3618, 3648,
      569,    0, 3589, 3611,    0,    0,    0,    0,    0, 3629,
      568,  567,  566,    0, 3674, 3857,    0, 3630,    0, 3636,
      565,  536,  535, 3857, 3631, 3645,  534,  533,  532,    0,
        0,    0,  531,  486,  397,  390,  388,  387,    0,  386,
      385,  384,    0,  383,  353,    0,  352,  351,  350,  346,
      344,  342,    0,  341,  340, 3857, 3700, 3704, 3708, 3712,
     3716, 3720, 3722,  358, 3724, 3726, 3728, 3730, 3732, 3734,

     3736, 3738, 3740, 3742, 3744, 3746, 3748, 3750, 3752, 3754,
     3756, 3758, 3760, 3762, 3764, 3766, 3768, 3770, 3772, 3774,
     3776, 3778, 3780, 3782, 3784, 3786, 3788, 3790, 3792, 3794,
      357, 3796, 3798, 3800,  356, 3802, 3804, 3806,  321,  279,
     3808, 3810, 3812,  278, 3814, 3816,  271,  270, 3818, 3820,
     3822, 3824, 3826,  224, 3828, 3830, 3832, 3834, 3836,  220,
     3838, 3840, 3842,  212, 3844,  143, 3846, 3848, 3850,   79,
     3852
    } ;

static yyconst flex_int16_t yy_def[872] =
    {   0,
      786,    1,  787,  787,  788,  788,  786,  786,  786,  786,
      786,  789,  790,  791,  786,  786,   16,  786,  786,   19,
       19,   19,   19,   19,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  786,  786,  786,  786,  786,
      786,  789,  786,  790,  791,  786,  786,  792,  786,  793,
       49,  786,  794,  786,   24,   24,   56,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  786,  792,  786,  795,   96,  796,  786,

      794,  786,  102,   56,  104,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  786,  143,  797,  798,  799,  786,  148,  786,
      786,  786,  151,  104,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  786,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  144,  144,  798,  800,  801,  786,

      786,  786,  201,  786,  786,  205,  786,  207,  154,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  786,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  802,  786,  803,  804,  786,
      786,  261,  786,  263,  786,  786,  786,  786,  786,  268,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  786,  786,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  805,  806,
      807,  786,  786,  786,  786,  786,  325,  786,  786,  786,
      330,  786,  332,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  786,  786,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  803,  786,  808,
      809,  786,  786,  786,  384,  786,  386,  786,  786,  786,
      786,  786,  391,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  786,  786,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  810,  811,  812,  786,  786,
      786,  786,  786,  442,  786,  786,  446,  786,  448,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  786,  786,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  813,  786,  814,  815,
      786,  786,  492,  786,  494,  786,  786,  786,  786,  498,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  786,  786,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  816,  817,  818,  786,  786,  786,  786,
      539,  786,  542,  786,  544,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  786,  786,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  819,  786,  820,  821,  786,  576,  786,  578,  786,
      786,  786,  786,  582,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,  822,  823,  824,  786,  786,  786,  786,
      609,  786,  612,  786,  614,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  825,
      786,  826,  827,  786,  634,  786,  636,  786,  786,  786,
      786,  640,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  828,  829,  830,  831,  786,  786,
      786,  786,  661,  786,  664,  786,  666,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  832,  786,  833,
      786,  834,  786,  683,  786,  685,  786,  786,  786,  835,
      689,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,  836,  837,  786,  838,  839,  786,  786,  786,  709,
      786,  711,  840,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  841,  786,  842,  843,  786,  728,  786,
      786,  844,   24,   24,   24,   24,   24,   24,   24,   24,
      845,  786,  846,  847,  786,  786,  848,   24,   24,   24,
      849,  850,  851,  786,   24,   24,  852,  786,  853,  854,
       24,   24,  855,  856,  857,  858,  786,  859,  860,  861,
      862,  863,  864,  786,  865,  866,  786,  867,  868,  861,
      786,  869,  870,  871,  786,    0,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,

      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786
    } ;

static yyconst flex_int16_t yy_nxt[3932] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   20,   21,   22,   23,   24,   24,
       25,   24,   24,   26,   24,   27,   28,   29,   24,   30,
       31,   32,   33,   34,   35,   24,   24,   24,   19,   20,
       20,   21,   22,   23,   24,   24,   25,   24,   24,   26,
       24,   27,   28,   29,   24,   30,   31,   32,   33,   34,
       35,   24,   24,   24,   39,   40,   41,   40,   47,  786,
       77,  686,   48,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   50,   51,   51,   51,   51,   51,   51,   68,

       52,   71,   90,   93,   69,  786,   77,   72,  105,   80,
       91,  106,   70,   81,   92,  107,   53,   39,   40,   51,
       51,   51,   51,   51,   51,   68,   52,   71,   90,   93,
       69,   41,   40,   72,  105,   80,   91,  106,   70,   81,
       92,  107,   53,   55,   55,  779,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   50,   56,   56,   56,   57,
       56,   56,   55,   58,   55,   55,   55,   55,   55,   59,
       55,   55,   55,   55,   55,   55,   60,   55,   55,   55,
       55,   55,   56,   56,   56,   57,   56,   56,   55,   58,
       55,   55,   55,   55,   55,   59,   55,   55,   55,   55,

       55,   55,   60,   55,   55,   55,   55,   55,   56,   78,
       56,   56,   39,   40,  777,  108,  109,  110,   55,  112,
       55,   55,  772,   79,   67,   55,  765,   55,   55,  113,
       66,   86,   87,  114,   56,   78,   56,   56,  115,  116,
       88,  108,  109,  110,   55,  112,   55,   55,   89,   79,
       67,   55,   56,   55,   55,  113,   66,   61,  119,  114,
      123,  120,   62,   63,  115,  116,   88,   64,  117,   65,
      172,  173,  754,  753,   89,  694,  695,  696,   56,  697,
      747,  732,  716,   61,  119,  717,  118,  120,   62,   63,
      121,  122,  124,   64,  117,   65,   55,   55,   55,   55,

       55,   55,   55,   55,   55,  786,   55,   55,   55,   55,
       55,   55,  118,   55,   82,  125,  121,  122,  124,   55,
       83,  126,   84,  727,  127,  128,   55,  133,  134,  135,
       73,   85,   55,   55,   55,   55,   55,   55,   74,   55,
       82,  125,  138,  139,   75,   55,   83,  126,   84,   76,
      127,  128,   55,  133,  134,  135,   73,   85,  713,  682,
      101,  783,  783,  783,   74,  776,  140,  786,  138,  139,
       75,  783,  776,  780,  776,   76,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   97,   98,   98,   98,   98,
       98,   98,  140,   52,   98,   98,   98,   98,   98,   98,

       98,   98,   98,  141,  769,  776,  769,  704,  769,  760,
      142,  770,   98,   98,   98,   98,   98,   98,  769,   52,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  141,
      103,  103,  103,  103,  103,  103,  142,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  155,  103,  103,  103,  103,
      103,  103,  104,  104,  104,  104,  104,  104,  104,  104,
      104,   97,  104,  104,  104,  104,  104,  104,  129,   58,
      136,  155,  156,  157,  158,  130,  160,  161,  131,  162,
      163,  164,  132,  165,  166,  167,  168,  137,  104,  104,

      104,  104,  104,  104,  129,   58,  136,  760,  156,  157,
      158,  130,  160,  161,  131,  162,  163,  164,  132,  165,
      166,  167,  168,  137,  143,  143,  143,  143,  143,  143,
      143,  143,  143,   50,  144,  144,  144,  144,  144,  144,
      786,   52,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  169,  681,  760,  744,  658,  760,  744,  171,  176,
      144,  144,  144,  144,  144,  144,  178,   52,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  169,  149,  149,
      149,  149,  149,  149,  171,  176,  757,  744,  706,  633,
      690,  786,  178,  203,  203,  203,  203,  203,  203,  203,

      203,  203,  179,  180,  149,  149,  149,  149,  149,  149,
      150,  181,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  152,  153,  153,  153,  153,  153,  153,  179,  180,
      744,  706,  681,  100,  738,  737,  736,  181,  735,  662,
      706,  681,  724,  719,  718,  182,  183,  184,  153,  153,
      153,  153,  153,  153,  154,  154,  154,  154,  154,  154,
      154,  154,  154,   50,  154,  154,  154,  154,  154,  154,
      174,  182,  183,  184,  185,  187,  175,  188,  189,  190,
      191,  192,  193,  194,  641,  706,  704,  681,  633,  575,
      154,  154,  154,  154,  154,  154,  174,  610,  681,  633,

      185,  187,  175,  188,  189,  190,  191,  192,  193,  194,
      195,  195,  195,  195,  195,  195,  195,  195,  195,   50,
      196,  196,  196,  196,  196,  196,  212,   52,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  196,  196,  196,  196,
      196,  196,  212,   52,  200,  100,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  202,  203,  203,  203,  203,
      203,  203,  786,  210,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  670,  583,  658,  633,  575,  655,  653,
      211,  214,  203,  203,  203,  203,  203,  203,  150,  215,

      205,  205,  205,  205,  205,  205,  205,  205,  205,  152,
      206,  206,  206,  206,  206,  206,  211,  214,  643,  540,
      633,  575,  490,  499,  100,  215,  575,  490,  100,  598,
      589,  587,  216,  217,  219,  221,  206,  206,  206,  206,
      206,  206,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  222,  208,  208,  208,  208,  208,  208,  216,  217,
      219,  221,  443,  575,  490,  572,  569,  223,  392,  100,
      490,  381,  381,  503,  224,  326,  490,  222,  208,  208,
      208,  208,  208,  208,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  223,  209,  209,  209,  209,  209,  209,

      224,  225,  230,  232,  233,  234,  235,  236,  239,  237,
      226,  227,  228,  238,  240,  241,  242,  231,  243,  244,
      209,  209,  209,  209,  209,  209,  248,  225,  230,  232,
      233,  234,  235,  236,  239,  237,  226,  227,  228,  238,
      240,  241,  242,  231,  243,  244,  245,  249,  252,  253,
      254,  271,  248,  272,  273,  274,  276,  277,  250,  275,
      278,  246,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  786,  245,  249,  252,  253,  254,  271,  381,  272,
      273,  274,  276,  277,  250,  275,  278,  246,  200,  100,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  202,

      262,  262,  262,  262,  262,  262,  786,  472,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  461,  269,  100,
      381,  259,  436,  279,  426,  395,  262,  262,  262,  262,
      262,  262,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  283,  264,  264,  264,  264,  264,  264,  265,  279,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  202,
      381,  259,  259,  376,  372,  365,  364,  283,  264,  264,
      264,  264,  264,  264,  150,  361,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  152,  267,  267,  267,  267,
      267,  267,  786,  284,  267,  267,  267,  267,  267,  267,

      267,  267,  267,  358,  347,  339,  152,  100,  259,  147,
      100,  285,  267,  267,  267,  267,  267,  267,  150,  284,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  269,
      270,  270,  270,  270,  270,  270,  786,  285,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  280,  286,  287,
      288,  289,  290,  291,  281,  292,  270,  270,  270,  270,
      270,  270,  282,  294,  295,  296,  297,  298,  299,  300,
      293,  301,  303,  280,  286,  287,  288,  289,  290,  291,
      281,  292,  304,  305,  306,  307,  308,  309,  282,  294,
      295,  296,  297,  298,  299,  300,  293,  301,  303,  310,

      311,  312,  313,  314,  315,  317,  318,  316,  304,  305,
      306,  307,  308,  309,  322,  302,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  310,  311,  312,  313,  314,
      315,  317,  318,  200,  786,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  202,  324,  324,  324,  324,  324,
      324,  786,  334,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  324,  324,  324,  324,  324,  324,  200,  334,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  326,  327,
      327,  327,  327,  327,  327,  786,  335,  327,  327,  327,

      327,  327,  327,  327,  327,  327,  259,  147,  336,  256,
      786,  255,  251,  247,  229,  327,  327,  327,  327,  327,
      327,  150,  335,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  152,  150,  336,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  269,  331,  331,  331,  331,  331,
      331,  786,  220,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  218,  213,  100,  147,  147,  337,  338,  340,
      341,  331,  331,  331,  331,  331,  331,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  342,  333,  333,  333,
      333,  333,  333,  337,  338,  340,  341,  343,  344,  345,

      346,  348,  349,  350,  351,  352,  353,  354,  355,  356,
      357,  359,  342,  333,  333,  333,  333,  333,  333,  360,
      362,  363,  366,  343,  344,  345,  346,  348,  349,  350,
      351,  352,  353,  354,  355,  356,  357,  359,  367,  368,
      369,  370,  371,  373,  374,  360,  362,  363,  366,  375,
      377,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      186,  177,  170,  159,  367,  368,  369,  370,  371,  373,
      374,  147,  100,  111,  100,  375,  377,  200,   45,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  202,  200,
       46,  384,  384,  384,  384,  384,  384,  384,  384,  384,

      326,  385,  385,  385,  385,  385,  385,  786,   43,  385,
      385,  385,  385,  385,  385,  385,  385,  385,   94,   54,
       46,   43,  786,   37,  394,   37,  786,  385,  385,  385,
      385,  385,  385,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  396,  387,  387,  387,  387,  387,  387,  388,
      394,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      786,  397,  786,  786,  786,  786,  786,  786,  396,  387,
      387,  387,  387,  387,  387,  150,  786,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  150,  397,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  269,  390,  390,

      390,  390,  390,  390,  786,  398,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  786,  786,  786,  786,  786,
      786,  786,  786,  402,  390,  390,  390,  390,  390,  390,
      150,  398,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  392,  393,  393,  393,  393,  393,  393,  786,  402,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  399,
      403,  404,  405,  406,  407,  400,  408,  401,  393,  393,
      393,  393,  393,  393,  409,  410,  411,  412,  413,  414,
      415,  416,  417,  418,  419,  399,  403,  404,  405,  406,
      407,  400,  408,  401,  420,  421,  422,  423,  424,  425,

      409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
      419,  427,  428,  429,  430,  431,  432,  433,  434,  435,
      420,  421,  422,  423,  424,  425,  439,  786,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  427,  428,  429,
      430,  431,  432,  433,  434,  435,  200,  786,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  200,  786,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  326,  441,
      441,  441,  441,  441,  441,  786,  450,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  441,  441,  441,  441,  441,

      441,  200,  450,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  443,  444,  444,  444,  444,  444,  444,  786,
      451,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      786,  786,  452,  786,  786,  786,  786,  786,  786,  444,
      444,  444,  444,  444,  444,  150,  451,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  269,  150,  452,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  392,  447,
      447,  447,  447,  447,  447,  786,  786,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  786,  786,  786,  786,
      786,  453,  454,  455,  456,  447,  447,  447,  447,  447,

      447,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      457,  449,  449,  449,  449,  449,  449,  453,  454,  455,
      456,  458,  459,  460,  462,  463,  464,  465,  466,  467,
      468,  469,  470,  471,  473,  474,  457,  449,  449,  449,
      449,  449,  449,  475,  476,  477,  478,  458,  459,  460,
      462,  463,  464,  465,  466,  467,  468,  469,  470,  471,
      473,  474,  479,  480,  481,  482,  483,  484,  485,  475,
      476,  477,  478,  486,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  786,  786,  501,  786,  786,  479,  480,
      481,  482,  483,  484,  485,  786,  786,  786,  200,  486,

      383,  383,  383,  383,  383,  383,  383,  383,  383,  326,
      200,  501,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  443,  493,  493,  493,  493,  493,  493,  786,  786,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  493,  493,
      493,  493,  493,  493,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  502,  495,  495,  495,  495,  495,  495,
      786,  504,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  786,  786,  786,  786,  786,  786,  786,  786,  502,
      495,  495,  495,  495,  495,  495,  150,  504,  496,  496,

      496,  496,  496,  496,  496,  496,  496,  392,  497,  497,
      497,  497,  497,  497,  786,  505,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  786,  786,  786,  786,  786,
      786,  786,  506,  507,  497,  497,  497,  497,  497,  497,
      150,  505,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  499,  500,  500,  500,  500,  500,  500,  506,  507,
      508,  509,  510,  511,  512,  513,  514,  515,  516,  517,
      518,  519,  522,  523,  524,  525,  526,  520,  500,  500,
      500,  500,  500,  500,  521,  527,  508,  509,  510,  511,
      512,  513,  514,  515,  516,  517,  518,  519,  522,  523,

      524,  525,  526,  520,  528,  529,  530,  531,  532,  533,
      521,  527,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  786,  786,  786,  786,  786,  786,  786,  786,  546,
      528,  529,  530,  531,  532,  533,  200,  786,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  443,  538,  538,
      538,  538,  538,  538,  786,  546,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  786,  786,  786,  786,  786,
      786,  786,  786,  547,  538,  538,  538,  538,  538,  538,
      200,  786,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  540,  541,  541,  541,  541,  541,  541,  786,  547,

      541,  541,  541,  541,  541,  541,  541,  541,  541,  786,
      786,  548,  786,  786,  786,  786,  786,  786,  541,  541,
      541,  541,  541,  541,  150,  786,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  392,  150,  548,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  499,  543,  543,
      543,  543,  543,  543,  786,  786,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  786,  786,  786,  786,  786,
      549,  550,  551,  552,  543,  543,  543,  543,  543,  543,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  553,
      545,  545,  545,  545,  545,  545,  549,  550,  551,  552,

      554,  555,  556,  557,  558,  559,  560,  561,  562,  563,
      564,  565,  566,  567,  568,  553,  545,  545,  545,  545,
      545,  545,  570,  571,  786,  585,  554,  555,  556,  557,
      558,  559,  560,  561,  562,  563,  564,  565,  566,  567,
      568,  786,  786,  786,  786,  786,  786,  786,  570,  571,
      200,  585,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  443,  200,  786,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  540,  577,  577,  577,  577,  577,  577,
      786,  786,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  786,  786,  786,  786,  786,  786,  586,  786,  786,

      577,  577,  577,  577,  577,  577,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  588,  579,  579,  579,  579,
      579,  579,  786,  586,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  786,  786,  786,  786,  786,  786,  786,
      786,  588,  579,  579,  579,  579,  579,  579,  150,  786,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  499,
      581,  581,  581,  581,  581,  581,  786,  590,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  786,  786,  786,
      786,  786,  786,  786,  591,  592,  581,  581,  581,  581,
      581,  581,  150,  590,  582,  582,  582,  582,  582,  582,

      582,  582,  582,  583,  584,  584,  584,  584,  584,  584,
      591,  592,  593,  594,  595,  596,  597,  599,  600,  601,
      602,  603,  786,  616,  786,  786,  786,  786,  786,  786,
      584,  584,  584,  584,  584,  584,  786,  786,  593,  594,
      595,  596,  597,  599,  600,  601,  602,  603,  200,  616,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  540,
      608,  608,  608,  608,  608,  608,  786,  617,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  786,  786,  786,
      786,  786,  786,  786,  786,  620,  608,  608,  608,  608,
      608,  608,  200,  617,  609,  609,  609,  609,  609,  609,

      609,  609,  609,  610,  611,  611,  611,  611,  611,  611,
      786,  620,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  786,  786,  621,  786,  786,  786,  786,  786,  786,
      611,  611,  611,  611,  611,  611,  150,  786,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  499,  150,  621,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  583,
      613,  613,  613,  613,  613,  613,  786,  786,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  786,  786,  786,
      786,  786,  786,  622,  623,  624,  613,  613,  613,  613,
      613,  613,  614,  614,  614,  614,  614,  614,  614,  614,

      614,  625,  615,  615,  615,  615,  615,  615,  618,  622,
      623,  624,  626,  627,  619,  628,  629,  786,  644,  786,
      786,  786,  786,  786,  786,  786,  786,  625,  615,  615,
      615,  615,  615,  615,  618,  786,  786,  786,  626,  627,
      619,  628,  629,  200,  644,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  540,  200,  786,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  610,  635,  635,  635,
      635,  635,  635,  786,  786,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  786,  786,  786,  786,  786,  786,
      645,  786,  786,  635,  635,  635,  635,  635,  635,  636,

      636,  636,  636,  636,  636,  636,  636,  636,  646,  637,
      637,  637,  637,  637,  637,  786,  645,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  786,  786,  786,  786,
      786,  786,  786,  786,  646,  637,  637,  637,  637,  637,
      637,  150,  786,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  583,  639,  639,  639,  639,  639,  639,  786,
      647,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      786,  786,  786,  786,  786,  786,  786,  648,  649,  639,
      639,  639,  639,  639,  639,  150,  647,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  641,  642,  642,  642,

      642,  642,  642,  648,  649,  650,  651,  652,  654,  786,
      668,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      786,  786,  786,  642,  642,  642,  642,  642,  642,  786,
      786,  650,  651,  652,  654,  200,  668,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  610,  660,  660,  660,
      660,  660,  660,  786,  669,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  786,  786,  786,  786,  786,  786,
      786,  786,  671,  660,  660,  660,  660,  660,  660,  200,
      669,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      662,  663,  663,  663,  663,  663,  663,  150,  671,  329,

      329,  329,  329,  329,  329,  329,  329,  329,  583,  786,
      786,  786,  786,  786,  786,  786,  672,  663,  663,  663,
      663,  663,  663,  150,  786,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  641,  665,  665,  665,  665,  665,
      665,  786,  672,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  786,  786,  786,  786,  786,  673,  674,  675,
      676,  665,  665,  665,  665,  665,  665,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  677,  667,  667,  667,
      667,  667,  667,  673,  674,  675,  676,  200,  786,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  610,  786,

      786,  786,  677,  667,  667,  667,  667,  667,  667,  200,
      786,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      662,  684,  684,  684,  684,  684,  684,  786,  786,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  786,  786,
      786,  786,  786,  786,  692,  786,  786,  684,  684,  684,
      684,  684,  684,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  693,  686,  686,  686,  686,  686,  686,  786,
      692,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      786,  786,  786,  786,  786,  786,  786,  786,  693,  686,
      686,  686,  686,  686,  686,  150,  786,  687,  687,  687,

      687,  687,  687,  687,  687,  687,  641,  688,  688,  688,
      688,  688,  688,  786,  698,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  786,  786,  786,  786,  786,  786,
      786,  699,  700,  688,  688,  688,  688,  688,  688,  150,
      698,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      690,  691,  691,  691,  691,  691,  691,  699,  700,  701,
      786,  714,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  786,  786,  786,  786,  786,  786,  691,  691,  691,
      691,  691,  691,  786,  786,  701,  200,  714,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  662,  708,  708,

      708,  708,  708,  708,  786,  715,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  720,  786,  786,  786,  786,
      786,  786,  786,  721,  708,  708,  708,  708,  708,  708,
      200,  715,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  720,  710,  710,  710,  710,  710,  710,  150,  721,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  641,
      786,  786,  786,  786,  786,  786,  786,  722,  710,  710,
      710,  710,  710,  710,  150,  786,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  690,  712,  712,  712,  712,
      712,  712,  786,  722,  712,  712,  712,  712,  712,  712,

      712,  712,  712,  723,  786,  786,  786,  786,  786,  786,
      786,  786,  712,  712,  712,  712,  712,  712,  786,  786,
      786,  786,  786,  786,  786,  733,  786,  786,  200,  723,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  662,
      200,  786,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  733,  729,  729,  729,  729,  729,  729,  786,  734,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  786,
      786,  786,  786,  786,  786,  786,  786,  739,  729,  729,
      729,  729,  729,  729,  150,  734,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  690,  731,  731,  731,  731,

      731,  731,  786,  739,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  740,  786,  748,  786,  786,  786,  786,
      786,  786,  731,  731,  731,  731,  731,  731,  786,  786,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  740,
      200,  748,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  749,  746,  746,  746,  746,  746,  746,  150,  750,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  690,
      755,  756,  761,  762,  786,  786,  786,  749,  746,  746,
      746,  746,  746,  746,  200,  750,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  786,  755,  756,  761,  762,

       36,   36,   36,   36,   38,   38,   38,   38,   42,   42,
       42,   42,   44,  786,   44,   44,   45,   45,   45,   45,
       95,  786,   95,   95,   99,   99,  145,  145,  146,  146,
      197,  197,  198,  198,  199,  199,  257,  257,  258,  258,
      319,  319,  320,  320,  321,  321,  378,  378,  379,  379,
      380,  380,  437,  437,  438,  438,  487,  487,  488,  488,
      489,  489,  534,  534,  535,  535,  536,  536,  437,  437,
      573,  573,  574,  574,  604,  604,  605,  605,  606,  606,
      630,  630,  631,  631,  632,  632,  535,  535,  656,  656,
      657,  657,  678,  678,  679,  679,  680,  680,  702,  702,

      703,  703,  705,  705,  605,  605,  725,  725,  726,  726,
      741,  741,  742,  742,  743,  743,  751,  751,  752,  752,
      656,  656,  758,  758,  759,  759,  763,  763,  764,  764,
      766,  766,  767,  767,  768,  768,  703,  703,  771,  771,
      773,  773,  774,  774,  775,  775,  778,  778,  781,  781,
      782,  782,  784,  784,  785,  785,    7,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,

      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786
    } ;

static yyconst flex_int16_t yy_chk[3932] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   10,   10,   11,   11,   15,   17,
       28,  870,   15,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   25,

       16,   26,   33,   35,   25,   17,   28,   26,   57,   30,
       34,   59,   25,   30,   34,   60,   16,   39,   39,   16,
       16,   16,   16,   16,   16,   25,   16,   26,   33,   35,
       25,   40,   40,   26,   57,   30,   34,   59,   25,   30,
       34,   60,   16,   19,   19,  866,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   20,   29,
       22,   23,   41,   41,  864,   61,   62,   63,   20,   65,
       22,   23,  860,   29,   23,   20,  854,   22,   23,   66,
       22,   32,   32,   67,   20,   29,   22,   23,   68,   69,
       32,   61,   62,   63,   20,   65,   22,   23,   32,   29,
       23,   20,   21,   22,   23,   66,   22,   21,   71,   67,
       75,   72,   21,   21,   68,   69,   32,   21,   70,   21,
      122,  122,  848,  847,   32,  671,  671,  671,   21,  671,
      844,  840,  695,   21,   71,  695,   70,   72,   21,   21,
       73,   74,   75,   21,   70,   21,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   70,   24,   31,   76,   73,   74,   75,   24,
       31,   77,   31,  839,   79,   80,   24,   82,   83,   84,
       27,   31,   24,   24,   24,   24,   24,   24,   27,   24,
       31,   76,   89,   90,   27,   24,   31,   77,   31,   27,
       79,   80,   24,   82,   83,   84,   27,   31,  835,  831,
      794,  785,  784,  782,   27,  781,   91,  780,   89,   90,
       27,  779,  778,  777,  775,   27,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   91,   49,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   92,  774,  772,  771,  770,  768,  767,
       93,  766,   49,   49,   49,   49,   49,   49,  765,   49,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   92,
       54,   54,   54,   54,   54,   54,   93,   98,   98,   98,
       98,   98,   98,   98,   98,   98,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  105,   54,   54,   54,   54,
       54,   54,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   81,   56,
       85,  105,  106,  107,  108,   81,  110,  111,   81,  112,
      113,  114,   81,  115,  116,  117,  118,   85,   56,   56,

       56,   56,   56,   56,   81,   56,   85,  764,  106,  107,
      108,   81,  110,  111,   81,  112,  113,  114,   81,  115,
      116,  117,  118,   85,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
      103,   96,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  119,  763,  759,  758,  757,  753,  752,  121,  124,
       96,   96,   96,   96,   96,   96,  126,   96,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  119,  100,  100,
      100,  100,  100,  100,  121,  124,  751,  743,  742,  741,
      731,  149,  126,  149,  149,  149,  149,  149,  149,  149,

      149,  149,  127,  128,  100,  100,  100,  100,  100,  100,
      102,  129,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  127,  128,
      727,  726,  725,  724,  719,  718,  717,  129,  716,  708,
      705,  703,  702,  697,  696,  130,  131,  132,  102,  102,
      102,  102,  102,  102,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      123,  130,  131,  132,  133,  135,  123,  136,  137,  138,
      139,  140,  141,  142,  688,  682,  681,  680,  679,  678,
      104,  104,  104,  104,  104,  104,  123,  660,  657,  656,

      133,  135,  123,  136,  137,  138,  139,  140,  141,  142,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  156,  143,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  143,  143,  143,  143,
      143,  143,  156,  143,  148,  655,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  153,  155,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  645,  639,  633,  632,  631,  630,  628,
      155,  158,  148,  148,  148,  148,  148,  148,  151,  159,

      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  155,  158,  616,  608,
      606,  605,  604,  581,  575,  159,  574,  573,  572,  564,
      551,  549,  160,  161,  163,  166,  151,  151,  151,  151,
      151,  151,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  167,  152,  152,  152,  152,  152,  152,  160,  161,
      163,  166,  538,  536,  535,  534,  531,  168,  497,  490,
      489,  488,  487,  452,  169,  441,  438,  167,  152,  152,
      152,  152,  152,  152,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  168,  154,  154,  154,  154,  154,  154,

      169,  170,  173,  174,  175,  176,  177,  178,  180,  179,
      170,  170,  170,  179,  181,  182,  183,  173,  184,  185,
      154,  154,  154,  154,  154,  154,  188,  170,  173,  174,
      175,  176,  177,  178,  180,  179,  170,  170,  170,  179,
      181,  182,  183,  173,  184,  185,  186,  189,  191,  192,
      193,  210,  188,  211,  212,  213,  214,  215,  189,  213,
      216,  186,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  186,  189,  191,  192,  193,  210,  437,  211,
      212,  213,  214,  215,  189,  213,  216,  186,  201,  436,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,

      201,  201,  201,  201,  201,  201,  203,  420,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  406,  390,  381,
      380,  379,  378,  217,  367,  335,  201,  201,  201,  201,
      201,  201,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  219,  202,  202,  202,  202,  202,  202,  204,  217,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  324,
      321,  320,  319,  317,  312,  305,  304,  219,  202,  202,
      202,  202,  202,  202,  205,  301,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  206,  220,  206,  206,  206,  206,  206,  206,

      206,  206,  206,  297,  286,  276,  267,  259,  258,  257,
      256,  222,  205,  205,  205,  205,  205,  205,  207,  220,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  208,  222,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  218,  223,  224,
      225,  226,  227,  228,  218,  229,  207,  207,  207,  207,
      207,  207,  218,  230,  231,  232,  234,  235,  236,  237,
      229,  238,  240,  218,  223,  224,  225,  226,  227,  228,
      218,  229,  241,  242,  243,  244,  245,  246,  218,  230,
      231,  232,  234,  235,  236,  237,  229,  238,  240,  247,

      248,  249,  250,  251,  252,  254,  255,  253,  241,  242,
      243,  244,  245,  246,  260,  239,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  247,  248,  249,  250,  251,
      252,  254,  255,  261,  209,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  262,  271,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  261,  261,  261,  261,  261,  261,  263,  271,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  264,  272,  264,  264,  264,

      264,  264,  264,  264,  264,  264,  199,  198,  273,  197,
      196,  194,  190,  187,  172,  263,  263,  263,  263,  263,
      263,  266,  272,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  268,  273,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  270,  164,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  162,  157,  147,  146,  145,  274,  275,  277,
      279,  268,  268,  268,  268,  268,  268,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  280,  269,  269,  269,
      269,  269,  269,  274,  275,  277,  279,  281,  282,  283,

      285,  287,  288,  289,  290,  291,  292,  293,  294,  295,
      296,  298,  280,  269,  269,  269,  269,  269,  269,  300,
      302,  303,  306,  281,  282,  283,  285,  287,  288,  289,
      290,  291,  292,  293,  294,  295,  296,  298,  307,  308,
      309,  310,  311,  314,  315,  300,  302,  303,  306,  316,
      318,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      134,  125,  120,  109,  307,  308,  309,  310,  311,  314,
      315,   99,   97,   64,   50,  316,  318,  323,   46,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  325,
       45,  325,  325,  325,  325,  325,  325,  325,  325,  325,

      325,  325,  325,  325,  325,  325,  325,  327,   42,  327,
      327,  327,  327,  327,  327,  327,  327,  327,   37,   18,
       14,   12,    7,    4,  334,    3,    0,  325,  325,  325,
      325,  325,  325,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  336,  326,  326,  326,  326,  326,  326,  328,
      334,  328,  328,  328,  328,  328,  328,  328,  328,  328,
        0,  337,    0,    0,    0,    0,    0,    0,  336,  326,
      326,  326,  326,  326,  326,  329,    0,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  330,  337,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,

      330,  330,  330,  330,  331,  338,  331,  331,  331,  331,
      331,  331,  331,  331,  331,    0,    0,    0,    0,    0,
        0,    0,    0,  340,  330,  330,  330,  330,  330,  330,
      332,  338,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  333,  340,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  339,
      343,  344,  345,  346,  347,  339,  348,  339,  332,  332,
      332,  332,  332,  332,  349,  350,  351,  352,  353,  354,
      355,  356,  357,  358,  359,  339,  343,  344,  345,  346,
      347,  339,  348,  339,  360,  361,  362,  363,  364,  365,

      349,  350,  351,  352,  353,  354,  355,  356,  357,  358,
      359,  368,  369,  370,  371,  372,  373,  375,  376,  377,
      360,  361,  362,  363,  364,  365,  382,    0,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  368,  369,  370,
      371,  372,  373,  375,  376,  377,  383,    0,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  384,    0,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  385,  394,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  384,  384,  384,  384,  384,

      384,  386,  394,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  387,
      395,  387,  387,  387,  387,  387,  387,  387,  387,  387,
        0,    0,  396,    0,    0,    0,    0,    0,    0,  386,
      386,  386,  386,  386,  386,  389,  395,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  391,  396,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  393,    0,  393,  393,  393,
      393,  393,  393,  393,  393,  393,    0,    0,    0,    0,
        0,  397,  398,  399,  400,  391,  391,  391,  391,  391,

      391,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      401,  392,  392,  392,  392,  392,  392,  397,  398,  399,
      400,  402,  404,  405,  407,  409,  410,  413,  414,  415,
      416,  417,  418,  419,  421,  422,  401,  392,  392,  392,
      392,  392,  392,  423,  424,  425,  426,  402,  404,  405,
      407,  409,  410,  413,  414,  415,  416,  417,  418,  419,
      421,  422,  427,  428,  429,  430,  431,  432,  433,  423,
      424,  425,  426,  434,  439,  439,  439,  439,  439,  439,
      439,  439,  439,    0,    0,  450,    0,    0,  427,  428,
      429,  430,  431,  432,  433,    0,    0,    0,  440,  434,

      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      442,  450,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  444,    0,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  442,  442,
      442,  442,  442,  442,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  451,  443,  443,  443,  443,  443,  443,
      447,  453,  447,  447,  447,  447,  447,  447,  447,  447,
      447,    0,    0,    0,    0,    0,    0,    0,    0,  451,
      443,  443,  443,  443,  443,  443,  446,  453,  446,  446,

      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  449,  454,  449,  449,  449,  449,
      449,  449,  449,  449,  449,    0,    0,    0,    0,    0,
        0,    0,  455,  456,  446,  446,  446,  446,  446,  446,
      448,  454,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  455,  456,
      457,  458,  460,  461,  462,  463,  465,  466,  467,  468,
      470,  471,  473,  474,  475,  476,  477,  472,  448,  448,
      448,  448,  448,  448,  472,  478,  457,  458,  460,  461,
      462,  463,  465,  466,  467,  468,  470,  471,  473,  474,

      475,  476,  477,  472,  479,  480,  481,  483,  485,  486,
      472,  478,  491,  491,  491,  491,  491,  491,  491,  491,
      491,    0,    0,    0,    0,    0,    0,    0,    0,  501,
      479,  480,  481,  483,  485,  486,  492,    0,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  493,  501,  493,  493,  493,  493,
      493,  493,  493,  493,  493,    0,    0,    0,    0,    0,
        0,    0,    0,  502,  492,  492,  492,  492,  492,  492,
      494,    0,  494,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  495,  502,

      495,  495,  495,  495,  495,  495,  495,  495,  495,    0,
        0,  503,    0,    0,    0,    0,    0,    0,  494,  494,
      494,  494,  494,  494,  496,    0,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  498,  503,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  500,    0,  500,  500,  500,  500,
      500,  500,  500,  500,  500,    0,    0,    0,    0,    0,
      504,  505,  506,  507,  498,  498,  498,  498,  498,  498,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  508,
      499,  499,  499,  499,  499,  499,  504,  505,  506,  507,

      510,  511,  512,  514,  515,  518,  520,  521,  522,  523,
      524,  525,  526,  527,  530,  508,  499,  499,  499,  499,
      499,  499,  532,  533,    0,  547,  510,  511,  512,  514,
      515,  518,  520,  521,  522,  523,  524,  525,  526,  527,
      530,    0,    0,    0,    0,    0,    0,    0,  532,  533,
      537,  547,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  539,    0,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      541,    0,  541,  541,  541,  541,  541,  541,  541,  541,
      541,    0,    0,    0,    0,    0,    0,  548,    0,    0,

      539,  539,  539,  539,  539,  539,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  550,  540,  540,  540,  540,
      540,  540,  543,  548,  543,  543,  543,  543,  543,  543,
      543,  543,  543,    0,    0,    0,    0,    0,    0,    0,
        0,  550,  540,  540,  540,  540,  540,  540,  542,    0,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  545,  553,  545,  545,
      545,  545,  545,  545,  545,  545,  545,    0,    0,    0,
        0,    0,    0,    0,  554,  555,  542,  542,  542,  542,
      542,  542,  544,  553,  544,  544,  544,  544,  544,  544,

      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      554,  555,  559,  560,  561,  562,  563,  565,  566,  568,
      569,  570,    0,  586,    0,    0,    0,    0,    0,    0,
      544,  544,  544,  544,  544,  544,    0,    0,  559,  560,
      561,  562,  563,  565,  566,  568,  569,  570,  576,  586,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  577,  587,  577,  577,
      577,  577,  577,  577,  577,  577,  577,    0,    0,    0,
        0,    0,    0,    0,    0,  592,  576,  576,  576,  576,
      576,  576,  578,  587,  578,  578,  578,  578,  578,  578,

      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      579,  592,  579,  579,  579,  579,  579,  579,  579,  579,
      579,    0,    0,  593,    0,    0,    0,    0,    0,    0,
      578,  578,  578,  578,  578,  578,  580,    0,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  582,  593,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  584,    0,  584,  584,
      584,  584,  584,  584,  584,  584,  584,    0,    0,    0,
        0,    0,    0,  594,  595,  596,  582,  582,  582,  582,
      582,  582,  583,  583,  583,  583,  583,  583,  583,  583,

      583,  598,  583,  583,  583,  583,  583,  583,  589,  594,
      595,  596,  599,  600,  589,  602,  603,    0,  617,    0,
        0,    0,    0,    0,    0,    0,    0,  598,  583,  583,
      583,  583,  583,  583,  589,    0,    0,    0,  599,  600,
      589,  602,  603,  607,  617,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  609,    0,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  611,    0,  611,  611,  611,  611,  611,
      611,  611,  611,  611,    0,    0,    0,    0,    0,    0,
      618,    0,    0,  609,  609,  609,  609,  609,  609,  610,

      610,  610,  610,  610,  610,  610,  610,  610,  619,  610,
      610,  610,  610,  610,  610,  613,  618,  613,  613,  613,
      613,  613,  613,  613,  613,  613,    0,    0,    0,    0,
        0,    0,    0,    0,  619,  610,  610,  610,  610,  610,
      610,  612,    0,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  615,
      621,  615,  615,  615,  615,  615,  615,  615,  615,  615,
        0,    0,    0,    0,    0,    0,    0,  622,  623,  612,
      612,  612,  612,  612,  612,  614,  621,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,

      614,  614,  614,  622,  623,  624,  625,  627,  629,  635,
      643,  635,  635,  635,  635,  635,  635,  635,  635,  635,
        0,    0,    0,  614,  614,  614,  614,  614,  614,    0,
        0,  624,  625,  627,  629,  634,  643,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  637,  644,  637,  637,  637,  637,  637,
      637,  637,  637,  637,    0,    0,    0,    0,    0,    0,
        0,    0,  646,  634,  634,  634,  634,  634,  634,  636,
      644,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  638,  646,  638,

      638,  638,  638,  638,  638,  638,  638,  638,  638,    0,
        0,    0,    0,    0,    0,    0,  648,  636,  636,  636,
      636,  636,  636,  640,    0,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  642,  648,  642,  642,  642,  642,  642,  642,  642,
      642,  642,    0,    0,    0,    0,    0,  649,  650,  651,
      652,  640,  640,  640,  640,  640,  640,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  653,  641,  641,  641,
      641,  641,  641,  649,  650,  651,  652,  659,    0,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,    0,

        0,    0,  653,  641,  641,  641,  641,  641,  641,  661,
        0,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  663,    0,  663,
      663,  663,  663,  663,  663,  663,  663,  663,    0,    0,
        0,    0,    0,    0,  668,    0,    0,  661,  661,  661,
      661,  661,  661,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  669,  662,  662,  662,  662,  662,  662,  665,
      668,  665,  665,  665,  665,  665,  665,  665,  665,  665,
        0,    0,    0,    0,    0,    0,    0,    0,  669,  662,
      662,  662,  662,  662,  662,  664,    0,  664,  664,  664,

      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  667,  672,  667,  667,  667,  667,  667,
      667,  667,  667,  667,    0,    0,    0,    0,    0,    0,
        0,  674,  675,  664,  664,  664,  664,  664,  664,  666,
      672,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  674,  675,  677,
      684,  692,  684,  684,  684,  684,  684,  684,  684,  684,
      684,    0,    0,    0,    0,    0,    0,  666,  666,  666,
      666,  666,  666,    0,    0,  677,  683,  692,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,

      683,  683,  683,  683,  686,  693,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  698,    0,    0,    0,    0,
        0,    0,    0,  699,  683,  683,  683,  683,  683,  683,
      685,  693,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  698,  685,  685,  685,  685,  685,  685,  687,  699,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
        0,    0,    0,    0,    0,    0,    0,  700,  685,  685,
      685,  685,  685,  685,  689,    0,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  691,  700,  691,  691,  691,  691,  691,  691,

      691,  691,  691,  701,    0,    0,    0,    0,    0,    0,
        0,    0,  689,  689,  689,  689,  689,  689,    0,    0,
        0,    0,    0,    0,    0,  714,    0,    0,  707,  701,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      709,    0,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  714,  709,  709,  709,  709,  709,  709,  710,  715,
      710,  710,  710,  710,  710,  710,  710,  710,  710,    0,
        0,    0,    0,    0,    0,    0,    0,  722,  709,  709,
      709,  709,  709,  709,  711,  715,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,

      711,  711,  712,  722,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  723,    0,  733,    0,    0,    0,    0,
        0,    0,  711,  711,  711,  711,  711,  711,  729,    0,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  723,
      728,  733,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  734,  728,  728,  728,  728,  728,  728,  730,  740,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      748,  750,  755,  756,    0,    0,    0,  734,  728,  728,
      728,  728,  728,  728,  745,  740,  745,  745,  745,  745,
      745,  745,  745,  745,  745,    0,  748,  750,  755,  756,

      787,  787,  787,  787,  788,  788,  788,  788,  789,  789,
      789,  789,  790,    0,  790,  790,  791,  791,  791,  791,
      792,    0,  792,  792,  793,  793,  795,  795,  796,  796,
      797,  797,  798,  798,  799,  799,  800,  800,  801,  801,
      802,  802,  803,  803,  804,  804,  805,  805,  806,  806,
      807,  807,  808,  808,  809,  809,  810,  810,  811,  811,
      812,  812,  813,  813,  814,  814,  815,  815,  816,  816,
      817,  817,  818,  818,  819,  819,  820,  820,  821,  821,
      822,  822,  823,  823,  824,  824,  825,  825,  826,  826,
      827,  827,  828,  828,  829,  829,  830,  830,  832,  832,

      833,  833,  834,  834,  836,  836,  837,  837,  838,  838,
      841,  841,  842,  842,  843,  843,  845,  845,  846,  846,
      849,  849,  850,  850,  851,  851,  852,  852,  853,  853,
      855,  855,  856,  856,  857,  857,  858,  858,  859,  859,
      861,  861,  862,  862,  863,  863,  865,  865,  867,  867,
      868,  868,  869,  869,  871,  871,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,

      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[92] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_ClntParser_stype yylval;
}

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 787 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3857 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
{ return ClntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
{ return ClntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
{ return ClntParser::ADDRESS_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
{ return ClntParser::STRING_KEYWORD_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ return ClntParser::ADDRESS_LIST_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ return ClntParser::NAME_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ return ClntParser::IA_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
{ return ClntParser::TA_; }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ return ClntParser::IAID_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 13:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
{ return ClntParser::LOGLEVEL_; }
	YY_BREAK
case 15:
YY_RULE_SETUP
{ return ClntParser::LOGMODE_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ return ClntParser::LOGNAME_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ return ClntParser::LOGCOLORS_; }
	YY_BREAK
case 18:
YY_RULE_SETUP
{ return ClntParser::WORKDIR_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
{ return ClntParser::SCRIPTS_DIR_; }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ return ClntParser::NOTIFY_SCRIPTS_; }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 22:
YY_RULE_SETUP
{ return ClntParser::VALID_TIME_; }
	YY_BREAK
case 23:
YY_RULE_SETUP
{ return ClntParser::REMOTE_AUTOCONF_; }
	YY_BREAK
case 24:
YY_RULE_SETUP
{ return ClntParser::T1_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
{ return ClntParser::T2_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
{ return ClntParser::OPTION_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
{ return ClntParser::DNS_SERVER_;}
	YY_BREAK
case 28:
YY_RULE_SETUP
{ return ClntParser::DOMAIN_;}
	YY_BREAK
case 29:
YY_RULE_SETUP
{ return ClntParser::NTP_SERVER_;}
	YY_BREAK
case 30:
YY_RULE_SETUP
{ return ClntParser::TIME_ZONE_;}
	YY_BREAK
case 31:
YY_RULE_SETUP
{ return ClntParser::SIP_SERVER_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
{ return ClntParser::SIP_DOMAIN_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ return ClntParser::FQDN_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ return ClntParser::FQDN_S_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ return ClntParser::NIS_SERVER_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ return ClntParser::NIS_DOMAIN_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
{ return ClntParser::NISP_SERVER_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ return ClntParser::NISP_DOMAIN_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ return ClntParser::LIFETIME_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ return ClntParser::REJECT_SERVERS_;}
	YY_BREAK
case 41:
YY_RULE_SETUP
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 42:
YY_RULE_SETUP
{ return ClntParser::RAPID_COMMIT_;}
	YY_BREAK
case 43:
YY_RULE_SETUP
{ return ClntParser::RECONFIGURE_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
{ return ClntParser::UNICAST_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
{ return ClntParser::STRICT_RFC_NO_ROUTING_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
{ return ClntParser::PREFIX_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LL_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LLT_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_EN_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ return ClntParser::VENDOR_SPEC_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ return ClntParser::ANON_INF_REQUEST_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ return ClntParser::INSIST_MODE_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ return ClntParser::INACTIVE_MODE_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ return ClntParser::AUTH_ENABLED_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ return ClntParser::AUTH_ACCEPT_METHODS_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ return ClntParser::DIGEST_NONE_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ return ClntParser::DIGEST_PLAIN_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
{ return ClntParser::SKIP_CONFIRM_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
{ return ClntParser::DS_LITE_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ return ClntParser::EXPERIMENTAL_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
{ return ClntParser::ADDR_PARAMS_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
{ return ClntParser::REQUEST_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
;
	YY_BREAK
case 73:
YY_RULE_SETUP
;
	YY_BREAK
case 74:
YY_RULE_SETUP
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
BEGIN(INITIAL);
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 77:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 78:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 79:
YY_RULE_SETUP
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 80:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 81:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 82:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 83:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return ClntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return ClntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
{
    // DUID in 0x00010203 format
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return ClntParser::DUID_;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
{
   // DUID in 00:01:02:03 format
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
        x = (toupper(*pos)-'A' + 10);
      else
        x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))	
        x += (toupper(*(pos+1))-'A' + 10);
      else
        x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }
   
   return ClntParser::DUID_;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
{ 
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::HEXNUMBER_;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
{ 
    if(!sscanf(yytext,"%u",(unsigned int*)&(yylval.ival))) { 
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::INTNUMBER_;
}
	YY_BREAK
case 90:
YY_RULE_SETUP
{return yytext[0];} 
	YY_BREAK
case 91:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 787 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 787 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 786);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

