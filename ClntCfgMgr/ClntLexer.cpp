#line 2 "ClntLexer.cpp"

#line 4 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 56
#define YY_END_OF_BUFFER 57
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[524] =
    {   0,
        1,    1,    0,    0,    0,    0,   57,   55,    2,    1,
        1,   55,   38,   55,   55,   54,   54,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   42,   42,   56,    1,    1,    1,
        0,   50,   38,    0,   50,   40,   39,   54,    0,    0,
       53,    0,   47,   51,   51,   51,   51,   51,   51,   51,
        6,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   17,   18,    7,   51,   51,   51,   51,
       41,   39,   54,    0,    0,   46,   52,   45,   45,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   54,    0,    0,    0,   44,   44,    0,   45,
        0,   45,   51,   51,   51,   51,   26,    8,   51,   51,
       51,    0,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   54,    0,    0,
        0,    0,   44,    0,   44,    0,   45,   45,   45,   45,
       51,   51,   51,   51,    3,   51,   51,   51,   51,    0,
       51,   51,   51,    9,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,    0,    0,
        0,    0,   44,   44,   44,   44,    0,   45,   45,   45,

        0,   45,   51,   51,   21,   51,   51,   51,   51,    0,
        0,   51,   51,   51,   51,   19,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,    0,    0,
        0,   44,   44,   44,    0,   44,    0,    0,   45,   45,
       45,   45,    5,   51,   51,   51,   51,   51,    0,    0,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   35,   51,   51,    0,    0,    0,    0,
        0,   44,   44,   44,   44,    0,   45,   45,   45,    0,
       45,   51,   31,   51,   12,   13,    0,    0,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,

       51,   51,   14,    0,    0,    0,   44,   44,   44,    0,
       44,   49,   45,   45,   45,   45,   51,   11,    0,    0,
       51,   51,    4,   51,   51,   51,   51,   51,   51,   51,
       10,   51,   23,   51,    0,    0,    0,   48,   44,   44,
       44,   44,   45,   45,   45,    0,   45,   20,    0,    0,
       28,   27,   22,   51,   51,   51,   51,   51,   25,   24,
       51,   51,    0,    0,   44,   44,   44,    0,   44,   45,
       45,   45,   45,   30,   29,   51,   51,   51,   51,   51,
       51,   51,    0,    0,    0,   44,   44,   44,   44,   45,
       45,   45,    0,   45,   51,   51,   51,   34,   51,   51,

       51,    0,    0,   44,   44,   44,    0,   44,   45,   45,
       45,   45,   51,   51,   51,   32,   51,   51,    0,    0,
        0,   44,   44,   44,   44,   45,   45,   45,    0,   45,
       51,   51,   51,   51,   16,    0,   43,   46,   44,   44,
       44,    0,   44,   45,   45,   45,   45,   51,   33,   51,
       51,    0,   43,    0,   44,   44,   44,   44,   44,   45,
       45,   45,    0,   45,   51,   51,   51,   43,   46,   44,
        0,   44,   44,   44,   44,   45,   45,   45,   15,   37,
       51,   43,   44,   44,   44,   44,   45,   45,   45,   51,
       44,   44,    0,   44,   44,   45,   51,   44,   44,   45,

       51,   44,   44,    0,   36,   44,   44,   44,   44,    0,
       44,   44,   44,   44,    0,   44,   44,   44,   44,    0,
       44,   44,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   16,   16,   16,   16,   16,   16,   17,    1,    1,
        1,    1,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
        1,    1,    1,    1,    1,    1,   18,   19,   20,   21,

       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[44] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        3,    1,    4,    4,    4,    4,    5,    4,    4,    4,
        4,    4,    4,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[603] =
    {   0,
        0,    0, 1797, 1796,    0,    0, 1803, 1806, 1806,   41,
       43, 1797,    0, 1794,   40,   40, 1759, 1782,   69,   82,
       18, 1764, 1780,   49,   47,   89,   60,   34,   53,   91,
       96,   92,  101,   95, 1806, 1784, 1806,  121,  126,  128,
     1790, 1806,    0, 1787, 1786, 1806,    0,  120, 1775,  133,
     1806,    0,  137, 1774,  141, 1769, 1772,  141,  148,   57,
      149,  150,  153,  155,  152,  163,  154,  157,  164,  165,
      166,  167,  172, 1771, 1770, 1769,  174,  175,   51,  168,
     1806,    0,  195,  208, 1768,  212,    0,  218,  231,  235,
     1749,  185,  179,  188,   99,  242,  243,  189,  254,  249,

      251,  226,  250,  253,  255,  264,  259,  261,  263,  266,
      265,  267,  284,  297, 1766, 1765,  303,  316,  320,  326,
      337,  343,  347,  271,  272,  338, 1764, 1763,  354,  355,
      356, 1769,  357,  358,  362,  360,  365,  372,  273,  364,
      374,  366,  382,  390,  386,  384,  396,  401, 1761, 1760,
     1759,  406,  412,  423,  429,  435,  441,  454,  460,  473,
     1758,  430,  468,  474, 1757,  475,  476,  392,  394,  473,
      478,  480,  482, 1756,  486,  483,  487,  455,  501,  489,
      495,  498,  424,  499,  490,  502,  507,  504, 1755, 1754,
     1753,  526,  532,  545,  551,  564,  515,  570, 1752,  577,

      588,  594,  527,  589, 1751,  298,  518,  594,  559, 1735,
     1744,  595,  596,  597,  599, 1748,  600,  609,  601,  613,
      610,  611,  615,  619,  616,  618,  621,  506, 1747, 1746,
      628,  643, 1745,  650,  661,  667,  673,  679,  685,  698,
      704,  717, 1744,  699,  630,  712,  718,  719, 1730, 1724,
      725,  720,  636,  722,  628,  727,  728,  674,  729,  732,
      733,  662,  734, 1741,  736,  735, 1740, 1739, 1738,  761,
      767,  773,  786,  792,  805,  741,  811, 1737,  818,  829,
      835,  741, 1736,  622, 1735, 1734, 1732, 1710,  747,  830,
      806,  836,  844,  838,  749,  840,  839,  842,  768,  846,

      849,  850, 1731, 1730, 1729,  861,  867, 1728,  874,  885,
      891,  895,  901,  914,  920,  933,  851, 1727, 1717, 1720,
      928,  915, 1724,  934,  935,  936,  896,  937,  939,  938,
     1723,  940, 1722,  941, 1721, 1720, 1719,  961,  967,  980,
      986,  999, 1005, 1718, 1012, 1023, 1029, 1717, 1702, 1697,
     1714, 1713, 1712,  853,  944,  945, 1024, 1007, 1711, 1710,
     1037, 1031, 1709, 1708, 1042, 1707, 1058, 1047, 1071, 1077,
     1090, 1096, 1109, 1806, 1806,  975, 1032, 1104, 1109, 1048,
     1035, 1110, 1706, 1705, 1704, 1136, 1118, 1149, 1124, 1162,
     1703, 1169, 1128, 1182, 1177, 1091,  750, 1702, 1183, 1184,

     1034, 1701, 1700, 1191, 1699, 1208, 1196, 1221, 1227, 1240,
     1246, 1259, 1144, 1198, 1196, 1698, 1261, 1259, 1697, 1696,
     1695, 1271, 1284, 1290, 1303, 1309, 1694, 1316, 1327, 1333,
     1328, 1333, 1334, 1335, 1693, 1692, 1691,    0, 1342, 1690,
     1360, 1348, 1373, 1379, 1392, 1398, 1411, 1072, 1689, 1406,
     1411, 1688, 1687, 1686, 1685, 1433, 1418, 1446, 1426, 1459,
     1684, 1466,    0, 1479, 1350, 1186, 1241, 1683, 1806, 1682,
        0, 1485, 1681, 1492, 1505, 1511, 1524,    0, 1585, 1572,
     1348, 1551, 1544, 1538, 1530, 1543, 1549, 1530,    0, 1419,
     1525, 1519,    0, 1556, 1806,    0, 1492, 1500, 1487, 1806,

     1304, 1480, 1474,    0, 1461, 1454, 1446, 1441, 1418,    0,
     1413, 1393, 1387, 1374,    0, 1352, 1349, 1298, 1285,    0,
     1279, 1266, 1806, 1572, 1577, 1582, 1587, 1592, 1595, 1600,
     1602, 1276, 1273, 1604, 1248, 1606, 1608, 1235, 1610, 1612,
     1210, 1614, 1616, 1170, 1618, 1620, 1144, 1622, 1624, 1141,
     1626, 1628, 1079, 1630, 1632, 1013, 1634, 1636, 1007, 1638,
     1640,  975, 1642, 1644,  964, 1646, 1648,  899, 1650, 1652,
      868,  813, 1654, 1656,  794, 1658, 1660,  681,  578, 1662,
     1664,  530, 1666,  404,  334, 1668, 1670, 1672,  288, 1674,
     1676, 1678,  226, 1680, 1682, 1684,  140, 1686, 1688, 1690,

       72, 1692
    } ;

static yyconst flex_int16_t yy_def[603] =
    {   0,
      523,    1,  524,  524,  525,  525,  523,  523,  523,  523,
      523,  526,  527,  528,  523,  523,   16,  523,  529,  529,
       20,   20,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  523,  523,  523,  523,  523,  523,
      526,  523,  527,  528,  523,  523,  530,  523,  531,   48,
      523,  532,  533,  529,   20,   55,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      523,  530,  523,   83,  534,  535,  532,  523,   88,   55,
       90,  529,  529,  529,  529,  529,  529,  529,  529,  529,

      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  523,  113,  536,  537,  523,  117,  523,  523,
      538,  120,   90,  529,  529,  529,  529,  529,  529,  529,
      529,  523,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  114,  114,  539,
      540,  523,  523,  541,  153,  523,  523,  157,  523,  159,
      123,  529,  529,  529,  529,  529,  529,  529,  529,  523,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  523,  542,
      543,  523,  523,  193,  523,  195,  523,  523,  523,  523,

      544,  200,  529,  529,  529,  529,  529,  529,  529,  523,
      523,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  545,  546,
      523,  523,  523,  523,  547,  234,  523,  523,  523,  239,
      523,  241,  529,  529,  529,  529,  529,  529,  523,  523,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  523,  548,  549,  523,
      523,  523,  272,  523,  274,  523,  523,  523,  523,  550,
      279,  529,  529,  529,  529,  529,  523,  523,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,

      529,  529,  529,  551,  552,  523,  523,  523,  523,  553,
      309,  523,  523,  313,  523,  315,  529,  529,  523,  523,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  523,  554,  555,  523,  523,  339,
      523,  341,  523,  523,  523,  556,  345,  529,  523,  523,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  557,  558,  523,  523,  523,  559,  367,  523,
      370,  523,  372,  523,  523,  529,  529,  529,  529,  529,
      529,  529,  523,  560,  561,  523,  386,  523,  388,  523,
      523,  523,  562,  392,  529,  529,  529,  529,  529,  529,

      529,  563,  564,  523,  523,  523,  565,  406,  523,  409,
      523,  411,  529,  529,  529,  529,  529,  529,  523,  566,
      567,  523,  422,  523,  424,  523,  523,  523,  568,  428,
      529,  529,  529,  529,  529,  569,  570,  571,  523,  523,
      523,  572,  441,  523,  444,  523,  446,  529,  529,  529,
      529,  523,  573,  523,  574,  523,  456,  523,  458,  523,
      523,  523,  575,  462,  529,  529,  529,  576,  523,  577,
      578,  523,  523,  523,  474,  523,  476,  579,  529,  529,
      529,  523,  580,  581,  523,  485,  523,  523,  582,  529,
      523,  583,  584,  523,  523,  585,  529,  586,  587,  523,

      529,  523,  588,  589,  529,  590,  591,  523,  592,  593,
      594,  595,  523,  596,  597,  598,  599,  523,  600,  601,
      602,  523,    0,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,

      523,  523
    } ;

static yyconst flex_int16_t yy_nxt[1850] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   18,   19,   20,   20,
       21,   20,   22,   23,   23,   24,   23,   23,   25,   23,
       26,   27,   28,   23,   29,   30,   31,   32,   33,   34,
       23,   23,   23,   38,   39,   40,   39,   46,   58,   59,
      523,   47,   48,   48,   48,   48,   49,   50,   50,   50,
       50,   50,   50,  523,   51,  523,   61,  523,   69,  523,
       70,   62,   63,  523,   71,  459,  523,   94,   64,  111,
       52,   55,   55,   55,   55,   49,   55,   55,   55,   56,
       55,   55,   68,   57,   55,   55,   55,   55,   49,   55,

       55,   55,   55,   55,   55,  523,   57,  523,  523,   74,
       75,  523,  523,   76,   65,  523,   72,  523,   79,  128,
       66,   77,   78,   38,   39,   67,   80,   73,   40,   39,
       38,   39,   83,   83,   83,   83,   49,   84,   84,   84,
       84,   84,   84,  517,   51,   84,   84,   84,   84,   88,
       88,   88,   88,   90,   90,   90,   90,  523,   90,   90,
       90,   90,   90,   90,  523,  523,  523,   96,  523,  523,
      523,  523,  100,  523,   95,   97,   92,   93,   98,  523,
      523,  523,  523,  523,  523,  103,  101,   99,  523,  107,
      523,  523,  105,  102,  125,  523,  126,  104,  131,  106,

      110,  523,  112,  109,  523,  523,  108,  113,  113,  113,
      113,   49,  114,  114,  114,  114,  114,  114,  127,   51,
      114,  114,  114,  114,  117,  117,  117,  117,  119,  512,
      120,  120,  120,  120,  121,  122,  122,  122,  122,  122,
      122,  523,  523,  122,  122,  122,  122,  123,  123,  123,
      123,  137,  123,  123,  123,  123,  123,  123,  523,  523,
      136,  129,  132,  133,  130,  523,  523,  523,  134,  523,
      523,  523,  138,  141,  135,  523,  140,  523,  139,  523,
      523,  523,  523,  523,  144,  145,  143,  523,  523,  523,
      146,  507,  162,  179,  147,  142,  148,  148,  148,  148,

       49,  149,  149,  149,  149,  149,  149,  163,   51,  149,
      149,  149,  149,  152,  523,  153,  153,  153,  153,  154,
      155,  155,  155,  155,  155,  155,  523,  245,  155,  155,
      155,  155,  156,  156,  156,  156,  119,  500,  157,  157,
      157,  157,  121,  158,  158,  158,  158,  158,  158,  159,
      159,  159,  159,  523,  523,  158,  158,  158,  158,  161,
      161,  161,  161,  164,  161,  161,  161,  161,  161,  161,
      523,  523,  523,  523,  523,  165,  523,  171,  523,  174,
      523,  523,  523,  180,  167,  168,  169,  183,  523,  173,
      523,  166,  172,  177,  181,  175,  176,  178,  523,  185,

      523,  184,  523,  186,  187,  188,  523,  499,  523,  182,
      523,  209,  523,  148,  148,  148,  148,  523,  192,  192,
      192,  192,  152,  208,  193,  193,  193,  193,  154,  194,
      194,  194,  194,  194,  194,  195,  195,  195,  195,  523,
      523,  194,  194,  194,  194,  197,  523,  156,  156,  156,
      156,  119,  223,  198,  198,  198,  198,  121,  199,  199,
      199,  199,  199,  199,  523,  203,  199,  199,  199,  199,
      119,  523,  200,  200,  200,  200,  201,  202,  202,  202,
      202,  202,  202,  523,  523,  202,  202,  202,  202,  204,
      523,  523,  523,  210,  523,  218,  523,  207,  523,  523,

      206,  213,  523,  523,  205,  523,  523,  215,  211,  212,
      219,  523,  214,  216,  523,  523,  227,  523,  523,  222,
      523,  217,  523,  523,  228,  220,  221,  237,  237,  237,
      237,  266,  225,  496,  523,  224,  231,  226,  192,  192,
      192,  192,  152,  523,  232,  232,  232,  232,  154,  233,
      233,  233,  233,  233,  233,  523,  246,  233,  233,  233,
      233,  152,  243,  234,  234,  234,  234,  235,  236,  236,
      236,  236,  236,  236,  523,  523,  236,  236,  236,  236,
      119,  489,  238,  238,  238,  238,  121,  119,  248,  239,
      239,  239,  239,  201,  240,  240,  240,  240,  240,  240,

      241,  241,  241,  241,  523,  523,  240,  240,  240,  240,
      523,  523,  523,  523,  247,  523,  523,  523,  256,  253,
      257,  255,  258,  244,  251,  523,  523,  523,  262,  523,
      252,  523,  523,  254,  523,  523,  261,  523,  523,  259,
      270,  270,  270,  270,  523,  260,  523,  263,  293,  265,
      318,  283,  523,  152,  264,  271,  271,  271,  271,  154,
      152,  291,  272,  272,  272,  272,  235,  273,  273,  273,
      273,  273,  273,  274,  274,  274,  274,  523,  523,  273,
      273,  273,  273,  276,  484,  237,  237,  237,  237,  119,
      523,  238,  238,  238,  238,  119,  300,  277,  277,  277,

      277,  201,  278,  278,  278,  278,  278,  278,  523,  296,
      278,  278,  278,  278,  119,  523,  279,  279,  279,  279,
      280,  281,  281,  281,  281,  281,  281,  523,  523,  281,
      281,  281,  281,  284,  523,  523,  523,  282,  523,  285,
      286,  523,  289,  523,  523,  523,  297,  294,  523,  523,
      523,  523,  523,  312,  312,  312,  312,  523,  290,  295,
      292,  302,  317,  523,  301,  523,  523,  415,  299,  303,
      298,  306,  321,  270,  270,  270,  270,  152,  327,  271,
      271,  271,  271,  152,  523,  307,  307,  307,  307,  235,
      308,  308,  308,  308,  308,  308,  523,  478,  308,  308,

      308,  308,  152,  331,  309,  309,  309,  309,  310,  311,
      311,  311,  311,  311,  311,  523,  459,  311,  311,  311,
      311,  119,  523,  238,  238,  238,  238,  201,  119,  323,
      313,  313,  313,  313,  280,  314,  314,  314,  314,  314,
      314,  315,  315,  315,  315,  523,  523,  314,  314,  314,
      314,  322,  523,  325,  523,  523,  523,  324,  523,  326,
      523,  328,  523,  330,  329,  523,  523,  523,  332,  523,
      333,  455,  334,  338,  338,  338,  338,  152,  376,  271,
      271,  271,  271,  235,  152,  348,  339,  339,  339,  339,
      310,  340,  340,  340,  340,  340,  340,  341,  341,  341,

      341,  523,  447,  340,  340,  340,  340,  312,  312,  312,
      312,  119,  523,  343,  343,  343,  343,  280,  344,  344,
      344,  344,  344,  344,  523,  357,  344,  344,  344,  344,
      119,  523,  345,  345,  345,  345,  346,  347,  347,  347,
      347,  347,  347,  523,  523,  347,  347,  347,  347,  352,
      523,  523,  523,  523,  523,  523,  523,  523,  351,  361,
      523,  523,  362,  354,  356,  377,  378,  425,  353,  359,
      355,  358,  360,  338,  338,  338,  338,  152,  412,  365,
      365,  365,  365,  310,  366,  366,  366,  366,  366,  366,
      523,  523,  366,  366,  366,  366,  152,  395,  367,  367,

      367,  367,  368,  369,  369,  369,  369,  369,  369,  523,
      389,  369,  369,  369,  369,  119,  373,  238,  238,  238,
      238,  280,  119,  523,  370,  370,  370,  370,  346,  371,
      371,  371,  371,  371,  371,  372,  372,  372,  372,  523,
      523,  371,  371,  371,  371,  380,  381,  523,  523,  379,
      523,  523,  152,  523,  271,  271,  271,  271,  310,  388,
      388,  388,  388,  418,  523,  400,  396,  382,  152,  399,
      386,  386,  386,  386,  368,  387,  387,  387,  387,  387,
      387,  523,  342,  387,  387,  387,  387,  119,  523,  390,
      390,  390,  390,  346,  391,  391,  391,  391,  391,  391,

      523,  465,  391,  391,  391,  391,  119,  523,  392,  392,
      392,  392,  393,  394,  394,  394,  394,  394,  394,  523,
      523,  394,  394,  394,  394,  523,  523,  397,  523,  414,
      405,  405,  405,  405,  523,  401,  408,  408,  408,  408,
      411,  411,  411,  411,  316,  398,  152,  275,  404,  404,
      404,  404,  368,  405,  405,  405,  405,  405,  405,  152,
      523,  406,  406,  406,  406,  407,  408,  408,  408,  408,
      408,  408,  119,  242,  238,  238,  238,  238,  346,  119,
      431,  409,  409,  409,  409,  393,  410,  410,  410,  410,
      410,  410,  523,  523,  410,  410,  410,  410,  413,  523,

      523,  152,  523,  271,  271,  271,  271,  368,  424,  424,
      424,  424,  523,  196,  523,  417,  480,  416,  152,  432,
      422,  422,  422,  422,  407,  423,  423,  423,  423,  423,
      423,  523,  433,  423,  423,  423,  423,  119,  160,  426,
      426,  426,  426,  393,  427,  427,  427,  427,  427,  427,
      523,  118,  427,  427,  427,  427,  119,  523,  428,  428,
      428,  428,  429,  430,  430,  430,  430,  430,  430,  523,
      434,  430,  430,  430,  430,  523,   89,  523,  481,   87,
      435,  152,  520,  439,  439,  439,  439,  407,  440,  440,
      440,  440,  440,  440,  523,  520,  440,  440,  440,  440,

      152,  520,  441,  441,  441,  441,  442,  443,  443,  443,
      443,  443,  443,  523,  515,  443,  443,  443,  443,  119,
      523,  238,  238,  238,  238,  393,  119,  505,  444,  444,
      444,  444,  429,  445,  445,  445,  445,  445,  445,  446,
      446,  446,  446,  523,  523,  445,  445,  445,  445,  523,
      523,  523,  152,  448,  271,  271,  271,  271,  407,  450,
      458,  458,  458,  458,  523,  520,  523,  449,  515,  451,
      152,  479,  456,  456,  456,  456,  442,  457,  457,  457,
      457,  457,  457,  523,  490,  457,  457,  457,  457,  119,
      515,  460,  460,  460,  460,  429,  461,  461,  461,  461,

      461,  461,  523,  510,  461,  461,  461,  461,  119,  515,
      462,  462,  462,  462,  463,  464,  464,  464,  464,  464,
      464,  523,  523,  464,  464,  464,  464,  523,  523,  510,
      473,  473,  473,  473,  510,  523,  523,  466,  475,  475,
      475,  475,  467,  152,  497,  472,  472,  472,  472,  442,
      473,  473,  473,  473,  473,  473,  152,  504,  474,  474,
      474,  474,  510,  475,  475,  475,  475,  475,  475,  119,
      504,  238,  238,  238,  238,  429,  119,  523,  476,  476,
      476,  476,  463,  477,  477,  477,  477,  477,  477,  523,
      504,  477,  477,  477,  477,  152,  493,  271,  271,  271,

      271,  442,  152,  504,  485,  485,  485,  485,  523,  486,
      486,  486,  486,  486,  486,  523,  493,  486,  486,  486,
      486,  119,  501,  487,  487,  487,  487,  463,  488,  488,
      488,  488,  488,  488,  523,  493,  488,  488,  488,  488,
      152,  471,  494,  494,  494,  494,  463,  495,  495,  495,
      495,  495,  495,  523,  493,  495,  495,  495,  495,  119,
      471,  238,  238,  238,  238,  463,  152,  454,  271,  271,
      271,  271,   35,   35,   35,   35,   35,   37,   37,   37,
       37,   37,   41,   41,   41,   41,   41,   43,  523,   43,
       43,   43,   44,   44,   44,   44,   44,   54,   54,   54,

       82,  523,   82,   82,   82,   85,   85,  115,  115,  150,
      150,  151,  151,  189,  189,  190,  190,  229,  229,  230,
      230,  267,  267,  268,  268,  304,  304,  305,  305,  335,
      335,  336,  336,  363,  363,  364,  364,  383,  383,  384,
      384,  402,  402,  403,  403,  419,  419,  420,  420,  436,
      436,  437,  437,  452,  452,  453,  453,  468,  468,  470,
      470,  482,  482,  483,  483,  491,  491,  492,  492,  498,
      498,  502,  502,  503,  503,  506,  506,  508,  508,  509,
      509,  511,  511,  513,  513,  514,  514,  516,  516,  518,
      518,  519,  519,  521,  521,  522,  522,  442,  471,  454,

      429,  471,  469,  454,  421,  523,  407,  454,  421,  523,
      393,  438,  421,  385,  523,  368,  421,  385,  523,  346,
       86,  385,  337,  310,  385,  337,  523,  523,  523,  523,
      523,  375,  374,  523,  280,   86,  337,  269,  523,  523,
      523,  350,  349,  523,  235,  337,  269,  523,  320,  319,
      523,  523,  523,  201,   86,  269,  191,  523,  288,  287,
      523,  154,  269,  191,  523,  250,  249,  523,  121,   86,
      191,  116,  523,  523,  523,  191,  116,  523,  170,  523,
      523,   86,  116,  124,  116,  523,  523,  523,  523,   91,
      523,   86,   44,   45,   42,   81,  523,   60,   53,  523,

       45,   42,  523,   36,   36,    7,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523
    } ;

static yyconst flex_int16_t yy_chk[1850] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   10,   10,   11,   11,   15,   21,   21,
       28,   15,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   25,   16,   24,   24,   79,   28,   29,
       29,   24,   25,   60,   29,  601,   27,   60,   25,   79,
       16,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   27,   19,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   26,   20,   30,   32,   31,
       31,   34,   31,   31,   26,   95,   30,   33,   33,   95,
       26,   31,   32,   38,   38,   26,   34,   30,   39,   39,
       40,   40,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,  597,   48,   50,   50,   50,   50,   53,
       53,   53,   53,   55,   55,   55,   55,   58,   55,   55,
       55,   55,   55,   55,   59,   61,   62,   62,   65,   63,
       67,   64,   66,   68,   61,   63,   58,   59,   64,   66,
       69,   70,   71,   72,   80,   69,   67,   65,   73,   73,
       77,   78,   71,   68,   92,   93,   93,   70,   98,   72,

       78,   92,   80,   77,   94,   98,   73,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   94,   83,
       84,   84,   84,   84,   86,   86,   86,   86,   88,  593,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   89,  102,   89,   89,   89,   89,   90,   90,   90,
       90,  102,   90,   90,   90,   90,   90,   90,   96,   97,
      101,   96,   99,   99,   97,  100,  103,  101,  100,  104,
       99,  105,  103,  106,  100,  107,  105,  108,  104,  109,
      106,  111,  110,  112,  109,  110,  108,  124,  125,  139,
      111,  589,  124,  139,  112,  107,  113,  113,  113,  113,

      113,  113,  113,  113,  113,  113,  113,  125,  113,  114,
      114,  114,  114,  117,  206,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  118,  206,  118,  118,
      118,  118,  119,  119,  119,  119,  120,  585,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  121,
      121,  121,  121,  122,  126,  122,  122,  122,  122,  123,
      123,  123,  123,  126,  123,  123,  123,  123,  123,  123,
      129,  130,  131,  133,  134,  129,  136,  133,  135,  135,
      140,  137,  142,  140,  131,  131,  131,  142,  138,  134,
      141,  130,  133,  138,  141,  136,  137,  138,  143,  144,

      146,  143,  145,  145,  146,  147,  144,  584,  168,  141,
      169,  169,  147,  148,  148,  148,  148,  148,  152,  152,
      152,  152,  153,  168,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  154,  154,  154,  154,  155,
      183,  155,  155,  155,  155,  156,  162,  156,  156,  156,
      156,  157,  183,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  158,  162,  158,  158,  158,  158,
      159,  178,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  160,  163,  160,  160,  160,  160,  163,
      164,  166,  167,  170,  171,  178,  172,  167,  173,  176,

      166,  172,  175,  177,  164,  180,  185,  175,  170,  171,
      179,  181,  173,  176,  182,  184,  187,  179,  186,  182,
      188,  177,  228,  187,  188,  180,  181,  197,  197,  197,
      197,  228,  185,  582,  207,  184,  192,  186,  192,  192,
      192,  192,  193,  203,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  194,  207,  194,  194,  194,
      194,  195,  203,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  196,  209,  196,  196,  196,  196,
      198,  579,  198,  198,  198,  198,  198,  200,  209,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,

      201,  201,  201,  201,  202,  204,  202,  202,  202,  202,
      208,  212,  213,  214,  208,  215,  217,  219,  218,  214,
      219,  217,  220,  204,  212,  218,  221,  222,  224,  220,
      213,  223,  225,  215,  226,  224,  223,  227,  284,  221,
      231,  231,  231,  231,  255,  222,  245,  225,  255,  227,
      284,  245,  253,  232,  226,  232,  232,  232,  232,  232,
      234,  253,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  235,  235,  235,  235,  236,  262,  236,
      236,  236,  236,  237,  578,  237,  237,  237,  237,  238,
      258,  238,  238,  238,  238,  239,  262,  239,  239,  239,

      239,  239,  239,  239,  239,  239,  239,  239,  240,  258,
      240,  240,  240,  240,  241,  244,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  242,  246,  242,
      242,  242,  242,  246,  247,  248,  252,  244,  254,  247,
      248,  251,  251,  256,  257,  259,  259,  256,  260,  261,
      263,  266,  265,  276,  276,  276,  276,  282,  252,  257,
      254,  265,  282,  289,  263,  295,  397,  397,  261,  266,
      260,  270,  289,  270,  270,  270,  270,  271,  295,  271,
      271,  271,  271,  272,  299,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  273,  575,  273,  273,

      273,  273,  274,  299,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  275,  572,  275,  275,  275,
      275,  277,  291,  277,  277,  277,  277,  277,  279,  291,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  280,  280,  280,  280,  281,  290,  281,  281,  281,
      281,  290,  292,  293,  294,  297,  296,  292,  298,  294,
      293,  296,  300,  298,  297,  301,  302,  317,  300,  354,
      301,  571,  302,  306,  306,  306,  306,  307,  354,  307,
      307,  307,  307,  307,  309,  317,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  310,  310,  310,

      310,  311,  568,  311,  311,  311,  311,  312,  312,  312,
      312,  313,  327,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  314,  327,  314,  314,  314,  314,
      315,  322,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  316,  321,  316,  316,  316,  316,  322,
      324,  325,  326,  328,  330,  329,  332,  334,  321,  332,
      355,  356,  334,  325,  326,  355,  356,  565,  324,  329,
      325,  328,  330,  338,  338,  338,  338,  339,  562,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      340,  376,  340,  340,  340,  340,  341,  376,  341,  341,

      341,  341,  341,  341,  341,  341,  341,  341,  341,  342,
      559,  342,  342,  342,  342,  343,  556,  343,  343,  343,
      343,  343,  345,  358,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  346,  346,  346,  346,  347,
      357,  347,  347,  347,  347,  358,  361,  362,  377,  357,
      401,  381,  365,  361,  365,  365,  365,  365,  365,  368,
      368,  368,  368,  401,  380,  381,  377,  362,  367,  380,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  369,  553,  369,  369,  369,  369,  370,  448,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,

      371,  448,  371,  371,  371,  371,  372,  396,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  373,
      378,  373,  373,  373,  373,  379,  382,  378,  387,  396,
      387,  387,  387,  387,  389,  382,  389,  389,  389,  389,
      393,  393,  393,  393,  550,  379,  386,  547,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  388,
      413,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  390,  544,  390,  390,  390,  390,  390,  392,
      413,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  394,  395,  394,  394,  394,  394,  395,  399,

      400,  404,  466,  404,  404,  404,  404,  404,  407,  407,
      407,  407,  415,  541,  414,  400,  466,  399,  406,  414,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  408,  415,  408,  408,  408,  408,  409,  538,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      410,  535,  410,  410,  410,  410,  411,  467,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  412,
      417,  412,  412,  412,  412,  418,  533,  417,  467,  532,
      418,  422,  522,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  423,  521,  423,  423,  423,  423,

      424,  519,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  425,  518,  425,  425,  425,  425,  426,
      501,  426,  426,  426,  426,  426,  428,  501,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  429,
      429,  429,  429,  430,  431,  430,  430,  430,  430,  432,
      433,  434,  439,  431,  439,  439,  439,  439,  439,  433,
      442,  442,  442,  442,  481,  517,  465,  432,  516,  434,
      441,  465,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  443,  481,  443,  443,  443,  443,  444,
      514,  444,  444,  444,  444,  444,  444,  444,  444,  444,

      444,  444,  445,  513,  445,  445,  445,  445,  446,  512,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  447,  450,  447,  447,  447,  447,  451,  457,  511,
      457,  457,  457,  457,  509,  490,  459,  450,  459,  459,
      459,  459,  451,  456,  490,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  458,  508,  458,  458,
      458,  458,  507,  458,  458,  458,  458,  458,  458,  460,
      506,  460,  460,  460,  460,  460,  462,  505,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  464,
      503,  464,  464,  464,  464,  472,  502,  472,  472,  472,

      472,  472,  474,  499,  474,  474,  474,  474,  497,  474,
      474,  474,  474,  474,  474,  475,  498,  475,  475,  475,
      475,  476,  497,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  477,  492,  477,  477,  477,  477,
      485,  491,  485,  485,  485,  485,  488,  485,  485,  485,
      485,  485,  485,  486,  484,  486,  486,  486,  486,  487,
      483,  487,  487,  487,  487,  487,  494,  482,  494,  494,
      494,  494,  524,  524,  524,  524,  524,  525,  525,  525,
      525,  525,  526,  526,  526,  526,  526,  527,  480,  527,
      527,  527,  528,  528,  528,  528,  528,  529,  529,  529,

      530,  479,  530,  530,  530,  531,  531,  534,  534,  536,
      536,  537,  537,  539,  539,  540,  540,  542,  542,  543,
      543,  545,  545,  546,  546,  548,  548,  549,  549,  551,
      551,  552,  552,  554,  554,  555,  555,  557,  557,  558,
      558,  560,  560,  561,  561,  563,  563,  564,  564,  566,
      566,  567,  567,  569,  569,  570,  570,  573,  573,  574,
      574,  576,  576,  577,  577,  580,  580,  581,  581,  583,
      583,  586,  586,  587,  587,  588,  588,  590,  590,  591,
      591,  592,  592,  594,  594,  595,  595,  596,  596,  598,
      598,  599,  599,  600,  600,  602,  602,  473,  470,  468,

      461,  455,  454,  453,  452,  449,  440,  437,  436,  435,
      427,  421,  420,  419,  416,  405,  403,  402,  398,  391,
      385,  384,  383,  366,  364,  363,  360,  359,  353,  352,
      351,  350,  349,  348,  344,  337,  336,  335,  333,  331,
      323,  320,  319,  318,  308,  305,  304,  303,  288,  287,
      286,  285,  283,  278,  269,  268,  267,  264,  250,  249,
      243,  233,  230,  229,  216,  211,  210,  205,  199,  191,
      190,  189,  174,  165,  161,  151,  150,  149,  132,  128,
      127,  116,  115,   91,   85,   76,   75,   74,   57,   56,
       54,   49,   45,   44,   41,   36,   23,   22,   18,   17,

       14,   12,    7,    4,    3,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[57] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "ClntLexer.l"
#line 5 "ClntLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 31 "ClntLexer.l"
  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_ClntParser_stype yylval;
}
#line 1050 "ClntLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 44 "ClntLexer.l"


#line 1155 "ClntLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 524 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1806 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 46 "ClntLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 47 "ClntLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "ClntLexer.l"
{ return ClntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "ClntLexer.l"
{ return ClntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "ClntLexer.l"
{ return ClntParser::ADDRES_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "ClntLexer.l"
{ return ClntParser::IA_;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "ClntLexer.l"
{ return ClntParser::TA_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "ClntLexer.l"
{ return ClntParser::IAID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "ClntLexer.l"
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 55 "ClntLexer.l"
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 56 "ClntLexer.l"
{ return ClntParser::LOGLEVEL_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 57 "ClntLexer.l"
{ return ClntParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 58 "ClntLexer.l"
{ return ClntParser::LOGNAME_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 59 "ClntLexer.l"
{ return ClntParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 60 "ClntLexer.l"
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 61 "ClntLexer.l"
{ return ClntParser::VALID_TIME_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 62 "ClntLexer.l"
{ return ClntParser::T1_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 63 "ClntLexer.l"
{ return ClntParser::T2_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 64 "ClntLexer.l"
{ return ClntParser::OPTION_; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 65 "ClntLexer.l"
{ return ClntParser::DNS_SERVER_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 66 "ClntLexer.l"
{ return ClntParser::DOMAIN_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 67 "ClntLexer.l"
{ return ClntParser::NTP_SERVER_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 68 "ClntLexer.l"
{ return ClntParser::TIME_ZONE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 69 "ClntLexer.l"
{ return ClntParser::SIP_SERVER_; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 70 "ClntLexer.l"
{ return ClntParser::SIP_DOMAIN_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 71 "ClntLexer.l"
{ return ClntParser::FQDN_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 72 "ClntLexer.l"
{ return ClntParser::NIS_SERVER_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 73 "ClntLexer.l"
{ return ClntParser::NIS_DOMAIN_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 74 "ClntLexer.l"
{ return ClntParser::NISP_SERVER_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 75 "ClntLexer.l"
{ return ClntParser::NISP_DOMAIN_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 76 "ClntLexer.l"
{ return ClntParser::LIFETIME_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 77 "ClntLexer.l"
{ return ClntParser::REJECT_SERVERS_;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 78 "ClntLexer.l"
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 79 "ClntLexer.l"
{ return ClntParser::RAPID_COMMIT_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 80 "ClntLexer.l"
{ return ClntParser::UNICAST_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 81 "ClntLexer.l"
{ return ClntParser::STRICT_RFC_NO_ROUTING_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 82 "ClntLexer.l"
{ return ClntParser::PD_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 83 "ClntLexer.l"
;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 85 "ClntLexer.l"
;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 87 "ClntLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 93 "ClntLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 94 "ClntLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 95 "ClntLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 43:
YY_RULE_SETUP
#line 102 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 111 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 120 "ClntLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 130 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 139 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 148 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 157 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 166 "ClntLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 173 "ClntLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return ClntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return ClntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 194 "ClntLexer.l"
{
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return ClntParser::DUID_;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 225 "ClntLexer.l"
{ 
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::HEXNUMBER_;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 234 "ClntLexer.l"
{ 
    if(!sscanf(yytext,"%u",(unsigned int*)&(yylval.ival))) { 
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::INTNUMBER_;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 244 "ClntLexer.l"
{return yytext[0];} 
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 248 "ClntLexer.l"
ECHO;
	YY_BREAK
#line 1659 "ClntLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 524 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 524 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 523);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

yyFlexLexer::~yyFlexLexer()
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

	delete [] (yy_state_buf);
	yyfree((yy_start_stack)  );

}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 248 "ClntLexer.l"



