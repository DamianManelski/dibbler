
#line 3 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 83
#define YY_END_OF_BUFFER 84
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[722] =
    {   0,
        1,    1,    0,    0,    0,    0,   84,   82,    2,    1,
        1,   82,   65,   82,   82,   81,   81,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   69,   69,   83,    1,    1,
        1,    0,   77,   65,    0,   77,   67,   66,   81,    0,
        0,   80,    0,   74,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,    7,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   42,   78,   78,
       78,   78,   78,   78,   78,   20,   21,    8,   78,   78,
       78,   78,   78,   68,   66,   81,    0,    0,   73,   79,

       72,   72,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   81,    0,
        0,    0,   71,   71,    0,   72,    0,   72,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   29,    9,
       78,   78,   78,   78,   78,    6,    0,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   81,    0,    0,    0,
        0,   71,    0,   71,    0,   72,   72,   72,   72,   78,

       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,    3,   78,   78,   78,   78,   78,   78,    0,   78,
       78,   78,   10,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,    0,    0,    0,    0,   71,   71,   71,   71,    0,
       72,   72,   72,    0,   72,   78,   78,   78,   78,   78,
       78,   78,   24,   78,   78,   78,   78,   78,   30,   78,
       78,   78,   78,   78,   78,    0,    0,   78,   78,   78,
       78,   78,   22,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,    0,    0,

        0,   71,   71,   71,    0,   71,    0,    0,   72,   72,
       72,   72,   78,    5,   78,   78,   78,   78,   78,   78,
       46,   44,   78,   78,   78,   78,   78,   78,   78,   78,
        0,    0,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   39,   78,
       78,   78,    0,    0,    0,    0,    0,   71,   71,   71,
       71,    0,   72,   72,   72,    0,   72,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   45,   78,   78,   78,
       78,   35,   78,   13,   14,    0,    0,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,

       78,   78,   78,   78,   78,   15,    0,    0,    0,   71,
       71,   71,    0,   71,   76,   72,   72,   72,   72,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   43,   78,
       78,   78,   12,    0,    0,   78,   78,    4,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   11,   78,
       26,   78,   78,    0,    0,    0,   75,   71,   71,   71,
       71,   72,   72,   72,    0,   72,   78,   78,   78,   78,
       78,   78,   78,   23,   78,   78,   78,   78,    0,    0,
       32,   31,   78,   25,   78,   78,   78,   78,   78,   78,
       28,   27,   78,   78,   78,   78,    0,    0,   71,   71,

       71,    0,   71,   72,   72,   72,   72,   62,   78,   78,
       78,   78,   53,   78,   78,   78,   78,   49,   34,   33,
       78,   78,   78,   78,   78,   78,   16,   78,   78,   78,
       47,    0,    0,    0,   71,   71,   71,   71,   72,   72,
       72,    0,   72,   78,   78,   51,   78,   54,   78,   61,
       78,   78,   78,   78,   78,   38,   78,   63,   78,   78,
        0,    0,   71,   71,   71,    0,   71,   72,   72,   72,
       72,   78,   78,   78,   78,   78,   50,   78,   78,   78,
       78,   36,   78,   78,    0,    0,    0,   71,   71,   71,
       71,   72,   72,   72,    0,   72,   78,   78,   78,   78,

       64,   17,   78,   78,   78,   78,   19,    0,   70,   73,
       71,   71,   71,    0,   71,   72,   72,   72,   72,   78,
       78,   55,   78,   78,   37,   78,   78,    0,   70,    0,
       71,   71,   71,   71,   71,   72,   72,   72,    0,   72,
       78,   78,   56,   78,   78,   78,   78,   78,   78,   70,
       73,   71,    0,   71,   71,   71,   71,   72,   72,   72,
       78,   78,   78,   78,   78,   78,   18,   41,   78,   70,
       71,   71,   71,   71,   72,   72,   72,   78,   78,   57,
       58,   59,   60,   78,   71,   71,    0,   71,   71,   72,
       78,   52,   78,   71,   71,   72,   78,   78,   71,   71,

        0,   48,   40,   71,   71,   71,   71,    0,   71,   71,
       71,   71,    0,   71,   71,   71,   71,    0,   71,   71,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
        1,    1,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,    1,    1,    1,    1,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    3,    3,    3,    3,    3,    3,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[786] =
    {   0,
        0,    0, 1003,  993,    0,    0,  983, 3818, 3818,   72,
       74,  965,    0,  962,   71,   71,   34,  946,  134,  183,
      227,  185,  186,  284,   77,   71,  308,   43,  184,   87,
      290,  218,   67,   88,   67, 3818,  954, 3818,  115,  129,
      210,  960, 3818,    0,  957,  956, 3818,    0,  364,  928,
      382, 3818,    0,  408,    0,  450,   83,    0,   75,   74,
      187,  176,  183,  939,  189,  192,  208,  208,  217,  246,
      231,  233,  256,  251,  251,  278,  280,    0,  298,  288,
      296,  289,  292,  312,  456,    0,    0,    0,  309,  336,
      370,  375,  372, 3818,    0,  510,  426,  926,  554,    0,

      598,  470,  640,  416,  456,  463,  467,  937,  472,  479,
      489,  489,  481,  524,  532,  533,  534,  574,  905,  575,
      262,  644,  579,  865,  613,  617,  615,  635,  642,  862,
      636,  634,  646,  651,  654,  649,  655,  649,  696,  579,
      849,  848,  742,  714,  723,  786,  828,  760,  870,  762,
      743,  859,  757,  790,  801,  802,  858,  794,  857,    0,
      823,  824,  832,  832,  867,    0,  855,  884,  867,  882,
      878,  866,  871,  882,  885,  887,  876,  900,  854,  889,
      892,  853,  895,  919,  909,  852,  940,  839,  808,  807,
      960,  971, 1013,  989, 1031, 1057, 1075, 1101, 1119,  806,

      979,  994, 1052, 1118, 1063, 1115, 1107, 1102, 1122, 1115,
     1106,    0, 1117, 1115, 1127, 1132, 1123, 1138, 1136, 1126,
     1138, 1130,    0, 1129, 1151, 1143, 1140, 1135,  817, 1151,
     1152, 1158, 1169, 1172, 1164, 1157, 1152, 1160,  816, 1168,
     1183,  803,  801,  800, 1225, 1236, 1254, 1280, 1298, 1197,
     1324,  799, 1336, 1378, 1354, 1243, 1243, 1285, 1356, 1346,
      810, 1343,    0, 1357, 1364, 1377, 1365, 1378,    0, 1370,
      809, 1380, 1372, 1391, 1383, 1382, 1393, 1386, 1382, 1395,
      808, 1384,    0, 1398,  807, 1408,  778, 1393, 1400, 1396,
     1415, 1426,  777, 1417, 1413, 1422,  776, 1426,  763,  762,

     1450, 1473,  761, 1485, 1527, 1503, 1545, 1571, 1582, 1600,
     1626, 1644, 1491,    0, 1506, 1543, 1589, 1636, 1586,  772,
        0, 1625, 1630, 1642, 1643, 1636, 1646, 1654, 1655, 1656,
     1649, 1645, 1663, 1643, 1657, 1648, 1646, 1665, 1675, 1665,
     1662,  744, 1681, 1661, 1670, 1677, 1679, 1684,    0, 1690,
     1681, 1683,  729,  676,  675, 1722, 1739, 1750, 1768, 1794,
     1812, 1777, 1838,  674, 1850, 1892, 1868, 1702, 1739, 1797,
     1812, 1860, 1859, 1863, 1871, 1872,    0, 1898, 1890,  677,
     1890,    0, 1894,    0,    0, 1906, 1886, 1900, 1905, 1904,
     1909, 1908,  676, 1909, 1902, 1911, 1913, 1916, 1921, 1921,

     1909, 1938, 1940, 1940, 1931,    0,  663,  662, 1964, 1985,
      661, 1997, 2039, 2015, 2024, 2083, 2057, 2127, 2101, 1936,
      633, 2023, 2035, 2090, 2094, 2108, 2118, 2116,    0, 2118,
     2126, 2136,    0, 2132, 2137, 2129, 2126,    0, 2127, 2128,
     2141, 2135, 2135, 2131, 2141, 2137, 2134, 2152,    0, 2177,
        0, 2176, 2177,  620,  619,  618, 2197, 2220, 2238, 2264,
     2282, 2308,  617, 2320, 2362, 2338, 2165, 2193, 2226, 2279,
     2340, 2339, 2336,    0, 2332, 2361, 2358, 2369, 2361, 2358,
        0,    0, 2368,    0, 2369, 2374, 2375, 2372, 2360, 2365,
        0,    0, 2366,  628, 2365, 2383,  615,  613, 2424,  612,

     2436, 2478, 2454, 2522, 2496, 2566, 2540,    0, 2446,  623,
     2474,  622,    0, 2516, 2533, 2536, 2571,    0, 3818, 3818,
     2560, 2571, 2560, 2572, 2560, 2576,    0, 2569, 2569, 2575,
        0,  609,  608,  607, 2622, 2640, 2666, 2684, 2710,  568,
     2722, 2764, 2740, 2580, 2617,    0, 2758,    0, 2643,    0,
     2681, 2726, 2742, 2726, 2763,    0, 2757,    0, 2761, 2765,
      567,  566, 2816,  565, 2828, 2870, 2790, 2914, 2846, 2958,
     2888,  576, 2775, 2848, 2862, 2883,    0, 2885, 2902, 2934,
     2920,    0,  575, 2962,  534,  533,  532, 3005, 2979, 3049,
     3023, 3067,  531, 3093, 3135, 3111, 2951, 2993,  534, 3030,

        0,    0, 3066, 3098, 3108, 3100,    0,  529,  527,    0,
     3156,  526, 3179, 3221, 3197, 3265, 3239, 3309, 3283, 3130,
     3195,    0,  262, 3208,    0, 3258, 3275,  525,  524,  523,
      522, 3353, 3328, 3397, 3371, 3415,  492, 3441,    0, 3459,
     3318, 3356,    0,  268,  491,  497, 3374, 3409, 3438,  488,
     3818,  487,    0, 3495,  486, 3507, 3525, 3551, 3569,    0,
     3460, 3511,  490,  479,  480,  440,    0,    0, 3513,  432,
      431,  430, 3595, 3613, 3639,  429,    0, 3564, 3558,    0,
        0,    0,    0, 3605,  428,  427,    0, 3652, 3818,    0,
     3597,    0, 3615,  426,  397, 3818, 3632, 3646,  388,  387,

        0,    0,    0,  386,  385,  384,  383,    0,  353,  352,
      351,  350,    0,  346,  344,  342,  341,    0,  340,  339,
     3818, 3701, 3705, 3709, 3713, 3717, 3721, 3723,  357, 3725,
     3727, 3729, 3731, 3733, 3735, 3737, 3739, 3741, 3743, 3745,
     3747, 3749, 3751, 3753, 3755, 3757, 3759, 3761, 3763, 3765,
     3767, 3769, 3771, 3773,  356, 3775, 3777,  321, 3779, 3781,
      279,  278, 3783, 3785,  271, 3787,  270,  224, 3789, 3791,
     3793,  220, 3795, 3797, 3799,  212, 3801, 3803, 3805,  143,
     3807, 3809, 3811,   79, 3813
    } ;

static yyconst flex_int16_t yy_def[786] =
    {   0,
      721,    1,  722,  722,  723,  723,  721,  721,  721,  721,
      721,  724,  725,  726,  721,  721,   16,  721,  721,   19,
       19,   19,   19,   19,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  721,  721,  721,  721,  721,
      721,  724,  721,  725,  726,  721,  721,  727,  721,  728,
       49,  721,  729,  721,   24,   24,   56,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  721,  727,  721,   96,  730,  721,  729,

      721,  101,   56,  103,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  721,  139,
      731,  732,  721,  143,  721,  721,  721,  146,  103,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  721,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  140,  140,  733,  734,
      721,  721,  721,  192,  721,  721,  196,  721,  198,  149,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  721,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  721,  735,  736,  721,  721,  246,  721,  248,  721,
      721,  721,  721,  721,  253,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  721,  721,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  737,  738,

      721,  721,  721,  721,  721,  304,  721,  721,  721,  309,
      721,  311,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      721,  721,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  721,  739,  740,  721,  721,  721,  358,  721,
      360,  721,  721,  721,  721,  721,  365,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  721,  721,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,  741,  742,  721,  721,
      721,  721,  721,  412,  721,  721,  416,  721,  418,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  721,  721,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  721,  743,  744,  721,  721,  458,  721,
      460,  721,  721,  721,  721,  464,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  721,  721,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  745,  746,  721,  721,

      721,  721,  501,  721,  504,  721,  506,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  721,  721,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  721,  747,  748,  721,  535,  721,  537,  721,  721,
      721,  721,  541,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      749,  750,  721,  721,  721,  721,  565,  721,  568,  721,
      570,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  721,  751,  752,  721,  588,  721,
      590,  721,  721,  721,  721,  594,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,  753,  754,  755,
      721,  721,  721,  721,  613,  721,  616,  721,  618,   24,
       24,   24,   24,   24,   24,   24,   24,  721,  756,  721,
      757,  721,  632,  721,  634,  721,  721,  721,  758,  638,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  759,
      721,  760,  761,  721,  721,  721,  656,  721,  658,  762,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  721,
      763,  764,  721,  673,  721,  721,  765,   24,   24,   24,
       24,   24,   24,   24,  721,  766,  767,  721,  721,  768,
       24,   24,   24,  769,  770,  721,   24,   24,  721,  771,

      772,   24,   24,  773,  774,  721,  775,  776,  777,  778,
      721,  779,  780,  781,  782,  721,  783,  784,  785,  721,
        0,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721
    } ;

static yyconst flex_int16_t yy_nxt[3893] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   20,   21,   22,   23,   24,   24,
       25,   24,   24,   26,   24,   27,   28,   29,   24,   30,
       31,   32,   33,   34,   35,   24,   24,   24,   19,   20,
       20,   21,   22,   23,   24,   24,   25,   24,   24,   26,
       24,   27,   28,   29,   24,   30,   31,   32,   33,   34,
       35,   24,   24,   24,   39,   40,   41,   40,   47,  721,
       77,  635,   48,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   50,   51,   51,   51,   51,   51,   51,   68,

       52,   71,   90,   93,   69,  721,   77,   72,  104,   80,
       91,  105,   70,   81,   92,  106,   53,   39,   40,   51,
       51,   51,   51,   51,   51,   68,   52,   71,   90,   93,
       69,   41,   40,   72,  104,   80,   91,  105,   70,   81,
       92,  106,   53,   55,   55,  715,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   50,   56,   56,   56,   57,
       56,   56,   55,   58,   55,   55,   55,   55,   55,   59,
       55,   55,   55,   55,   55,   55,   60,   55,   55,   55,
       55,   55,   56,   56,   56,   57,   56,   56,   55,   58,
       55,   55,   55,   55,   55,   59,   55,   55,   55,   55,

       55,   55,   60,   55,   55,   55,   55,   55,   56,   78,
       56,   56,   39,   40,  710,  107,  108,  109,   55,  111,
       55,   55,  705,   79,   67,   55,  696,   55,   55,  112,
       66,   86,   87,  113,   56,   78,   56,   56,  114,  115,
       88,  107,  108,  109,   55,  111,   55,   55,   89,   79,
       67,   55,   56,   55,   55,  112,   66,   61,  118,  113,
      122,  119,   62,   63,  114,  115,   88,   64,  116,   65,
      167,  168,  695,  690,   89,  643,  644,  645,   56,  646,
      677,  672,  663,   61,  118,  664,  117,  119,   62,   63,
      120,  121,  123,   64,  116,   65,   55,   55,   55,   55,

       55,   55,   55,   55,   55,  721,   55,   55,   55,   55,
       55,   55,  117,   55,   82,  124,  120,  121,  123,   55,
       83,  125,   84,  660,  126,  127,   55,  128,  129,  130,
       73,   85,   55,   55,   55,   55,   55,   55,   74,   55,
       82,  124,  131,  134,   75,   55,   83,  125,   84,   76,
      126,  127,   55,  128,  129,  130,   73,   85,  631,  100,
      718,  718,  718,  713,   74,  718,  135,  713,  131,  134,
       75,  713,  708,  713,  708,   76,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   50,   97,   97,   97,   97,
       97,   97,  135,   52,   97,   97,   97,   97,   97,   97,

       97,   97,   97,  136,  708,  701,  708,  701,  701,  687,
      137,  138,   97,   97,   97,   97,   97,   97,  701,   52,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  136,
      102,  102,  102,  102,  102,  102,  137,  138,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  687,  687,  653,
      639,  687,  653,  630,  683,  150,  102,  102,  102,  102,
      102,  102,  103,  103,  103,  103,  103,  103,  103,  103,
      103,   50,  103,  103,  103,  103,  103,  103,  132,   58,
      721,  150,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  151,  152,  153,  155,  133,  682,  681,  103,  103,

      103,  103,  103,  103,  132,   58,  680,  614,  653,  630,
      666,  665,  156,  595,  157,  158,  159,  151,  152,  153,
      155,  133,  139,  139,  139,  139,  139,  139,  139,  139,
      139,   50,  140,  140,  140,  140,  140,  140,  156,   52,
      157,  158,  159,  653,  651,  630,  587,  566,  630,  160,
      587,  622,  542,  610,  587,  534,  161,  162,  140,  140,
      140,  140,  140,  140,  163,   52,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  160,  144,  144,  144,  144,
      144,  144,  161,  162,  606,  597,  502,  587,  534,  465,
      163,  188,  188,  188,  188,  188,  188,  188,  188,  188,

      164,  166,  144,  144,  144,  144,  144,  144,  145,  171,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  147,
      148,  148,  148,  148,  148,  148,  164,  166,   99,  534,
      456,  547,  545,  413,  534,  171,  456,  529,  366,   99,
      456,  355,  468,  173,  174,  175,  148,  148,  148,  148,
      148,  148,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  176,  149,  149,  149,  149,  149,  149,  169,  173,
      174,  175,  177,  179,  170,  180,  181,  182,  183,  184,
      185,  186,  305,  456,  355,  441,  431,  176,  149,  149,
      149,  149,  149,  149,  169,  254,   99,  355,  177,  179,

      170,  180,  181,  182,  183,  184,  185,  186,  187,  187,
      187,  187,  187,  187,  187,  187,  187,   50,  188,  188,
      188,  188,  188,  188,  721,   52,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  188,  188,  188,  188,  188,  188,
      244,   52,  191,  397,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  193,  194,  194,  194,  194,  194,  194,
      721,  201,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  376,  193,  355,  244,  351,  347,  341,  202,  203,
      194,  194,  194,  194,  194,  194,  145,  205,  196,  196,

      196,  196,  196,  196,  196,  196,  196,  147,  197,  197,
      197,  197,  197,  197,  202,  203,  339,  336,  326,  318,
      147,   99,  244,  205,  142,  296,  286,  721,  244,  142,
      206,  207,  208,  210,  197,  197,  197,  197,  197,  197,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  212,
      199,  199,  199,  199,  199,  199,  206,  207,  208,  210,
      721,  241,  237,  234,  219,  213,  211,  209,  204,   99,
      142,  178,  214,  215,  172,  212,  199,  199,  199,  199,
      199,  199,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  213,  200,  200,  200,  200,  200,  200,  214,  215,

      216,  217,  218,  222,  223,  224,  225,  226,  227,  220,
      229,  230,  228,  231,  165,  235,  236,  238,  200,  200,
      200,  200,  200,  200,  221,  232,  216,  217,  218,  222,
      223,  224,  225,  226,  227,  220,  229,  230,  228,  231,
      233,  235,  236,  238,  239,  240,  154,  142,  110,   99,
      221,  232,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  721,   45,   46,   43,   94,  233,   54,   46,   43,
      239,  240,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  191,  721,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  193,  247,  247,  247,  247,  247,  247,  721,

       37,  247,  247,  247,  247,  247,  247,  247,  247,  247,
       37,  721,  721,  721,  721,  721,  256,  721,  721,  247,
      247,  247,  247,  247,  247,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  257,  249,  249,  249,  249,  249,
      249,  250,  256,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  721,  721,  721,  721,  721,  721,  721,  721,
      257,  249,  249,  249,  249,  249,  249,  145,  721,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  147,  252,
      252,  252,  252,  252,  252,  721,  258,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  721,  721,  721,  721,

      721,  721,  721,  721,  261,  252,  252,  252,  252,  252,
      252,  145,  258,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  254,  255,  255,  255,  255,  255,  255,  721,
      261,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      259,  262,  263,  264,  260,  268,  269,  270,  265,  255,
      255,  255,  255,  255,  255,  266,  271,  272,  273,  274,
      275,  276,  278,  267,  279,  280,  259,  262,  263,  264,
      260,  268,  269,  270,  265,  281,  277,  282,  283,  284,
      285,  266,  271,  272,  273,  274,  275,  276,  278,  267,
      279,  280,  287,  288,  289,  290,  291,  292,  293,  294,

      295,  281,  277,  282,  283,  284,  285,  297,  298,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  287,  288,
      289,  290,  291,  292,  293,  294,  295,  721,  721,  721,
      721,  721,  721,  297,  298,  301,  721,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  191,  721,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  193,  303,  303,
      303,  303,  303,  303,  721,  313,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  721,  721,  721,  721,  721,
      721,  721,  721,  314,  303,  303,  303,  303,  303,  303,
      191,  313,  304,  304,  304,  304,  304,  304,  304,  304,

      304,  305,  306,  306,  306,  306,  306,  306,  721,  314,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  721,
      721,  315,  721,  721,  721,  721,  721,  721,  306,  306,
      306,  306,  306,  306,  145,  721,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  147,  145,  315,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  254,  310,  310,
      310,  310,  310,  310,  721,  721,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  721,  721,  721,  721,  721,
      316,  317,  319,  320,  310,  310,  310,  310,  310,  310,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  321,

      312,  312,  312,  312,  312,  312,  316,  317,  319,  320,
      322,  323,  324,  325,  327,  328,  329,  330,  331,  332,
      333,  334,  335,  337,  338,  321,  312,  312,  312,  312,
      312,  312,  340,  342,  343,  344,  322,  323,  324,  325,
      327,  328,  329,  330,  331,  332,  333,  334,  335,  337,
      338,  345,  346,  348,  349,  350,  352,  721,  340,  342,
      343,  344,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  721,  721,  721,  721,  721,  721,  345,  346,  348,
      349,  350,  352,  191,  721,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  193,  191,  721,  358,  358,  358,

      358,  358,  358,  358,  358,  358,  305,  359,  359,  359,
      359,  359,  359,  721,  721,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  721,  721,  721,  721,  721,  721,
      368,  721,  721,  359,  359,  359,  359,  359,  359,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  369,  361,
      361,  361,  361,  361,  361,  362,  368,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  721,  370,  721,  721,
      721,  721,  721,  721,  369,  361,  361,  361,  361,  361,
      361,  145,  721,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  145,  370,  363,  363,  363,  363,  363,  363,

      363,  363,  363,  254,  364,  364,  364,  364,  364,  364,
      721,  371,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  721,  721,  721,  721,  721,  721,  721,  721,  375,
      364,  364,  364,  364,  364,  364,  145,  371,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  366,  367,  367,
      367,  367,  367,  367,  721,  375,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  372,  377,  378,  379,  380,
      381,  373,  382,  374,  367,  367,  367,  367,  367,  367,
      383,  384,  385,  386,  387,  388,  389,  390,  391,  392,
      393,  372,  377,  378,  379,  380,  381,  373,  382,  374,

      394,  395,  396,  398,  399,  400,  383,  384,  385,  386,
      387,  388,  389,  390,  391,  392,  393,  401,  402,  403,
      404,  405,  406,  721,  420,  721,  394,  395,  396,  398,
      399,  400,  409,  721,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  401,  402,  403,  404,  405,  406,  191,
      420,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      191,  721,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  305,  411,  411,  411,  411,  411,  411,  721,  421,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  411,  411,

      411,  411,  411,  411,  191,  421,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  413,  414,  414,  414,  414,
      414,  414,  721,  422,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  721,  721,  423,  721,  721,  721,  721,
      721,  721,  414,  414,  414,  414,  414,  414,  145,  422,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  254,
      145,  423,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  366,  417,  417,  417,  417,  417,  417,  721,  721,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  721,
      721,  721,  721,  721,  424,  425,  426,  427,  417,  417,

      417,  417,  417,  417,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  428,  419,  419,  419,  419,  419,  419,
      424,  425,  426,  427,  429,  430,  432,  433,  434,  435,
      436,  437,  438,  439,  440,  442,  443,  444,  445,  428,
      419,  419,  419,  419,  419,  419,  446,  447,  448,  449,
      429,  430,  432,  433,  434,  435,  436,  437,  438,  439,
      440,  442,  443,  444,  445,  450,  451,  452,  453,  721,
      467,  721,  446,  447,  448,  449,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  721,  721,  721,  721,  721,
      721,  450,  451,  452,  453,  191,  467,  357,  357,  357,

      357,  357,  357,  357,  357,  357,  305,  191,  721,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  413,  459,
      459,  459,  459,  459,  459,  721,  721,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  459,  459,  459,  459,  459,
      459,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      469,  461,  461,  461,  461,  461,  461,  721,  470,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  721,  721,
      721,  721,  721,  721,  721,  721,  469,  461,  461,  461,
      461,  461,  461,  145,  470,  462,  462,  462,  462,  462,

      462,  462,  462,  462,  366,  463,  463,  463,  463,  463,
      463,  721,  471,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  721,  721,  721,  721,  721,  721,  721,  472,
      473,  463,  463,  463,  463,  463,  463,  145,  471,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  465,  466,
      466,  466,  466,  466,  466,  472,  473,  474,  475,  476,
      477,  478,  479,  480,  481,  482,  483,  484,  487,  488,
      489,  490,  491,  492,  485,  466,  466,  466,  466,  466,
      466,  486,  493,  474,  475,  476,  477,  478,  479,  480,
      481,  482,  483,  484,  487,  488,  489,  490,  491,  492,

      485,  494,  495,  496,  721,  508,  721,  486,  493,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  721,  721,
      721,  721,  721,  509,  721,  721,  721,  494,  495,  496,
      191,  508,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  413,  500,  500,  500,  500,  500,  500,  721,  509,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  721,
      721,  721,  721,  721,  721,  721,  721,  510,  500,  500,
      500,  500,  500,  500,  191,  721,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  502,  503,  503,  503,  503,
      503,  503,  721,  510,  503,  503,  503,  503,  503,  503,

      503,  503,  503,  721,  721,  511,  721,  721,  721,  721,
      721,  721,  503,  503,  503,  503,  503,  503,  145,  721,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  366,
      145,  511,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  465,  505,  505,  505,  505,  505,  505,  721,  721,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  721,
      721,  721,  721,  721,  512,  513,  514,  515,  505,  505,
      505,  505,  505,  505,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  516,  507,  507,  507,  507,  507,  507,
      512,  513,  514,  515,  517,  518,  519,  520,  521,  522,

      523,  524,  525,  526,  527,  528,  530,  531,  721,  516,
      507,  507,  507,  507,  507,  507,  721,  721,  721,  721,
      517,  518,  519,  520,  521,  522,  523,  524,  525,  526,
      527,  528,  530,  531,  191,  721,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  413,  191,  721,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  502,  536,  536,
      536,  536,  536,  536,  721,  721,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  721,  721,  721,  721,  721,
      721,  544,  721,  721,  536,  536,  536,  536,  536,  536,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  546,

      538,  538,  538,  538,  538,  538,  721,  544,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  721,  721,  721,
      721,  721,  721,  721,  721,  546,  538,  538,  538,  538,
      538,  538,  145,  721,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  465,  540,  540,  540,  540,  540,  540,
      721,  548,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  721,  721,  721,  721,  721,  721,  721,  549,  550,
      540,  540,  540,  540,  540,  540,  145,  548,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  542,  543,  543,
      543,  543,  543,  543,  549,  550,  551,  552,  553,  554,

      555,  556,  557,  558,  559,  560,  721,  572,  721,  721,
      721,  721,  721,  721,  543,  543,  543,  543,  543,  543,
      721,  721,  551,  552,  553,  554,  555,  556,  557,  558,
      559,  560,  191,  572,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  502,  564,  564,  564,  564,  564,  564,
      721,  573,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  721,  721,  721,  721,  721,  721,  721,  721,  576,
      564,  564,  564,  564,  564,  564,  191,  573,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  566,  567,  567,
      567,  567,  567,  567,  721,  576,  567,  567,  567,  567,

      567,  567,  567,  567,  567,  721,  721,  577,  721,  721,
      721,  721,  721,  721,  567,  567,  567,  567,  567,  567,
      145,  721,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  465,  145,  577,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  542,  569,  569,  569,  569,  569,  569,
      721,  721,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  721,  721,  721,  721,  721,  721,  578,  579,  580,
      569,  569,  569,  569,  569,  569,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  581,  571,  571,  571,  571,
      571,  571,  574,  578,  579,  580,  582,  583,  575,  584,

      721,  598,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  581,  571,  571,  571,  571,  571,  571,  574,  721,
      721,  721,  582,  583,  575,  584,  191,  598,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  502,  191,  721,
      588,  588,  588,  588,  588,  588,  588,  588,  588,  566,
      589,  589,  589,  589,  589,  589,  721,  721,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  721,  721,  721,
      721,  721,  721,  599,  721,  721,  589,  589,  589,  589,
      589,  589,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  600,  591,  591,  591,  591,  591,  591,  721,  599,

      596,  596,  596,  596,  596,  596,  596,  596,  596,  721,
      721,  721,  721,  721,  721,  721,  601,  600,  591,  591,
      591,  591,  591,  591,  145,  602,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  542,  593,  593,  593,  593,
      593,  593,  601,  603,  721,  721,  721,  721,  721,  721,
      721,  602,  721,  721,  721,  721,  721,  721,  721,  721,
      604,  605,  593,  593,  593,  593,  593,  593,  145,  603,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  595,
      596,  596,  596,  596,  596,  596,  604,  605,  607,  721,
      620,  612,  612,  612,  612,  612,  612,  612,  612,  612,

      721,  721,  721,  721,  721,  721,  596,  596,  596,  596,
      596,  596,  721,  721,  607,  191,  620,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  566,  612,  612,  612,
      612,  612,  612,  721,  621,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  721,  721,  721,  721,  721,  721,
      721,  721,  623,  612,  612,  612,  612,  612,  612,  191,
      621,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      614,  615,  615,  615,  615,  615,  615,  145,  623,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  542,  721,
      721,  721,  721,  721,  721,  721,  624,  615,  615,  615,

      615,  615,  615,  145,  721,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  595,  617,  617,  617,  617,  617,
      617,  721,  624,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  721,  721,  721,  721,  721,  625,  626,  627,
      721,  617,  617,  617,  617,  617,  617,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  641,  619,  619,  619,
      619,  619,  619,  625,  626,  627,  191,  721,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  566,  721,  721,
      721,  721,  641,  619,  619,  619,  619,  619,  619,  191,
      721,  632,  632,  632,  632,  632,  632,  632,  632,  632,

      614,  633,  633,  633,  633,  633,  633,  721,  721,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  721,  721,
      721,  721,  721,  721,  642,  721,  721,  633,  633,  633,
      633,  633,  633,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  647,  635,  635,  635,  635,  635,  635,  721,
      642,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      721,  721,  721,  721,  721,  721,  721,  721,  647,  635,
      635,  635,  635,  635,  635,  145,  721,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  595,  637,  637,  637,
      637,  637,  637,  721,  648,  640,  640,  640,  640,  640,

      640,  640,  640,  640,  721,  721,  721,  721,  721,  721,
      721,  649,  721,  637,  637,  637,  637,  637,  637,  145,
      648,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      639,  640,  640,  640,  640,  640,  640,  649,  721,  721,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  721,
      721,  721,  721,  721,  721,  721,  661,  640,  640,  640,
      640,  640,  640,  191,  721,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  614,  655,  655,  655,  655,  655,
      655,  721,  661,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  662,  721,  721,  721,  721,  721,  721,  721,

      667,  655,  655,  655,  655,  655,  655,  191,  721,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  662,  657,
      657,  657,  657,  657,  657,  145,  667,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  595,  721,  721,  721,
      721,  721,  721,  721,  668,  657,  657,  657,  657,  657,
      657,  145,  721,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  639,  659,  659,  659,  659,  659,  659,  721,
      668,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      669,  721,  721,  721,  721,  721,  721,  721,  721,  659,
      659,  659,  659,  659,  659,  721,  721,  721,  721,  721,

      721,  721,  678,  721,  721,  191,  669,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  614,  191,  721,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  678,  674,
      674,  674,  674,  674,  674,  721,  679,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  721,  721,  721,  721,
      721,  721,  721,  721,  684,  674,  674,  674,  674,  674,
      674,  145,  679,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  639,  676,  676,  676,  676,  676,  676,  721,
      684,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      691,  721,  721,  721,  721,  721,  721,  721,  692,  676,

      676,  676,  676,  676,  676,  191,  721,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  691,  689,  689,  689,
      689,  689,  689,  721,  692,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  721,  693,  721,  697,  721,  721,
      721,  721,  721,  689,  689,  689,  689,  689,  689,  145,
      698,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      639,  693,  191,  697,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  702,  703,  721,  698,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  702,

      703,   36,   36,   36,   36,   38,   38,   38,   38,   42,
       42,   42,   42,   44,  721,   44,   44,   45,   45,   45,
       45,   95,  721,   95,   95,   98,   98,  141,  141,  189,
      189,  190,  190,  242,  242,  243,  243,  299,  299,  300,
      300,  353,  353,  354,  354,  407,  407,  408,  408,  454,
      454,  455,  455,  497,  497,  498,  498,  532,  532,  533,
      533,  561,  561,  562,  562,  585,  585,  586,  586,  608,
      608,  609,  609,  628,  628,  629,  629,  650,  650,  652,
      652,  670,  670,  671,  671,  685,  685,  686,  686,  694,
      694,  699,  699,  700,  700,  704,  704,  706,  706,  707,

      707,  709,  709,  711,  711,  712,  712,  714,  714,  716,
      716,  717,  717,  719,  719,  720,  720,    7,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721

    } ;

static yyconst flex_int16_t yy_chk[3893] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   10,   10,   11,   11,   15,   17,
       28,  784,   15,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   25,

       16,   26,   33,   35,   25,   17,   28,   26,   57,   30,
       34,   59,   25,   30,   34,   60,   16,   39,   39,   16,
       16,   16,   16,   16,   16,   25,   16,   26,   33,   35,
       25,   40,   40,   26,   57,   30,   34,   59,   25,   30,
       34,   60,   16,   19,   19,  780,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   20,   29,
       22,   23,   41,   41,  776,   61,   62,   63,   20,   65,
       22,   23,  772,   29,   23,   20,  768,   22,   23,   66,
       22,   32,   32,   67,   20,   29,   22,   23,   68,   69,
       32,   61,   62,   63,   20,   65,   22,   23,   32,   29,
       23,   20,   21,   22,   23,   66,   22,   21,   71,   67,
       75,   72,   21,   21,   68,   69,   32,   21,   70,   21,
      121,  121,  767,  765,   32,  623,  623,  623,   21,  623,
      762,  761,  644,   21,   71,  644,   70,   72,   21,   21,
       73,   74,   75,   21,   70,   21,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   70,   24,   31,   76,   73,   74,   75,   24,
       31,   77,   31,  758,   79,   80,   24,   81,   82,   83,
       27,   31,   24,   24,   24,   24,   24,   24,   27,   24,
       31,   76,   84,   89,   27,   24,   31,   77,   31,   27,
       79,   80,   24,   81,   82,   83,   27,   31,  755,  729,
      720,  719,  717,  716,   27,  715,   90,  714,   84,   89,
       27,  712,  711,  710,  709,   27,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   90,   49,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   91,  707,  706,  705,  704,  700,  699,
       92,   93,   49,   49,   49,   49,   49,   49,  695,   49,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   91,
       54,   54,   54,   54,   54,   54,   92,   93,   97,   97,
       97,   97,   97,   97,   97,   97,   97,  694,  686,  685,
      676,  672,  671,  670,  666,  104,   54,   54,   54,   54,
       54,   54,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   85,   56,
      102,  104,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  105,  106,  107,  109,   85,  665,  664,   56,   56,

       56,   56,   56,   56,   85,   56,  663,  655,  652,  650,
      646,  645,  110,  637,  111,  112,  113,  105,  106,  107,
      109,   85,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,  110,   96,
      111,  112,  113,  631,  630,  629,  628,  612,  609,  114,
      608,  599,  593,  587,  586,  585,  115,  116,   96,   96,
       96,   96,   96,   96,  117,   96,   99,   99,   99,   99,
       99,   99,   99,   99,   99,  114,   99,   99,   99,   99,
       99,   99,  115,  116,  583,  572,  564,  562,  561,  540,
      117,  140,  140,  140,  140,  140,  140,  140,  140,  140,

      118,  120,   99,   99,   99,   99,   99,   99,  101,  123,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  118,  120,  534,  533,
      532,  512,  510,  500,  498,  123,  497,  494,  463,  456,
      455,  454,  421,  125,  126,  127,  101,  101,  101,  101,
      101,  101,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  128,  103,  103,  103,  103,  103,  103,  122,  125,
      126,  127,  129,  131,  122,  132,  133,  134,  135,  136,
      137,  138,  411,  408,  407,  393,  380,  128,  103,  103,
      103,  103,  103,  103,  122,  364,  355,  354,  129,  131,

      122,  132,  133,  134,  135,  136,  137,  138,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  144,  139,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  139,  139,  139,  139,  139,  139,
      353,  139,  143,  342,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      148,  150,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  320,  303,  300,  299,  297,  293,  287,  150,  151,
      143,  143,  143,  143,  143,  143,  146,  153,  146,  146,

      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  150,  151,  285,  281,  271,  261,
      252,  244,  243,  153,  242,  239,  229,  200,  190,  189,
      154,  155,  156,  158,  146,  146,  146,  146,  146,  146,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  161,
      147,  147,  147,  147,  147,  147,  154,  155,  156,  158,
      188,  186,  182,  179,  167,  162,  159,  157,  152,  142,
      141,  130,  163,  164,  124,  161,  147,  147,  147,  147,
      147,  147,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  162,  149,  149,  149,  149,  149,  149,  163,  164,

      165,  165,  165,  169,  170,  171,  172,  173,  174,  168,
      175,  176,  174,  177,  119,  180,  181,  183,  149,  149,
      149,  149,  149,  149,  168,  178,  165,  165,  165,  169,
      170,  171,  172,  173,  174,  168,  175,  176,  174,  177,
      178,  180,  181,  183,  184,  185,  108,   98,   64,   50,
      168,  178,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,   46,   45,   42,   37,  178,   18,   14,   12,
      184,  185,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  192,    7,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  194,

        4,  194,  194,  194,  194,  194,  194,  194,  194,  194,
        3,    0,    0,    0,    0,    0,  201,    0,    0,  192,
      192,  192,  192,  192,  192,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  202,  193,  193,  193,  193,  193,
      193,  195,  201,  195,  195,  195,  195,  195,  195,  195,
      195,  195,    0,    0,    0,    0,    0,    0,    0,    0,
      202,  193,  193,  193,  193,  193,  193,  196,    0,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  197,  203,  197,  197,  197,
      197,  197,  197,  197,  197,  197,    0,    0,    0,    0,

        0,    0,    0,    0,  205,  196,  196,  196,  196,  196,
      196,  198,  203,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  199,
      205,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      204,  206,  207,  208,  204,  210,  211,  213,  209,  198,
      198,  198,  198,  198,  198,  209,  214,  215,  216,  217,
      218,  219,  220,  209,  221,  222,  204,  206,  207,  208,
      204,  210,  211,  213,  209,  224,  219,  225,  226,  227,
      228,  209,  214,  215,  216,  217,  218,  219,  220,  209,
      221,  222,  230,  231,  232,  233,  234,  235,  236,  237,

      238,  224,  219,  225,  226,  227,  228,  240,  241,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  230,  231,
      232,  233,  234,  235,  236,  237,  238,    0,    0,    0,
        0,    0,    0,  240,  241,  245,    0,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  246,    0,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  247,  256,  247,  247,  247,  247,
      247,  247,  247,  247,  247,    0,    0,    0,    0,    0,
        0,    0,    0,  257,  246,  246,  246,  246,  246,  246,
      248,  256,  248,  248,  248,  248,  248,  248,  248,  248,

      248,  248,  248,  248,  248,  248,  248,  248,  249,  257,
      249,  249,  249,  249,  249,  249,  249,  249,  249,    0,
        0,  258,    0,    0,    0,    0,    0,    0,  248,  248,
      248,  248,  248,  248,  251,    0,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  253,  258,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  255,    0,  255,  255,  255,  255,
      255,  255,  255,  255,  255,    0,    0,    0,    0,    0,
      259,  260,  262,  264,  253,  253,  253,  253,  253,  253,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  265,

      254,  254,  254,  254,  254,  254,  259,  260,  262,  264,
      266,  267,  268,  270,  272,  273,  274,  275,  276,  277,
      278,  279,  280,  282,  284,  265,  254,  254,  254,  254,
      254,  254,  286,  288,  289,  290,  266,  267,  268,  270,
      272,  273,  274,  275,  276,  277,  278,  279,  280,  282,
      284,  291,  292,  294,  295,  296,  298,    0,  286,  288,
      289,  290,  301,  301,  301,  301,  301,  301,  301,  301,
      301,    0,    0,    0,    0,    0,    0,  291,  292,  294,
      295,  296,  298,  302,    0,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  304,    0,  304,  304,  304,

      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  306,    0,  306,  306,  306,  306,  306,
      306,  306,  306,  306,    0,    0,    0,    0,    0,    0,
      313,    0,    0,  304,  304,  304,  304,  304,  304,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  315,  305,
      305,  305,  305,  305,  305,  307,  313,  307,  307,  307,
      307,  307,  307,  307,  307,  307,    0,  316,    0,    0,
        0,    0,    0,    0,  315,  305,  305,  305,  305,  305,
      305,  308,    0,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  309,  316,  309,  309,  309,  309,  309,  309,

      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      310,  317,  310,  310,  310,  310,  310,  310,  310,  310,
      310,    0,    0,    0,    0,    0,    0,    0,    0,  319,
      309,  309,  309,  309,  309,  309,  311,  317,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  312,  319,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  318,  322,  323,  324,  325,
      326,  318,  327,  318,  311,  311,  311,  311,  311,  311,
      328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
      338,  318,  322,  323,  324,  325,  326,  318,  327,  318,

      339,  340,  341,  343,  344,  345,  328,  329,  330,  331,
      332,  333,  334,  335,  336,  337,  338,  346,  347,  348,
      350,  351,  352,    0,  368,    0,  339,  340,  341,  343,
      344,  345,  356,    0,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  346,  347,  348,  350,  351,  352,  357,
      368,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      358,    0,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  359,  369,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  358,  358,

      358,  358,  358,  358,  360,  369,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  361,  370,  361,  361,  361,  361,  361,  361,
      361,  361,  361,    0,    0,  371,    0,    0,    0,    0,
        0,    0,  360,  360,  360,  360,  360,  360,  363,  370,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      365,  371,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  367,    0,
      367,  367,  367,  367,  367,  367,  367,  367,  367,    0,
        0,    0,    0,    0,  372,  373,  374,  375,  365,  365,

      365,  365,  365,  365,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  376,  366,  366,  366,  366,  366,  366,
      372,  373,  374,  375,  378,  379,  381,  383,  386,  387,
      388,  389,  390,  391,  392,  394,  395,  396,  397,  376,
      366,  366,  366,  366,  366,  366,  398,  399,  400,  401,
      378,  379,  381,  383,  386,  387,  388,  389,  390,  391,
      392,  394,  395,  396,  397,  402,  403,  404,  405,    0,
      420,    0,  398,  399,  400,  401,  409,  409,  409,  409,
      409,  409,  409,  409,  409,    0,    0,    0,    0,    0,
        0,  402,  403,  404,  405,  410,  420,  410,  410,  410,

      410,  410,  410,  410,  410,  410,  410,  412,    0,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  414,    0,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  412,  412,  412,  412,  412,
      412,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      422,  413,  413,  413,  413,  413,  413,  417,  423,  417,
      417,  417,  417,  417,  417,  417,  417,  417,    0,    0,
        0,    0,    0,    0,    0,    0,  422,  413,  413,  413,
      413,  413,  413,  416,  423,  416,  416,  416,  416,  416,

      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  419,  424,  419,  419,  419,  419,  419,  419,  419,
      419,  419,    0,    0,    0,    0,    0,    0,    0,  425,
      426,  416,  416,  416,  416,  416,  416,  418,  424,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  425,  426,  427,  428,  430,
      431,  432,  434,  435,  436,  437,  439,  440,  442,  443,
      444,  445,  446,  447,  441,  418,  418,  418,  418,  418,
      418,  441,  448,  427,  428,  430,  431,  432,  434,  435,
      436,  437,  439,  440,  442,  443,  444,  445,  446,  447,

      441,  450,  452,  453,    0,  467,    0,  441,  448,  457,
      457,  457,  457,  457,  457,  457,  457,  457,    0,    0,
        0,    0,    0,  468,    0,    0,    0,  450,  452,  453,
      458,  467,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  459,  468,
      459,  459,  459,  459,  459,  459,  459,  459,  459,    0,
        0,    0,    0,    0,    0,    0,    0,  469,  458,  458,
      458,  458,  458,  458,  460,    0,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  461,  469,  461,  461,  461,  461,  461,  461,

      461,  461,  461,    0,    0,  470,    0,    0,    0,    0,
        0,    0,  460,  460,  460,  460,  460,  460,  462,    0,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      464,  470,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  466,    0,
      466,  466,  466,  466,  466,  466,  466,  466,  466,    0,
        0,    0,    0,    0,  471,  472,  473,  475,  464,  464,
      464,  464,  464,  464,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  476,  465,  465,  465,  465,  465,  465,
      471,  472,  473,  475,  477,  478,  479,  480,  483,  485,

      486,  487,  488,  489,  490,  493,  495,  496,    0,  476,
      465,  465,  465,  465,  465,  465,    0,    0,    0,    0,
      477,  478,  479,  480,  483,  485,  486,  487,  488,  489,
      490,  493,  495,  496,  499,    0,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  501,    0,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  503,    0,  503,  503,  503,  503,
      503,  503,  503,  503,  503,    0,    0,    0,    0,    0,
        0,  509,    0,    0,  501,  501,  501,  501,  501,  501,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  511,

      502,  502,  502,  502,  502,  502,  505,  509,  505,  505,
      505,  505,  505,  505,  505,  505,  505,    0,    0,    0,
        0,    0,    0,    0,    0,  511,  502,  502,  502,  502,
      502,  502,  504,    0,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      507,  514,  507,  507,  507,  507,  507,  507,  507,  507,
      507,    0,    0,    0,    0,    0,    0,    0,  515,  516,
      504,  504,  504,  504,  504,  504,  506,  514,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  515,  516,  517,  521,  522,  523,

      524,  525,  526,  528,  529,  530,    0,  544,    0,    0,
        0,    0,    0,    0,  506,  506,  506,  506,  506,  506,
        0,    0,  517,  521,  522,  523,  524,  525,  526,  528,
      529,  530,  535,  544,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      536,  545,  536,  536,  536,  536,  536,  536,  536,  536,
      536,    0,    0,    0,    0,    0,    0,    0,    0,  549,
      535,  535,  535,  535,  535,  535,  537,  545,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  538,  549,  538,  538,  538,  538,

      538,  538,  538,  538,  538,    0,    0,  551,    0,    0,
        0,    0,    0,    0,  537,  537,  537,  537,  537,  537,
      539,    0,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  541,  551,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      543,    0,  543,  543,  543,  543,  543,  543,  543,  543,
      543,    0,    0,    0,    0,    0,    0,  552,  553,  554,
      541,  541,  541,  541,  541,  541,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  555,  542,  542,  542,  542,
      542,  542,  547,  552,  553,  554,  557,  559,  547,  560,

      567,  573,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  555,  542,  542,  542,  542,  542,  542,  547,    0,
        0,    0,  557,  559,  547,  560,  563,  573,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  565,    0,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  569,    0,  569,  569,
      569,  569,  569,  569,  569,  569,  569,    0,    0,    0,
        0,    0,    0,  574,    0,    0,  565,  565,  565,  565,
      565,  565,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  575,  566,  566,  566,  566,  566,  566,  571,  574,

      571,  571,  571,  571,  571,  571,  571,  571,  571,    0,
        0,    0,    0,    0,    0,    0,  576,  575,  566,  566,
      566,  566,  566,  566,  568,  578,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  576,  579,    0,    0,    0,    0,    0,    0,
        0,  578,    0,    0,    0,    0,    0,    0,    0,    0,
      580,  581,  568,  568,  568,  568,  568,  568,  570,  579,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  580,  581,  584,  589,
      597,  589,  589,  589,  589,  589,  589,  589,  589,  589,

        0,    0,    0,    0,    0,    0,  570,  570,  570,  570,
      570,  570,    0,    0,  584,  588,  597,  588,  588,  588,
      588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      588,  588,  588,  591,  598,  591,  591,  591,  591,  591,
      591,  591,  591,  591,    0,    0,    0,    0,    0,    0,
        0,    0,  600,  588,  588,  588,  588,  588,  588,  590,
      598,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  592,  600,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  592,    0,
        0,    0,    0,    0,    0,    0,  603,  590,  590,  590,

      590,  590,  590,  594,    0,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  596,  603,  596,  596,  596,  596,  596,  596,  596,
      596,  596,    0,    0,    0,    0,    0,  604,  605,  606,
        0,  594,  594,  594,  594,  594,  594,  595,  595,  595,
      595,  595,  595,  595,  595,  595,  620,  595,  595,  595,
      595,  595,  595,  604,  605,  606,  611,    0,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,    0,    0,
        0,    0,  620,  595,  595,  595,  595,  595,  595,  613,
        0,  613,  613,  613,  613,  613,  613,  613,  613,  613,

      613,  613,  613,  613,  613,  613,  613,  615,    0,  615,
      615,  615,  615,  615,  615,  615,  615,  615,    0,    0,
        0,    0,    0,    0,  621,    0,    0,  613,  613,  613,
      613,  613,  613,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  624,  614,  614,  614,  614,  614,  614,  617,
      621,  617,  617,  617,  617,  617,  617,  617,  617,  617,
        0,    0,    0,    0,    0,    0,    0,    0,  624,  614,
      614,  614,  614,  614,  614,  616,    0,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  619,  626,  619,  619,  619,  619,  619,

      619,  619,  619,  619,    0,    0,    0,    0,    0,    0,
        0,  627,    0,  616,  616,  616,  616,  616,  616,  618,
      626,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  627,  633,    0,
      633,  633,  633,  633,  633,  633,  633,  633,  633,    0,
        0,    0,    0,    0,    0,    0,  641,  618,  618,  618,
      618,  618,  618,  632,    0,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  635,  641,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  642,    0,    0,    0,    0,    0,    0,    0,

      647,  632,  632,  632,  632,  632,  632,  634,    0,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  642,  634,
      634,  634,  634,  634,  634,  636,  647,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,    0,    0,    0,
        0,    0,    0,    0,  648,  634,  634,  634,  634,  634,
      634,  638,    0,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  640,
      648,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      649,    0,    0,    0,    0,    0,    0,    0,    0,  638,
      638,  638,  638,  638,  638,    0,    0,    0,    0,    0,

        0,    0,  661,    0,    0,  654,  649,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  656,    0,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  661,  656,
      656,  656,  656,  656,  656,  657,  662,  657,  657,  657,
      657,  657,  657,  657,  657,  657,    0,    0,    0,    0,
        0,    0,    0,    0,  669,  656,  656,  656,  656,  656,
      656,  658,  662,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  659,
      669,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      678,    0,    0,    0,    0,    0,    0,    0,  679,  658,

      658,  658,  658,  658,  658,  673,    0,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  678,  673,  673,  673,
      673,  673,  673,  674,  679,  674,  674,  674,  674,  674,
      674,  674,  674,  674,    0,  684,    0,  691,    0,    0,
        0,    0,    0,  673,  673,  673,  673,  673,  673,  675,
      693,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  684,  688,  691,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  697,  698,    0,  693,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  697,

      698,  722,  722,  722,  722,  723,  723,  723,  723,  724,
      724,  724,  724,  725,    0,  725,  725,  726,  726,  726,
      726,  727,    0,  727,  727,  728,  728,  730,  730,  731,
      731,  732,  732,  733,  733,  734,  734,  735,  735,  736,
      736,  737,  737,  738,  738,  739,  739,  740,  740,  741,
      741,  742,  742,  743,  743,  744,  744,  745,  745,  746,
      746,  747,  747,  748,  748,  749,  749,  750,  750,  751,
      751,  752,  752,  753,  753,  754,  754,  756,  756,  757,
      757,  759,  759,  760,  760,  763,  763,  764,  764,  766,
      766,  769,  769,  770,  770,  771,  771,  773,  773,  774,

      774,  775,  775,  777,  777,  778,  778,  779,  779,  781,
      781,  782,  782,  783,  783,  785,  785,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721

    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[84] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
    0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_ClntParser_stype yylval;
}

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 722 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3818 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
{ return ClntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
{ return ClntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
{ return ClntParser::ADDRES_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
{ return ClntParser::NAME_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ return ClntParser::IA_;}
	YY_BREAK
case 8:
YY_RULE_SETUP
{ return ClntParser::TA_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ return ClntParser::IAID_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
{ return ClntParser::LOGLEVEL_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
{ return ClntParser::LOGMODE_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
{ return ClntParser::LOGNAME_; }
	YY_BREAK
case 15:
YY_RULE_SETUP
{ return ClntParser::WORKDIR_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
{ return ClntParser::SCRIPTS_DIR_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ return ClntParser::NOTIFY_SCRIPTS_; }
	YY_BREAK
case 18:
YY_RULE_SETUP
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 19:
YY_RULE_SETUP
{ return ClntParser::VALID_TIME_; }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ return ClntParser::T1_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
{ return ClntParser::T2_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
{ return ClntParser::OPTION_; }
	YY_BREAK
case 23:
YY_RULE_SETUP
{ return ClntParser::DNS_SERVER_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
{ return ClntParser::DOMAIN_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
{ return ClntParser::NTP_SERVER_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
{ return ClntParser::TIME_ZONE_;}
	YY_BREAK
case 27:
YY_RULE_SETUP
{ return ClntParser::SIP_SERVER_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
{ return ClntParser::SIP_DOMAIN_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
{ return ClntParser::FQDN_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
{ return ClntParser::FQDN_S_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
{ return ClntParser::NIS_SERVER_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
{ return ClntParser::NIS_DOMAIN_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ return ClntParser::NISP_SERVER_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ return ClntParser::NISP_DOMAIN_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ return ClntParser::LIFETIME_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ return ClntParser::REJECT_SERVERS_;}
	YY_BREAK
case 37:
YY_RULE_SETUP
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 38:
YY_RULE_SETUP
{ return ClntParser::RAPID_COMMIT_;}
	YY_BREAK
case 39:
YY_RULE_SETUP
{ return ClntParser::UNICAST_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ return ClntParser::STRICT_RFC_NO_ROUTING_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LL_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LLT_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_EN_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
{ return ClntParser::VENDOR_SPEC_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
{ return ClntParser::ANON_INF_REQUEST_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ return ClntParser::INSIST_MODE_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ return ClntParser::INACTIVE_MODE_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ return ClntParser::AUTH_ENABLED_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ return ClntParser::AUTH_ACCEPT_METHODS_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ return ClntParser::DIGEST_NONE_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ return ClntParser::DIGEST_PLAIN_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ return ClntParser::EXPERIMENTAL_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ return ClntParser::ADDR_PARAMS_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ return ClntParser::SKIP_CONFIRM_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ return ClntParser::DS_LITE_TUNNEL_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
;
	YY_BREAK
case 66:
YY_RULE_SETUP
;
	YY_BREAK
case 67:
YY_RULE_SETUP
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
BEGIN(INITIAL);
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 70:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 71:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 72:
YY_RULE_SETUP
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 73:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 74:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 75:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 76:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return ClntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return ClntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
{
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return ClntParser::DUID_;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
{ 
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::HEXNUMBER_;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
{ 
    if(!sscanf(yytext,"%u",(unsigned int*)&(yylval.ival))) { 
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::INTNUMBER_;
}
	YY_BREAK
case 82:
YY_RULE_SETUP
{return yytext[0];} 
	YY_BREAK
case 83:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 722 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 722 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 721);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

