
#line 3 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 92
#define YY_END_OF_BUFFER 93
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[790] =
    {   0,
        1,    1,    0,    0,    0,    0,   93,   91,    2,    1,
        1,   91,   73,   91,   91,   90,   90,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   77,   77,   92,    1,    1,
        1,    0,   85,   73,    0,   85,   75,   74,   90,    0,
        0,   89,    0,   82,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,    9,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   48,   86,   86,
       86,   86,   86,   86,   86,   86,   24,   25,   10,   86,
       86,   86,   86,   86,   76,   74,   90,    0,    0,    0,

       81,   87,   80,   80,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   90,    0,    0,    0,    0,   79,
       79,    0,   80,    0,   80,   86,   86,   69,   86,   86,
       86,   86,   86,   86,   86,   33,   11,   86,   86,   86,
       86,   86,    8,    0,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   90,    0,   88,

        0,    0,    0,   79,    0,   79,    0,   80,   80,   80,
       80,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,    3,   86,   86,   86,   86,   86,   86,   86,
        0,   86,   86,   86,   12,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,    0,    0,
        0,    0,    0,   79,   79,   79,   79,    0,   80,   80,
       80,    0,   80,   86,   86,   86,   86,   86,   86,   86,
       28,   86,   86,   86,   86,   34,   86,   86,   86,   86,
       86,   86,   86,    0,    0,   86,   86,   86,   86,   86,

       26,   86,   49,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,    6,   86,   86,   86,   86,
       86,    0,    0,    0,    0,   79,   79,   79,    0,   79,
        0,    0,   80,   80,   80,   80,   86,    5,   86,   86,
       86,   86,   86,   53,   51,   86,   86,   86,   86,   86,
       86,   86,   86,   86,    0,    0,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   72,   40,   86,
       86,   86,   86,   86,   86,   86,   45,   86,   86,   86,
       88,    0,    0,    0,    0,    0,   79,   79,   79,   79,
        0,   80,   80,   80,    0,   80,   86,   86,   86,   86,

       86,   86,   86,   86,   86,   52,   86,   86,   86,   86,
       39,   86,   86,   15,   16,    0,    0,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   18,    0,    0,
        0,    0,   79,   79,   79,    0,   79,   84,   80,   80,
       80,   80,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   50,   86,   86,   86,   86,   14,    0,    0,   86,
       86,    4,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   13,   86,   30,   86,   86,    0,
        0,    0,    0,   83,   79,   79,   79,   79,   80,   80,

       80,    0,   80,   86,   86,   86,   86,   86,   86,   86,
       86,   27,   86,   86,   86,   17,    0,    0,   36,   35,
       86,   29,   86,   86,   86,   86,   86,   86,   86,   86,
       32,   31,   86,   86,   86,   86,   88,    0,    0,   79,
       79,   79,    0,   79,   80,   80,   80,   80,   71,   86,
       86,   86,   86,   86,   60,   86,   86,   86,   56,   38,
       37,   86,   86,   86,   86,   86,   86,   86,   86,   19,
       86,   86,   86,   54,    0,    0,    0,    0,   79,   79,
       79,   79,   80,   80,   80,    0,   80,    7,   86,   86,
       58,   86,   61,   70,   86,   86,   86,   86,   86,   43,

       86,   86,   86,   68,   86,   86,    0,    0,    0,   79,
       79,   79,    0,   79,   80,   80,   80,   80,   86,   86,
       86,   86,   57,   86,   86,   86,   86,   86,   41,   86,
       86,   86,   88,    0,    0,    0,   79,   79,   79,   79,
       80,   80,   80,    0,   80,   86,   86,   86,   86,   20,
       86,   86,   86,   86,   86,   86,   22,    0,    0,   78,
       81,   79,   79,   79,    0,   79,   80,   80,   80,   80,
       86,   86,   62,   86,   86,   42,   86,   86,   23,   86,
        0,    0,   78,    0,   79,   79,   79,   79,   79,   80,
       80,   80,    0,   80,   86,   86,   63,   86,   86,   86,

       86,   86,   86,   86,   88,   78,   81,   79,    0,   79,
       79,   79,   79,   80,   80,   80,   86,   86,   86,   86,
       86,   86,   21,   47,   86,   86,    0,   78,   79,   79,
       79,   79,   80,   80,   80,   86,   86,   64,   65,   66,
       67,   44,   86,    0,   79,   79,    0,   79,   79,   80,
       86,   59,   86,   88,   79,   79,   80,   86,   86,    0,
       79,   79,    0,   55,   46,   78,   79,   79,   78,   79,
       79,    0,    0,   79,   79,    0,   79,   79,    0,   88,
       79,   79,    0,   79,   79,    0,   79,   79,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
        1,    1,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,    1,    1,    1,    1,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    3,    3,    3,    3,    3,    3,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[875] =
    {   0,
        0,    0, 1565, 1564,    0,    0, 1571, 3864, 3864,   72,
       74, 1565,    0, 1561,   71,   71,   34, 1512,  134,  183,
      227,  187,  239,  296,   77,   71,  194,   43,  188,  197,
      300,  313,   67,   87,   67, 3864, 1521, 3864,  108,  112,
      115, 1526, 3864,    0, 1523, 1522, 3864,    0,  358, 1506,
      376, 3864,    0,  402,    0,  444,   83,  170,    0,  179,
      176,  192,  181,  226,  235,  230,  243,  240,  249,  320,
      245,  245,  241,  236,  295,  242,  287,    0,  303,  296,
      448,  295,  300,  303,  367,  452,    0,    0,    0,  370,
      375,  379,  414,  437, 3864,    0,  506, 1505,  427, 1504,

      550,    0,  594,  524,  636,  438,  439,  445,  452,  457,
     1506,  462,  460,  461,  453,  464,  466,  521,  522,  527,
     1488,  534,  123,  640,  566, 1476,  567,  578,  609,  604,
      615,  632,  627,  630,  642, 1472,  636,  633,  645,  650,
      653,  648,  654,  648,  695,  575, 1459, 1458, 1457,  741,
      713,  722,  785,  827,  759,  869,  761,    0,  742, 1461,
      756,  789,  800, 1460,  792, 1459,    0,  806,  807,  824,
      830,  874,    0, 1458,  874,  864,  879,  875,  863,  868,
      880,  880,  876,  888,  872,  889,  886,  886,  918, 1364,
      918,  921, 1363,  924,  922,  912, 1362,  947, 1349, 1348,

     1338, 1300,  973,  984, 1026, 1002, 1044, 1070, 1088, 1114,
     1132, 1299,  913,  911,  918,  931,  913,  929,  994, 1127,
     1017, 1059,    0, 1087, 1113, 1125, 1120, 1131, 1122, 1137,
     1136, 1133, 1144, 1136,    0, 1126, 1147, 1139, 1136, 1132,
     1310, 1151, 1147, 1163, 1150, 1156, 1151, 1157, 1179, 1182,
     1174, 1167, 1181, 1163, 1171, 1309, 1173, 1188, 1296, 1295,
     1293, 1292, 1210, 1230, 1248, 1274, 1292, 1257, 1318, 1220,
     1330, 1372, 1348, 1237, 1263, 1279, 1350, 1340, 1212, 1337,
        0, 1342, 1360, 1358, 1371,    0, 1363, 1107, 1373, 1375,
     1366, 1385, 1377, 1376, 1387, 1380, 1376, 1389, 1106, 1378,

        0, 1392, 1105, 1402, 1397, 1104, 1103, 1387, 1401, 1405,
     1412, 1408, 1412, 1423, 1102,    0, 1414, 1410, 1423, 1101,
     1427, 1088, 1060, 1051, 1446, 1474, 1050, 1486, 1528, 1504,
     1546, 1572, 1583, 1601, 1627, 1645, 1492, 1061, 1507, 1544,
     1590, 1637, 1587,    0, 1626, 1631, 1643, 1644, 1637, 1647,
     1645, 1656, 1657, 1658, 1651, 1647, 1665, 1645, 1659, 1650,
     1648, 1676, 1677, 1667, 1676, 1665, 1684,    0,    0, 1060,
     1696, 1676, 1685, 1681, 1683, 1688,    0, 1694, 1685, 1687,
     1047, 1046, 1045, 1044, 1723, 1743, 1754, 1772, 1798, 1816,
     1781, 1842, 1010, 1854, 1896, 1872, 1761, 1794, 1799, 1872,

     1876, 1866, 1865, 1884, 1902,    0, 1903, 1895, 1021, 1895,
        0, 1893, 1900,    0,    0, 1912, 1892, 1906, 1911, 1910,
     1915, 1914, 1019, 1915, 1908, 1908, 1925, 1910, 1928, 1939,
     1944, 1944, 1932, 1946, 1948, 1948, 1943,    0, 1006, 1005,
     1004, 1969, 1995, 1003, 2007, 2049, 2025, 2034, 2093, 2067,
     2137, 2111, 1958, 2040, 1014, 2041, 2089, 2117, 2105, 2145,
     2129,    0, 2128, 2136, 2146, 2132,    0, 2143, 2148, 2140,
     2137,    0, 2138, 2139, 2151, 2146, 2146, 2142, 2143, 2142,
     2162, 2176, 2173, 2183,    0, 2190,    0, 2189, 2190,  992,
      974,  954,  852, 2207, 2233, 2251, 2277, 2295, 2321,  851,

     2333, 2375, 2351, 2196, 2240, 2288, 2336, 2352, 2355, 2354,
     2366,    0, 2385, 2372, 2383,    0, 2375, 2372,    0,    0,
     2382,    0, 2383, 2388, 2389, 2386, 2391, 2375, 2383, 2381,
        0,    0, 2382,  861, 2388, 2406,  848,  847,  846, 2447,
      845, 2459, 2501, 2477, 2545, 2519, 2589, 2563,    0, 2391,
     2469,  856, 2497,  854,    0, 2539, 2558, 2567,    0, 3864,
     3864, 2582, 2593, 2582, 2594, 2582,  853, 2598, 2601,    0,
     2592, 2592, 2598,    0,  840,  839,  838,  807, 2645, 2663,
     2689, 2707, 2733,  806, 2745, 2787, 2763,    0, 2603, 2640,
        0, 2781,    0,    0, 2666, 2689, 2764, 2748, 2770,    0,

     2786, 2780, 2784,    0, 2786, 2789,  805,  804,  803, 2840,
      802, 2852, 2894, 2870, 2938, 2912, 2982, 2956,  812, 2799,
     2872, 2886,    0, 2927, 2943, 2959, 2971, 2989,    0, 2979,
      811, 2989,  798,  797,  796,  795, 3032, 3006, 3076, 3050,
     3094,  794, 3120, 3162, 3138, 2978, 3020,  769, 3057,    0,
     3093, 3125, 3135, 3142, 3140, 3144,    0,  764,  763,  762,
        0, 3184,  761, 3206, 3248, 3224, 3292, 3266, 3336, 3310,
     3225, 3240,    0,  385, 3287,    0, 3302, 3313,    0, 3330,
      760,  759,  731,  728,  672, 3383, 3357, 3427, 3401, 3445,
      671, 3471,    0, 3489, 3330, 3376,    0,  123,  671,  670,

     3396, 3395, 3437, 3468,  661,  660, 3864,  617,    0, 3525,
      616, 3537, 3555, 3581, 3599,    0, 3490, 3541,  620,  617,
      618,  619,    0,    0, 3543, 3579,  611,  609,  608,  607,
     3637, 3625, 3655,  606,    0, 3596, 3618,    0,    0,    0,
        0,    0, 3636,  605,  604,  603,    0, 3681, 3864,    0,
     3637,    0, 3643,  564,  563,  562, 3864, 3638, 3652,  561,
      560,  559,    0,    0,    0,  530,  529,  528,  527,  526,
      525,    0,  480,  427,  416,    0,  415,  414,    0,  413,
      412,  411,  382,  380,  332,    0,  331,  313, 3864, 3707,
     3711, 3715, 3719, 3723, 3727, 3729,  304, 3731, 3733, 3735,

     3737, 3739, 3741, 3743, 3745, 3747, 3749, 3751, 3753, 3755,
     3757, 3759, 3761, 3763, 3765, 3767, 3769, 3771, 3773, 3775,
     3777, 3779, 3781, 3783, 3785, 3787, 3789, 3791, 3793, 3795,
     3797, 3799, 3801,  285, 3803, 3805, 3807,  283, 3809, 3811,
     3813,  282,  280, 3815, 3817, 3819,  229, 3821, 3823,  226,
      224, 3825, 3827, 3829, 3831, 3833,  207, 3835, 3837, 3839,
     3841, 3843,  143, 3845, 3847, 3849,  139, 3851,  134, 3853,
     3855, 3857,   79, 3859
    } ;

static yyconst flex_int16_t yy_def[875] =
    {   0,
      789,    1,  790,  790,  791,  791,  789,  789,  789,  789,
      789,  792,  793,  794,  789,  789,   16,  789,  789,   19,
       19,   19,   19,   19,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  789,  789,  789,  789,  789,
      789,  792,  789,  793,  794,  789,  789,  795,  789,  796,
       49,  789,  797,  789,   24,   24,   56,   56,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  789,  795,  789,  798,   97,  799,

      789,  797,  789,  103,   56,  105,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  789,  145,  800,  801,  802,  789,
      150,  789,  789,  789,  153,  105,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  789,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  146,  146,  801,

      803,  804,  789,  789,  789,  204,  789,  789,  208,  789,
      210,  156,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      789,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  805,  789,
      806,  807,  789,  789,  264,  789,  266,  789,  789,  789,
      789,  789,  271,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  789,  789,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  808,  809,  810,  789,  789,  789,  789,  789,  328,
      789,  789,  789,  333,  789,  335,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  789,  789,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      806,  789,  811,  812,  789,  789,  789,  387,  789,  389,
      789,  789,  789,  789,  789,  394,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  789,  789,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  813,  814,
      815,  789,  789,  789,  789,  789,  445,  789,  789,  449,
      789,  451,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  789,  789,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  816,
      789,  817,  818,  789,  789,  495,  789,  497,  789,  789,

      789,  789,  501,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  789,  789,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  819,  820,  821,  789,
      789,  789,  789,  542,  789,  545,  789,  547,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  789,
      789,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  822,  789,  823,  824,  789,  579,
      789,  581,  789,  789,  789,  789,  585,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,  825,  826,  827,  789,
      789,  789,  789,  612,  789,  615,  789,  617,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  828,  789,  829,  830,  789,  637,  789,  639,
      789,  789,  789,  789,  643,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  831,  832,  833,
      834,  789,  789,  789,  789,  664,  789,  667,  789,  669,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      835,  789,  836,  789,  837,  789,  686,  789,  688,  789,
      789,  789,  838,  692,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,  839,  840,  789,  841,  842,  789,
      789,  789,  712,  789,  714,  843,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  844,  789,  845,  846,
      789,  731,  789,  789,  847,   24,   24,   24,   24,   24,
       24,   24,   24,  848,  789,  849,  850,  789,  789,  851,
       24,   24,   24,  852,  853,  854,  789,   24,   24,  855,
      789,  856,  857,   24,   24,  858,  859,  860,  861,  789,
      862,  863,  864,  865,  866,  867,  789,  868,  869,  789,
      870,  871,  864,  789,  872,  873,  874,  789,    0,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,

      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789
    } ;

static yyconst flex_int16_t yy_nxt[3939] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   20,   21,   22,   23,   24,   24,
       25,   24,   24,   26,   24,   27,   28,   29,   24,   30,
       31,   32,   33,   34,   35,   24,   24,   24,   19,   20,
       20,   21,   22,   23,   24,   24,   25,   24,   24,   26,
       24,   27,   28,   29,   24,   30,   31,   32,   33,   34,
       35,   24,   24,   24,   39,   40,   41,   40,   47,  789,
       77,  689,   48,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   50,   51,   51,   51,   51,   51,   51,   68,

       52,   71,   91,   94,   69,  789,   77,   72,  106,   92,
       39,   40,   70,   93,   41,   40,   53,   39,   40,   51,
       51,   51,   51,   51,   51,   68,   52,   71,   91,   94,
       69,  174,  175,   72,  106,   92,  782,  719,   70,   93,
      720,  780,   53,   55,   55,  775,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   50,   56,   56,   56,   57,
       56,   58,   55,   59,   55,   55,   55,   55,   55,   60,
       55,   55,   55,   55,   55,   55,   61,   55,   55,   55,
       55,   55,   56,   56,   56,   57,   56,   58,   55,   59,
       55,   55,   55,   55,   55,   60,   55,   55,   55,   55,

       55,   55,   61,   55,   55,   55,   55,   55,   56,  768,
       56,  107,   56,   78,   56,  108,   73,  109,   55,   80,
      110,  111,   55,   81,   74,   55,  757,   79,  756,   55,
       75,  750,   66,   82,   56,   76,   56,  107,   56,   78,
       56,  108,   73,  109,   55,   80,  110,  111,   55,   81,
       74,   55,   56,   79,   56,   55,   75,   62,   66,   82,
      112,   76,   63,   64,   56,  113,   56,  114,  115,   65,
      116,  117,  120,  121,   55,  122,  123,   67,   56,  126,
       56,   55,  735,   62,  730,  716,  112,  685,   63,   64,
       56,  113,   56,  114,  115,   65,  116,  117,  120,  121,

       55,  122,  123,   67,  124,  126,  102,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,  789,   55,   55,
       55,   55,   55,   55,   83,   55,   87,   88,  127,  128,
       84,   55,   85,  129,  786,   89,  125,  134,   55,  135,
      136,   86,  118,   90,   55,   55,   55,   55,   55,   55,
       83,   55,  786,  786,  127,  128,   84,   55,   85,  129,
      119,   89,  125,  134,   55,  135,  136,   86,  118,   90,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   98,
       99,   99,   99,   99,   99,   99,  119,   52,   99,   99,
       99,   99,   99,   99,   99,   99,   99,  137,  697,  698,

      699,  779,  700,  789,  140,  141,   99,   99,   99,   99,
       99,   99,  142,   52,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  137,  104,  104,  104,  104,  104,  104,
      140,  141,  786,  779,  783,  779,  772,  779,  142,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  772,  143,
      104,  104,  104,  104,  104,  104,  105,  105,  105,  105,
      105,  105,  105,  105,  105,   98,  105,  105,  105,  105,
      105,  105,  130,   59,  138,  143,  144,  157,  158,  131,
      159,  160,  132,  161,  163,  164,  133,  165,  166,  167,
      168,  139,  105,  105,  105,  105,  105,  105,  130,   59,

      138,  707,  144,  157,  158,  131,  159,  160,  132,  161,
      163,  164,  133,  165,  166,  167,  168,  139,  145,  145,
      145,  145,  145,  145,  145,  145,  145,   50,  146,  146,
      146,  146,  146,  146,  789,   52,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  169,  772,  763,  773,  772,
      763,  684,  170,  171,  146,  146,  146,  146,  146,  146,
      173,   52,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  169,  151,  151,  151,  151,  151,  151,  170,  171,
      763,  747,  661,  763,  747,  760,  173,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  178,  180,  151,  151,

      151,  151,  151,  151,  152,  181,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  154,  155,  155,  155,  155,
      155,  155,  178,  180,  747,  709,  636,  693,  747,  709,
      684,  181,  101,  741,  740,  739,  738,  665,  709,  182,
      183,  184,  155,  155,  155,  155,  155,  155,  156,  156,
      156,  156,  156,  156,  156,  156,  156,   50,  156,  156,
      156,  156,  156,  156,  176,  182,  183,  184,  185,  186,
      177,  187,  188,  190,  191,  192,  193,  194,  195,  196,
      197,  684,  727,  722,  156,  156,  156,  156,  156,  156,
      176,  721,  644,  709,  185,  186,  177,  187,  188,  190,

      191,  192,  193,  194,  195,  196,  197,  198,  198,  198,
      198,  198,  198,  198,  198,  198,   50,  199,  199,  199,
      199,  199,  199,  789,   52,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  199,  199,  199,  199,  199,  199,  707,
       52,  203,  684,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  205,  206,  206,  206,  206,  206,  206,  789,
      213,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      636,  578,  613,  684,  636,  101,  673,  214,  215,  206,
      206,  206,  206,  206,  206,  152,  217,  208,  208,  208,

      208,  208,  208,  208,  208,  208,  154,  209,  209,  209,
      209,  209,  209,  214,  215,  586,  661,  636,  578,  658,
      656,  646,  217,  543,  636,  578,  493,  502,  101,  218,
      219,  221,  223,  209,  209,  209,  209,  209,  209,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  224,  211,
      211,  211,  211,  211,  211,  218,  219,  221,  223,  578,
      493,  101,  601,  592,  225,  590,  446,  578,  493,  575,
      572,  226,  395,  101,  224,  211,  211,  211,  211,  211,
      211,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      225,  212,  212,  212,  212,  212,  212,  226,  227,  232,

      234,  235,  236,  237,  238,  241,  239,  228,  229,  230,
      240,  242,  243,  244,  233,  245,  246,  212,  212,  212,
      212,  212,  212,  247,  227,  232,  234,  235,  236,  237,
      238,  241,  239,  228,  229,  230,  240,  242,  243,  244,
      233,  245,  246,  248,  251,  252,  255,  256,  257,  247,
      274,  275,  276,  277,  279,  280,  253,  278,  249,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  789,  248,
      251,  252,  255,  256,  257,  493,  274,  275,  276,  277,
      279,  280,  253,  278,  249,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  203,  384,  264,  264,  264,  264,

      264,  264,  264,  264,  264,  205,  265,  265,  265,  265,
      265,  265,  789,  384,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  506,  329,  493,  384,  101,  475,  281,
      464,  272,  265,  265,  265,  265,  265,  265,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  285,  267,  267,
      267,  267,  267,  267,  268,  281,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  101,  384,  262,  439,  429,
      398,  205,  384,  285,  267,  267,  267,  267,  267,  267,
      152,  262,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  154,  270,  270,  270,  270,  270,  270,  789,  286,

      270,  270,  270,  270,  270,  270,  270,  270,  270,  262,
      379,  375,  367,  366,  363,  360,  349,  287,  270,  270,
      270,  270,  270,  270,  152,  286,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  272,  273,  273,  273,  273,
      273,  273,  789,  287,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  282,  288,  289,  290,  291,  292,  293,
      283,  294,  273,  273,  273,  273,  273,  273,  284,  296,
      297,  298,  299,  300,  301,  302,  295,  303,  305,  282,
      288,  289,  290,  291,  292,  293,  283,  294,  306,  307,
      308,  309,  310,  311,  284,  296,  297,  298,  299,  300,

      301,  302,  295,  303,  305,  312,  313,  314,  315,  316,
      317,  318,  320,  321,  306,  307,  308,  309,  310,  311,
      325,  342,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  312,  313,  314,  315,  316,  317,  318,  320,  321,
      203,  154,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  205,  327,  327,  327,  327,  327,  327,  789,  337,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  327,  327,
      327,  327,  327,  327,  203,  337,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  329,  330,  330,  330,  330,

      330,  330,  789,  338,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  101,  262,  339,  149,  101,  319,  304,
      789,  262,  330,  330,  330,  330,  330,  330,  152,  338,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  154,
      152,  339,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  272,  334,  334,  334,  334,  334,  334,  789,  149,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  259,
      789,  258,  254,  250,  340,  341,  343,  344,  334,  334,
      334,  334,  334,  334,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  345,  336,  336,  336,  336,  336,  336,

      340,  341,  343,  344,  346,  347,  348,  350,  351,  352,
      353,  354,  355,  356,  357,  358,  359,  361,  362,  345,
      336,  336,  336,  336,  336,  336,  364,  365,  368,  369,
      346,  347,  348,  350,  351,  352,  353,  354,  355,  356,
      357,  358,  359,  361,  362,  370,  371,  372,  373,  374,
      376,  377,  364,  365,  368,  369,  378,  380,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  231,  222,  220,
      216,  370,  371,  372,  373,  374,  376,  377,  101,  149,
      149,  189,  378,  380,  203,  179,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  205,  203,  172,  387,  387,

      387,  387,  387,  387,  387,  387,  387,  329,  388,  388,
      388,  388,  388,  388,  789,  162,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  149,  101,  101,   45,   46,
       43,  397,   95,   54,  388,  388,  388,  388,  388,  388,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  399,
      390,  390,  390,  390,  390,  390,  391,  397,  331,  331,
      331,  331,  331,  331,  331,  331,  331,   46,  400,   43,
      789,   37,   37,  789,  789,  399,  390,  390,  390,  390,
      390,  390,  152,  789,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  152,  400,  392,  392,  392,  392,  392,

      392,  392,  392,  392,  272,  393,  393,  393,  393,  393,
      393,  789,  401,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  789,  789,  789,  789,  789,  789,  789,  789,
      405,  393,  393,  393,  393,  393,  393,  152,  401,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  395,  396,
      396,  396,  396,  396,  396,  789,  405,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  402,  406,  407,  408,
      409,  410,  403,  411,  404,  396,  396,  396,  396,  396,
      396,  412,  413,  414,  415,  416,  417,  418,  419,  420,
      421,  422,  402,  406,  407,  408,  409,  410,  403,  411,

      404,  423,  424,  425,  426,  427,  428,  412,  413,  414,
      415,  416,  417,  418,  419,  420,  421,  422,  430,  431,
      432,  433,  434,  435,  436,  437,  438,  423,  424,  425,
      426,  427,  428,  442,  789,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  430,  431,  432,  433,  434,  435,
      436,  437,  438,  203,  789,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  203,  789,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  329,  444,  444,  444,  444,
      444,  444,  789,  453,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  448,  448,  448,  448,  448,  448,  448,

      448,  448,  444,  444,  444,  444,  444,  444,  203,  453,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  446,
      447,  447,  447,  447,  447,  447,  789,  454,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  789,  789,  455,
      789,  789,  789,  789,  789,  789,  447,  447,  447,  447,
      447,  447,  152,  454,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  272,  152,  455,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  395,  450,  450,  450,  450,
      450,  450,  789,  789,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  789,  789,  789,  789,  789,  456,  457,

      458,  459,  450,  450,  450,  450,  450,  450,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  460,  452,  452,
      452,  452,  452,  452,  456,  457,  458,  459,  461,  462,
      463,  465,  466,  467,  468,  469,  470,  471,  472,  473,
      474,  476,  477,  460,  452,  452,  452,  452,  452,  452,
      478,  479,  480,  481,  461,  462,  463,  465,  466,  467,
      468,  469,  470,  471,  472,  473,  474,  476,  477,  482,
      483,  484,  485,  486,  487,  488,  478,  479,  480,  481,
      489,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      789,  789,  504,  789,  789,  482,  483,  484,  485,  486,

      487,  488,  789,  789,  789,  203,  489,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  329,  203,  504,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  446,  496,
      496,  496,  496,  496,  496,  789,  789,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  496,  496,  496,  496,  496,
      496,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      505,  498,  498,  498,  498,  498,  498,  789,  507,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  789,  789,
      789,  789,  789,  789,  789,  789,  505,  498,  498,  498,

      498,  498,  498,  152,  507,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  395,  500,  500,  500,  500,  500,
      500,  789,  508,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  789,  789,  789,  789,  789,  789,  789,  509,
      510,  500,  500,  500,  500,  500,  500,  152,  508,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  502,  503,
      503,  503,  503,  503,  503,  509,  510,  511,  512,  513,
      514,  515,  516,  517,  518,  519,  520,  521,  522,  525,
      526,  527,  528,  529,  523,  503,  503,  503,  503,  503,
      503,  524,  530,  511,  512,  513,  514,  515,  516,  517,

      518,  519,  520,  521,  522,  525,  526,  527,  528,  529,
      523,  531,  532,  533,  534,  535,  536,  524,  530,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  789,  789,
      789,  789,  789,  789,  789,  789,  549,  531,  532,  533,
      534,  535,  536,  203,  789,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  446,  541,  541,  541,  541,  541,
      541,  789,  549,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  789,  789,  789,  789,  789,  789,  789,  789,
      550,  541,  541,  541,  541,  541,  541,  203,  789,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  543,  544,

      544,  544,  544,  544,  544,  789,  550,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  789,  789,  551,  789,
      789,  789,  789,  789,  789,  544,  544,  544,  544,  544,
      544,  152,  789,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  395,  152,  551,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  502,  546,  546,  546,  546,  546,
      546,  789,  789,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  789,  789,  789,  789,  789,  552,  553,  554,
      555,  546,  546,  546,  546,  546,  546,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  556,  548,  548,  548,

      548,  548,  548,  552,  553,  554,  555,  557,  558,  559,
      560,  561,  562,  563,  564,  565,  566,  567,  568,  569,
      570,  571,  556,  548,  548,  548,  548,  548,  548,  573,
      574,  789,  588,  557,  558,  559,  560,  561,  562,  563,
      564,  565,  566,  567,  568,  569,  570,  571,  789,  789,
      789,  789,  789,  789,  789,  573,  574,  203,  588,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  446,  203,
      789,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      543,  580,  580,  580,  580,  580,  580,  789,  789,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  789,  789,

      789,  789,  789,  789,  589,  789,  789,  580,  580,  580,
      580,  580,  580,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  591,  582,  582,  582,  582,  582,  582,  789,
      589,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      789,  789,  789,  789,  789,  789,  789,  789,  591,  582,
      582,  582,  582,  582,  582,  152,  789,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  502,  584,  584,  584,
      584,  584,  584,  789,  593,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  789,  789,  789,  789,  789,  789,
      789,  594,  595,  584,  584,  584,  584,  584,  584,  152,

      593,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      586,  587,  587,  587,  587,  587,  587,  594,  595,  596,
      597,  598,  599,  600,  602,  603,  604,  605,  606,  789,
      619,  789,  789,  789,  789,  789,  789,  587,  587,  587,
      587,  587,  587,  789,  789,  596,  597,  598,  599,  600,
      602,  603,  604,  605,  606,  203,  619,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  543,  611,  611,  611,
      611,  611,  611,  789,  620,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  789,  789,  789,  789,  789,  789,
      789,  789,  623,  611,  611,  611,  611,  611,  611,  203,

      620,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      613,  614,  614,  614,  614,  614,  614,  789,  623,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  789,  789,
      624,  789,  789,  789,  789,  789,  789,  614,  614,  614,
      614,  614,  614,  152,  789,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  502,  152,  624,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  586,  616,  616,  616,
      616,  616,  616,  789,  789,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  789,  789,  789,  789,  789,  789,
      625,  626,  627,  616,  616,  616,  616,  616,  616,  617,

      617,  617,  617,  617,  617,  617,  617,  617,  628,  618,
      618,  618,  618,  618,  618,  621,  625,  626,  627,  629,
      630,  622,  631,  632,  789,  647,  789,  789,  789,  789,
      789,  789,  789,  789,  628,  618,  618,  618,  618,  618,
      618,  621,  789,  789,  789,  629,  630,  622,  631,  632,
      203,  647,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  543,  203,  789,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  613,  638,  638,  638,  638,  638,  638,
      789,  789,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  789,  789,  789,  789,  789,  789,  648,  789,  789,

      638,  638,  638,  638,  638,  638,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  649,  640,  640,  640,  640,
      640,  640,  789,  648,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  789,  789,  789,  789,  789,  789,  789,
      789,  649,  640,  640,  640,  640,  640,  640,  152,  789,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  586,
      642,  642,  642,  642,  642,  642,  789,  650,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  789,  789,  789,
      789,  789,  789,  789,  651,  652,  642,  642,  642,  642,
      642,  642,  152,  650,  643,  643,  643,  643,  643,  643,

      643,  643,  643,  644,  645,  645,  645,  645,  645,  645,
      651,  652,  653,  654,  655,  657,  789,  671,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  789,  789,  789,
      645,  645,  645,  645,  645,  645,  789,  789,  653,  654,
      655,  657,  203,  671,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  613,  663,  663,  663,  663,  663,  663,
      789,  672,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  789,  789,  789,  789,  789,  789,  789,  789,  674,
      663,  663,  663,  663,  663,  663,  203,  672,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  665,  666,  666,

      666,  666,  666,  666,  152,  674,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  586,  789,  789,  789,  789,
      789,  789,  789,  675,  666,  666,  666,  666,  666,  666,
      152,  789,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  644,  668,  668,  668,  668,  668,  668,  789,  675,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  789,
      789,  789,  789,  789,  676,  677,  678,  679,  668,  668,
      668,  668,  668,  668,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  680,  670,  670,  670,  670,  670,  670,
      676,  677,  678,  679,  203,  789,  386,  386,  386,  386,

      386,  386,  386,  386,  386,  613,  789,  789,  789,  680,
      670,  670,  670,  670,  670,  670,  203,  789,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  665,  687,  687,
      687,  687,  687,  687,  789,  789,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  789,  789,  789,  789,  789,
      789,  695,  789,  789,  687,  687,  687,  687,  687,  687,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  696,
      689,  689,  689,  689,  689,  689,  789,  695,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  789,  789,  789,
      789,  789,  789,  789,  789,  696,  689,  689,  689,  689,

      689,  689,  152,  789,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  644,  691,  691,  691,  691,  691,  691,
      789,  701,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  789,  789,  789,  789,  789,  789,  789,  702,  703,
      691,  691,  691,  691,  691,  691,  152,  701,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  693,  694,  694,
      694,  694,  694,  694,  702,  703,  704,  789,  717,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  789,  789,
      789,  789,  789,  789,  694,  694,  694,  694,  694,  694,
      789,  789,  704,  203,  717,  710,  710,  710,  710,  710,

      710,  710,  710,  710,  665,  711,  711,  711,  711,  711,
      711,  789,  718,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  723,  789,  789,  789,  789,  789,  789,  789,
      724,  711,  711,  711,  711,  711,  711,  203,  718,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  723,  713,
      713,  713,  713,  713,  713,  152,  724,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  644,  789,  789,  789,
      789,  789,  789,  789,  725,  713,  713,  713,  713,  713,
      713,  152,  789,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  693,  715,  715,  715,  715,  715,  715,  789,

      725,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      726,  789,  789,  789,  789,  789,  789,  789,  789,  715,
      715,  715,  715,  715,  715,  789,  789,  789,  789,  789,
      789,  789,  736,  789,  789,  203,  726,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  665,  203,  789,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  736,  732,
      732,  732,  732,  732,  732,  789,  737,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  789,  789,  789,  789,
      789,  789,  789,  789,  742,  732,  732,  732,  732,  732,
      732,  152,  737,  733,  733,  733,  733,  733,  733,  733,

      733,  733,  693,  734,  734,  734,  734,  734,  734,  789,
      742,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      743,  789,  751,  789,  789,  789,  789,  789,  789,  734,
      734,  734,  734,  734,  734,  789,  789,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  743,  203,  751,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  752,  749,
      749,  749,  749,  749,  749,  152,  753,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  693,  758,  759,  764,
      765,  789,  789,  789,  752,  749,  749,  749,  749,  749,
      749,  203,  753,  386,  386,  386,  386,  386,  386,  386,

      386,  386,  789,  758,  759,  764,  765,   36,   36,   36,
       36,   38,   38,   38,   38,   42,   42,   42,   42,   44,
      789,   44,   44,   45,   45,   45,   45,   96,  789,   96,
       96,  100,  100,  147,  147,  148,  148,  200,  200,  201,
      201,  202,  202,  260,  260,  261,  261,  322,  322,  323,
      323,  324,  324,  381,  381,  382,  382,  383,  383,  440,
      440,  441,  441,  490,  490,  491,  491,  492,  492,  537,
      537,  538,  538,  539,  539,  440,  440,  576,  576,  577,
      577,  607,  607,  608,  608,  609,  609,  633,  633,  634,
      634,  635,  635,  538,  538,  659,  659,  660,  660,  681,

      681,  682,  682,  683,  683,  705,  705,  706,  706,  708,
      708,  608,  608,  728,  728,  729,  729,  744,  744,  745,
      745,  746,  746,  754,  754,  755,  755,  659,  659,  761,
      761,  762,  762,  766,  766,  767,  767,  769,  769,  770,
      770,  771,  771,  706,  706,  774,  774,  776,  776,  777,
      777,  778,  778,  781,  781,  784,  784,  785,  785,  787,
      787,  788,  788,    7,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,

      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789
    } ;

static yyconst flex_int16_t yy_chk[3939] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   10,   10,   11,   11,   15,   17,
       28,  873,   15,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   25,

       16,   26,   33,   35,   25,   17,   28,   26,   57,   34,
       39,   39,   25,   34,   40,   40,   16,   41,   41,   16,
       16,   16,   16,   16,   16,   25,   16,   26,   33,   35,
       25,  123,  123,   26,   57,   34,  869,  698,   25,   34,
      698,  867,   16,   19,   19,  863,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   20,  857,
       20,   58,   22,   29,   22,   60,   27,   61,   20,   30,
       62,   63,   22,   30,   27,   20,  851,   29,  850,   22,
       27,  847,   22,   30,   20,   27,   20,   58,   22,   29,
       22,   60,   27,   61,   20,   30,   62,   63,   22,   30,
       27,   20,   21,   29,   21,   22,   27,   21,   22,   30,
       64,   27,   21,   21,   23,   65,   23,   66,   67,   21,
       68,   69,   71,   72,   23,   73,   74,   23,   21,   76,
       21,   23,  843,   21,  842,  838,   64,  834,   21,   21,
       23,   65,   23,   66,   67,   21,   68,   69,   71,   72,

       23,   73,   74,   23,   75,   76,  797,   23,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   31,   24,   32,   32,   77,   79,
       31,   24,   31,   80,  788,   32,   75,   82,   24,   83,
       84,   31,   70,   32,   24,   24,   24,   24,   24,   24,
       31,   24,  787,  785,   77,   79,   31,   24,   31,   80,
       70,   32,   75,   82,   24,   83,   84,   31,   70,   32,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   70,   49,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   85,  674,  674,

      674,  784,  674,  783,   90,   91,   49,   49,   49,   49,
       49,   49,   92,   49,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   85,   54,   54,   54,   54,   54,   54,
       90,   91,  782,  781,  780,  778,  777,  775,   92,   99,
       99,   99,   99,   99,   99,   99,   99,   99,  774,   93,
       54,   54,   54,   54,   54,   54,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   81,   56,   86,   93,   94,  106,  107,   81,
      108,  109,   81,  110,  112,  113,   81,  114,  115,  116,
      117,   86,   56,   56,   56,   56,   56,   56,   81,   56,

       86,  773,   94,  106,  107,   81,  108,  109,   81,  110,
      112,  113,   81,  114,  115,  116,  117,   86,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,  104,   97,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  118,  771,  770,  769,  768,
      767,  766,  119,  120,   97,   97,   97,   97,   97,   97,
      122,   97,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  118,  101,  101,  101,  101,  101,  101,  119,  120,
      762,  761,  760,  756,  755,  754,  122,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  125,  127,  101,  101,

      101,  101,  101,  101,  103,  128,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  125,  127,  746,  745,  744,  734,  730,  729,
      728,  128,  727,  722,  721,  720,  719,  711,  708,  129,
      130,  131,  103,  103,  103,  103,  103,  103,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  124,  129,  130,  131,  132,  133,
      124,  134,  135,  137,  138,  139,  140,  141,  142,  143,
      144,  706,  705,  700,  105,  105,  105,  105,  105,  105,
      124,  699,  691,  685,  132,  133,  124,  134,  135,  137,

      138,  139,  140,  141,  142,  143,  144,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  151,  145,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  145,  145,  145,  145,  145,  145,  684,
      145,  150,  683,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  155,
      157,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      682,  681,  663,  660,  659,  658,  648,  157,  159,  150,
      150,  150,  150,  150,  150,  153,  161,  153,  153,  153,

      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  157,  159,  642,  636,  635,  634,  633,
      631,  619,  161,  611,  609,  608,  607,  584,  578,  162,
      163,  165,  168,  153,  153,  153,  153,  153,  153,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  169,  154,
      154,  154,  154,  154,  154,  162,  163,  165,  168,  577,
      576,  575,  567,  554,  170,  552,  541,  539,  538,  537,
      534,  171,  500,  493,  169,  154,  154,  154,  154,  154,
      154,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      170,  156,  156,  156,  156,  156,  156,  171,  172,  175,

      176,  177,  178,  179,  180,  182,  181,  172,  172,  172,
      181,  183,  184,  185,  175,  186,  187,  156,  156,  156,
      156,  156,  156,  188,  172,  175,  176,  177,  178,  179,
      180,  182,  181,  172,  172,  172,  181,  183,  184,  185,
      175,  186,  187,  189,  191,  192,  194,  195,  196,  188,
      213,  214,  215,  216,  217,  218,  192,  216,  189,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  189,
      191,  192,  194,  195,  196,  492,  213,  214,  215,  216,
      217,  218,  192,  216,  189,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  204,  491,  204,  204,  204,  204,

      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  206,  490,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  455,  444,  441,  440,  439,  423,  219,
      409,  393,  204,  204,  204,  204,  204,  204,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  221,  205,  205,
      205,  205,  205,  205,  207,  219,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  384,  383,  382,  381,  370,
      338,  327,  324,  221,  205,  205,  205,  205,  205,  205,
      208,  323,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  209,  222,

      209,  209,  209,  209,  209,  209,  209,  209,  209,  322,
      320,  315,  307,  306,  303,  299,  288,  224,  208,  208,
      208,  208,  208,  208,  210,  222,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  211,  224,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  220,  225,  226,  227,  228,  229,  230,
      220,  231,  210,  210,  210,  210,  210,  210,  220,  232,
      233,  234,  236,  237,  238,  239,  231,  240,  242,  220,
      225,  226,  227,  228,  229,  230,  220,  231,  243,  244,
      245,  246,  247,  248,  220,  232,  233,  234,  236,  237,

      238,  239,  231,  240,  242,  249,  250,  251,  252,  253,
      254,  255,  257,  258,  243,  244,  245,  246,  247,  248,
      263,  279,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  249,  250,  251,  252,  253,  254,  255,  257,  258,
      264,  270,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  265,  274,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  264,  264,
      264,  264,  264,  264,  266,  274,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,

      266,  266,  267,  275,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  262,  261,  276,  260,  259,  256,  241,
      212,  202,  266,  266,  266,  266,  266,  266,  269,  275,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      271,  276,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  273,  201,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  200,
      199,  197,  193,  190,  277,  278,  280,  282,  271,  271,
      271,  271,  271,  271,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  283,  272,  272,  272,  272,  272,  272,

      277,  278,  280,  282,  284,  285,  287,  289,  290,  291,
      292,  293,  294,  295,  296,  297,  298,  300,  302,  283,
      272,  272,  272,  272,  272,  272,  304,  305,  308,  309,
      284,  285,  287,  289,  290,  291,  292,  293,  294,  295,
      296,  297,  298,  300,  302,  310,  311,  312,  313,  314,
      317,  318,  304,  305,  308,  309,  319,  321,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  174,  166,  164,
      160,  310,  311,  312,  313,  314,  317,  318,  149,  148,
      147,  136,  319,  321,  326,  126,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  328,  121,  328,  328,

      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  330,  111,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  100,   98,   50,   46,   45,
       42,  337,   37,   18,  328,  328,  328,  328,  328,  328,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  339,
      329,  329,  329,  329,  329,  329,  331,  337,  331,  331,
      331,  331,  331,  331,  331,  331,  331,   14,  340,   12,
        7,    4,    3,    0,    0,  339,  329,  329,  329,  329,
      329,  329,  332,    0,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  333,  340,  333,  333,  333,  333,  333,

      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  334,  341,  334,  334,  334,  334,  334,  334,  334,
      334,  334,    0,    0,    0,    0,    0,    0,    0,    0,
      343,  333,  333,  333,  333,  333,  333,  335,  341,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  336,  343,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  342,  345,  346,  347,
      348,  349,  342,  350,  342,  335,  335,  335,  335,  335,
      335,  351,  352,  353,  354,  355,  356,  357,  358,  359,
      360,  361,  342,  345,  346,  347,  348,  349,  342,  350,

      342,  362,  363,  364,  365,  366,  367,  351,  352,  353,
      354,  355,  356,  357,  358,  359,  360,  361,  371,  372,
      373,  374,  375,  376,  378,  379,  380,  362,  363,  364,
      365,  366,  367,  385,    0,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  371,  372,  373,  374,  375,  376,
      378,  379,  380,  386,    0,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  387,    0,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  388,  397,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  391,  391,  391,  391,  391,  391,  391,

      391,  391,  387,  387,  387,  387,  387,  387,  389,  397,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  390,  398,  390,  390,
      390,  390,  390,  390,  390,  390,  390,    0,    0,  399,
        0,    0,    0,    0,    0,    0,  389,  389,  389,  389,
      389,  389,  392,  398,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  394,  399,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  396,    0,  396,  396,  396,  396,  396,  396,
      396,  396,  396,    0,    0,    0,    0,    0,  400,  401,

      402,  403,  394,  394,  394,  394,  394,  394,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  404,  395,  395,
      395,  395,  395,  395,  400,  401,  402,  403,  405,  407,
      408,  410,  412,  413,  416,  417,  418,  419,  420,  421,
      422,  424,  425,  404,  395,  395,  395,  395,  395,  395,
      426,  427,  428,  429,  405,  407,  408,  410,  412,  413,
      416,  417,  418,  419,  420,  421,  422,  424,  425,  430,
      431,  432,  433,  434,  435,  436,  426,  427,  428,  429,
      437,  442,  442,  442,  442,  442,  442,  442,  442,  442,
        0,    0,  453,    0,    0,  430,  431,  432,  433,  434,

      435,  436,    0,    0,    0,  443,  437,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  445,  453,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  447,    0,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  445,  445,  445,  445,  445,
      445,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      454,  446,  446,  446,  446,  446,  446,  450,  456,  450,
      450,  450,  450,  450,  450,  450,  450,  450,    0,    0,
        0,    0,    0,    0,    0,    0,  454,  446,  446,  446,

      446,  446,  446,  449,  456,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  452,  457,  452,  452,  452,  452,  452,  452,  452,
      452,  452,    0,    0,    0,    0,    0,    0,    0,  458,
      459,  449,  449,  449,  449,  449,  449,  451,  457,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  458,  459,  460,  461,  463,
      464,  465,  466,  468,  469,  470,  471,  473,  474,  476,
      477,  478,  479,  480,  475,  451,  451,  451,  451,  451,
      451,  475,  481,  460,  461,  463,  464,  465,  466,  468,

      469,  470,  471,  473,  474,  476,  477,  478,  479,  480,
      475,  482,  483,  484,  486,  488,  489,  475,  481,  494,
      494,  494,  494,  494,  494,  494,  494,  494,    0,    0,
        0,    0,    0,    0,    0,    0,  504,  482,  483,  484,
      486,  488,  489,  495,    0,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  496,  504,  496,  496,  496,  496,  496,  496,  496,
      496,  496,    0,    0,    0,    0,    0,    0,    0,    0,
      505,  495,  495,  495,  495,  495,  495,  497,    0,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,

      497,  497,  497,  497,  497,  498,  505,  498,  498,  498,
      498,  498,  498,  498,  498,  498,    0,    0,  506,    0,
        0,    0,    0,    0,    0,  497,  497,  497,  497,  497,
      497,  499,    0,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  501,  506,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  503,    0,  503,  503,  503,  503,  503,  503,  503,
      503,  503,    0,    0,    0,    0,    0,  507,  508,  509,
      510,  501,  501,  501,  501,  501,  501,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  511,  502,  502,  502,

      502,  502,  502,  507,  508,  509,  510,  513,  514,  515,
      517,  518,  521,  523,  524,  525,  526,  527,  528,  529,
      530,  533,  511,  502,  502,  502,  502,  502,  502,  535,
      536,    0,  550,  513,  514,  515,  517,  518,  521,  523,
      524,  525,  526,  527,  528,  529,  530,  533,    0,    0,
        0,    0,    0,    0,    0,  535,  536,  540,  550,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  542,
        0,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  544,    0,  544,
      544,  544,  544,  544,  544,  544,  544,  544,    0,    0,

        0,    0,    0,    0,  551,    0,    0,  542,  542,  542,
      542,  542,  542,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  553,  543,  543,  543,  543,  543,  543,  546,
      551,  546,  546,  546,  546,  546,  546,  546,  546,  546,
        0,    0,    0,    0,    0,    0,    0,    0,  553,  543,
      543,  543,  543,  543,  543,  545,    0,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  548,  556,  548,  548,  548,  548,  548,
      548,  548,  548,  548,    0,    0,    0,    0,    0,    0,
        0,  557,  558,  545,  545,  545,  545,  545,  545,  547,

      556,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  557,  558,  562,
      563,  564,  565,  566,  568,  569,  571,  572,  573,    0,
      589,    0,    0,    0,    0,    0,    0,  547,  547,  547,
      547,  547,  547,    0,    0,  562,  563,  564,  565,  566,
      568,  569,  571,  572,  573,  579,  589,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  580,  590,  580,  580,  580,  580,  580,
      580,  580,  580,  580,    0,    0,    0,    0,    0,    0,
        0,    0,  595,  579,  579,  579,  579,  579,  579,  581,

      590,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  582,  595,  582,
      582,  582,  582,  582,  582,  582,  582,  582,    0,    0,
      596,    0,    0,    0,    0,    0,    0,  581,  581,  581,
      581,  581,  581,  583,    0,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  585,  596,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  587,    0,  587,  587,  587,  587,  587,
      587,  587,  587,  587,    0,    0,    0,    0,    0,    0,
      597,  598,  599,  585,  585,  585,  585,  585,  585,  586,

      586,  586,  586,  586,  586,  586,  586,  586,  601,  586,
      586,  586,  586,  586,  586,  592,  597,  598,  599,  602,
      603,  592,  605,  606,    0,  620,    0,    0,    0,    0,
        0,    0,    0,    0,  601,  586,  586,  586,  586,  586,
      586,  592,    0,    0,    0,  602,  603,  592,  605,  606,
      610,  620,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  612,    0,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      614,    0,  614,  614,  614,  614,  614,  614,  614,  614,
      614,    0,    0,    0,    0,    0,    0,  621,    0,    0,

      612,  612,  612,  612,  612,  612,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  622,  613,  613,  613,  613,
      613,  613,  616,  621,  616,  616,  616,  616,  616,  616,
      616,  616,  616,    0,    0,    0,    0,    0,    0,    0,
        0,  622,  613,  613,  613,  613,  613,  613,  615,    0,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  618,  624,  618,  618,
      618,  618,  618,  618,  618,  618,  618,    0,    0,    0,
        0,    0,    0,    0,  625,  626,  615,  615,  615,  615,
      615,  615,  617,  624,  617,  617,  617,  617,  617,  617,

      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      625,  626,  627,  628,  630,  632,  638,  646,  638,  638,
      638,  638,  638,  638,  638,  638,  638,    0,    0,    0,
      617,  617,  617,  617,  617,  617,    0,    0,  627,  628,
      630,  632,  637,  646,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      640,  647,  640,  640,  640,  640,  640,  640,  640,  640,
      640,    0,    0,    0,    0,    0,    0,    0,    0,  649,
      637,  637,  637,  637,  637,  637,  639,  647,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,

      639,  639,  639,  639,  641,  649,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,    0,    0,    0,    0,
        0,    0,    0,  651,  639,  639,  639,  639,  639,  639,
      643,    0,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  645,  651,
      645,  645,  645,  645,  645,  645,  645,  645,  645,    0,
        0,    0,    0,    0,  652,  653,  654,  655,  643,  643,
      643,  643,  643,  643,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  656,  644,  644,  644,  644,  644,  644,
      652,  653,  654,  655,  662,    0,  662,  662,  662,  662,

      662,  662,  662,  662,  662,  662,    0,    0,    0,  656,
      644,  644,  644,  644,  644,  644,  664,    0,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  666,    0,  666,  666,  666,  666,
      666,  666,  666,  666,  666,    0,    0,    0,    0,    0,
        0,  671,    0,    0,  664,  664,  664,  664,  664,  664,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  672,
      665,  665,  665,  665,  665,  665,  668,  671,  668,  668,
      668,  668,  668,  668,  668,  668,  668,    0,    0,    0,
        0,    0,    0,    0,    0,  672,  665,  665,  665,  665,

      665,  665,  667,    0,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      670,  675,  670,  670,  670,  670,  670,  670,  670,  670,
      670,    0,    0,    0,    0,    0,    0,    0,  677,  678,
      667,  667,  667,  667,  667,  667,  669,  675,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  677,  678,  680,  687,  695,  687,
      687,  687,  687,  687,  687,  687,  687,  687,    0,    0,
        0,    0,    0,    0,  669,  669,  669,  669,  669,  669,
        0,    0,  680,  686,  695,  686,  686,  686,  686,  686,

      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  689,  696,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  701,    0,    0,    0,    0,    0,    0,    0,
      702,  686,  686,  686,  686,  686,  686,  688,  696,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  701,  688,
      688,  688,  688,  688,  688,  690,  702,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,    0,    0,    0,
        0,    0,    0,    0,  703,  688,  688,  688,  688,  688,
      688,  692,    0,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  694,

      703,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      704,    0,    0,    0,    0,    0,    0,    0,    0,  692,
      692,  692,  692,  692,  692,    0,    0,    0,    0,    0,
        0,    0,  717,    0,    0,  710,  704,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  712,    0,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  717,  712,
      712,  712,  712,  712,  712,  713,  718,  713,  713,  713,
      713,  713,  713,  713,  713,  713,    0,    0,    0,    0,
        0,    0,    0,    0,  725,  712,  712,  712,  712,  712,
      712,  714,  718,  714,  714,  714,  714,  714,  714,  714,

      714,  714,  714,  714,  714,  714,  714,  714,  714,  715,
      725,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      726,    0,  736,    0,    0,    0,    0,    0,    0,  714,
      714,  714,  714,  714,  714,  732,    0,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  726,  731,  736,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  737,  731,
      731,  731,  731,  731,  731,  733,  743,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  751,  753,  758,
      759,    0,    0,    0,  737,  731,  731,  731,  731,  731,
      731,  748,  743,  748,  748,  748,  748,  748,  748,  748,

      748,  748,    0,  751,  753,  758,  759,  790,  790,  790,
      790,  791,  791,  791,  791,  792,  792,  792,  792,  793,
        0,  793,  793,  794,  794,  794,  794,  795,    0,  795,
      795,  796,  796,  798,  798,  799,  799,  800,  800,  801,
      801,  802,  802,  803,  803,  804,  804,  805,  805,  806,
      806,  807,  807,  808,  808,  809,  809,  810,  810,  811,
      811,  812,  812,  813,  813,  814,  814,  815,  815,  816,
      816,  817,  817,  818,  818,  819,  819,  820,  820,  821,
      821,  822,  822,  823,  823,  824,  824,  825,  825,  826,
      826,  827,  827,  828,  828,  829,  829,  830,  830,  831,

      831,  832,  832,  833,  833,  835,  835,  836,  836,  837,
      837,  839,  839,  840,  840,  841,  841,  844,  844,  845,
      845,  846,  846,  848,  848,  849,  849,  852,  852,  853,
      853,  854,  854,  855,  855,  856,  856,  858,  858,  859,
      859,  860,  860,  861,  861,  862,  862,  864,  864,  865,
      865,  866,  866,  868,  868,  870,  870,  871,  871,  872,
      872,  874,  874,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,

      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[93] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_ClntParser_stype yylval;
}

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 790 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3864 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
{ return ClntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
{ return ClntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
{ return ClntParser::ADDRESS_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
{ return ClntParser::STRING_KEYWORD_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ return ClntParser::ADDRESS_LIST_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ return ClntParser::NAME_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ return ClntParser::IA_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
{ return ClntParser::TA_; }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ return ClntParser::IAID_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 13:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
{ return ClntParser::LOGLEVEL_; }
	YY_BREAK
case 15:
YY_RULE_SETUP
{ return ClntParser::LOGMODE_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ return ClntParser::LOGNAME_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ return ClntParser::LOGCOLORS_; }
	YY_BREAK
case 18:
YY_RULE_SETUP
{ return ClntParser::WORKDIR_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
{ return ClntParser::SCRIPTS_DIR_; }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ return ClntParser::NOTIFY_SCRIPTS_; }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 22:
YY_RULE_SETUP
{ return ClntParser::VALID_TIME_; }
	YY_BREAK
case 23:
YY_RULE_SETUP
{ return ClntParser::REMOTE_AUTOCONF_; }
	YY_BREAK
case 24:
YY_RULE_SETUP
{ return ClntParser::T1_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
{ return ClntParser::T2_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
{ return ClntParser::OPTION_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
{ return ClntParser::DNS_SERVER_;}
	YY_BREAK
case 28:
YY_RULE_SETUP
{ return ClntParser::DOMAIN_;}
	YY_BREAK
case 29:
YY_RULE_SETUP
{ return ClntParser::NTP_SERVER_;}
	YY_BREAK
case 30:
YY_RULE_SETUP
{ return ClntParser::TIME_ZONE_;}
	YY_BREAK
case 31:
YY_RULE_SETUP
{ return ClntParser::SIP_SERVER_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
{ return ClntParser::SIP_DOMAIN_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ return ClntParser::FQDN_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ return ClntParser::FQDN_S_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ return ClntParser::NIS_SERVER_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ return ClntParser::NIS_DOMAIN_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
{ return ClntParser::NISP_SERVER_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ return ClntParser::NISP_DOMAIN_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ return ClntParser::LIFETIME_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ return ClntParser::ROUTING_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
{ return ClntParser::REJECT_SERVERS_;}
	YY_BREAK
case 42:
YY_RULE_SETUP
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 43:
YY_RULE_SETUP
{ return ClntParser::RAPID_COMMIT_;}
	YY_BREAK
case 44:
YY_RULE_SETUP
{ return ClntParser::RECONFIGURE_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
{ return ClntParser::UNICAST_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ return ClntParser::STRICT_RFC_NO_ROUTING_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ return ClntParser::PREFIX_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LL_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LLT_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_EN_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ return ClntParser::VENDOR_SPEC_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ return ClntParser::ANON_INF_REQUEST_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ return ClntParser::INSIST_MODE_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ return ClntParser::INACTIVE_MODE_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ return ClntParser::AUTH_ENABLED_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ return ClntParser::AUTH_ACCEPT_METHODS_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ return ClntParser::DIGEST_NONE_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ return ClntParser::DIGEST_PLAIN_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
{ return ClntParser::SKIP_CONFIRM_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ return ClntParser::AFTR_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
{ return ClntParser::EXPERIMENTAL_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
{ return ClntParser::ADDR_PARAMS_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
{ return ClntParser::REQUEST_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
;
	YY_BREAK
case 74:
YY_RULE_SETUP
;
	YY_BREAK
case 75:
YY_RULE_SETUP
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
BEGIN(INITIAL);
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 78:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 79:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 80:
YY_RULE_SETUP
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 81:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 82:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 83:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 84:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return ClntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return ClntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
{
    // DUID in 0x00010203 format
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return ClntParser::DUID_;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
{
   // DUID in 00:01:02:03 format
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
        x = (toupper(*pos)-'A' + 10);
      else
        x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))	
        x += (toupper(*(pos+1))-'A' + 10);
      else
        x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }
   
   return ClntParser::DUID_;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
{ 
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::HEXNUMBER_;
}
	YY_BREAK
case 90:
YY_RULE_SETUP
{ 
    if(!sscanf(yytext,"%u",(unsigned int*)&(yylval.ival))) { 
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::INTNUMBER_;
}
	YY_BREAK
case 91:
YY_RULE_SETUP
{return yytext[0];} 
	YY_BREAK
case 92:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 790 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 790 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 789);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

