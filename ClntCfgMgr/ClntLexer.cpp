
#line 3 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 90
#define YY_END_OF_BUFFER 91
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[767] =
    {   0,
        1,    1,    0,    0,    0,    0,   91,   89,    2,    1,
        1,   89,   71,   89,   89,   88,   88,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   75,   75,   90,    1,    1,
        1,    0,   83,   71,    0,   83,   73,   72,   88,    0,
        0,   87,    0,   80,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,    9,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   46,   84,   84,
       84,   84,   84,   84,   84,   23,   24,   10,   84,   84,
       84,   84,   84,   74,   72,   88,    0,    0,    0,   79,

       85,   78,   78,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   88,    0,    0,    0,    0,   77,   77,    0,   78,
        0,   78,   84,   84,   67,   84,   84,   84,   84,   84,
       84,   84,   32,   11,   84,   84,   84,   84,   84,    8,
        0,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   88,    0,   86,    0,    0,    0,   77,    0,

       77,    0,   78,   78,   78,   78,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,    3,   84,   84,
       84,   84,   84,   84,   84,    0,   84,   84,   84,   12,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,    0,    0,    0,    0,    0,   77,   77,   77,   77,
        0,   78,   78,   78,    0,   78,   84,   84,   84,   84,
       84,   84,   84,   27,   84,   84,   84,   84,   33,   84,
       84,   84,   84,   84,   84,   84,    0,    0,   84,   84,
       84,   84,   25,   84,   47,   84,   84,   84,   84,   84,

       19,   84,   84,   84,   84,   84,    6,   84,   84,   84,
       84,   84,    0,    0,    0,    0,   77,   77,   77,    0,
       77,    0,    0,   78,   78,   78,   78,   84,    5,   84,
       84,   84,   84,   84,   51,   49,   84,   84,   84,   84,
       84,   84,   84,   84,   84,    0,    0,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   70,   84,   84,
       84,   84,   84,   84,   43,   84,   84,   84,   86,    0,
        0,    0,    0,    0,   77,   77,   77,   77,    0,   78,
       78,   78,    0,   78,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   50,   84,   84,   84,   84,   38,   84,

       84,   15,   16,    0,    0,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   18,    0,    0,    0,    0,   77,   77,
       77,    0,   77,   82,   78,   78,   78,   78,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   48,   84,   84,
       84,   84,   14,    0,    0,   84,   84,    4,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   13,   84,
       29,   84,   84,    0,    0,    0,    0,   81,   77,   77,
       77,   77,   78,   78,   78,    0,   78,   84,   84,   84,
       84,   84,   84,   84,   84,   26,   84,   84,   84,   17,

        0,    0,   35,   34,   28,   84,   84,   84,   84,   84,
       84,   84,   31,   30,   84,   84,   84,   84,   86,    0,
        0,   77,   77,   77,    0,   77,   78,   78,   78,   78,
       69,   84,   84,   84,   84,   84,   58,   84,   84,   84,
       54,   37,   36,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   52,    0,    0,    0,    0,   77,   77,
       77,   77,   78,   78,   78,    0,   78,    7,   84,   84,
       56,   84,   59,   68,   84,   84,   84,   84,   41,   84,
       84,   84,   66,   84,   84,    0,    0,    0,   77,   77,
       77,    0,   77,   78,   78,   78,   78,   84,   84,   84,

       84,   55,   84,   84,   84,   84,   39,   84,   84,   84,
       86,    0,    0,    0,   77,   77,   77,   77,   78,   78,
       78,    0,   78,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   21,    0,    0,   76,   79,   77,   77,
       77,    0,   77,   78,   78,   78,   78,   84,   84,   60,
       84,   84,   40,   84,   84,   22,   84,    0,    0,   76,
        0,   77,   77,   77,   77,   77,   78,   78,   78,    0,
       78,   84,   84,   61,   84,   84,   84,   84,   84,   84,
       84,   86,   76,   79,   77,    0,   77,   77,   77,   77,
       78,   78,   78,   84,   84,   84,   84,   84,   84,   20,

       45,   84,   84,    0,   76,   77,   77,   77,   77,   78,
       78,   78,   84,   84,   62,   63,   64,   65,   42,   84,
        0,   77,   77,    0,   77,   77,   78,   84,   57,   84,
       86,   77,   77,   78,   84,   84,    0,   77,   77,    0,
       53,   44,   76,   77,   77,   76,   77,   77,    0,    0,
       77,   77,    0,   77,   77,    0,   86,   77,   77,    0,
       77,   77,    0,   77,   77,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
        1,    1,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,    1,    1,    1,    1,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    3,    3,    3,    3,    3,    3,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[852] =
    {   0,
        0,    0, 1541, 1540,    0,    0, 1547, 3819, 3819,   72,
       74, 1541,    0, 1538,   71,   71,   34, 1522,  134,  183,
      227,  187,  239,  296,   77,   71,  194,   43,  188,   87,
      235,  313,   67,   88,   67, 3819, 1530, 3819,  115,  129,
      217, 1503, 3819,    0, 1500, 1498, 3819,    0,  358, 1482,
      376, 3819,    0,  402,    0,  444,   83,   70,    0,   79,
      170,  187,  177,  187,  193,  208,  221,  230,  246,  284,
      243,  245,  241,  239, 1493,  267,  287,    0,  303,  296,
      448,  295,  299,  307,  452,    0,    0,    0,  305,  310,
      308,  307,  347, 3819,    0,  506, 1480,  385, 1479,  550,

        0,  594,  420,  636,  384,  436,  441,  448,  452, 1490,
      458,  456,  457,  449,  460,  463,  464,  459,  464, 1480,
      508,  289,  640, 1462,  515,  525,  523,  560,  571,  569,
      597,  610, 1450,  604,  627,  639,  645,  648,  643,  649,
      643,  690,  524, 1430, 1429, 1428,  736,  570,  708,  780,
      822,  754,  864,  756,    0,  646, 1439,  743,  751,  794,
     1438,  786, 1437,    0,  800,  786,  803,  818,  868,    0,
     1423,  868,  832,  873,  856,  861,  874,  873,  864,  881,
      865,  881,  872,  911, 1345,  885,  914, 1344,  898,  914,
      904, 1343,  940, 1330, 1329, 1319, 1281,  717,  968, 1010,

      986, 1028, 1054, 1072, 1098, 1116, 1280,  904,  902,  909,
      922,  904,  921,  915, 1111,  983,  991,    0, 1053, 1060,
     1108, 1103, 1114, 1105, 1120, 1118, 1109, 1127, 1119,    0,
     1129, 1121, 1118, 1114, 1291, 1133, 1120, 1136, 1132, 1132,
     1138, 1149, 1152, 1144, 1148, 1162, 1144, 1152, 1290, 1154,
     1169, 1277, 1276, 1274, 1273, 1194, 1211, 1229, 1255, 1273,
     1238, 1299, 1184, 1311, 1353, 1329, 1174, 1200, 1248, 1272,
     1320, 1188, 1317,    0, 1322, 1325, 1328, 1351,    0, 1343,
     1186, 1353, 1355, 1346, 1365, 1357, 1356, 1367, 1360, 1356,
     1369, 1358,    0, 1372, 1091, 1375, 1377, 1090, 1089, 1367,

        0, 1375, 1371, 1390, 1401, 1088,    0, 1392, 1388, 1397,
     1087, 1401, 1074, 1073, 1072, 1425, 1448, 1044, 1460, 1502,
     1478, 1520, 1546, 1557, 1575, 1601, 1619, 1466, 1047, 1481,
     1518, 1564, 1611, 1561,    0, 1600, 1605, 1617, 1618, 1611,
     1621, 1619, 1630, 1631, 1632, 1625, 1621, 1639, 1619, 1633,
     1621, 1640, 1650, 1640, 1649, 1638, 1657,    0, 1658, 1649,
     1658, 1654, 1656, 1661,    0, 1667, 1658, 1660, 1034, 1033,
     1032, 1031, 1697, 1716, 1727, 1745, 1771, 1789, 1754, 1815,
     1030, 1827, 1869, 1845, 1734, 1767, 1772, 1845, 1849, 1839,
     1838, 1857, 1875,    0, 1876, 1868, 1041, 1868,    0, 1866,

     1873,    0,    0, 1885, 1865, 1879, 1884, 1883, 1886, 1040,
     1887, 1880, 1873, 1897, 1882, 1895, 1900, 1915, 1903, 1917,
     1919, 1919, 1910,    0,  994,  993,  991, 1941, 1964,  990,
     1976, 2018, 1994, 2003, 2062, 2036, 2106, 2080, 2005, 2017,
     1001, 2054, 2075, 2087, 2101, 2115, 2099,    0, 2098, 2106,
     2116, 2102,    0, 2113, 2118, 2110, 2107,    0, 2108, 2120,
     2115, 2115, 2111, 2112, 2111, 2126, 2141, 2151,    0, 2158,
        0, 2157, 2158,  988,  987,  986,  976, 2176, 2201, 2219,
     2245, 2263, 2289,  958, 2301, 2343, 2319, 2164, 2208, 2256,
     2304, 2320, 2323, 2322, 2334,    0, 2353, 2340, 2351,    0,

     2343, 2340,    0,    0,    0, 2350, 2355, 2356, 2353, 2358,
     2342, 2350,    0,    0, 2348,  963, 2347, 2365,  942,  889,
      846, 2406,  845, 2418, 2460, 2436, 2504, 2478, 2548, 2522,
        0, 2422, 2446,  856, 2508,  855,    0, 2515, 2518, 2553,
        0, 3819, 3819, 2552, 2541, 2553, 2541,  854, 2557, 2560,
     2551, 2551, 2557,    0,  841,  840,  839,  837, 2604, 2622,
     2648, 2666, 2692,  836, 2704, 2746, 2722,    0, 2562, 2599,
        0, 2740,    0,    0, 2625, 2663, 2706, 2728,    0, 2729,
     2728, 2742,    0, 2743, 2747,  835,  834,  833, 2798,  802,
     2810, 2852, 2772, 2896, 2828, 2940, 2870,  813, 2757, 2830,

     2844,    0, 2857, 2881, 2884, 2918,    0, 2908,  812, 2944,
      799,  798,  797,  795, 2987, 2961, 3031, 3005, 3049,  794,
     3075, 3117, 3093, 2933, 2975,  797, 3012, 3048, 3080, 3090,
     3097, 3095, 3099,    0,  792,  791,  790,    0, 3139,  789,
     3161, 3203, 3179, 3247, 3221, 3291, 3265, 3180, 3195,    0,
      428, 3242,    0, 3257, 3268,    0, 3285,  760,  759,  758,
      757,  756, 3338, 3312, 3382, 3356, 3400,  755, 3426,    0,
     3444, 3285, 3331,    0,  214,  755,  734, 3351, 3350, 3392,
     3423,  723,  672, 3819,  670,    0, 3480,  662, 3492, 3510,
     3536, 3554,    0, 3445, 3496,  666,  663,  664,  665,    0,

        0, 3498, 3534,  657,  656,  655,  617, 3592, 3580, 3610,
      616,    0, 3551, 3573,    0,    0,    0,    0,    0, 3591,
      615,  614,  613,    0, 3636, 3819,    0, 3592,    0, 3598,
      612,  611,  609, 3819, 3593, 3607,  608,  607,  606,    0,
        0,    0,  605,  604,  603,  574,  573,  572,    0,  571,
      570,  560,    0,  530,  529,    0,  528,  527,  526,  525,
      427,  426,    0,  425,  423, 3819, 3662, 3666, 3670, 3674,
     3678, 3682, 3684,  429, 3686, 3688, 3690, 3692, 3694, 3696,
     3698, 3700, 3702, 3704, 3706, 3708, 3710, 3712, 3714, 3716,
     3718, 3720, 3722, 3724, 3726, 3728, 3730, 3732, 3734, 3736,

     3738, 3740, 3742, 3744, 3746, 3748, 3750, 3752, 3754, 3756,
      356, 3758, 3760, 3762,  354, 3764, 3766, 3768,  351,  350,
     3770, 3772, 3774,  285, 3776, 3778,  282,  280, 3780, 3782,
     3784, 3786, 3788,  231, 3790, 3792, 3794, 3796, 3798,  224,
     3800, 3802, 3804,  207, 3806,  143, 3808, 3810, 3812,   79,
     3814
    } ;

static yyconst flex_int16_t yy_def[852] =
    {   0,
      766,    1,  767,  767,  768,  768,  766,  766,  766,  766,
      766,  769,  770,  771,  766,  766,   16,  766,  766,   19,
       19,   19,   19,   19,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  766,  766,  766,  766,  766,
      766,  769,  766,  770,  771,  766,  766,  772,  766,  773,
       49,  766,  774,  766,   24,   24,   56,   56,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  766,  772,  766,  775,   96,  776,  766,

      774,  766,  102,   56,  104,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  766,  142,  777,  778,  779,  766,  147,  766,  766,
      766,  150,  104,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      766,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  143,  143,  778,  780,  781,  766,  766,  766,

      199,  766,  766,  203,  766,  205,  153,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  766,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  782,  766,  783,  784,  766,  766,  257,  766,  259,
      766,  766,  766,  766,  766,  264,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  766,  766,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  785,  786,  787,  766,  766,  766,  766,  766,
      319,  766,  766,  766,  324,  766,  326,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  766,  766,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  783,  766,
      788,  789,  766,  766,  766,  375,  766,  377,  766,  766,
      766,  766,  766,  382,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,  766,  766,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  790,  791,  792,  766,  766,  766,
      766,  766,  431,  766,  766,  435,  766,  437,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  766,  766,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  793,  766,  794,  795,  766,  766,  479,
      766,  481,  766,  766,  766,  766,  485,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

      766,  766,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  796,  797,
      798,  766,  766,  766,  766,  524,  766,  527,  766,  529,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  766,  766,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  799,  766,  800,  801,  766,  559,
      766,  561,  766,  766,  766,  766,  565,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  802,  803,  804,  766,  766,
      766,  766,  591,  766,  594,  766,  596,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      805,  766,  806,  807,  766,  615,  766,  617,  766,  766,
      766,  766,  621,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  808,  809,  810,  811,  766,  766,
      766,  766,  641,  766,  644,  766,  646,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  812,  766,  813,
      766,  814,  766,  663,  766,  665,  766,  766,  766,  815,
      669,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  816,  817,  766,  818,  819,  766,  766,  766,  689,
      766,  691,  820,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,  821,  766,  822,  823,  766,  708,  766,
      766,  824,   24,   24,   24,   24,   24,   24,   24,   24,
      825,  766,  826,  827,  766,  766,  828,   24,   24,   24,
      829,  830,  831,  766,   24,   24,  832,  766,  833,  834,
       24,   24,  835,  836,  837,  838,  766,  839,  840,  841,
      842,  843,  844,  766,  845,  846,  766,  847,  848,  841,
      766,  849,  850,  851,  766,    0,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,

      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766
    } ;

static yyconst flex_int16_t yy_nxt[3894] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   20,   21,   22,   23,   24,   24,
       25,   24,   24,   26,   24,   27,   28,   29,   24,   30,
       31,   32,   33,   34,   35,   24,   24,   24,   19,   20,
       20,   21,   22,   23,   24,   24,   25,   24,   24,   26,
       24,   27,   28,   29,   24,   30,   31,   32,   33,   34,
       35,   24,   24,   24,   39,   40,   41,   40,   47,  766,
       77,  666,   48,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   50,   51,   51,   51,   51,   51,   51,   68,

       52,   71,   90,   93,   69,  766,   77,   72,  105,   80,
       91,  106,   70,   81,   92,  107,   53,   39,   40,   51,
       51,   51,   51,   51,   51,   68,   52,   71,   90,   93,
       69,   41,   40,   72,  105,   80,   91,  106,   70,   81,
       92,  107,   53,   55,   55,  759,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   50,   56,   56,   56,   57,
       56,   58,   55,   59,   55,   55,   55,   55,   55,   60,
       55,   55,   55,   55,   55,   55,   61,   55,   55,   55,
       55,   55,   56,   56,   56,   57,   56,   58,   55,   59,
       55,   55,   55,   55,   55,   60,   55,   55,   55,   55,

       55,   55,   61,   55,   55,   55,   55,   55,   56,  757,
       56,  108,   56,   78,   56,  109,   73,  110,   55,   39,
       40,  111,   55,  112,   74,   55,  752,   79,  696,   55,
       75,  697,   66,  745,   56,   76,   56,  108,   56,   78,
       56,  109,   73,  110,   55,  113,  114,  111,   55,  112,
       74,   55,   56,   79,   56,   55,   75,   62,   66,   82,
      115,   76,   63,   64,   56,   83,   56,   84,  116,   65,
      119,  113,  114,  120,   55,  121,   85,   67,   56,  122,
       56,   55,  734,   62,  733,   82,  115,  727,   63,   64,
       56,   83,   56,   84,  116,   65,  119,  171,  172,  120,

       55,  121,   85,   67,  124,  122,  117,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,  766,   55,   55,
       55,   55,   55,   55,  118,   55,   86,   87,  125,  126,
      124,   55,  117,  127,  132,   88,  133,  134,   55,  137,
      138,  139,  140,   89,   55,   55,   55,   55,   55,   55,
      118,   55,  712,  707,  125,  126,  693,   55,  662,  127,
      132,   88,  133,  134,   55,  137,  138,  139,  140,   89,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   97,
       98,   98,   98,   98,   98,   98,  141,   52,   98,   98,
       98,   98,   98,   98,   98,   98,   98,  143,  143,  143,

      143,  143,  143,  143,  143,  143,   98,   98,   98,   98,
       98,   98,  141,   52,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  154,  103,  103,  103,  103,  103,  103,
      766,  101,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  674,  675,  676,  763,  677,  763,  763,  756,  154,
      103,  103,  103,  103,  103,  103,  104,  104,  104,  104,
      104,  104,  104,  104,  104,   97,  104,  104,  104,  104,
      104,  104,  128,   59,  135,  155,  156,  157,  158,  129,
      160,  161,  130,  162,  163,  164,  131,  165,  166,  167,
      168,  136,  104,  104,  104,  104,  104,  104,  128,   59,

      135,  155,  156,  157,  158,  129,  160,  161,  130,  162,
      163,  164,  131,  165,  166,  167,  168,  136,  142,  142,
      142,  142,  142,  142,  142,  142,  142,   50,  143,  143,
      143,  143,  143,  143,  170,   52,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  176,  766,  763,  756,  760,
      756,  749,  177,  178,  143,  143,  143,  143,  143,  143,
      170,   52,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  176,  148,  148,  148,  148,  148,  148,  177,  178,
      766,  756,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  749,  684,  749,  740,  750,  179,  180,  148,  148,

      148,  148,  148,  148,  149,  181,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  151,  152,  152,  152,  152,
      152,  152,  179,  180,  749,  740,  661,  740,  724,  638,
      740,  181,  724,  737,  724,  686,  614,  670,  724,  182,
      183,  185,  152,  152,  152,  152,  152,  152,  153,  153,
      153,  153,  153,  153,  153,  153,  153,   50,  153,  153,
      153,  153,  153,  153,  173,  182,  183,  185,  186,  187,
      174,  188,  189,  190,  191,  192,  686,  661,  100,  718,
      717,  716,  715,  642,  153,  153,  153,  153,  153,  153,
      173,  686,  210,  661,  186,  187,  174,  188,  189,  190,

      191,  192,  193,  193,  193,  193,  193,  193,  193,  193,
      193,   50,  194,  194,  194,  194,  194,  194,  210,   52,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  194,  194,
      194,  194,  194,  194,  704,   52,  198,  699,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  200,  201,  201,
      201,  201,  201,  201,  766,  208,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  698,  622,  686,  684,  661,
      614,  558,  209,  212,  201,  201,  201,  201,  201,  201,
      149,  213,  203,  203,  203,  203,  203,  203,  203,  203,

      203,  151,  204,  204,  204,  204,  204,  204,  209,  212,
      592,  661,  614,  100,  650,  566,  638,  213,  614,  558,
      635,  633,  624,  525,  214,  216,  218,  219,  204,  204,
      204,  204,  204,  204,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  220,  206,  206,  206,  206,  206,  206,
      214,  216,  218,  219,  614,  558,  477,  486,  100,  221,
      558,  477,  100,  580,  572,  570,  432,  558,  229,  220,
      206,  206,  206,  206,  206,  206,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  221,  207,  207,  207,  207,
      207,  207,  222,  227,  229,  230,  231,  232,  235,  236,

      233,  223,  224,  225,  234,  237,  238,  239,  228,  240,
      477,  244,  207,  207,  207,  207,  207,  207,  222,  227,
      248,  230,  231,  232,  235,  236,  233,  223,  224,  225,
      234,  237,  238,  239,  228,  240,  241,  244,  245,  249,
      250,  267,  268,  269,  270,  272,  248,  273,  271,  246,
      274,  242,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  766,  241,  555,  245,  249,  250,  267,  268,  269,
      270,  272,  552,  273,  271,  246,  274,  242,  198,  383,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  200,
      258,  258,  258,  258,  258,  258,  766,  100,  258,  258,

      258,  258,  258,  258,  258,  258,  258,  477,  372,  372,
      490,  320,  477,  278,  372,  100,  258,  258,  258,  258,
      258,  258,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  279,  260,  260,  260,  260,  260,  260,  261,  278,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  460,
      450,  265,  100,  372,  255,  425,  386,  279,  260,  260,
      260,  260,  260,  260,  149,  200,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  151,  263,  263,  263,  263,
      263,  263,  766,  280,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  372,  255,  255,  367,  363,  357,  356,

      353,  281,  263,  263,  263,  263,  263,  263,  149,  280,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  265,
      266,  266,  266,  266,  266,  266,  766,  281,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  275,  282,  283,
      284,  285,  286,  287,  276,  289,  266,  266,  266,  266,
      266,  266,  277,  290,  291,  292,  293,  294,  288,  295,
      297,  298,  299,  275,  282,  283,  284,  285,  286,  287,
      276,  289,  300,  301,  302,  303,  304,  305,  277,  290,
      291,  292,  293,  294,  288,  295,  297,  298,  299,  306,
      307,  308,  309,  311,  312,  340,  328,  333,  300,  301,

      302,  303,  304,  305,  316,  151,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  306,  307,  308,  309,  311,
      312,  198,  328,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  200,  318,  318,  318,  318,  318,  318,  766,
      329,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  318,
      318,  318,  318,  318,  318,  198,  329,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  320,  321,  321,  321,
      321,  321,  321,  766,  330,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  100,  255,  331,  146,  100,  310,

      296,  766,  255,  321,  321,  321,  321,  321,  321,  149,
      330,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      151,  149,  331,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  265,  325,  325,  325,  325,  325,  325,  766,
      146,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      252,  766,  251,  247,  243,  332,  334,  335,  336,  325,
      325,  325,  325,  325,  325,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  337,  327,  327,  327,  327,  327,
      327,  332,  334,  335,  336,  338,  339,  341,  342,  343,
      344,  345,  346,  347,  348,  349,  350,  351,  352,  354,

      337,  327,  327,  327,  327,  327,  327,  355,  358,  359,
      360,  338,  339,  341,  342,  343,  344,  345,  346,  347,
      348,  349,  350,  351,  352,  354,  361,  362,  364,  365,
      366,  368,  226,  355,  358,  359,  360,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  217,  215,  211,  100,
      146,  146,  361,  362,  364,  365,  366,  368,  198,  184,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  200,
      198,  175,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  320,  376,  376,  376,  376,  376,  376,  766,  169,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  159,

      146,  100,  123,  100,   45,  385,   46,   43,  376,  376,
      376,  376,  376,  376,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  387,  378,  378,  378,  378,  378,  378,
      379,  385,  322,  322,  322,  322,  322,  322,  322,  322,
      322,   94,  388,   54,   46,   43,  766,   37,   37,  387,
      378,  378,  378,  378,  378,  378,  149,  766,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  149,  388,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  265,  381,
      381,  381,  381,  381,  381,  766,  389,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  766,  766,  766,  766,

      766,  766,  766,  766,  393,  381,  381,  381,  381,  381,
      381,  149,  389,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  383,  384,  384,  384,  384,  384,  384,  766,
      393,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      390,  394,  395,  396,  397,  398,  391,  399,  392,  384,
      384,  384,  384,  384,  384,  400,  401,  402,  403,  404,
      405,  406,  407,  408,  409,  410,  390,  394,  395,  396,
      397,  398,  391,  399,  392,  411,  412,  413,  414,  415,
      416,  400,  401,  402,  403,  404,  405,  406,  407,  408,
      409,  410,  417,  418,  419,  420,  421,  422,  423,  424,

      766,  411,  412,  413,  414,  415,  416,  428,  766,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  417,  418,
      419,  420,  421,  422,  423,  424,  198,  766,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  198,  766,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  320,  430,
      430,  430,  430,  430,  430,  766,  439,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  430,  430,  430,  430,  430,
      430,  198,  439,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  432,  433,  433,  433,  433,  433,  433,  766,

      440,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      766,  766,  441,  766,  766,  766,  766,  766,  766,  433,
      433,  433,  433,  433,  433,  149,  440,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  265,  149,  441,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  383,  436,
      436,  436,  436,  436,  436,  766,  766,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  766,  766,  766,  766,
      766,  442,  443,  444,  445,  436,  436,  436,  436,  436,
      436,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      446,  438,  438,  438,  438,  438,  438,  442,  443,  444,

      445,  447,  448,  449,  451,  452,  453,  454,  455,  456,
      457,  458,  459,  461,  462,  463,  446,  438,  438,  438,
      438,  438,  438,  464,  465,  466,  467,  447,  448,  449,
      451,  452,  453,  454,  455,  456,  457,  458,  459,  461,
      462,  463,  468,  469,  470,  471,  472,  473,  766,  464,
      465,  466,  467,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  766,  766,  766,  766,  766,  766,  468,  469,
      470,  471,  472,  473,  198,  766,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  320,  198,  766,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  432,  480,  480,

      480,  480,  480,  480,  766,  766,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  480,  480,  480,  480,  480,  480,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  488,
      482,  482,  482,  482,  482,  482,  766,  489,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  766,  766,  766,
      766,  766,  766,  766,  766,  488,  482,  482,  482,  482,
      482,  482,  149,  489,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  383,  484,  484,  484,  484,  484,  484,
      766,  491,  487,  487,  487,  487,  487,  487,  487,  487,

      487,  766,  766,  766,  766,  766,  766,  766,  492,  493,
      484,  484,  484,  484,  484,  484,  149,  491,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  486,  487,  487,
      487,  487,  487,  487,  492,  493,  494,  495,  496,  497,
      498,  499,  500,  501,  502,  503,  504,  505,  508,  509,
      510,  511,  512,  506,  487,  487,  487,  487,  487,  487,
      507,  513,  494,  495,  496,  497,  498,  499,  500,  501,
      502,  503,  504,  505,  508,  509,  510,  511,  512,  506,
      514,  515,  516,  517,  518,  766,  507,  513,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  766,  766,  766,

      766,  766,  766,  766,  531,  766,  514,  515,  516,  517,
      518,  198,  766,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  432,  523,  523,  523,  523,  523,  523,  766,
      531,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      766,  766,  766,  766,  766,  766,  766,  766,  532,  523,
      523,  523,  523,  523,  523,  198,  766,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  525,  526,  526,  526,
      526,  526,  526,  766,  532,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  766,  766,  533,  766,  766,  766,
      766,  766,  766,  526,  526,  526,  526,  526,  526,  149,

      766,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      383,  149,  533,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  486,  528,  528,  528,  528,  528,  528,  766,
      766,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      766,  766,  766,  766,  766,  534,  535,  536,  537,  528,
      528,  528,  528,  528,  528,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  538,  530,  530,  530,  530,  530,
      530,  534,  535,  536,  537,  539,  540,  541,  542,  543,
      544,  545,  546,  547,  548,  549,  550,  551,  553,  554,
      538,  530,  530,  530,  530,  530,  530,  766,  766,  766,

      766,  539,  540,  541,  542,  543,  544,  545,  546,  547,
      548,  549,  550,  551,  553,  554,  198,  766,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  432,  198,  766,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  525,
      560,  560,  560,  560,  560,  560,  766,  766,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  766,  766,  766,
      766,  766,  766,  568,  766,  766,  560,  560,  560,  560,
      560,  560,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  569,  562,  562,  562,  562,  562,  562,  766,  568,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  766,

      766,  766,  766,  766,  766,  766,  766,  569,  562,  562,
      562,  562,  562,  562,  149,  766,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  486,  564,  564,  564,  564,
      564,  564,  766,  571,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  766,  766,  766,  766,  766,  766,  766,
      573,  574,  564,  564,  564,  564,  564,  564,  149,  571,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  566,
      567,  567,  567,  567,  567,  567,  573,  574,  575,  576,
      577,  578,  579,  581,  582,  583,  584,  585,  766,  598,
      766,  766,  766,  766,  766,  766,  567,  567,  567,  567,

      567,  567,  766,  766,  575,  576,  577,  578,  579,  581,
      582,  583,  584,  585,  198,  598,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  525,  590,  590,  590,  590,
      590,  590,  766,  599,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  766,  766,  766,  766,  766,  766,  766,
      766,  602,  590,  590,  590,  590,  590,  590,  198,  599,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  592,
      593,  593,  593,  593,  593,  593,  766,  602,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  766,  766,  603,
      766,  766,  766,  766,  766,  766,  593,  593,  593,  593,

      593,  593,  149,  766,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  486,  149,  603,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  566,  595,  595,  595,  595,
      595,  595,  766,  766,  595,  595,  595,  595,  595,  595,
      595,  595,  595,  766,  766,  766,  766,  766,  766,  604,
      605,  606,  595,  595,  595,  595,  595,  595,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  607,  597,  597,
      597,  597,  597,  597,  600,  604,  605,  606,  608,  609,
      601,  610,  766,  625,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  607,  597,  597,  597,  597,  597,  597,

      600,  766,  766,  766,  608,  609,  601,  610,  198,  625,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  525,
      198,  766,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  592,  616,  616,  616,  616,  616,  616,  766,  766,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  766,
      766,  766,  766,  766,  766,  626,  766,  766,  616,  616,
      616,  616,  616,  616,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  627,  618,  618,  618,  618,  618,  618,
      766,  626,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  766,  766,  766,  766,  766,  766,  766,  628,  627,

      618,  618,  618,  618,  618,  618,  149,  629,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  566,  620,  620,
      620,  620,  620,  620,  628,  630,  766,  766,  766,  766,
      766,  766,  766,  629,  766,  766,  766,  766,  766,  766,
      766,  766,  631,  632,  620,  620,  620,  620,  620,  620,
      149,  630,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  622,  623,  623,  623,  623,  623,  623,  631,  632,
      634,  766,  648,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  766,  766,  766,  766,  766,  766,  623,  623,
      623,  623,  623,  623,  766,  766,  634,  198,  648,  639,

      639,  639,  639,  639,  639,  639,  639,  639,  592,  640,
      640,  640,  640,  640,  640,  766,  649,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  766,  766,  766,  766,
      766,  766,  766,  766,  651,  640,  640,  640,  640,  640,
      640,  198,  649,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  642,  643,  643,  643,  643,  643,  643,  149,
      651,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      566,  766,  766,  766,  766,  766,  766,  766,  652,  643,
      643,  643,  643,  643,  643,  149,  766,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  622,  645,  645,  645,

      645,  645,  645,  766,  652,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  766,  766,  766,  766,  766,  653,
      654,  655,  656,  645,  645,  645,  645,  645,  645,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  657,  647,
      647,  647,  647,  647,  647,  653,  654,  655,  656,  198,
      766,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      592,  766,  766,  766,  657,  647,  647,  647,  647,  647,
      647,  198,  766,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  642,  664,  664,  664,  664,  664,  664,  766,
      766,  664,  664,  664,  664,  664,  664,  664,  664,  664,

      766,  766,  766,  766,  766,  766,  672,  766,  766,  664,
      664,  664,  664,  664,  664,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  673,  666,  666,  666,  666,  666,
      666,  766,  672,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  766,  766,  766,  766,  766,  766,  766,  766,
      673,  666,  666,  666,  666,  666,  666,  149,  766,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  622,  668,
      668,  668,  668,  668,  668,  766,  678,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  766,  766,  766,  766,
      766,  766,  766,  679,  680,  668,  668,  668,  668,  668,

      668,  149,  678,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  670,  671,  671,  671,  671,  671,  671,  679,
      680,  681,  766,  694,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  766,  766,  766,  766,  766,  766,  671,
      671,  671,  671,  671,  671,  766,  766,  681,  198,  694,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  642,
      688,  688,  688,  688,  688,  688,  766,  695,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  700,  766,  766,
      766,  766,  766,  766,  766,  701,  688,  688,  688,  688,
      688,  688,  198,  695,  689,  689,  689,  689,  689,  689,

      689,  689,  689,  700,  690,  690,  690,  690,  690,  690,
      149,  701,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  622,  766,  766,  766,  766,  766,  766,  766,  702,
      690,  690,  690,  690,  690,  690,  149,  766,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  670,  692,  692,
      692,  692,  692,  692,  766,  702,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  703,  766,  766,  766,  766,
      766,  766,  766,  766,  692,  692,  692,  692,  692,  692,
      766,  766,  766,  766,  766,  766,  766,  713,  766,  766,
      198,  703,  374,  374,  374,  374,  374,  374,  374,  374,

      374,  642,  198,  766,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  713,  709,  709,  709,  709,  709,  709,
      766,  714,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  766,  766,  766,  766,  766,  766,  766,  766,  719,
      709,  709,  709,  709,  709,  709,  149,  714,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  670,  711,  711,
      711,  711,  711,  711,  766,  719,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  720,  766,  728,  766,  766,
      766,  766,  766,  766,  711,  711,  711,  711,  711,  711,
      766,  766,  726,  726,  726,  726,  726,  726,  726,  726,

      726,  720,  198,  728,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  729,  726,  726,  726,  726,  726,  726,
      149,  730,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  670,  735,  736,  741,  742,  766,  766,  766,  729,
      726,  726,  726,  726,  726,  726,  198,  730,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  766,  735,  736,
      741,  742,   36,   36,   36,   36,   38,   38,   38,   38,
       42,   42,   42,   42,   44,  766,   44,   44,   45,   45,
       45,   45,   95,  766,   95,   95,   99,   99,  144,  144,
      145,  145,  195,  195,  196,  196,  197,  197,  253,  253,

      254,  254,  313,  313,  314,  314,  315,  315,  369,  369,
      370,  370,  371,  371,  426,  426,  427,  427,  474,  474,
      475,  475,  476,  476,  519,  519,  520,  520,  521,  521,
      426,  426,  556,  556,  557,  557,  586,  586,  587,  587,
      588,  588,  611,  611,  612,  612,  613,  613,  520,  520,
      636,  636,  637,  637,  658,  658,  659,  659,  660,  660,
      682,  682,  683,  683,  685,  685,  587,  587,  705,  705,
      706,  706,  721,  721,  722,  722,  723,  723,  731,  731,
      732,  732,  636,  636,  738,  738,  739,  739,  743,  743,
      744,  744,  746,  746,  747,  747,  748,  748,  683,  683,

      751,  751,  753,  753,  754,  754,  755,  755,  758,  758,
      761,  761,  762,  762,  764,  764,  765,  765,    7,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766

    } ;

static yyconst flex_int16_t yy_chk[3894] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   10,   10,   11,   11,   15,   17,
       28,  850,   15,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   25,

       16,   26,   33,   35,   25,   17,   28,   26,   57,   30,
       34,   58,   25,   30,   34,   60,   16,   39,   39,   16,
       16,   16,   16,   16,   16,   25,   16,   26,   33,   35,
       25,   40,   40,   26,   57,   30,   34,   58,   25,   30,
       34,   60,   16,   19,   19,  846,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   20,  844,
       20,   61,   22,   29,   22,   62,   27,   63,   20,   41,
       41,   64,   22,   65,   27,   20,  840,   29,  675,   22,
       27,  675,   22,  834,   20,   27,   20,   61,   22,   29,
       22,   62,   27,   63,   20,   66,   67,   64,   22,   65,
       27,   20,   21,   29,   21,   22,   27,   21,   22,   31,
       68,   27,   21,   21,   23,   31,   23,   31,   69,   21,
       71,   66,   67,   72,   23,   73,   31,   23,   21,   74,
       21,   23,  828,   21,  827,   31,   68,  824,   21,   21,
       23,   31,   23,   31,   69,   21,   71,  122,  122,   72,

       23,   73,   31,   23,   76,   74,   70,   23,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   70,   24,   32,   32,   77,   79,
       76,   24,   70,   80,   82,   32,   83,   84,   24,   89,
       90,   91,   92,   32,   24,   24,   24,   24,   24,   24,
       70,   24,  820,  819,   77,   79,  815,   24,  811,   80,
       82,   32,   83,   84,   24,   89,   90,   91,   92,   32,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   93,   49,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   98,   98,   98,

       98,   98,   98,   98,   98,   98,   49,   49,   49,   49,
       49,   49,   93,   49,   54,   54,   54,   54,   54,   54,
       54,   54,   54,  105,   54,   54,   54,   54,   54,   54,
      103,  774,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  651,  651,  651,  765,  651,  764,  762,  761,  105,
       54,   54,   54,   54,   54,   54,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   81,   56,   85,  106,  107,  108,  109,   81,
      111,  112,   81,  113,  114,  115,   81,  116,  117,  118,
      119,   85,   56,   56,   56,   56,   56,   56,   81,   56,

       85,  106,  107,  108,  109,   81,  111,  112,   81,  113,
      114,  115,   81,  116,  117,  118,  119,   85,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,  121,   96,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  125,  760,  759,  758,  757,
      755,  754,  126,  127,   96,   96,   96,   96,   96,   96,
      121,   96,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  125,  100,  100,  100,  100,  100,  100,  126,  127,
      148,  752,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  751,  750,  748,  747,  746,  128,  129,  100,  100,

      100,  100,  100,  100,  102,  130,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  128,  129,  745,  744,  743,  739,  738,  737,
      733,  130,  732,  731,  723,  722,  721,  711,  707,  131,
      132,  134,  102,  102,  102,  102,  102,  102,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  123,  131,  132,  134,  135,  136,
      123,  137,  138,  139,  140,  141,  706,  705,  704,  699,
      698,  697,  696,  688,  104,  104,  104,  104,  104,  104,
      123,  685,  156,  683,  135,  136,  123,  137,  138,  139,

      140,  141,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  156,  142,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  142,  142,
      142,  142,  142,  142,  682,  142,  147,  677,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  152,  154,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  676,  668,  662,  661,  660,
      659,  658,  154,  158,  147,  147,  147,  147,  147,  147,
      150,  159,  150,  150,  150,  150,  150,  150,  150,  150,

      150,  150,  150,  150,  150,  150,  150,  150,  154,  158,
      640,  637,  636,  635,  626,  620,  614,  159,  613,  612,
      611,  609,  598,  590,  160,  162,  165,  166,  150,  150,
      150,  150,  150,  150,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  167,  151,  151,  151,  151,  151,  151,
      160,  162,  165,  166,  588,  587,  586,  564,  558,  168,
      557,  556,  555,  548,  536,  534,  523,  521,  173,  167,
      151,  151,  151,  151,  151,  151,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  168,  153,  153,  153,  153,
      153,  153,  169,  172,  173,  174,  175,  176,  178,  179,

      177,  169,  169,  169,  177,  180,  181,  182,  172,  183,
      520,  186,  153,  153,  153,  153,  153,  153,  169,  172,
      189,  174,  175,  176,  178,  179,  177,  169,  169,  169,
      177,  180,  181,  182,  172,  183,  184,  186,  187,  190,
      191,  208,  209,  210,  211,  212,  189,  213,  211,  187,
      214,  184,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  184,  519,  187,  190,  191,  208,  209,  210,
      211,  212,  516,  213,  211,  187,  214,  184,  199,  484,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  201,  477,  201,  201,

      201,  201,  201,  201,  201,  201,  201,  476,  475,  474,
      441,  430,  427,  216,  426,  425,  199,  199,  199,  199,
      199,  199,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  217,  200,  200,  200,  200,  200,  200,  202,  216,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  410,
      397,  381,  372,  371,  370,  369,  329,  217,  200,  200,
      200,  200,  200,  200,  203,  318,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  204,  219,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  315,  314,  313,  311,  306,  299,  298,

      295,  220,  203,  203,  203,  203,  203,  203,  205,  219,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  206,  220,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  215,  221,  222,
      223,  224,  225,  226,  215,  227,  205,  205,  205,  205,
      205,  205,  215,  228,  229,  231,  232,  233,  226,  234,
      236,  237,  238,  215,  221,  222,  223,  224,  225,  226,
      215,  227,  239,  240,  241,  242,  243,  244,  215,  228,
      229,  231,  232,  233,  226,  234,  236,  237,  238,  245,
      246,  247,  248,  250,  251,  281,  267,  272,  239,  240,

      241,  242,  243,  244,  256,  263,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  245,  246,  247,  248,  250,
      251,  257,  267,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  258,
      268,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  257,
      257,  257,  257,  257,  257,  259,  268,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  260,  269,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  255,  254,  270,  253,  252,  249,

      235,  207,  197,  259,  259,  259,  259,  259,  259,  262,
      269,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  264,  270,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  266,
      196,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      195,  194,  192,  188,  185,  271,  273,  275,  276,  264,
      264,  264,  264,  264,  264,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  277,  265,  265,  265,  265,  265,
      265,  271,  273,  275,  276,  278,  280,  282,  283,  284,
      285,  286,  287,  288,  289,  290,  291,  292,  294,  296,

      277,  265,  265,  265,  265,  265,  265,  297,  300,  302,
      303,  278,  280,  282,  283,  284,  285,  286,  287,  288,
      289,  290,  291,  292,  294,  296,  304,  305,  308,  309,
      310,  312,  171,  297,  300,  302,  303,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  163,  161,  157,  146,
      145,  144,  304,  305,  308,  309,  310,  312,  317,  133,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      319,  124,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  321,  120,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  110,

       99,   97,   75,   50,   46,  328,   45,   42,  319,  319,
      319,  319,  319,  319,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  330,  320,  320,  320,  320,  320,  320,
      322,  328,  322,  322,  322,  322,  322,  322,  322,  322,
      322,   37,  331,   18,   14,   12,    7,    4,    3,  330,
      320,  320,  320,  320,  320,  320,  323,    0,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  324,  331,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  325,  332,  325,  325,  325,
      325,  325,  325,  325,  325,  325,    0,    0,    0,    0,

        0,    0,    0,    0,  334,  324,  324,  324,  324,  324,
      324,  326,  332,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  327,
      334,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      333,  336,  337,  338,  339,  340,  333,  341,  333,  326,
      326,  326,  326,  326,  326,  342,  343,  344,  345,  346,
      347,  348,  349,  350,  351,  352,  333,  336,  337,  338,
      339,  340,  333,  341,  333,  353,  354,  355,  356,  357,
      359,  342,  343,  344,  345,  346,  347,  348,  349,  350,
      351,  352,  360,  361,  362,  363,  364,  366,  367,  368,

        0,  353,  354,  355,  356,  357,  359,  373,    0,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  360,  361,
      362,  363,  364,  366,  367,  368,  374,    0,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  375,    0,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  376,  385,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  375,  375,  375,  375,  375,
      375,  377,  385,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  378,

      386,  378,  378,  378,  378,  378,  378,  378,  378,  378,
        0,    0,  387,    0,    0,    0,    0,    0,    0,  377,
      377,  377,  377,  377,  377,  380,  386,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  382,  387,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  384,    0,  384,  384,  384,
      384,  384,  384,  384,  384,  384,    0,    0,    0,    0,
        0,  388,  389,  390,  391,  382,  382,  382,  382,  382,
      382,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      392,  383,  383,  383,  383,  383,  383,  388,  389,  390,

      391,  393,  395,  396,  398,  400,  401,  404,  405,  406,
      407,  408,  409,  411,  412,  413,  392,  383,  383,  383,
      383,  383,  383,  414,  415,  416,  417,  393,  395,  396,
      398,  400,  401,  404,  405,  406,  407,  408,  409,  411,
      412,  413,  418,  419,  420,  421,  422,  423,    0,  414,
      415,  416,  417,  428,  428,  428,  428,  428,  428,  428,
      428,  428,    0,    0,    0,    0,    0,    0,  418,  419,
      420,  421,  422,  423,  429,    0,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  431,    0,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,

      431,  431,  431,  431,  433,    0,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  431,  431,  431,  431,  431,  431,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  439,
      432,  432,  432,  432,  432,  432,  436,  440,  436,  436,
      436,  436,  436,  436,  436,  436,  436,    0,    0,    0,
        0,    0,    0,    0,    0,  439,  432,  432,  432,  432,
      432,  432,  435,  440,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      438,  442,  438,  438,  438,  438,  438,  438,  438,  438,

      438,    0,    0,    0,    0,    0,    0,    0,  443,  444,
      435,  435,  435,  435,  435,  435,  437,  442,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  443,  444,  445,  446,  447,  449,
      450,  451,  452,  454,  455,  456,  457,  459,  461,  462,
      463,  464,  465,  460,  437,  437,  437,  437,  437,  437,
      460,  466,  445,  446,  447,  449,  450,  451,  452,  454,
      455,  456,  457,  459,  461,  462,  463,  464,  465,  460,
      467,  468,  470,  472,  473,    0,  460,  466,  478,  478,
      478,  478,  478,  478,  478,  478,  478,    0,    0,    0,

        0,    0,    0,    0,  488,    0,  467,  468,  470,  472,
      473,  479,    0,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  480,
      488,  480,  480,  480,  480,  480,  480,  480,  480,  480,
        0,    0,    0,    0,    0,    0,    0,    0,  489,  479,
      479,  479,  479,  479,  479,  481,    0,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  482,  489,  482,  482,  482,  482,  482,
      482,  482,  482,  482,    0,    0,  490,    0,    0,    0,
        0,    0,    0,  481,  481,  481,  481,  481,  481,  483,

        0,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  485,  490,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  487,
        0,  487,  487,  487,  487,  487,  487,  487,  487,  487,
        0,    0,    0,    0,    0,  491,  492,  493,  494,  485,
      485,  485,  485,  485,  485,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  495,  486,  486,  486,  486,  486,
      486,  491,  492,  493,  494,  497,  498,  499,  501,  502,
      506,  507,  508,  509,  510,  511,  512,  515,  517,  518,
      495,  486,  486,  486,  486,  486,  486,    0,    0,    0,

        0,  497,  498,  499,  501,  502,  506,  507,  508,  509,
      510,  511,  512,  515,  517,  518,  522,    0,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  524,    0,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  526,    0,  526,  526,
      526,  526,  526,  526,  526,  526,  526,    0,    0,    0,
        0,    0,    0,  532,    0,    0,  524,  524,  524,  524,
      524,  524,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  533,  525,  525,  525,  525,  525,  525,  528,  532,
      528,  528,  528,  528,  528,  528,  528,  528,  528,    0,

        0,    0,    0,    0,    0,    0,    0,  533,  525,  525,
      525,  525,  525,  525,  527,    0,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  530,  535,  530,  530,  530,  530,  530,  530,
      530,  530,  530,    0,    0,    0,    0,    0,    0,    0,
      538,  539,  527,  527,  527,  527,  527,  527,  529,  535,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  538,  539,  540,  544,
      545,  546,  547,  549,  550,  551,  552,  553,    0,  569,
        0,    0,    0,    0,    0,    0,  529,  529,  529,  529,

      529,  529,    0,    0,  540,  544,  545,  546,  547,  549,
      550,  551,  552,  553,  559,  569,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  560,  570,  560,  560,  560,  560,  560,  560,
      560,  560,  560,    0,    0,    0,    0,    0,    0,    0,
        0,  575,  559,  559,  559,  559,  559,  559,  561,  570,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  562,  575,  562,  562,
      562,  562,  562,  562,  562,  562,  562,    0,    0,  576,
        0,    0,    0,    0,    0,    0,  561,  561,  561,  561,

      561,  561,  563,    0,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  565,  576,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  567,    0,  567,  567,  567,  567,  567,  567,
      567,  567,  567,    0,    0,    0,    0,    0,    0,  577,
      578,  580,  565,  565,  565,  565,  565,  565,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  581,  566,  566,
      566,  566,  566,  566,  572,  577,  578,  580,  582,  584,
      572,  585,  593,  599,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  581,  566,  566,  566,  566,  566,  566,

      572,    0,    0,    0,  582,  584,  572,  585,  589,  599,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      591,    0,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  595,    0,
      595,  595,  595,  595,  595,  595,  595,  595,  595,    0,
        0,    0,    0,    0,    0,  600,    0,    0,  591,  591,
      591,  591,  591,  591,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  601,  592,  592,  592,  592,  592,  592,
      597,  600,  597,  597,  597,  597,  597,  597,  597,  597,
      597,    0,    0,    0,    0,    0,    0,    0,  603,  601,

      592,  592,  592,  592,  592,  592,  594,  604,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  603,  605,    0,    0,    0,    0,
        0,    0,    0,  604,    0,    0,    0,    0,    0,    0,
        0,    0,  606,  608,  594,  594,  594,  594,  594,  594,
      596,  605,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  606,  608,
      610,  616,  624,  616,  616,  616,  616,  616,  616,  616,
      616,  616,    0,    0,    0,    0,    0,    0,  596,  596,
      596,  596,  596,  596,    0,    0,  610,  615,  624,  615,

      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  618,  625,  618,  618,  618,
      618,  618,  618,  618,  618,  618,    0,    0,    0,    0,
        0,    0,    0,    0,  627,  615,  615,  615,  615,  615,
      615,  617,  625,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  619,
      627,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,    0,    0,    0,    0,    0,    0,    0,  628,  617,
      617,  617,  617,  617,  617,  621,    0,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,

      621,  621,  621,  623,  628,  623,  623,  623,  623,  623,
      623,  623,  623,  623,    0,    0,    0,    0,    0,  629,
      630,  631,  632,  621,  621,  621,  621,  621,  621,  622,
      622,  622,  622,  622,  622,  622,  622,  622,  633,  622,
      622,  622,  622,  622,  622,  629,  630,  631,  632,  639,
        0,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,    0,    0,    0,  633,  622,  622,  622,  622,  622,
      622,  641,    0,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  643,
        0,  643,  643,  643,  643,  643,  643,  643,  643,  643,

        0,    0,    0,    0,    0,    0,  648,    0,    0,  641,
      641,  641,  641,  641,  641,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  649,  642,  642,  642,  642,  642,
      642,  645,  648,  645,  645,  645,  645,  645,  645,  645,
      645,  645,    0,    0,    0,    0,    0,    0,    0,    0,
      649,  642,  642,  642,  642,  642,  642,  644,    0,  644,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  644,  644,  647,  652,  647,  647,  647,
      647,  647,  647,  647,  647,  647,    0,    0,    0,    0,
        0,    0,    0,  654,  655,  644,  644,  644,  644,  644,

      644,  646,  652,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  654,
      655,  657,  664,  672,  664,  664,  664,  664,  664,  664,
      664,  664,  664,    0,    0,    0,    0,    0,    0,  646,
      646,  646,  646,  646,  646,    0,    0,  657,  663,  672,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  666,  673,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  678,    0,    0,
        0,    0,    0,    0,    0,  679,  663,  663,  663,  663,
      663,  663,  665,  673,  665,  665,  665,  665,  665,  665,

      665,  665,  665,  678,  665,  665,  665,  665,  665,  665,
      667,  679,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,    0,    0,    0,    0,    0,    0,    0,  680,
      665,  665,  665,  665,  665,  665,  669,    0,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  671,  680,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  681,    0,    0,    0,    0,
        0,    0,    0,    0,  669,  669,  669,  669,  669,  669,
        0,    0,    0,    0,    0,    0,    0,  694,    0,    0,
      687,  681,  687,  687,  687,  687,  687,  687,  687,  687,

      687,  687,  689,    0,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  694,  689,  689,  689,  689,  689,  689,
      690,  695,  690,  690,  690,  690,  690,  690,  690,  690,
      690,    0,    0,    0,    0,    0,    0,    0,    0,  702,
      689,  689,  689,  689,  689,  689,  691,  695,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  692,  702,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  703,    0,  713,    0,    0,
        0,    0,    0,    0,  691,  691,  691,  691,  691,  691,
      709,    0,  709,  709,  709,  709,  709,  709,  709,  709,

      709,  703,  708,  713,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  714,  708,  708,  708,  708,  708,  708,
      710,  720,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  728,  730,  735,  736,    0,    0,    0,  714,
      708,  708,  708,  708,  708,  708,  725,  720,  725,  725,
      725,  725,  725,  725,  725,  725,  725,    0,  728,  730,
      735,  736,  767,  767,  767,  767,  768,  768,  768,  768,
      769,  769,  769,  769,  770,    0,  770,  770,  771,  771,
      771,  771,  772,    0,  772,  772,  773,  773,  775,  775,
      776,  776,  777,  777,  778,  778,  779,  779,  780,  780,

      781,  781,  782,  782,  783,  783,  784,  784,  785,  785,
      786,  786,  787,  787,  788,  788,  789,  789,  790,  790,
      791,  791,  792,  792,  793,  793,  794,  794,  795,  795,
      796,  796,  797,  797,  798,  798,  799,  799,  800,  800,
      801,  801,  802,  802,  803,  803,  804,  804,  805,  805,
      806,  806,  807,  807,  808,  808,  809,  809,  810,  810,
      812,  812,  813,  813,  814,  814,  816,  816,  817,  817,
      818,  818,  821,  821,  822,  822,  823,  823,  825,  825,
      826,  826,  829,  829,  830,  830,  831,  831,  832,  832,
      833,  833,  835,  835,  836,  836,  837,  837,  838,  838,

      839,  839,  841,  841,  842,  842,  843,  843,  845,  845,
      847,  847,  848,  848,  849,  849,  851,  851,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766

    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[91] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_ClntParser_stype yylval;
}

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 767 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3819 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
{ return ClntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
{ return ClntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
{ return ClntParser::ADDRESS_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
{ return ClntParser::STRING_KEYWORD_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ return ClntParser::ADDRESS_LIST_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ return ClntParser::NAME_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ return ClntParser::IA_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
{ return ClntParser::TA_; }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ return ClntParser::IAID_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 13:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
{ return ClntParser::LOGLEVEL_; }
	YY_BREAK
case 15:
YY_RULE_SETUP
{ return ClntParser::LOGMODE_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ return ClntParser::LOGNAME_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ return ClntParser::LOGCOLORS_; }
	YY_BREAK
case 18:
YY_RULE_SETUP
{ return ClntParser::WORKDIR_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
{ return ClntParser::SCRIPT_; }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ return ClntParser::VALID_TIME_; }
	YY_BREAK
case 22:
YY_RULE_SETUP
{ return ClntParser::REMOTE_AUTOCONF_; }
	YY_BREAK
case 23:
YY_RULE_SETUP
{ return ClntParser::T1_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
{ return ClntParser::T2_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
{ return ClntParser::OPTION_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
{ return ClntParser::DNS_SERVER_;}
	YY_BREAK
case 27:
YY_RULE_SETUP
{ return ClntParser::DOMAIN_;}
	YY_BREAK
case 28:
YY_RULE_SETUP
{ return ClntParser::NTP_SERVER_;}
	YY_BREAK
case 29:
YY_RULE_SETUP
{ return ClntParser::TIME_ZONE_;}
	YY_BREAK
case 30:
YY_RULE_SETUP
{ return ClntParser::SIP_SERVER_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
{ return ClntParser::SIP_DOMAIN_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
{ return ClntParser::FQDN_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ return ClntParser::FQDN_S_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ return ClntParser::NIS_SERVER_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ return ClntParser::NIS_DOMAIN_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ return ClntParser::NISP_SERVER_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
{ return ClntParser::NISP_DOMAIN_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ return ClntParser::LIFETIME_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ return ClntParser::REJECT_SERVERS_;}
	YY_BREAK
case 40:
YY_RULE_SETUP
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 41:
YY_RULE_SETUP
{ return ClntParser::RAPID_COMMIT_;}
	YY_BREAK
case 42:
YY_RULE_SETUP
{ return ClntParser::RECONFIGURE_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
{ return ClntParser::UNICAST_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
{ return ClntParser::STRICT_RFC_NO_ROUTING_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
{ return ClntParser::PREFIX_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LL_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LLT_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_EN_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ return ClntParser::VENDOR_SPEC_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ return ClntParser::ANON_INF_REQUEST_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ return ClntParser::INSIST_MODE_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ return ClntParser::INACTIVE_MODE_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ return ClntParser::AUTH_ENABLED_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ return ClntParser::AUTH_ACCEPT_METHODS_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ return ClntParser::DIGEST_NONE_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ return ClntParser::DIGEST_PLAIN_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ return ClntParser::SKIP_CONFIRM_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
{ return ClntParser::AFTR_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
{ return ClntParser::EXPERIMENTAL_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ return ClntParser::ADDR_PARAMS_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
{ return ClntParser::REQUEST_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
;
	YY_BREAK
case 72:
YY_RULE_SETUP
;
	YY_BREAK
case 73:
YY_RULE_SETUP
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
BEGIN(INITIAL);
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 76:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 77:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 78:
YY_RULE_SETUP
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 79:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 80:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 81:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 82:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return ClntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return ClntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
{
    // DUID in 0x00010203 format
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return ClntParser::DUID_;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
{
   // DUID in 00:01:02:03 format
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
        x = (toupper(*pos)-'A' + 10);
      else
        x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))	
        x += (toupper(*(pos+1))-'A' + 10);
      else
        x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }
   
   return ClntParser::DUID_;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
{ 
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::HEXNUMBER_;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
{ 
    if(!sscanf(yytext,"%u",(unsigned int*)&(yylval.ival))) { 
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::INTNUMBER_;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
{return yytext[0];} 
	YY_BREAK
case 90:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 767 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 767 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 766);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

