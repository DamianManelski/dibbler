#line 2 "ClntLexer.cpp"

#line 4 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 69
#define YY_END_OF_BUFFER 70
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[621] =
    {   0,
        1,    1,    0,    0,    0,    0,   70,   68,    2,    1,
        1,   68,   51,   68,   68,   67,   67,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   55,   55,   69,    1,    1,    1,
        0,   63,   51,    0,   63,   53,   52,   67,    0,    0,
       66,    0,   60,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,    6,   64,   64,   64,   64,   64,
       64,   64,   64,   39,   64,   64,   64,   64,   64,   64,
       18,   19,    7,   64,   64,   64,   64,   64,   54,   52,
       67,    0,    0,   59,   65,   58,   58,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   67,    0,
        0,    0,   57,   57,    0,   58,    0,   58,   64,   64,
       64,   45,   64,   64,   64,   64,   27,    8,   64,   64,
       64,   64,   64,    0,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   67,    0,    0,    0,    0,   57,    0,   57,    0,
       58,   58,   58,   58,   64,   64,   64,   64,   64,   64,
       64,    3,   64,   64,   64,   64,   64,   64,    0,   64,

       64,   64,    9,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,    0,
        0,    0,    0,   57,   57,   57,   57,    0,   58,   58,
       58,    0,   58,   64,   64,   64,   64,   22,   64,   64,
       64,   64,   64,   64,   64,   64,   64,    0,    0,   64,
       64,   64,   64,   20,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,    0,    0,
        0,   57,   57,   57,    0,   57,    0,    0,   58,   58,
       58,   58,    5,   64,   64,   64,   43,   41,   64,   64,
       64,   64,   64,   64,   64,    0,    0,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   36,   64,   64,   64,    0,    0,    0,    0,    0,
       57,   57,   57,   57,    0,   58,   58,   58,    0,   58,
       64,   64,   64,   64,   42,   64,   64,   64,   32,   64,
       12,   13,    0,    0,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       14,    0,    0,    0,   57,   57,   57,    0,   57,   62,
       58,   58,   58,   58,   64,   64,   64,   64,   40,   64,
       64,   11,    0,    0,   64,   64,    4,   64,   64,   64,
       64,   64,   64,   64,   64,   10,   64,   24,   64,   64,

        0,    0,    0,   61,   57,   57,   57,   57,   58,   58,
       58,    0,   58,   64,   64,   64,   21,   64,   64,    0,
        0,   29,   28,   23,   64,   64,   64,   64,   64,   64,
       26,   25,   64,   64,   64,    0,    0,   57,   57,   57,
        0,   57,   58,   58,   58,   58,   64,   64,   46,   64,
       49,   31,   30,   64,   64,   64,   64,   64,   15,   64,
       64,   44,    0,    0,    0,   57,   57,   57,   57,   58,
       58,   58,    0,   58,   64,   64,   64,   64,   64,   64,
       35,   64,   64,   64,    0,    0,   57,   57,   57,    0,
       57,   58,   58,   58,   58,   64,   64,   50,   64,   64,

       64,   33,   64,   64,    0,    0,    0,   57,   57,   57,
       57,   58,   58,   58,    0,   58,   64,   64,   64,   64,
       64,   64,   17,    0,   56,   59,   57,   57,   57,    0,
       57,   58,   58,   58,   58,   64,   64,   64,   34,   64,
       64,    0,   56,    0,   57,   57,   57,   57,   57,   58,
       58,   58,    0,   58,   64,   47,   64,   64,   64,   56,
       59,   57,    0,   57,   57,   57,   57,   58,   58,   58,
       64,   16,   38,   64,   56,   57,   57,   57,   57,   58,
       58,   58,   64,   64,   57,   57,    0,   57,   57,   58,
       64,   64,   57,   57,   58,   64,   64,   57,   57,    0,

       48,   37,   57,   57,   57,   57,    0,   57,   57,   57,
       57,    0,   57,   57,   57,   57,    0,   57,   57,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   16,   16,   16,   16,   16,   16,   17,    1,    1,
        1,    1,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
        1,    1,    1,    1,    1,    1,   18,   19,   20,   21,

       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[44] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    4,    3,    3,    3,
        3,    3,    3,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[699] =
    {   0,
        0,    0, 1674, 1673,    0,    0, 1680, 1683, 1683,   41,
       43, 1674,    0, 1671,   40,   40, 1636, 1659,   72,   46,
       95,   97,  123,   48,   38,   43, 1642,   99,   50,  127,
      137, 1643,   56, 1641, 1683, 1660, 1683,   46,  119,  121,
     1666, 1683,    0, 1663, 1662, 1683,    0,  152, 1651,  143,
     1683,    0,  165,    0,  169, 1646,    0, 1634, 1628, 1640,
     1627, 1632, 1635, 1639, 1633, 1640,  114, 1634, 1632, 1619,
     1644, 1620, 1615,    0, 1629, 1617, 1622, 1613, 1614,  158,
        0,    0,    0, 1616, 1619, 1615, 1612, 1607, 1683,    0,
      182,  195, 1624,  199,    0,  205,  218,  222, 1605, 1608,

     1613, 1615, 1626, 1617, 1613, 1602, 1611, 1611, 1610, 1603,
     1606, 1617,  120,  226, 1616, 1599, 1601, 1597, 1600, 1595,
     1610, 1582, 1592, 1595, 1596, 1589, 1593, 1585,  240,  234,
     1595, 1594,  255,  268,  272,  278,  289,  295,  299, 1588,
     1567,    0, 1572, 1571, 1580, 1595,    0,    0, 1582, 1566,
     1566, 1564,  294, 1590,  295, 1567, 1580, 1561, 1564,  304,
     1574, 1574, 1560,  306, 1570, 1571, 1580, 1571, 1567, 1555,
     1576,  319, 1568, 1567, 1566,  324,  332,  343,  349,  355,
      361,  374,  380,  393, 1565, 1545, 1550, 1542, 1556, 1546,
      383,    0, 1550, 1538, 1548, 1551, 1540, 1553,  308, 1538,

     1547, 1537,    0, 1545, 1535, 1530, 1523, 1553, 1525, 1524,
     1528, 1537, 1529, 1520, 1513, 1519, 1544, 1518, 1531, 1534,
     1533, 1532,  400,  410,  423,  429,  442,  446,  452, 1531,
      459,  470,  476, 1511, 1514, 1535, 1509,    0, 1512, 1513,
     1499, 1501, 1529, 1508, 1498, 1515, 1505, 1502, 1511, 1502,
     1496, 1507, 1494,    0, 1506, 1517, 1506, 1515, 1488, 1493,
     1487, 1499, 1510, 1487, 1481, 1488, 1506, 1489, 1497, 1496,
      480,  486, 1495,  493,  504,  510,  516,  522,  528,  541,
      547,  560,    0, 1473,  336, 1471,    0, 1472, 1475, 1485,
     1476, 1483, 1482, 1481, 1480, 1471, 1465, 1481, 1459, 1471,

     1457, 1474, 1473, 1461, 1456, 1481, 1472, 1450, 1452, 1452,
     1455,    0, 1459, 1448, 1448, 1465, 1464, 1463,  566,  572,
      578,  591,  597,  610,  614,  620, 1462,  627,  638,  644,
     1442, 1447, 1444, 1453,    0, 1452, 1463, 1440,    0, 1442,
        0,    0, 1452, 1430, 1442, 1445, 1442, 1443, 1454, 1441,
     1432, 1439, 1439, 1433, 1436, 1421, 1433, 1433, 1431, 1420,
        0, 1435, 1434,  648,  654, 1433,  661,  672,  678,  682,
      688,  701,  707,  720, 1439, 1430, 1416, 1411,    0, 1415,
     1423,    0, 1417, 1420, 1410, 1405,    0, 1404,  381, 1409,
     1407, 1401, 1409, 1403, 1398,    0, 1412,    0, 1409, 1408,

     1412, 1411, 1410,  724,  730,  743,  749,  762,  768, 1409,
      775,  786,  792, 1399, 1404, 1401,    0, 1390, 1399, 1389,
     1384,    0,    0,    0, 1392, 1395, 1394, 1389, 1375, 1378,
        0,    0, 1402, 1374, 1390, 1392, 1391,  798, 1390,  805,
      816,  822,  828,  841,  847,  860, 1375, 1301,    0, 1282,
        0, 1683, 1683, 1262, 1243, 1248, 1227, 1237,    0, 1222,
     1214,    0, 1217, 1209, 1204,  866,  879,  885,  898,  904,
     1197,  911,  922,  928, 1185, 1159, 1166, 1160, 1135, 1151,
        0, 1128, 1118, 1114, 1114, 1108,  934, 1095,  941,  952,
      958,  964,  977,  983,  996, 1096, 1064,    0, 1045, 1054,

     1022,    0, 1042, 1024, 1016, 1010,  997, 1002, 1015, 1021,
     1034, 1040,  991, 1047, 1058, 1064,  960,  971,  950,  935,
      927,  911,    0,  923,  906,    0, 1070,  899, 1077, 1088,
     1094, 1100, 1113, 1119, 1132,  888,  883,  861,    0,  846,
      840,  842,  836,  823,  817, 1138, 1151, 1157, 1170, 1176,
      800, 1183,    0, 1196,  776,    0,  782,  756,  742,  757,
     1683,  744,    0, 1202,  738, 1209, 1222, 1228, 1241,    0,
      704,    0,    0,  695,  702,  696,  683, 1247, 1260, 1266,
      673,    0,  651,  640,  639,  622,    0, 1273, 1683,    0,
      596,  591,  592,  586, 1683,  553,  560,  561,  555,    0,

        0,    0,  542,  536,  523,  517,    0,  511,  505,  488,
      481,    0,  471,  454,  447,  437,    0,  424,  418, 1683,
     1289, 1293, 1297, 1301, 1305, 1309, 1311,  419,  416, 1313,
      415, 1315, 1317,  389, 1319, 1321,  383, 1323, 1325,  370,
     1327, 1329,  338, 1331, 1333,  325, 1335, 1337,  304, 1339,
     1341,  287, 1343, 1345,  277, 1347, 1349,  264, 1351, 1353,
      261, 1355, 1357,  248, 1359, 1361,  236,  227, 1363, 1365,
      214, 1367, 1369,  203,  159, 1371, 1373,  157, 1375,  146,
      116, 1377, 1379, 1381,  114, 1383, 1385, 1387,   73, 1389,
     1391, 1393,   70, 1395, 1397, 1399,   48, 1401

    } ;

static yyconst flex_int16_t yy_def[699] =
    {   0,
      620,    1,  621,  621,  622,  622,  620,  620,  620,  620,
      620,  623,  624,  625,  620,  620,   16,  620,  620,   19,
       19,   19,   19,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,  620,  620,  620,  620,  620,  620,
      623,  620,  624,  625,  620,  620,  626,  620,  627,   48,
      620,  628,  629,   23,   23,   55,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,  620,  626,
      620,   91,  630,  631,  628,  620,   96,   55,   98,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,  620,  129,
      632,  633,  620,  133,  620,  620,  634,  136,   98,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,  620,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,  130,  130,  635,  636,  620,  620,  637,  177,  620,
      620,  181,  620,  183,  139,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,  620,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,  620,
      638,  639,  620,  620,  224,  620,  226,  620,  620,  620,
      620,  640,  231,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,  620,  620,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,  641,  642,
      620,  620,  620,  620,  643,  274,  620,  620,  620,  279,
      620,  281,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,  620,  620,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,  620,  644,  645,  620,  620,
      620,  321,  620,  323,  620,  620,  620,  620,  646,  328,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,  620,  620,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,  647,  648,  620,  620,  620,  620,  649,  367,  620,
      620,  371,  620,  373,   23,   23,   23,   23,   23,   23,
       23,   23,  620,  620,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

      620,  650,  651,  620,  620,  405,  620,  407,  620,  620,
      620,  652,  411,   23,   23,   23,   23,   23,   23,  620,
      620,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,  653,  654,  620,  620,  620,
      655,  440,  620,  443,  620,  445,   23,   23,   23,   23,
       23,  620,  620,   23,   23,   23,   23,   23,   23,   23,
       23,   23,  620,  656,  657,  620,  466,  620,  468,  620,
      620,  620,  658,  472,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,  659,  660,  620,  620,  620,  661,
      489,  620,  492,  620,  494,   23,   23,   23,   23,   23,

       23,   23,   23,   23,  620,  662,  663,  620,  508,  620,
      510,  620,  620,  620,  664,  514,   23,   23,   23,   23,
       23,   23,   23,  665,  666,  667,  620,  620,  620,  668,
      529,  620,  532,  620,  534,   23,   23,   23,   23,   23,
       23,  620,  669,  620,  670,  620,  546,  620,  548,  620,
      620,  620,  671,  552,   23,   23,   23,   23,   23,  672,
      620,  673,  674,  620,  620,  620,  566,  620,  568,  675,
       23,   23,   23,   23,  620,  676,  677,  620,  578,  620,
      620,  678,   23,   23,  620,  679,  680,  620,  620,  681,
       23,   23,  682,  683,  620,   23,   23,  620,  684,  685,

       23,   23,  686,  687,  620,  688,  689,  690,  691,  620,
      692,  693,  694,  695,  620,  696,  697,  698,  620,    0,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620

    } ;

static yyconst flex_int16_t yy_nxt[1727] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   18,   19,   20,   20,
       21,   20,   22,   23,   23,   24,   23,   23,   25,   23,
       26,   27,   28,   23,   29,   30,   31,   32,   33,   34,
       23,   23,   23,   38,   39,   40,   39,   46,   38,   39,
      549,   47,   48,   48,   48,   48,   49,   50,   50,   50,
       50,   50,   50,   68,   51,   65,   55,   76,   70,   69,
       66,   77,  614,   86,   71,  609,   54,   87,   67,   72,
       52,   54,   54,   54,   55,   55,   55,   55,   49,   55,
       55,   55,   56,   55,   55,   54,   57,   54,   54,   54,

       54,   54,   58,   54,   54,   54,   54,   54,   54,   59,
       54,   54,   54,   54,   54,   55,  604,   55,  595,   74,
       60,   40,   39,   38,   39,   61,   62,   54,  154,  155,
       64,  109,   63,   75,   54,   54,   54,   54,   54,  620,
       54,   54,   54,   54,   54,   54,   78,   54,  594,  110,
       81,   82,   79,   54,   83,   92,   92,   92,   92,  590,
       54,  582,   84,   80,   91,   91,   91,   91,   49,   92,
       92,   92,   92,   92,   92,  122,   51,   96,   96,   96,
       96,   98,   98,   98,   98,   49,   98,   98,   98,   98,
       98,   98,  123,   57,  129,  129,  129,  129,   49,  130,

      130,  130,  130,  130,  130,  577,   51,  130,  130,  130,
      130,  133,  133,  133,  133,  135,  570,  136,  136,  136,
      136,  137,  138,  138,  138,  138,  138,  138,  620,  549,
      138,  138,  138,  138,  139,  139,  139,  139,  545,  139,
      139,  139,  139,  139,  139,  156,  173,  173,  173,  173,
      535,  157,  172,  172,  172,  172,   49,  173,  173,  173,
      173,  173,  173,  511,   51,  176,  495,  177,  177,  177,
      177,  178,  179,  179,  179,  179,  179,  179,  620,  469,
      179,  179,  179,  179,  180,  180,  180,  180,  135,  446,
      181,  181,  181,  181,  137,  182,  182,  182,  182,  182,

      182,  183,  183,  183,  183,  620,  408,  182,  182,  182,
      182,  185,  185,  185,  185,  200,  185,  185,  185,  185,
      185,  185,  196,  197,  198,  206,  211,  374,  248,  207,
      201,  172,  172,  172,  172,  620,  223,  223,  223,  223,
      324,  212,  176,  249,  224,  224,  224,  224,  178,  225,
      225,  225,  225,  225,  225,  226,  226,  226,  226,  620,
      332,  225,  225,  225,  225,  228,  333,  180,  180,  180,
      180,  135,  282,  229,  229,  229,  229,  137,  230,  230,
      230,  230,  230,  230,  620,  227,  230,  230,  230,  230,
      135,  184,  231,  231,  231,  231,  232,  233,  233,  233,

      233,  233,  233,  620,  239,  233,  233,  233,  233,  425,
      271,  240,  223,  223,  223,  223,  426,  134,   97,  241,
      176,   95,  272,  272,  272,  272,  178,  273,  273,  273,
      273,  273,  273,  620,  617,  273,  273,  273,  273,  176,
      617,  274,  274,  274,  274,  275,  276,  276,  276,  276,
      276,  276,  620,  617,  276,  276,  276,  276,  277,  277,
      277,  277,  135,  612,  278,  278,  278,  278,  137,  135,
      617,  279,  279,  279,  279,  232,  280,  280,  280,  280,
      280,  280,  281,  281,  281,  281,  620,  612,  280,  280,
      280,  280,  319,  319,  319,  319,  176,  612,  320,  320,

      320,  320,  178,  176,  607,  321,  321,  321,  321,  275,
      322,  322,  322,  322,  322,  322,  323,  323,  323,  323,
      620,  612,  322,  322,  322,  322,  325,  607,  277,  277,
      277,  277,  135,  607,  278,  278,  278,  278,  135,  600,
      326,  326,  326,  326,  232,  327,  327,  327,  327,  327,
      327,  620,  607,  327,  327,  327,  327,  135,  600,  328,
      328,  328,  328,  329,  330,  330,  330,  330,  330,  330,
      620,  600,  330,  330,  330,  330,  364,  587,  319,  319,
      319,  319,  176,  602,  320,  320,  320,  320,  176,  601,
      365,  365,  365,  365,  275,  366,  366,  366,  366,  366,

      366,  620,  600,  366,  366,  366,  366,  176,  587,  367,
      367,  367,  367,  368,  369,  369,  369,  369,  369,  369,
      620,  597,  369,  369,  369,  369,  370,  370,  370,  370,
      135,  596,  278,  278,  278,  278,  232,  135,  587,  371,
      371,  371,  371,  329,  372,  372,  372,  372,  372,  372,
      373,  373,  373,  373,  620,  563,  372,  372,  372,  372,
      404,  404,  404,  404,  176,  592,  320,  320,  320,  320,
      275,  176,  591,  405,  405,  405,  405,  368,  406,  406,
      406,  406,  406,  406,  407,  407,  407,  407,  620,  553,
      406,  406,  406,  406,  370,  370,  370,  370,  135,  587,

      409,  409,  409,  409,  329,  410,  410,  410,  410,  410,
      410,  620,  563,  410,  410,  410,  410,  135,  544,  411,
      411,  411,  411,  412,  413,  413,  413,  413,  413,  413,
      620,  584,  413,  413,  413,  413,  404,  404,  404,  404,
      176,  583,  438,  438,  438,  438,  368,  439,  439,  439,
      439,  439,  439,  620,  530,  439,  439,  439,  439,  176,
      563,  440,  440,  440,  440,  441,  442,  442,  442,  442,
      442,  442,  620,  544,  442,  442,  442,  442,  135,  574,
      278,  278,  278,  278,  329,  135,  573,  443,  443,  443,
      443,  412,  444,  444,  444,  444,  444,  444,  445,  445,

      445,  445,  620,  572,  444,  444,  444,  444,  176,  571,
      320,  320,  320,  320,  368,  176,  515,  466,  466,  466,
      466,  441,  467,  467,  467,  467,  467,  467,  468,  468,
      468,  468,  620,  563,  467,  467,  467,  467,  135,  561,
      470,  470,  470,  470,  412,  471,  471,  471,  471,  471,
      471,  620,  544,  471,  471,  471,  471,  135,  507,  472,
      472,  472,  472,  473,  474,  474,  474,  474,  474,  474,
      620,  559,  474,  474,  474,  474,  176,  558,  487,  487,
      487,  487,  441,  488,  488,  488,  488,  488,  488,  620,
      557,  488,  488,  488,  488,  176,  556,  489,  489,  489,

      489,  490,  491,  491,  491,  491,  491,  491,  620,  555,
      491,  491,  491,  491,  135,  490,  278,  278,  278,  278,
      412,  135,  544,  492,  492,  492,  492,  473,  493,  493,
      493,  493,  493,  493,  494,  494,  494,  494,  620,  507,
      493,  493,  493,  493,  176,  541,  320,  320,  320,  320,
      441,  176,  540,  508,  508,  508,  508,  490,  509,  509,
      509,  509,  509,  509,  510,  510,  510,  510,  620,  539,
      509,  509,  509,  509,  135,  538,  512,  512,  512,  512,
      473,  513,  513,  513,  513,  513,  513,  620,  537,  513,
      513,  513,  513,  135,  536,  514,  514,  514,  514,  515,

      516,  516,  516,  516,  516,  516,  620,  473,  516,  516,
      516,  516,  176,  526,  527,  527,  527,  527,  490,  528,
      528,  528,  528,  528,  528,  620,  507,  528,  528,  528,
      528,  176,  465,  529,  529,  529,  529,  530,  531,  531,
      531,  531,  531,  531,  620,  523,  531,  531,  531,  531,
      135,  522,  278,  278,  278,  278,  473,  135,  521,  532,
      532,  532,  532,  515,  533,  533,  533,  533,  533,  533,
      534,  534,  534,  534,  620,  520,  533,  533,  533,  533,
      176,  519,  320,  320,  320,  320,  490,  176,  518,  546,
      546,  546,  546,  530,  547,  547,  547,  547,  547,  547,

      548,  548,  548,  548,  620,  517,  547,  547,  547,  547,
      135,  441,  550,  550,  550,  550,  515,  551,  551,  551,
      551,  551,  551,  620,  507,  551,  551,  551,  551,  135,
      465,  552,  552,  552,  552,  553,  554,  554,  554,  554,
      554,  554,  620,  504,  554,  554,  554,  554,  176,  503,
      564,  564,  564,  564,  530,  565,  565,  565,  565,  565,
      565,  620,  502,  565,  565,  565,  565,  176,  501,  566,
      566,  566,  566,  500,  567,  567,  567,  567,  567,  567,
      620,  499,  567,  567,  567,  567,  135,  498,  278,  278,
      278,  278,  515,  135,  497,  568,  568,  568,  568,  553,

      569,  569,  569,  569,  569,  569,  620,  496,  569,  569,
      569,  569,  176,  412,  320,  320,  320,  320,  530,  176,
       94,  578,  578,  578,  578,  465,  579,  579,  579,  579,
      579,  579,  620,  403,  579,  579,  579,  579,  135,  484,
      580,  580,  580,  580,  553,  581,  581,  581,  581,  581,
      581,  620,  483,  581,  581,  581,  581,  176,  482,  588,
      588,  588,  588,  481,  589,  589,  589,  589,  589,  589,
      620,  480,  589,  589,  589,  589,  135,  479,  278,  278,
      278,  278,  553,  176,  478,  320,  320,  320,  320,   35,
       35,   35,   35,   37,   37,   37,   37,   41,   41,   41,

       41,   43,  477,   43,   43,   44,   44,   44,   44,   90,
      476,   90,   90,   93,   93,  131,  131,  174,  174,  175,
      175,  220,  220,  221,  221,  269,  269,  270,  270,  316,
      316,  317,  317,  362,  362,  363,  363,  401,  401,  402,
      402,  436,  436,  437,  437,  463,  463,  464,  464,  485,
      485,  486,  486,  505,  505,  506,  506,  524,  524,  525,
      525,  542,  542,  543,  543,  560,  560,  562,  562,  575,
      575,  576,  576,  585,  585,  586,  586,  593,  593,  598,
      598,  599,  599,  603,  603,  605,  605,  606,  606,  608,
      608,  610,  610,  611,  611,  613,  613,  615,  615,  616,

      616,  618,  618,  619,  619,  475,  368,  465,  403,  462,
      461,  460,  459,  458,  457,  456,  455,  454,  453,  452,
      451,  450,  449,  448,  447,  329,   94,  403,  318,  435,
      434,  433,  432,  431,  430,  429,  428,  427,  424,  423,
      422,  421,  420,  419,  418,  417,  416,  415,  414,  275,
      403,  318,  400,  399,  398,  397,  396,  395,  394,  393,
      392,  391,  390,  389,  388,  387,  386,  385,  384,  383,
      382,  381,  380,  379,  378,  377,  376,  375,  232,   94,
      318,  222,  361,  360,  359,  358,  357,  356,  355,  354,
      353,  352,  351,  350,  349,  348,  347,  346,  345,  344,

      343,  342,  341,  340,  339,  338,  337,  336,  335,  334,
      331,  178,  318,  222,  315,  314,  313,  312,  311,  310,
      309,  308,  307,  306,  305,  304,  303,  302,  301,  300,
      299,  298,  297,  296,  295,  294,  293,  292,  291,  290,
      289,  288,  287,  286,  285,  284,  283,  137,   94,  222,
      132,  268,  267,  266,  265,  264,  263,  262,  261,  260,
      259,  258,  257,  256,  255,  254,  253,  252,  251,  250,
      247,  246,  245,  244,  243,  242,  238,  237,  236,  235,
      234,  620,  222,  132,  620,  219,  218,  217,  216,  215,
      214,  213,  210,  209,  208,  205,  204,  203,  202,  199,

      195,  194,  193,  192,  191,  190,  189,  188,  187,  186,
       94,  132,  171,  170,  169,  168,  167,  166,  165,  164,
      163,  162,  161,  160,  159,  158,  153,  152,  151,  150,
      149,  148,  147,  146,  145,  144,  143,  142,  141,  140,
      132,  128,  127,  126,  125,  124,  121,  120,  119,  118,
      117,  116,  115,  114,  113,  112,  111,  108,  107,  106,
      105,  104,  103,  102,  101,  100,   99,   94,   44,   45,
       42,   89,   88,   85,   73,   53,  620,   45,   42,  620,
       36,   36,    7,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,

      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620
    } ;

static yyconst flex_int16_t yy_chk[1727] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   10,   10,   11,   11,   15,   38,   38,
      697,   15,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   25,   16,   24,   20,   29,   26,   25,
       24,   29,  693,   33,   26,  689,   20,   33,   24,   26,
       16,   19,   19,   20,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   21,  685,   22,  681,   28,
       21,   39,   39,   40,   40,   21,   21,   22,  113,  113,
       22,   67,   21,   28,   22,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   30,   23,  680,   67,
       31,   31,   30,   23,   31,   50,   50,   50,   50,  678,
       23,  675,   31,   30,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   80,   48,   53,   53,   53,
       53,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   80,   55,   91,   91,   91,   91,   91,   91,

       91,   91,   91,   91,   91,  674,   91,   92,   92,   92,
       92,   94,   94,   94,   94,   96,  671,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   97,  668,
       97,   97,   97,   97,   98,   98,   98,   98,  667,   98,
       98,   98,   98,   98,   98,  114,  130,  130,  130,  130,
      664,  114,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  661,  129,  133,  658,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  134,  655,
      134,  134,  134,  134,  135,  135,  135,  135,  136,  652,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,

      136,  137,  137,  137,  137,  138,  649,  138,  138,  138,
      138,  139,  139,  139,  139,  155,  139,  139,  139,  139,
      139,  139,  153,  153,  153,  160,  164,  646,  199,  160,
      155,  172,  172,  172,  172,  172,  176,  176,  176,  176,
      643,  164,  177,  199,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  178,  178,  178,  178,  179,
      285,  179,  179,  179,  179,  180,  285,  180,  180,  180,
      180,  181,  640,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  182,  637,  182,  182,  182,  182,
      183,  634,  183,  183,  183,  183,  183,  183,  183,  183,

      183,  183,  183,  184,  191,  184,  184,  184,  184,  389,
      223,  191,  223,  223,  223,  223,  389,  631,  629,  191,
      224,  628,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  225,  619,  225,  225,  225,  225,  226,
      618,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  227,  616,  227,  227,  227,  227,  228,  228,
      228,  228,  229,  615,  229,  229,  229,  229,  229,  231,
      614,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  232,  232,  232,  232,  233,  613,  233,  233,
      233,  233,  271,  271,  271,  271,  272,  611,  272,  272,

      272,  272,  272,  274,  610,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  275,  275,  275,  275,
      276,  609,  276,  276,  276,  276,  277,  608,  277,  277,
      277,  277,  278,  606,  278,  278,  278,  278,  279,  605,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  280,  604,  280,  280,  280,  280,  281,  603,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      282,  599,  282,  282,  282,  282,  319,  598,  319,  319,
      319,  319,  320,  597,  320,  320,  320,  320,  321,  596,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,

      321,  322,  594,  322,  322,  322,  322,  323,  593,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      324,  592,  324,  324,  324,  324,  325,  325,  325,  325,
      326,  591,  326,  326,  326,  326,  326,  328,  586,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      329,  329,  329,  329,  330,  585,  330,  330,  330,  330,
      364,  364,  364,  364,  365,  584,  365,  365,  365,  365,
      365,  367,  583,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  368,  368,  368,  368,  369,  581,
      369,  369,  369,  369,  370,  370,  370,  370,  371,  577,

      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  372,  576,  372,  372,  372,  372,  373,  575,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      374,  574,  374,  374,  374,  374,  404,  404,  404,  404,
      405,  571,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  406,  565,  406,  406,  406,  406,  407,
      562,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  408,  560,  408,  408,  408,  408,  409,  559,
      409,  409,  409,  409,  409,  411,  558,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  412,  412,

      412,  412,  413,  557,  413,  413,  413,  413,  438,  555,
      438,  438,  438,  438,  438,  440,  551,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  441,  441,
      441,  441,  442,  545,  442,  442,  442,  442,  443,  544,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  444,  543,  444,  444,  444,  444,  445,  542,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      446,  541,  446,  446,  446,  446,  466,  540,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  467,
      538,  467,  467,  467,  467,  468,  537,  468,  468,  468,

      468,  468,  468,  468,  468,  468,  468,  468,  469,  536,
      469,  469,  469,  469,  470,  528,  470,  470,  470,  470,
      470,  472,  525,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  473,  473,  473,  473,  474,  524,
      474,  474,  474,  474,  487,  522,  487,  487,  487,  487,
      487,  489,  521,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  490,  490,  490,  490,  491,  520,
      491,  491,  491,  491,  492,  519,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  493,  518,  493,
      493,  493,  493,  494,  517,  494,  494,  494,  494,  494,

      494,  494,  494,  494,  494,  494,  495,  513,  495,  495,
      495,  495,  508,  507,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  509,  506,  509,  509,  509,
      509,  510,  505,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  511,  504,  511,  511,  511,  511,
      512,  503,  512,  512,  512,  512,  512,  514,  501,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      515,  515,  515,  515,  516,  500,  516,  516,  516,  516,
      527,  499,  527,  527,  527,  527,  527,  529,  497,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,

      530,  530,  530,  530,  531,  496,  531,  531,  531,  531,
      532,  488,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  533,  486,  533,  533,  533,  533,  534,
      485,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  535,  484,  535,  535,  535,  535,  546,  483,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  547,  482,  547,  547,  547,  547,  548,  480,  548,
      548,  548,  548,  479,  548,  548,  548,  548,  548,  548,
      549,  478,  549,  549,  549,  549,  550,  477,  550,  550,
      550,  550,  550,  552,  476,  552,  552,  552,  552,  552,

      552,  552,  552,  552,  552,  552,  554,  475,  554,  554,
      554,  554,  564,  471,  564,  564,  564,  564,  564,  566,
      465,  566,  566,  566,  566,  464,  566,  566,  566,  566,
      566,  566,  567,  463,  567,  567,  567,  567,  568,  461,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  569,  460,  569,  569,  569,  569,  578,  458,  578,
      578,  578,  578,  457,  578,  578,  578,  578,  578,  578,
      579,  456,  579,  579,  579,  579,  580,  455,  580,  580,
      580,  580,  580,  588,  454,  588,  588,  588,  588,  621,
      621,  621,  621,  622,  622,  622,  622,  623,  623,  623,

      623,  624,  450,  624,  624,  625,  625,  625,  625,  626,
      448,  626,  626,  627,  627,  630,  630,  632,  632,  633,
      633,  635,  635,  636,  636,  638,  638,  639,  639,  641,
      641,  642,  642,  644,  644,  645,  645,  647,  647,  648,
      648,  650,  650,  651,  651,  653,  653,  654,  654,  656,
      656,  657,  657,  659,  659,  660,  660,  662,  662,  663,
      663,  665,  665,  666,  666,  669,  669,  670,  670,  672,
      672,  673,  673,  676,  676,  677,  677,  679,  679,  682,
      682,  683,  683,  684,  684,  686,  686,  687,  687,  688,
      688,  690,  690,  691,  691,  692,  692,  694,  694,  695,

      695,  696,  696,  698,  698,  447,  439,  437,  436,  435,
      434,  433,  430,  429,  428,  427,  426,  425,  421,  420,
      419,  418,  416,  415,  414,  410,  403,  402,  401,  400,
      399,  397,  395,  394,  393,  392,  391,  390,  388,  386,
      385,  384,  383,  381,  380,  378,  377,  376,  375,  366,
      363,  362,  360,  359,  358,  357,  356,  355,  354,  353,
      352,  351,  350,  349,  348,  347,  346,  345,  344,  343,
      340,  338,  337,  336,  334,  333,  332,  331,  327,  318,
      317,  316,  315,  314,  313,  311,  310,  309,  308,  307,
      306,  305,  304,  303,  302,  301,  300,  299,  298,  297,

      296,  295,  294,  293,  292,  291,  290,  289,  288,  286,
      284,  273,  270,  269,  268,  267,  266,  265,  264,  263,
      262,  261,  260,  259,  258,  257,  256,  255,  253,  252,
      251,  250,  249,  248,  247,  246,  245,  244,  243,  242,
      241,  240,  239,  237,  236,  235,  234,  230,  222,  221,
      220,  219,  218,  217,  216,  215,  214,  213,  212,  211,
      210,  209,  208,  207,  206,  205,  204,  202,  201,  200,
      198,  197,  196,  195,  194,  193,  190,  189,  188,  187,
      186,  185,  175,  174,  173,  171,  170,  169,  168,  167,
      166,  165,  163,  162,  161,  159,  158,  157,  156,  154,

      152,  151,  150,  149,  146,  145,  144,  143,  141,  140,
      132,  131,  128,  127,  126,  125,  124,  123,  122,  121,
      120,  119,  118,  117,  116,  115,  112,  111,  110,  109,
      108,  107,  106,  105,  104,  103,  102,  101,  100,   99,
       93,   88,   87,   86,   85,   84,   79,   78,   77,   76,
       75,   73,   72,   71,   70,   69,   68,   66,   65,   64,
       63,   62,   61,   60,   59,   58,   56,   49,   45,   44,
       41,   36,   34,   32,   27,   18,   17,   14,   12,    7,
        4,    3,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,

      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[70] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "ClntLexer.l"
#line 5 "ClntLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 31 "ClntLexer.l"
  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_ClntParser_stype yylval;
}
#line 1055 "ClntLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 44 "ClntLexer.l"


#line 1160 "ClntLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 621 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1683 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 46 "ClntLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 47 "ClntLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "ClntLexer.l"
{ return ClntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "ClntLexer.l"
{ return ClntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "ClntLexer.l"
{ return ClntParser::ADDRES_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "ClntLexer.l"
{ return ClntParser::IA_;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "ClntLexer.l"
{ return ClntParser::TA_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "ClntLexer.l"
{ return ClntParser::IAID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "ClntLexer.l"
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 55 "ClntLexer.l"
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 56 "ClntLexer.l"
{ return ClntParser::LOGLEVEL_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 57 "ClntLexer.l"
{ return ClntParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 58 "ClntLexer.l"
{ return ClntParser::LOGNAME_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 59 "ClntLexer.l"
{ return ClntParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 60 "ClntLexer.l"
{ return ClntParser::SCRIPTS_DIR_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 61 "ClntLexer.l"
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 62 "ClntLexer.l"
{ return ClntParser::VALID_TIME_; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 63 "ClntLexer.l"
{ return ClntParser::T1_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 64 "ClntLexer.l"
{ return ClntParser::T2_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 65 "ClntLexer.l"
{ return ClntParser::OPTION_; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 66 "ClntLexer.l"
{ return ClntParser::DNS_SERVER_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 67 "ClntLexer.l"
{ return ClntParser::DOMAIN_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 68 "ClntLexer.l"
{ return ClntParser::NTP_SERVER_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 69 "ClntLexer.l"
{ return ClntParser::TIME_ZONE_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 70 "ClntLexer.l"
{ return ClntParser::SIP_SERVER_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 71 "ClntLexer.l"
{ return ClntParser::SIP_DOMAIN_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 72 "ClntLexer.l"
{ return ClntParser::FQDN_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 73 "ClntLexer.l"
{ return ClntParser::NIS_SERVER_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 74 "ClntLexer.l"
{ return ClntParser::NIS_DOMAIN_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 75 "ClntLexer.l"
{ return ClntParser::NISP_SERVER_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 76 "ClntLexer.l"
{ return ClntParser::NISP_DOMAIN_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 77 "ClntLexer.l"
{ return ClntParser::LIFETIME_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 78 "ClntLexer.l"
{ return ClntParser::REJECT_SERVERS_;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 79 "ClntLexer.l"
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 80 "ClntLexer.l"
{ return ClntParser::RAPID_COMMIT_;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 81 "ClntLexer.l"
{ return ClntParser::UNICAST_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 82 "ClntLexer.l"
{ return ClntParser::STRICT_RFC_NO_ROUTING_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 83 "ClntLexer.l"
{ return ClntParser::PD_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 84 "ClntLexer.l"
{ return ClntParser::PD_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 85 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 86 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_LL_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 87 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_LLT_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 88 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_EN_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 89 "ClntLexer.l"
{ return ClntParser::VENDOR_SPEC_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 90 "ClntLexer.l"
{ return ClntParser::AUTH_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 91 "ClntLexer.l"
{ return ClntParser::DIGEST_NONE_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 92 "ClntLexer.l"
{ return ClntParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 93 "ClntLexer.l"
{ return ClntParser::ANON_INF_REQUEST_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 94 "ClntLexer.l"
{ return ClntParser::INSIST_MODE_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 95 "ClntLexer.l"
{ return ClntParser::INACTIVE_MODE_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 96 "ClntLexer.l"
;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 98 "ClntLexer.l"
;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 100 "ClntLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 106 "ClntLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 107 "ClntLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 108 "ClntLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 56:
YY_RULE_SETUP
#line 115 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 124 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 133 "ClntLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 143 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 152 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 161 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 170 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 179 "ClntLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 186 "ClntLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return ClntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return ClntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 207 "ClntLexer.l"
{
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return ClntParser::DUID_;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 238 "ClntLexer.l"
{ 
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::HEXNUMBER_;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 247 "ClntLexer.l"
{ 
    if(!sscanf(yytext,"%u",(unsigned int*)&(yylval.ival))) { 
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::INTNUMBER_;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 257 "ClntLexer.l"
{return yytext[0];} 
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 261 "ClntLexer.l"
ECHO;
	YY_BREAK
#line 1729 "ClntLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 621 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 621 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 620);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

yyFlexLexer::~yyFlexLexer()
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

	delete [] (yy_state_buf);
	yyfree((yy_start_stack)  );

}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 261 "ClntLexer.l"



