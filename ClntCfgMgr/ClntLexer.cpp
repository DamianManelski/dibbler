
#line 3 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 49
#define YY_END_OF_BUFFER 50
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[456] =
    {   0,
        0,    0,    0,    0,    0,    0,   50,   48,   47,   47,
       48,   30,   48,   48,   46,   46,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   34,   34,   49,    0,   42,   30,    0,   42,
       32,   31,   46,    0,    0,   45,    0,   39,   43,   43,
       43,   43,   43,   43,   43,   43,    4,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   20,   21,   43,
       43,   43,   43,   33,   31,   46,    0,    0,   38,   44,
       37,   37,   43,   43,   43,   43,   43,   43,   43,   43,
        0,   43,   43,   43,   43,   43,   43,   43,   43,   43,

       43,   43,   43,   46,    0,    0,    0,   36,   36,    0,
       37,    0,   37,   43,   43,   43,   43,    0,   43,   43,
        0,    0,    0,    0,   43,   43,   43,   43,   43,   43,
       13,   43,   43,   43,   43,   43,   46,    0,    0,    0,
        0,   36,    0,   36,    0,   37,   37,   37,   37,   43,
       43,   43,   43,    0,   43,    1,    0,    0,    0,    0,
        5,    0,   43,   43,   43,   43,   43,   43,   43,   43,
        0,   43,   43,    0,    0,    0,    0,    0,   36,   36,
       36,   36,    0,   37,   37,   37,    0,   37,   43,   16,
       43,    0,   23,    0,    0,    0,    0,    0,   10,   43,

       43,    0,   43,   43,   43,   43,    0,   43,    0,    0,
        0,    0,    0,   36,   36,   36,    0,   36,    0,    0,
       37,   37,   37,   37,    3,   14,    0,    0,    0,    0,
        0,    0,   43,   17,    0,    0,   11,   12,   43,    0,
       29,    0,    0,    0,    0,    0,    0,    0,   36,   36,
       36,   36,    0,   37,   37,   37,    0,   37,    0,    0,
        7,    8,    0,    0,   43,    0,    0,   43,    0,    0,
        9,    0,    0,    0,   36,   36,   36,    0,   36,   41,
       37,   37,   37,   37,    0,    6,    2,    0,    0,    0,
        0,   15,   25,    0,    0,    0,    0,   40,   36,   36,

       36,   36,   37,   37,   37,    0,   37,   22,   24,    0,
        0,    0,    0,    0,    0,    0,   36,   36,   36,    0,
       36,   37,   37,   37,   37,    0,    0,    0,    0,    0,
        0,    0,    0,   36,   36,   36,   36,   37,   37,   37,
        0,   37,    0,    0,   28,    0,    0,    0,    0,   36,
       36,   36,    0,   36,   37,   37,   37,   37,    0,    0,
       26,    0,    0,    0,    0,   36,   36,   36,   36,   37,
       37,   37,    0,   37,    0,    0,   19,    0,   35,   38,
       36,   36,   36,    0,   36,   37,   37,   37,   37,    0,
       27,    0,   35,    0,   36,   36,   36,   36,   36,   37,

       37,   37,    0,   37,    0,   35,   38,   36,    0,   36,
       36,   36,   36,   37,   37,   37,   18,   35,   36,   36,
       36,   36,   37,   37,   37,   36,   36,    0,   36,   36,
       37,   36,   36,   37,   36,   36,    0,   36,   36,   36,
       36,    0,   36,   36,   36,   36,    0,   36,   36,   36,
       36,    0,   36,   36,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    6,    1,
        1,    7,    1,    1,    8,    9,   10,   11,   12,   13,
       14,   14,   14,   14,   14,   14,   14,   15,    1,    1,
        1,    1,    1,    1,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
        1,    1,    1,    1,    1,    1,   16,   17,   18,   19,

       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[42] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        3,    3,    3,    3,    4,    3,    3,    3,    3,    3,
        3,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1
    } ;

static yyconst flex_int16_t yy_base[533] =
    {   0,
        0,    0, 1497, 1496,    0,    0, 1502, 1505, 1505, 1505,
     1497,    0, 1494,   35,   35, 1460, 1483,   66,   38,   41,
       97,   43, 1467,   32, 1465, 1462,  103,  101,  112, 1465,
     1477, 1462, 1505, 1481, 1505, 1486, 1505,    0, 1483, 1482,
     1505,    0,  127, 1472,  118, 1505,    0,  140,    0,  144,
     1467,    0, 1454, 1463, 1449, 1454,    0, 1465, 1458, 1471,
     1447, 1442, 1456, 1444,   41, 1445, 1442,    0,    0, 1444,
     1447, 1443, 1436, 1505,    0,  165,  155, 1453,  159,    0,
      180,  193,  197, 1434, 1446, 1449, 1456, 1447, 1444, 1453,
      109, 1452, 1435,  128, 1434, 1437, 1420, 1436, 1434, 1433,

     1434, 1427, 1424,  208,  221, 1434, 1433,  227,  240,  244,
      250,  261,  267,  271, 1427, 1417, 1409, 1410, 1419, 1422,
      266, 1411, 1424, 1405, 1408, 1417, 1416, 1416, 1416,  102,
        0, 1400, 1424, 1415, 1411, 1421,  285, 1413, 1412, 1411,
      290,  296,  307,  313,  319,  325,  338,  344,  357, 1410,
     1390, 1404, 1395, 1401, 1391,    0, 1399, 1388, 1401, 1387,
     1505, 1395, 1385, 1380, 1383, 1403, 1375, 1375, 1375, 1373,
     1365, 1371, 1396, 1384, 1387, 1386, 1385,  363,  369,  382,
      388,  401,  405,  411, 1384,  418,  429,  435, 1364,    0,
     1362, 1363,    0, 1358, 1375, 1365, 1371, 1358,    0, 1370,

     1370, 1370, 1379, 1351, 1365, 1364, 1353, 1347, 1354, 1356,
     1364, 1363,  439,  445, 1362,  452,  463,  469,  475,  481,
      487,  500,  506,  519,    0,    0, 1339, 1355, 1354, 1353,
     1348, 1334, 1351,    0, 1339, 1334,    0,    0, 1348, 1337,
        0, 1341, 1331, 1348, 1253, 1245,  525,  531,  537,  550,
      556,  569,  573,  579, 1227,  586,  597,  603, 1215, 1202,
     1505, 1505, 1199, 1196, 1202, 1169, 1171, 1163, 1158, 1150,
     1505, 1150, 1137,  607,  613, 1130,  620,  631,  637,  641,
      647,  660,  666,  679, 1106, 1505, 1505, 1098,  203, 1098,
     1087,    0, 1505, 1087, 1086, 1073, 1067,  683,  689,  702,

      708,  721,  727, 1054,  734,  745,  751, 1505, 1505, 1039,
     1026, 1015,  996,  981,  994,  988,  757,  975,  764,  775,
      781,  787,  800,  806,  819,  963,  938,  930,  932,  922,
      918,  912,  895,  825,  838,  844,  857,  863,  888,  870,
      881,  887,  877,  843, 1505,  840,  839,  839,  833,  893,
      820,  900,  911,  917,  923,  936,  942,  955,  794,  796,
     1505,  790,  782,  776,  759,  961,  974,  980,  993,  999,
      752, 1006, 1017, 1023,  737,  711, 1505,  722,  716,    0,
     1029,  703, 1036, 1047, 1053, 1059, 1072, 1078, 1091,  684,
     1505,  684,  674,  661,  655, 1097, 1110, 1116, 1129, 1135,

      642, 1142,    0, 1155,  627,  615, 1505,  608,    0, 1161,
      598, 1168, 1181, 1187, 1200,    0, 1505,  581,  574,  564,
     1206, 1219, 1225,  551,    0,  545,  532,    0, 1232, 1505,
        0,  526,  520, 1505,  514,  501,    0,  495,  482,  476,
      470,    0,  464,  447,  440,  430,    0,  413,  406,  396,
      383,    0,  377,  364, 1505, 1246, 1250, 1254, 1258, 1262,
     1266, 1268,  370,  364, 1270,  351, 1272, 1274,  345, 1276,
     1278,  332, 1280, 1282,  326, 1284, 1286,  320, 1288, 1290,
      303, 1292, 1294,  283, 1296, 1298,  274, 1300, 1302,  257,
     1304, 1306,  247, 1308, 1310,  209, 1312, 1314,  200, 1316,

     1318,  187,  184, 1320, 1322,  171, 1324, 1326,  132,  131,
     1328, 1330,   73, 1332,   65,   62, 1334, 1336, 1338,   60,
     1340, 1342, 1344,   41, 1346, 1348, 1350,   40, 1352, 1354,
     1356, 1358
    } ;

static yyconst flex_int16_t yy_def[533] =
    {   0,
      455,    1,  456,  456,  457,  457,  455,  455,  455,  455,
      458,  459,  460,  455,  455,   15,  455,  455,   18,   18,
       18,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,  455,  455,  455,  458,  455,  459,  460,  455,
      455,  461,  455,  462,   43,  455,  463,  464,   21,   18,
       50,   21,   21,   50,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,  455,  461,  455,   76,  465,  466,  463,
      455,   81,   50,   83,   21,   83,   21,   21,   21,   21,
      455,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,  455,  104,  467,  468,  455,  108,  455,
      455,  469,  111,   83,   21,   21,  114,  455,   21,   21,
      455,  455,  455,  455,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,  105,  105,  470,  471,
      455,  455,  472,  142,  455,  455,  146,  455,  148,  114,
       21,   21,   21,  455,   21,   21,  455,  455,  455,  455,
      455,  455,   21,   21,   21,   21,   21,   21,   21,   21,
      455,   21,   21,  455,  455,  473,  474,  455,  455,  179,
      455,  181,  455,  455,  455,  455,  475,  186,   21,   21,
       21,  455,   21,  455,  455,  455,  455,  455,   21,   21,

       21,  455,   21,   21,   21,   21,  455,   21,  455,  455,
      476,  477,  455,  455,  455,  455,  478,  216,  455,  455,
      455,  221,  455,  223,   21,   21,  455,  455,  455,  455,
      455,  455,   21,   21,  455,  455,   21,   21,   21,  455,
       21,  455,  455,  455,  479,  480,  455,  455,  455,  249,
      455,  251,  455,  455,  455,  455,  481,  256,  455,  455,
      455,  455,  455,  455,   21,  455,  455,   21,  455,  455,
      455,  482,  483,  455,  455,  455,  455,  484,  277,  455,
      455,  281,  455,  283,  455,  455,  455,  455,  455,  455,
      455,   21,  455,  455,  455,  485,  486,  455,  455,  299,

      455,  301,  455,  455,  455,  487,  305,  455,  455,  455,
      455,  455,  455,  455,  488,  489,  455,  455,  455,  490,
      319,  455,  322,  455,  324,  455,  455,  455,  455,  455,
      455,  491,  492,  455,  334,  455,  336,  455,  455,  455,
      493,  340,  455,  455,  455,  455,  455,  494,  495,  455,
      455,  455,  496,  352,  455,  355,  455,  357,  455,  455,
      455,  455,  455,  497,  498,  455,  366,  455,  368,  455,
      455,  455,  499,  372,  455,  455,  455,  500,  501,  502,
      455,  455,  455,  503,  383,  455,  386,  455,  388,  455,
      455,  455,  504,  455,  505,  455,  396,  455,  398,  455,

      455,  455,  506,  402,  455,  507,  455,  508,  509,  455,
      455,  455,  412,  455,  414,  510,  455,  455,  511,  512,
      455,  421,  455,  455,  513,  455,  514,  515,  455,  455,
      516,  517,  518,  455,  455,  519,  520,  521,  522,  455,
      523,  524,  525,  526,  455,  527,  528,  529,  530,  455,
      531,  503,  532,  455,    0,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,

      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455
    } ;

static yyconst flex_int16_t yy_nxt[1547] =
    {   0,
        8,    9,   10,   11,   12,   13,    8,    8,    8,   14,
       15,   16,   16,   16,   17,   18,   19,   19,   20,   19,
       19,   21,   21,   22,   21,   21,   23,   21,   24,   25,
       26,   21,   27,   28,   29,   30,   31,   32,   21,   21,
       21,   41,  449,  444,   42,   43,   43,   43,   43,   44,
       45,   45,   45,   45,   45,   45,   50,   46,   57,   50,
       54,   60,  439,   58,  434,   96,   61,  433,   49,   55,
       56,   49,   97,   47,   49,  431,   50,   50,   50,   50,
       44,   50,   50,   50,   51,   50,   50,   49,   52,   49,
       49,   49,   49,   49,   49,   49,   53,   49,   49,   49,

       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,  455,   49,   49,   49,   49,   49,   49,   64,   49,
       66,  168,   65,   68,   69,  169,  122,   49,   77,   77,
       77,   77,  123,  425,  420,   70,   67,   76,   76,   76,
       76,   44,   77,   77,   77,   77,   77,   77,  126,   46,
       81,   81,   81,   81,   83,   83,   83,   83,  127,   83,
       83,   83,   83,   83,   83,  105,  105,  105,  105,  108,
      108,  108,  108,  416,   49,  104,  104,  104,  104,   44,
      105,  105,  105,  105,  105,  105,  399,   46,  110,  395,
      111,  111,  111,  111,  112,  113,  113,  113,  113,  113,

      113,  455,  389,  113,  113,  113,  113,  114,  114,  114,
      114,  369,  114,  114,  114,  114,  114,  114,  137,  137,
      137,  137,   44,  138,  138,  138,  138,  138,  138,  310,
       46,  138,  138,  138,  138,  141,  311,  142,  142,  142,
      142,  143,  144,  144,  144,  144,  144,  144,  455,  358,
      144,  144,  144,  144,  145,  145,  145,  145,  110,  337,
      146,  146,  146,  146,  112,  147,  147,  147,  147,  147,
      147,  148,  148,  148,  148,  455,  325,  147,  147,  147,
      147,  150,  150,  150,  150,  302,  150,  150,  150,  150,
      150,  150,  157,  158,  159,  137,  137,  137,  137,  455,

      178,  178,  178,  178,  141,  284,  179,  179,  179,  179,
      143,  180,  180,  180,  180,  180,  180,  181,  181,  181,
      181,  455,  252,  180,  180,  180,  180,  183,  224,  145,
      145,  145,  145,  110,  182,  184,  184,  184,  184,  112,
      185,  185,  185,  185,  185,  185,  455,  149,  185,  185,
      185,  185,  110,  109,  186,  186,  186,  186,  187,  188,
      188,  188,  188,  188,  188,  455,   82,  188,  188,  188,
      188,  213,   80,  178,  178,  178,  178,  141,  452,  214,
      214,  214,  214,  143,  215,  215,  215,  215,  215,  215,
      455,  452,  215,  215,  215,  215,  141,  452,  216,  216,

      216,  216,  217,  218,  218,  218,  218,  218,  218,  455,
      447,  218,  218,  218,  218,  219,  219,  219,  219,  110,
      452,  220,  220,  220,  220,  112,  110,  447,  221,  221,
      221,  221,  187,  222,  222,  222,  222,  222,  222,  223,
      223,  223,  223,  455,  447,  222,  222,  222,  222,  247,
      247,  247,  247,  141,  442,  248,  248,  248,  248,  143,
      141,  447,  249,  249,  249,  249,  217,  250,  250,  250,
      250,  250,  250,  251,  251,  251,  251,  455,  442,  250,
      250,  250,  250,  253,  442,  219,  219,  219,  219,  110,
      437,  220,  220,  220,  220,  110,  442,  254,  254,  254,

      254,  187,  255,  255,  255,  255,  255,  255,  455,  437,
      255,  255,  255,  255,  110,  437,  256,  256,  256,  256,
      257,  258,  258,  258,  258,  258,  258,  455,  428,  258,
      258,  258,  258,  274,  437,  247,  247,  247,  247,  141,
      428,  248,  248,  248,  248,  141,  428,  275,  275,  275,
      275,  217,  276,  276,  276,  276,  276,  276,  455,  409,
      276,  276,  276,  276,  141,  403,  277,  277,  277,  277,
      278,  279,  279,  279,  279,  279,  279,  455,  428,  279,
      279,  279,  279,  280,  280,  280,  280,  110,  409,  220,
      220,  220,  220,  187,  110,  394,  281,  281,  281,  281,

      257,  282,  282,  282,  282,  282,  282,  283,  283,  283,
      283,  455,  384,  282,  282,  282,  282,  298,  298,  298,
      298,  141,  409,  248,  248,  248,  248,  217,  141,  394,
      299,  299,  299,  299,  278,  300,  300,  300,  300,  300,
      300,  301,  301,  301,  301,  455,  417,  300,  300,  300,
      300,  280,  280,  280,  280,  110,  373,  303,  303,  303,
      303,  257,  304,  304,  304,  304,  304,  304,  455,  409,
      304,  304,  304,  304,  110,  407,  305,  305,  305,  305,
      306,  307,  307,  307,  307,  307,  307,  455,  394,  307,
      307,  307,  307,  298,  298,  298,  298,  141,  365,  317,

      317,  317,  317,  278,  318,  318,  318,  318,  318,  318,
      455,  405,  318,  318,  318,  318,  141,  353,  319,  319,
      319,  319,  320,  321,  321,  321,  321,  321,  321,  455,
      394,  321,  321,  321,  321,  110,  365,  220,  220,  220,
      220,  257,  110,  391,  322,  322,  322,  322,  306,  323,
      323,  323,  323,  323,  323,  324,  324,  324,  324,  455,
      390,  323,  323,  323,  323,  141,  341,  248,  248,  248,
      248,  278,  141,  380,  334,  334,  334,  334,  320,  335,
      335,  335,  335,  335,  335,  336,  336,  336,  336,  455,
      365,  335,  335,  335,  335,  110,  333,  338,  338,  338,

      338,  306,  339,  339,  339,  339,  339,  339,  455,  377,
      339,  339,  339,  339,  110,  376,  340,  340,  340,  340,
      341,  342,  342,  342,  342,  342,  342,  455,  375,  342,
      342,  342,  342,  141,  320,  350,  350,  350,  350,  320,
      351,  351,  351,  351,  351,  351,  455,  365,  351,  351,
      351,  351,  141,  333,  352,  352,  352,  352,  353,  354,
      354,  354,  354,  354,  354,  455,  362,  354,  354,  354,
      354,  110,  361,  220,  220,  220,  220,  306,  110,  360,
      355,  355,  355,  355,  341,  356,  356,  356,  356,  356,
      356,  357,  357,  357,  357,  455,  359,  356,  356,  356,

      356,  141,  306,  248,  248,  248,  248,  320,  141,   79,
      366,  366,  366,  366,  353,  367,  367,  367,  367,  367,
      367,  368,  368,  368,  368,  455,  333,  367,  367,  367,
      367,  110,  297,  370,  370,  370,  370,  341,  371,  371,
      371,  371,  371,  371,  455,  347,  371,  371,  371,  371,
      110,  346,  372,  372,  372,  372,  373,  374,  374,  374,
      374,  374,  374,  455,  345,  374,  374,  374,  374,  141,
      344,  381,  381,  381,  381,  353,  382,  382,  382,  382,
      382,  382,  455,  343,  382,  382,  382,  382,  141,  278,
      383,  383,  383,  383,  384,  385,  385,  385,  385,  385,

      385,  455,  333,  385,  385,  385,  385,  110,  297,  220,
      220,  220,  220,  341,  110,  330,  386,  386,  386,  386,
      373,  387,  387,  387,  387,  387,  387,  388,  388,  388,
      388,  455,  329,  387,  387,  387,  387,  141,  328,  248,
      248,  248,  248,  353,  141,  327,  396,  396,  396,  396,
      384,  397,  397,  397,  397,  397,  397,  398,  398,  398,
      398,  455,  326,  397,  397,  397,  397,  110,  257,  400,
      400,  400,  400,  373,  401,  401,  401,  401,  401,  401,
      455,   79,  401,  401,  401,  401,  110,  297,  402,  402,
      402,  402,  403,  404,  404,  404,  404,  404,  404,  455,

      246,  404,  404,  404,  404,  141,  314,  410,  410,  410,
      410,  384,  411,  411,  411,  411,  411,  411,  455,  313,
      411,  411,  411,  411,  141,  312,  412,  412,  412,  412,
      309,  413,  413,  413,  413,  413,  413,  455,  308,  413,
      413,  413,  413,  110,  217,  220,  220,  220,  220,  373,
      110,  297,  414,  414,  414,  414,  403,  415,  415,  415,
      415,  415,  415,  455,  246,  415,  415,  415,  415,  141,
      294,  248,  248,  248,  248,  384,  141,  293,  421,  421,
      421,  421,  292,  422,  422,  422,  422,  422,  422,  455,
      291,  422,  422,  422,  422,  110,  290,  423,  423,  423,

      423,  403,  424,  424,  424,  424,  424,  424,  455,  289,
      424,  424,  424,  424,  141,  288,  429,  429,  429,  429,
      287,  430,  430,  430,  430,  430,  430,  455,  286,  430,
      430,  430,  430,  110,  285,  220,  220,  220,  220,  403,
      141,  187,  248,  248,  248,  248,   33,   33,   33,   33,
       35,   35,   35,   35,   36,   36,   36,   36,   38,   79,
       38,   38,   39,   39,   39,   39,   75,  246,   75,   75,
       78,   78,  106,  106,  139,  139,  140,  140,  175,  175,
      176,  176,  211,  211,  212,  212,  244,  244,  245,  245,
      272,  272,  273,  273,  295,  295,  296,  296,  315,  315,

      316,  316,  331,  331,  332,  332,  348,  348,  349,  349,
      363,  363,  364,  364,  378,  378,  379,  379,  392,  392,
      393,  393,  406,  406,  408,  408,  418,  418,  419,  419,
      426,  426,  427,  427,  432,  432,  435,  435,  436,  436,
      438,  438,  440,  440,  441,  441,  443,  443,  445,  445,
      446,  446,  448,  448,  450,  450,  451,  451,  453,  453,
      454,  454,  177,  271,  270,  269,  268,  267,  266,  265,
      264,  263,  262,  261,  260,  259,  143,  246,  177,  243,
      242,  241,  240,  239,  238,  237,  236,  235,  234,  233,
      232,  231,  230,  229,  228,  227,  226,  225,  112,   79,

      177,  107,  210,  209,  208,  207,  206,  205,  204,  203,
      202,  201,  200,  199,  198,  197,  196,  195,  194,  193,
      192,  191,  190,  189,  455,  177,  107,  455,  174,  173,
      172,  171,  170,  167,  166,  165,  164,  163,  162,  161,
      160,  156,  155,  154,  153,  152,  151,   79,  107,  136,
      135,  134,  133,  132,  131,  130,  129,  128,  125,  124,
      121,  120,  119,  118,  117,  116,  115,  107,  103,  102,
      101,  100,   99,   98,   95,   94,   93,   92,   91,   90,
       89,   88,   87,   86,   85,   84,   79,   39,   40,   37,
       74,   73,   72,   71,   63,   62,   59,   48,  455,   40,

       37,  455,   34,   34,    7,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455
    } ;

static yyconst flex_int16_t yy_chk[1547] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   14,  528,  524,   14,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   19,   15,   22,   20,
       20,   24,  520,   22,  516,   65,   24,  515,   19,   20,
       20,   20,   65,   15,   18,  513,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   27,   21,
       28,  130,   27,   29,   29,  130,   91,   21,   45,   45,
       45,   45,   91,  510,  509,   29,   28,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   94,   43,
       48,   48,   48,   48,   50,   50,   50,   50,   94,   50,
       50,   50,   50,   50,   50,   77,   77,   77,   77,   79,
       79,   79,   79,  506,   50,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,  503,   76,   81,  502,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,

       81,   82,  499,   82,   82,   82,   82,   83,   83,   83,
       83,  496,   83,   83,   83,   83,   83,   83,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  289,
      104,  105,  105,  105,  105,  108,  289,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  109,  493,
      109,  109,  109,  109,  110,  110,  110,  110,  111,  490,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  112,  112,  112,  112,  113,  487,  113,  113,  113,
      113,  114,  114,  114,  114,  484,  114,  114,  114,  114,
      114,  114,  121,  121,  121,  137,  137,  137,  137,  137,

      141,  141,  141,  141,  142,  481,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  143,  143,  143,
      143,  144,  478,  144,  144,  144,  144,  145,  475,  145,
      145,  145,  145,  146,  472,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  147,  469,  147,  147,
      147,  147,  148,  466,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  149,  464,  149,  149,  149,
      149,  178,  463,  178,  178,  178,  178,  179,  454,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      180,  453,  180,  180,  180,  180,  181,  451,  181,  181,

      181,  181,  181,  181,  181,  181,  181,  181,  181,  182,
      450,  182,  182,  182,  182,  183,  183,  183,  183,  184,
      449,  184,  184,  184,  184,  184,  186,  448,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  187,
      187,  187,  187,  188,  446,  188,  188,  188,  188,  213,
      213,  213,  213,  214,  445,  214,  214,  214,  214,  214,
      216,  444,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  217,  217,  217,  217,  218,  443,  218,
      218,  218,  218,  219,  441,  219,  219,  219,  219,  220,
      440,  220,  220,  220,  220,  221,  439,  221,  221,  221,

      221,  221,  221,  221,  221,  221,  221,  221,  222,  438,
      222,  222,  222,  222,  223,  436,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  224,  435,  224,
      224,  224,  224,  247,  433,  247,  247,  247,  247,  248,
      432,  248,  248,  248,  248,  249,  427,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  250,  426,
      250,  250,  250,  250,  251,  424,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  252,  420,  252,
      252,  252,  252,  253,  253,  253,  253,  254,  419,  254,
      254,  254,  254,  254,  256,  418,  256,  256,  256,  256,

      256,  256,  256,  256,  256,  256,  256,  257,  257,  257,
      257,  258,  411,  258,  258,  258,  258,  274,  274,  274,
      274,  275,  408,  275,  275,  275,  275,  275,  277,  406,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  278,  278,  278,  278,  279,  405,  279,  279,  279,
      279,  280,  280,  280,  280,  281,  401,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  282,  395,
      282,  282,  282,  282,  283,  394,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  284,  393,  284,
      284,  284,  284,  298,  298,  298,  298,  299,  392,  299,

      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      300,  390,  300,  300,  300,  300,  301,  382,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  302,
      379,  302,  302,  302,  302,  303,  378,  303,  303,  303,
      303,  303,  305,  376,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  306,  306,  306,  306,  307,
      375,  307,  307,  307,  307,  317,  371,  317,  317,  317,
      317,  317,  319,  365,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  320,  320,  320,  320,  321,
      364,  321,  321,  321,  321,  322,  363,  322,  322,  322,

      322,  322,  322,  322,  322,  322,  322,  322,  323,  362,
      323,  323,  323,  323,  324,  360,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  325,  359,  325,
      325,  325,  325,  334,  351,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  335,  349,  335,  335,
      335,  335,  336,  348,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  337,  347,  337,  337,  337,
      337,  338,  346,  338,  338,  338,  338,  338,  340,  344,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  341,  341,  341,  341,  342,  343,  342,  342,  342,

      342,  350,  339,  350,  350,  350,  350,  350,  352,  333,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  353,  353,  353,  353,  354,  332,  354,  354,  354,
      354,  355,  331,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  356,  330,  356,  356,  356,  356,
      357,  329,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  358,  328,  358,  358,  358,  358,  366,
      327,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  367,  326,  367,  367,  367,  367,  368,  318,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,

      368,  369,  316,  369,  369,  369,  369,  370,  315,  370,
      370,  370,  370,  370,  372,  314,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  373,  373,  373,
      373,  374,  313,  374,  374,  374,  374,  381,  312,  381,
      381,  381,  381,  381,  383,  311,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  384,  384,  384,
      384,  385,  310,  385,  385,  385,  385,  386,  304,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      387,  297,  387,  387,  387,  387,  388,  296,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  389,

      295,  389,  389,  389,  389,  396,  294,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  397,  291,
      397,  397,  397,  397,  398,  290,  398,  398,  398,  398,
      288,  398,  398,  398,  398,  398,  398,  399,  285,  399,
      399,  399,  399,  400,  276,  400,  400,  400,  400,  400,
      402,  273,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  404,  272,  404,  404,  404,  404,  410,
      270,  410,  410,  410,  410,  410,  412,  269,  412,  412,
      412,  412,  268,  412,  412,  412,  412,  412,  412,  413,
      267,  413,  413,  413,  413,  414,  266,  414,  414,  414,

      414,  414,  414,  414,  414,  414,  414,  414,  415,  265,
      415,  415,  415,  415,  421,  264,  421,  421,  421,  421,
      263,  421,  421,  421,  421,  421,  421,  422,  260,  422,
      422,  422,  422,  423,  259,  423,  423,  423,  423,  423,
      429,  255,  429,  429,  429,  429,  456,  456,  456,  456,
      457,  457,  457,  457,  458,  458,  458,  458,  459,  246,
      459,  459,  460,  460,  460,  460,  461,  245,  461,  461,
      462,  462,  465,  465,  467,  467,  468,  468,  470,  470,
      471,  471,  473,  473,  474,  474,  476,  476,  477,  477,
      479,  479,  480,  480,  482,  482,  483,  483,  485,  485,

      486,  486,  488,  488,  489,  489,  491,  491,  492,  492,
      494,  494,  495,  495,  497,  497,  498,  498,  500,  500,
      501,  501,  504,  504,  505,  505,  507,  507,  508,  508,
      511,  511,  512,  512,  514,  514,  517,  517,  518,  518,
      519,  519,  521,  521,  522,  522,  523,  523,  525,  525,
      526,  526,  527,  527,  529,  529,  530,  530,  531,  531,
      532,  532,  244,  243,  242,  240,  239,  236,  235,  233,
      232,  231,  230,  229,  228,  227,  215,  212,  211,  210,
      209,  208,  207,  206,  205,  204,  203,  202,  201,  200,
      198,  197,  196,  195,  194,  192,  191,  189,  185,  177,

      176,  175,  174,  173,  172,  171,  170,  169,  168,  167,
      166,  165,  164,  163,  162,  160,  159,  158,  157,  155,
      154,  153,  152,  151,  150,  140,  139,  138,  136,  135,
      134,  133,  132,  129,  128,  127,  126,  125,  124,  123,
      122,  120,  119,  118,  117,  116,  115,  107,  106,  103,
      102,  101,  100,   99,   98,   97,   96,   95,   93,   92,
       90,   89,   88,   87,   86,   85,   84,   78,   73,   72,
       71,   70,   67,   66,   64,   63,   62,   61,   60,   59,
       58,   56,   55,   54,   53,   51,   44,   40,   39,   36,
       34,   32,   31,   30,   26,   25,   23,   17,   16,   13,

       11,    7,    4,    3,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[50] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
    0, 0, 1, 0, 0, 0, 0, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
/* <Linux> */
/* </Linux> */
#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  unsigned analyzeBigPart(char* bigPart, unsigned length, char *dst);
  int decodeSmallPart(char *src, char* dst,int length);
  void decodeIntPart(char *src, char *dst);
  void resetAddress(char *tab);
  yy_clntParser_stype yylval;
};

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( (yy_init) )
		{
		(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 456 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1505 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{return clntParser::IFACE_;}
	YY_BREAK
case 2:
YY_RULE_SETUP
{return clntParser::NO_CONFIG_;}
	YY_BREAK
case 3:
YY_RULE_SETUP
{return clntParser::ADDRES_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
{return clntParser::IA_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
{return clntParser::NOIA_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
{return clntParser::LOGLEVEL_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
{return clntParser::LOGMODE_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
{return clntParser::LOGNAME_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{return clntParser::WORKDIR_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
{return clntParser::OPTION_; }
	YY_BREAK
    //KEYWORDS FOR OPTIONS
  // [-|REQUEST|REQUIRE] OptionName [SEND|DEFAULT|SUPERSEDE|-] Value
  // [APPEND|PREPEND] OptionName Value
  
  //REQUEST - only request of option from a server - messages without will be
  //                    accepted (default)

case 11:
YY_RULE_SETUP
{return clntParser::REQUEST_;}     
	YY_BREAK
  //REQUIRE - messages from server must include this option, otherwise its 
  //                    message will be discarded by client

case 12:
YY_RULE_SETUP
{return clntParser::REQUIRE_;} 
	YY_BREAK
    //SEND -    only hint of option's value sent to server - if server dosen't 
    //              include it nothing happens(default)

case 13:
YY_RULE_SETUP
{return clntParser::SEND_;}                                 
	YY_BREAK
  //DEFAULT - default value of option. If server dosen't include this option 
  //                    this default value should be used

case 14:
YY_RULE_SETUP
{return clntParser::DEFAULT_;} 
	YY_BREAK
  //SUPERSEDE - whatever server returns overwrite returned value

case 15:
YY_RULE_SETUP
{return clntParser::SUPERSEDE_;} 
	YY_BREAK
  //APPEND - for options which can have multiple values, ordered in sequence
    //                 e.g. list of DNS servers, orders append list of options at the
    //               end of those returned by server

case 16:
YY_RULE_SETUP
{return clntParser::APPEND_;} 
	YY_BREAK
  //PREPPEND - for options which can have multiple values, ordered in sequence
  //                 e.g. list of DNS servers, orders append list of options at the
    //               beginning of those returned by server

case 17:
YY_RULE_SETUP
{return clntParser::PREPEND_;}  
	YY_BREAK
    //OPTIONS NAMES

case 18:
YY_RULE_SETUP
{return clntParser::PREF_TIME_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
{return clntParser::VALID_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
{return clntParser::T1_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
{return clntParser::T2_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
{return clntParser::DNS_SERVER_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
{return clntParser::DOMAIN_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
{return clntParser::NTP_SERVER_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
{return clntParser::TIME_ZONE_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
{ return clntParser::REJECT_SERVERS_;}
	YY_BREAK
case 27:
YY_RULE_SETUP
{ return clntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 28:
YY_RULE_SETUP
{ return clntParser::RAPID_COMMIT_;}
	YY_BREAK
case 29:
YY_RULE_SETUP
{ return clntParser::UNICAST_; }
	YY_BREAK
 //COMMENTS

case 30:
YY_RULE_SETUP
;
	YY_BREAK
case 31:
YY_RULE_SETUP
;
	YY_BREAK
case 32:
YY_RULE_SETUP
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
BEGIN(INITIAL);
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 35:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
	YYABORT; 
    } else {
	return clntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 36:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
	YYABORT; 
    } else {
	return clntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 37:
YY_RULE_SETUP
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
	YYABORT; 
    } else {
        return clntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 38:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
	YYABORT; 
    } else {
        return clntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 39:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
	YYABORT; 
    } else {
        return clntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 40:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
	YYABORT; 
    } else {
	return clntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 41:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
	YYABORT; 
    } else {
	return clntParser::IPV6ADDR_;
    }
}
	YY_BREAK
  //STRING (interface identifier,dns server etc.)
  //FIXME: Remember to free memory in parser    

case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
        return clntParser::STRING_;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return clntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return clntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return clntParser::STRING_;
}
	YY_BREAK
  //FIXME: Remember to free memory in parser
  //DUID

case 44:
YY_RULE_SETUP
{
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Error) << "DUID parsing failed." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return clntParser::DUID_;
}
	YY_BREAK
    //HEXADECIMAL NUMBER (interface id, option's values etc.)

case 45:
YY_RULE_SETUP
{
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival)))
      { YYABORT; }
    return clntParser::HEXNUMBER_;
}
	YY_BREAK
    //DECIMAL NUMBER (as for HEXNUMBER)

case 46:
YY_RULE_SETUP
{ 
    //FIXME:Check if number appropriate
    if(!sscanf(yytext,"%u",&(yylval.ival)))
      { YYABORT; }
    return clntParser::INTNUMBER_;
}
	YY_BREAK
    //WHITE CHARS should be omitted

case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
; 
	YY_BREAK
    //OTHER CHARS are direclty passed to parser

case 48:
YY_RULE_SETUP
{return yytext[0];}
	YY_BREAK
    // place your Lex rules here

case 49:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 456 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 456 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 455);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
    	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
    	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef yytext_ptr
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
#endif

/////////////////////////////////////////////////////////////////////////////
// programs section

 /*void clntLexer::resetAddress(char *tab)
 {
  int i;
  for (i=0;i<16;i++) tab[i]=0;
 }

 void clntLexer::decodeIntPart(char *src, char *dst)
 {
  
  int i,obyte;
  int ipos=0;
    for (i=0;i<4;i++)
    {
      obyte=src[ipos]-'0';
      while((src[++ipos]!='.')&&(ipos<strlen(src)))
      {
        obyte=obyte*10+src[ipos]-'0';
        if (obyte>255) { YYABORT; }
      }
      Address[12+i]=obyte;
      ipos++;
    }
 }

 int clntLexer::decodeSmallPart(char *src, char* dst,int length)
 {
  int int16=0;
  int i;
  if (length>4)
    { YYABORT; }//there is too many digits abort and raise exception
  for (i=0; i<length; i++) 
  {
    if (!isxdigit(src[i])) 
      return 0; //or raise exeception
    else
      if (isalpha(src[i]))
        int16=(int16<<4)+toupper(src[i])-55;
      else

        int16=(int16<<4)+src[i]-48;
  }
  dst[1]=*((char*)(&int16));
  dst[0]=*(((char*)(&int16))+1);
  return 1;
 }

 unsigned clntLexer::analyzeBigPart(char* bigPart, unsigned length, char *dst)
 {
  unsigned srcStart,dstStart,pos;
  srcStart=pos=0;
  dstStart=0;
  resetAddress(dst);
  do
  {
    //extracting part of string to next ':' sign or its end
    while((pos<length)&&(bigPart[pos]!=':')) pos++;
    //decode this part to binary form
    decodeSmallPart(bigPart+srcStart,dst+dstStart,pos-srcStart);
    //bigPart[pos]!=':'?(pos-srcStart-1):
    //next two bytes found
    dstStart+=2;
    //omission of : sign    
    srcStart=++pos;
  }while(pos<=length);
  return (dstStart)>>1;
 }
*/

