
#line 3 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 89
#define YY_END_OF_BUFFER 90
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[771] =
    {   0,
        1,    1,    0,    0,    0,    0,   90,   88,    2,    1,
        1,   88,   70,   88,   88,   87,   87,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   74,   74,   89,    1,    1,
        1,    0,   82,   70,    0,   82,   72,   71,   87,    0,
        0,   86,    0,   79,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,    9,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   46,   83,   83,
       83,   83,   83,   83,   83,   24,   25,   10,   83,   83,
       83,   83,   83,   73,   71,   87,    0,    0,    0,   78,

       84,   77,   77,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   87,    0,    0,    0,    0,   76,   76,    0,   77,
        0,   77,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   33,   11,   83,   83,   83,   83,   83,    8,
        0,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   87,    0,   85,    0,    0,    0,   76,    0,

       76,    0,   77,   77,   77,   77,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,    3,   83,
       83,   83,   83,   83,   83,   83,    0,   83,   83,   83,
       12,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,    0,    0,    0,    0,    0,   76,   76,   76,
       76,    0,   77,   77,   77,    0,   77,   83,   83,   83,
       83,   83,   83,   83,   28,   83,   83,   83,   83,   83,
       34,   83,   83,   83,   83,   83,   83,   83,    0,    0,
       83,   83,   83,   83,   83,   26,   83,   83,   83,   83,

       83,   83,   83,   83,   83,   83,   83,   83,    6,   83,
       83,   83,   83,   83,    0,    0,    0,    0,   76,   76,
       76,    0,   76,    0,    0,   77,   77,   77,   77,   83,
        5,   83,   83,   83,   83,   83,   66,   50,   48,   83,
       83,   83,   83,   83,   83,   83,   83,   83,    0,    0,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       69,   83,   83,   83,   83,   83,   83,   83,   43,   83,
       83,   83,   85,    0,    0,    0,    0,    0,   76,   76,
       76,   76,    0,   77,   77,   77,    0,   77,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   49,   83,   83,

       83,   83,   39,   83,   83,   15,   16,    0,    0,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   18,    0,
        0,    0,    0,   76,   76,   76,    0,   76,   81,   77,
       77,   77,   77,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   47,   83,   83,   83,   83,   14,    0,    0,
       83,   83,    4,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   13,   83,   30,   83,   83,    0,
        0,    0,    0,   80,   76,   76,   76,   76,   77,   77,
       77,    0,   77,   83,   83,   83,   83,   83,   83,   83,

       83,   27,   83,   83,   83,   17,    0,    0,   36,   35,
       83,   29,   83,   83,   83,   83,   83,   83,   83,   32,
       31,   83,   83,   83,   83,   85,    0,    0,   76,   76,
       76,    0,   76,   77,   77,   77,   77,   68,   83,   83,
       83,   83,   83,   57,   83,   83,   83,   53,   38,   37,
       83,   83,   83,   83,   83,   83,   83,   19,   83,   83,
       83,   51,    0,    0,    0,    0,   76,   76,   76,   76,
       77,   77,   77,    0,   77,    7,   83,   83,   55,   83,
       58,   67,   83,   83,   83,   83,   83,   42,   83,   83,
       65,   83,   83,    0,    0,    0,   76,   76,   76,    0,

       76,   77,   77,   77,   77,   83,   83,   83,   83,   54,
       83,   83,   83,   83,   40,   83,   83,   83,   85,    0,
        0,    0,   76,   76,   76,   76,   77,   77,   77,    0,
       77,   83,   83,   83,   83,   20,   83,   83,   83,   83,
       83,   22,    0,    0,   75,   78,   76,   76,   76,    0,
       76,   77,   77,   77,   77,   83,   83,   59,   83,   83,
       41,   83,   23,   83,    0,    0,   75,    0,   76,   76,
       76,   76,   76,   77,   77,   77,    0,   77,   83,   83,
       60,   83,   83,   83,   83,   83,   83,   85,   75,   78,
       76,    0,   76,   76,   76,   76,   77,   77,   77,   83,

       83,   83,   83,   83,   83,   21,   45,   83,    0,   75,
       76,   76,   76,   76,   77,   77,   77,   83,   83,   61,
       62,   63,   64,   83,    0,   76,   76,    0,   76,   76,
       77,   83,   56,   83,   85,   76,   76,   77,   83,   83,
        0,   76,   76,    0,   52,   44,   75,   76,   76,   75,
       76,   76,    0,    0,   76,   76,    0,   76,   76,    0,
       85,   76,   76,    0,   76,   76,    0,   76,   76,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
        1,    1,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,    1,    1,    1,    1,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    3,    3,    3,    3,    3,    3,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[856] =
    {   0,
        0,    0, 1508, 1507,    0,    0, 1514, 3860, 3860,   72,
       74, 1508,    0, 1496,   71,   71,   34, 1451,  134,  183,
      227,  185,  186,  284,   77,   71,  308,   43,  184,   87,
      290,  218,   67,   88,   67, 3860, 1452, 3860,  115,  129,
      210, 1458, 3860,    0, 1455, 1454, 3860,    0,  364, 1438,
      382, 3860,    0,  408,    0,  450,   83,    0,   75,   74,
      187,  176,  183, 1357,  189,  192,  208,  208,  217,  246,
      231,  233,  256,  251,  251,  278,  280,    0,  298,  288,
      447,  288,  291,  299,  458,    0,    0,    0,  308,  313,
      333,  368,  371, 3860,    0,  512, 1344,  425, 1343,  556,

        0,  600,  474,  642,  443,  448,  466,  470, 1354,  492,
      483,  492,  492,  484,  495,  527,  534,  529,  540, 1353,
      576,  262,  646,  573, 1343,  581,  618,  616,  621,  638,
      633,  647, 1305,  641,  638,  650,  655,  658,  653,  659,
      653,  700,  434, 1292, 1291, 1290,  746,  581,  718,  790,
      832,  764,  874,  766,  682, 1301,  753,  761,  804,  805,
     1300,  797, 1298,    0,  811,  812,  829,  835,  879,    0,
     1297,  879,  869,  884,  880,  868,  873,  885,  885,  892,
      876,  892,  883,  922, 1207,  902,  924, 1198,  927,  925,
      915, 1102,  951, 1089, 1088, 1087, 1086,  727,  979, 1021,

      997, 1039, 1065, 1083, 1109, 1127, 1085,  915,  913,  921,
      934,  916,  932,  926,  983, 1122, 1012, 1054,    0, 1082,
     1108, 1120, 1115, 1126, 1117, 1132, 1131, 1128, 1139, 1131,
        0, 1121, 1142, 1134, 1131, 1127, 1096, 1132, 1157, 1144,
     1144, 1150, 1161, 1164, 1167, 1160, 1174, 1156, 1164, 1095,
     1166, 1181, 1055, 1046, 1045, 1044, 1205, 1223, 1241, 1267,
     1285, 1250, 1311, 1043, 1323, 1365, 1341, 1186, 1212, 1260,
     1284, 1332, 1054, 1329,    0, 1343, 1335, 1353, 1351, 1364,
        0, 1356, 1053, 1366, 1368, 1359, 1378, 1370, 1369, 1380,
     1373, 1369, 1382, 1052, 1371,    0, 1385, 1051, 1395, 1017,

     1016, 1379, 1381, 1388, 1399, 1403, 1414, 1014,    0, 1405,
     1401, 1410, 1013, 1414, 1000,  999,  998, 1437, 1461,  997,
     1473, 1515, 1491, 1533, 1559, 1570, 1588, 1614, 1632, 1419,
      999, 1476, 1512, 1533, 1624, 1556,    0,    0, 1576, 1617,
     1629, 1630, 1623, 1632, 1624, 1642, 1643, 1644, 1637, 1633,
     1651, 1631, 1645, 1636, 1634, 1653, 1663, 1653, 1650, 1669,
        0,  981, 1670, 1650, 1670, 1666, 1668, 1673,    0, 1679,
     1670, 1672,  959,  900,  857,  856, 1710, 1728, 1739, 1757,
     1783, 1801, 1766, 1827,  854, 1839, 1881, 1857, 1691, 1735,
     1772, 1798, 1860, 1850, 1849, 1853, 1876,    0, 1887, 1879,

      865, 1879,    0, 1877, 1884,    0,    0, 1896, 1876, 1890,
     1895, 1894, 1899, 1898,  864, 1899, 1892, 1901, 1893, 1911,
     1907, 1912, 1927, 1915, 1929, 1931, 1931, 1922,    0,  851,
      850,  849, 1953, 1976,  847, 1988, 2030, 2006, 2015, 2074,
     2048, 2118, 2092, 2017, 2029,  858, 2066, 2087, 2099, 2113,
     2127, 2111,    0, 2110, 2118, 2128, 2114,    0, 2125, 2130,
     2122, 2119,    0, 2120, 2121, 2132, 2128, 2128, 2124, 2123,
     2143, 2157, 2154, 2164,    0, 2171,    0, 2170, 2171,  845,
      844,  843,  812, 2188, 2214, 2232, 2258, 2276, 2302,  811,
     2314, 2356, 2332, 2177, 2221, 2269, 2317, 2333, 2336, 2335,

     2347,    0, 2366, 2353, 2364,    0, 2356, 2353,    0,    0,
     2363,    0, 2364, 2369, 2370, 2367, 2355, 2363, 2361,    0,
        0, 2362,  822, 2361, 2386,  809,  808,  807, 2425,  805,
     2437, 2479, 2455, 2523, 2497, 2567, 2541,    0, 2441, 2465,
      816, 2527,  815,    0, 2534, 2537, 2572,    0, 3860, 3860,
     2561, 2572, 2561, 2573, 2561, 2577, 2580,    0, 2571, 2571,
     2577,    0,  802,  801,  800,  799, 2624, 2642, 2668, 2686,
     2712,  770, 2724, 2766, 2742,    0, 2582, 2619,    0, 2760,
        0,    0, 2645, 2668, 2743, 2727, 2749,    0, 2748, 2762,
        0, 2763, 2767,  769,  768,  767, 2818,  766, 2830, 2872,

     2792, 2916, 2848, 2960, 2890,  777, 2777, 2850, 2864,    0,
     2878, 2886, 2919, 2921,    0, 2928,  776, 2964,  736,  678,
      677,  676, 3007, 2981, 3051, 3025, 3069,  668, 3095, 3137,
     3113, 2953, 2995,  671, 3032,    0, 3068, 3100, 3110, 3114,
     3103,    0,  666,  665,  623,    0, 3159,  622, 3181, 3223,
     3199, 3267, 3241, 3311, 3285, 3132, 3197,    0,  262, 3210,
        0, 3260,    0, 3277,  621,  620,  619,  618,  617, 3355,
     3330, 3399, 3373, 3417,  615, 3443,    0, 3461, 3320, 3358,
        0,  268,  615,  621, 3376, 3411, 3440,  612,  611, 3860,
      610,    0, 3497,  609, 3509, 3527, 3553, 3571,    0, 3462,

     3513,  574,  571,  572,  573,    0,    0, 3515,  565,  536,
      535,  534, 3597, 3615, 3641,  533,    0, 3566, 3560,    0,
        0,    0,    0, 3607,  532,  531,  529,    0, 3654, 3860,
        0, 3599,    0, 3617,  528,  527,  526, 3860, 3634, 3648,
      494,  492,  491,    0,    0,    0,  489,  434,  397,  390,
      388,  387,    0,  386,  385,  384,    0,  383,  353,    0,
      352,  351,  350,  346,  344,  342,    0,  341,  340, 3860,
     3703, 3707, 3711, 3715, 3719, 3723, 3725,  358, 3727, 3729,
     3731, 3733, 3735, 3737, 3739, 3741, 3743, 3745, 3747, 3749,
     3751, 3753, 3755, 3757, 3759, 3761, 3763, 3765, 3767, 3769,

     3771, 3773, 3775, 3777, 3779, 3781, 3783, 3785, 3787, 3789,
     3791, 3793, 3795, 3797,  357, 3799, 3801, 3803,  356, 3805,
     3807, 3809,  321,  279, 3811, 3813, 3815,  278, 3817, 3819,
      271,  270, 3821, 3823, 3825, 3827, 3829,  224, 3831, 3833,
     3835, 3837, 3839,  220, 3841, 3843, 3845,  212, 3847,  143,
     3849, 3851, 3853,   79, 3855
    } ;

static yyconst flex_int16_t yy_def[856] =
    {   0,
      770,    1,  771,  771,  772,  772,  770,  770,  770,  770,
      770,  773,  774,  775,  770,  770,   16,  770,  770,   19,
       19,   19,   19,   19,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  770,  770,  770,  770,  770,
      770,  773,  770,  774,  775,  770,  770,  776,  770,  777,
       49,  770,  778,  770,   24,   24,   56,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  770,  776,  770,  779,   96,  780,  770,

      778,  770,  102,   56,  104,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  770,  142,  781,  782,  783,  770,  147,  770,  770,
      770,  150,  104,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      770,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  143,  143,  782,  784,  785,  770,  770,  770,

      199,  770,  770,  203,  770,  205,  153,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  770,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  786,  770,  787,  788,  770,  770,  258,  770,
      260,  770,  770,  770,  770,  770,  265,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  770,  770,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  789,  790,  791,  770,  770,  770,
      770,  770,  321,  770,  770,  770,  326,  770,  328,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  770,  770,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  787,  770,  792,  793,  770,  770,  770,  379,
      770,  381,  770,  770,  770,  770,  770,  386,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,  770,  770,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  794,
      795,  796,  770,  770,  770,  770,  770,  436,  770,  770,
      440,  770,  442,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  770,  770,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  797,
      770,  798,  799,  770,  770,  485,  770,  487,  770,  770,
      770,  770,  491,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,  770,  770,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  800,  801,  802,  770,  770,
      770,  770,  531,  770,  534,  770,  536,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  770,  770,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  803,  770,  804,  805,  770,  567,  770,  569,
      770,  770,  770,  770,  573,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  806,  807,  808,  770,  770,  770,  770,

      599,  770,  602,  770,  604,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  809,  770,
      810,  811,  770,  623,  770,  625,  770,  770,  770,  770,
      629,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  812,  813,  814,  815,  770,  770,  770,  770,
      649,  770,  652,  770,  654,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  816,  770,  817,  770,  818,  770,
      670,  770,  672,  770,  770,  770,  819,  676,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  820,  821,  770,
      822,  823,  770,  770,  770,  695,  770,  697,  824,   24,

       24,   24,   24,   24,   24,   24,   24,   24,  825,  770,
      826,  827,  770,  713,  770,  770,  828,   24,   24,   24,
       24,   24,   24,   24,  829,  770,  830,  831,  770,  770,
      832,   24,   24,   24,  833,  834,  835,  770,   24,   24,
      836,  770,  837,  838,   24,   24,  839,  840,  841,  842,
      770,  843,  844,  845,  846,  847,  848,  770,  849,  850,
      770,  851,  852,  845,  770,  853,  854,  855,  770,    0,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,

      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770
    } ;

static yyconst flex_int16_t yy_nxt[3935] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   20,   21,   22,   23,   24,   24,
       25,   24,   24,   26,   24,   27,   28,   29,   24,   30,
       31,   32,   33,   34,   35,   24,   24,   24,   19,   20,
       20,   21,   22,   23,   24,   24,   25,   24,   24,   26,
       24,   27,   28,   29,   24,   30,   31,   32,   33,   34,
       35,   24,   24,   24,   39,   40,   41,   40,   47,  770,
       77,  673,   48,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   50,   51,   51,   51,   51,   51,   51,   68,

       52,   71,   90,   93,   69,  770,   77,   72,  105,   80,
       91,  106,   70,   81,   92,  107,   53,   39,   40,   51,
       51,   51,   51,   51,   51,   68,   52,   71,   90,   93,
       69,   41,   40,   72,  105,   80,   91,  106,   70,   81,
       92,  107,   53,   55,   55,  763,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   50,   56,   56,   56,   57,
       56,   56,   55,   58,   55,   55,   55,   55,   55,   59,
       55,   55,   55,   55,   55,   55,   60,   55,   55,   55,
       55,   55,   56,   56,   56,   57,   56,   56,   55,   58,
       55,   55,   55,   55,   55,   59,   55,   55,   55,   55,

       55,   55,   60,   55,   55,   55,   55,   55,   56,   78,
       56,   56,   39,   40,  761,  108,  109,  110,   55,  112,
       55,   55,  756,   79,   67,   55,  749,   55,   55,  113,
       66,   86,   87,  114,   56,   78,   56,   56,  115,  116,
       88,  108,  109,  110,   55,  112,   55,   55,   89,   79,
       67,   55,   56,   55,   55,  113,   66,   61,  119,  114,
      123,  120,   62,   63,  115,  116,   88,   64,  117,   65,
      171,  172,  738,  737,   89,  681,  682,  683,   56,  684,
      731,  717,  702,   61,  119,  703,  118,  120,   62,   63,
      121,  122,  124,   64,  117,   65,   55,   55,   55,   55,

       55,   55,   55,   55,   55,  770,   55,   55,   55,   55,
       55,   55,  118,   55,   82,  125,  121,  122,  124,   55,
       83,  126,   84,  712,  127,  128,   55,  132,  133,  134,
       73,   85,   55,   55,   55,   55,   55,   55,   74,   55,
       82,  125,  137,  138,   75,   55,   83,  126,   84,   76,
      127,  128,   55,  132,  133,  134,   73,   85,  699,  669,
      101,  767,  767,  767,   74,  760,  139,  770,  137,  138,
       75,  767,  760,  764,  760,   76,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   97,   98,   98,   98,   98,
       98,   98,  139,   52,   98,   98,   98,   98,   98,   98,

       98,   98,   98,  140,  753,  760,  753,  690,  753,  744,
      141,  754,   98,   98,   98,   98,   98,   98,  753,   52,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  140,
      103,  103,  103,  103,  103,  103,  141,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  744,  103,  103,  103,  103,
      103,  103,  104,  104,  104,  104,  104,  104,  104,  104,
      104,   97,  104,  104,  104,  104,  104,  104,  129,   58,
      135,  130,  154,  155,  770,  131,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  156,  157,  136,  104,  104,

      104,  104,  104,  104,  129,   58,  135,  130,  154,  155,
      668,  131,  744,  728,  159,  646,  160,  161,  162,  163,
      164,  156,  157,  136,  142,  142,  142,  142,  142,  142,
      142,  142,  142,   50,  143,  143,  143,  143,  143,  143,
      159,   52,  160,  161,  162,  163,  164,  744,  728,  741,
      728,  165,  692,  622,  677,  728,  692,  668,  166,  167,
      143,  143,  143,  143,  143,  143,  168,   52,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  165,  148,  148,
      148,  148,  148,  148,  166,  167,  100,  723,  722,  721,
      720,  770,  168,  201,  201,  201,  201,  201,  201,  201,

      201,  201,  170,  175,  148,  148,  148,  148,  148,  148,
      149,  177,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  151,  152,  152,  152,  152,  152,  152,  170,  175,
      650,  692,  668,  709,  705,  704,  630,  177,  692,  690,
      668,  622,  566,  600,  668,  178,  179,  180,  152,  152,
      152,  152,  152,  152,  153,  153,  153,  153,  153,  153,
      153,  153,  153,   50,  153,  153,  153,  153,  153,  153,
      173,  178,  179,  180,  181,  182,  174,  183,  185,  186,
      187,  188,  189,  190,  191,  192,  622,  100,  658,  574,
      153,  153,  153,  153,  153,  153,  173,  646,  622,  566,

      181,  182,  174,  183,  185,  186,  187,  188,  189,  190,
      191,  192,  193,  193,  193,  193,  193,  193,  193,  193,
      193,   50,  194,  194,  194,  194,  194,  194,  210,   52,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  194,  194,
      194,  194,  194,  194,  210,   52,  198,  643,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  200,  201,  201,
      201,  201,  201,  201,  770,  208,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  641,  632,  532,  622,  566,
      483,  492,  209,  212,  201,  201,  201,  201,  201,  201,

      149,  213,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  151,  204,  204,  204,  204,  204,  204,  209,  212,
      100,  566,  483,  100,  580,  578,  437,  213,  566,  483,
      563,  560,  387,  100,  214,  215,  217,  219,  204,  204,
      204,  204,  204,  204,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  220,  206,  206,  206,  206,  206,  206,
      214,  215,  217,  219,  483,  376,  376,  496,  322,  221,
      483,  376,  100,  466,  455,  266,  222,  100,  376,  220,
      206,  206,  206,  206,  206,  206,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  221,  207,  207,  207,  207,

      207,  207,  222,  223,  228,  230,  231,  232,  233,  234,
      237,  235,  224,  225,  226,  236,  238,  239,  240,  229,
      241,  256,  207,  207,  207,  207,  207,  207,  245,  223,
      228,  230,  231,  232,  233,  234,  237,  235,  224,  225,
      226,  236,  238,  239,  240,  229,  241,  242,  246,  249,
      250,  251,  268,  269,  245,  270,  271,  273,  274,  247,
      272,  275,  243,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  770,  242,  246,  249,  250,  251,  268,  269,
      430,  270,  271,  273,  274,  247,  272,  275,  243,  198,
      420,  258,  258,  258,  258,  258,  258,  258,  258,  258,

      200,  259,  259,  259,  259,  259,  259,  770,  390,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  200,  376,
      256,  256,  371,  367,  276,  360,  359,  259,  259,  259,
      259,  259,  259,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  280,  261,  261,  261,  261,  261,  261,  262,
      276,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      357,  354,  343,  335,  151,  100,  256,  146,  280,  261,
      261,  261,  261,  261,  261,  149,  100,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  151,  264,  264,  264,
      264,  264,  264,  770,  281,  264,  264,  264,  264,  264,

      264,  264,  264,  264,  312,  299,  770,  256,  146,  253,
      770,  252,  282,  264,  264,  264,  264,  264,  264,  149,
      281,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      266,  267,  267,  267,  267,  267,  267,  770,  282,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  277,  283,
      284,  285,  286,  287,  288,  278,  289,  267,  267,  267,
      267,  267,  267,  279,  291,  292,  293,  294,  295,  296,
      297,  290,  298,  300,  277,  283,  284,  285,  286,  287,
      288,  278,  289,  301,  302,  303,  304,  305,  306,  279,
      291,  292,  293,  294,  295,  296,  297,  290,  298,  300,

      307,  308,  309,  310,  311,  313,  314,  248,  330,  301,
      302,  303,  304,  305,  306,  318,  244,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  307,  308,  309,  310,
      311,  313,  314,  198,  330,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  200,  320,  320,  320,  320,  320,
      320,  770,  331,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  320,  320,  320,  320,  320,  320,  198,  331,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  322,  323,
      323,  323,  323,  323,  323,  770,  332,  323,  323,  323,

      323,  323,  323,  323,  323,  323,  227,  218,  333,  216,
      211,  100,  146,  146,  184,  323,  323,  323,  323,  323,
      323,  149,  332,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  151,  149,  333,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  266,  327,  327,  327,  327,  327,
      327,  770,  176,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  169,  158,  146,  100,  111,  334,  336,  337,
      338,  327,  327,  327,  327,  327,  327,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  339,  329,  329,  329,
      329,  329,  329,  334,  336,  337,  338,  340,  341,  342,

      344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
      355,  356,  339,  329,  329,  329,  329,  329,  329,  358,
      361,  362,  363,  340,  341,  342,  344,  345,  346,  347,
      348,  349,  350,  351,  352,  353,  355,  356,  364,  365,
      366,  368,  369,  370,  372,  358,  361,  362,  363,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  389,  100,
       45,   46,   43,   94,  364,  365,  366,  368,  369,  370,
      372,  198,   54,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  200,  198,  389,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  322,  380,  380,  380,  380,  380,

      380,  770,   46,  380,  380,  380,  380,  380,  380,  380,
      380,  380,   43,  770,   37,   37,  770,  770,  391,  770,
      770,  380,  380,  380,  380,  380,  380,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  392,  382,  382,  382,
      382,  382,  382,  383,  391,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  770,  393,  770,  770,  770,  770,
      770,  770,  392,  382,  382,  382,  382,  382,  382,  149,
      770,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      149,  393,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  266,  385,  385,  385,  385,  385,  385,  770,  397,

      385,  385,  385,  385,  385,  385,  385,  385,  385,  770,
      770,  770,  770,  770,  770,  770,  770,  398,  385,  385,
      385,  385,  385,  385,  149,  397,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  387,  388,  388,  388,  388,
      388,  388,  770,  398,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  394,  399,  400,  401,  402,  403,  395,
      404,  396,  388,  388,  388,  388,  388,  388,  405,  406,
      407,  408,  409,  410,  411,  412,  413,  414,  415,  394,
      399,  400,  401,  402,  403,  395,  404,  396,  416,  417,
      418,  419,  421,  422,  405,  406,  407,  408,  409,  410,

      411,  412,  413,  414,  415,  423,  424,  425,  426,  427,
      428,  429,  770,  444,  416,  417,  418,  419,  421,  422,
      433,  770,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  423,  424,  425,  426,  427,  428,  429,  198,  444,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  198,
      770,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      322,  435,  435,  435,  435,  435,  435,  770,  445,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  435,  435,  435,
      435,  435,  435,  198,  445,  436,  436,  436,  436,  436,

      436,  436,  436,  436,  437,  438,  438,  438,  438,  438,
      438,  770,  446,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  770,  770,  447,  770,  770,  770,  770,  770,
      770,  438,  438,  438,  438,  438,  438,  149,  446,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  266,  149,
      447,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      387,  441,  441,  441,  441,  441,  441,  770,  770,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  770,  770,
      770,  770,  770,  448,  449,  450,  451,  441,  441,  441,
      441,  441,  441,  442,  442,  442,  442,  442,  442,  442,

      442,  442,  452,  443,  443,  443,  443,  443,  443,  448,
      449,  450,  451,  453,  454,  456,  457,  458,  459,  460,
      461,  462,  463,  464,  465,  467,  468,  469,  452,  443,
      443,  443,  443,  443,  443,  470,  471,  472,  473,  453,
      454,  456,  457,  458,  459,  460,  461,  462,  463,  464,
      465,  467,  468,  469,  474,  475,  476,  477,  478,  479,
      770,  470,  471,  472,  473,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  770,  770,  770,  770,  770,  770,
      474,  475,  476,  477,  478,  479,  198,  770,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  322,  198,  770,

      485,  485,  485,  485,  485,  485,  485,  485,  485,  437,
      486,  486,  486,  486,  486,  486,  770,  770,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  486,  486,  486,  486,
      486,  486,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  494,  488,  488,  488,  488,  488,  488,  770,  495,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  770,
      770,  770,  770,  770,  770,  770,  770,  494,  488,  488,
      488,  488,  488,  488,  149,  495,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  387,  490,  490,  490,  490,

      490,  490,  770,  497,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  770,  770,  770,  770,  770,  770,  770,
      498,  499,  490,  490,  490,  490,  490,  490,  149,  497,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  492,
      493,  493,  493,  493,  493,  493,  498,  499,  500,  501,
      502,  503,  504,  505,  506,  507,  508,  509,  510,  511,
      512,  515,  516,  517,  518,  513,  493,  493,  493,  493,
      493,  493,  514,  519,  500,  501,  502,  503,  504,  505,
      506,  507,  508,  509,  510,  511,  512,  515,  516,  517,
      518,  513,  520,  521,  522,  523,  524,  525,  514,  519,

      484,  484,  484,  484,  484,  484,  484,  484,  484,  770,
      770,  770,  770,  770,  770,  770,  770,  538,  520,  521,
      522,  523,  524,  525,  198,  770,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  437,  530,  530,  530,  530,
      530,  530,  770,  538,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  770,  770,  770,  770,  770,  770,  770,
      770,  539,  530,  530,  530,  530,  530,  530,  198,  770,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  532,
      533,  533,  533,  533,  533,  533,  770,  539,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  770,  770,  540,

      770,  770,  770,  770,  770,  770,  533,  533,  533,  533,
      533,  533,  149,  770,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  387,  149,  540,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  492,  535,  535,  535,  535,
      535,  535,  770,  770,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  770,  770,  770,  770,  770,  541,  542,
      543,  544,  535,  535,  535,  535,  535,  535,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  545,  537,  537,
      537,  537,  537,  537,  541,  542,  543,  544,  546,  547,
      548,  549,  550,  551,  552,  553,  554,  555,  556,  557,

      558,  559,  561,  545,  537,  537,  537,  537,  537,  537,
      562,  770,  770,  770,  546,  547,  548,  549,  550,  551,
      552,  553,  554,  555,  556,  557,  558,  559,  561,  770,
      770,  770,  770,  770,  770,  198,  562,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  437,  198,  770,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  532,  568,
      568,  568,  568,  568,  568,  770,  770,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  770,  770,  770,  770,
      770,  770,  576,  770,  770,  568,  568,  568,  568,  568,
      568,  569,  569,  569,  569,  569,  569,  569,  569,  569,

      577,  570,  570,  570,  570,  570,  570,  770,  576,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  770,  770,
      770,  770,  770,  770,  770,  770,  577,  570,  570,  570,
      570,  570,  570,  149,  770,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  492,  572,  572,  572,  572,  572,
      572,  770,  579,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  770,  770,  770,  770,  770,  770,  770,  581,
      582,  572,  572,  572,  572,  572,  572,  149,  579,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  574,  575,
      575,  575,  575,  575,  575,  581,  582,  583,  584,  585,

      586,  587,  588,  589,  590,  591,  592,  593,  770,  606,
      770,  770,  770,  770,  770,  575,  575,  575,  575,  575,
      575,  770,  770,  583,  584,  585,  586,  587,  588,  589,
      590,  591,  592,  593,  198,  606,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  532,  598,  598,  598,  598,
      598,  598,  770,  607,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  770,  770,  770,  770,  770,  770,  770,
      770,  610,  598,  598,  598,  598,  598,  598,  198,  607,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  600,
      601,  601,  601,  601,  601,  601,  770,  610,  601,  601,

      601,  601,  601,  601,  601,  601,  601,  770,  770,  611,
      770,  770,  770,  770,  770,  770,  601,  601,  601,  601,
      601,  601,  149,  770,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  492,  149,  611,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  574,  603,  603,  603,  603,
      603,  603,  770,  770,  603,  603,  603,  603,  603,  603,
      603,  603,  603,  770,  770,  770,  770,  770,  770,  612,
      613,  614,  603,  603,  603,  603,  603,  603,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  615,  605,  605,
      605,  605,  605,  605,  608,  612,  613,  614,  616,  617,

      609,  618,  770,  633,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  615,  605,  605,  605,  605,  605,  605,
      608,  770,  770,  770,  616,  617,  609,  618,  198,  633,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  532,
      198,  770,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  600,  624,  624,  624,  624,  624,  624,  770,  770,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  770,
      770,  770,  770,  770,  770,  634,  770,  770,  624,  624,
      624,  624,  624,  624,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  635,  626,  626,  626,  626,  626,  626,

      770,  634,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  770,  770,  770,  770,  770,  770,  770,  636,  635,
      626,  626,  626,  626,  626,  626,  149,  637,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  574,  628,  628,
      628,  628,  628,  628,  636,  638,  770,  770,  770,  770,
      770,  770,  770,  637,  770,  770,  770,  770,  770,  770,
      770,  770,  639,  640,  628,  628,  628,  628,  628,  628,
      149,  638,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  630,  631,  631,  631,  631,  631,  631,  639,  640,
      642,  770,  656,  648,  648,  648,  648,  648,  648,  648,

      648,  648,  770,  770,  770,  770,  770,  770,  631,  631,
      631,  631,  631,  631,  770,  770,  642,  198,  656,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  600,  648,
      648,  648,  648,  648,  648,  770,  657,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  770,  770,  770,  770,
      770,  770,  770,  770,  659,  648,  648,  648,  648,  648,
      648,  198,  657,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  650,  651,  651,  651,  651,  651,  651,  149,
      659,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      574,  770,  770,  770,  770,  770,  770,  770,  660,  651,

      651,  651,  651,  651,  651,  149,  770,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  630,  653,  653,  653,
      653,  653,  653,  770,  660,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  770,  770,  770,  770,  770,  661,
      662,  663,  664,  653,  653,  653,  653,  653,  653,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  679,  655,
      655,  655,  655,  655,  655,  661,  662,  663,  664,  198,
      770,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      600,  770,  770,  770,  679,  655,  655,  655,  655,  655,
      655,  198,  770,  670,  670,  670,  670,  670,  670,  670,

      670,  670,  650,  671,  671,  671,  671,  671,  671,  770,
      770,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      770,  770,  770,  770,  770,  770,  680,  770,  770,  671,
      671,  671,  671,  671,  671,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  685,  673,  673,  673,  673,  673,
      673,  770,  680,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  770,  770,  770,  770,  770,  770,  770,  770,
      685,  673,  673,  673,  673,  673,  673,  149,  770,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  630,  675,
      675,  675,  675,  675,  675,  770,  686,  678,  678,  678,

      678,  678,  678,  678,  678,  678,  770,  770,  770,  770,
      770,  770,  770,  687,  770,  675,  675,  675,  675,  675,
      675,  149,  686,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  677,  678,  678,  678,  678,  678,  678,  687,
      770,  770,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  770,  770,  770,  770,  770,  770,  770,  700,  678,
      678,  678,  678,  678,  678,  198,  770,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  650,  694,  694,  694,
      694,  694,  694,  770,  700,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  701,  770,  770,  770,  770,  770,

      770,  770,  706,  694,  694,  694,  694,  694,  694,  198,
      770,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      701,  696,  696,  696,  696,  696,  696,  149,  706,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  630,  770,
      770,  770,  770,  770,  770,  770,  707,  696,  696,  696,
      696,  696,  696,  149,  770,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  677,  698,  698,  698,  698,  698,
      698,  770,  707,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  708,  770,  770,  770,  770,  770,  770,  770,
      770,  698,  698,  698,  698,  698,  698,  770,  770,  770,

      770,  770,  770,  770,  718,  770,  770,  198,  708,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  650,  198,
      770,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      718,  714,  714,  714,  714,  714,  714,  770,  719,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  770,  770,
      770,  770,  770,  770,  770,  770,  724,  714,  714,  714,
      714,  714,  714,  149,  719,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  677,  716,  716,  716,  716,  716,
      716,  770,  724,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  732,  770,  770,  770,  770,  770,  770,  770,

      733,  716,  716,  716,  716,  716,  716,  198,  770,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  732,  730,
      730,  730,  730,  730,  730,  770,  733,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  770,  734,  770,  739,
      770,  770,  770,  770,  770,  730,  730,  730,  730,  730,
      730,  149,  740,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  677,  734,  198,  739,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  745,  746,  770,  740,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,

      770,  745,  746,   36,   36,   36,   36,   38,   38,   38,
       38,   42,   42,   42,   42,   44,  770,   44,   44,   45,
       45,   45,   45,   95,  770,   95,   95,   99,   99,  144,
      144,  145,  145,  195,  195,  196,  196,  197,  197,  254,
      254,  255,  255,  315,  315,  316,  316,  317,  317,  373,
      373,  374,  374,  375,  375,  431,  431,  432,  432,  480,
      480,  481,  481,  482,  482,  526,  526,  527,  527,  528,
      528,  431,  431,  564,  564,  565,  565,  594,  594,  595,
      595,  596,  596,  619,  619,  620,  620,  621,  621,  527,
      527,  644,  644,  645,  645,  665,  665,  666,  666,  667,

      667,  688,  688,  689,  689,  691,  691,  595,  595,  710,
      710,  711,  711,  725,  725,  726,  726,  727,  727,  735,
      735,  736,  736,  644,  644,  742,  742,  743,  743,  747,
      747,  748,  748,  750,  750,  751,  751,  752,  752,  689,
      689,  755,  755,  757,  757,  758,  758,  759,  759,  762,
      762,  765,  765,  766,  766,  768,  768,  769,  769,    7,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,

      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770
    } ;

static yyconst flex_int16_t yy_chk[3935] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   10,   10,   11,   11,   15,   17,
       28,  854,   15,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   25,

       16,   26,   33,   35,   25,   17,   28,   26,   57,   30,
       34,   59,   25,   30,   34,   60,   16,   39,   39,   16,
       16,   16,   16,   16,   16,   25,   16,   26,   33,   35,
       25,   40,   40,   26,   57,   30,   34,   59,   25,   30,
       34,   60,   16,   19,   19,  850,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   20,   29,
       22,   23,   41,   41,  848,   61,   62,   63,   20,   65,
       22,   23,  844,   29,   23,   20,  838,   22,   23,   66,
       22,   32,   32,   67,   20,   29,   22,   23,   68,   69,
       32,   61,   62,   63,   20,   65,   22,   23,   32,   29,
       23,   20,   21,   22,   23,   66,   22,   21,   71,   67,
       75,   72,   21,   21,   68,   69,   32,   21,   70,   21,
      122,  122,  832,  831,   32,  659,  659,  659,   21,  659,
      828,  824,  682,   21,   71,  682,   70,   72,   21,   21,
       73,   74,   75,   21,   70,   21,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   70,   24,   31,   76,   73,   74,   75,   24,
       31,   77,   31,  823,   79,   80,   24,   82,   83,   84,
       27,   31,   24,   24,   24,   24,   24,   24,   27,   24,
       31,   76,   89,   90,   27,   24,   31,   77,   31,   27,
       79,   80,   24,   82,   83,   84,   27,   31,  819,  815,
      778,  769,  768,  766,   27,  765,   91,  764,   89,   90,
       27,  763,  762,  761,  759,   27,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   91,   49,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   92,  758,  756,  755,  754,  752,  751,
       93,  750,   49,   49,   49,   49,   49,   49,  749,   49,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   92,
       54,   54,   54,   54,   54,   54,   93,   98,   98,   98,
       98,   98,   98,   98,   98,   98,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  748,   54,   54,   54,   54,
       54,   54,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   81,   56,
       85,   81,  105,  106,  103,   81,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  107,  108,   85,   56,   56,

       56,   56,   56,   56,   81,   56,   85,   81,  105,  106,
      747,   81,  743,  742,  110,  741,  111,  112,  113,  114,
      115,  107,  108,   85,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
      110,   96,  111,  112,  113,  114,  115,  737,  736,  735,
      727,  116,  726,  725,  716,  712,  711,  710,  117,  118,
       96,   96,   96,   96,   96,   96,  119,   96,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  116,  100,  100,
      100,  100,  100,  100,  117,  118,  709,  705,  704,  703,
      702,  148,  119,  148,  148,  148,  148,  148,  148,  148,

      148,  148,  121,  124,  100,  100,  100,  100,  100,  100,
      102,  126,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  121,  124,
      694,  691,  689,  688,  684,  683,  675,  126,  669,  668,
      667,  666,  665,  648,  645,  127,  128,  129,  102,  102,
      102,  102,  102,  102,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      123,  127,  128,  129,  130,  131,  123,  132,  134,  135,
      136,  137,  138,  139,  140,  141,  644,  643,  634,  628,
      104,  104,  104,  104,  104,  104,  123,  622,  621,  620,

      130,  131,  123,  132,  134,  135,  136,  137,  138,  139,
      140,  141,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  155,  142,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  142,  142,
      142,  142,  142,  142,  155,  142,  147,  619,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  152,  154,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  617,  606,  598,  596,  595,
      594,  572,  154,  157,  147,  147,  147,  147,  147,  147,

      150,  158,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  154,  157,
      566,  565,  564,  563,  543,  541,  530,  158,  528,  527,
      526,  523,  490,  483,  159,  160,  162,  165,  150,  150,
      150,  150,  150,  150,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  166,  151,  151,  151,  151,  151,  151,
      159,  160,  162,  165,  482,  481,  480,  446,  435,  167,
      432,  431,  430,  415,  401,  385,  168,  376,  375,  166,
      151,  151,  151,  151,  151,  151,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  167,  153,  153,  153,  153,

      153,  153,  168,  169,  172,  173,  174,  175,  176,  177,
      179,  178,  169,  169,  169,  178,  180,  181,  182,  172,
      183,  374,  153,  153,  153,  153,  153,  153,  186,  169,
      172,  173,  174,  175,  176,  177,  179,  178,  169,  169,
      169,  178,  180,  181,  182,  172,  183,  184,  187,  189,
      190,  191,  208,  209,  186,  210,  211,  212,  213,  187,
      211,  214,  184,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  184,  187,  189,  190,  191,  208,  209,
      373,  210,  211,  212,  213,  187,  211,  214,  184,  199,
      362,  199,  199,  199,  199,  199,  199,  199,  199,  199,

      199,  199,  199,  199,  199,  199,  199,  201,  331,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  320,  317,
      316,  315,  313,  308,  215,  301,  300,  199,  199,  199,
      199,  199,  199,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  217,  200,  200,  200,  200,  200,  200,  202,
      215,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      298,  294,  283,  273,  264,  256,  255,  254,  217,  200,
      200,  200,  200,  200,  200,  203,  253,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  204,  218,  204,  204,  204,  204,  204,

      204,  204,  204,  204,  250,  237,  207,  197,  196,  195,
      194,  192,  220,  203,  203,  203,  203,  203,  203,  205,
      218,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  206,  220,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  216,  221,
      222,  223,  224,  225,  226,  216,  227,  205,  205,  205,
      205,  205,  205,  216,  228,  229,  230,  232,  233,  234,
      235,  227,  236,  238,  216,  221,  222,  223,  224,  225,
      226,  216,  227,  239,  240,  241,  242,  243,  244,  216,
      228,  229,  230,  232,  233,  234,  235,  227,  236,  238,

      245,  246,  247,  248,  249,  251,  252,  188,  268,  239,
      240,  241,  242,  243,  244,  257,  185,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  245,  246,  247,  248,
      249,  251,  252,  258,  268,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  259,  269,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  258,  258,  258,  258,  258,  258,  260,  269,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  261,  270,  261,  261,  261,

      261,  261,  261,  261,  261,  261,  171,  163,  271,  161,
      156,  146,  145,  144,  133,  260,  260,  260,  260,  260,
      260,  263,  270,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  265,  271,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  267,  125,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  120,  109,   99,   97,   64,  272,  274,  276,
      277,  265,  265,  265,  265,  265,  265,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  278,  266,  266,  266,
      266,  266,  266,  272,  274,  276,  277,  279,  280,  282,

      284,  285,  286,  287,  288,  289,  290,  291,  292,  293,
      295,  297,  278,  266,  266,  266,  266,  266,  266,  299,
      302,  303,  304,  279,  280,  282,  284,  285,  286,  287,
      288,  289,  290,  291,  292,  293,  295,  297,  305,  306,
      307,  310,  311,  312,  314,  299,  302,  303,  304,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  330,   50,
       46,   45,   42,   37,  305,  306,  307,  310,  311,  312,
      314,  319,   18,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  321,  330,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,

      321,  323,   14,  323,  323,  323,  323,  323,  323,  323,
      323,  323,   12,    7,    4,    3,    0,    0,  332,    0,
        0,  321,  321,  321,  321,  321,  321,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  333,  322,  322,  322,
      322,  322,  322,  324,  332,  324,  324,  324,  324,  324,
      324,  324,  324,  324,    0,  334,    0,    0,    0,    0,
        0,    0,  333,  322,  322,  322,  322,  322,  322,  325,
        0,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      326,  334,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  327,  336,

      327,  327,  327,  327,  327,  327,  327,  327,  327,    0,
        0,    0,    0,    0,    0,    0,    0,  339,  326,  326,
      326,  326,  326,  326,  328,  336,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  329,  339,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  335,  340,  341,  342,  343,  344,  335,
      345,  335,  328,  328,  328,  328,  328,  328,  346,  347,
      348,  349,  350,  351,  352,  353,  354,  355,  356,  335,
      340,  341,  342,  343,  344,  335,  345,  335,  357,  358,
      359,  360,  363,  364,  346,  347,  348,  349,  350,  351,

      352,  353,  354,  355,  356,  365,  366,  367,  368,  370,
      371,  372,    0,  389,  357,  358,  359,  360,  363,  364,
      377,    0,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  365,  366,  367,  368,  370,  371,  372,  378,  389,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  379,
        0,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  380,  390,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  379,  379,  379,
      379,  379,  379,  381,  390,  381,  381,  381,  381,  381,

      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  382,  391,  382,  382,  382,  382,  382,  382,  382,
      382,  382,    0,    0,  392,    0,    0,    0,    0,    0,
        0,  381,  381,  381,  381,  381,  381,  384,  391,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  386,
      392,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  388,    0,  388,
      388,  388,  388,  388,  388,  388,  388,  388,    0,    0,
        0,    0,    0,  393,  394,  395,  396,  386,  386,  386,
      386,  386,  386,  387,  387,  387,  387,  387,  387,  387,

      387,  387,  397,  387,  387,  387,  387,  387,  387,  393,
      394,  395,  396,  399,  400,  402,  404,  405,  408,  409,
      410,  411,  412,  413,  414,  416,  417,  418,  397,  387,
      387,  387,  387,  387,  387,  419,  420,  421,  422,  399,
      400,  402,  404,  405,  408,  409,  410,  411,  412,  413,
      414,  416,  417,  418,  423,  424,  425,  426,  427,  428,
        0,  419,  420,  421,  422,  433,  433,  433,  433,  433,
      433,  433,  433,  433,    0,    0,    0,    0,    0,    0,
      423,  424,  425,  426,  427,  428,  434,    0,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  436,    0,

      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  438,    0,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  436,  436,  436,  436,
      436,  436,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  444,  437,  437,  437,  437,  437,  437,  441,  445,
      441,  441,  441,  441,  441,  441,  441,  441,  441,    0,
        0,    0,    0,    0,    0,    0,    0,  444,  437,  437,
      437,  437,  437,  437,  440,  445,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,

      440,  440,  443,  447,  443,  443,  443,  443,  443,  443,
      443,  443,  443,    0,    0,    0,    0,    0,    0,    0,
      448,  449,  440,  440,  440,  440,  440,  440,  442,  447,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  448,  449,  450,  451,
      452,  454,  455,  456,  457,  459,  460,  461,  462,  464,
      465,  467,  468,  469,  470,  466,  442,  442,  442,  442,
      442,  442,  466,  471,  450,  451,  452,  454,  455,  456,
      457,  459,  460,  461,  462,  464,  465,  467,  468,  469,
      470,  466,  472,  473,  474,  476,  478,  479,  466,  471,

      484,  484,  484,  484,  484,  484,  484,  484,  484,    0,
        0,    0,    0,    0,    0,    0,    0,  494,  472,  473,
      474,  476,  478,  479,  485,    0,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  486,  494,  486,  486,  486,  486,  486,  486,
      486,  486,  486,    0,    0,    0,    0,    0,    0,    0,
        0,  495,  485,  485,  485,  485,  485,  485,  487,    0,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  488,  495,  488,  488,
      488,  488,  488,  488,  488,  488,  488,    0,    0,  496,

        0,    0,    0,    0,    0,    0,  487,  487,  487,  487,
      487,  487,  489,    0,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  491,  496,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  493,    0,  493,  493,  493,  493,  493,  493,
      493,  493,  493,    0,    0,    0,    0,    0,  497,  498,
      499,  500,  491,  491,  491,  491,  491,  491,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  501,  492,  492,
      492,  492,  492,  492,  497,  498,  499,  500,  503,  504,
      505,  507,  508,  511,  513,  514,  515,  516,  517,  518,

      519,  522,  524,  501,  492,  492,  492,  492,  492,  492,
      525,    0,    0,    0,  503,  504,  505,  507,  508,  511,
      513,  514,  515,  516,  517,  518,  519,  522,  524,    0,
        0,    0,    0,    0,    0,  529,  525,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  531,    0,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  533,    0,  533,  533,  533,
      533,  533,  533,  533,  533,  533,    0,    0,    0,    0,
        0,    0,  539,    0,    0,  531,  531,  531,  531,  531,
      531,  532,  532,  532,  532,  532,  532,  532,  532,  532,

      540,  532,  532,  532,  532,  532,  532,  535,  539,  535,
      535,  535,  535,  535,  535,  535,  535,  535,    0,    0,
        0,    0,    0,    0,    0,    0,  540,  532,  532,  532,
      532,  532,  532,  534,    0,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  537,  542,  537,  537,  537,  537,  537,  537,  537,
      537,  537,    0,    0,    0,    0,    0,    0,    0,  545,
      546,  534,  534,  534,  534,  534,  534,  536,  542,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  545,  546,  547,  551,  552,

      553,  554,  555,  556,  557,  559,  560,  561,    0,  577,
        0,    0,    0,    0,    0,  536,  536,  536,  536,  536,
      536,    0,    0,  547,  551,  552,  553,  554,  555,  556,
      557,  559,  560,  561,  567,  577,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  568,  578,  568,  568,  568,  568,  568,  568,
      568,  568,  568,    0,    0,    0,    0,    0,    0,    0,
        0,  583,  567,  567,  567,  567,  567,  567,  569,  578,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  570,  583,  570,  570,

      570,  570,  570,  570,  570,  570,  570,    0,    0,  584,
        0,    0,    0,    0,    0,    0,  569,  569,  569,  569,
      569,  569,  571,    0,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  573,  584,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  575,    0,  575,  575,  575,  575,  575,  575,
      575,  575,  575,    0,    0,    0,    0,    0,    0,  585,
      586,  587,  573,  573,  573,  573,  573,  573,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  589,  574,  574,
      574,  574,  574,  574,  580,  585,  586,  587,  590,  592,

      580,  593,  601,  607,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  589,  574,  574,  574,  574,  574,  574,
      580,    0,    0,    0,  590,  592,  580,  593,  597,  607,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      599,    0,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  603,    0,
      603,  603,  603,  603,  603,  603,  603,  603,  603,    0,
        0,    0,    0,    0,    0,  608,    0,    0,  599,  599,
      599,  599,  599,  599,  600,  600,  600,  600,  600,  600,
      600,  600,  600,  609,  600,  600,  600,  600,  600,  600,

      605,  608,  605,  605,  605,  605,  605,  605,  605,  605,
      605,    0,    0,    0,    0,    0,    0,    0,  611,  609,
      600,  600,  600,  600,  600,  600,  602,  612,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  611,  613,    0,    0,    0,    0,
        0,    0,    0,  612,    0,    0,    0,    0,    0,    0,
        0,    0,  614,  616,  602,  602,  602,  602,  602,  602,
      604,  613,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  614,  616,
      618,  624,  632,  624,  624,  624,  624,  624,  624,  624,

      624,  624,    0,    0,    0,    0,    0,    0,  604,  604,
      604,  604,  604,  604,    0,    0,  618,  623,  632,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  626,  633,  626,  626,  626,
      626,  626,  626,  626,  626,  626,    0,    0,    0,    0,
        0,    0,    0,    0,  635,  623,  623,  623,  623,  623,
      623,  625,  633,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  627,
      635,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,    0,    0,    0,    0,    0,    0,    0,  637,  625,

      625,  625,  625,  625,  625,  629,    0,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  631,  637,  631,  631,  631,  631,  631,
      631,  631,  631,  631,    0,    0,    0,    0,    0,  638,
      639,  640,  641,  629,  629,  629,  629,  629,  629,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  656,  630,
      630,  630,  630,  630,  630,  638,  639,  640,  641,  647,
        0,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,    0,    0,    0,  656,  630,  630,  630,  630,  630,
      630,  649,    0,  649,  649,  649,  649,  649,  649,  649,

      649,  649,  649,  649,  649,  649,  649,  649,  649,  651,
        0,  651,  651,  651,  651,  651,  651,  651,  651,  651,
        0,    0,    0,    0,    0,    0,  657,    0,    0,  649,
      649,  649,  649,  649,  649,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  660,  650,  650,  650,  650,  650,
      650,  653,  657,  653,  653,  653,  653,  653,  653,  653,
      653,  653,    0,    0,    0,    0,    0,    0,    0,    0,
      660,  650,  650,  650,  650,  650,  650,  652,    0,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  655,  662,  655,  655,  655,

      655,  655,  655,  655,  655,  655,    0,    0,    0,    0,
        0,    0,    0,  664,    0,  652,  652,  652,  652,  652,
      652,  654,  662,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  664,
      671,    0,  671,  671,  671,  671,  671,  671,  671,  671,
      671,    0,    0,    0,    0,    0,    0,    0,  679,  654,
      654,  654,  654,  654,  654,  670,    0,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  673,  679,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  680,    0,    0,    0,    0,    0,

        0,    0,  685,  670,  670,  670,  670,  670,  670,  672,
        0,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      680,  672,  672,  672,  672,  672,  672,  674,  685,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,    0,
        0,    0,    0,    0,    0,    0,  686,  672,  672,  672,
      672,  672,  672,  676,    0,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  678,  686,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  687,    0,    0,    0,    0,    0,    0,    0,
        0,  676,  676,  676,  676,  676,  676,    0,    0,    0,

        0,    0,    0,    0,  700,    0,    0,  693,  687,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  695,
        0,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      700,  695,  695,  695,  695,  695,  695,  696,  701,  696,
      696,  696,  696,  696,  696,  696,  696,  696,    0,    0,
        0,    0,    0,    0,    0,    0,  708,  695,  695,  695,
      695,  695,  695,  697,  701,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  698,  708,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  718,    0,    0,    0,    0,    0,    0,    0,

      719,  697,  697,  697,  697,  697,  697,  713,    0,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  718,  713,
      713,  713,  713,  713,  713,  714,  719,  714,  714,  714,
      714,  714,  714,  714,  714,  714,    0,  724,    0,  732,
        0,    0,    0,    0,    0,  713,  713,  713,  713,  713,
      713,  715,  734,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  724,  729,  732,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  739,  740,    0,  734,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  739,  740,  771,  771,  771,  771,  772,  772,  772,
      772,  773,  773,  773,  773,  774,    0,  774,  774,  775,
      775,  775,  775,  776,    0,  776,  776,  777,  777,  779,
      779,  780,  780,  781,  781,  782,  782,  783,  783,  784,
      784,  785,  785,  786,  786,  787,  787,  788,  788,  789,
      789,  790,  790,  791,  791,  792,  792,  793,  793,  794,
      794,  795,  795,  796,  796,  797,  797,  798,  798,  799,
      799,  800,  800,  801,  801,  802,  802,  803,  803,  804,
      804,  805,  805,  806,  806,  807,  807,  808,  808,  809,
      809,  810,  810,  811,  811,  812,  812,  813,  813,  814,

      814,  816,  816,  817,  817,  818,  818,  820,  820,  821,
      821,  822,  822,  825,  825,  826,  826,  827,  827,  829,
      829,  830,  830,  833,  833,  834,  834,  835,  835,  836,
      836,  837,  837,  839,  839,  840,  840,  841,  841,  842,
      842,  843,  843,  845,  845,  846,  846,  847,  847,  849,
      849,  851,  851,  852,  852,  853,  853,  855,  855,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,

      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[90] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_ClntParser_stype yylval;
}

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 771 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3860 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
{ return ClntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
{ return ClntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
{ return ClntParser::ADDRESS_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
{ return ClntParser::STRING_KEYWORD_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ return ClntParser::ADDRESS_LIST_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ return ClntParser::NAME_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ return ClntParser::IA_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
{ return ClntParser::TA_; }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ return ClntParser::IAID_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 13:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
{ return ClntParser::LOGLEVEL_; }
	YY_BREAK
case 15:
YY_RULE_SETUP
{ return ClntParser::LOGMODE_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ return ClntParser::LOGNAME_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ return ClntParser::LOGCOLORS_; }
	YY_BREAK
case 18:
YY_RULE_SETUP
{ return ClntParser::WORKDIR_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
{ return ClntParser::SCRIPTS_DIR_; }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ return ClntParser::NOTIFY_SCRIPTS_; }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 22:
YY_RULE_SETUP
{ return ClntParser::VALID_TIME_; }
	YY_BREAK
case 23:
YY_RULE_SETUP
{ return ClntParser::REMOTE_AUTOCONF_; }
	YY_BREAK
case 24:
YY_RULE_SETUP
{ return ClntParser::T1_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
{ return ClntParser::T2_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
{ return ClntParser::OPTION_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
{ return ClntParser::DNS_SERVER_;}
	YY_BREAK
case 28:
YY_RULE_SETUP
{ return ClntParser::DOMAIN_;}
	YY_BREAK
case 29:
YY_RULE_SETUP
{ return ClntParser::NTP_SERVER_;}
	YY_BREAK
case 30:
YY_RULE_SETUP
{ return ClntParser::TIME_ZONE_;}
	YY_BREAK
case 31:
YY_RULE_SETUP
{ return ClntParser::SIP_SERVER_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
{ return ClntParser::SIP_DOMAIN_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ return ClntParser::FQDN_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ return ClntParser::FQDN_S_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ return ClntParser::NIS_SERVER_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ return ClntParser::NIS_DOMAIN_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
{ return ClntParser::NISP_SERVER_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ return ClntParser::NISP_DOMAIN_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ return ClntParser::LIFETIME_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ return ClntParser::REJECT_SERVERS_;}
	YY_BREAK
case 41:
YY_RULE_SETUP
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 42:
YY_RULE_SETUP
{ return ClntParser::RAPID_COMMIT_;}
	YY_BREAK
case 43:
YY_RULE_SETUP
{ return ClntParser::UNICAST_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
{ return ClntParser::STRICT_RFC_NO_ROUTING_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LL_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LLT_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_EN_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ return ClntParser::VENDOR_SPEC_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ return ClntParser::ANON_INF_REQUEST_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ return ClntParser::INSIST_MODE_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ return ClntParser::INACTIVE_MODE_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ return ClntParser::AUTH_ENABLED_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ return ClntParser::AUTH_ACCEPT_METHODS_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ return ClntParser::DIGEST_NONE_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ return ClntParser::DIGEST_PLAIN_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
{ return ClntParser::SKIP_CONFIRM_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ return ClntParser::DS_LITE_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
{ return ClntParser::EXPERIMENTAL_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
{ return ClntParser::ADDR_PARAMS_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ return ClntParser::REQUEST_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
;
	YY_BREAK
case 71:
YY_RULE_SETUP
;
	YY_BREAK
case 72:
YY_RULE_SETUP
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 73:
YY_RULE_SETUP
BEGIN(INITIAL);
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 75:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 76:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 77:
YY_RULE_SETUP
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 78:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 79:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 80:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 81:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return ClntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return ClntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
{
    // DUID in 0x00010203 format
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return ClntParser::DUID_;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
{
   // DUID in 00:01:02:03 format
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
        x = (toupper(*pos)-'A' + 10);
      else
        x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))	
        x += (toupper(*(pos+1))-'A' + 10);
      else
        x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }
   
   return ClntParser::DUID_;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
{ 
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::HEXNUMBER_;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
{ 
    if(!sscanf(yytext,"%u",(unsigned int*)&(yylval.ival))) { 
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::INTNUMBER_;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
{return yytext[0];} 
	YY_BREAK
case 89:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 771 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 771 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 770);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

