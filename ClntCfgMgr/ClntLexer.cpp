#line 2 "ClntLexer.cpp"

#line 4 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 65
#define YY_END_OF_BUFFER 66
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[570] =
    {   0,
        1,    1,    0,    0,    0,    0,   66,   64,    2,    1,
        1,   64,   47,   64,   64,   63,   63,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   51,   51,   65,    1,    1,    1,
        0,   59,   47,    0,   59,   49,   48,   63,    0,    0,
       62,    0,   56,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,    6,   60,   60,   60,   60,   60,   60,
       60,   38,   60,   60,   60,   60,   60,   17,   18,    7,
       60,   60,   60,   60,   60,   50,   48,   63,    0,    0,
       55,   61,   54,   54,   60,   60,   60,   60,   60,   60,

       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   63,    0,    0,    0,   53,   53,    0,   54,    0,
       54,   60,   60,   44,   60,   60,   60,   60,   26,    8,
       60,   60,   60,    0,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       63,    0,    0,    0,    0,   53,    0,   53,    0,   54,
       54,   54,   54,   60,   60,   60,   60,   60,   60,    3,
       60,   60,   60,   60,    0,   60,   60,   60,    9,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,

       60,   60,   60,   60,    0,    0,    0,    0,   53,   53,
       53,   53,    0,   54,   54,   54,    0,   54,   60,   60,
       60,   21,   60,   60,   60,   60,   60,   60,   60,    0,
        0,   60,   60,   60,   60,   19,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,    0,
        0,    0,   53,   53,   53,    0,   53,    0,    0,   54,
       54,   54,   54,    5,   60,   60,   42,   40,   60,   60,
       60,   60,   60,    0,    0,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   35,   60,
       60,   60,    0,    0,    0,    0,    0,   53,   53,   53,

       53,    0,   54,   54,   54,    0,   54,   60,   60,   60,
       41,   60,   31,   60,   12,   13,    0,    0,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   14,    0,    0,    0,   53,   53,   53,
        0,   53,   58,   54,   54,   54,   54,   60,   60,   60,
       39,   11,    0,    0,   60,   60,    4,   60,   60,   60,
       60,   60,   60,   60,   10,   60,   23,   60,   60,    0,
        0,    0,   57,   53,   53,   53,   53,   54,   54,   54,
        0,   54,   60,   60,   20,    0,    0,   28,   27,   22,
       60,   60,   60,   60,   60,   25,   24,   60,   60,   60,

        0,    0,   53,   53,   53,    0,   53,   54,   54,   54,
       54,   60,   45,   30,   29,   60,   60,   60,   60,   60,
       60,   60,   43,    0,    0,    0,   53,   53,   53,   53,
       54,   54,   54,    0,   54,   60,   60,   60,   60,   34,
       60,   60,   60,    0,    0,   53,   53,   53,    0,   53,
       54,   54,   54,   54,   60,   60,   60,   60,   32,   60,
       60,    0,    0,    0,   53,   53,   53,   53,   54,   54,
       54,    0,   54,   60,   60,   60,   60,   60,   16,    0,
       52,   55,   53,   53,   53,    0,   53,   54,   54,   54,
       54,   60,   60,   33,   60,   60,    0,   52,    0,   53,

       53,   53,   53,   53,   54,   54,   54,    0,   54,   46,
       60,   60,   60,   52,   55,   53,    0,   53,   53,   53,
       53,   54,   54,   54,   15,   37,   60,   52,   53,   53,
       53,   53,   54,   54,   54,   60,   53,   53,    0,   53,
       53,   54,   60,   53,   53,   54,   60,   53,   53,    0,
       36,   53,   53,   53,   53,    0,   53,   53,   53,   53,
        0,   53,   53,   53,   53,    0,   53,   53,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   16,   16,   16,   16,   16,   16,   17,    1,    1,
        1,    1,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
        1,    1,    1,    1,    1,    1,   18,   19,   20,   21,

       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[44] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        3,    1,    4,    4,    4,    4,    5,    4,    4,    4,
        4,    4,    4,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[649] =
    {   0,
        0,    0, 1889, 1888,    0,    0, 1895, 1898, 1898,   41,
       43, 1889,    0, 1886,   40,   40, 1851, 1874,   69,   95,
       38, 1856, 1872,   49,  102,  104,   60,  105,   56,  106,
      130,  107,   78,  110, 1898, 1876, 1898,   46,   76,   94,
     1882, 1898,    0, 1879, 1878, 1898,    0,  144, 1867,   88,
     1898,    0,  136, 1866,  157, 1861, 1864,   34,   51,   89,
      116,  157,  114,  164,  136,   82,  165,  151,  174,  122,
      168, 1863,  171,  169,  177,  175,  178, 1862, 1861, 1860,
      180,  181,  182,  183,  184, 1898,    0,  207,  202, 1859,
      220,    0,  226,  239,  243, 1840,  112,  250,  221,  251,

      253,  254,  256,  186,  258,  266,  269,  264,  272,  234,
      270,  271,  274,  282,  277,  278,  281,  192,  283,  284,
      285,  302,  315, 1857, 1856,  321,  334,  338,  344,  355,
      361,  365,  289, 1855,  290,  356,  365,  379, 1854, 1853,
      373,  376,  377, 1859,  380,  382,  385,  381,  383,  401,
      291,  392,  403,  388,  402,  394,  408,  411,  404,  420,
      427, 1851, 1850, 1849,  432,  438,  449,  455,  461,  467,
      480,  486,  499, 1848,  414,  481,  412,  494,  499, 1847,
      500,  416,  502,  505,  499,  507,  510,  512, 1846,  516,
      513,  514,  520,  530,  525,  524,  528,  450,  529,  531,

      456,  541,  535,  536, 1845, 1844, 1843,  562,  568,  581,
      587,  600,  604,  610, 1842,  617,  628,  634,  563,  550,
      537, 1841,  538,  542,  551,  316,  612,  635,  629, 1825,
     1834,  636,  637,  638,  640, 1838,  641,  650,  645,  654,
      651,  652,  656,  660,  657,  659,  662,  673,  667, 1837,
     1836,  684,  690, 1835,  697,  708,  714,  720,  726,  732,
      745,  751,  764, 1834,  663,  746, 1833,  665,  759,  764,
      765,  766,  767, 1819, 1813,  546,  773,  669,  774,  776,
      777,  778,  721,  782,  779,  784,  709,  785, 1830,  788,
      786,  789, 1829, 1828, 1827,  812,  818,  824,  837,  843,

      856,  860,  866, 1826,  873,  884,  890,  787,  798,  885,
     1825,  891, 1824,  790, 1823, 1822, 1820, 1798,  892,  893,
      668,  894,  868,  895,  791,  897,  903,  904,  819,  905,
      908,  910,  906, 1819, 1818, 1817,  921,  927, 1816,  934,
      945,  951,  955,  961,  974,  980,  993,  914,  988,  975,
     1815, 1814, 1804, 1807,  994,  995, 1811,  996,  997,  998,
      956,  999, 1001, 1000, 1810, 1003, 1809, 1007, 1019, 1808,
     1807, 1806, 1024, 1031, 1044, 1050, 1063, 1069, 1805, 1076,
     1087, 1093, 1093, 1094, 1804, 1789, 1784, 1801, 1800, 1799,
     1088, 1095, 1098, 1101,  907, 1798, 1797, 1011, 1102, 1104,

     1796, 1795, 1115, 1794, 1129, 1120, 1142, 1148, 1161, 1167,
     1180, 1071, 1793, 1898, 1898, 1039, 1106, 1175, 1180, 1181,
     1183, 1184, 1792, 1791, 1790, 1789, 1207, 1191, 1220, 1233,
     1239, 1788, 1246, 1257, 1263,  832, 1191, 1121, 1194, 1787,
     1258, 1105, 1202, 1786, 1785, 1269, 1784, 1283, 1274, 1296,
     1302, 1315, 1321, 1334, 1329, 1316, 1334, 1335, 1783, 1199,
     1338, 1782, 1781, 1780, 1362, 1348, 1375, 1354, 1388, 1779,
     1395, 1406, 1412, 1274, 1340, 1407, 1412, 1413, 1778, 1777,
     1776,    0, 1420, 1775, 1438, 1430, 1451, 1457, 1470, 1476,
     1489, 1357, 1228, 1774, 1415, 1484, 1773, 1772, 1771, 1770,

     1506, 1495, 1519, 1532, 1538, 1769, 1545,    0, 1558, 1768,
     1490, 1264, 1005, 1767, 1898, 1766,    0, 1564, 1765, 1571,
     1584, 1590, 1603,    0, 1764, 1763, 1370, 1762, 1761, 1760,
     1609, 1622, 1628, 1664,    0, 1424, 1651, 1630,    0, 1635,
     1898,    0, 1519, 1623, 1617, 1898, 1559, 1609, 1604,    0,
     1598, 1585, 1579, 1571, 1553,    0, 1540, 1527, 1514, 1501,
        0, 1498, 1497, 1496, 1471,    0, 1465, 1452, 1898, 1651,
     1656, 1661, 1666, 1671, 1674, 1679, 1681, 1459, 1436, 1683,
     1435, 1685, 1687, 1396, 1689, 1691, 1354, 1693, 1695, 1323,
     1697, 1699, 1310, 1701, 1703, 1304, 1705, 1707, 1247, 1709,

     1711, 1211, 1713, 1715, 1175, 1717, 1719, 1169, 1721, 1723,
     1150, 1725, 1727, 1121, 1729, 1731, 1071,  959, 1733, 1735,
      807, 1737, 1739,  805,  728, 1741, 1743,  705, 1745,  618,
      608, 1747, 1749, 1751,  561, 1753, 1755, 1757,  431, 1759,
     1761, 1763,  352, 1765, 1767, 1769,  306, 1771
    } ;

static yyconst flex_int16_t yy_def[649] =
    {   0,
      569,    1,  570,  570,  571,  571,  569,  569,  569,  569,
      569,  572,  573,  574,  569,  569,   16,  569,  575,  575,
       20,   20,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  569,  569,  569,  569,  569,  569,
      572,  569,  573,  574,  569,  569,  576,  569,  577,   48,
      569,  578,  579,  575,   20,   55,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  569,  576,  569,   88,  580,
      581,  578,  569,   93,   55,   95,  575,  575,  575,  575,

      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  569,  122,  582,  583,  569,  126,  569,  569,  584,
      129,   95,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  569,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      123,  123,  585,  586,  569,  569,  587,  166,  569,  569,
      170,  569,  172,  132,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  569,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,

      575,  575,  575,  575,  569,  588,  589,  569,  569,  209,
      569,  211,  569,  569,  569,  569,  590,  216,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  569,
      569,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  591,
      592,  569,  569,  569,  569,  593,  255,  569,  569,  569,
      260,  569,  262,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  569,  569,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  569,  594,  595,  569,  569,  569,  298,  569,

      300,  569,  569,  569,  569,  596,  305,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  569,  569,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  597,  598,  569,  569,  569,  569,
      599,  340,  569,  569,  344,  569,  346,  575,  575,  575,
      575,  575,  569,  569,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  569,
      600,  601,  569,  569,  374,  569,  376,  569,  569,  569,
      602,  380,  575,  575,  575,  569,  569,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,

      603,  604,  569,  569,  569,  605,  405,  569,  408,  569,
      410,  575,  575,  569,  569,  575,  575,  575,  575,  575,
      575,  575,  575,  569,  606,  607,  569,  427,  569,  429,
      569,  569,  569,  608,  433,  575,  575,  575,  575,  575,
      575,  575,  575,  609,  610,  569,  569,  569,  611,  448,
      569,  451,  569,  453,  575,  575,  575,  575,  575,  575,
      575,  569,  612,  613,  569,  465,  569,  467,  569,  569,
      569,  614,  471,  575,  575,  575,  575,  575,  575,  615,
      616,  617,  569,  569,  569,  618,  485,  569,  488,  569,
      490,  575,  575,  575,  575,  575,  569,  619,  569,  620,

      569,  501,  569,  503,  569,  569,  569,  621,  507,  575,
      575,  575,  575,  622,  569,  623,  624,  569,  569,  569,
      520,  569,  522,  625,  575,  575,  575,  569,  626,  627,
      569,  531,  569,  569,  628,  575,  569,  629,  630,  569,
      569,  631,  575,  632,  633,  569,  575,  569,  634,  635,
      575,  636,  637,  569,  638,  639,  640,  641,  569,  642,
      643,  644,  645,  569,  646,  647,  648,  569,    0,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,

      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569
    } ;

static yyconst flex_int16_t yy_nxt[1942] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   18,   19,   20,   20,
       21,   20,   22,   23,   23,   24,   23,   23,   25,   23,
       26,   27,   28,   23,   29,   30,   31,   32,   33,   34,
       23,   23,   23,   38,   39,   40,   39,   46,   38,   39,
      569,   47,   48,   48,   48,   48,   49,   50,   50,   50,
       50,   50,   50,   59,   51,  569,   64,  569,   60,   61,
       97,   65,  569,   74,   98,   62,  569,   75,   40,   39,
       52,   55,   55,   55,   55,   49,   55,   55,   55,   56,
       55,   55,   71,   57,  569,   83,   38,   39,  569,   84,

       89,   89,   89,   89,  105,  569,   58,   55,   55,   55,
       55,   49,   55,   55,   55,   55,   55,   55,  569,   57,
      569,  569,  569,  569,   99,   72,  569,   66,  569,   68,
      569,   76,  569,   67,  102,   69,  134,   82,  569,   73,
       70,   85,   77,   78,   79,  100,  569,   80,   93,   93,
       93,   93,  569,  104,  109,   81,   88,   88,   88,   88,
       49,   89,   89,   89,   89,   89,   89,  569,   51,   95,
       95,   95,   95,  569,   95,   95,   95,   95,   95,   95,
      569,  569,  101,  108,  569,  569,  107,  569,  106,  103,
      569,  569,  111,  569,  569,  115,  569,  569,  569,  569,

      569,  112,  569,  113,  110,  141,  118,  114,  569,  117,
      119,  157,  116,  120,  123,  123,  123,  123,  121,  122,
      122,  122,  122,   49,  123,  123,  123,  123,  123,  123,
      136,   51,  126,  126,  126,  126,  128,  569,  129,  129,
      129,  129,  130,  131,  131,  131,  131,  131,  131,  569,
      569,  131,  131,  131,  131,  132,  132,  132,  132,  149,
      132,  132,  132,  132,  132,  132,  569,  569,  137,  569,
      569,  135,  569,  138,  569,  143,  140,  144,  145,  142,
      569,  148,  569,  146,  139,  569,  569,  569,  569,  147,
      569,  153,  150,  569,  569,  152,  151,  569,  569,  569,

      569,  569,  156,  155,  159,  569,  569,  569,  158,  504,
      175,  194,  160,  154,  161,  161,  161,  161,   49,  162,
      162,  162,  162,  162,  162,  176,   51,  162,  162,  162,
      162,  165,  569,  166,  166,  166,  166,  167,  168,  168,
      168,  168,  168,  168,  569,  270,  168,  168,  168,  168,
      169,  169,  169,  169,  128,  563,  170,  170,  170,  170,
      130,  171,  171,  171,  171,  171,  171,  172,  172,  172,
      172,  569,  569,  171,  171,  171,  171,  174,  174,  174,
      174,  569,  174,  174,  174,  174,  174,  174,  179,  569,
      178,  177,  569,  569,  180,  569,  569,  569,  569,  569,

      186,  569,  189,  200,  569,  182,  183,  184,  569,  198,
      569,  195,  181,  188,  191,  187,  190,  569,  569,  569,
      569,  199,  192,  196,  569,  201,  193,  569,  569,  204,
      569,  202,  569,  221,  558,  203,  569,  227,  197,  161,
      161,  161,  161,  569,  208,  208,  208,  208,  165,  219,
      209,  209,  209,  209,  167,  210,  210,  210,  210,  210,
      210,  211,  211,  211,  211,  569,  569,  210,  210,  210,
      210,  213,  569,  169,  169,  169,  169,  128,  243,  214,
      214,  214,  214,  130,  215,  215,  215,  215,  215,  215,
      569,  246,  215,  215,  215,  215,  128,  569,  216,  216,

      216,  216,  217,  218,  218,  218,  218,  218,  218,  569,
      569,  218,  218,  218,  218,  569,  569,  220,  569,  230,
      223,  569,  229,  569,  222,  226,  569,  224,  569,  569,
      569,  233,  569,  228,  231,  225,  569,  235,  232,  239,
      569,  569,  234,  236,  569,  569,  569,  569,  237,  242,
      247,  569,  569,  569,  569,  241,  249,  569,  569,  265,
      238,  240,  569,  319,  553,  244,  569,  569,  267,  248,
      268,  266,  252,  245,  208,  208,  208,  208,  165,  569,
      253,  253,  253,  253,  167,  254,  254,  254,  254,  254,
      254,  569,  269,  254,  254,  254,  254,  165,  264,  255,

      255,  255,  255,  256,  257,  257,  257,  257,  257,  257,
      569,  546,  257,  257,  257,  257,  258,  258,  258,  258,
      128,  545,  259,  259,  259,  259,  130,  128,  569,  260,
      260,  260,  260,  217,  261,  261,  261,  261,  261,  261,
      262,  262,  262,  262,  569,  569,  261,  261,  261,  261,
      271,  569,  569,  569,  569,  272,  569,  569,  273,  281,
      278,  569,  280,  283,  282,  276,  569,  569,  569,  287,
      569,  277,  569,  569,  279,  569,  569,  286,  569,  569,
      284,  569,  291,  569,  569,  569,  285,  308,  288,  569,
      290,  357,  292,  309,  321,  289,  296,  296,  296,  296,

      165,  311,  297,  297,  297,  297,  167,  165,  542,  298,
      298,  298,  298,  256,  299,  299,  299,  299,  299,  299,
      300,  300,  300,  300,  569,  569,  299,  299,  299,  299,
      302,  535,  258,  258,  258,  258,  128,  569,  259,  259,
      259,  259,  128,  330,  303,  303,  303,  303,  217,  304,
      304,  304,  304,  304,  304,  569,  326,  304,  304,  304,
      304,  128,  569,  305,  305,  305,  305,  306,  307,  307,
      307,  307,  307,  307,  569,  569,  307,  307,  307,  307,
      569,  569,  569,  569,  310,  313,  314,  315,  316,  569,
      569,  312,  569,  569,  569,  569,  323,  324,  569,  327,

      569,  569,  569,  569,  569,  569,  569,  569,  530,  325,
      524,  320,  322,  332,  569,  331,  348,  328,  352,  329,
      361,  333,  337,  334,  296,  296,  296,  296,  165,  349,
      297,  297,  297,  297,  165,  569,  338,  338,  338,  338,
      256,  339,  339,  339,  339,  339,  339,  569,  569,  339,
      339,  339,  339,  165,  365,  340,  340,  340,  340,  341,
      342,  342,  342,  342,  342,  342,  569,  455,  342,  342,
      342,  342,  343,  343,  343,  343,  128,  359,  259,  259,
      259,  259,  217,  128,  569,  344,  344,  344,  344,  306,
      345,  345,  345,  345,  345,  345,  346,  346,  346,  346,

      569,  569,  345,  345,  345,  345,  350,  569,  569,  569,
      569,  569,  351,  569,  356,  358,  360,  355,  362,  569,
      569,  569,  569,  569,  569,  364,  569,  366,  363,  367,
      569,  383,  368,  373,  373,  373,  373,  165,  369,  297,
      297,  297,  297,  256,  165,  420,  374,  374,  374,  374,
      341,  375,  375,  375,  375,  375,  375,  376,  376,  376,
      376,  569,  504,  375,  375,  375,  375,  343,  343,  343,
      343,  128,  569,  378,  378,  378,  378,  306,  379,  379,
      379,  379,  379,  379,  569,  394,  379,  379,  379,  379,
      128,  569,  380,  380,  380,  380,  381,  382,  382,  382,

      382,  382,  382,  569,  569,  382,  382,  382,  382,  385,
      569,  569,  569,  569,  569,  569,  569,  569,  384,  569,
      421,  569,  398,  569,  388,  391,  393,  569,  399,  389,
      390,  396,  392,  395,  397,  569,  373,  373,  373,  373,
      400,  165,  527,  403,  403,  403,  403,  341,  404,  404,
      404,  404,  404,  404,  569,  569,  404,  404,  404,  404,
      165,  437,  405,  405,  405,  405,  406,  407,  407,  407,
      407,  407,  407,  569,  500,  407,  407,  407,  407,  128,
      436,  259,  259,  259,  259,  306,  128,  569,  408,  408,
      408,  408,  381,  409,  409,  409,  409,  409,  409,  410,

      410,  410,  410,  569,  569,  409,  409,  409,  409,  569,
      569,  569,  412,  416,  569,  413,  417,  569,  569,  418,
      569,  569,  569,  423,  491,  165,  419,  297,  297,  297,
      297,  341,  429,  429,  429,  429,  460,  569,  422,  165,
      438,  427,  427,  427,  427,  406,  428,  428,  428,  428,
      428,  428,  569,  468,  428,  428,  428,  428,  128,  457,
      431,  431,  431,  431,  381,  432,  432,  432,  432,  432,
      432,  569,  454,  432,  432,  432,  432,  128,  430,  433,
      433,  433,  433,  434,  435,  435,  435,  435,  435,  435,
      569,  569,  435,  435,  435,  435,  569,  569,  439,  569,

      569,  569,  441,  447,  447,  447,  447,  569,  478,  443,
      569,  458,  456,  442,  411,  569,  440,  165,  569,  446,
      446,  446,  446,  406,  447,  447,  447,  447,  447,  447,
      165,  461,  448,  448,  448,  448,  449,  450,  450,  450,
      450,  450,  450,  569,  569,  450,  450,  450,  450,  128,
      377,  259,  259,  259,  259,  381,  128,  511,  451,  451,
      451,  451,  434,  452,  452,  452,  452,  452,  452,  453,
      453,  453,  453,  569,  569,  452,  452,  452,  452,  165,
      569,  297,  297,  297,  297,  406,  467,  467,  467,  467,
      569,  492,  459,  165,  526,  465,  465,  465,  465,  449,

      466,  466,  466,  466,  466,  466,  569,  347,  466,  466,
      466,  466,  128,  301,  469,  469,  469,  469,  434,  470,
      470,  470,  470,  470,  470,  569,  263,  470,  470,  470,
      470,  128,  569,  471,  471,  471,  471,  472,  473,  473,
      473,  473,  473,  473,  569,  569,  473,  473,  473,  473,
      569,  569,  475,  474,  569,  476,  569,  212,  569,  479,
      484,  484,  484,  484,  569,  493,  487,  487,  487,  487,
      510,  477,  165,  569,  483,  483,  483,  483,  449,  484,
      484,  484,  484,  484,  484,  165,  569,  485,  485,  485,
      485,  486,  487,  487,  487,  487,  487,  487,  128,  173,

      259,  259,  259,  259,  434,  128,  536,  488,  488,  488,
      488,  472,  489,  489,  489,  489,  489,  489,  490,  490,
      490,  490,  569,  569,  489,  489,  489,  489,  569,  569,
      165,  569,  297,  297,  297,  297,  449,  495,  127,   94,
      569,  494,  503,  503,  503,  503,  512,  496,  165,  543,
      501,  501,  501,  501,  486,  502,  502,  502,  502,  502,
      502,  569,   92,  502,  502,  502,  502,  128,  566,  505,
      505,  505,  505,  472,  506,  506,  506,  506,  506,  506,
      569,  566,  506,  506,  506,  506,  128,  566,  507,  507,
      507,  507,  508,  509,  509,  509,  509,  509,  509,  569,

      569,  509,  509,  509,  509,  569,  569,  519,  519,  519,
      519,  525,  561,  566,  561,  513,  165,  561,  518,  518,
      518,  518,  486,  519,  519,  519,  519,  519,  519,  165,
      556,  520,  520,  520,  520,  569,  521,  521,  521,  521,
      521,  521,  569,  561,  521,  521,  521,  521,  128,  547,
      259,  259,  259,  259,  472,  128,  556,  522,  522,  522,
      522,  508,  523,  523,  523,  523,  523,  523,  569,  556,
      523,  523,  523,  523,  165,  569,  297,  297,  297,  297,
      486,  165,  551,  531,  531,  531,  531,  550,  532,  532,
      532,  532,  532,  532,  569,  556,  532,  532,  532,  532,

      128,  550,  533,  533,  533,  533,  508,  534,  534,  534,
      534,  534,  534,  569,  569,  534,  534,  534,  534,  165,
      550,  540,  540,  540,  540,  539,  541,  541,  541,  541,
      541,  541,  569,  550,  541,  541,  541,  541,  128,  539,
      259,  259,  259,  259,  508,  165,  539,  297,  297,  297,
      297,   35,   35,   35,   35,   35,   37,   37,   37,   37,
       37,   41,   41,   41,   41,   41,   43,  517,   43,   43,
       43,   44,   44,   44,   44,   44,   54,   54,   54,   87,
      508,   87,   87,   87,   90,   90,  124,  124,  163,  163,
      164,  164,  205,  205,  206,  206,  250,  250,  251,  251,

      293,  293,  294,  294,  335,  335,  336,  336,  370,  370,
      371,  371,  401,  401,  402,  402,  424,  424,  425,  425,
      444,  444,  445,  445,  462,  462,  463,  463,  480,  480,
      481,  481,  497,  497,  498,  498,  514,  514,  516,  516,
      528,  528,  529,  529,  537,  537,  538,  538,  544,  544,
      548,  548,  549,  549,  552,  552,  554,  554,  555,  555,
      557,  557,  559,  559,  560,  560,  562,  562,  564,  564,
      565,  565,  567,  567,  568,  568,  539,  517,  499,  569,
      569,  486,  517,  499,  569,  472,  517,  515,  499,  464,
      569,  449,  499,  464,  569,  434,  482,  464,  426,  569,

      406,  464,  426,  569,  381,   91,  426,  372,  569,  569,
      341,  426,  372,  569,  569,  569,  569,  569,  415,  414,
      569,  306,   91,  372,  295,  569,  569,  569,  387,  386,
      569,  569,  256,  372,  295,  569,  354,  353,  569,  569,
      569,  569,  217,   91,  295,  207,  569,  318,  317,  569,
      569,  167,  295,  207,  569,  275,  274,  569,  130,   91,
      207,  125,  569,  569,  569,  207,  125,  569,  185,  569,
      569,  569,   91,  125,  133,  125,  569,  569,  569,  569,
      569,   96,  569,   91,   44,   45,   42,   86,  569,   63,
       53,  569,   45,   42,  569,   36,   36,    7,  569,  569,

      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569
    } ;

static yyconst flex_int16_t yy_chk[1942] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   10,   10,   11,   11,   15,   38,   38,
       58,   15,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   21,   16,   24,   24,   59,   21,   21,
       58,   24,   29,   29,   59,   21,   27,   29,   39,   39,
       16,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   27,   19,   33,   33,   40,   40,   66,   33,

       50,   50,   50,   50,   66,   60,   19,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   25,   20,
       26,   28,   30,   32,   60,   28,   34,   25,   97,   26,
       63,   30,   61,   25,   63,   26,   97,   32,   70,   28,
       26,   34,   30,   31,   31,   61,   31,   31,   53,   53,
       53,   53,   65,   65,   70,   31,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   68,   48,   55,
       55,   55,   55,   62,   55,   55,   55,   55,   55,   55,
       64,   67,   62,   69,   71,   74,   68,   73,   67,   64,
       69,   76,   73,   75,   77,   77,   81,   82,   83,   84,

       85,   74,  104,   75,   71,  104,   82,   76,  118,   81,
       83,  118,   77,   84,   89,   89,   89,   89,   85,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       99,   88,   91,   91,   91,   91,   93,   99,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   94,
      110,   94,   94,   94,   94,   95,   95,   95,   95,  110,
       95,   95,   95,   95,   95,   95,   98,  100,  100,  101,
      102,   98,  103,  101,  105,  106,  103,  107,  107,  105,
      108,  109,  106,  108,  102,  107,  111,  112,  109,  108,
      113,  114,  111,  115,  116,  113,  112,  117,  114,  119,

      120,  121,  117,  116,  120,  133,  135,  151,  119,  647,
      133,  151,  121,  115,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  135,  122,  123,  123,  123,
      123,  126,  226,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  127,  226,  127,  127,  127,  127,
      128,  128,  128,  128,  129,  643,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  130,  130,  130,
      130,  131,  136,  131,  131,  131,  131,  132,  132,  132,
      132,  137,  132,  132,  132,  132,  132,  132,  138,  141,
      137,  136,  142,  143,  141,  138,  145,  148,  146,  149,

      145,  147,  147,  156,  154,  143,  143,  143,  152,  154,
      156,  152,  142,  146,  149,  145,  148,  150,  155,  153,
      159,  155,  150,  153,  157,  157,  150,  158,  177,  160,
      175,  158,  182,  177,  639,  159,  160,  182,  153,  161,
      161,  161,  161,  161,  165,  165,  165,  165,  166,  175,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  167,  167,  167,  167,  168,  198,  168,  168,  168,
      168,  169,  201,  169,  169,  169,  169,  170,  198,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      171,  201,  171,  171,  171,  171,  172,  176,  172,  172,

      172,  172,  172,  172,  172,  172,  172,  172,  172,  173,
      178,  173,  173,  173,  173,  179,  181,  176,  183,  185,
      179,  184,  184,  186,  178,  181,  187,  179,  188,  191,
      192,  187,  190,  183,  185,  179,  193,  190,  186,  194,
      196,  195,  188,  191,  197,  199,  194,  200,  192,  197,
      202,  203,  204,  221,  223,  196,  204,  202,  224,  220,
      193,  195,  276,  276,  635,  199,  220,  225,  223,  203,
      224,  221,  208,  200,  208,  208,  208,  208,  209,  219,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  210,  225,  210,  210,  210,  210,  211,  219,  211,

      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      212,  631,  212,  212,  212,  212,  213,  213,  213,  213,
      214,  630,  214,  214,  214,  214,  214,  216,  227,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      217,  217,  217,  217,  218,  229,  218,  218,  218,  218,
      227,  228,  232,  233,  234,  228,  235,  237,  229,  238,
      234,  239,  237,  240,  239,  232,  238,  241,  242,  244,
      240,  233,  243,  245,  235,  246,  244,  243,  247,  265,
      241,  268,  248,  249,  321,  278,  242,  265,  245,  248,
      247,  321,  249,  265,  278,  246,  252,  252,  252,  252,

      253,  268,  253,  253,  253,  253,  253,  255,  628,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      256,  256,  256,  256,  257,  287,  257,  257,  257,  257,
      258,  625,  258,  258,  258,  258,  259,  283,  259,  259,
      259,  259,  260,  287,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  261,  283,  261,  261,  261,
      261,  262,  266,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  263,  269,  263,  263,  263,  263,
      270,  271,  272,  273,  266,  270,  271,  272,  273,  277,
      279,  269,  280,  281,  282,  285,  280,  281,  284,  284,

      286,  288,  291,  308,  290,  292,  314,  325,  624,  282,
      621,  277,  279,  290,  309,  288,  308,  285,  314,  286,
      325,  291,  296,  292,  296,  296,  296,  296,  297,  309,
      297,  297,  297,  297,  298,  329,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  299,  436,  299,
      299,  299,  299,  300,  329,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  301,  436,  301,  301,
      301,  301,  302,  302,  302,  302,  303,  323,  303,  303,
      303,  303,  303,  305,  323,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  306,  306,  306,  306,

      307,  310,  307,  307,  307,  307,  310,  312,  319,  320,
      322,  324,  312,  326,  320,  322,  324,  319,  326,  327,
      328,  330,  333,  395,  331,  328,  332,  330,  327,  331,
      348,  348,  332,  337,  337,  337,  337,  338,  333,  338,
      338,  338,  338,  338,  340,  395,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  341,  341,  341,
      341,  342,  618,  342,  342,  342,  342,  343,  343,  343,
      343,  344,  361,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  345,  361,  345,  345,  345,  345,
      346,  350,  346,  346,  346,  346,  346,  346,  346,  346,

      346,  346,  346,  347,  349,  347,  347,  347,  347,  350,
      355,  356,  358,  359,  360,  362,  364,  363,  349,  366,
      398,  513,  366,  368,  355,  359,  360,  398,  368,  356,
      358,  363,  359,  362,  364,  369,  373,  373,  373,  373,
      369,  374,  513,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  375,  416,  375,  375,  375,  375,
      376,  416,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  377,  617,  377,  377,  377,  377,  378,
      412,  378,  378,  378,  378,  378,  380,  412,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  381,

      381,  381,  381,  382,  391,  382,  382,  382,  382,  383,
      384,  392,  383,  391,  393,  384,  392,  394,  399,  393,
      400,  442,  417,  400,  614,  403,  394,  403,  403,  403,
      403,  403,  406,  406,  406,  406,  442,  438,  399,  405,
      417,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  407,  611,  407,  407,  407,  407,  408,  438,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  409,  608,  409,  409,  409,  409,  410,  605,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      411,  418,  411,  411,  411,  411,  419,  420,  418,  421,

      422,  428,  420,  428,  428,  428,  428,  437,  460,  422,
      439,  439,  437,  421,  602,  460,  419,  427,  443,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      429,  443,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  430,  493,  430,  430,  430,  430,  431,
      599,  431,  431,  431,  431,  431,  433,  493,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  434,
      434,  434,  434,  435,  441,  435,  435,  435,  435,  446,
      512,  446,  446,  446,  446,  446,  449,  449,  449,  449,
      474,  474,  441,  448,  512,  448,  448,  448,  448,  448,

      448,  448,  448,  448,  448,  448,  450,  596,  450,  450,
      450,  450,  451,  593,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  452,  590,  452,  452,  452,
      452,  453,  456,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  454,  455,  454,  454,  454,  454,
      457,  458,  456,  455,  461,  457,  475,  587,  466,  461,
      466,  466,  466,  466,  468,  475,  468,  468,  468,  468,
      492,  458,  465,  492,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  467,  527,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  469,  584,

      469,  469,  469,  469,  469,  471,  527,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  472,  472,
      472,  472,  473,  476,  473,  473,  473,  473,  477,  478,
      483,  495,  483,  483,  483,  483,  483,  477,  581,  579,
      536,  476,  486,  486,  486,  486,  495,  478,  485,  536,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  487,  578,  487,  487,  487,  487,  488,  568,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      489,  567,  489,  489,  489,  489,  490,  565,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  491,

      496,  491,  491,  491,  491,  502,  511,  502,  502,  502,
      502,  511,  564,  563,  562,  496,  501,  560,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  503,
      559,  503,  503,  503,  503,  543,  503,  503,  503,  503,
      503,  503,  504,  558,  504,  504,  504,  504,  505,  543,
      505,  505,  505,  505,  505,  507,  557,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  509,  555,
      509,  509,  509,  509,  518,  547,  518,  518,  518,  518,
      518,  520,  547,  520,  520,  520,  520,  554,  520,  520,
      520,  520,  520,  520,  521,  553,  521,  521,  521,  521,

      522,  552,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  523,  551,  523,  523,  523,  523,  531,
      549,  531,  531,  531,  531,  548,  531,  531,  531,  531,
      531,  531,  532,  545,  532,  532,  532,  532,  533,  544,
      533,  533,  533,  533,  533,  540,  538,  540,  540,  540,
      540,  570,  570,  570,  570,  570,  571,  571,  571,  571,
      571,  572,  572,  572,  572,  572,  573,  537,  573,  573,
      573,  574,  574,  574,  574,  574,  575,  575,  575,  576,
      534,  576,  576,  576,  577,  577,  580,  580,  582,  582,
      583,  583,  585,  585,  586,  586,  588,  588,  589,  589,

      591,  591,  592,  592,  594,  594,  595,  595,  597,  597,
      598,  598,  600,  600,  601,  601,  603,  603,  604,  604,
      606,  606,  607,  607,  609,  609,  610,  610,  612,  612,
      613,  613,  615,  615,  616,  616,  619,  619,  620,  620,
      622,  622,  623,  623,  626,  626,  627,  627,  629,  629,
      632,  632,  633,  633,  634,  634,  636,  636,  637,  637,
      638,  638,  640,  640,  641,  641,  642,  642,  644,  644,
      645,  645,  646,  646,  648,  648,  530,  529,  528,  526,
      525,  519,  516,  514,  510,  506,  500,  499,  498,  497,
      494,  484,  481,  480,  479,  470,  464,  463,  462,  459,

      447,  445,  444,  440,  432,  426,  425,  424,  423,  413,
      404,  402,  401,  397,  396,  390,  389,  388,  387,  386,
      385,  379,  372,  371,  370,  367,  365,  357,  354,  353,
      352,  351,  339,  336,  335,  334,  318,  317,  316,  315,
      313,  311,  304,  295,  294,  293,  289,  275,  274,  267,
      264,  254,  251,  250,  236,  231,  230,  222,  215,  207,
      206,  205,  189,  180,  174,  164,  163,  162,  144,  140,
      139,  134,  125,  124,   96,   90,   80,   79,   78,   72,
       57,   56,   54,   49,   45,   44,   41,   36,   23,   22,
       18,   17,   14,   12,    7,    4,    3,  569,  569,  569,

      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[66] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 
    0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "ClntLexer.l"
#line 5 "ClntLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 31 "ClntLexer.l"
  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_ClntParser_stype yylval;
}
#line 1085 "ClntLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 44 "ClntLexer.l"


#line 1190 "ClntLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 570 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1898 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 46 "ClntLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 47 "ClntLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "ClntLexer.l"
{ return ClntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "ClntLexer.l"
{ return ClntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "ClntLexer.l"
{ return ClntParser::ADDRES_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "ClntLexer.l"
{ return ClntParser::IA_;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "ClntLexer.l"
{ return ClntParser::TA_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "ClntLexer.l"
{ return ClntParser::IAID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "ClntLexer.l"
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 55 "ClntLexer.l"
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 56 "ClntLexer.l"
{ return ClntParser::LOGLEVEL_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 57 "ClntLexer.l"
{ return ClntParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 58 "ClntLexer.l"
{ return ClntParser::LOGNAME_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 59 "ClntLexer.l"
{ return ClntParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 60 "ClntLexer.l"
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 61 "ClntLexer.l"
{ return ClntParser::VALID_TIME_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 62 "ClntLexer.l"
{ return ClntParser::T1_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 63 "ClntLexer.l"
{ return ClntParser::T2_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 64 "ClntLexer.l"
{ return ClntParser::OPTION_; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 65 "ClntLexer.l"
{ return ClntParser::DNS_SERVER_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 66 "ClntLexer.l"
{ return ClntParser::DOMAIN_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 67 "ClntLexer.l"
{ return ClntParser::NTP_SERVER_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 68 "ClntLexer.l"
{ return ClntParser::TIME_ZONE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 69 "ClntLexer.l"
{ return ClntParser::SIP_SERVER_; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 70 "ClntLexer.l"
{ return ClntParser::SIP_DOMAIN_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 71 "ClntLexer.l"
{ return ClntParser::FQDN_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 72 "ClntLexer.l"
{ return ClntParser::NIS_SERVER_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 73 "ClntLexer.l"
{ return ClntParser::NIS_DOMAIN_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 74 "ClntLexer.l"
{ return ClntParser::NISP_SERVER_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 75 "ClntLexer.l"
{ return ClntParser::NISP_DOMAIN_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 76 "ClntLexer.l"
{ return ClntParser::LIFETIME_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 77 "ClntLexer.l"
{ return ClntParser::REJECT_SERVERS_;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 78 "ClntLexer.l"
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 79 "ClntLexer.l"
{ return ClntParser::RAPID_COMMIT_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 80 "ClntLexer.l"
{ return ClntParser::UNICAST_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 81 "ClntLexer.l"
{ return ClntParser::STRICT_RFC_NO_ROUTING_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 82 "ClntLexer.l"
{ return ClntParser::PD_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 83 "ClntLexer.l"
{ return ClntParser::PD_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 84 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 85 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_LL_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 86 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_LLT_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 87 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_EN_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 88 "ClntLexer.l"
{ return ClntParser::VENDOR_SPEC_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 89 "ClntLexer.l"
{ return ClntParser::AUTH_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 90 "ClntLexer.l"
{ return ClntParser::DIGEST_NONE_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 91 "ClntLexer.l"
{ return ClntParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 92 "ClntLexer.l"
;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 94 "ClntLexer.l"
;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 96 "ClntLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 102 "ClntLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 103 "ClntLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 104 "ClntLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 52:
YY_RULE_SETUP
#line 111 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 120 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 129 "ClntLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 139 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 148 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 157 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 166 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 175 "ClntLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 182 "ClntLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return ClntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return ClntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 203 "ClntLexer.l"
{
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return ClntParser::DUID_;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 234 "ClntLexer.l"
{ 
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::HEXNUMBER_;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 243 "ClntLexer.l"
{ 
    if(!sscanf(yytext,"%u",(unsigned int*)&(yylval.ival))) { 
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::INTNUMBER_;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 253 "ClntLexer.l"
{return yytext[0];} 
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 257 "ClntLexer.l"
ECHO;
	YY_BREAK
#line 1739 "ClntLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 570 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 570 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 569);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

yyFlexLexer::~yyFlexLexer()
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

	delete [] (yy_state_buf);
	yyfree((yy_start_stack)  );

}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 257 "ClntLexer.l"



