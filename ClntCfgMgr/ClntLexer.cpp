#line 2 "ClntLexer.cpp"

#line 4 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 61
#define YY_END_OF_BUFFER 62
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[547] =
    {   0,
        1,    1,    0,    0,    0,    0,   62,   60,    2,    1,
        1,   60,   43,   60,   60,   59,   59,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   47,   47,   61,    1,    1,    1,
        0,   55,   43,    0,   55,   45,   44,   59,    0,    0,
       58,    0,   52,   56,   56,   56,   56,   56,   56,   56,
       56,    6,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   17,   18,    7,   56,   56,   56,
       56,   56,   46,   44,   59,    0,    0,   51,   57,   50,
       50,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   59,    0,    0,    0,
       49,   49,    0,   50,    0,   50,   56,   56,   56,   56,
       56,   26,    8,   56,   56,   56,    0,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   59,    0,    0,    0,    0,   49,    0,
       49,    0,   50,   50,   50,   50,   56,   56,   56,   56,
       56,    3,   56,   56,   56,   56,    0,   56,   56,   56,
        9,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,    0,    0,    0,    0,

       49,   49,   49,   49,    0,   50,   50,   50,    0,   50,
       56,   56,   21,   56,   56,   56,   56,   56,   56,   56,
        0,    0,   56,   56,   56,   56,   19,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
        0,    0,    0,   49,   49,   49,    0,   49,    0,    0,
       50,   50,   50,   50,    5,   56,   41,   39,   56,   56,
       56,   56,   56,    0,    0,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   35,   56,
       56,   56,    0,    0,    0,    0,    0,   49,   49,   49,
       49,    0,   50,   50,   50,    0,   50,   56,   40,   56,

       31,   56,   12,   13,    0,    0,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   14,    0,    0,    0,   49,   49,   49,    0,   49,
       54,   50,   50,   50,   50,   56,   38,   11,    0,    0,
       56,   56,    4,   56,   56,   56,   56,   56,   56,   56,
       10,   56,   23,   56,   56,    0,    0,    0,   53,   49,
       49,   49,   49,   50,   50,   50,    0,   50,   20,    0,
        0,   28,   27,   22,   56,   56,   56,   56,   56,   25,
       24,   56,   56,   56,    0,    0,   49,   49,   49,    0,
       49,   50,   50,   50,   50,   30,   29,   56,   56,   56,

       56,   56,   56,   56,   42,    0,    0,    0,   49,   49,
       49,   49,   50,   50,   50,    0,   50,   56,   56,   56,
       34,   56,   56,   56,    0,    0,   49,   49,   49,    0,
       49,   50,   50,   50,   50,   56,   56,   56,   32,   56,
       56,    0,    0,    0,   49,   49,   49,   49,   50,   50,
       50,    0,   50,   56,   56,   56,   56,   16,    0,   48,
       51,   49,   49,   49,    0,   49,   50,   50,   50,   50,
       56,   33,   56,   56,    0,   48,    0,   49,   49,   49,
       49,   49,   50,   50,   50,    0,   50,   56,   56,   56,
       48,   51,   49,    0,   49,   49,   49,   49,   50,   50,

       50,   15,   37,   56,   48,   49,   49,   49,   49,   50,
       50,   50,   56,   49,   49,    0,   49,   49,   50,   56,
       49,   49,   50,   56,   49,   49,    0,   36,   49,   49,
       49,   49,    0,   49,   49,   49,   49,    0,   49,   49,
       49,   49,    0,   49,   49,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   16,   16,   16,   16,   16,   16,   17,    1,    1,
        1,    1,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
        1,    1,    1,    1,    1,    1,   18,   19,   20,   21,

       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[44] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        3,    1,    4,    4,    4,    4,    5,    4,    4,    4,
        4,    4,    4,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[626] =
    {   0,
        0,    0, 1843, 1842,    0,    0, 1849, 1852, 1852,   41,
       43, 1843,    0, 1840,   40,   40, 1805, 1828,   69,   82,
       35, 1810, 1826,   51,   89,   91,   47,   58,   54,   92,
       96,   95,  102,   99, 1852, 1830, 1852,   46,   74,  129,
     1836, 1852,    0, 1833, 1832, 1852,    0,  121, 1821,  134,
     1852,    0,  138, 1820,  142, 1815, 1818,   34,  142,  149,
      150,  151,  152,  156,  157,  159,  168,  163,  108,  165,
      166,  167,  169,  171, 1817, 1816, 1815,  173,  174,  175,
      176,  180, 1852,    0,  203,  195, 1814,  216,    0,  222,
      235,  239, 1795,  188,  195,  246,  239,  247,  110,  249,

      217,  263,  257,  259,  258,  262,  261,  264,  272,  271,
      273,  274,  275,  276,  277,  283,  299,  290, 1812, 1811,
      314,  327,  331,  337,  348,  354,  358,  365,  290,  284,
      373, 1810, 1809,  367,  349,  368, 1815,  371,  374,  376,
      378,  379,  383,  387,  393,  395,  398,  401,  407,  384,
      402,  405,  415,  413, 1807, 1806, 1805,  420,  427,  438,
      444,  450,  456,  469,  475,  488, 1804,  445,  483,  292,
      489, 1803,  490,  491,  492,  497,  489,  495,  500,  502,
     1802,  506,  503,  230,  504,  519,  513,  514,  515,  439,
      518,  332,  521,  530,  524,  522, 1801, 1800, 1799,  538,

      549,  562,  568,  581,  585,  591, 1798,  598,  609,  615,
      525,  539, 1797,  527,  610,  593,  184,  615,  616,  563,
     1781, 1790,  617,  621,  619,  623, 1794,  624,  633,  628,
      634,  632,  635,  638,  647,  636,  642,  644,  655,  649,
     1793, 1792,  667,  673, 1791,  680,  691,  697,  703,  709,
      715,  728,  734,  747, 1790,  646, 1789,  729,  659,  652,
      742,  748,  750, 1775, 1769,  660,  751,  752,  754,  650,
      756,  757,  704,  758,  762,  763,  692,  764, 1786,  765,
      766,  768, 1785, 1784, 1783,  793,  799,  805,  818,  824,
      837,  841,  847, 1782,  854,  865,  871,  770, 1781,  783,

     1780,  767, 1779, 1778, 1776, 1754,  771,  866,  842,  872,
      880,  874,  781,  876,  875,  878,  800,  882,  885,  886,
      887, 1775, 1774, 1773,  897,  908, 1772,  915,  901,  928,
      932,  938,  951,  957,  970,  952, 1771, 1770, 1760, 1763,
      965,  971, 1767,  972,  973,  889,  910,  975,  974,  976,
     1766,  977, 1765,  978,  981, 1764, 1763, 1762,  999, 1005,
     1018, 1024, 1037, 1043, 1761, 1050, 1061, 1067, 1760, 1745,
     1740, 1757, 1756, 1755,  982, 1062, 1068, 1069, 1070, 1754,
     1753, 1045, 1071,  984, 1752, 1751, 1083, 1750, 1099, 1088,
     1112, 1118, 1131, 1137, 1150, 1852, 1852, 1013, 1072, 1145,

     1074, 1150, 1075, 1151, 1749, 1748, 1747, 1746, 1167, 1160,
     1180, 1193, 1199, 1745, 1206, 1217, 1223, 1218, 1153, 1224,
     1744, 1226, 1227,  933, 1743, 1742, 1234, 1741, 1251, 1239,
     1264, 1270, 1283, 1289, 1302, 1239, 1241, 1284, 1740, 1201,
     1297, 1739, 1738, 1737, 1311, 1324, 1330, 1343, 1349, 1736,
     1356, 1367, 1373, 1368, 1373, 1374, 1375, 1735, 1734, 1733,
        0, 1382, 1732, 1400, 1388, 1413, 1419, 1432, 1438, 1451,
     1113, 1731, 1446, 1451, 1730, 1729, 1728, 1727, 1473, 1458,
     1486, 1466, 1499, 1726, 1506,    0, 1519, 1390, 1229, 1501,
     1725, 1852, 1724,    0, 1527, 1723, 1534, 1547, 1553, 1566,

        0, 1627, 1614, 1388, 1593, 1586, 1580, 1572, 1585, 1591,
     1572,    0, 1459, 1567, 1561,    0, 1598, 1852,    0, 1520,
     1548, 1542, 1852, 1344, 1529, 1519,    0, 1514, 1494, 1486,
     1481, 1458,    0, 1453, 1433, 1427, 1414,    0, 1392, 1389,
     1338, 1325,    0, 1319, 1306, 1852, 1614, 1619, 1624, 1629,
     1634, 1637, 1642, 1644, 1316, 1291, 1646, 1278, 1648, 1650,
     1253, 1652, 1654, 1201, 1656, 1658, 1175, 1660, 1662, 1145,
     1664, 1666, 1120, 1668, 1670, 1101, 1672, 1674, 1089, 1676,
     1678, 1045, 1680, 1682, 1013, 1684, 1686,  904, 1688, 1690,
      845, 1692, 1694,  826,  790, 1696, 1698,  782, 1700, 1702,

      711,  599, 1704, 1706,  544, 1708,  483,  435, 1710, 1712,
     1714,  399, 1716, 1718, 1720,  335, 1722, 1724, 1726,  293,
     1728, 1730, 1732,   75, 1734
    } ;

static yyconst flex_int16_t yy_def[626] =
    {   0,
      546,    1,  547,  547,  548,  548,  546,  546,  546,  546,
      546,  549,  550,  551,  546,  546,   16,  546,  552,  552,
       20,   20,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  546,  546,  546,  546,  546,  546,
      549,  546,  550,  551,  546,  546,  553,  546,  554,   48,
      546,  555,  556,  552,   20,   55,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  546,  553,  546,   85,  557,  558,  555,  546,
       90,   55,   92,  552,  552,  552,  552,  552,  552,  552,

      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  546,  117,  559,  560,
      546,  121,  546,  546,  561,  124,   92,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  546,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  118,  118,  562,  563,  546,  546,  564,
      159,  546,  546,  163,  546,  165,  127,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  546,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  546,  565,  566,  546,

      546,  201,  546,  203,  546,  546,  546,  546,  567,  208,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      546,  546,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      568,  569,  546,  546,  546,  546,  570,  246,  546,  546,
      546,  251,  546,  253,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  546,  546,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  546,  571,  572,  546,  546,  546,  288,  546,
      290,  546,  546,  546,  546,  573,  295,  552,  552,  552,

      552,  552,  552,  552,  546,  546,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  574,  575,  546,  546,  546,  546,  576,  328,
      546,  546,  332,  546,  334,  552,  552,  552,  546,  546,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  546,  577,  578,  546,  546,
      360,  546,  362,  546,  546,  546,  579,  366,  552,  546,
      546,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  580,  581,  546,  546,  546,  582,
      389,  546,  392,  546,  394,  546,  546,  552,  552,  552,

      552,  552,  552,  552,  552,  546,  583,  584,  546,  409,
      546,  411,  546,  546,  546,  585,  415,  552,  552,  552,
      552,  552,  552,  552,  586,  587,  546,  546,  546,  588,
      429,  546,  432,  546,  434,  552,  552,  552,  552,  552,
      552,  546,  589,  590,  546,  445,  546,  447,  546,  546,
      546,  591,  451,  552,  552,  552,  552,  552,  592,  593,
      594,  546,  546,  546,  595,  464,  546,  467,  546,  469,
      552,  552,  552,  552,  546,  596,  546,  597,  546,  479,
      546,  481,  546,  546,  546,  598,  485,  552,  552,  552,
      599,  546,  600,  601,  546,  546,  546,  497,  546,  499,

      602,  552,  552,  552,  546,  603,  604,  546,  508,  546,
      546,  605,  552,  546,  606,  607,  546,  546,  608,  552,
      609,  610,  546,  552,  546,  611,  612,  552,  613,  614,
      546,  615,  616,  617,  618,  546,  619,  620,  621,  622,
      546,  623,  624,  625,  546,    0,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,

      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546
    } ;

static yyconst flex_int16_t yy_nxt[1896] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   18,   19,   20,   20,
       21,   20,   22,   23,   23,   24,   23,   23,   25,   23,
       26,   27,   28,   23,   29,   30,   31,   32,   33,   34,
       23,   23,   23,   38,   39,   40,   39,   46,   38,   39,
      546,   47,   48,   48,   48,   48,   49,   50,   50,   50,
       50,   50,   50,  546,   51,   58,   59,  546,   62,   94,
      546,   71,   60,   63,  546,   72,   40,   39,  482,   69,
       52,   55,   55,   55,   55,   49,   55,   55,   55,   56,
       55,   55,   70,   57,   55,   55,   55,   55,   49,   55,

       55,   55,   55,   55,   55,  546,   57,  546,  546,   75,
       76,  546,  546,   77,   64,  546,   66,   73,  546,   80,
       65,   78,   67,   81,  546,   79,  546,   68,   74,  134,
       82,   38,   39,   85,   85,   85,   85,   49,   86,   86,
       86,   86,   86,   86,  105,   51,   86,   86,   86,   86,
       90,   90,   90,   90,   92,   92,   92,   92,  546,   92,
       92,   92,   92,   92,   92,  546,  546,  546,  546,   99,
       97,   95,  546,  546,   96,  546,   98,  103,  100,  546,
      101,  546,  546,  546,  546,  546,  106,  546,  110,  546,
      546,  546,  546,  108,  102,  104,  546,  129,  107,  113,

      546,  109,  112,  114,  546,  111,  115,  118,  118,  118,
      118,  546,  130,  260,  116,  117,  117,  117,  117,   49,
      118,  118,  118,  118,  118,  118,  136,   51,  121,  121,
      121,  121,  123,  546,  124,  124,  124,  124,  125,  126,
      126,  126,  126,  126,  126,  546,  546,  126,  126,  126,
      126,  127,  127,  127,  127,  546,  127,  127,  127,  127,
      127,  127,  546,  546,  228,  546,  131,  133,  141,  132,
      135,  137,  138,  546,  546,  546,  139,  546,  546,  546,
      546,  146,  140,  142,  143,  145,  144,  546,  546,  546,
      546,  546,  546,  546,  150,  149,  540,  152,  148,  546,

      546,  151,  155,  155,  155,  155,  546,  147,  546,  170,
      153,  154,  154,  154,  154,   49,  155,  155,  155,  155,
      155,  155,  213,   51,  158,  169,  159,  159,  159,  159,
      160,  161,  161,  161,  161,  161,  161,  546,  535,  161,
      161,  161,  161,  162,  162,  162,  162,  123,  546,  163,
      163,  163,  163,  125,  164,  164,  164,  164,  164,  164,
      165,  165,  165,  165,  546,  546,  164,  164,  164,  164,
      167,  167,  167,  167,  236,  167,  167,  167,  167,  167,
      167,  546,  171,  546,  546,  173,  168,  546,  172,  546,
      546,  178,  546,  181,  546,  546,  174,  175,  176,  546,

      546,  193,  530,  546,  184,  180,  179,  186,  185,  546,
      183,  546,  187,  182,  546,  188,  192,  546,  546,  190,
      191,  546,  194,  546,  196,  154,  154,  154,  154,  546,
      189,  546,  200,  200,  200,  200,  195,  158,  523,  201,
      201,  201,  201,  160,  202,  202,  202,  202,  202,  202,
      203,  203,  203,  203,  546,  546,  202,  202,  202,  202,
      205,  546,  162,  162,  162,  162,  123,  234,  206,  206,
      206,  206,  125,  207,  207,  207,  207,  207,  207,  546,
      211,  207,  207,  207,  207,  123,  522,  208,  208,  208,
      208,  209,  210,  210,  210,  210,  210,  210,  546,  546,

      210,  210,  210,  210,  212,  546,  546,  546,  546,  221,
      214,  546,  218,  546,  220,  217,  546,  215,  546,  546,
      546,  224,  546,  219,  222,  216,  223,  226,  230,  546,
      546,  546,  225,  227,  546,  546,  233,  546,  546,  238,
      546,  546,  240,  546,  229,  232,  546,  519,  243,  231,
      200,  200,  200,  200,  235,  546,  237,  257,  239,  158,
      255,  244,  244,  244,  244,  160,  245,  245,  245,  245,
      245,  245,  546,  256,  245,  245,  245,  245,  158,  546,
      246,  246,  246,  246,  247,  248,  248,  248,  248,  248,
      248,  546,  263,  248,  248,  248,  248,  249,  249,  249,

      249,  123,  512,  250,  250,  250,  250,  125,  123,  546,
      251,  251,  251,  251,  209,  252,  252,  252,  252,  252,
      252,  253,  253,  253,  253,  546,  546,  252,  252,  252,
      252,  546,  546,  546,  259,  546,  262,  546,  258,  546,
      546,  268,  271,  273,  546,  270,  266,  272,  546,  546,
      546,  546,  546,  261,  546,  267,  277,  269,  546,  276,
      546,  274,  546,  546,  281,  546,  546,  278,  546,  275,
      311,  546,  280,  301,  282,  546,  546,  307,  279,  286,
      286,  286,  286,  158,  298,  287,  287,  287,  287,  160,
      158,  300,  288,  288,  288,  288,  247,  289,  289,  289,

      289,  289,  289,  290,  290,  290,  290,  546,  546,  289,
      289,  289,  289,  292,  507,  249,  249,  249,  249,  123,
      546,  250,  250,  250,  250,  123,  318,  293,  293,  293,
      293,  209,  294,  294,  294,  294,  294,  294,  546,  314,
      294,  294,  294,  294,  123,  546,  295,  295,  295,  295,
      296,  297,  297,  297,  297,  297,  297,  546,  546,  297,
      297,  297,  297,  302,  546,  299,  546,  546,  546,  303,
      546,  304,  546,  546,  546,  315,  312,  309,  546,  546,
      546,  546,  546,  546,  546,  501,  546,  546,  313,  308,
      320,  336,  310,  482,  319,  338,  341,  546,  317,  546,

      316,  321,  322,  325,  337,  286,  286,  286,  286,  158,
      347,  287,  287,  287,  287,  158,  546,  326,  326,  326,
      326,  247,  327,  327,  327,  327,  327,  327,  546,  478,
      327,  327,  327,  327,  158,  351,  328,  328,  328,  328,
      329,  330,  330,  330,  330,  330,  330,  546,  470,  330,
      330,  330,  330,  331,  331,  331,  331,  123,  546,  250,
      250,  250,  250,  209,  123,  343,  332,  332,  332,  332,
      296,  333,  333,  333,  333,  333,  333,  334,  334,  334,
      334,  546,  546,  333,  333,  333,  333,  342,  546,  345,
      546,  546,  546,  344,  546,  346,  546,  348,  546,  350,

      349,  546,  546,  546,  352,  546,  353,  448,  354,  359,
      359,  359,  359,  362,  362,  362,  362,  377,  158,  355,
      287,  287,  287,  287,  247,  158,  546,  360,  360,  360,
      360,  329,  361,  361,  361,  361,  361,  361,  546,  378,
      361,  361,  361,  361,  331,  331,  331,  331,  123,  546,
      364,  364,  364,  364,  296,  365,  365,  365,  365,  365,
      365,  546,  441,  365,  365,  365,  365,  123,  546,  366,
      366,  366,  366,  367,  368,  368,  368,  368,  368,  368,
      546,  546,  368,  368,  368,  368,  369,  546,  546,  546,
      546,  546,  546,  546,  546,  372,  382,  546,  546,  383,

      546,  375,  384,  405,  380,  373,  374,  398,  376,  379,
      381,  359,  359,  359,  359,  158,  435,  387,  387,  387,
      387,  329,  388,  388,  388,  388,  388,  388,  546,  546,
      388,  388,  388,  388,  158,  418,  389,  389,  389,  389,
      390,  391,  391,  391,  391,  391,  391,  546,  412,  391,
      391,  391,  391,  123,  403,  250,  250,  250,  250,  296,
      123,  546,  392,  392,  392,  392,  367,  393,  393,  393,
      393,  393,  393,  394,  394,  394,  394,  546,  546,  393,
      393,  393,  393,  399,  546,  546,  546,  546,  546,  400,
      546,  546,  395,  158,  401,  287,  287,  287,  287,  329,

      411,  411,  411,  411,  363,  423,  419,  404,  402,  158,
      421,  409,  409,  409,  409,  390,  410,  410,  410,  410,
      410,  410,  546,  335,  410,  410,  410,  410,  123,  546,
      413,  413,  413,  413,  367,  414,  414,  414,  414,  414,
      414,  546,  488,  414,  414,  414,  414,  123,  291,  415,
      415,  415,  415,  416,  417,  417,  417,  417,  417,  417,
      546,  546,  417,  417,  417,  417,  546,  546,  420,  546,
      546,  422,  428,  428,  428,  428,  424,  158,  254,  427,
      427,  427,  427,  390,  428,  428,  428,  428,  428,  428,
      158,  437,  429,  429,  429,  429,  430,  431,  431,  431,

      431,  431,  431,  546,  204,  431,  431,  431,  431,  123,
      457,  250,  250,  250,  250,  367,  123,  546,  432,  432,
      432,  432,  416,  433,  433,  433,  433,  433,  433,  434,
      434,  434,  434,  546,  546,  433,  433,  433,  433,  436,
      546,  438,  546,  546,  158,  546,  287,  287,  287,  287,
      390,  447,  447,  447,  447,  546,  166,  546,  440,  503,
      439,  158,  455,  445,  445,  445,  445,  430,  446,  446,
      446,  446,  446,  446,  546,  454,  446,  446,  446,  446,
      123,  122,  449,  449,  449,  449,  416,  450,  450,  450,
      450,  450,  450,  546,   91,  450,  450,  450,  450,  123,

      546,  451,  451,  451,  451,  452,  453,  453,  453,  453,
      453,  453,  546,  546,  453,  453,  453,  453,  458,   89,
      456,  158,  543,  462,  462,  462,  462,  430,  463,  463,
      463,  463,  463,  463,  546,  543,  463,  463,  463,  463,
      158,  543,  464,  464,  464,  464,  465,  466,  466,  466,
      466,  466,  466,  546,  538,  466,  466,  466,  466,  123,
      546,  250,  250,  250,  250,  416,  123,  528,  467,  467,
      467,  467,  452,  468,  468,  468,  468,  468,  468,  469,
      469,  469,  469,  546,  546,  468,  468,  468,  468,  546,
      546,  546,  158,  471,  287,  287,  287,  287,  430,  473,

      481,  481,  481,  481,  546,  543,  546,  472,  538,  474,
      158,  502,  479,  479,  479,  479,  465,  480,  480,  480,
      480,  480,  480,  546,  513,  480,  480,  480,  480,  123,
      538,  483,  483,  483,  483,  452,  484,  484,  484,  484,
      484,  484,  546,  533,  484,  484,  484,  484,  123,  538,
      485,  485,  485,  485,  486,  487,  487,  487,  487,  487,
      487,  546,  546,  487,  487,  487,  487,  546,  546,  533,
      496,  496,  496,  496,  533,  546,  546,  489,  498,  498,
      498,  498,  490,  158,  520,  495,  495,  495,  495,  465,
      496,  496,  496,  496,  496,  496,  158,  527,  497,  497,

      497,  497,  533,  498,  498,  498,  498,  498,  498,  123,
      527,  250,  250,  250,  250,  452,  123,  546,  499,  499,
      499,  499,  486,  500,  500,  500,  500,  500,  500,  546,
      546,  500,  500,  500,  500,  527,  546,  158,  504,  287,
      287,  287,  287,  465,  158,  516,  508,  508,  508,  508,
      524,  509,  509,  509,  509,  509,  509,  546,  527,  509,
      509,  509,  509,  123,  516,  510,  510,  510,  510,  486,
      511,  511,  511,  511,  511,  511,  546,  516,  511,  511,
      511,  511,  158,  494,  517,  517,  517,  517,  486,  518,
      518,  518,  518,  518,  518,  546,  516,  518,  518,  518,

      518,  123,  494,  250,  250,  250,  250,  486,  158,  477,
      287,  287,  287,  287,   35,   35,   35,   35,   35,   37,
       37,   37,   37,   37,   41,   41,   41,   41,   41,   43,
      546,   43,   43,   43,   44,   44,   44,   44,   44,   54,
       54,   54,   84,  546,   84,   84,   84,   87,   87,  119,
      119,  156,  156,  157,  157,  197,  197,  198,  198,  241,
      241,  242,  242,  283,  283,  284,  284,  323,  323,  324,
      324,  356,  356,  357,  357,  385,  385,  386,  386,  406,
      406,  407,  407,  425,  425,  426,  426,  442,  442,  443,
      443,  459,  459,  460,  460,  475,  475,  476,  476,  491,

      491,  493,  493,  505,  505,  506,  506,  514,  514,  515,
      515,  521,  521,  525,  525,  526,  526,  529,  529,  531,
      531,  532,  532,  534,  534,  536,  536,  537,  537,  539,
      539,  541,  541,  542,  542,  544,  544,  545,  545,  465,
      494,  477,  452,  494,  492,  477,  444,  546,  430,  477,
      444,  546,  416,  461,  444,  408,  546,  390,  444,  408,
      546,  367,   88,  408,  358,  546,  329,  408,  358,  546,
      546,  546,  546,  546,  397,  396,  546,  296,   88,  358,
      285,  546,  546,  546,  371,  370,  546,  546,  247,  358,
      285,  546,  340,  339,  546,  546,  546,  546,  209,   88,

      285,  199,  546,  306,  305,  546,  546,  160,  285,  199,
      546,  265,  264,  546,  125,   88,  199,  120,  546,  546,
      546,  199,  120,  546,  177,  546,  546,   88,  120,  128,
      120,  546,  546,  546,  546,   93,  546,   88,   44,   45,
       42,   83,  546,   61,   53,  546,   45,   42,  546,   36,
       36,    7,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546

    } ;

static yyconst flex_int16_t yy_chk[1896] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   10,   10,   11,   11,   15,   38,   38,
       58,   15,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   27,   16,   21,   21,   24,   24,   58,
       29,   29,   21,   24,   28,   29,   39,   39,  624,   27,
       16,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   28,   19,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   25,   20,   26,   30,   31,
       31,   32,   31,   31,   25,   34,   26,   30,   33,   33,
       25,   31,   26,   33,   69,   32,   99,   26,   30,   99,
       34,   40,   40,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   69,   48,   50,   50,   50,   50,
       53,   53,   53,   53,   55,   55,   55,   55,   59,   55,
       55,   55,   55,   55,   55,   60,   61,   62,   63,   63,
       61,   59,   64,   65,   60,   66,   62,   67,   64,   68,
       65,   70,   71,   72,   67,   73,   70,   74,   74,   78,
       79,   80,   81,   72,   66,   68,   82,   94,   71,   79,

      217,   73,   78,   80,   94,   74,   81,   86,   86,   86,
       86,   95,   95,  217,   82,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,  101,   85,   88,   88,
       88,   88,   90,  101,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   91,  184,   91,   91,   91,
       91,   92,   92,   92,   92,   97,   92,   92,   92,   92,
       92,   92,   96,   98,  184,  100,   96,   98,  104,   97,
      100,  102,  102,  103,  105,  104,  103,  107,  106,  102,
      108,  109,  103,  105,  106,  108,  107,  110,  109,  111,
      112,  113,  114,  115,  113,  112,  620,  115,  111,  116,

      130,  114,  118,  118,  118,  118,  129,  110,  170,  130,
      116,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  170,  117,  121,  129,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  122,  616,  122,
      122,  122,  122,  123,  123,  123,  123,  124,  192,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      125,  125,  125,  125,  126,  135,  126,  126,  126,  126,
      127,  127,  127,  127,  192,  127,  127,  127,  127,  127,
      127,  128,  131,  134,  136,  135,  128,  138,  134,  131,
      139,  138,  140,  140,  141,  142,  136,  136,  136,  143,

      150,  150,  612,  144,  143,  139,  138,  144,  143,  145,
      142,  146,  145,  141,  147,  146,  149,  148,  151,  147,
      148,  152,  151,  149,  153,  154,  154,  154,  154,  154,
      146,  153,  158,  158,  158,  158,  152,  159,  608,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      160,  160,  160,  160,  161,  190,  161,  161,  161,  161,
      162,  168,  162,  162,  162,  162,  163,  190,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  164,
      168,  164,  164,  164,  164,  165,  607,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  166,  169,

      166,  166,  166,  166,  169,  171,  173,  174,  175,  177,
      171,  178,  174,  176,  176,  173,  179,  171,  180,  183,
      185,  179,  182,  175,  177,  171,  178,  182,  186,  187,
      188,  189,  180,  183,  191,  186,  189,  193,  196,  194,
      195,  211,  196,  214,  185,  188,  194,  605,  200,  187,
      200,  200,  200,  200,  191,  212,  193,  214,  195,  201,
      211,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  202,  212,  202,  202,  202,  202,  203,  220,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  204,  220,  204,  204,  204,  204,  205,  205,  205,

      205,  206,  602,  206,  206,  206,  206,  206,  208,  216,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  209,  209,  209,  209,  210,  215,  210,  210,  210,
      210,  218,  219,  223,  216,  225,  219,  224,  215,  226,
      228,  225,  229,  231,  230,  228,  223,  230,  232,  229,
      231,  233,  236,  218,  234,  224,  235,  226,  237,  234,
      238,  232,  256,  235,  239,  240,  270,  236,  260,  233,
      270,  239,  238,  260,  240,  259,  266,  266,  237,  243,
      243,  243,  243,  244,  256,  244,  244,  244,  244,  244,
      246,  259,  246,  246,  246,  246,  246,  246,  246,  246,

      246,  246,  246,  247,  247,  247,  247,  248,  277,  248,
      248,  248,  248,  249,  601,  249,  249,  249,  249,  250,
      273,  250,  250,  250,  250,  251,  277,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  252,  273,
      252,  252,  252,  252,  253,  258,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  254,  261,  254,
      254,  254,  254,  261,  262,  258,  263,  267,  268,  262,
      269,  263,  271,  272,  274,  274,  271,  268,  275,  276,
      278,  280,  281,  302,  282,  598,  298,  307,  272,  267,
      280,  298,  269,  595,  278,  302,  307,  313,  276,  300,

      275,  281,  282,  286,  300,  286,  286,  286,  286,  287,
      313,  287,  287,  287,  287,  288,  317,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  289,  594,
      289,  289,  289,  289,  290,  317,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  291,  591,  291,
      291,  291,  291,  292,  292,  292,  292,  293,  309,  293,
      293,  293,  293,  293,  295,  309,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  296,  296,  296,
      296,  297,  308,  297,  297,  297,  297,  308,  310,  311,
      312,  315,  314,  310,  316,  312,  311,  314,  318,  316,

      315,  319,  320,  321,  318,  346,  319,  588,  320,  325,
      325,  325,  325,  329,  329,  329,  329,  346,  326,  321,
      326,  326,  326,  326,  326,  328,  347,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  330,  347,
      330,  330,  330,  330,  331,  331,  331,  331,  332,  424,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  333,  424,  333,  333,  333,  333,  334,  336,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      335,  341,  335,  335,  335,  335,  336,  342,  344,  345,
      349,  348,  350,  352,  354,  341,  352,  355,  375,  354,

      384,  345,  355,  384,  349,  342,  344,  375,  345,  348,
      350,  359,  359,  359,  359,  360,  585,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  361,  398,
      361,  361,  361,  361,  362,  398,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  363,  582,  363,
      363,  363,  363,  364,  382,  364,  364,  364,  364,  364,
      366,  382,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  367,  367,  367,  367,  368,  376,  368,
      368,  368,  368,  376,  377,  378,  379,  383,  399,  377,
      401,  403,  579,  387,  378,  387,  387,  387,  387,  387,

      390,  390,  390,  390,  576,  403,  399,  383,  379,  389,
      401,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  391,  573,  391,  391,  391,  391,  392,  471,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  393,  471,  393,  393,  393,  393,  394,  570,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      395,  400,  395,  395,  395,  395,  402,  404,  400,  419,
      410,  402,  410,  410,  410,  410,  404,  409,  567,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      411,  419,  411,  411,  411,  411,  411,  411,  411,  411,

      411,  411,  411,  412,  564,  412,  412,  412,  412,  413,
      440,  413,  413,  413,  413,  413,  415,  440,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  416,
      416,  416,  416,  417,  418,  417,  417,  417,  417,  418,
      420,  420,  422,  423,  427,  489,  427,  427,  427,  427,
      427,  430,  430,  430,  430,  436,  561,  437,  423,  489,
      422,  429,  437,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  431,  436,  431,  431,  431,  431,
      432,  558,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  433,  556,  433,  433,  433,  433,  434,

      438,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  435,  441,  435,  435,  435,  435,  441,  555,
      438,  445,  545,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  446,  544,  446,  446,  446,  446,
      447,  542,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  448,  541,  448,  448,  448,  448,  449,
      524,  449,  449,  449,  449,  449,  451,  524,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  452,
      452,  452,  452,  453,  454,  453,  453,  453,  453,  455,
      456,  457,  462,  454,  462,  462,  462,  462,  462,  456,

      465,  465,  465,  465,  504,  540,  488,  455,  539,  457,
      464,  488,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  466,  504,  466,  466,  466,  466,  467,
      537,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  468,  536,  468,  468,  468,  468,  469,  535,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  470,  473,  470,  470,  470,  470,  474,  480,  534,
      480,  480,  480,  480,  532,  513,  482,  473,  482,  482,
      482,  482,  474,  479,  513,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  481,  531,  481,  481,

      481,  481,  530,  481,  481,  481,  481,  481,  481,  483,
      529,  483,  483,  483,  483,  483,  485,  490,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  487,
      528,  487,  487,  487,  487,  526,  520,  495,  490,  495,
      495,  495,  495,  495,  497,  525,  497,  497,  497,  497,
      520,  497,  497,  497,  497,  497,  497,  498,  522,  498,
      498,  498,  498,  499,  521,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  500,  515,  500,  500,
      500,  500,  508,  514,  508,  508,  508,  508,  511,  508,
      508,  508,  508,  508,  508,  509,  507,  509,  509,  509,

      509,  510,  506,  510,  510,  510,  510,  510,  517,  505,
      517,  517,  517,  517,  547,  547,  547,  547,  547,  548,
      548,  548,  548,  548,  549,  549,  549,  549,  549,  550,
      503,  550,  550,  550,  551,  551,  551,  551,  551,  552,
      552,  552,  553,  502,  553,  553,  553,  554,  554,  557,
      557,  559,  559,  560,  560,  562,  562,  563,  563,  565,
      565,  566,  566,  568,  568,  569,  569,  571,  571,  572,
      572,  574,  574,  575,  575,  577,  577,  578,  578,  580,
      580,  581,  581,  583,  583,  584,  584,  586,  586,  587,
      587,  589,  589,  590,  590,  592,  592,  593,  593,  596,

      596,  597,  597,  599,  599,  600,  600,  603,  603,  604,
      604,  606,  606,  609,  609,  610,  610,  611,  611,  613,
      613,  614,  614,  615,  615,  617,  617,  618,  618,  619,
      619,  621,  621,  622,  622,  623,  623,  625,  625,  496,
      493,  491,  484,  478,  477,  476,  475,  472,  463,  460,
      459,  458,  450,  444,  443,  442,  439,  428,  426,  425,
      421,  414,  408,  407,  406,  405,  388,  386,  385,  381,
      380,  374,  373,  372,  371,  370,  369,  365,  358,  357,
      356,  353,  351,  343,  340,  339,  338,  337,  327,  324,
      323,  322,  306,  305,  304,  303,  301,  299,  294,  285,

      284,  283,  279,  265,  264,  257,  255,  245,  242,  241,
      227,  222,  221,  213,  207,  199,  198,  197,  181,  172,
      167,  157,  156,  155,  137,  133,  132,  120,  119,   93,
       87,   77,   76,   75,   57,   56,   54,   49,   45,   44,
       41,   36,   23,   22,   18,   17,   14,   12,    7,    4,
        3,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546

    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[62] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
    0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "ClntLexer.l"
#line 5 "ClntLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 31 "ClntLexer.l"
  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_ClntParser_stype yylval;
}
#line 1054 "ClntLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 44 "ClntLexer.l"


#line 1159 "ClntLexer.cpp"

	if ( (yy_init) )
		{
		(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 547 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1852 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 46 "ClntLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 47 "ClntLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "ClntLexer.l"
{ return ClntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "ClntLexer.l"
{ return ClntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "ClntLexer.l"
{ return ClntParser::ADDRES_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "ClntLexer.l"
{ return ClntParser::IA_;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "ClntLexer.l"
{ return ClntParser::TA_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "ClntLexer.l"
{ return ClntParser::IAID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "ClntLexer.l"
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 55 "ClntLexer.l"
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 56 "ClntLexer.l"
{ return ClntParser::LOGLEVEL_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 57 "ClntLexer.l"
{ return ClntParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 58 "ClntLexer.l"
{ return ClntParser::LOGNAME_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 59 "ClntLexer.l"
{ return ClntParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 60 "ClntLexer.l"
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 61 "ClntLexer.l"
{ return ClntParser::VALID_TIME_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 62 "ClntLexer.l"
{ return ClntParser::T1_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 63 "ClntLexer.l"
{ return ClntParser::T2_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 64 "ClntLexer.l"
{ return ClntParser::OPTION_; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 65 "ClntLexer.l"
{ return ClntParser::DNS_SERVER_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 66 "ClntLexer.l"
{ return ClntParser::DOMAIN_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 67 "ClntLexer.l"
{ return ClntParser::NTP_SERVER_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 68 "ClntLexer.l"
{ return ClntParser::TIME_ZONE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 69 "ClntLexer.l"
{ return ClntParser::SIP_SERVER_; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 70 "ClntLexer.l"
{ return ClntParser::SIP_DOMAIN_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 71 "ClntLexer.l"
{ return ClntParser::FQDN_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 72 "ClntLexer.l"
{ return ClntParser::NIS_SERVER_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 73 "ClntLexer.l"
{ return ClntParser::NIS_DOMAIN_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 74 "ClntLexer.l"
{ return ClntParser::NISP_SERVER_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 75 "ClntLexer.l"
{ return ClntParser::NISP_DOMAIN_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 76 "ClntLexer.l"
{ return ClntParser::LIFETIME_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 77 "ClntLexer.l"
{ return ClntParser::REJECT_SERVERS_;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 78 "ClntLexer.l"
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 79 "ClntLexer.l"
{ return ClntParser::RAPID_COMMIT_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 80 "ClntLexer.l"
{ return ClntParser::UNICAST_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 81 "ClntLexer.l"
{ return ClntParser::STRICT_RFC_NO_ROUTING_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 82 "ClntLexer.l"
{ return ClntParser::PD_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 83 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 84 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_LL_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 85 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_LLT_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 86 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_EN_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 87 "ClntLexer.l"
{ return ClntParser::VENDOR_SPEC_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 88 "ClntLexer.l"
;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 90 "ClntLexer.l"
;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 92 "ClntLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 98 "ClntLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 99 "ClntLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 100 "ClntLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 48:
YY_RULE_SETUP
#line 107 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 116 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 125 "ClntLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 135 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 144 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 153 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 162 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 171 "ClntLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 178 "ClntLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return ClntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return ClntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 199 "ClntLexer.l"
{
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return ClntParser::DUID_;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 230 "ClntLexer.l"
{ 
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::HEXNUMBER_;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 239 "ClntLexer.l"
{ 
    if(!sscanf(yytext,"%u",(unsigned int*)&(yylval.ival))) { 
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::INTNUMBER_;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 249 "ClntLexer.l"
{return yytext[0];} 
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 253 "ClntLexer.l"
ECHO;
	YY_BREAK
#line 1688 "ClntLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 547 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 547 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 546);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
    	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
    	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef yytext_ptr
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
#endif
#line 253 "ClntLexer.l"



