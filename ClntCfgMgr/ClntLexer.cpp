
#line 3 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 86
#define YY_END_OF_BUFFER 87
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[742] =
    {   0,
        1,    1,    0,    0,    0,    0,   87,   85,    2,    1,
        1,   85,   68,   85,   85,   84,   84,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   72,   72,   86,    1,    1,
        1,    0,   80,   68,    0,   80,   70,   69,   84,    0,
        0,   83,    0,   77,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,    9,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   45,   81,   81,
       81,   81,   81,   81,   81,   23,   24,   10,   81,   81,
       81,   81,   81,   71,   69,   84,    0,    0,   76,   82,

       75,   75,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   84,
        0,    0,    0,   74,   74,    0,   75,    0,   75,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   32,
       11,   81,   81,   81,   81,   81,    8,    0,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   84,    0,
        0,    0,    0,   74,    0,   74,    0,   75,   75,   75,

       75,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,    3,   81,   81,   81,   81,   81,   81,
        0,   81,   81,   81,   12,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,    0,    0,    0,    0,   74,
       74,   74,   74,    0,   75,   75,   75,    0,   75,   81,
       81,   81,   81,   81,   81,   81,   27,   81,   81,   81,
       81,   81,   33,   81,   81,   81,   81,   81,   81,    0,
        0,   81,   81,   81,   81,   81,   25,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,    6,   81,

       81,   81,   81,   81,    0,    0,    0,   74,   74,   74,
        0,   74,    0,    0,   75,   75,   75,   75,   81,    5,
       81,   81,   81,   81,   81,   81,   49,   47,   81,   81,
       81,   81,   81,   81,   81,   81,    0,    0,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   42,   81,   81,   81,    0,
        0,    0,    0,    0,   74,   74,   74,   74,    0,   75,
       75,   75,    0,   75,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   48,   81,   81,   81,   81,   38,
       81,   15,   16,    0,    0,   81,   81,   81,   81,   81,

       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   17,    0,    0,    0,   74,   74,
       74,    0,   74,   79,   75,   75,   75,   75,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   46,   81,
       81,   81,   14,    0,    0,   81,   81,    4,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   13,
       81,   29,   81,   81,    0,    0,    0,   78,   74,   74,
       74,   74,   75,   75,   75,    0,   75,   81,   81,   81,
       81,   81,   81,   81,   81,   26,   81,   81,   81,   81,
        0,    0,   35,   34,   81,   28,   81,   81,   81,   81,

       81,   81,   81,   31,   30,   81,   81,   81,   81,    0,
        0,   74,   74,   74,    0,   74,   75,   75,   75,   75,
       65,   81,   81,   81,   81,   81,   56,   81,   81,   81,
       81,   52,   37,   36,   81,   81,   81,   81,   81,   81,
       81,   18,   81,   81,   81,   50,    0,    0,    0,   74,
       74,   74,   74,   75,   75,   75,    0,   75,    7,   81,
       81,   54,   81,   57,   81,   64,   81,   81,   81,   81,
       81,   41,   81,   81,   66,   81,   81,    0,    0,   74,
       74,   74,    0,   74,   75,   75,   75,   75,   81,   81,
       81,   81,   81,   53,   81,   81,   81,   81,   39,   81,

       81,   81,    0,    0,    0,   74,   74,   74,   74,   75,
       75,   75,    0,   75,   81,   81,   81,   81,   67,   19,
       81,   81,   81,   81,   81,   21,    0,   73,   76,   74,
       74,   74,    0,   74,   75,   75,   75,   75,   81,   81,
       58,   81,   81,   40,   81,   22,   81,    0,   73,    0,
       74,   74,   74,   74,   74,   75,   75,   75,    0,   75,
       81,   81,   59,   81,   81,   81,   81,   81,   81,   73,
       76,   74,    0,   74,   74,   74,   74,   75,   75,   75,
       81,   81,   81,   81,   81,   81,   20,   44,   81,   73,
       74,   74,   74,   74,   75,   75,   75,   81,   81,   60,

       61,   62,   63,   81,   74,   74,    0,   74,   74,   75,
       81,   55,   81,   74,   74,   75,   81,   81,   74,   74,
        0,   51,   43,   74,   74,   74,   74,    0,   74,   74,
       74,   74,    0,   74,   74,   74,   74,    0,   74,   74,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
        1,    1,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,    1,    1,    1,    1,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    3,    3,    3,    3,    3,    3,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[806] =
    {   0,
        0,    0, 1061, 1060,    0,    0, 1067, 3829, 3829,   72,
       74, 1028,    0, 1025,   71,   71,   34, 1008,  134,  183,
      227,  185,  186,  284,   77,   71,  308,   43,  184,   87,
      290,  218,   67,   88,   67, 3829, 1017, 3829,  115,  129,
      210, 1023, 3829,    0, 1020, 1019, 3829,    0,  364, 1003,
      382, 3829,    0,  408,    0,  450,   83,    0,   75,   74,
      187,  176,  183, 1005,  189,  192,  208,  208,  217,  246,
      231,  233,  256,  251,  251,  278,  280,    0,  298,  288,
      421,  288,  291,  299,  458,    0,    0,    0,  308,  313,
      333,  368,  371, 3829,    0,  512,  425,  975,  556,    0,

      600,  472,  642,  444,  458,  465,  469,  971,  474,  481,
      491,  491,  483,  526,  534,  535,  536,  576,  970,  577,
      262,  646,  581,  962,  615,  619,  617,  637,  638,  645,
      911,  640,  637,  649,  654,  657,  652,  658,  652,  699,
      581,  897,  856,  745,  717,  726,  789,  831,  763,  873,
      765,  746,  865,  760,  793,  804,  805,  864,  797,  863,
        0,  826,  827,  835,  835,  870,    0,  862,  887,  870,
      885,  881,  869,  874,  885,  888,  890,  875,  880,  919,
      861,  893,  922,  860,  906,  922,  912,  858,  948,  845,
      844,  843,  974,  985, 1027, 1003, 1045, 1071, 1089, 1115,

     1133,  842,  912,  910,  917,  930,  914,  932,  995, 1007,
     1128, 1070, 1078,    0, 1125, 1115, 1127, 1132, 1123, 1138,
     1137, 1134, 1145, 1137,    0, 1127, 1148, 1140, 1137, 1133,
      823, 1138, 1163, 1149, 1155, 1166, 1169, 1161, 1165, 1179,
     1161, 1169,  822, 1171, 1186,  809,  808,  807, 1211, 1228,
     1246, 1272, 1290, 1255, 1316,  806, 1328, 1370, 1346, 1191,
     1217, 1265, 1289, 1337,  816, 1334,    0, 1348, 1340, 1358,
     1356, 1369,    0, 1361,  815, 1371, 1363, 1382, 1374, 1373,
     1384, 1377, 1373, 1386,  814, 1375,    0, 1389,  813, 1392,
      812,  811, 1384, 1391, 1387, 1391, 1417,  810,    0, 1408,

     1404, 1413,  781, 1417,  768,  767, 1442, 1464,  766, 1476,
     1518, 1494, 1536, 1562, 1573, 1591, 1617, 1635, 1410,  777,
     1479, 1515, 1536, 1627, 1559,  776,    0, 1579, 1620, 1632,
     1633, 1626, 1635, 1637, 1645, 1646, 1639, 1635, 1653, 1633,
     1647, 1638, 1636, 1655, 1656, 1655, 1652, 1671,  775, 1672,
     1652, 1661, 1668, 1670, 1675,    0, 1681, 1672, 1674,  735,
      732,  678, 1713, 1730, 1741, 1759, 1785, 1803, 1768, 1829,
      677, 1841, 1883, 1859, 1693, 1737, 1774, 1800, 1862, 1852,
     1851, 1855, 1878, 1874,    0, 1890, 1882,  688, 1882,    0,
     1886,    0,    0, 1898, 1878, 1892, 1897, 1896, 1901, 1900,

      679, 1901, 1894, 1903, 1895, 1913, 1909, 1914, 1929, 1917,
     1931, 1933, 1933, 1924,    0,  666,  665, 1955, 1978,  664,
     1990, 2032, 2008, 2017, 2076, 2050, 2120, 2094, 2019, 2031,
      635, 2068, 2089, 2101, 2115, 2129, 2113, 2111,    0, 2113,
     2121, 2131,    0, 2127, 2132, 2124, 2121,    0, 2122, 2123,
     2134, 2130, 2130, 2126, 2125, 2145, 2159, 2156, 2166,    0,
     2173,    0, 2172, 2173,  622,  621,  620, 2190, 2216, 2234,
     2260, 2278, 2304,  619, 2316, 2358, 2334, 2179, 2223, 2271,
     2319, 2335, 2338, 2337, 2349,    0, 2355, 2369, 2356, 2367,
     2359, 2356,    0,    0, 2366,    0, 2367, 2372, 2373, 2370,

     2358, 2366, 2364,    0,    0, 2365,  630, 2371, 2389,  617,
      615, 2430,  614, 2442, 2484, 2460, 2528, 2502, 2572, 2546,
        0, 2374, 2452,  625, 2480,  624,    0, 2522, 2539, 2542,
     2577,    0, 3829, 3829, 2566, 2577, 2566, 2578, 2566, 2582,
     2585,    0, 2576, 2576, 2582,    0,  611,  610,  609, 2629,
     2647, 2673, 2691, 2717,  570, 2729, 2771, 2747,    0, 2587,
     2624,    0, 2765,    0, 2650,    0, 2688, 2733, 2749, 2733,
     2770,    0, 2764, 2768,    0, 2770, 2773,  569,  568, 2824,
      567, 2836, 2878, 2854, 2922, 2896, 2966, 2940,  578, 2783,
     2856, 2870, 2918,    0, 2928, 2928, 2970, 2956,    0, 2963,

      577, 2973,  536,  535,  534, 3016, 2990, 3060, 3034, 3078,
      533, 3104, 3146, 3122, 2962, 3004,  536, 3041,    0,    0,
     3077, 3109, 3119, 3123, 3112,    0,  531,  529,    0, 3168,
      528, 3190, 3232, 3208, 3276, 3250, 3320, 3294, 3141, 3206,
        0,  262, 3219,    0, 3269,    0, 3286,  527,  526,  525,
      524, 3364, 3339, 3408, 3382, 3426,  494, 3452,    0, 3470,
     3329, 3367,    0,  268,  493,  499, 3385, 3420, 3449,  490,
     3829,  489,    0, 3506,  487, 3518, 3536, 3562, 3580,    0,
     3471, 3522,  491,  486,  438,  439,    0,    0, 3524,  430,
      429,  428, 3606, 3624, 3650,  427,    0, 3575, 3569,    0,

        0,    0,    0, 3616,  426,  425,    0, 3663, 3829,    0,
     3608,    0, 3626,  397,  390, 3829, 3643, 3657,  388,  387,
        0,    0,    0,  386,  385,  384,  383,    0,  353,  352,
      351,  350,    0,  346,  344,  342,  341,    0,  340,  339,
     3829, 3712, 3716, 3720, 3724, 3728, 3732, 3734,  357, 3736,
     3738, 3740, 3742, 3744, 3746, 3748, 3750, 3752, 3754, 3756,
     3758, 3760, 3762, 3764, 3766, 3768, 3770, 3772, 3774, 3776,
     3778, 3780, 3782, 3784,  356, 3786, 3788,  321, 3790, 3792,
      279,  278, 3794, 3796,  271, 3798,  270,  224, 3800, 3802,
     3804,  220, 3806, 3808, 3810,  212, 3812, 3814, 3816,  143,

     3818, 3820, 3822,   79, 3824
    } ;

static yyconst flex_int16_t yy_def[806] =
    {   0,
      741,    1,  742,  742,  743,  743,  741,  741,  741,  741,
      741,  744,  745,  746,  741,  741,   16,  741,  741,   19,
       19,   19,   19,   19,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  741,  741,  741,  741,  741,
      741,  744,  741,  745,  746,  741,  741,  747,  741,  748,
       49,  741,  749,  741,   24,   24,   56,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  741,  747,  741,   96,  750,  741,  749,

      741,  101,   56,  103,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  741,
      140,  751,  752,  741,  144,  741,  741,  741,  147,  103,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  741,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  141,  141,
      753,  754,  741,  741,  741,  194,  741,  741,  198,  741,

      200,  150,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      741,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  741,  755,  756,  741,  741,
      250,  741,  252,  741,  741,  741,  741,  741,  257,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  741,
      741,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,  757,  758,  741,  741,  741,  741,
      741,  310,  741,  741,  741,  315,  741,  317,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  741,  741,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  741,
      759,  760,  741,  741,  741,  365,  741,  367,  741,  741,
      741,  741,  741,  372,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  741,  741,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  761,  762,  741,  741,  741,
      741,  741,  421,  741,  741,  425,  741,  427,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  741,  741,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  741,  763,  764,  741,  741,  469,
      741,  471,  741,  741,  741,  741,  475,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      741,  741,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,  765,
      766,  741,  741,  741,  741,  514,  741,  517,  741,  519,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  741,  741,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  741,  767,  768,  741,
      550,  741,  552,  741,  741,  741,  741,  556,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  769,  770,  741,
      741,  741,  741,  582,  741,  585,  741,  587,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,  741,  771,  772,  741,  606,  741,  608,  741,
      741,  741,  741,  612,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  773,  774,  775,  741,
      741,  741,  741,  632,  741,  635,  741,  637,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  741,  776,  741,
      777,  741,  652,  741,  654,  741,  741,  741,  778,  658,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  779,
      741,  780,  781,  741,  741,  741,  676,  741,  678,  782,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  741,
      783,  784,  741,  693,  741,  741,  785,   24,   24,   24,

       24,   24,   24,   24,  741,  786,  787,  741,  741,  788,
       24,   24,   24,  789,  790,  741,   24,   24,  741,  791,
      792,   24,   24,  793,  794,  741,  795,  796,  797,  798,
      741,  799,  800,  801,  802,  741,  803,  804,  805,  741,
        0,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,

      741,  741,  741,  741,  741
    } ;

static yyconst flex_int16_t yy_nxt[3904] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   20,   21,   22,   23,   24,   24,
       25,   24,   24,   26,   24,   27,   28,   29,   24,   30,
       31,   32,   33,   34,   35,   24,   24,   24,   19,   20,
       20,   21,   22,   23,   24,   24,   25,   24,   24,   26,
       24,   27,   28,   29,   24,   30,   31,   32,   33,   34,
       35,   24,   24,   24,   39,   40,   41,   40,   47,  741,
       77,  655,   48,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   50,   51,   51,   51,   51,   51,   51,   68,

       52,   71,   90,   93,   69,  741,   77,   72,  104,   80,
       91,  105,   70,   81,   92,  106,   53,   39,   40,   51,
       51,   51,   51,   51,   51,   68,   52,   71,   90,   93,
       69,   41,   40,   72,  104,   80,   91,  105,   70,   81,
       92,  106,   53,   55,   55,  735,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   50,   56,   56,   56,   57,
       56,   56,   55,   58,   55,   55,   55,   55,   55,   59,
       55,   55,   55,   55,   55,   55,   60,   55,   55,   55,
       55,   55,   56,   56,   56,   57,   56,   56,   55,   58,
       55,   55,   55,   55,   55,   59,   55,   55,   55,   55,

       55,   55,   60,   55,   55,   55,   55,   55,   56,   78,
       56,   56,   39,   40,  730,  107,  108,  109,   55,  111,
       55,   55,  725,   79,   67,   55,  716,   55,   55,  112,
       66,   86,   87,  113,   56,   78,   56,   56,  114,  115,
       88,  107,  108,  109,   55,  111,   55,   55,   89,   79,
       67,   55,   56,   55,   55,  112,   66,   61,  118,  113,
      122,  119,   62,   63,  114,  115,   88,   64,  116,   65,
      168,  169,  715,  710,   89,  663,  664,  665,   56,  666,
      697,  692,  683,   61,  118,  684,  117,  119,   62,   63,
      120,  121,  123,   64,  116,   65,   55,   55,   55,   55,

       55,   55,   55,   55,   55,  741,   55,   55,   55,   55,
       55,   55,  117,   55,   82,  124,  120,  121,  123,   55,
       83,  125,   84,  680,  126,  127,   55,  130,  131,  132,
       73,   85,   55,   55,   55,   55,   55,   55,   74,   55,
       82,  124,  135,  136,   75,   55,   83,  125,   84,   76,
      126,  127,   55,  130,  131,  132,   73,   85,  651,  100,
      738,  738,  738,  733,   74,  738,  137,  733,  135,  136,
       75,  733,  728,  733,  728,   76,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   50,   97,   97,   97,   97,
       97,   97,  137,   52,   97,   97,   97,   97,   97,   97,

       97,   97,   97,  138,  728,  721,  728,  721,  721,  707,
      139,  721,   97,   97,   97,   97,   97,   97,  707,   52,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  138,
      102,  102,  102,  102,  102,  102,  139,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  707,  673,  659,  707,
      673,  650,  128,  703,  702,  129,  102,  102,  102,  102,
      102,  102,  103,  103,  103,  103,  103,  103,  103,  103,
      103,   50,  103,  103,  103,  103,  103,  103,  128,   58,
      133,  129,  741,  151,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  152,  153,  154,  156,  134,  103,  103,

      103,  103,  103,  103,  701,   58,  133,  700,  633,  151,
      673,  650,  686,  685,  157,  613,  158,  159,  160,  152,
      153,  154,  156,  134,  140,  140,  140,  140,  140,  140,
      140,  140,  140,   50,  141,  141,  141,  141,  141,  141,
      157,   52,  158,  159,  160,  673,  671,  650,  605,  583,
      650,  161,  605,  641,  557,  629,  605,  549,  162,  163,
      141,  141,  141,  141,  141,  141,  164,   52,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  161,  145,  145,
      145,  145,  145,  145,  162,  163,  625,  615,  515,  605,
      549,  476,  164,  190,  190,  190,  190,  190,  190,  190,

      190,  190,  165,  167,  145,  145,  145,  145,  145,  145,
      146,  172,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  148,  149,  149,  149,  149,  149,  149,  165,  167,
       99,  549,  467,  563,  561,  422,  549,  172,  467,  544,
      373,   99,  467,  362,  480,  174,  175,  176,  149,  149,
      149,  149,  149,  149,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  177,  150,  150,  150,  150,  150,  150,
      170,  174,  175,  176,  178,  179,  171,  181,  182,  183,
      184,  185,  186,  187,  188,  311,  467,  362,  451,  177,
      150,  150,  150,  150,  150,  150,  170,  441,  258,   99,

      178,  179,  171,  181,  182,  183,  184,  185,  186,  187,
      188,  189,  189,  189,  189,  189,  189,  189,  189,  189,
       50,  190,  190,  190,  190,  190,  190,  741,   52,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  190,  190,  190,
      190,  190,  190,  362,   52,  193,  248,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  195,  196,  196,  196,
      196,  196,  196,  741,  203,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  406,  384,  376,  195,  362,  248,
      358,  204,  205,  196,  196,  196,  196,  196,  196,  146,

      207,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      148,  199,  199,  199,  199,  199,  199,  204,  205,  354,
      348,  347,  345,  342,  332,  324,  207,  148,   99,  248,
      143,  302,  290,  208,  209,  210,  212,  199,  199,  199,
      199,  199,  199,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  214,  201,  201,  201,  201,  201,  201,  208,
      209,  210,  212,  741,  248,  143,  741,  245,  215,  241,
      237,  221,  213,  211,  206,  216,  217,   99,  214,  201,
      201,  201,  201,  201,  201,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  215,  202,  202,  202,  202,  202,

      202,  216,  217,  218,  219,  220,  224,  225,  226,  227,
      228,  229,  222,  231,  232,  230,  233,  234,  143,  238,
      180,  202,  202,  202,  202,  202,  202,  223,  242,  218,
      219,  220,  224,  225,  226,  227,  228,  229,  222,  231,
      232,  230,  233,  234,  235,  238,  239,  243,  244,  260,
      261,  262,  263,  223,  242,  265,  264,  240,  266,  236,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  741,
      235,  173,  239,  243,  244,  260,  261,  262,  263,  166,
      155,  265,  264,  240,  266,  236,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  193,  143,  250,  250,  250,

      250,  250,  250,  250,  250,  250,  195,  251,  251,  251,
      251,  251,  251,  741,  110,  251,  251,  251,  251,  251,
      251,  251,  251,  251,   99,   45,   46,   43,   94,   54,
      267,   46,   43,  251,  251,  251,  251,  251,  251,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  268,  253,
      253,  253,  253,  253,  253,  254,  267,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  741,   37,   37,  741,
      741,  741,  741,  741,  268,  253,  253,  253,  253,  253,
      253,  146,  741,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  148,  256,  256,  256,  256,  256,  256,  741,

      272,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      741,  741,  741,  741,  741,  741,  741,  741,  273,  256,
      256,  256,  256,  256,  256,  146,  272,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  258,  259,  259,  259,
      259,  259,  259,  741,  273,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  269,  274,  275,  276,  277,  278,
      279,  270,  280,  259,  259,  259,  259,  259,  259,  271,
      282,  283,  284,  285,  286,  287,  288,  281,  289,  291,
      269,  274,  275,  276,  277,  278,  279,  270,  280,  292,
      293,  294,  295,  296,  297,  271,  282,  283,  284,  285,

      286,  287,  288,  281,  289,  291,  298,  299,  300,  301,
      303,  304,  741,  319,  741,  292,  293,  294,  295,  296,
      297,  307,  741,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  298,  299,  300,  301,  303,  304,  193,  319,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  195,
      309,  309,  309,  309,  309,  309,  741,  320,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  309,  309,  309,  309,
      309,  309,  193,  320,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  311,  312,  312,  312,  312,  312,  312,

      741,  321,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  741,  741,  322,  741,  741,  741,  741,  741,  741,
      312,  312,  312,  312,  312,  312,  146,  321,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  148,  146,  322,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  258,
      316,  316,  316,  316,  316,  316,  741,  741,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  741,  741,  741,
      741,  741,  323,  325,  326,  327,  316,  316,  316,  316,
      316,  316,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  328,  318,  318,  318,  318,  318,  318,  323,  325,

      326,  327,  329,  330,  331,  333,  334,  335,  336,  337,
      338,  339,  340,  341,  343,  344,  346,  328,  318,  318,
      318,  318,  318,  318,  349,  350,  351,  352,  329,  330,
      331,  333,  334,  335,  336,  337,  338,  339,  340,  341,
      343,  344,  346,  353,  355,  356,  357,  359,  741,  375,
      349,  350,  351,  352,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  741,  741,  741,  741,  741,  741,  353,
      355,  356,  357,  359,  193,  375,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  195,  193,  741,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  311,  366,  366,

      366,  366,  366,  366,  741,  741,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  741,  741,  741,  741,  741,
      741,  377,  741,  741,  366,  366,  366,  366,  366,  366,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  378,
      368,  368,  368,  368,  368,  368,  369,  377,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  741,  379,  741,
      741,  741,  741,  741,  741,  378,  368,  368,  368,  368,
      368,  368,  146,  741,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  146,  379,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  258,  371,  371,  371,  371,  371,

      371,  741,  383,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  741,  741,  741,  741,  741,  741,  741,  741,
      385,  371,  371,  371,  371,  371,  371,  146,  383,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  373,  374,
      374,  374,  374,  374,  374,  741,  385,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  380,  386,  387,  388,
      389,  390,  381,  391,  382,  374,  374,  374,  374,  374,
      374,  392,  393,  394,  395,  396,  397,  398,  399,  400,
      401,  402,  380,  386,  387,  388,  389,  390,  381,  391,
      382,  403,  404,  405,  407,  408,  409,  392,  393,  394,

      395,  396,  397,  398,  399,  400,  401,  402,  410,  411,
      412,  413,  414,  415,  741,  429,  741,  403,  404,  405,
      407,  408,  409,  418,  741,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  410,  411,  412,  413,  414,  415,
      193,  429,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  193,  741,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  311,  420,  420,  420,  420,  420,  420,  741,
      430,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  420,
      420,  420,  420,  420,  420,  193,  430,  421,  421,  421,

      421,  421,  421,  421,  421,  421,  422,  423,  423,  423,
      423,  423,  423,  741,  431,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  741,  741,  432,  741,  741,  741,
      741,  741,  741,  423,  423,  423,  423,  423,  423,  146,
      431,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      258,  146,  432,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  373,  426,  426,  426,  426,  426,  426,  741,
      741,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      741,  741,  741,  741,  741,  433,  434,  435,  436,  426,
      426,  426,  426,  426,  426,  427,  427,  427,  427,  427,

      427,  427,  427,  427,  437,  428,  428,  428,  428,  428,
      428,  433,  434,  435,  436,  438,  439,  440,  442,  443,
      444,  445,  446,  447,  448,  449,  450,  452,  453,  454,
      437,  428,  428,  428,  428,  428,  428,  455,  456,  457,
      458,  438,  439,  440,  442,  443,  444,  445,  446,  447,
      448,  449,  450,  452,  453,  454,  459,  460,  461,  462,
      463,  464,  741,  455,  456,  457,  458,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  741,  741,  741,  741,
      741,  741,  459,  460,  461,  462,  463,  464,  193,  741,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  311,

      193,  741,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  422,  470,  470,  470,  470,  470,  470,  741,  741,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  470,  470,
      470,  470,  470,  470,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  478,  472,  472,  472,  472,  472,  472,
      741,  479,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  741,  741,  741,  741,  741,  741,  741,  741,  478,
      472,  472,  472,  472,  472,  472,  146,  479,  473,  473,
      473,  473,  473,  473,  473,  473,  473,  373,  474,  474,

      474,  474,  474,  474,  741,  481,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  741,  741,  741,  741,  741,
      741,  741,  482,  483,  474,  474,  474,  474,  474,  474,
      146,  481,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  476,  477,  477,  477,  477,  477,  477,  482,  483,
      484,  485,  486,  487,  488,  489,  490,  491,  492,  493,
      494,  495,  496,  499,  500,  501,  502,  497,  477,  477,
      477,  477,  477,  477,  498,  503,  484,  485,  486,  487,
      488,  489,  490,  491,  492,  493,  494,  495,  496,  499,
      500,  501,  502,  497,  504,  505,  506,  507,  508,  509,

      498,  503,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  741,  741,  741,  741,  741,  741,  741,  741,  521,
      504,  505,  506,  507,  508,  509,  193,  741,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  422,  513,  513,
      513,  513,  513,  513,  741,  521,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  741,  741,  741,  741,  741,
      741,  741,  741,  522,  513,  513,  513,  513,  513,  513,
      193,  741,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  515,  516,  516,  516,  516,  516,  516,  741,  522,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  741,

      741,  523,  741,  741,  741,  741,  741,  741,  516,  516,
      516,  516,  516,  516,  146,  741,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  373,  146,  523,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  476,  518,  518,
      518,  518,  518,  518,  741,  741,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  741,  741,  741,  741,  741,
      524,  525,  526,  527,  518,  518,  518,  518,  518,  518,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  528,
      520,  520,  520,  520,  520,  520,  524,  525,  526,  527,
      529,  530,  531,  532,  533,  534,  535,  536,  537,  538,

      539,  540,  541,  542,  543,  528,  520,  520,  520,  520,
      520,  520,  545,  546,  741,  559,  529,  530,  531,  532,
      533,  534,  535,  536,  537,  538,  539,  540,  541,  542,
      543,  741,  741,  741,  741,  741,  741,  741,  545,  546,
      193,  559,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  422,  193,  741,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  515,  551,  551,  551,  551,  551,  551,
      741,  741,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  741,  741,  741,  741,  741,  741,  560,  741,  741,
      551,  551,  551,  551,  551,  551,  552,  552,  552,  552,

      552,  552,  552,  552,  552,  562,  553,  553,  553,  553,
      553,  553,  741,  560,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  741,  741,  741,  741,  741,  741,  741,
      741,  562,  553,  553,  553,  553,  553,  553,  146,  741,
      554,  554,  554,  554,  554,  554,  554,  554,  554,  476,
      555,  555,  555,  555,  555,  555,  741,  564,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  741,  741,  741,
      741,  741,  741,  741,  565,  566,  555,  555,  555,  555,
      555,  555,  146,  564,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  557,  558,  558,  558,  558,  558,  558,

      565,  566,  567,  568,  569,  570,  571,  572,  573,  574,
      575,  576,  577,  741,  589,  741,  741,  741,  741,  741,
      558,  558,  558,  558,  558,  558,  741,  741,  567,  568,
      569,  570,  571,  572,  573,  574,  575,  576,  577,  193,
      589,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      515,  581,  581,  581,  581,  581,  581,  741,  590,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  741,  741,
      741,  741,  741,  741,  741,  741,  593,  581,  581,  581,
      581,  581,  581,  193,  590,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  583,  584,  584,  584,  584,  584,

      584,  741,  593,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  741,  741,  594,  741,  741,  741,  741,  741,
      741,  584,  584,  584,  584,  584,  584,  146,  741,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  476,  146,
      594,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      557,  586,  586,  586,  586,  586,  586,  741,  741,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  741,  741,
      741,  741,  741,  741,  595,  596,  597,  586,  586,  586,
      586,  586,  586,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  598,  588,  588,  588,  588,  588,  588,  591,

      595,  596,  597,  599,  600,  592,  601,  602,  741,  616,
      741,  741,  741,  741,  741,  741,  741,  741,  598,  588,
      588,  588,  588,  588,  588,  591,  741,  741,  741,  599,
      600,  592,  601,  602,  193,  616,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  515,  193,  741,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  583,  607,  607,
      607,  607,  607,  607,  741,  741,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  741,  741,  741,  741,  741,
      741,  617,  741,  741,  607,  607,  607,  607,  607,  607,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  618,

      609,  609,  609,  609,  609,  609,  741,  617,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  741,  741,  741,
      741,  741,  741,  741,  741,  618,  609,  609,  609,  609,
      609,  609,  146,  741,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  557,  611,  611,  611,  611,  611,  611,
      741,  619,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  741,  741,  741,  741,  741,  741,  741,  620,  621,
      611,  611,  611,  611,  611,  611,  146,  619,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  613,  614,  614,
      614,  614,  614,  614,  620,  621,  622,  623,  624,  626,

      741,  639,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  741,  741,  741,  614,  614,  614,  614,  614,  614,
      741,  741,  622,  623,  624,  626,  193,  639,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  583,  631,  631,
      631,  631,  631,  631,  741,  640,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  741,  741,  741,  741,  741,
      741,  741,  741,  642,  631,  631,  631,  631,  631,  631,
      193,  640,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  633,  634,  634,  634,  634,  634,  634,  146,  642,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  557,

      741,  741,  741,  741,  741,  741,  741,  643,  634,  634,
      634,  634,  634,  634,  146,  741,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  613,  636,  636,  636,  636,
      636,  636,  741,  643,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  741,  741,  741,  741,  741,  644,  645,
      646,  647,  636,  636,  636,  636,  636,  636,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  661,  638,  638,
      638,  638,  638,  638,  644,  645,  646,  647,  193,  741,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  583,
      741,  741,  741,  661,  638,  638,  638,  638,  638,  638,

      193,  741,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  633,  653,  653,  653,  653,  653,  653,  741,  741,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  741,
      741,  741,  741,  741,  741,  662,  741,  741,  653,  653,
      653,  653,  653,  653,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  667,  655,  655,  655,  655,  655,  655,
      741,  662,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  741,  741,  741,  741,  741,  741,  741,  741,  667,
      655,  655,  655,  655,  655,  655,  146,  741,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  613,  657,  657,

      657,  657,  657,  657,  741,  668,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  741,  741,  741,  741,  741,
      741,  741,  669,  741,  657,  657,  657,  657,  657,  657,
      146,  668,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  659,  660,  660,  660,  660,  660,  660,  669,  741,
      741,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      741,  741,  741,  741,  741,  741,  741,  681,  660,  660,
      660,  660,  660,  660,  193,  741,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  633,  675,  675,  675,  675,
      675,  675,  741,  681,  677,  677,  677,  677,  677,  677,

      677,  677,  677,  682,  741,  741,  741,  741,  741,  741,
      741,  687,  675,  675,  675,  675,  675,  675,  193,  741,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  682,
      677,  677,  677,  677,  677,  677,  146,  687,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  613,  741,  741,
      741,  741,  741,  741,  741,  688,  677,  677,  677,  677,
      677,  677,  146,  741,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  659,  679,  679,  679,  679,  679,  679,
      741,  688,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  689,  741,  741,  741,  741,  741,  741,  741,  741,

      679,  679,  679,  679,  679,  679,  741,  741,  741,  741,
      741,  741,  741,  698,  741,  741,  193,  689,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  633,  193,  741,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  698,
      694,  694,  694,  694,  694,  694,  741,  699,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  741,  741,  741,
      741,  741,  741,  741,  741,  704,  694,  694,  694,  694,
      694,  694,  146,  699,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  659,  696,  696,  696,  696,  696,  696,
      741,  704,  696,  696,  696,  696,  696,  696,  696,  696,

      696,  711,  741,  741,  741,  741,  741,  741,  741,  712,
      696,  696,  696,  696,  696,  696,  193,  741,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  711,  709,  709,
      709,  709,  709,  709,  741,  712,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  741,  713,  741,  717,  741,
      741,  741,  741,  741,  709,  709,  709,  709,  709,  709,
      146,  718,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  659,  713,  193,  717,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  722,  723,  741,  718,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,

      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      722,  723,   36,   36,   36,   36,   38,   38,   38,   38,
       42,   42,   42,   42,   44,  741,   44,   44,   45,   45,
       45,   45,   95,  741,   95,   95,   98,   98,  142,  142,
      191,  191,  192,  192,  246,  246,  247,  247,  305,  305,
      306,  306,  360,  360,  361,  361,  416,  416,  417,  417,
      465,  465,  466,  466,  510,  510,  511,  511,  547,  547,
      548,  548,  578,  578,  579,  579,  603,  603,  604,  604,
      627,  627,  628,  628,  648,  648,  649,  649,  670,  670,
      672,  672,  690,  690,  691,  691,  705,  705,  706,  706,

      714,  714,  719,  719,  720,  720,  724,  724,  726,  726,
      727,  727,  729,  729,  731,  731,  732,  732,  734,  734,
      736,  736,  737,  737,  739,  739,  740,  740,    7,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,

      741,  741,  741
    } ;

static yyconst flex_int16_t yy_chk[3904] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   10,   10,   11,   11,   15,   17,
       28,  804,   15,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   25,

       16,   26,   33,   35,   25,   17,   28,   26,   57,   30,
       34,   59,   25,   30,   34,   60,   16,   39,   39,   16,
       16,   16,   16,   16,   16,   25,   16,   26,   33,   35,
       25,   40,   40,   26,   57,   30,   34,   59,   25,   30,
       34,   60,   16,   19,   19,  800,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   20,   29,
       22,   23,   41,   41,  796,   61,   62,   63,   20,   65,
       22,   23,  792,   29,   23,   20,  788,   22,   23,   66,
       22,   32,   32,   67,   20,   29,   22,   23,   68,   69,
       32,   61,   62,   63,   20,   65,   22,   23,   32,   29,
       23,   20,   21,   22,   23,   66,   22,   21,   71,   67,
       75,   72,   21,   21,   68,   69,   32,   21,   70,   21,
      121,  121,  787,  785,   32,  642,  642,  642,   21,  642,
      782,  781,  664,   21,   71,  664,   70,   72,   21,   21,
       73,   74,   75,   21,   70,   21,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   70,   24,   31,   76,   73,   74,   75,   24,
       31,   77,   31,  778,   79,   80,   24,   82,   83,   84,
       27,   31,   24,   24,   24,   24,   24,   24,   27,   24,
       31,   76,   89,   90,   27,   24,   31,   77,   31,   27,
       79,   80,   24,   82,   83,   84,   27,   31,  775,  749,
      740,  739,  737,  736,   27,  735,   91,  734,   89,   90,
       27,  732,  731,  730,  729,   27,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   91,   49,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   92,  727,  726,  725,  724,  720,  719,
       93,  715,   49,   49,   49,   49,   49,   49,  714,   49,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   92,
       54,   54,   54,   54,   54,   54,   93,   97,   97,   97,
       97,   97,   97,   97,   97,   97,  706,  705,  696,  692,
      691,  690,   81,  686,  685,   81,   54,   54,   54,   54,
       54,   54,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   81,   56,
       85,   81,  102,  104,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  105,  106,  107,  109,   85,   56,   56,

       56,   56,   56,   56,  684,   56,   85,  683,  675,  104,
      672,  670,  666,  665,  110,  657,  111,  112,  113,  105,
      106,  107,  109,   85,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
      110,   96,  111,  112,  113,  651,  650,  649,  648,  631,
      628,  114,  627,  617,  611,  605,  604,  603,  115,  116,
       96,   96,   96,   96,   96,   96,  117,   96,   99,   99,
       99,   99,   99,   99,   99,   99,   99,  114,   99,   99,
       99,   99,   99,   99,  115,  116,  601,  589,  581,  579,
      578,  555,  117,  141,  141,  141,  141,  141,  141,  141,

      141,  141,  118,  120,   99,   99,   99,   99,   99,   99,
      101,  123,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  118,  120,
      549,  548,  547,  526,  524,  513,  511,  123,  510,  507,
      474,  467,  466,  465,  431,  125,  126,  127,  101,  101,
      101,  101,  101,  101,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  128,  103,  103,  103,  103,  103,  103,
      122,  125,  126,  127,  129,  130,  122,  132,  133,  134,
      135,  136,  137,  138,  139,  420,  417,  416,  401,  128,
      103,  103,  103,  103,  103,  103,  122,  388,  371,  362,

      129,  130,  122,  132,  133,  134,  135,  136,  137,  138,
      139,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  145,  140,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  140,  140,  140,
      140,  140,  140,  361,  140,  144,  360,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  149,  151,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  349,  326,  320,  309,  306,  305,
      303,  151,  152,  144,  144,  144,  144,  144,  144,  147,

      154,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  151,  152,  298,
      292,  291,  289,  285,  275,  265,  154,  256,  248,  247,
      246,  243,  231,  155,  156,  157,  159,  147,  147,  147,
      147,  147,  147,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  162,  148,  148,  148,  148,  148,  148,  155,
      156,  157,  159,  202,  192,  191,  190,  188,  163,  184,
      181,  168,  160,  158,  153,  164,  165,  143,  162,  148,
      148,  148,  148,  148,  148,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  163,  150,  150,  150,  150,  150,

      150,  164,  165,  166,  166,  166,  170,  171,  172,  173,
      174,  175,  169,  176,  177,  175,  178,  179,  142,  182,
      131,  150,  150,  150,  150,  150,  150,  169,  185,  166,
      166,  166,  170,  171,  172,  173,  174,  175,  169,  176,
      177,  175,  178,  179,  180,  182,  183,  186,  187,  203,
      204,  205,  206,  169,  185,  207,  206,  183,  208,  180,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      180,  124,  183,  186,  187,  203,  204,  205,  206,  119,
      108,  207,  206,  183,  208,  180,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  194,   98,  194,  194,  194,

      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  196,   64,  196,  196,  196,  196,  196,
      196,  196,  196,  196,   50,   46,   45,   42,   37,   18,
      209,   14,   12,  194,  194,  194,  194,  194,  194,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  210,  195,
      195,  195,  195,  195,  195,  197,  209,  197,  197,  197,
      197,  197,  197,  197,  197,  197,    7,    4,    3,    0,
        0,    0,    0,    0,  210,  195,  195,  195,  195,  195,
      195,  198,    0,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  199,

      212,  199,  199,  199,  199,  199,  199,  199,  199,  199,
        0,    0,    0,    0,    0,    0,    0,    0,  213,  198,
      198,  198,  198,  198,  198,  200,  212,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  201,  213,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  211,  215,  216,  217,  218,  219,
      220,  211,  221,  200,  200,  200,  200,  200,  200,  211,
      222,  223,  224,  226,  227,  228,  229,  221,  230,  232,
      211,  215,  216,  217,  218,  219,  220,  211,  221,  233,
      234,  235,  236,  237,  238,  211,  222,  223,  224,  226,

      227,  228,  229,  221,  230,  232,  239,  240,  241,  242,
      244,  245,    0,  260,    0,  233,  234,  235,  236,  237,
      238,  249,    0,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  239,  240,  241,  242,  244,  245,  250,  260,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  251,  261,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  250,  250,  250,  250,
      250,  250,  252,  261,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,

      253,  262,  253,  253,  253,  253,  253,  253,  253,  253,
      253,    0,    0,  263,    0,    0,    0,    0,    0,    0,
      252,  252,  252,  252,  252,  252,  255,  262,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  257,  263,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  259,    0,  259,  259,
      259,  259,  259,  259,  259,  259,  259,    0,    0,    0,
        0,    0,  264,  266,  268,  269,  257,  257,  257,  257,
      257,  257,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  270,  258,  258,  258,  258,  258,  258,  264,  266,

      268,  269,  271,  272,  274,  276,  277,  278,  279,  280,
      281,  282,  283,  284,  286,  288,  290,  270,  258,  258,
      258,  258,  258,  258,  293,  294,  295,  296,  271,  272,
      274,  276,  277,  278,  279,  280,  281,  282,  283,  284,
      286,  288,  290,  297,  300,  301,  302,  304,    0,  319,
      293,  294,  295,  296,  307,  307,  307,  307,  307,  307,
      307,  307,  307,    0,    0,    0,    0,    0,    0,  297,
      300,  301,  302,  304,  308,  319,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  310,    0,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,

      310,  310,  310,  310,  312,    0,  312,  312,  312,  312,
      312,  312,  312,  312,  312,    0,    0,    0,    0,    0,
        0,  321,    0,    0,  310,  310,  310,  310,  310,  310,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  322,
      311,  311,  311,  311,  311,  311,  313,  321,  313,  313,
      313,  313,  313,  313,  313,  313,  313,    0,  323,    0,
        0,    0,    0,    0,    0,  322,  311,  311,  311,  311,
      311,  311,  314,    0,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  315,  323,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,

      315,  316,  325,  316,  316,  316,  316,  316,  316,  316,
      316,  316,    0,    0,    0,    0,    0,    0,    0,    0,
      328,  315,  315,  315,  315,  315,  315,  317,  325,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  318,  328,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  324,  329,  330,  331,
      332,  333,  324,  334,  324,  317,  317,  317,  317,  317,
      317,  335,  336,  337,  338,  339,  340,  341,  342,  343,
      344,  345,  324,  329,  330,  331,  332,  333,  324,  334,
      324,  346,  347,  348,  350,  351,  352,  335,  336,  337,

      338,  339,  340,  341,  342,  343,  344,  345,  353,  354,
      355,  357,  358,  359,    0,  375,    0,  346,  347,  348,
      350,  351,  352,  363,    0,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  353,  354,  355,  357,  358,  359,
      364,  375,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  365,    0,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  366,
      376,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  365,
      365,  365,  365,  365,  365,  367,  376,  367,  367,  367,

      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  368,  377,  368,  368,  368,  368,  368,
      368,  368,  368,  368,    0,    0,  378,    0,    0,    0,
        0,    0,    0,  367,  367,  367,  367,  367,  367,  370,
      377,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  372,  378,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  374,
        0,  374,  374,  374,  374,  374,  374,  374,  374,  374,
        0,    0,    0,    0,    0,  379,  380,  381,  382,  372,
      372,  372,  372,  372,  372,  373,  373,  373,  373,  373,

      373,  373,  373,  373,  383,  373,  373,  373,  373,  373,
      373,  379,  380,  381,  382,  384,  386,  387,  389,  391,
      394,  395,  396,  397,  398,  399,  400,  402,  403,  404,
      383,  373,  373,  373,  373,  373,  373,  405,  406,  407,
      408,  384,  386,  387,  389,  391,  394,  395,  396,  397,
      398,  399,  400,  402,  403,  404,  409,  410,  411,  412,
      413,  414,    0,  405,  406,  407,  408,  418,  418,  418,
      418,  418,  418,  418,  418,  418,    0,    0,    0,    0,
        0,    0,  409,  410,  411,  412,  413,  414,  419,    0,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,

      421,    0,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  423,    0,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  421,  421,
      421,  421,  421,  421,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  429,  422,  422,  422,  422,  422,  422,
      426,  430,  426,  426,  426,  426,  426,  426,  426,  426,
      426,    0,    0,    0,    0,    0,    0,    0,    0,  429,
      422,  422,  422,  422,  422,  422,  425,  430,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,

      425,  425,  425,  425,  428,  432,  428,  428,  428,  428,
      428,  428,  428,  428,  428,    0,    0,    0,    0,    0,
        0,    0,  433,  434,  425,  425,  425,  425,  425,  425,
      427,  432,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  433,  434,
      435,  436,  437,  438,  440,  441,  442,  444,  445,  446,
      447,  449,  450,  452,  453,  454,  455,  451,  427,  427,
      427,  427,  427,  427,  451,  456,  435,  436,  437,  438,
      440,  441,  442,  444,  445,  446,  447,  449,  450,  452,
      453,  454,  455,  451,  457,  458,  459,  461,  463,  464,

      451,  456,  468,  468,  468,  468,  468,  468,  468,  468,
      468,    0,    0,    0,    0,    0,    0,    0,    0,  478,
      457,  458,  459,  461,  463,  464,  469,    0,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  470,  478,  470,  470,  470,  470,
      470,  470,  470,  470,  470,    0,    0,    0,    0,    0,
        0,    0,    0,  479,  469,  469,  469,  469,  469,  469,
      471,    0,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  472,  479,
      472,  472,  472,  472,  472,  472,  472,  472,  472,    0,

        0,  480,    0,    0,    0,    0,    0,    0,  471,  471,
      471,  471,  471,  471,  473,    0,  473,  473,  473,  473,
      473,  473,  473,  473,  473,  473,  475,  480,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  477,    0,  477,  477,  477,  477,
      477,  477,  477,  477,  477,    0,    0,    0,    0,    0,
      481,  482,  483,  484,  475,  475,  475,  475,  475,  475,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  485,
      476,  476,  476,  476,  476,  476,  481,  482,  483,  484,
      487,  488,  489,  490,  491,  492,  495,  497,  498,  499,

      500,  501,  502,  503,  506,  485,  476,  476,  476,  476,
      476,  476,  508,  509,    0,  522,  487,  488,  489,  490,
      491,  492,  495,  497,  498,  499,  500,  501,  502,  503,
      506,    0,    0,    0,    0,    0,    0,    0,  508,  509,
      512,  522,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  514,    0,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      516,    0,  516,  516,  516,  516,  516,  516,  516,  516,
      516,    0,    0,    0,    0,    0,    0,  523,    0,    0,
      514,  514,  514,  514,  514,  514,  515,  515,  515,  515,

      515,  515,  515,  515,  515,  525,  515,  515,  515,  515,
      515,  515,  518,  523,  518,  518,  518,  518,  518,  518,
      518,  518,  518,    0,    0,    0,    0,    0,    0,    0,
        0,  525,  515,  515,  515,  515,  515,  515,  517,    0,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  520,  528,  520,  520,
      520,  520,  520,  520,  520,  520,  520,    0,    0,    0,
        0,    0,    0,    0,  529,  530,  517,  517,  517,  517,
      517,  517,  519,  528,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,

      529,  530,  531,  535,  536,  537,  538,  539,  540,  541,
      543,  544,  545,    0,  560,    0,    0,    0,    0,    0,
      519,  519,  519,  519,  519,  519,    0,    0,  531,  535,
      536,  537,  538,  539,  540,  541,  543,  544,  545,  550,
      560,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  551,  561,  551,
      551,  551,  551,  551,  551,  551,  551,  551,    0,    0,
        0,    0,    0,    0,    0,    0,  565,  550,  550,  550,
      550,  550,  550,  552,  561,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,

      552,  553,  565,  553,  553,  553,  553,  553,  553,  553,
      553,  553,    0,    0,  567,    0,    0,    0,    0,    0,
        0,  552,  552,  552,  552,  552,  552,  554,    0,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  554,  556,
      567,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  558,    0,  558,
      558,  558,  558,  558,  558,  558,  558,  558,    0,    0,
        0,    0,    0,    0,  568,  569,  570,  556,  556,  556,
      556,  556,  556,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  571,  557,  557,  557,  557,  557,  557,  563,

      568,  569,  570,  573,  574,  563,  576,  577,    0,  590,
        0,    0,    0,    0,    0,    0,    0,    0,  571,  557,
      557,  557,  557,  557,  557,  563,    0,    0,    0,  573,
      574,  563,  576,  577,  580,  590,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  582,    0,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  584,    0,  584,  584,  584,  584,
      584,  584,  584,  584,  584,    0,    0,    0,    0,    0,
        0,  591,    0,    0,  582,  582,  582,  582,  582,  582,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  592,

      583,  583,  583,  583,  583,  583,  586,  591,  586,  586,
      586,  586,  586,  586,  586,  586,  586,    0,    0,    0,
        0,    0,    0,    0,    0,  592,  583,  583,  583,  583,
      583,  583,  585,    0,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      588,  593,  588,  588,  588,  588,  588,  588,  588,  588,
      588,    0,    0,    0,    0,    0,    0,    0,  595,  596,
      585,  585,  585,  585,  585,  585,  587,  593,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  595,  596,  597,  598,  600,  602,

      607,  615,  607,  607,  607,  607,  607,  607,  607,  607,
      607,    0,    0,    0,  587,  587,  587,  587,  587,  587,
        0,    0,  597,  598,  600,  602,  606,  615,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  609,  616,  609,  609,  609,  609,
      609,  609,  609,  609,  609,    0,    0,    0,    0,    0,
        0,    0,    0,  618,  606,  606,  606,  606,  606,  606,
      608,  616,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  610,  618,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,

        0,    0,    0,    0,    0,    0,    0,  621,  608,  608,
      608,  608,  608,  608,  612,    0,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  614,  621,  614,  614,  614,  614,  614,  614,
      614,  614,  614,    0,    0,    0,    0,    0,  622,  623,
      624,  625,  612,  612,  612,  612,  612,  612,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  639,  613,  613,
      613,  613,  613,  613,  622,  623,  624,  625,  630,    0,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
        0,    0,    0,  639,  613,  613,  613,  613,  613,  613,

      632,    0,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  634,    0,
      634,  634,  634,  634,  634,  634,  634,  634,  634,    0,
        0,    0,    0,    0,    0,  640,    0,    0,  632,  632,
      632,  632,  632,  632,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  643,  633,  633,  633,  633,  633,  633,
      636,  640,  636,  636,  636,  636,  636,  636,  636,  636,
      636,    0,    0,    0,    0,    0,    0,    0,    0,  643,
      633,  633,  633,  633,  633,  633,  635,    0,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,

      635,  635,  635,  635,  638,  645,  638,  638,  638,  638,
      638,  638,  638,  638,  638,    0,    0,    0,    0,    0,
        0,    0,  647,    0,  635,  635,  635,  635,  635,  635,
      637,  645,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  647,  653,
        0,  653,  653,  653,  653,  653,  653,  653,  653,  653,
        0,    0,    0,    0,    0,    0,    0,  661,  637,  637,
      637,  637,  637,  637,  652,    0,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  655,  661,  655,  655,  655,  655,  655,  655,

      655,  655,  655,  662,    0,    0,    0,    0,    0,    0,
        0,  667,  652,  652,  652,  652,  652,  652,  654,    0,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  662,
      654,  654,  654,  654,  654,  654,  656,  667,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,    0,    0,
        0,    0,    0,    0,    0,  668,  654,  654,  654,  654,
      654,  654,  658,    0,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      660,  668,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  669,    0,    0,    0,    0,    0,    0,    0,    0,

      658,  658,  658,  658,  658,  658,    0,    0,    0,    0,
        0,    0,    0,  681,    0,    0,  674,  669,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  676,    0,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  681,
      676,  676,  676,  676,  676,  676,  677,  682,  677,  677,
      677,  677,  677,  677,  677,  677,  677,    0,    0,    0,
        0,    0,    0,    0,    0,  689,  676,  676,  676,  676,
      676,  676,  678,  682,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      679,  689,  679,  679,  679,  679,  679,  679,  679,  679,

      679,  698,    0,    0,    0,    0,    0,    0,    0,  699,
      678,  678,  678,  678,  678,  678,  693,    0,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  698,  693,  693,
      693,  693,  693,  693,  694,  699,  694,  694,  694,  694,
      694,  694,  694,  694,  694,    0,  704,    0,  711,    0,
        0,    0,    0,    0,  693,  693,  693,  693,  693,  693,
      695,  713,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  704,  708,  711,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  717,  718,    0,  713,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      717,  718,  742,  742,  742,  742,  743,  743,  743,  743,
      744,  744,  744,  744,  745,    0,  745,  745,  746,  746,
      746,  746,  747,    0,  747,  747,  748,  748,  750,  750,
      751,  751,  752,  752,  753,  753,  754,  754,  755,  755,
      756,  756,  757,  757,  758,  758,  759,  759,  760,  760,
      761,  761,  762,  762,  763,  763,  764,  764,  765,  765,
      766,  766,  767,  767,  768,  768,  769,  769,  770,  770,
      771,  771,  772,  772,  773,  773,  774,  774,  776,  776,
      777,  777,  779,  779,  780,  780,  783,  783,  784,  784,

      786,  786,  789,  789,  790,  790,  791,  791,  793,  793,
      794,  794,  795,  795,  797,  797,  798,  798,  799,  799,
      801,  801,  802,  802,  803,  803,  805,  805,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,

      741,  741,  741
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[87] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
    1, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_ClntParser_stype yylval;
}

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 742 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3829 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
{ return ClntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
{ return ClntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
{ return ClntParser::ADDRESS_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
{ return ClntParser::STRING_KEYWORD_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ return ClntParser::ADDRESS_LIST_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ return ClntParser::NAME_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ return ClntParser::IA_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
{ return ClntParser::TA_; }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ return ClntParser::IAID_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 13:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
{ return ClntParser::LOGLEVEL_; }
	YY_BREAK
case 15:
YY_RULE_SETUP
{ return ClntParser::LOGMODE_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ return ClntParser::LOGNAME_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ return ClntParser::WORKDIR_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
{ return ClntParser::SCRIPTS_DIR_; }
	YY_BREAK
case 19:
YY_RULE_SETUP
{ return ClntParser::NOTIFY_SCRIPTS_; }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ return ClntParser::VALID_TIME_; }
	YY_BREAK
case 22:
YY_RULE_SETUP
{ return ClntParser::REMOTE_AUTOCONF_; }
	YY_BREAK
case 23:
YY_RULE_SETUP
{ return ClntParser::T1_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
{ return ClntParser::T2_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
{ return ClntParser::OPTION_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
{ return ClntParser::DNS_SERVER_;}
	YY_BREAK
case 27:
YY_RULE_SETUP
{ return ClntParser::DOMAIN_;}
	YY_BREAK
case 28:
YY_RULE_SETUP
{ return ClntParser::NTP_SERVER_;}
	YY_BREAK
case 29:
YY_RULE_SETUP
{ return ClntParser::TIME_ZONE_;}
	YY_BREAK
case 30:
YY_RULE_SETUP
{ return ClntParser::SIP_SERVER_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
{ return ClntParser::SIP_DOMAIN_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
{ return ClntParser::FQDN_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ return ClntParser::FQDN_S_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ return ClntParser::NIS_SERVER_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ return ClntParser::NIS_DOMAIN_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ return ClntParser::NISP_SERVER_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
{ return ClntParser::NISP_DOMAIN_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ return ClntParser::LIFETIME_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ return ClntParser::REJECT_SERVERS_;}
	YY_BREAK
case 40:
YY_RULE_SETUP
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 41:
YY_RULE_SETUP
{ return ClntParser::RAPID_COMMIT_;}
	YY_BREAK
case 42:
YY_RULE_SETUP
{ return ClntParser::UNICAST_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
{ return ClntParser::STRICT_RFC_NO_ROUTING_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LL_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LLT_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_EN_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ return ClntParser::VENDOR_SPEC_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ return ClntParser::ANON_INF_REQUEST_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ return ClntParser::INSIST_MODE_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ return ClntParser::INACTIVE_MODE_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ return ClntParser::AUTH_ENABLED_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ return ClntParser::AUTH_ACCEPT_METHODS_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ return ClntParser::DIGEST_NONE_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ return ClntParser::DIGEST_PLAIN_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ return ClntParser::EXPERIMENTAL_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
{ return ClntParser::ADDR_PARAMS_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ return ClntParser::SKIP_CONFIRM_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
{ return ClntParser::DS_LITE_TUNNEL_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
;
	YY_BREAK
case 69:
YY_RULE_SETUP
;
	YY_BREAK
case 70:
YY_RULE_SETUP
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
BEGIN(INITIAL);
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 73:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 74:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 75:
YY_RULE_SETUP
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 76:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 77:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 78:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 79:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return ClntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return ClntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 82:
YY_RULE_SETUP
{
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return ClntParser::DUID_;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
{ 
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::HEXNUMBER_;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
{ 
    if(!sscanf(yytext,"%u",(unsigned int*)&(yylval.ival))) { 
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::INTNUMBER_;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
{return yytext[0];} 
	YY_BREAK
case 86:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 742 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 742 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 741);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

