
#line 3 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 48
#define YY_END_OF_BUFFER 49
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[449] =
    {   0,
        0,    0,    0,    0,    0,    0,   49,   47,   46,   46,
       47,   29,   47,   47,   45,   45,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   33,   33,   48,    0,   41,   29,    0,   41,   31,
       30,   45,    0,    0,   44,    0,   38,   42,   42,   42,
       42,   42,   42,   42,   42,    4,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   20,   21,   42,   42,
       42,   32,   30,   45,    0,    0,   37,   43,   36,   36,
       42,   42,   42,   42,   42,   42,   42,   42,    0,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,

       45,    0,    0,    0,   35,   35,    0,   36,    0,   36,
       42,   42,   42,   42,    0,   42,   42,    0,    0,    0,
        0,   42,   42,   42,   42,   42,   42,   13,   42,   42,
       42,   42,   45,    0,    0,    0,    0,   35,    0,   35,
        0,   36,   36,   36,   36,   42,   42,   42,   42,    0,
       42,    1,    0,    0,    0,    0,    5,    0,   42,   42,
       42,   42,   42,   42,   42,   42,    0,   42,    0,    0,
        0,    0,    0,   35,   35,   35,   35,    0,   36,   36,
       36,    0,   36,   42,   16,   42,    0,   23,    0,    0,
        0,    0,    0,   10,   42,   42,    0,   42,   42,   42,

       42,    0,    0,    0,    0,    0,    0,   35,   35,   35,
        0,   35,    0,    0,   36,   36,   36,   36,    3,   14,
        0,    0,    0,    0,    0,    0,   42,   17,    0,    0,
       11,   12,   42,    0,    0,    0,    0,    0,    0,    0,
        0,   35,   35,   35,   35,    0,   36,   36,   36,    0,
       36,    0,    0,    7,    8,    0,    0,   42,    0,    0,
       42,    0,    0,    9,    0,    0,    0,   35,   35,   35,
        0,   35,   40,   36,   36,   36,   36,    0,    6,    2,
        0,    0,    0,    0,   15,   25,    0,    0,    0,    0,
       39,   35,   35,   35,   35,   36,   36,   36,    0,   36,

       22,   24,    0,    0,    0,    0,    0,    0,    0,   35,
       35,   35,    0,   35,   36,   36,   36,   36,    0,    0,
        0,    0,    0,    0,    0,    0,   35,   35,   35,   35,
       36,   36,   36,    0,   36,    0,    0,   28,    0,    0,
        0,    0,   35,   35,   35,    0,   35,   36,   36,   36,
       36,    0,    0,   26,    0,    0,    0,    0,   35,   35,
       35,   35,   36,   36,   36,    0,   36,    0,    0,   19,
        0,   34,   37,   35,   35,   35,    0,   35,   36,   36,
       36,   36,    0,   27,    0,   34,    0,   35,   35,   35,
       35,   35,   36,   36,   36,    0,   36,    0,   34,   37,

       35,    0,   35,   35,   35,   35,   36,   36,   36,   18,
       34,   35,   35,   35,   35,   36,   36,   36,   35,   35,
        0,   35,   35,   36,   35,   35,   36,   35,   35,    0,
       35,   35,   35,   35,    0,   35,   35,   35,   35,    0,
       35,   35,   35,   35,    0,   35,   35,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    6,    1,
        1,    7,    1,    1,    8,    9,   10,   11,   12,   13,
       14,   14,   14,   14,   14,   14,   14,   15,    1,    1,
        1,    1,    1,    1,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
        1,    1,    1,    1,    1,    1,   16,   17,   18,   19,

       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[42] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        3,    3,    3,    3,    4,    3,    3,    3,    3,    3,
        3,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1
    } ;

static yyconst flex_int16_t yy_base[526] =
    {   0,
        0,    0, 1491, 1490,    0,    0, 1496, 1499, 1499, 1499,
     1491,    0, 1488,   35,   35, 1454, 1477,   66,   38,   41,
       97,   43, 1461,   32, 1459, 1456,  103,  101,  112, 1472,
     1457, 1499, 1476, 1499, 1481, 1499,    0, 1478, 1477, 1499,
        0,  127, 1467,  118, 1499,    0,  140,    0,  144, 1462,
        0, 1449, 1458, 1444, 1449,    0, 1460, 1453, 1466, 1442,
     1437, 1451, 1439,   41, 1440, 1437,    0,    0, 1439, 1439,
     1432, 1499,    0,  165,  155, 1449,  159,    0,  180,  193,
      197, 1430, 1442, 1445, 1452, 1443, 1440, 1449,  109, 1448,
     1431,  128, 1430, 1433, 1416, 1432, 1430, 1429, 1424, 1421,

      208,  221, 1431, 1430,  227,  240,  244,  250,  261,  267,
      271, 1424, 1414, 1406, 1407, 1416, 1419,  266, 1408, 1421,
     1402, 1405, 1414, 1413, 1413, 1413,  102,    0, 1397, 1421,
     1409, 1419,  285, 1411, 1410, 1409,  290,  296,  307,  313,
      319,  325,  338,  344,  357, 1408, 1388, 1402, 1393, 1399,
     1389,    0, 1397, 1386, 1399, 1385, 1499, 1393, 1383, 1378,
     1381, 1401, 1373, 1373, 1373, 1371, 1363, 1395, 1383, 1386,
     1385, 1384,  363,  369,  382,  388,  401,  405,  411, 1383,
      418,  429,  435, 1363,    0, 1361, 1362,    0, 1357, 1374,
     1364, 1370, 1357,    0, 1369, 1369, 1369, 1378, 1350, 1364,

     1363, 1352, 1354, 1356, 1364, 1363,  439,  445, 1362,  452,
      463,  469,  475,  481,  487,  500,  506,  519,    0,    0,
     1339, 1355, 1354, 1353, 1348, 1334, 1351,    0, 1339, 1334,
        0,    0, 1348, 1337, 1341, 1331, 1348, 1253, 1245,  525,
      531,  537,  550,  556,  569,  573,  579, 1227,  586,  597,
      603, 1215, 1202, 1499, 1499, 1199, 1196, 1202, 1169, 1171,
     1163, 1158, 1150, 1499, 1150, 1137,  607,  613, 1130,  620,
      631,  637,  641,  647,  660,  666,  679, 1106, 1499, 1499,
     1098,  203, 1098, 1087,    0, 1499, 1087, 1086, 1073, 1067,
      683,  689,  702,  708,  721,  727, 1054,  734,  745,  751,

     1499, 1499, 1039, 1026, 1015,  996,  981,  994,  988,  757,
      975,  764,  775,  781,  787,  800,  806,  819,  963,  938,
      930,  932,  922,  918,  912,  895,  825,  838,  844,  857,
      863,  888,  870,  881,  887,  877,  843, 1499,  840,  839,
      839,  833,  893,  820,  900,  911,  917,  923,  936,  942,
      955,  794,  796, 1499,  790,  782,  776,  759,  961,  974,
      980,  993,  999,  752, 1006, 1017, 1023,  737,  711, 1499,
      722,  716,    0, 1029,  703, 1036, 1047, 1053, 1059, 1072,
     1078, 1091,  684, 1499,  684,  674,  661,  655, 1097, 1110,
     1116, 1129, 1135,  642, 1142,    0, 1155,  627,  615, 1499,

      608,    0, 1161,  598, 1168, 1181, 1187, 1200,    0, 1499,
      581,  574,  564, 1206, 1219, 1225,  551,    0,  545,  532,
        0, 1232, 1499,    0,  526,  520, 1499,  514,  501,    0,
      495,  482,  476,  470,    0,  464,  447,  440,  430,    0,
      413,  406,  396,  383,    0,  377,  364, 1499, 1246, 1250,
     1254, 1258, 1262, 1266, 1268,  370,  364, 1270,  351, 1272,
     1274,  345, 1276, 1278,  332, 1280, 1282,  326, 1284, 1286,
      320, 1288, 1290,  303, 1292, 1294,  283, 1296, 1298,  274,
     1300, 1302,  257, 1304, 1306,  247, 1308, 1310,  209, 1312,
     1314,  200, 1316, 1318,  187,  184, 1320, 1322,  171, 1324,

     1326,  132,  131, 1328, 1330,   73, 1332,   65,   62, 1334,
     1336, 1338,   60, 1340, 1342, 1344,   41, 1346, 1348, 1350,
       40, 1352, 1354, 1356, 1358
    } ;

static yyconst flex_int16_t yy_def[526] =
    {   0,
      448,    1,  449,  449,  450,  450,  448,  448,  448,  448,
      451,  452,  453,  448,  448,   15,  448,  448,   18,   18,
       18,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,  448,  448,  448,  451,  448,  452,  453,  448,  448,
      454,  448,  455,   42,  448,  456,  457,   21,   18,   49,
       21,   21,   49,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,  448,  454,  448,   74,  458,  459,  456,  448,   79,
       49,   81,   21,   81,   21,   21,   21,   21,  448,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

      448,  101,  460,  461,  448,  105,  448,  448,  462,  108,
       81,   21,   21,  111,  448,   21,   21,  448,  448,  448,
      448,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,  102,  102,  463,  464,  448,  448,  465,  138,
      448,  448,  142,  448,  144,  111,   21,   21,   21,  448,
       21,   21,  448,  448,  448,  448,  448,  448,   21,   21,
       21,   21,   21,   21,   21,   21,  448,   21,  448,  448,
      466,  467,  448,  448,  174,  448,  176,  448,  448,  448,
      448,  468,  181,   21,   21,   21,  448,   21,  448,  448,
      448,  448,  448,   21,   21,   21,  448,   21,   21,   21,

       21,  448,  448,  448,  469,  470,  448,  448,  448,  448,
      471,  210,  448,  448,  448,  215,  448,  217,   21,   21,
      448,  448,  448,  448,  448,  448,   21,   21,  448,  448,
       21,   21,   21,  448,  448,  448,  448,  472,  473,  448,
      448,  448,  242,  448,  244,  448,  448,  448,  448,  474,
      249,  448,  448,  448,  448,  448,  448,   21,  448,  448,
       21,  448,  448,  448,  475,  476,  448,  448,  448,  448,
      477,  270,  448,  448,  274,  448,  276,  448,  448,  448,
      448,  448,  448,  448,   21,  448,  448,  448,  478,  479,
      448,  448,  292,  448,  294,  448,  448,  448,  480,  298,

      448,  448,  448,  448,  448,  448,  448,  481,  482,  448,
      448,  448,  483,  312,  448,  315,  448,  317,  448,  448,
      448,  448,  448,  448,  484,  485,  448,  327,  448,  329,
      448,  448,  448,  486,  333,  448,  448,  448,  448,  448,
      487,  488,  448,  448,  448,  489,  345,  448,  348,  448,
      350,  448,  448,  448,  448,  448,  490,  491,  448,  359,
      448,  361,  448,  448,  448,  492,  365,  448,  448,  448,
      493,  494,  495,  448,  448,  448,  496,  376,  448,  379,
      448,  381,  448,  448,  448,  497,  448,  498,  448,  389,
      448,  391,  448,  448,  448,  499,  395,  448,  500,  448,

      501,  502,  448,  448,  448,  405,  448,  407,  503,  448,
      448,  504,  505,  448,  414,  448,  448,  506,  448,  507,
      508,  448,  448,  509,  510,  511,  448,  448,  512,  513,
      514,  515,  448,  516,  517,  518,  519,  448,  520,  521,
      522,  523,  448,  524,  496,  525,  448,    0,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,

      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448
    } ;

static yyconst flex_int16_t yy_nxt[1541] =
    {   0,
        8,    9,   10,   11,   12,   13,    8,    8,    8,   14,
       15,   16,   16,   16,   17,   18,   19,   19,   20,   19,
       19,   21,   21,   22,   21,   21,   23,   21,   24,   25,
       26,   21,   27,   28,   29,   21,   30,   31,   21,   21,
       21,   40,  442,  437,   41,   42,   42,   42,   42,   43,
       44,   44,   44,   44,   44,   44,   49,   45,   56,   49,
       53,   59,  432,   57,  427,   94,   60,  426,   48,   54,
       55,   48,   95,   46,   48,  424,   49,   49,   49,   49,
       43,   49,   49,   49,   50,   49,   49,   48,   51,   48,
       48,   48,   48,   48,   48,   48,   52,   48,   48,   48,

       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,  448,   48,   48,   48,   48,   48,   48,   63,   48,
       65,  164,   64,   67,   68,  165,  119,   48,   75,   75,
       75,   75,  120,  418,  413,   69,   66,   74,   74,   74,
       74,   43,   75,   75,   75,   75,   75,   75,  123,   45,
       79,   79,   79,   79,   81,   81,   81,   81,  124,   81,
       81,   81,   81,   81,   81,  102,  102,  102,  102,  105,
      105,  105,  105,  409,   48,  101,  101,  101,  101,   43,
      102,  102,  102,  102,  102,  102,  392,   45,  107,  388,
      108,  108,  108,  108,  109,  110,  110,  110,  110,  110,

      110,  448,  382,  110,  110,  110,  110,  111,  111,  111,
      111,  362,  111,  111,  111,  111,  111,  111,  133,  133,
      133,  133,   43,  134,  134,  134,  134,  134,  134,  303,
       45,  134,  134,  134,  134,  137,  304,  138,  138,  138,
      138,  139,  140,  140,  140,  140,  140,  140,  448,  351,
      140,  140,  140,  140,  141,  141,  141,  141,  107,  330,
      142,  142,  142,  142,  109,  143,  143,  143,  143,  143,
      143,  144,  144,  144,  144,  448,  318,  143,  143,  143,
      143,  146,  146,  146,  146,  295,  146,  146,  146,  146,
      146,  146,  153,  154,  155,  133,  133,  133,  133,  448,

      173,  173,  173,  173,  137,  277,  174,  174,  174,  174,
      139,  175,  175,  175,  175,  175,  175,  176,  176,  176,
      176,  448,  245,  175,  175,  175,  175,  178,  218,  141,
      141,  141,  141,  107,  177,  179,  179,  179,  179,  109,
      180,  180,  180,  180,  180,  180,  448,  145,  180,  180,
      180,  180,  107,  106,  181,  181,  181,  181,  182,  183,
      183,  183,  183,  183,  183,  448,   80,  183,  183,  183,
      183,  207,   78,  173,  173,  173,  173,  137,  445,  208,
      208,  208,  208,  139,  209,  209,  209,  209,  209,  209,
      448,  445,  209,  209,  209,  209,  137,  445,  210,  210,

      210,  210,  211,  212,  212,  212,  212,  212,  212,  448,
      440,  212,  212,  212,  212,  213,  213,  213,  213,  107,
      445,  214,  214,  214,  214,  109,  107,  440,  215,  215,
      215,  215,  182,  216,  216,  216,  216,  216,  216,  217,
      217,  217,  217,  448,  440,  216,  216,  216,  216,  240,
      240,  240,  240,  137,  435,  241,  241,  241,  241,  139,
      137,  440,  242,  242,  242,  242,  211,  243,  243,  243,
      243,  243,  243,  244,  244,  244,  244,  448,  435,  243,
      243,  243,  243,  246,  435,  213,  213,  213,  213,  107,
      430,  214,  214,  214,  214,  107,  435,  247,  247,  247,

      247,  182,  248,  248,  248,  248,  248,  248,  448,  430,
      248,  248,  248,  248,  107,  430,  249,  249,  249,  249,
      250,  251,  251,  251,  251,  251,  251,  448,  421,  251,
      251,  251,  251,  267,  430,  240,  240,  240,  240,  137,
      421,  241,  241,  241,  241,  137,  421,  268,  268,  268,
      268,  211,  269,  269,  269,  269,  269,  269,  448,  402,
      269,  269,  269,  269,  137,  396,  270,  270,  270,  270,
      271,  272,  272,  272,  272,  272,  272,  448,  421,  272,
      272,  272,  272,  273,  273,  273,  273,  107,  402,  214,
      214,  214,  214,  182,  107,  387,  274,  274,  274,  274,

      250,  275,  275,  275,  275,  275,  275,  276,  276,  276,
      276,  448,  377,  275,  275,  275,  275,  291,  291,  291,
      291,  137,  402,  241,  241,  241,  241,  211,  137,  387,
      292,  292,  292,  292,  271,  293,  293,  293,  293,  293,
      293,  294,  294,  294,  294,  448,  410,  293,  293,  293,
      293,  273,  273,  273,  273,  107,  366,  296,  296,  296,
      296,  250,  297,  297,  297,  297,  297,  297,  448,  402,
      297,  297,  297,  297,  107,  400,  298,  298,  298,  298,
      299,  300,  300,  300,  300,  300,  300,  448,  387,  300,
      300,  300,  300,  291,  291,  291,  291,  137,  358,  310,

      310,  310,  310,  271,  311,  311,  311,  311,  311,  311,
      448,  398,  311,  311,  311,  311,  137,  346,  312,  312,
      312,  312,  313,  314,  314,  314,  314,  314,  314,  448,
      387,  314,  314,  314,  314,  107,  358,  214,  214,  214,
      214,  250,  107,  384,  315,  315,  315,  315,  299,  316,
      316,  316,  316,  316,  316,  317,  317,  317,  317,  448,
      383,  316,  316,  316,  316,  137,  334,  241,  241,  241,
      241,  271,  137,  373,  327,  327,  327,  327,  313,  328,
      328,  328,  328,  328,  328,  329,  329,  329,  329,  448,
      358,  328,  328,  328,  328,  107,  326,  331,  331,  331,

      331,  299,  332,  332,  332,  332,  332,  332,  448,  370,
      332,  332,  332,  332,  107,  369,  333,  333,  333,  333,
      334,  335,  335,  335,  335,  335,  335,  448,  368,  335,
      335,  335,  335,  137,  313,  343,  343,  343,  343,  313,
      344,  344,  344,  344,  344,  344,  448,  358,  344,  344,
      344,  344,  137,  326,  345,  345,  345,  345,  346,  347,
      347,  347,  347,  347,  347,  448,  355,  347,  347,  347,
      347,  107,  354,  214,  214,  214,  214,  299,  107,  353,
      348,  348,  348,  348,  334,  349,  349,  349,  349,  349,
      349,  350,  350,  350,  350,  448,  352,  349,  349,  349,

      349,  137,  299,  241,  241,  241,  241,  313,  137,   77,
      359,  359,  359,  359,  346,  360,  360,  360,  360,  360,
      360,  361,  361,  361,  361,  448,  326,  360,  360,  360,
      360,  107,  290,  363,  363,  363,  363,  334,  364,  364,
      364,  364,  364,  364,  448,  340,  364,  364,  364,  364,
      107,  339,  365,  365,  365,  365,  366,  367,  367,  367,
      367,  367,  367,  448,  338,  367,  367,  367,  367,  137,
      337,  374,  374,  374,  374,  346,  375,  375,  375,  375,
      375,  375,  448,  336,  375,  375,  375,  375,  137,  271,
      376,  376,  376,  376,  377,  378,  378,  378,  378,  378,

      378,  448,  326,  378,  378,  378,  378,  107,  290,  214,
      214,  214,  214,  334,  107,  323,  379,  379,  379,  379,
      366,  380,  380,  380,  380,  380,  380,  381,  381,  381,
      381,  448,  322,  380,  380,  380,  380,  137,  321,  241,
      241,  241,  241,  346,  137,  320,  389,  389,  389,  389,
      377,  390,  390,  390,  390,  390,  390,  391,  391,  391,
      391,  448,  319,  390,  390,  390,  390,  107,  250,  393,
      393,  393,  393,  366,  394,  394,  394,  394,  394,  394,
      448,   77,  394,  394,  394,  394,  107,  290,  395,  395,
      395,  395,  396,  397,  397,  397,  397,  397,  397,  448,

      239,  397,  397,  397,  397,  137,  307,  403,  403,  403,
      403,  377,  404,  404,  404,  404,  404,  404,  448,  306,
      404,  404,  404,  404,  137,  305,  405,  405,  405,  405,
      302,  406,  406,  406,  406,  406,  406,  448,  301,  406,
      406,  406,  406,  107,  211,  214,  214,  214,  214,  366,
      107,  290,  407,  407,  407,  407,  396,  408,  408,  408,
      408,  408,  408,  448,  239,  408,  408,  408,  408,  137,
      287,  241,  241,  241,  241,  377,  137,  286,  414,  414,
      414,  414,  285,  415,  415,  415,  415,  415,  415,  448,
      284,  415,  415,  415,  415,  107,  283,  416,  416,  416,

      416,  396,  417,  417,  417,  417,  417,  417,  448,  282,
      417,  417,  417,  417,  137,  281,  422,  422,  422,  422,
      280,  423,  423,  423,  423,  423,  423,  448,  279,  423,
      423,  423,  423,  107,  278,  214,  214,  214,  214,  396,
      137,  182,  241,  241,  241,  241,   32,   32,   32,   32,
       34,   34,   34,   34,   35,   35,   35,   35,   37,   77,
       37,   37,   38,   38,   38,   38,   73,  239,   73,   73,
       76,   76,  103,  103,  135,  135,  136,  136,  170,  170,
      171,  171,  205,  205,  206,  206,  237,  237,  238,  238,
      265,  265,  266,  266,  288,  288,  289,  289,  308,  308,

      309,  309,  324,  324,  325,  325,  341,  341,  342,  342,
      356,  356,  357,  357,  371,  371,  372,  372,  385,  385,
      386,  386,  399,  399,  401,  401,  411,  411,  412,  412,
      419,  419,  420,  420,  425,  425,  428,  428,  429,  429,
      431,  431,  433,  433,  434,  434,  436,  436,  438,  438,
      439,  439,  441,  441,  443,  443,  444,  444,  446,  446,
      447,  447,  172,  264,  263,  262,  261,  260,  259,  258,
      257,  256,  255,  254,  253,  252,  139,  239,  172,  236,
      235,  234,  233,  232,  231,  230,  229,  228,  227,  226,
      225,  224,  223,  222,  221,  220,  219,  109,   77,  172,

      104,  204,  203,  202,  201,  200,  199,  198,  197,  196,
      195,  194,  193,  192,  191,  190,  189,  188,  187,  186,
      185,  184,  448,  172,  104,  448,  169,  168,  167,  166,
      163,  162,  161,  160,  159,  158,  157,  156,  152,  151,
      150,  149,  148,  147,   77,  104,  132,  131,  130,  129,
      128,  127,  126,  125,  122,  121,  118,  117,  116,  115,
      114,  113,  112,  104,  100,   99,   98,   97,   96,   93,
       92,   91,   90,   89,   88,   87,   86,   85,   84,   83,
       82,   77,   38,   39,   36,   72,   71,   70,   62,   61,
       58,   47,  448,   39,   36,  448,   33,   33,    7,  448,

      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448
    } ;

static yyconst flex_int16_t yy_chk[1541] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   14,  521,  517,   14,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   19,   15,   22,   20,
       20,   24,  513,   22,  509,   64,   24,  508,   19,   20,
       20,   20,   64,   15,   18,  506,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   27,   21,
       28,  127,   27,   29,   29,  127,   89,   21,   44,   44,
       44,   44,   89,  503,  502,   29,   28,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   92,   42,
       47,   47,   47,   47,   49,   49,   49,   49,   92,   49,
       49,   49,   49,   49,   49,   75,   75,   75,   75,   77,
       77,   77,   77,  499,   49,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,  496,   74,   79,  495,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       79,   80,  492,   80,   80,   80,   80,   81,   81,   81,
       81,  489,   81,   81,   81,   81,   81,   81,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  282,
      101,  102,  102,  102,  102,  105,  282,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  106,  486,
      106,  106,  106,  106,  107,  107,  107,  107,  108,  483,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  109,  109,  109,  109,  110,  480,  110,  110,  110,
      110,  111,  111,  111,  111,  477,  111,  111,  111,  111,
      111,  111,  118,  118,  118,  133,  133,  133,  133,  133,

      137,  137,  137,  137,  138,  474,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  139,  139,  139,
      139,  140,  471,  140,  140,  140,  140,  141,  468,  141,
      141,  141,  141,  142,  465,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  143,  462,  143,  143,
      143,  143,  144,  459,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  145,  457,  145,  145,  145,
      145,  173,  456,  173,  173,  173,  173,  174,  447,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      175,  446,  175,  175,  175,  175,  176,  444,  176,  176,

      176,  176,  176,  176,  176,  176,  176,  176,  176,  177,
      443,  177,  177,  177,  177,  178,  178,  178,  178,  179,
      442,  179,  179,  179,  179,  179,  181,  441,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  182,
      182,  182,  182,  183,  439,  183,  183,  183,  183,  207,
      207,  207,  207,  208,  438,  208,  208,  208,  208,  208,
      210,  437,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  211,  211,  211,  211,  212,  436,  212,
      212,  212,  212,  213,  434,  213,  213,  213,  213,  214,
      433,  214,  214,  214,  214,  215,  432,  215,  215,  215,

      215,  215,  215,  215,  215,  215,  215,  215,  216,  431,
      216,  216,  216,  216,  217,  429,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  218,  428,  218,
      218,  218,  218,  240,  426,  240,  240,  240,  240,  241,
      425,  241,  241,  241,  241,  242,  420,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  243,  419,
      243,  243,  243,  243,  244,  417,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  245,  413,  245,
      245,  245,  245,  246,  246,  246,  246,  247,  412,  247,
      247,  247,  247,  247,  249,  411,  249,  249,  249,  249,

      249,  249,  249,  249,  249,  249,  249,  250,  250,  250,
      250,  251,  404,  251,  251,  251,  251,  267,  267,  267,
      267,  268,  401,  268,  268,  268,  268,  268,  270,  399,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  271,  271,  271,  271,  272,  398,  272,  272,  272,
      272,  273,  273,  273,  273,  274,  394,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  275,  388,
      275,  275,  275,  275,  276,  387,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  277,  386,  277,
      277,  277,  277,  291,  291,  291,  291,  292,  385,  292,

      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      293,  383,  293,  293,  293,  293,  294,  375,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  295,
      372,  295,  295,  295,  295,  296,  371,  296,  296,  296,
      296,  296,  298,  369,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  299,  299,  299,  299,  300,
      368,  300,  300,  300,  300,  310,  364,  310,  310,  310,
      310,  310,  312,  358,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  313,  313,  313,  313,  314,
      357,  314,  314,  314,  314,  315,  356,  315,  315,  315,

      315,  315,  315,  315,  315,  315,  315,  315,  316,  355,
      316,  316,  316,  316,  317,  353,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  318,  352,  318,
      318,  318,  318,  327,  344,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  328,  342,  328,  328,
      328,  328,  329,  341,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  330,  340,  330,  330,  330,
      330,  331,  339,  331,  331,  331,  331,  331,  333,  337,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  334,  334,  334,  334,  335,  336,  335,  335,  335,

      335,  343,  332,  343,  343,  343,  343,  343,  345,  326,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  346,  346,  346,  346,  347,  325,  347,  347,  347,
      347,  348,  324,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  349,  323,  349,  349,  349,  349,
      350,  322,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  351,  321,  351,  351,  351,  351,  359,
      320,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  360,  319,  360,  360,  360,  360,  361,  311,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,

      361,  362,  309,  362,  362,  362,  362,  363,  308,  363,
      363,  363,  363,  363,  365,  307,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  366,  366,  366,
      366,  367,  306,  367,  367,  367,  367,  374,  305,  374,
      374,  374,  374,  374,  376,  304,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  377,  377,  377,
      377,  378,  303,  378,  378,  378,  378,  379,  297,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      380,  290,  380,  380,  380,  380,  381,  289,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  382,

      288,  382,  382,  382,  382,  389,  287,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  390,  284,
      390,  390,  390,  390,  391,  283,  391,  391,  391,  391,
      281,  391,  391,  391,  391,  391,  391,  392,  278,  392,
      392,  392,  392,  393,  269,  393,  393,  393,  393,  393,
      395,  266,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  397,  265,  397,  397,  397,  397,  403,
      263,  403,  403,  403,  403,  403,  405,  262,  405,  405,
      405,  405,  261,  405,  405,  405,  405,  405,  405,  406,
      260,  406,  406,  406,  406,  407,  259,  407,  407,  407,

      407,  407,  407,  407,  407,  407,  407,  407,  408,  258,
      408,  408,  408,  408,  414,  257,  414,  414,  414,  414,
      256,  414,  414,  414,  414,  414,  414,  415,  253,  415,
      415,  415,  415,  416,  252,  416,  416,  416,  416,  416,
      422,  248,  422,  422,  422,  422,  449,  449,  449,  449,
      450,  450,  450,  450,  451,  451,  451,  451,  452,  239,
      452,  452,  453,  453,  453,  453,  454,  238,  454,  454,
      455,  455,  458,  458,  460,  460,  461,  461,  463,  463,
      464,  464,  466,  466,  467,  467,  469,  469,  470,  470,
      472,  472,  473,  473,  475,  475,  476,  476,  478,  478,

      479,  479,  481,  481,  482,  482,  484,  484,  485,  485,
      487,  487,  488,  488,  490,  490,  491,  491,  493,  493,
      494,  494,  497,  497,  498,  498,  500,  500,  501,  501,
      504,  504,  505,  505,  507,  507,  510,  510,  511,  511,
      512,  512,  514,  514,  515,  515,  516,  516,  518,  518,
      519,  519,  520,  520,  522,  522,  523,  523,  524,  524,
      525,  525,  237,  236,  235,  234,  233,  230,  229,  227,
      226,  225,  224,  223,  222,  221,  209,  206,  205,  204,
      203,  202,  201,  200,  199,  198,  197,  196,  195,  193,
      192,  191,  190,  189,  187,  186,  184,  180,  172,  171,

      170,  169,  168,  167,  166,  165,  164,  163,  162,  161,
      160,  159,  158,  156,  155,  154,  153,  151,  150,  149,
      148,  147,  146,  136,  135,  134,  132,  131,  130,  129,
      126,  125,  124,  123,  122,  121,  120,  119,  117,  116,
      115,  114,  113,  112,  104,  103,  100,   99,   98,   97,
       96,   95,   94,   93,   91,   90,   88,   87,   86,   85,
       84,   83,   82,   76,   71,   70,   69,   66,   65,   63,
       62,   61,   60,   59,   58,   57,   55,   54,   53,   52,
       50,   43,   39,   38,   35,   33,   31,   30,   26,   25,
       23,   17,   16,   13,   11,    7,    4,    3,  448,  448,

      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[49] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 0, 0, 0, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
/* <Linux> */
/* </Linux> */
#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  unsigned analyzeBigPart(char* bigPart, unsigned length, char *dst);
  int decodeSmallPart(char *src, char* dst,int length);
  void decodeIntPart(char *src, char *dst);
  void resetAddress(char *tab);
  yy_clntParser_stype yylval;
};

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( (yy_init) )
		{
		(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 449 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1499 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{return clntParser::IFACE_;}
	YY_BREAK
case 2:
YY_RULE_SETUP
{return clntParser::NO_CONFIG_;}
	YY_BREAK
case 3:
YY_RULE_SETUP
{return clntParser::ADDRES_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
{return clntParser::IA_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
{return clntParser::NOIA_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
{return clntParser::LOGLEVEL_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
{return clntParser::LOGMODE_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
{return clntParser::LOGNAME_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{return clntParser::WORKDIR_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
{return clntParser::OPTION_; }
	YY_BREAK
    //KEYWORDS FOR OPTIONS
  // [-|REQUEST|REQUIRE] OptionName [SEND|DEFAULT|SUPERSEDE|-] Value
  // [APPEND|PREPEND] OptionName Value
  
  //REQUEST - only request of option from a server - messages without will be
  //                    accepted (default)

case 11:
YY_RULE_SETUP
{return clntParser::REQUEST_;}     
	YY_BREAK
  //REQUIRE - messages from server must include this option, otherwise its 
  //                    message will be discarded by client

case 12:
YY_RULE_SETUP
{return clntParser::REQUIRE_;} 
	YY_BREAK
    //SEND -    only hint of option's value sent to server - if server dosen't 
    //              include it nothing happens(default)

case 13:
YY_RULE_SETUP
{return clntParser::SEND_;}                                 
	YY_BREAK
  //DEFAULT - default value of option. If server dosen't include this option 
  //                    this default value should be used

case 14:
YY_RULE_SETUP
{return clntParser::DEFAULT_;} 
	YY_BREAK
  //SUPERSEDE - whatever server returns overwrite returned value

case 15:
YY_RULE_SETUP
{return clntParser::SUPERSEDE_;} 
	YY_BREAK
  //APPEND - for options which can have multiple values, ordered in sequence
    //                 e.g. list of DNS servers, orders append list of options at the
    //               end of those returned by server

case 16:
YY_RULE_SETUP
{return clntParser::APPEND_;} 
	YY_BREAK
  //PREPPEND - for options which can have multiple values, ordered in sequence
  //                 e.g. list of DNS servers, orders append list of options at the
    //               beginning of those returned by server

case 17:
YY_RULE_SETUP
{return clntParser::PREPEND_;}  
	YY_BREAK
    //OPTIONS NAMES

case 18:
YY_RULE_SETUP
{return clntParser::PREF_TIME_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
{return clntParser::VALID_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
{return clntParser::T1_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
{return clntParser::T2_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
{return clntParser::DNS_SERVER_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
{return clntParser::DOMAIN_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
{return clntParser::NTP_SERVER_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
{return clntParser::TIME_ZONE_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
{ return clntParser::REJECT_SERVERS_;}
	YY_BREAK
case 27:
YY_RULE_SETUP
{ return clntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 28:
YY_RULE_SETUP
{ return clntParser::RAPID_COMMIT_;}
	YY_BREAK
 //COMMENTS

case 29:
YY_RULE_SETUP
;
	YY_BREAK
case 30:
YY_RULE_SETUP
;
	YY_BREAK
case 31:
YY_RULE_SETUP
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
BEGIN(INITIAL);
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 34:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
	YYABORT; 
    } else {
	return clntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 35:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
	YYABORT; 
    } else {
	return clntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 36:
YY_RULE_SETUP
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
	YYABORT; 
    } else {
        return clntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 37:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
	YYABORT; 
    } else {
        return clntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 38:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
	YYABORT; 
    } else {
        return clntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 39:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
	YYABORT; 
    } else {
	return clntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 40:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
	YYABORT; 
    } else {
	return clntParser::IPV6ADDR_;
    }
}
	YY_BREAK
  //STRING (interface identifier,dns server etc.)
  //FIXME: Remember to free memory in parser    

case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
        return clntParser::STRING_;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
{
    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return clntParser::STRING_;
}
	YY_BREAK
  //FIXME: Remember to free memory in parser
  //DUID

case 43:
YY_RULE_SETUP
{
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Error) << "DUID parsing failed." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return clntParser::DUID_;
}
	YY_BREAK
    //HEXADECIMAL NUMBER (interface id, option's values etc.)

case 44:
YY_RULE_SETUP
{
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival)))
      { YYABORT; }
    return clntParser::HEXNUMBER_;
}
	YY_BREAK
    //DECIMAL NUMBER (as for HEXNUMBER)

case 45:
YY_RULE_SETUP
{ 
    //FIXME:Check if number appropriate
    if(!sscanf(yytext,"%u",&(yylval.ival)))
      { YYABORT; }
    return clntParser::INTNUMBER_;
}
	YY_BREAK
    //WHITE CHARS should be omitted

case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
; 
	YY_BREAK
    //OTHER CHARS are direclty passed to parser

case 47:
YY_RULE_SETUP
{return yytext[0];}
	YY_BREAK
    // place your Lex rules here

case 48:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 449 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 449 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 448);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
    	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
    	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef yytext_ptr
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
#endif

/////////////////////////////////////////////////////////////////////////////
// programs section

 /*void clntLexer::resetAddress(char *tab)
 {
  int i;
  for (i=0;i<16;i++) tab[i]=0;
 }

 void clntLexer::decodeIntPart(char *src, char *dst)
 {
  
  int i,obyte;
  int ipos=0;
    for (i=0;i<4;i++)
    {
      obyte=src[ipos]-'0';
      while((src[++ipos]!='.')&&(ipos<strlen(src)))
      {
        obyte=obyte*10+src[ipos]-'0';
        if (obyte>255) { YYABORT; }
      }
      Address[12+i]=obyte;
      ipos++;
    }
 }

 int clntLexer::decodeSmallPart(char *src, char* dst,int length)
 {
  int int16=0;
  int i;
  if (length>4)
    { YYABORT; }//there is too many digits abort and raise exception
  for (i=0; i<length; i++) 
  {
    if (!isxdigit(src[i])) 
      return 0; //or raise exeception
    else
      if (isalpha(src[i]))
        int16=(int16<<4)+toupper(src[i])-55;
      else

        int16=(int16<<4)+src[i]-48;
  }
  dst[1]=*((char*)(&int16));
  dst[0]=*(((char*)(&int16))+1);
  return 1;
 }

 unsigned clntLexer::analyzeBigPart(char* bigPart, unsigned length, char *dst)
 {
  unsigned srcStart,dstStart,pos;
  srcStart=pos=0;
  dstStart=0;
  resetAddress(dst);
  do
  {
    //extracting part of string to next ':' sign or its end
    while((pos<length)&&(bigPart[pos]!=':')) pos++;
    //decode this part to binary form
    decodeSmallPart(bigPart+srcStart,dst+dstStart,pos-srcStart);
    //bigPart[pos]!=':'?(pos-srcStart-1):
    //next two bytes found
    dstStart+=2;
    //omission of : sign    
    srcStart=++pos;
  }while(pos<=length);
  return (dstStart)>>1;
 }
*/

