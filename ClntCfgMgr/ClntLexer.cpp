#line 2 "ClntLexer.cpp"

#line 4 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 60
#define YY_END_OF_BUFFER 61
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[537] =
    {   0,
        1,    1,    0,    0,    0,    0,   61,   59,    2,    1,
        1,   59,   42,   59,   59,   58,   58,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   46,   46,   60,    1,    1,    1,
        0,   54,   42,    0,   54,   44,   43,   58,    0,    0,
       57,    0,   51,   55,   55,   55,   55,   55,   55,   55,
       55,    6,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   17,   18,    7,   55,   55,   55,
       55,   45,   43,   58,    0,    0,   50,   56,   49,   49,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,

       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   58,    0,    0,    0,   48,   48,
        0,   49,    0,   49,   55,   55,   55,   55,   55,   26,
        8,   55,   55,   55,    0,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       58,    0,    0,    0,    0,   48,    0,   48,    0,   49,
       49,   49,   49,   55,   55,   55,   55,   55,    3,   55,
       55,   55,   55,    0,   55,   55,   55,    9,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,    0,    0,    0,    0,   48,   48,   48,   48,

        0,   49,   49,   49,    0,   49,   55,   55,   21,   55,
       55,   55,   55,   55,   55,   55,    0,    0,   55,   55,
       55,   55,   19,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,    0,    0,    0,   48,   48,
       48,    0,   48,    0,    0,   49,   49,   49,   49,    5,
       55,   41,   39,   55,   55,   55,   55,   55,    0,    0,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   35,   55,   55,    0,    0,    0,    0,
        0,   48,   48,   48,   48,    0,   49,   49,   49,    0,
       49,   55,   40,   55,   31,   55,   12,   13,    0,    0,

       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   14,    0,    0,    0,   48,   48,
       48,    0,   48,   53,   49,   49,   49,   49,   55,   38,
       11,    0,    0,   55,   55,    4,   55,   55,   55,   55,
       55,   55,   55,   10,   55,   23,   55,    0,    0,    0,
       52,   48,   48,   48,   48,   49,   49,   49,    0,   49,
       20,    0,    0,   28,   27,   22,   55,   55,   55,   55,
       55,   25,   24,   55,   55,    0,    0,   48,   48,   48,
        0,   48,   49,   49,   49,   49,   30,   29,   55,   55,
       55,   55,   55,   55,   55,    0,    0,    0,   48,   48,

       48,   48,   49,   49,   49,    0,   49,   55,   55,   55,
       34,   55,   55,   55,    0,    0,   48,   48,   48,    0,
       48,   49,   49,   49,   49,   55,   55,   55,   32,   55,
       55,    0,    0,    0,   48,   48,   48,   48,   49,   49,
       49,    0,   49,   55,   55,   55,   55,   16,    0,   47,
       50,   48,   48,   48,    0,   48,   49,   49,   49,   49,
       55,   33,   55,   55,    0,   47,    0,   48,   48,   48,
       48,   48,   49,   49,   49,    0,   49,   55,   55,   55,
       47,   50,   48,    0,   48,   48,   48,   48,   49,   49,
       49,   15,   37,   55,   47,   48,   48,   48,   48,   49,

       49,   49,   55,   48,   48,    0,   48,   48,   49,   55,
       48,   48,   49,   55,   48,   48,    0,   36,   48,   48,
       48,   48,    0,   48,   48,   48,   48,    0,   48,   48,
       48,   48,    0,   48,   48,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   16,   16,   16,   16,   16,   16,   17,    1,    1,
        1,    1,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
        1,    1,    1,    1,    1,    1,   18,   19,   20,   21,

       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[44] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        3,    1,    4,    4,    4,    4,    5,    4,    4,    4,
        4,    4,    4,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[616] =
    {   0,
        0,    0, 1823, 1822,    0,    0, 1829, 1832, 1832,   41,
       43, 1823,    0, 1820,   40,   40, 1785, 1808,   69,   82,
       35, 1790, 1806,   51,   89,   91,   47,   58,   54,   92,
       96,   95,   32,   99, 1832, 1810, 1832,   74,  116,  121,
     1816, 1832,    0, 1813, 1812, 1832,    0,  119, 1801,  132,
     1832,    0,  136, 1800,  140, 1795, 1798,   34,  113,  140,
      147,  148,  152,  150,  154,  155,  165,  159,  160,  162,
      163,  166,  168,  169, 1797, 1796, 1795,  164,  172,  171,
      173, 1832,    0,  196,  209, 1794,  213,    0,  219,  232,
      236, 1775,  185,  188,  182,  236,  243,  245,  244,  253,

      259,  254,  262,  256,  258,  260,  261,  274,  268,  270,
      271,  272,  273,  203,  293,  287, 1792, 1791,  308,  321,
      325,  331,  342,  348,  352,  359,  281,  278,  367, 1790,
     1789,  361,  343,  362, 1795,  365,  368,  370,  372,  373,
      377,  381,  277,  389,  387,  394,  402,  378,  396,  405,
      413, 1787, 1786, 1785,  418,  424,  435,  441,  447,  453,
      466,  472,  485, 1784,  380,  401,  390,  480, 1783,  486,
      488,  487,  489,  487,  494,  496,  497, 1782,  498,  499,
      504,  505,  514,  508,  510,  512,  407,  515,  326,  442,
      523,  520, 1781, 1780, 1779,  540,  546,  559,  565,  578,

      534,  584, 1778,  591,  602,  608,  448,  603, 1777,  527,
      608,  554,  303,  609,  610,  560, 1761, 1770,  611,  612,
      613,  615, 1774,  521,  623,  622,  634,  626,  617,  632,
      636,  628,  618,  640,  641, 1773, 1772,  648,  657, 1771,
      664,  675,  681,  687,  693,  699,  712,  718,  731, 1770,
      713, 1769,  726,  731,  732,  733,  734,  736, 1755, 1749,
      518,  740,  742,  743,  744,  745,  752,  688,  648,  750,
      754,  676,  755, 1766,  757,  753, 1765, 1764, 1763,  762,
      780,  786,  799,  805,  818,  822,  828, 1762,  835,  846,
      852,  763, 1761,  770, 1760,  847, 1759, 1758, 1756, 1734,

      852,  853,  823,  855,  863,  857,  781,  864,  865,  866,
      854,  870,  867,  875, 1755, 1754, 1753,  881,  888, 1752,
      895,  906,  912,  916,  922,  935,  941,  954,  936, 1751,
     1750, 1740, 1743,  949,  955, 1747,  956,  957,  958,  800,
      959,  961,  960, 1746,  962, 1745,  966, 1744, 1743, 1742,
      983,  989, 1002, 1008, 1021, 1027, 1741, 1034, 1045, 1051,
     1740, 1725, 1720, 1737, 1736, 1735, 1046,  967, 1051, 1052,
      868, 1734, 1733, 1029,  964, 1732, 1731, 1066, 1730, 1073,
     1084, 1090, 1096, 1109, 1115, 1128, 1832, 1832,  997, 1110,
     1123, 1129, 1053, 1054, 1131, 1729, 1728, 1727, 1156, 1138,

     1169, 1145, 1182, 1726, 1189, 1149, 1202, 1133, 1184, 1202,
     1725, 1197, 1204,  917, 1724, 1723, 1211, 1722, 1226, 1237,
     1243, 1249, 1262, 1268, 1281, 1218, 1212, 1263, 1721, 1221,
     1276, 1720, 1719, 1718, 1290, 1303, 1309, 1322, 1328, 1717,
     1335, 1346, 1352, 1347, 1352, 1353, 1354, 1716, 1715, 1714,
        0, 1361, 1713, 1379, 1367, 1392, 1398, 1411, 1417, 1430,
     1091, 1712, 1425, 1430, 1711, 1710, 1709, 1708, 1452, 1437,
     1465, 1445, 1478, 1707, 1485,    0, 1498, 1369, 1493, 1480,
     1706, 1832, 1705,    0, 1506, 1704, 1514, 1527, 1533, 1546,
        0, 1703, 1607, 1367, 1594, 1573, 1566, 1552, 1565, 1571,

     1560,    0, 1438, 1552, 1547,    0, 1578, 1832,    0, 1514,
     1541, 1522, 1832, 1323, 1509, 1499,    0, 1498, 1473, 1465,
     1460, 1437,    0, 1432, 1412, 1406, 1393,    0, 1371, 1368,
     1317, 1304,    0, 1298, 1285, 1832, 1594, 1599, 1604, 1609,
     1614, 1617, 1622, 1624, 1295, 1270, 1626, 1257, 1628, 1630,
     1229, 1632, 1634, 1226, 1636, 1638, 1190, 1640, 1642, 1177,
     1644, 1646, 1164, 1648, 1650, 1098, 1652, 1654, 1072, 1656,
     1658, 1070, 1660, 1662, 1029, 1664, 1666,  981, 1668, 1670,
      920, 1672, 1674,  896,  777, 1676, 1678,  695, 1680, 1682,
      672,  655, 1684, 1686,  599, 1688,  449,  416, 1690, 1692,

     1694,  240, 1696, 1698, 1700,  203, 1702, 1704, 1706,  123,
     1708, 1710, 1712,   75, 1714
    } ;

static yyconst flex_int16_t yy_def[616] =
    {   0,
      536,    1,  537,  537,  538,  538,  536,  536,  536,  536,
      536,  539,  540,  541,  536,  536,   16,  536,  542,  542,
       20,   20,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  536,  536,  536,  536,  536,  536,
      539,  536,  540,  541,  536,  536,  543,  536,  544,   48,
      536,  545,  546,  542,   20,   55,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  536,  543,  536,   84,  547,  548,  545,  536,   89,
       55,   91,  542,  542,  542,  542,  542,  542,  542,  542,

      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  536,  115,  549,  550,  536,  119,
      536,  536,  551,  122,   91,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  536,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      116,  116,  552,  553,  536,  536,  554,  156,  536,  536,
      160,  536,  162,  125,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  536,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  536,  555,  556,  536,  536,  197,  536,  199,

      536,  536,  536,  536,  557,  204,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  536,  536,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  558,  559,  536,  536,  536,
      536,  560,  241,  536,  536,  536,  246,  536,  248,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  536,  536,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  536,  561,  562,  536,
      536,  536,  282,  536,  284,  536,  536,  536,  536,  563,
      289,  542,  542,  542,  542,  542,  542,  542,  536,  536,

      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  564,  565,  536,  536,  536,
      536,  566,  321,  536,  536,  325,  536,  327,  542,  542,
      542,  536,  536,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  536,  567,  568,
      536,  536,  352,  536,  354,  536,  536,  536,  569,  358,
      542,  536,  536,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  570,  571,  536,  536,  536,
      572,  380,  536,  383,  536,  385,  536,  536,  542,  542,
      542,  542,  542,  542,  542,  536,  573,  574,  536,  399,

      536,  401,  536,  536,  536,  575,  405,  542,  542,  542,
      542,  542,  542,  542,  576,  577,  536,  536,  536,  578,
      419,  536,  422,  536,  424,  542,  542,  542,  542,  542,
      542,  536,  579,  580,  536,  435,  536,  437,  536,  536,
      536,  581,  441,  542,  542,  542,  542,  542,  582,  583,
      584,  536,  536,  536,  585,  454,  536,  457,  536,  459,
      542,  542,  542,  542,  536,  586,  536,  587,  536,  469,
      536,  471,  536,  536,  536,  588,  475,  542,  542,  542,
      589,  536,  590,  591,  536,  536,  536,  487,  536,  489,
      592,  542,  542,  542,  536,  593,  594,  536,  498,  536,

      536,  595,  542,  536,  596,  597,  536,  536,  598,  542,
      599,  600,  536,  542,  536,  601,  602,  542,  603,  604,
      536,  605,  606,  607,  608,  536,  609,  610,  611,  612,
      536,  613,  614,  615,  536,    0,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,

      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536
    } ;

static yyconst flex_int16_t yy_nxt[1876] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   18,   19,   20,   20,
       21,   20,   22,   23,   23,   24,   23,   23,   25,   23,
       26,   27,   28,   23,   29,   30,   31,   32,   33,   34,
       23,   23,   23,   38,   39,   40,   39,   46,  536,   80,
      536,   47,   48,   48,   48,   48,   49,   50,   50,   50,
       50,   50,   50,  536,   51,   58,   59,  536,   62,   93,
      536,   71,   60,   63,  536,   72,   38,   39,  472,   69,
       52,   55,   55,   55,   55,   49,   55,   55,   55,   56,
       55,   55,   70,   57,   55,   55,   55,   55,   49,   55,

       55,   55,   55,   55,   55,  536,   57,  536,  536,   75,
       76,  536,  536,   77,   64,  536,   66,   73,   40,   39,
       65,   78,   67,   38,   39,   79,  530,   68,   74,  536,
       81,   84,   84,   84,   84,   49,   85,   85,   85,   85,
       85,   85,   94,   51,   85,   85,   85,   85,   89,   89,
       89,   89,   91,   91,   91,   91,  536,   91,   91,   91,
       91,   91,   91,  536,  536,   95,  536,   96,  536,   98,
      536,  536,   99,   97,  102,  536,  536,  100,  536,  536,
      536,  536,  536,  105,  536,  536,  109,  536,  536,  536,
      101,  103,  107,  111,  127,  106,  104,  112,  536,  113,

      108,  536,  129,  110,  536,  128,  525,  114,  115,  115,
      115,  115,   49,  116,  116,  116,  116,  116,  116,  536,
       51,  116,  116,  116,  116,  119,  119,  119,  119,  121,
      150,  122,  122,  122,  122,  123,  124,  124,  124,  124,
      124,  124,  536,  520,  124,  124,  124,  124,  125,  125,
      125,  125,  536,  125,  125,  125,  125,  125,  125,  536,
      536,  536,  134,  131,  132,  133,  130,  135,  136,  536,
      536,  139,  536,  137,  536,  536,  536,  536,  536,  138,
      141,  140,  143,  144,  536,  142,  536,  536,  536,  536,
      536,  148,  147,  536,  536,  146,  184,  536,  149,  152,

      152,  152,  152,  167,  145,  151,  151,  151,  151,   49,
      152,  152,  152,  152,  152,  152,  166,   51,  155,  536,
      156,  156,  156,  156,  157,  158,  158,  158,  158,  158,
      158,  536,  255,  158,  158,  158,  158,  159,  159,  159,
      159,  121,  536,  160,  160,  160,  160,  123,  161,  161,
      161,  161,  161,  161,  162,  162,  162,  162,  536,  536,
      161,  161,  161,  161,  164,  164,  164,  164,  232,  164,
      164,  164,  164,  164,  164,  536,  168,  536,  536,  170,
      165,  536,  169,  536,  536,  175,  536,  178,  536,  536,
      171,  172,  173,  536,  536,  190,  536,  536,  181,  177,

      176,  183,  182,  536,  180,  536,  536,  179,  187,  185,
      536,  189,  536,  188,  192,  207,  191,  536,  536,  513,
      209,  536,  208,  536,  186,  151,  151,  151,  151,  536,
      196,  196,  196,  196,  155,  230,  197,  197,  197,  197,
      157,  198,  198,  198,  198,  198,  198,  199,  199,  199,
      199,  536,  512,  198,  198,  198,  198,  201,  536,  159,
      159,  159,  159,  121,  536,  202,  202,  202,  202,  123,
      203,  203,  203,  203,  203,  203,  536,  233,  203,  203,
      203,  203,  121,  250,  204,  204,  204,  204,  205,  206,
      206,  206,  206,  206,  206,  536,  536,  206,  206,  206,

      206,  210,  536,  536,  536,  536,  216,  217,  211,  214,
      536,  213,  536,  536,  536,  536,  212,  220,  215,  222,
      536,  536,  218,  226,  536,  219,  536,  221,  536,  223,
      536,  536,  234,  229,  536,  301,  536,  536,  224,  536,
      235,  228,  265,  536,  227,  225,  244,  244,  244,  244,
      238,  231,  196,  196,  196,  196,  155,  252,  239,  239,
      239,  239,  157,  240,  240,  240,  240,  240,  240,  536,
      536,  240,  240,  240,  240,  155,  536,  241,  241,  241,
      241,  242,  243,  243,  243,  243,  243,  243,  536,  258,
      243,  243,  243,  243,  121,  254,  245,  245,  245,  245,

      123,  121,  509,  246,  246,  246,  246,  205,  247,  247,
      247,  247,  247,  247,  248,  248,  248,  248,  536,  536,
      247,  247,  247,  247,  536,  536,  536,  536,  536,  536,
      257,  536,  266,  536,  536,  263,  253,  251,  536,  536,
      261,  267,  536,  268,  536,  272,  262,  256,  536,  264,
      536,  270,  536,  271,  274,  269,  536,  536,  502,  273,
      280,  280,  280,  280,  536,  309,  276,  155,  275,  281,
      281,  281,  281,  157,  155,  497,  282,  282,  282,  282,
      242,  283,  283,  283,  283,  283,  283,  284,  284,  284,
      284,  536,  536,  283,  283,  283,  283,  286,  491,  244,

      244,  244,  244,  121,  536,  245,  245,  245,  245,  121,
      312,  287,  287,  287,  287,  205,  288,  288,  288,  288,
      288,  288,  536,  308,  288,  288,  288,  288,  121,  536,
      289,  289,  289,  289,  290,  291,  291,  291,  291,  291,
      291,  536,  536,  291,  291,  291,  291,  536,  536,  536,
      536,  292,  536,  295,  296,  297,  536,  298,  536,  536,
      536,  536,  293,  294,  305,  306,  536,  303,  536,  536,
      536,  536,  318,  536,  280,  280,  280,  280,  302,  536,
      472,  304,  314,  307,  329,  313,  536,  315,  310,  311,
      155,  330,  281,  281,  281,  281,  155,  536,  319,  319,

      319,  319,  242,  320,  320,  320,  320,  320,  320,  536,
      340,  320,  320,  320,  320,  155,  536,  321,  321,  321,
      321,  322,  323,  323,  323,  323,  323,  323,  536,  370,
      323,  323,  323,  323,  324,  324,  324,  324,  121,  536,
      245,  245,  245,  245,  205,  121,  336,  325,  325,  325,
      325,  290,  326,  326,  326,  326,  326,  326,  327,  327,
      327,  327,  536,  536,  326,  326,  326,  326,  536,  536,
      536,  536,  338,  536,  335,  331,  337,  334,  339,  536,
      536,  536,  536,  536,  536,  341,  536,  343,  346,  344,
      342,  536,  345,  351,  351,  351,  351,  347,  155,  468,

      281,  281,  281,  281,  242,  155,  393,  352,  352,  352,
      352,  322,  353,  353,  353,  353,  353,  353,  354,  354,
      354,  354,  536,  460,  353,  353,  353,  353,  324,  324,
      324,  324,  121,  536,  356,  356,  356,  356,  290,  357,
      357,  357,  357,  357,  357,  536,  431,  357,  357,  357,
      357,  121,  536,  358,  358,  358,  358,  359,  360,  360,
      360,  360,  360,  360,  536,  536,  360,  360,  360,  360,
      361,  536,  536,  536,  536,  536,  536,  536,  536,  364,
      536,  374,  536,  536,  438,  367,  369,  375,  390,  365,
      366,  372,  368,  371,  373,  351,  351,  351,  351,  155,

      395,  378,  378,  378,  378,  322,  379,  379,  379,  379,
      379,  379,  536,  536,  379,  379,  379,  379,  155,  408,
      380,  380,  380,  380,  381,  382,  382,  382,  382,  382,
      382,  536,  425,  382,  382,  382,  382,  121,  394,  245,
      245,  245,  245,  290,  121,  536,  383,  383,  383,  383,
      359,  384,  384,  384,  384,  384,  384,  385,  385,  385,
      385,  536,  536,  384,  384,  384,  384,  536,  536,  536,
      536,  389,  391,  402,  412,  386,  155,  392,  281,  281,
      281,  281,  322,  155,  413,  399,  399,  399,  399,  381,
      400,  400,  400,  400,  400,  400,  401,  401,  401,  401,

      536,  355,  400,  400,  400,  400,  121,  536,  403,  403,
      403,  403,  359,  404,  404,  404,  404,  404,  404,  536,
      478,  404,  404,  404,  404,  121,  536,  405,  405,  405,
      405,  406,  407,  407,  407,  407,  407,  407,  536,  536,
      407,  407,  407,  407,  409,  536,  410,  536,  536,  536,
      418,  418,  418,  418,  426,  536,  414,  421,  421,  421,
      421,  424,  424,  424,  424,  411,  155,  328,  417,  417,
      417,  417,  381,  418,  418,  418,  418,  418,  418,  155,
      285,  419,  419,  419,  419,  420,  421,  421,  421,  421,
      421,  421,  121,  249,  245,  245,  245,  245,  359,  121,

      536,  422,  422,  422,  422,  406,  423,  423,  423,  423,
      423,  423,  536,  536,  423,  423,  423,  423,  536,  428,
      536,  155,  427,  281,  281,  281,  281,  381,  536,  200,
      447,  429,  163,  445,  536,  430,  155,  536,  435,  435,
      435,  435,  420,  436,  436,  436,  436,  436,  436,  437,
      437,  437,  437,  536,  444,  436,  436,  436,  436,  121,
      120,  439,  439,  439,  439,  406,  440,  440,  440,  440,
      440,  440,  536,   90,  440,  440,  440,  440,  121,  536,
      441,  441,  441,  441,  442,  443,  443,  443,  443,  443,
      443,  536,  536,  443,  443,  443,  443,  448,   88,  446,

      155,  533,  452,  452,  452,  452,  420,  453,  453,  453,
      453,  453,  453,  536,  533,  453,  453,  453,  453,  155,
      533,  454,  454,  454,  454,  455,  456,  456,  456,  456,
      456,  456,  536,  528,  456,  456,  456,  456,  121,  536,
      245,  245,  245,  245,  406,  121,  518,  457,  457,  457,
      457,  442,  458,  458,  458,  458,  458,  458,  459,  459,
      459,  459,  536,  536,  458,  458,  458,  458,  536,  536,
      536,  155,  461,  281,  281,  281,  281,  420,  463,  471,
      471,  471,  471,  536,  533,  536,  462,  528,  464,  155,
      492,  469,  469,  469,  469,  455,  470,  470,  470,  470,

      470,  470,  536,  503,  470,  470,  470,  470,  121,  528,
      473,  473,  473,  473,  442,  474,  474,  474,  474,  474,
      474,  536,  523,  474,  474,  474,  474,  121,  528,  475,
      475,  475,  475,  476,  477,  477,  477,  477,  477,  477,
      536,  536,  477,  477,  477,  477,  536,  536,  523,  486,
      486,  486,  486,  523,  536,  536,  479,  488,  488,  488,
      488,  480,  155,  510,  485,  485,  485,  485,  455,  486,
      486,  486,  486,  486,  486,  155,  517,  487,  487,  487,
      487,  523,  488,  488,  488,  488,  488,  488,  121,  517,
      245,  245,  245,  245,  442,  121,  536,  489,  489,  489,

      489,  476,  490,  490,  490,  490,  490,  490,  536,  536,
      490,  490,  490,  490,  536,  517,  155,  494,  281,  281,
      281,  281,  455,  493,  155,  506,  498,  498,  498,  498,
      536,  499,  499,  499,  499,  499,  499,  536,  517,  499,
      499,  499,  499,  121,  514,  500,  500,  500,  500,  476,
      501,  501,  501,  501,  501,  501,  536,  506,  501,  501,
      501,  501,  155,  506,  507,  507,  507,  507,  484,  508,
      508,  508,  508,  508,  508,  536,  476,  508,  508,  508,
      508,  121,  506,  245,  245,  245,  245,  476,  155,  484,
      281,  281,  281,  281,   35,   35,   35,   35,   35,   37,

       37,   37,   37,   37,   41,   41,   41,   41,   41,   43,
      467,   43,   43,   43,   44,   44,   44,   44,   44,   54,
       54,   54,   83,  536,   83,   83,   83,   86,   86,  117,
      117,  153,  153,  154,  154,  193,  193,  194,  194,  236,
      236,  237,  237,  277,  277,  278,  278,  316,  316,  317,
      317,  348,  348,  349,  349,  376,  376,  377,  377,  396,
      396,  397,  397,  415,  415,  416,  416,  432,  432,  433,
      433,  449,  449,  450,  450,  465,  465,  466,  466,  481,
      481,  483,  483,  495,  495,  496,  496,  504,  504,  505,
      505,  511,  511,  515,  515,  516,  516,  519,  519,  521,

      521,  522,  522,  524,  524,  526,  526,  527,  527,  529,
      529,  531,  531,  532,  532,  534,  534,  535,  535,  536,
      455,  484,  467,  442,  484,  482,  467,  434,  536,  420,
      467,  434,  536,  406,  451,  434,  398,  536,  381,  434,
      398,  536,  359,   87,  398,  350,  322,  398,  350,  536,
      536,  536,  536,  536,  388,  387,  536,  290,   87,  350,
      279,  536,  536,  536,  363,  362,  536,  536,  242,  350,
      279,  536,  333,  332,  536,  536,  536,  536,  205,   87,
      279,  195,  536,  300,  299,  536,  536,  157,  279,  195,
      536,  260,  259,  536,  123,   87,  195,  118,  536,  536,

      536,  195,  118,  536,  174,  536,  536,   87,  118,  126,
      118,  536,  536,  536,  536,   92,  536,   87,   44,   45,
       42,   82,  536,   61,   53,  536,   45,   42,  536,   36,
       36,    7,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536
    } ;

static yyconst flex_int16_t yy_chk[1876] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   10,   10,   11,   11,   15,   33,   33,
       58,   15,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   27,   16,   21,   21,   24,   24,   58,
       29,   29,   21,   24,   28,   29,   38,   38,  614,   27,
       16,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   28,   19,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   25,   20,   26,   30,   31,
       31,   32,   31,   31,   25,   34,   26,   30,   39,   39,
       25,   31,   26,   40,   40,   32,  610,   26,   30,   59,
       34,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   59,   48,   50,   50,   50,   50,   53,   53,
       53,   53,   55,   55,   55,   55,   60,   55,   55,   55,
       55,   55,   55,   61,   62,   60,   64,   61,   63,   63,
       65,   66,   64,   62,   67,   68,   69,   65,   70,   71,
       78,   67,   72,   70,   73,   74,   74,   80,   79,   81,
       66,   68,   72,   78,   93,   71,   69,   79,   95,   80,

       73,   93,   95,   74,   94,   94,  606,   81,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,  114,
       84,   85,   85,   85,   85,   87,   87,   87,   87,   89,
      114,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   90,  602,   90,   90,   90,   90,   91,   91,
       91,   91,   96,   91,   91,   91,   91,   91,   91,   97,
       99,   98,  100,   97,   98,   99,   96,  101,  101,  100,
      102,  103,  104,  102,  105,  101,  106,  107,  103,  102,
      105,  104,  107,  108,  109,  106,  110,  111,  112,  113,
      108,  112,  111,  143,  128,  110,  143,  127,  113,  116,

      116,  116,  116,  128,  109,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  127,  115,  119,  213,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  120,  213,  120,  120,  120,  120,  121,  121,  121,
      121,  122,  189,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  123,  123,  123,  123,  124,  133,
      124,  124,  124,  124,  125,  125,  125,  125,  189,  125,
      125,  125,  125,  125,  125,  126,  129,  132,  134,  133,
      126,  136,  132,  129,  137,  136,  138,  138,  139,  140,
      134,  134,  134,  141,  148,  148,  165,  142,  141,  137,

      136,  142,  141,  145,  140,  144,  167,  139,  145,  144,
      146,  147,  149,  146,  150,  165,  149,  166,  147,  598,
      167,  150,  166,  187,  144,  151,  151,  151,  151,  151,
      155,  155,  155,  155,  156,  187,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  157,  157,  157,
      157,  158,  597,  158,  158,  158,  158,  159,  190,  159,
      159,  159,  159,  160,  207,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  161,  190,  161,  161,
      161,  161,  162,  207,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  163,  168,  163,  163,  163,

      163,  168,  170,  172,  171,  173,  173,  174,  168,  171,
      175,  170,  176,  177,  179,  180,  168,  176,  172,  179,
      181,  182,  174,  183,  184,  175,  185,  177,  186,  180,
      183,  188,  191,  186,  261,  261,  192,  224,  181,  191,
      192,  185,  224,  210,  184,  182,  201,  201,  201,  201,
      196,  188,  196,  196,  196,  196,  197,  210,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  198,
      212,  198,  198,  198,  198,  199,  216,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  200,  216,
      200,  200,  200,  200,  202,  212,  202,  202,  202,  202,

      202,  204,  595,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  205,  205,  205,  205,  206,  208,
      206,  206,  206,  206,  211,  214,  215,  219,  220,  221,
      215,  222,  225,  229,  233,  221,  211,  208,  226,  225,
      219,  226,  228,  227,  232,  231,  220,  214,  230,  222,
      227,  229,  231,  230,  233,  228,  234,  235,  592,  232,
      238,  238,  238,  238,  269,  269,  235,  239,  234,  239,
      239,  239,  239,  239,  241,  591,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  242,  242,  242,
      242,  243,  272,  243,  243,  243,  243,  244,  588,  244,

      244,  244,  244,  245,  268,  245,  245,  245,  245,  246,
      272,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  247,  268,  247,  247,  247,  247,  248,  251,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  249,  253,  249,  249,  249,  249,  254,  255,  256,
      257,  251,  258,  255,  256,  257,  262,  258,  263,  264,
      265,  266,  253,  254,  265,  266,  270,  263,  267,  276,
      271,  273,  280,  275,  280,  280,  280,  280,  262,  292,
      585,  264,  275,  267,  292,  273,  294,  276,  270,  271,
      281,  294,  281,  281,  281,  281,  282,  307,  282,  282,

      282,  282,  282,  282,  282,  282,  282,  282,  282,  283,
      307,  283,  283,  283,  283,  284,  340,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  285,  340,
      285,  285,  285,  285,  286,  286,  286,  286,  287,  303,
      287,  287,  287,  287,  287,  289,  303,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  290,  290,
      290,  290,  291,  296,  291,  291,  291,  291,  301,  302,
      311,  304,  305,  306,  302,  296,  304,  301,  306,  305,
      308,  309,  310,  313,  371,  308,  312,  310,  313,  311,
      309,  314,  312,  318,  318,  318,  318,  314,  319,  584,

      319,  319,  319,  319,  319,  321,  371,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  322,  322,
      322,  322,  323,  581,  323,  323,  323,  323,  324,  324,
      324,  324,  325,  414,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  326,  414,  326,  326,  326,
      326,  327,  329,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  328,  334,  328,  328,  328,  328,
      329,  335,  337,  338,  339,  341,  343,  342,  345,  334,
      375,  345,  347,  368,  578,  338,  339,  347,  368,  335,
      337,  342,  338,  341,  343,  351,  351,  351,  351,  352,

      375,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  353,  389,  353,  353,  353,  353,  354,  389,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  355,  575,  355,  355,  355,  355,  356,  374,  356,
      356,  356,  356,  356,  358,  374,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  359,  359,  359,
      359,  360,  367,  360,  360,  360,  360,  369,  370,  393,
      394,  367,  369,  572,  393,  569,  378,  370,  378,  378,
      378,  378,  378,  380,  394,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  381,  381,  381,  381,

      382,  566,  382,  382,  382,  382,  383,  461,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  384,
      461,  384,  384,  384,  384,  385,  390,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  386,  391,
      386,  386,  386,  386,  390,  392,  391,  395,  400,  408,
      400,  400,  400,  400,  408,  402,  395,  402,  402,  402,
      402,  406,  406,  406,  406,  392,  399,  563,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  401,
      560,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  403,  557,  403,  403,  403,  403,  403,  405,

      409,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  407,  412,  407,  407,  407,  407,  410,  410,
      413,  417,  409,  417,  417,  417,  417,  417,  427,  554,
      430,  412,  551,  427,  426,  413,  419,  430,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  420,
      420,  420,  420,  421,  426,  421,  421,  421,  421,  422,
      548,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  423,  546,  423,  423,  423,  423,  424,  428,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  425,  431,  425,  425,  425,  425,  431,  545,  428,

      435,  535,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  436,  534,  436,  436,  436,  436,  437,
      532,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  438,  531,  438,  438,  438,  438,  439,  514,
      439,  439,  439,  439,  439,  441,  514,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  442,  442,
      442,  442,  443,  444,  443,  443,  443,  443,  445,  446,
      447,  452,  444,  452,  452,  452,  452,  452,  446,  455,
      455,  455,  455,  494,  530,  478,  445,  529,  447,  454,
      478,  454,  454,  454,  454,  454,  454,  454,  454,  454,

      454,  454,  456,  494,  456,  456,  456,  456,  457,  527,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  458,  526,  458,  458,  458,  458,  459,  525,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      460,  463,  460,  460,  460,  460,  464,  470,  524,  470,
      470,  470,  470,  522,  503,  472,  463,  472,  472,  472,
      472,  464,  469,  503,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  471,  521,  471,  471,  471,
      471,  520,  471,  471,  471,  471,  471,  471,  473,  519,
      473,  473,  473,  473,  473,  475,  480,  475,  475,  475,

      475,  475,  475,  475,  475,  475,  475,  475,  477,  479,
      477,  477,  477,  477,  518,  516,  485,  480,  485,  485,
      485,  485,  485,  479,  487,  515,  487,  487,  487,  487,
      510,  487,  487,  487,  487,  487,  487,  488,  512,  488,
      488,  488,  488,  489,  510,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  490,  511,  490,  490,
      490,  490,  498,  505,  498,  498,  498,  498,  504,  498,
      498,  498,  498,  498,  498,  499,  501,  499,  499,  499,
      499,  500,  497,  500,  500,  500,  500,  500,  507,  496,
      507,  507,  507,  507,  537,  537,  537,  537,  537,  538,

      538,  538,  538,  538,  539,  539,  539,  539,  539,  540,
      495,  540,  540,  540,  541,  541,  541,  541,  541,  542,
      542,  542,  543,  493,  543,  543,  543,  544,  544,  547,
      547,  549,  549,  550,  550,  552,  552,  553,  553,  555,
      555,  556,  556,  558,  558,  559,  559,  561,  561,  562,
      562,  564,  564,  565,  565,  567,  567,  568,  568,  570,
      570,  571,  571,  573,  573,  574,  574,  576,  576,  577,
      577,  579,  579,  580,  580,  582,  582,  583,  583,  586,
      586,  587,  587,  589,  589,  590,  590,  593,  593,  594,
      594,  596,  596,  599,  599,  600,  600,  601,  601,  603,

      603,  604,  604,  605,  605,  607,  607,  608,  608,  609,
      609,  611,  611,  612,  612,  613,  613,  615,  615,  492,
      486,  483,  481,  474,  468,  467,  466,  465,  462,  453,
      450,  449,  448,  440,  434,  433,  432,  429,  418,  416,
      415,  411,  404,  398,  397,  396,  379,  377,  376,  373,
      372,  366,  365,  364,  363,  362,  361,  357,  350,  349,
      348,  346,  344,  336,  333,  332,  331,  330,  320,  317,
      316,  315,  300,  299,  298,  297,  295,  293,  288,  279,
      278,  277,  274,  260,  259,  252,  250,  240,  237,  236,
      223,  218,  217,  209,  203,  195,  194,  193,  178,  169,

      164,  154,  153,  152,  135,  131,  130,  118,  117,   92,
       86,   77,   76,   75,   57,   56,   54,   49,   45,   44,
       41,   36,   23,   22,   18,   17,   14,   12,    7,    4,
        3,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[61] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
    0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "ClntLexer.l"
#line 5 "ClntLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 31 "ClntLexer.l"
  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_ClntParser_stype yylval;
}
#line 1045 "ClntLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 44 "ClntLexer.l"


#line 1150 "ClntLexer.cpp"

	if ( (yy_init) )
		{
		(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 537 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1832 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 46 "ClntLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 47 "ClntLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "ClntLexer.l"
{ return ClntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "ClntLexer.l"
{ return ClntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "ClntLexer.l"
{ return ClntParser::ADDRES_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "ClntLexer.l"
{ return ClntParser::IA_;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "ClntLexer.l"
{ return ClntParser::TA_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "ClntLexer.l"
{ return ClntParser::IAID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "ClntLexer.l"
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 55 "ClntLexer.l"
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 56 "ClntLexer.l"
{ return ClntParser::LOGLEVEL_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 57 "ClntLexer.l"
{ return ClntParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 58 "ClntLexer.l"
{ return ClntParser::LOGNAME_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 59 "ClntLexer.l"
{ return ClntParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 60 "ClntLexer.l"
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 61 "ClntLexer.l"
{ return ClntParser::VALID_TIME_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 62 "ClntLexer.l"
{ return ClntParser::T1_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 63 "ClntLexer.l"
{ return ClntParser::T2_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 64 "ClntLexer.l"
{ return ClntParser::OPTION_; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 65 "ClntLexer.l"
{ return ClntParser::DNS_SERVER_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 66 "ClntLexer.l"
{ return ClntParser::DOMAIN_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 67 "ClntLexer.l"
{ return ClntParser::NTP_SERVER_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 68 "ClntLexer.l"
{ return ClntParser::TIME_ZONE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 69 "ClntLexer.l"
{ return ClntParser::SIP_SERVER_; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 70 "ClntLexer.l"
{ return ClntParser::SIP_DOMAIN_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 71 "ClntLexer.l"
{ return ClntParser::FQDN_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 72 "ClntLexer.l"
{ return ClntParser::NIS_SERVER_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 73 "ClntLexer.l"
{ return ClntParser::NIS_DOMAIN_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 74 "ClntLexer.l"
{ return ClntParser::NISP_SERVER_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 75 "ClntLexer.l"
{ return ClntParser::NISP_DOMAIN_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 76 "ClntLexer.l"
{ return ClntParser::LIFETIME_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 77 "ClntLexer.l"
{ return ClntParser::REJECT_SERVERS_;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 78 "ClntLexer.l"
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 79 "ClntLexer.l"
{ return ClntParser::RAPID_COMMIT_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 80 "ClntLexer.l"
{ return ClntParser::UNICAST_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 81 "ClntLexer.l"
{ return ClntParser::STRICT_RFC_NO_ROUTING_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 82 "ClntLexer.l"
{ return ClntParser::PD_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 83 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 84 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_LL_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 85 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_LLT_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 86 "ClntLexer.l"
{ return ClntParser::DUID_TYPE_EN_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 87 "ClntLexer.l"
;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 89 "ClntLexer.l"
;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 91 "ClntLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 97 "ClntLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 98 "ClntLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 99 "ClntLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 47:
YY_RULE_SETUP
#line 106 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 115 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 124 "ClntLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 134 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 143 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 152 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 161 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 170 "ClntLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 177 "ClntLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return ClntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return ClntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 198 "ClntLexer.l"
{
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return ClntParser::DUID_;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 229 "ClntLexer.l"
{ 
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::HEXNUMBER_;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 238 "ClntLexer.l"
{ 
    if(!sscanf(yytext,"%u",(unsigned int*)&(yylval.ival))) { 
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::INTNUMBER_;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 248 "ClntLexer.l"
{return yytext[0];} 
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 252 "ClntLexer.l"
ECHO;
	YY_BREAK
#line 1674 "ClntLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 537 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 537 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 536);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
    	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
    	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef yytext_ptr
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
#endif
#line 252 "ClntLexer.l"



