#line 2 "ClntLexer.cpp"

#line 4 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 51
#define YY_END_OF_BUFFER 52
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[482] =
    {   0,
        1,    1,    0,    0,    0,    0,   52,   50,    2,    1,
        1,   50,   33,   50,   50,   49,   49,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   37,   37,   51,    1,    1,    1,
        0,   45,   33,    0,   45,   35,   34,   49,    0,    0,
       48,    0,   42,   46,   46,   46,   46,   46,   46,   46,
        6,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   15,   16,   46,   46,   46,   46,   36,   34,
       49,    0,    0,   41,   47,   40,   40,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,

       46,   46,   46,   46,   46,   46,   46,   49,    0,    0,
        0,   39,   39,    0,   40,    0,   40,   46,   46,   46,
       46,   24,   46,   46,    0,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   49,
        0,    0,    0,    0,   39,    0,   39,    0,   40,   40,
       40,   40,   46,   46,   46,   46,    3,   46,   46,   46,
        0,   46,   46,   46,    7,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,    0,    0,    0,
        0,   39,   39,   39,   39,    0,   40,   40,   40,    0,
       40,   46,   46,   19,   46,   46,   46,    0,    0,   46,

       46,   46,   46,   17,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,    0,    0,    0,   39,   39,   39,
        0,   39,    0,    0,   40,   40,   40,   40,    5,   46,
       46,   46,   46,    0,    0,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   32,   46,   46,    0,
        0,    0,    0,    0,   39,   39,   39,   39,    0,   40,
       40,   40,    0,   40,   46,   46,   10,   11,    0,    0,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   12,    0,    0,    0,   39,   39,   39,    0,
       39,   44,   40,   40,   40,   40,   46,    9,    0,    0,

       46,   46,    4,   46,   46,   46,   46,   46,   46,    8,
       21,   46,    0,    0,    0,   43,   39,   39,   39,   39,
       40,   40,   40,    0,   40,   18,    0,    0,   26,   25,
       20,   46,   46,   46,   46,   23,   22,   46,    0,    0,
       39,   39,   39,    0,   39,   40,   40,   40,   40,   28,
       27,   46,   46,   46,   46,   46,    0,    0,    0,   39,
       39,   39,   39,   40,   40,   40,    0,   40,   46,   46,
       31,   46,   46,    0,    0,   39,   39,   39,    0,   39,
       40,   40,   40,   40,   46,   46,   29,   46,    0,    0,
        0,   39,   39,   39,   39,   40,   40,   40,    0,   40,

       46,   46,   14,    0,   38,   41,   39,   39,   39,    0,
       39,   40,   40,   40,   40,   46,   30,    0,   38,    0,
       39,   39,   39,   39,   39,   40,   40,   40,    0,   40,
       46,   38,   41,   39,    0,   39,   39,   39,   39,   40,
       40,   40,   13,   38,   39,   39,   39,   39,   40,   40,
       40,   39,   39,    0,   39,   39,   40,   39,   39,   40,
       39,   39,    0,   39,   39,   39,   39,    0,   39,   39,
       39,   39,    0,   39,   39,   39,   39,    0,   39,   39,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   16,   16,   16,   16,   16,   16,   17,    1,    1,
        1,    1,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
        1,    1,    1,    1,    1,    1,   18,   19,   20,   21,

       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[44] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        3,    1,    4,    4,    4,    4,    5,    4,    4,    4,
        4,    4,    4,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[561] =
    {   0,
        0,    0, 1713, 1712,    0,    0, 1719, 1722, 1722,   41,
       43, 1713,    0, 1710,   40,   40, 1675, 1698,   69,   82,
       18, 1680, 1696,   49,   47,   89,   60,   34,   53,   91,
       96,   92,   56,   95, 1722, 1700, 1722,  115,  121,  126,
     1706, 1722,    0, 1703, 1702, 1722,    0,  118, 1691,  131,
     1722,    0,  135, 1690,  139, 1685, 1688,  139,  146,   59,
     1687,  147,  149,  150,  160,  151,  152,  157,  154,   51,
      155,  163, 1686, 1685,  161,  166,  165,  168, 1722,    0,
      191,  182, 1684,  186,    0,  206,  219,  223, 1665,  230,
      231,  233,  173,  241,  243,  237,  245,  239,   97,  242,

      244,  257,  252,  253,  198,  254,  255,  277,  263, 1682,
     1681,  292,  271,  303,  309,  320,  326,  330,  337,  321,
      330, 1680,  338,  341, 1686,  344,  256,  345,  347,  349,
      351,  357,  284,  358,  360,  359,  367,  369,  378,  383,
     1678, 1677, 1676,  388,  394,  405,  411,  417,  423,  436,
      442,  455, 1675,  370,  450,  456, 1674,  457,  458,  374,
      455,  460,  461,  463, 1673,  464,  465,  467,  478,  468,
      472,  476,  406,   99,  412,  489,  372, 1672, 1671, 1670,
      496,  502,  515,  521,  534,  538,  544, 1669,  551,  562,
      568,  491,  563, 1668,  546,  480,  516, 1652, 1661,  569,

      570,  571,  572, 1665,  573,  483,  583,  574,  575,  579,
      580,  585,  586,  591, 1664, 1663,  605,  612, 1662,  619,
      630,  636,  642,  648,  654,  667,  673,  686, 1661,  592,
      589,  681,  687, 1647, 1641,  596,  668,  688,  689,  691,
      693,  643,  698,  694,  696,  700, 1658,  701,  631, 1657,
     1656, 1655,  708,  723,  729,  742,  748,  761,  765,  771,
     1654,  778,  789,  795,  713,  712, 1653, 1652, 1650, 1628,
      790,  795,  766,  796,  804,  743,  798,  802,  805,  806,
      807,  703, 1649, 1648, 1647,  817,  823, 1646,  832,  843,
      849,  853,  859,  872,  878,  891,  809, 1645, 1635, 1638,

      886,  873, 1642,  892,  893,  854,  895,  894,  896, 1641,
     1640,  897, 1639, 1638, 1637,  919,  925,  938,  944,  957,
      963, 1636,  970,  981,  987, 1635, 1620, 1615, 1632, 1631,
     1630,  898,  899,  911,  965, 1629, 1628,  824, 1627, 1626,
      994, 1625, 1001, 1012, 1018, 1024, 1037, 1043, 1056, 1722,
     1722,  903, 1038, 1051,  901, 1057, 1624, 1623, 1622, 1078,
     1064, 1091, 1071, 1104, 1621, 1111, 1122, 1128, 1059, 1106,
     1620, 1123,  939, 1619, 1618, 1135, 1617, 1148, 1140, 1161,
     1167, 1180, 1186, 1199, 1181, 1194, 1616, 1200, 1615, 1614,
     1613, 1212, 1225, 1231, 1244, 1250, 1612, 1257, 1268, 1274,

     1269, 1202, 1611, 1515, 1502,    0, 1283, 1481, 1290, 1301,
     1307, 1313, 1326, 1332, 1345, 1019, 1474, 1468, 1460, 1455,
     1449, 1351, 1364, 1370, 1383, 1389, 1436, 1396,    0, 1409,
     1365, 1430, 1722, 1422,    0, 1415, 1417, 1422, 1435, 1441,
     1454,    0, 1410, 1404, 1391, 1384, 1460, 1473, 1479, 1378,
        0, 1359, 1346,    0, 1486, 1722,    0, 1340, 1327, 1722,
     1321, 1308,    0, 1302, 1285, 1276, 1275,    0, 1274, 1252,
     1245, 1239,    0, 1226, 1207, 1204, 1203,    0, 1175, 1162,
     1722, 1502, 1507, 1512, 1517, 1522, 1525, 1530, 1532, 1169,
     1156, 1534, 1153, 1536, 1538, 1143, 1540, 1542, 1112, 1544,

     1546, 1099, 1548, 1550, 1086, 1552, 1554, 1026, 1556, 1558,
     1009, 1560, 1562, 1002, 1564, 1566,  995, 1568, 1570,  971,
     1572, 1574,  946, 1576, 1578,  831, 1580, 1582,  821,  750,
     1584, 1586,  650, 1588, 1590,  620,  612, 1592, 1594,  552,
     1596,  510,  450, 1598, 1600, 1602,  363, 1604, 1606, 1608,
      317, 1610, 1612, 1614,  277, 1616, 1618, 1620,  227, 1622
    } ;

static yyconst flex_int16_t yy_def[561] =
    {   0,
      481,    1,  482,  482,  483,  483,  481,  481,  481,  481,
      481,  484,  485,  486,  481,  481,   16,  481,  487,  487,
       20,   20,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  481,  481,  481,  481,  481,  481,
      484,  481,  485,  486,  481,  481,  488,  481,  489,   48,
      481,  490,  491,  487,   20,   55,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  481,  488,
      481,   81,  492,  493,  490,  481,   86,   55,   88,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,

      487,  487,  487,  487,  487,  487,  487,  481,  108,  494,
      495,  481,  112,  481,  481,  496,  115,   88,  487,  487,
      487,  487,  487,  487,  481,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  109,
      109,  497,  498,  481,  481,  499,  145,  481,  481,  149,
      481,  151,  118,  487,  487,  487,  487,  487,  487,  487,
      481,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  481,  500,  501,
      481,  481,  182,  481,  184,  481,  481,  481,  481,  502,
      189,  487,  487,  487,  487,  487,  487,  481,  481,  487,

      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  503,  504,  481,  481,  481,  481,
      505,  220,  481,  481,  481,  225,  481,  227,  487,  487,
      487,  487,  487,  481,  481,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  481,
      506,  507,  481,  481,  481,  255,  481,  257,  481,  481,
      481,  481,  508,  262,  487,  487,  487,  487,  481,  481,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  509,  510,  481,  481,  481,  481,  511,
      289,  481,  481,  293,  481,  295,  487,  487,  481,  481,

      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  481,  512,  513,  481,  481,  317,  481,  319,
      481,  481,  481,  514,  323,  487,  481,  481,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  515,  516,
      481,  481,  481,  517,  343,  481,  346,  481,  348,  481,
      481,  487,  487,  487,  487,  487,  481,  518,  519,  481,
      360,  481,  362,  481,  481,  481,  520,  366,  487,  487,
      487,  487,  487,  521,  522,  481,  481,  481,  523,  378,
      481,  381,  481,  383,  487,  487,  487,  487,  481,  524,
      525,  481,  392,  481,  394,  481,  481,  481,  526,  398,

      487,  487,  487,  527,  528,  529,  481,  481,  481,  530,
      409,  481,  412,  481,  414,  487,  487,  481,  531,  481,
      532,  481,  422,  481,  424,  481,  481,  481,  533,  428,
      487,  534,  481,  535,  536,  481,  481,  481,  438,  481,
      440,  537,  487,  481,  538,  539,  481,  447,  481,  481,
      540,  481,  541,  542,  481,  481,  543,  544,  545,  481,
      481,  546,  547,  548,  549,  481,  550,  551,  552,  553,
      481,  554,  555,  556,  557,  481,  558,  559,  560,  481,
        0,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481
    } ;

static yyconst flex_int16_t yy_nxt[1766] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   18,   19,   20,   20,
       21,   20,   22,   23,   23,   24,   23,   23,   25,   23,
       26,   27,   28,   23,   29,   30,   31,   32,   33,   34,
       23,   23,   23,   38,   39,   40,   39,   46,   58,   59,
      481,   47,   48,   48,   48,   48,   49,   50,   50,   50,
       50,   50,   50,  481,   51,  481,   61,  481,   68,  481,
       69,   62,  481,   77,   70,  481,  481,  101,   63,   92,
       52,   55,   55,   55,   55,   49,   55,   55,   55,   56,
       55,   55,   67,   57,   55,   55,   55,   55,   49,   55,

       55,   55,   55,   55,   55,  481,   57,  481,  481,   73,
       74,  481,  481,  481,   64,  481,   71,   38,   39,  131,
       65,   75,   76,   40,   39,   66,   78,   72,   38,   39,
       81,   81,   81,   81,   49,   82,   82,   82,   82,   82,
       82,  211,   51,   82,   82,   82,   82,   86,   86,   86,
       86,   88,   88,   88,   88,  481,   88,   88,   88,   88,
       88,   88,  481,  481,   93,  481,  481,  481,  481,   96,
      481,  481,   94,  481,   90,   91,  481,  481,   99,  481,
      103,  481,  481,   97,  481,   95,  100,  102,   98,  481,
      104,  105,  123,  106,  109,  109,  109,  109,  112,  112,

      112,  112,  107,  108,  108,  108,  108,   49,  109,  109,
      109,  109,  109,  109,  481,   51,  114,  137,  115,  115,
      115,  115,  116,  117,  117,  117,  117,  117,  117,  481,
      425,  117,  117,  117,  117,  118,  118,  118,  118,  120,
      118,  118,  118,  118,  118,  118,  481,  481,  121,  481,
      124,  125,  126,  481,  129,  481,  127,  481,  481,  481,
      481,  481,  128,  122,  130,  133,  134,  132,  481,  481,
      481,  481,  481,  481,  136,  141,  141,  141,  141,  138,
      475,  481,  139,  147,  147,  147,  147,  164,  135,  140,
      140,  140,  140,   49,  141,  141,  141,  141,  141,  141,

      481,   51,  144,  170,  145,  145,  145,  145,  146,  147,
      147,  147,  147,  147,  147,  148,  148,  148,  148,  114,
      470,  149,  149,  149,  149,  116,  150,  150,  150,  150,
      150,  150,  151,  151,  151,  151,  481,  481,  150,  150,
      150,  150,  153,  153,  153,  153,  481,  153,  153,  153,
      153,  153,  153,  481,  481,  156,  155,  481,  154,  157,
      481,  481,  165,  481,  162,  481,  465,  481,  174,  158,
      159,  160,  168,  481,  481,  481,  481,  169,  171,  163,
      167,  173,  166,  481,  175,  481,  481,  177,  481,  176,
      481,  197,  214,  172,  481,  140,  140,  140,  140,  481,

      181,  181,  181,  181,  144,  192,  182,  182,  182,  182,
      146,  183,  183,  183,  183,  183,  183,  184,  184,  184,
      184,  481,  481,  183,  183,  183,  183,  186,  481,  148,
      148,  148,  148,  114,  210,  187,  187,  187,  187,  116,
      188,  188,  188,  188,  188,  188,  481,  212,  188,  188,
      188,  188,  114,  460,  189,  189,  189,  189,  190,  191,
      191,  191,  191,  191,  191,  481,  481,  191,  191,  191,
      191,  193,  481,  481,  481,  198,  481,  481,  195,  481,
      481,  481,  201,  481,  481,  203,  194,  206,  481,  196,
      199,  200,  481,  202,  481,  204,  481,  209,  213,  481,

      232,  205,  241,  208,  207,  481,  217,  481,  181,  181,
      181,  181,  144,  459,  218,  218,  218,  218,  146,  219,
      219,  219,  219,  219,  219,  481,  229,  219,  219,  219,
      219,  144,  481,  220,  220,  220,  220,  221,  222,  222,
      222,  222,  222,  222,  481,  233,  222,  222,  222,  222,
      223,  223,  223,  223,  114,  457,  224,  224,  224,  224,
      116,  114,  481,  225,  225,  225,  225,  190,  226,  226,
      226,  226,  226,  226,  227,  227,  227,  227,  481,  481,
      226,  226,  226,  226,  231,  481,  481,  481,  481,  481,
      481,  481,  242,  238,  240,  481,  481,  230,  236,  481,

      245,  481,  481,  243,  237,  481,  239,  481,  481,  244,
      266,  246,  481,  271,  248,  451,  249,  253,  253,  253,
      253,  247,  144,  446,  254,  254,  254,  254,  146,  144,
      265,  255,  255,  255,  255,  221,  256,  256,  256,  256,
      256,  256,  257,  257,  257,  257,  481,  481,  256,  256,
      256,  256,  259,  442,  223,  223,  223,  223,  114,  481,
      224,  224,  224,  224,  114,  283,  260,  260,  260,  260,
      190,  261,  261,  261,  261,  261,  261,  481,  277,  261,
      261,  261,  261,  114,  481,  262,  262,  262,  262,  263,
      264,  264,  264,  264,  264,  264,  481,  481,  264,  264,

      264,  264,  267,  481,  481,  481,  272,  481,  268,  481,
      481,  275,  481,  273,  481,  278,  481,  481,  286,  481,
      253,  253,  253,  253,  276,  312,  282,  274,  481,  481,
      281,  280,  279,  144,  297,  254,  254,  254,  254,  144,
      298,  287,  287,  287,  287,  221,  288,  288,  288,  288,
      288,  288,  481,  425,  288,  288,  288,  288,  144,  481,
      289,  289,  289,  289,  290,  291,  291,  291,  291,  291,
      291,  481,  306,  291,  291,  291,  291,  292,  292,  292,
      292,  114,  481,  224,  224,  224,  224,  190,  114,  303,
      293,  293,  293,  293,  263,  294,  294,  294,  294,  294,

      294,  295,  295,  295,  295,  481,  481,  294,  294,  294,
      294,  481,  481,  305,  481,  301,  302,  304,  481,  307,
      481,  481,  481,  481,  421,  481,  309,  308,  311,  316,
      316,  316,  316,  144,  415,  254,  254,  254,  254,  221,
      481,  310,  144,  326,  317,  317,  317,  317,  290,  318,
      318,  318,  318,  318,  318,  319,  319,  319,  319,  481,
      356,  318,  318,  318,  318,  292,  292,  292,  292,  114,
      481,  321,  321,  321,  321,  263,  322,  322,  322,  322,
      322,  322,  481,  334,  322,  322,  322,  322,  114,  481,
      323,  323,  323,  323,  324,  325,  325,  325,  325,  325,

      325,  481,  481,  325,  325,  325,  325,  330,  481,  481,
      481,  481,  481,  481,  481,  481,  329,  481,  338,  481,
      353,  332,  372,  352,  336,  369,  331,  481,  333,  335,
      337,  316,  316,  316,  316,  144,  354,  341,  341,  341,
      341,  290,  342,  342,  342,  342,  342,  342,  481,  395,
      342,  342,  342,  342,  144,  481,  343,  343,  343,  343,
      344,  345,  345,  345,  345,  345,  345,  481,  388,  345,
      345,  345,  345,  114,  384,  224,  224,  224,  224,  263,
      114,  481,  346,  346,  346,  346,  324,  347,  347,  347,
      347,  347,  347,  348,  348,  348,  348,  481,  363,  347,

      347,  347,  347,  355,  144,  349,  254,  254,  254,  254,
      290,  144,  320,  360,  360,  360,  360,  344,  361,  361,
      361,  361,  361,  361,  362,  362,  362,  362,  481,  296,
      361,  361,  361,  361,  114,  481,  364,  364,  364,  364,
      324,  365,  365,  365,  365,  365,  365,  481,  431,  365,
      365,  365,  365,  114,  481,  366,  366,  366,  366,  367,
      368,  368,  368,  368,  368,  368,  481,  481,  368,  368,
      368,  368,  370,  481,  481,  481,  377,  377,  377,  377,
      385,  481,  373,  380,  380,  380,  380,  371,  144,  258,
      376,  376,  376,  376,  344,  377,  377,  377,  377,  377,

      377,  144,  228,  378,  378,  378,  378,  379,  380,  380,
      380,  380,  380,  380,  114,  185,  224,  224,  224,  224,
      324,  114,  481,  381,  381,  381,  381,  367,  382,  382,
      382,  382,  382,  382,  383,  383,  383,  383,  481,  481,
      382,  382,  382,  382,  386,  144,  152,  254,  254,  254,
      254,  344,  394,  394,  394,  394,  113,  387,  144,   87,
      392,  392,  392,  392,  379,  393,  393,  393,  393,  393,
      393,  481,   85,  393,  393,  393,  393,  114,  478,  396,
      396,  396,  396,  367,  397,  397,  397,  397,  397,  397,
      481,  478,  397,  397,  397,  397,  114,  481,  398,  398,

      398,  398,  399,  400,  400,  400,  400,  400,  400,  481,
      481,  400,  400,  400,  400,  402,  481,  401,  481,  478,
      473,  403,  144,  478,  407,  407,  407,  407,  379,  408,
      408,  408,  408,  408,  408,  481,  417,  408,  408,  408,
      408,  144,  473,  409,  409,  409,  409,  410,  411,  411,
      411,  411,  411,  411,  481,  473,  411,  411,  411,  411,
      114,  468,  224,  224,  224,  224,  367,  114,  473,  412,
      412,  412,  412,  399,  413,  413,  413,  413,  413,  413,
      414,  414,  414,  414,  481,  481,  413,  413,  413,  413,
      468,  468,  463,  144,  416,  254,  254,  254,  254,  379,

      144,  468,  422,  422,  422,  422,  410,  423,  423,  423,
      423,  423,  423,  424,  424,  424,  424,  481,  463,  423,
      423,  423,  423,  114,  463,  426,  426,  426,  426,  399,
      427,  427,  427,  427,  427,  427,  481,  454,  427,  427,
      427,  427,  114,  463,  428,  428,  428,  428,  429,  430,
      430,  430,  430,  430,  430,  481,  454,  430,  430,  430,
      430,  144,  454,  436,  436,  436,  436,  410,  437,  437,
      437,  437,  437,  437,  481,  435,  437,  437,  437,  437,
      144,  481,  438,  438,  438,  438,  443,  439,  439,  439,
      439,  439,  439,  481,  429,  439,  439,  439,  439,  114,

      454,  224,  224,  224,  224,  399,  114,  435,  440,  440,
      440,  440,  429,  441,  441,  441,  441,  441,  441,  481,
      420,  441,  441,  441,  441,  144,  481,  254,  254,  254,
      254,  410,  144,  410,  447,  447,  447,  447,  435,  448,
      448,  448,  448,  448,  448,  481,  420,  448,  448,  448,
      448,  114,  399,  449,  449,  449,  449,  429,  450,  450,
      450,  450,  450,  450,  481,  435,  450,  450,  450,  450,
      144,  433,  455,  455,  455,  455,  420,  456,  456,  456,
      456,  456,  456,  481,  391,  456,  456,  456,  456,  114,
      481,  224,  224,  224,  224,  429,  144,  379,  254,  254,

      254,  254,   35,   35,   35,   35,   35,   37,   37,   37,
       37,   37,   41,   41,   41,   41,   41,   43,  420,   43,
       43,   43,   44,   44,   44,   44,   44,   54,   54,   54,
       80,  391,   80,   80,   80,   83,   83,  110,  110,  142,
      142,  143,  143,  178,  178,  179,  179,  215,  215,  216,
      216,  250,  250,  251,  251,  284,  284,  285,  285,  313,
      313,  314,  314,  339,  339,  340,  340,  357,  357,  358,
      358,  374,  374,  375,  375,  389,  389,  390,  390,  404,
      404,  405,  405,  418,  418,  419,  419,  432,  432,  434,
      434,  444,  444,  445,  445,  452,  452,  453,  453,  458,

      458,  461,  461,  462,  462,  464,  464,  466,  466,  467,
      467,  469,  469,  471,  471,  472,  472,  474,  474,  476,
      476,  477,  477,  479,  479,  480,  480,  481,  367,  406,
      391,  359,  481,  344,  391,  359,  481,  324,   84,  359,
      315,  290,  359,  315,  481,  481,  481,  481,  481,  351,
      350,  481,  263,   84,  315,  252,  481,  481,  481,  328,
      327,  481,  221,  315,  252,  481,  300,  299,  481,  481,
      190,   84,  252,  180,  481,  270,  269,  481,  146,  252,
      180,  481,  235,  234,  481,  116,   84,  180,  111,  481,
      481,  481,  180,  111,  481,  161,  481,   84,  111,  119,

      111,  481,  481,  481,  481,   89,  481,   84,   44,   45,
       42,   79,  481,   60,   53,  481,   45,   42,  481,   36,
       36,    7,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481
    } ;

static yyconst flex_int16_t yy_chk[1766] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   10,   10,   11,   11,   15,   21,   21,
       28,   15,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   25,   16,   24,   24,   70,   28,   29,
       29,   24,   33,   33,   29,   60,   27,   70,   25,   60,
       16,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   27,   19,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   26,   20,   30,   32,   31,
       31,   34,   31,   99,   26,  174,   30,   38,   38,   99,
       26,   31,   32,   39,   39,   26,   34,   30,   40,   40,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,  174,   48,   50,   50,   50,   50,   53,   53,   53,
       53,   55,   55,   55,   55,   58,   55,   55,   55,   55,
       55,   55,   59,   62,   62,   63,   64,   66,   67,   65,
       69,   71,   63,   68,   58,   59,   65,   75,   68,   72,
       72,   77,   76,   66,   78,   64,   69,   71,   67,   93,
       75,   76,   93,   77,   82,   82,   82,   82,   84,   84,

       84,   84,   78,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,  105,   81,   86,  105,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   87,
      559,   87,   87,   87,   87,   88,   88,   88,   88,   90,
       88,   88,   88,   88,   88,   88,   90,   91,   91,   92,
       94,   95,   95,   96,   97,   98,   96,   94,  100,   95,
      101,   97,   96,   92,   98,  101,  102,  100,  103,  104,
      106,  107,  127,  102,  104,  109,  109,  109,  109,  106,
      555,  113,  107,  113,  113,  113,  113,  127,  103,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,

      133,  108,  112,  133,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  114,  114,  114,  114,  115,
      551,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  116,  116,  116,  116,  117,  120,  117,  117,
      117,  117,  118,  118,  118,  118,  121,  118,  118,  118,
      118,  118,  118,  119,  123,  121,  120,  124,  119,  123,
      126,  128,  128,  129,  126,  130,  547,  131,  136,  124,
      124,  124,  131,  132,  134,  136,  135,  132,  134,  126,
      130,  135,  129,  137,  137,  138,  154,  139,  177,  138,
      160,  160,  177,  134,  139,  140,  140,  140,  140,  140,

      144,  144,  144,  144,  145,  154,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  146,  146,  146,
      146,  147,  173,  147,  147,  147,  147,  148,  175,  148,
      148,  148,  148,  149,  173,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  150,  175,  150,  150,
      150,  150,  151,  543,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  152,  155,  152,  152,  152,
      152,  155,  156,  158,  159,  161,  162,  163,  158,  164,
      166,  167,  163,  168,  170,  166,  156,  169,  171,  159,
      161,  162,  172,  164,  169,  167,  196,  172,  176,  206,

      196,  168,  206,  171,  170,  176,  181,  192,  181,  181,
      181,  181,  182,  542,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  183,  192,  183,  183,  183,
      183,  184,  197,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  185,  197,  185,  185,  185,  185,
      186,  186,  186,  186,  187,  540,  187,  187,  187,  187,
      187,  189,  195,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  190,  190,  190,  190,  191,  193,
      191,  191,  191,  191,  195,  200,  201,  202,  203,  205,
      208,  209,  207,  202,  205,  210,  211,  193,  200,  207,

      210,  212,  213,  208,  201,  231,  203,  214,  230,  209,
      231,  211,  236,  236,  213,  537,  214,  217,  217,  217,
      217,  212,  218,  536,  218,  218,  218,  218,  218,  220,
      230,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  221,  221,  221,  221,  222,  249,  222,  222,
      222,  222,  223,  533,  223,  223,  223,  223,  224,  242,
      224,  224,  224,  224,  225,  249,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  226,  242,  226,
      226,  226,  226,  227,  237,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  228,  232,  228,  228,

      228,  228,  232,  233,  238,  239,  237,  240,  233,  241,
      244,  240,  245,  238,  243,  243,  246,  248,  253,  282,
      253,  253,  253,  253,  241,  282,  248,  239,  266,  265,
      246,  245,  244,  254,  265,  254,  254,  254,  254,  255,
      266,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  256,  530,  256,  256,  256,  256,  257,  276,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  258,  276,  258,  258,  258,  258,  259,  259,  259,
      259,  260,  273,  260,  260,  260,  260,  260,  262,  273,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,

      262,  263,  263,  263,  263,  264,  271,  264,  264,  264,
      264,  272,  274,  275,  277,  271,  272,  274,  278,  277,
      275,  279,  280,  281,  529,  297,  279,  278,  281,  286,
      286,  286,  286,  287,  526,  287,  287,  287,  287,  287,
      338,  280,  289,  297,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  290,  290,  290,  290,  291,
      338,  291,  291,  291,  291,  292,  292,  292,  292,  293,
      306,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  294,  306,  294,  294,  294,  294,  295,  302,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,

      295,  296,  301,  296,  296,  296,  296,  302,  304,  305,
      308,  307,  309,  312,  332,  333,  301,  355,  312,  352,
      333,  305,  355,  332,  308,  352,  304,  334,  305,  307,
      309,  316,  316,  316,  316,  317,  334,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  318,  523,
      318,  318,  318,  318,  319,  373,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  320,  373,  320,
      320,  320,  320,  321,  520,  321,  321,  321,  321,  321,
      323,  335,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  324,  324,  324,  324,  325,  517,  325,

      325,  325,  325,  335,  341,  514,  341,  341,  341,  341,
      341,  343,  511,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  344,  344,  344,  344,  345,  508,
      345,  345,  345,  345,  346,  416,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  347,  416,  347,
      347,  347,  347,  348,  353,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  349,  354,  349,  349,
      349,  349,  353,  356,  361,  369,  361,  361,  361,  361,
      369,  363,  356,  363,  363,  363,  363,  354,  360,  505,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,

      360,  362,  502,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  364,  499,  364,  364,  364,  364,
      364,  366,  370,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  367,  367,  367,  367,  368,  372,
      368,  368,  368,  368,  370,  376,  496,  376,  376,  376,
      376,  376,  379,  379,  379,  379,  493,  372,  378,  491,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  380,  490,  380,  380,  380,  380,  381,  480,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      382,  479,  382,  382,  382,  382,  383,  385,  383,  383,

      383,  383,  383,  383,  383,  383,  383,  383,  383,  384,
      386,  384,  384,  384,  384,  386,  388,  385,  402,  477,
      476,  388,  392,  475,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  393,  402,  393,  393,  393,
      393,  394,  474,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  395,  472,  395,  395,  395,  395,
      396,  471,  396,  396,  396,  396,  396,  398,  470,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      399,  399,  399,  399,  400,  401,  400,  400,  400,  400,
      469,  467,  466,  407,  401,  407,  407,  407,  407,  407,

      409,  465,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  410,  410,  410,  410,  411,  464,  411,
      411,  411,  411,  412,  462,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  413,  461,  413,  413,
      413,  413,  414,  459,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  415,  458,  415,  415,  415,
      415,  422,  453,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  423,  452,  423,  423,  423,  423,
      424,  431,  424,  424,  424,  424,  431,  424,  424,  424,
      424,  424,  424,  425,  450,  425,  425,  425,  425,  426,

      446,  426,  426,  426,  426,  426,  428,  445,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  430,
      444,  430,  430,  430,  430,  436,  443,  436,  436,  436,
      436,  436,  438,  437,  438,  438,  438,  438,  434,  438,
      438,  438,  438,  438,  438,  439,  432,  439,  439,  439,
      439,  440,  427,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  441,  421,  441,  441,  441,  441,
      447,  420,  447,  447,  447,  447,  419,  447,  447,  447,
      447,  447,  447,  448,  418,  448,  448,  448,  448,  449,
      417,  449,  449,  449,  449,  449,  455,  408,  455,  455,

      455,  455,  482,  482,  482,  482,  482,  483,  483,  483,
      483,  483,  484,  484,  484,  484,  484,  485,  405,  485,
      485,  485,  486,  486,  486,  486,  486,  487,  487,  487,
      488,  404,  488,  488,  488,  489,  489,  492,  492,  494,
      494,  495,  495,  497,  497,  498,  498,  500,  500,  501,
      501,  503,  503,  504,  504,  506,  506,  507,  507,  509,
      509,  510,  510,  512,  512,  513,  513,  515,  515,  516,
      516,  518,  518,  519,  519,  521,  521,  522,  522,  524,
      524,  525,  525,  527,  527,  528,  528,  531,  531,  532,
      532,  534,  534,  535,  535,  538,  538,  539,  539,  541,

      541,  544,  544,  545,  545,  546,  546,  548,  548,  549,
      549,  550,  550,  552,  552,  553,  553,  554,  554,  556,
      556,  557,  557,  558,  558,  560,  560,  403,  397,  391,
      390,  389,  387,  377,  375,  374,  371,  365,  359,  358,
      357,  342,  340,  339,  337,  336,  331,  330,  329,  328,
      327,  326,  322,  315,  314,  313,  311,  310,  303,  300,
      299,  298,  288,  285,  284,  283,  270,  269,  268,  267,
      261,  252,  251,  250,  247,  235,  234,  229,  219,  216,
      215,  204,  199,  198,  194,  188,  180,  179,  178,  165,
      157,  153,  143,  142,  141,  125,  122,  111,  110,   89,

       83,   74,   73,   61,   57,   56,   54,   49,   45,   44,
       41,   36,   23,   22,   18,   17,   14,   12,    7,    4,
        3,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[52] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "ClntLexer.l"
#line 5 "ClntLexer.l"
#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 27 "ClntLexer.l"
  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_clntParser_stype yylval;
};
#line 996 "ClntLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 40 "ClntLexer.l"


#line 1099 "ClntLexer.cpp"

	if ( (yy_init) )
		{
		(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 482 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1722 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 42 "ClntLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 43 "ClntLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 44 "ClntLexer.l"
{return clntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 45 "ClntLexer.l"
{return clntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 46 "ClntLexer.l"
{return clntParser::ADDRES_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 47 "ClntLexer.l"
{return clntParser::IA_;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 48 "ClntLexer.l"
{return clntParser::STATELESS_;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 49 "ClntLexer.l"
{return clntParser::STATELESS_;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 51 "ClntLexer.l"
{return clntParser::LOGLEVEL_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 52 "ClntLexer.l"
{return clntParser::LOGMODE_; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 53 "ClntLexer.l"
{return clntParser::LOGNAME_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 55 "ClntLexer.l"
{return clntParser::WORKDIR_;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 57 "ClntLexer.l"
{ return clntParser::PREF_TIME_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 58 "ClntLexer.l"
{ return clntParser::VALID_TIME_; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 59 "ClntLexer.l"
{ return clntParser::T1_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 60 "ClntLexer.l"
{ return clntParser::T2_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 62 "ClntLexer.l"
{return clntParser::OPTION_; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 63 "ClntLexer.l"
{ return clntParser::DNS_SERVER_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 64 "ClntLexer.l"
{ return clntParser::DOMAIN_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 65 "ClntLexer.l"
{ return clntParser::NTP_SERVER_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 66 "ClntLexer.l"
{ return clntParser::TIME_ZONE_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 67 "ClntLexer.l"
{ return clntParser::SIP_SERVER_; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 68 "ClntLexer.l"
{ return clntParser::SIP_DOMAIN_; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 69 "ClntLexer.l"
{ return clntParser::FQDN_; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 70 "ClntLexer.l"
{ return clntParser::NIS_SERVER_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 71 "ClntLexer.l"
{ return clntParser::NIS_DOMAIN_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 72 "ClntLexer.l"
{ return clntParser::NISP_SERVER_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 73 "ClntLexer.l"
{ return clntParser::NISP_DOMAIN_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 75 "ClntLexer.l"
{ return clntParser::REJECT_SERVERS_;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 76 "ClntLexer.l"
{ return clntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 77 "ClntLexer.l"
{ return clntParser::RAPID_COMMIT_;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 78 "ClntLexer.l"
{ return clntParser::UNICAST_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 80 "ClntLexer.l"
;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 82 "ClntLexer.l"
;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 84 "ClntLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 90 "ClntLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 91 "ClntLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 92 "ClntLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 38:
YY_RULE_SETUP
#line 99 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return clntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 108 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return clntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 117 "ClntLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return clntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 127 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return clntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 136 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return clntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 145 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return clntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 154 "ClntLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return clntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 163 "ClntLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return clntParser::STRING_;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 170 "ClntLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return clntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return clntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return clntParser::STRING_;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 191 "ClntLexer.l"
{
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return clntParser::DUID_;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 222 "ClntLexer.l"
{ 
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return clntParser::HEXNUMBER_;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 231 "ClntLexer.l"
{ 
    if(!sscanf(yytext,"%u",&(yylval.ival))) { 
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return clntParser::INTNUMBER_;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 241 "ClntLexer.l"
{return yytext[0];} 
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 245 "ClntLexer.l"
ECHO;
	YY_BREAK
#line 1578 "ClntLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 482 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 482 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 481);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
    	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
    	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
#endif
#line 245 "ClntLexer.l"



