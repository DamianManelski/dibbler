
#line 3 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 80
#define YY_END_OF_BUFFER 81
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[697] =
    {   0,
        1,    1,    0,    0,    0,    0,   81,   79,    2,    1,
        1,   79,   62,   79,   79,   78,   78,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   66,   66,   80,    1,
        1,    1,    0,   74,   62,    0,   74,   64,   63,   78,
        0,    0,   77,    0,   71,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,    6,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   40,   75,   75,
       75,   75,   75,   75,   18,   19,    7,   75,   75,   75,
       75,   75,   65,   63,   78,    0,    0,   70,   76,   69,

       69,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   78,    0,    0,    0,   68,   68,
        0,   69,    0,   69,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   27,    8,   75,   75,   75,   75,   75,
       75,    0,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   78,
        0,    0,    0,    0,   68,    0,   68,    0,   69,   69,
       69,   69,   75,   75,   75,   75,   75,   75,   75,   75,

       75,   75,   75,    3,   75,   75,   75,   75,   75,   75,
       75,    0,   75,   75,   75,    9,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,    0,    0,    0,    0,   68,   68,   68,   68,
        0,   69,   69,   69,    0,   69,   75,   75,   75,   75,
       75,   75,   75,   22,   75,   75,   75,   75,   28,   75,
       75,   75,   75,   75,   75,   75,    0,    0,   75,   75,
       75,   75,   20,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,    0,    0,    0,
       68,   68,   68,    0,   68,    0,    0,   69,   69,   69,

       69,   75,    5,   75,   75,   75,   75,   75,   44,   42,
       75,   75,   75,   75,   75,   75,   75,   75,   75,    0,
        0,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   37,   75,   75,   75,    0,
        0,    0,    0,    0,   68,   68,   68,   68,    0,   69,
       69,   69,    0,   69,   75,   75,   75,   75,   75,   75,
       75,   75,   43,   75,   75,   75,   75,   33,   75,   12,
       13,   75,    0,    0,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       14,    0,    0,    0,   68,   68,   68,    0,   68,   73,

       69,   69,   69,   69,   75,   75,   75,   75,   75,   75,
       75,   75,   41,   75,   75,   75,   11,   75,    0,    0,
       75,   75,    4,   75,   75,   75,   75,   75,   75,   75,
       75,   10,   75,   24,   75,   75,    0,    0,    0,   72,
       68,   68,   68,   68,   69,   69,   69,    0,   69,   75,
       75,   75,   75,   75,   75,   75,   21,   75,   75,   75,
       75,    0,    0,   30,   29,   23,   75,   75,   75,   75,
       75,   75,   26,   25,   75,   75,   75,    0,    0,   68,
       68,   68,    0,   68,   69,   69,   69,   69,   60,   75,
       75,   75,   75,   51,   75,   75,   75,   47,   75,   32,

       31,   75,   75,   75,   75,   75,   15,   75,   75,   45,
        0,    0,    0,   68,   68,   68,   68,   69,   69,   69,
        0,   69,   75,   75,   49,   75,   52,   59,   75,   75,
       75,   75,   75,   36,   75,   75,   75,    0,    0,   68,
       68,   68,    0,   68,   69,   69,   69,   69,   75,   75,
       75,   75,   48,   75,   75,   75,   75,   34,   75,   75,
        0,    0,    0,   68,   68,   68,   68,   69,   69,   69,
        0,   69,   75,   75,   75,   75,   61,   75,   75,   75,
       75,   17,    0,   67,   70,   68,   68,   68,    0,   68,
       69,   69,   69,   69,   75,   75,   53,   75,   75,   35,

       75,   75,    0,   67,    0,   68,   68,   68,   68,   68,
       69,   69,   69,    0,   69,   75,   75,   54,   75,   75,
       75,   75,   75,   75,   67,   70,   68,    0,   68,   68,
       68,   68,   69,   69,   69,   75,   75,   75,   75,   75,
       75,   16,   39,   75,   67,   68,   68,   68,   68,   69,
       69,   69,   75,   75,   55,   56,   57,   58,   75,   68,
       68,    0,   68,   68,   69,   75,   50,   75,   68,   68,
       69,   75,   75,   68,   68,    0,   46,   38,   68,   68,
       68,   68,    0,   68,   68,   68,   68,    0,   68,   68,
       68,   68,    0,   68,   68,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
        1,    1,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,    1,    1,    1,    1,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    3,    3,    3,    3,    3,    3,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[761] =
    {   0,
        0,    0,  984,  983,    0,    0,  981, 3741, 3741,   72,
       74,  958,    0,  943,   71,   71,   34,  927,  134,  183,
      184,  186,  218,  275,   77,   71,   58,   72,   66,  185,
       88,  192,  292,   74,   89,  176, 3741,  936, 3741,  115,
      129,  227,  942, 3741,    0,  927,  926, 3741,    0,  337,
      910,  258, 3741,    0,  381,    0,  423,  188,    0,  179,
      182,  204,  215,  249,  255,  266,  282,  278,  290,  299,
      288,  288,  281,  279,  920,  283,  335,    0,  357,  347,
      360,  386,  390,  438,    0,    0,    0,  394,  425,  423,
      422,  419, 3741,    0,  492,  355,  907,  536,    0,  580,

      449,  622,  431,  459,  468,  472,  918,  477,  475,  475,
      467,  506,  514,  515,  516,  556,  917,  546,  253,  626,
      916,  561,  598,  596,  601,  613,  884,  613,  625,  631,
      634,  629,  635,  629,  676,  561,  833,  832,  722,  694,
      703,  766,  808,  740,  850,  742,  723,  842,  737,  770,
      781,  841,  773,  840,    0,  787,  788,  805,  811,  846,
      852,  839,  864,  847,  862,  845,  850,  861,  863,  866,
      855,  894,  868,  871,  838,  874,  872,  888,  837,  923,
      823,  822,  821,  939,  951,  993,  969, 1011, 1037, 1055,
     1081, 1099,  820,  959,  974, 1032, 1098, 1043, 1095, 1087,

     1102, 1093, 1085,    0, 1096, 1086, 1106, 1111, 1102, 1117,
     1105, 1116, 1106, 1118, 1110,    0, 1129, 1122, 1119, 1114,
      831, 1119, 1131, 1137, 1148, 1142, 1135, 1130, 1138,  800,
     1140, 1155,  787,  786,  785, 1177, 1197, 1215, 1241, 1259,
     1224, 1285,  784, 1297, 1339, 1315, 1204, 1230, 1246, 1317,
     1307,  795, 1304,    0, 1309, 1327, 1325, 1338,    0, 1330,
      793, 1340, 1332, 1351, 1343, 1350, 1343, 1354, 1347, 1343,
     1356, 1345,    0, 1359,  792, 1369,  791, 1354, 1361, 1357,
     1386,  790, 1377, 1373, 1382,  789, 1386,  776,  775, 1411,
     1433,  746, 1445, 1487, 1463, 1505, 1531, 1542, 1560, 1586,

     1604, 1379,    0, 1448, 1484, 1505, 1596, 1528,    0, 1548,
     1589, 1601, 1602, 1595, 1604, 1606, 1614, 1615,  757, 1608,
     1604, 1622, 1602, 1616, 1604, 1623, 1624, 1614, 1620,  756,
     1639, 1619, 1623, 1625, 1630,    0, 1647, 1638, 1640,  743,
      742,  741, 1682, 1696, 1707, 1725, 1751, 1769, 1734, 1795,
      740, 1807, 1849, 1825, 1659, 1696, 1754, 1769, 1817, 1816,
     1820, 1828,    0, 1844, 1846,  724, 1846,    0, 1850,    0,
        0, 1847, 1863, 1843, 1857, 1862, 1861, 1864,  721, 1865,
     1858, 1867, 1869, 1865, 1877, 1864, 1878, 1880, 1895, 1886,
        0,  658,  657, 1921, 1940,  656, 1952, 1994, 1970, 1979,

     2038, 2012, 2082, 2056, 1891,  659, 1978, 1990, 2045, 2049,
     2063, 2073,    0, 2072, 2080, 2090,    0, 2077, 2087, 2092,
     2084, 2081,    0, 2082, 2089, 2090, 2090, 2086, 2096, 2092,
     2089,    0, 2112,    0, 2111, 2130,  646,  645,  644, 2152,
     2173, 2191, 2217, 2235, 2261,  643, 2273, 2315, 2291, 2118,
     2146, 2179, 2232, 2293, 2292, 2289,    0, 2298, 2300, 2321,
     2322, 2314, 2311,    0,    0,    0, 2321, 2326, 2327, 2324,
     2312, 2317,    0,    0,  654, 2316, 2334,  641,  603, 2375,
      602, 2387, 2429, 2405, 2473, 2447, 2517, 2491,    0, 2325,
      613, 2347,  612,    0, 2397, 2417, 2477,    0, 2492, 3741,

     3741, 2493, 2508, 2520, 2508, 2524,    0, 2516, 2522,    0,
      599,  598,  597, 2569, 2543, 2613, 2587, 2631,  595, 2657,
     2699, 2675, 2527, 2538,    0, 2693,    0,    0, 2590, 2630,
     2676, 2660, 2682,    0, 2681, 2695, 2698,  594,  593, 2724,
      592, 2750, 2792, 2768, 2836, 2810, 2880, 2854,  603, 2709,
     2770, 2784,    0, 2820, 2841, 2857, 2869,    0,  602, 2885,
      589,  550,  549, 2928, 2902, 2972, 2946, 2990,  548, 3016,
     3058, 3034, 2874, 2916,  551, 2953,    0, 2989, 3021, 3031,
     3023,    0,  546,  545,    0, 3079,  516, 3102, 3144, 3120,
     3188, 3162, 3232, 3206, 3053, 3118,    0,  250, 3131,    0,

     3181, 3198,  515,  514,  513,  512, 3276, 3251, 3320, 3294,
     3338,  511, 3364,    0, 3382, 3241, 3279,    0,  318,  510,
      516, 3297, 3332, 3361,  501, 3741,  474,    0, 3418,  472,
     3430, 3448, 3474, 3492,    0, 3383, 3434,  476,  473,  474,
      475,    0,    0, 3436,  467,  466,  464, 3518, 3536, 3562,
      459,    0, 3487, 3481,    0,    0,    0,    0, 3528,  458,
      405,    0, 3575, 3741,    0, 3520,    0, 3538,  403,  402,
     3741, 3555, 3569,  401,  400,    0,    0,    0,  399,  398,
      397,  395,    0,  394,  393,  392,  391,    0,  390,  361,
      360,  359,    0,  358,  357, 3741, 3624, 3628, 3632, 3636,

     3640, 3644, 3646,  375, 3648, 3650, 3652, 3654, 3656, 3658,
     3660, 3662, 3664, 3666, 3668, 3670, 3672, 3674, 3676, 3678,
     3680, 3682, 3684, 3686, 3688, 3690, 3692, 3694, 3696,  335,
     3698, 3700,  329, 3702, 3704,  311,  282, 3706, 3708,  278,
     3710,  266,  264, 3712, 3714, 3716,  225, 3718, 3720, 3722,
      215, 3724, 3726, 3728,  143, 3730, 3732, 3734,   79, 3736
    } ;

static yyconst flex_int16_t yy_def[761] =
    {   0,
      696,    1,  697,  697,  698,  698,  696,  696,  696,  696,
      696,  699,  700,  701,  696,  696,   16,  696,  696,   19,
       19,   19,   19,   19,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  696,  696,  696,  696,
      696,  696,  699,  696,  700,  701,  696,  696,  702,  696,
      703,   50,  696,  704,  696,   24,   24,   57,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  696,  702,  696,   95,  705,  696,  704,  696,

      100,   57,  102,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  696,  135,  706,  707,  696,  139,
      696,  696,  696,  142,  102,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  696,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  136,
      136,  708,  709,  696,  696,  696,  185,  696,  696,  189,
      696,  191,  145,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  696,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  696,  710,  711,  696,  696,  237,  696,  239,
      696,  696,  696,  696,  696,  244,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  696,  696,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  712,  713,  696,
      696,  696,  696,  696,  293,  696,  696,  696,  298,  696,

      300,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  696,
      696,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  696,
      714,  715,  696,  696,  696,  345,  696,  347,  696,  696,
      696,  696,  696,  352,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  696,  696,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  716,  717,  696,  696,  696,  696,  696,  397,  696,

      696,  401,  696,  403,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  696,  696,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  696,  718,  719,  696,
      696,  441,  696,  443,  696,  696,  696,  696,  447,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  696,  696,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  720,  721,  696,
      696,  696,  696,  482,  696,  485,  696,  487,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  696,

      696,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      696,  722,  723,  696,  514,  696,  516,  696,  696,  696,
      696,  520,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  724,  725,  696,
      696,  696,  696,  542,  696,  545,  696,  547,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      696,  726,  727,  696,  564,  696,  566,  696,  696,  696,
      696,  570,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  728,  729,  730,  696,  696,  696,  696,  588,
      696,  591,  696,  593,   24,   24,   24,   24,   24,   24,

       24,   24,  696,  731,  696,  732,  696,  607,  696,  609,
      696,  696,  696,  733,  613,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  734,  696,  735,  736,  696,  696,
      696,  631,  696,  633,  737,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  696,  738,  739,  696,  648,  696,
      696,  740,   24,   24,   24,   24,   24,   24,   24,  696,
      741,  742,  696,  696,  743,   24,   24,   24,  744,  745,
      696,   24,   24,  696,  746,  747,   24,   24,  748,  749,
      696,  750,  751,  752,  753,  696,  754,  755,  756,  757,
      696,  758,  759,  760,  696,    0,  696,  696,  696,  696,

      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696
    } ;

static yyconst flex_int16_t yy_nxt[3816] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   20,   21,   22,   23,   24,   24,
       25,   24,   24,   26,   27,   28,   29,   30,   24,   31,
       32,   33,   34,   35,   36,   24,   24,   24,   19,   20,
       20,   21,   22,   23,   24,   24,   25,   24,   24,   26,
       27,   28,   29,   30,   24,   31,   32,   33,   34,   35,
       36,   24,   24,   24,   40,   41,   42,   41,   48,  696,
       73,  610,   49,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   51,   52,   52,   52,   52,   52,   52,   68,

       53,   71,   74,   77,   69,  696,   73,   72,   75,   89,
       80,   90,   70,   76,   81,   91,   54,   40,   41,   52,
       52,   52,   52,   52,   52,   68,   53,   71,   74,   77,
       69,   42,   41,   72,   75,   89,   80,   90,   70,   76,
       81,   91,   54,   56,   56,  690,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   51,   57,   57,   57,   58,
       57,   57,   56,   59,   56,   56,   56,   56,   56,   60,
       56,   56,   56,   56,   56,   56,   61,   56,   56,   56,
       56,   56,   57,   57,   57,   58,   57,   57,   56,   59,
       56,   56,   56,   56,   56,   60,   56,   56,   56,   56,

       56,   56,   61,   56,   56,   56,   56,   56,   57,   57,
       78,   57,   92,  103,   62,  104,   82,  685,   56,   63,
       64,   56,   83,  105,   79,   56,   65,  680,   56,   40,
       41,   66,  106,   84,   57,   57,   78,   57,   92,  103,
       62,  104,   82,   57,   56,   63,   64,   56,   83,  105,
       79,   56,   65,   56,   56,  107,   67,   66,  106,   84,
       56,  162,  163,  618,  619,  620,  671,  621,  670,   57,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   56,
      665,  107,   67,  108,  652,  109,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,  696,   56,   56,   56,

       56,   56,   56,  110,   56,   85,   86,  111,  112,  108,
       56,  109,  113,  647,   87,  116,  117,   56,  118,  119,
      121,  114,   88,   56,   56,   56,   56,   56,   56,  110,
       56,  635,  638,  111,  112,  639,   56,  606,  113,  115,
       87,  116,  117,   56,  118,  119,  121,  114,   88,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   51,   96,
       96,   96,   96,   96,   96,  115,   53,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  122,   99,  693,  693,
      693,  688,  693,  123,  124,   96,   96,   96,   96,   96,
       96,  125,   53,  100,  100,  100,  100,  100,  100,  100,

      100,  100,  122,  101,  101,  101,  101,  101,  101,  123,
      124,  688,  688,  683,  688,  683,  683,  125,  676,  683,
      676,  676,  662,  676,  662,  126,  662,  127,  130,  101,
      101,  101,  101,  101,  101,  102,  102,  102,  102,  102,
      102,  102,  102,  102,   51,  102,  102,  102,  102,  102,
      102,  126,   59,  127,  130,  131,  132,  133,  134,  696,
      128,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      146,  102,  102,  102,  102,  102,  102,  129,   59,  628,
      614,  131,  132,  133,  134,  662,  128,  628,  605,  658,
      657,  656,  655,  589,  147,  628,  146,  148,  149,  151,

      152,  153,  154,  129,  135,  135,  135,  135,  135,  135,
      135,  135,  135,   51,  136,  136,  136,  136,  136,  136,
      147,   53,  605,  148,  149,  151,  152,  153,  154,  641,
      640,  155,  571,  628,  626,  605,  563,  543,  156,  157,
      136,  136,  136,  136,  136,  136,  158,   53,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  155,  140,  140,
      140,  140,  140,  140,  156,  157,  605,  563,  597,  521,
      585,  563,  158,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  159,  161,  140,  140,  140,  140,  140,  140,
      141,  167,  142,  142,  142,  142,  142,  142,  142,  142,

      142,  143,  144,  144,  144,  144,  144,  144,  159,  161,
      513,  581,  573,  483,  563,  513,  448,  167,   98,  513,
      439,  526,  524,  398,  513,  168,  169,  170,  144,  144,
      144,  144,  144,  144,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  171,  145,  145,  145,  145,  145,  145,
      164,  168,  169,  170,  173,  174,  165,  175,  176,  177,
      178,  179,  439,  508,  353,   98,  439,  342,  451,  171,
      145,  145,  145,  145,  145,  145,  164,  294,  439,  342,
      173,  174,  165,  175,  176,  177,  178,  179,  180,  180,
      180,  180,  180,  180,  180,  180,  180,   51,  181,  181,

      181,  181,  181,  181,  696,   53,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  181,  181,  181,  181,  181,  181,
      425,   53,  184,  415,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  186,  187,  187,  187,  187,  187,  187,
      696,  194,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  245,   98,  342,  235,  383,  372,  186,  195,  196,
      187,  187,  187,  187,  187,  187,  141,  198,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  143,  190,  190,
      190,  190,  190,  190,  195,  196,  342,  235,  338,  334,

      329,  327,  314,  198,  307,  143,   98,  235,  138,  285,
      199,  200,  202,  204,  190,  190,  190,  190,  190,  190,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  205,
      192,  192,  192,  192,  192,  192,  199,  200,  202,  204,
      276,  696,  235,  138,  696,  206,  232,  228,  212,  203,
      201,  197,  207,   98,  138,  205,  192,  192,  192,  192,
      192,  192,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  206,  193,  193,  193,  193,  193,  193,  207,  208,
      209,  210,  211,  215,  216,  217,  218,  219,  221,  213,
      222,  220,  223,  172,  226,  227,  229,  230,  193,  193,

      193,  193,  193,  193,  214,  208,  209,  210,  211,  215,
      216,  217,  218,  219,  221,  213,  222,  220,  223,  224,
      226,  227,  229,  230,  231,  166,  160,  150,  138,  120,
      214,   98,   46,   47,  225,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  696,  224,   44,   93,   55,   47,
      231,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      225,  184,   44,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  186,  238,  238,  238,  238,  238,  238,  696,
      696,  238,  238,  238,  238,  238,  238,  238,  238,  238,
       38,   38,  696,  696,  696,  696,  247,  696,  696,  238,

      238,  238,  238,  238,  238,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  248,  240,  240,  240,  240,  240,
      240,  241,  247,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  696,  696,  696,  696,  696,  696,  696,  696,
      248,  240,  240,  240,  240,  240,  240,  141,  696,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  143,  243,
      243,  243,  243,  243,  243,  696,  249,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  696,  696,  696,  696,
      696,  696,  696,  696,  252,  243,  243,  243,  243,  243,
      243,  141,  249,  244,  244,  244,  244,  244,  244,  244,

      244,  244,  245,  246,  246,  246,  246,  246,  246,  696,
      252,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      250,  253,  254,  258,  251,  259,  260,  261,  255,  246,
      246,  246,  246,  246,  246,  256,  262,  263,  264,  265,
      266,  267,  269,  257,  270,  271,  250,  253,  254,  258,
      251,  259,  260,  261,  255,  272,  268,  273,  274,  275,
      277,  256,  262,  263,  264,  265,  266,  267,  269,  257,
      270,  271,  278,  279,  280,  281,  282,  283,  284,  286,
      287,  272,  268,  273,  274,  275,  277,  290,  696,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  278,  279,

      280,  281,  282,  283,  284,  286,  287,  184,  696,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  186,  292,
      292,  292,  292,  292,  292,  696,  302,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  292,  292,  292,  292,  292,
      292,  184,  302,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  294,  295,  295,  295,  295,  295,  295,  696,
      303,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      696,  696,  304,  696,  696,  696,  696,  696,  696,  295,
      295,  295,  295,  295,  295,  141,  303,  297,  297,  297,

      297,  297,  297,  297,  297,  297,  143,  141,  304,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  245,  299,
      299,  299,  299,  299,  299,  696,  696,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  696,  696,  696,  696,
      696,  305,  306,  308,  309,  299,  299,  299,  299,  299,
      299,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      310,  301,  301,  301,  301,  301,  301,  305,  306,  308,
      309,  311,  312,  313,  315,  316,  317,  318,  319,  320,
      321,  322,  323,  324,  325,  326,  310,  301,  301,  301,
      301,  301,  301,  328,  330,  331,  332,  311,  312,  313,

      315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
      325,  326,  333,  335,  336,  337,  339,  696,  355,  328,
      330,  331,  332,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  696,  696,  696,  696,  696,  696,  333,  335,
      336,  337,  339,  184,  355,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  186,  184,  696,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  294,  346,  346,  346,
      346,  346,  346,  696,  696,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  696,  696,  696,  696,  696,  696,
      356,  696,  696,  346,  346,  346,  346,  346,  346,  347,

      347,  347,  347,  347,  347,  347,  347,  347,  357,  348,
      348,  348,  348,  348,  348,  349,  356,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  696,  358,  696,  696,
      696,  696,  696,  696,  357,  348,  348,  348,  348,  348,
      348,  141,  696,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  141,  358,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  245,  351,  351,  351,  351,  351,  351,
      696,  362,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  696,  696,  696,  696,  696,  696,  696,  696,  363,
      351,  351,  351,  351,  351,  351,  141,  362,  352,  352,

      352,  352,  352,  352,  352,  352,  352,  353,  354,  354,
      354,  354,  354,  354,  696,  363,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  359,  364,  365,  366,  367,
      368,  360,  369,  361,  354,  354,  354,  354,  354,  354,
      370,  371,  373,  374,  375,  376,  377,  378,  379,  380,
      381,  359,  364,  365,  366,  367,  368,  360,  369,  361,
      382,  384,  385,  386,  387,  388,  370,  371,  373,  374,
      375,  376,  377,  378,  379,  380,  381,  389,  390,  391,
      696,  405,  696,  696,  696,  696,  382,  384,  385,  386,
      387,  388,  394,  696,  343,  343,  343,  343,  343,  343,

      343,  343,  343,  389,  390,  391,  184,  405,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  184,  696,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  294,  396,
      396,  396,  396,  396,  396,  696,  406,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  396,  396,  396,  396,  396,
      396,  184,  406,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  398,  399,  399,  399,  399,  399,  399,  696,
      407,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      696,  696,  408,  696,  696,  696,  696,  696,  696,  399,

      399,  399,  399,  399,  399,  141,  407,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  245,  141,  408,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  353,  402,
      402,  402,  402,  402,  402,  696,  696,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  696,  696,  696,  696,
      696,  409,  410,  411,  412,  402,  402,  402,  402,  402,
      402,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      413,  404,  404,  404,  404,  404,  404,  409,  410,  411,
      412,  414,  416,  417,  418,  419,  420,  421,  422,  423,
      424,  426,  427,  428,  429,  430,  413,  404,  404,  404,

      404,  404,  404,  431,  432,  433,  434,  414,  416,  417,
      418,  419,  420,  421,  422,  423,  424,  426,  427,  428,
      429,  430,  435,  436,  696,  450,  696,  696,  696,  431,
      432,  433,  434,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  696,  696,  696,  696,  696,  696,  435,  436,
      184,  450,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  294,  184,  696,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  398,  442,  442,  442,  442,  442,  442,
      696,  696,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  400,  400,  400,  400,  400,  400,  400,  400,  400,

      442,  442,  442,  442,  442,  442,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  452,  444,  444,  444,  444,
      444,  444,  696,  453,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  696,  696,  696,  696,  696,  696,  696,
      696,  452,  444,  444,  444,  444,  444,  444,  141,  453,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  353,
      446,  446,  446,  446,  446,  446,  696,  454,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  696,  696,  696,
      696,  696,  696,  696,  455,  456,  446,  446,  446,  446,
      446,  446,  141,  454,  447,  447,  447,  447,  447,  447,

      447,  447,  447,  448,  449,  449,  449,  449,  449,  449,
      455,  456,  457,  458,  459,  460,  461,  462,  463,  464,
      465,  466,  467,  469,  470,  471,  472,  473,  474,  468,
      449,  449,  449,  449,  449,  449,  475,  476,  457,  458,
      459,  460,  461,  462,  463,  464,  465,  466,  467,  469,
      470,  471,  472,  473,  474,  468,  477,  696,  489,  696,
      696,  696,  475,  476,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  696,  696,  696,  490,  696,  696,  696,
      696,  696,  477,  184,  489,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  398,  481,  481,  481,  481,  481,

      481,  696,  490,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  696,  696,  696,  696,  696,  696,  696,  696,
      491,  481,  481,  481,  481,  481,  481,  184,  696,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  483,  484,
      484,  484,  484,  484,  484,  696,  491,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  696,  696,  492,  696,
      696,  696,  696,  696,  696,  484,  484,  484,  484,  484,
      484,  141,  696,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  353,  141,  492,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  448,  486,  486,  486,  486,  486,

      486,  696,  696,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  696,  696,  696,  696,  696,  493,  494,  495,
      496,  486,  486,  486,  486,  486,  486,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  497,  488,  488,  488,
      488,  488,  488,  493,  494,  495,  496,  498,  499,  500,
      501,  502,  503,  504,  505,  506,  507,  509,  510,  696,
      523,  696,  497,  488,  488,  488,  488,  488,  488,  696,
      696,  696,  525,  498,  499,  500,  501,  502,  503,  504,
      505,  506,  507,  509,  510,  184,  523,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  398,  184,  525,  514,

      514,  514,  514,  514,  514,  514,  514,  514,  483,  515,
      515,  515,  515,  515,  515,  696,  696,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  696,  696,  696,  696,
      696,  696,  527,  696,  696,  515,  515,  515,  515,  515,
      515,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      528,  517,  517,  517,  517,  517,  517,  696,  527,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  696,  696,
      696,  696,  696,  696,  696,  696,  528,  517,  517,  517,
      517,  517,  517,  141,  696,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  448,  519,  519,  519,  519,  519,

      519,  696,  529,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  696,  696,  696,  696,  696,  696,  696,  530,
      531,  519,  519,  519,  519,  519,  519,  141,  529,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  521,  522,
      522,  522,  522,  522,  522,  530,  531,  532,  533,  534,
      535,  536,  537,  696,  549,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  696,  522,  522,  522,  522,  522,
      522,  696,  550,  532,  533,  534,  535,  536,  537,  184,
      549,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      483,  541,  541,  541,  541,  541,  541,  696,  550,  544,

      544,  544,  544,  544,  544,  544,  544,  544,  696,  696,
      696,  696,  696,  696,  696,  696,  553,  541,  541,  541,
      541,  541,  541,  184,  696,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  543,  544,  544,  544,  544,  544,
      544,  141,  553,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  448,  696,  696,  696,  696,  696,  696,  696,
      554,  544,  544,  544,  544,  544,  544,  141,  696,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  521,  546,
      546,  546,  546,  546,  546,  696,  554,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  696,  696,  696,  696,

      696,  696,  555,  556,  557,  546,  546,  546,  546,  546,
      546,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      558,  548,  548,  548,  548,  548,  548,  551,  555,  556,
      557,  559,  560,  552,  184,  574,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  483,  558,  548,  548,  548,
      548,  548,  548,  551,  696,  696,  696,  559,  560,  552,
      184,  574,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  543,  565,  565,  565,  565,  565,  565,  696,  696,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  696,
      696,  696,  696,  696,  696,  575,  696,  696,  565,  565,

      565,  565,  565,  565,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  576,  567,  567,  567,  567,  567,  567,
      696,  575,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  696,  696,  696,  696,  696,  696,  696,  696,  576,
      567,  567,  567,  567,  567,  567,  141,  696,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  521,  569,  569,
      569,  569,  569,  569,  696,  577,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  696,  696,  696,  696,  696,
      696,  696,  578,  579,  569,  569,  569,  569,  569,  569,
      141,  577,  570,  570,  570,  570,  570,  570,  570,  570,

      570,  571,  572,  572,  572,  572,  572,  572,  578,  579,
      580,  582,  696,  595,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  696,  696,  696,  696,  696,  572,  572,
      572,  572,  572,  572,  696,  696,  580,  582,  184,  595,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  543,
      587,  587,  587,  587,  587,  587,  696,  596,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  696,  696,  696,
      696,  696,  696,  696,  696,  598,  587,  587,  587,  587,
      587,  587,  184,  596,  588,  588,  588,  588,  588,  588,
      588,  588,  588,  589,  590,  590,  590,  590,  590,  590,

      141,  598,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  521,  696,  696,  696,  696,  696,  696,  696,  599,
      590,  590,  590,  590,  590,  590,  141,  696,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  571,  592,  592,
      592,  592,  592,  592,  696,  599,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  696,  696,  696,  696,  696,
      600,  601,  602,  696,  592,  592,  592,  592,  592,  592,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  616,
      594,  594,  594,  594,  594,  594,  600,  601,  602,  184,
      696,  344,  344,  344,  344,  344,  344,  344,  344,  344,

      543,  696,  696,  696,  696,  616,  594,  594,  594,  594,
      594,  594,  184,  696,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  589,  608,  608,  608,  608,  608,  608,
      696,  696,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  696,  696,  696,  696,  696,  696,  617,  696,  696,
      608,  608,  608,  608,  608,  608,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  622,  610,  610,  610,  610,
      610,  610,  696,  617,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  696,  696,  696,  696,  696,  696,  696,
      696,  622,  610,  610,  610,  610,  610,  610,  141,  696,

      611,  611,  611,  611,  611,  611,  611,  611,  611,  571,
      612,  612,  612,  612,  612,  612,  696,  623,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  696,  696,  696,
      696,  696,  696,  696,  624,  696,  612,  612,  612,  612,
      612,  612,  141,  623,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  614,  615,  615,  615,  615,  615,  615,
      624,  696,  696,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  696,  696,  696,  696,  696,  696,  696,  636,
      615,  615,  615,  615,  615,  615,  184,  696,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  589,  630,  630,

      630,  630,  630,  630,  696,  636,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  637,  696,  696,  696,  696,
      696,  696,  696,  642,  630,  630,  630,  630,  630,  630,
      184,  696,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  637,  632,  632,  632,  632,  632,  632,  141,  642,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  571,
      696,  696,  696,  696,  696,  696,  696,  643,  632,  632,
      632,  632,  632,  632,  141,  696,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  614,  634,  634,  634,  634,
      634,  634,  696,  643,  634,  634,  634,  634,  634,  634,

      634,  634,  634,  644,  696,  696,  696,  696,  696,  696,
      696,  696,  634,  634,  634,  634,  634,  634,  696,  696,
      696,  696,  696,  696,  696,  653,  696,  696,  184,  644,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  589,
      184,  696,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  653,  649,  649,  649,  649,  649,  649,  696,  654,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  696,
      696,  696,  696,  696,  696,  696,  696,  659,  649,  649,
      649,  649,  649,  649,  141,  654,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  614,  651,  651,  651,  651,

      651,  651,  696,  659,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  666,  696,  696,  696,  696,  696,  696,
      696,  667,  651,  651,  651,  651,  651,  651,  184,  696,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  666,
      664,  664,  664,  664,  664,  664,  696,  667,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  696,  668,  696,
      672,  696,  696,  696,  696,  696,  664,  664,  664,  664,
      664,  664,  141,  673,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  614,  668,  184,  672,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  677,  678,  696,  673,

      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  677,  678,   37,   37,   37,   37,   39,   39,
       39,   39,   43,   43,   43,   43,   45,  696,   45,   45,
       46,   46,   46,   46,   94,  696,   94,   94,   97,   97,
      137,  137,  182,  182,  183,  183,  233,  233,  234,  234,
      288,  288,  289,  289,  340,  340,  341,  341,  392,  392,
      393,  393,  437,  437,  438,  438,  478,  478,  479,  479,
      511,  511,  512,  512,  538,  538,  539,  539,  561,  561,
      562,  562,  583,  583,  584,  584,  603,  603,  604,  604,

      625,  625,  627,  627,  645,  645,  646,  646,  660,  660,
      661,  661,  669,  669,  674,  674,  675,  675,  679,  679,
      681,  681,  682,  682,  684,  684,  686,  686,  687,  687,
      689,  689,  691,  691,  692,  692,  694,  694,  695,  695,
        7,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696
    } ;

static yyconst flex_int16_t yy_chk[3816] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   10,   10,   11,   11,   15,   17,
       27,  759,   15,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   25,

       16,   26,   28,   29,   25,   17,   27,   26,   28,   34,
       31,   35,   25,   28,   31,   35,   16,   40,   40,   16,
       16,   16,   16,   16,   16,   25,   16,   26,   28,   29,
       25,   41,   41,   26,   28,   34,   31,   35,   25,   28,
       31,   35,   16,   19,   19,  755,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   20,   21,
       30,   22,   36,   58,   21,   60,   32,  751,   20,   21,
       21,   22,   32,   61,   30,   20,   21,  747,   22,   42,
       42,   22,   62,   32,   20,   21,   30,   22,   36,   58,
       21,   60,   32,   23,   20,   21,   21,   22,   32,   61,
       30,   20,   21,   23,   22,   63,   23,   22,   62,   32,
       23,  119,  119,  598,  598,  598,  743,  598,  742,   23,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   23,
      740,   63,   23,   64,  737,   65,   23,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   66,   24,   33,   33,   67,   68,   64,
       24,   65,   69,  736,   33,   71,   72,   24,   73,   74,
       76,   70,   33,   24,   24,   24,   24,   24,   24,   66,
       24,  733,  619,   67,   68,  619,   24,  730,   69,   70,
       33,   71,   72,   24,   73,   74,   76,   70,   33,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   70,   50,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   77,  704,  695,  694,
      692,  691,  690,   79,   80,   50,   50,   50,   50,   50,
       50,   81,   50,   55,   55,   55,   55,   55,   55,   55,

       55,   55,   77,   55,   55,   55,   55,   55,   55,   79,
       80,  689,  687,  686,  685,  684,  682,   81,  681,  680,
      679,  675,  674,  670,  669,   82,  661,   83,   88,   55,
       55,   55,   55,   55,   55,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   82,   57,   83,   88,   89,   90,   91,   92,  101,
       84,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      103,   57,   57,   57,   57,   57,   57,   84,   57,  660,
      651,   89,   90,   91,   92,  647,   84,  646,  645,  641,
      640,  639,  638,  630,  104,  627,  103,  105,  106,  108,

      109,  110,  111,   84,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
      104,   95,  625,  105,  106,  108,  109,  110,  111,  621,
      620,  112,  612,  606,  605,  604,  603,  587,  113,  114,
       95,   95,   95,   95,   95,   95,  115,   95,   98,   98,
       98,   98,   98,   98,   98,   98,   98,  112,   98,   98,
       98,   98,   98,   98,  113,  114,  584,  583,  575,  569,
      563,  562,  115,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  116,  118,   98,   98,   98,   98,   98,   98,
      100,  122,  100,  100,  100,  100,  100,  100,  100,  100,

      100,  100,  100,  100,  100,  100,  100,  100,  116,  118,
      561,  559,  549,  541,  539,  538,  519,  122,  513,  512,
      511,  493,  491,  481,  479,  123,  124,  125,  100,  100,
      100,  100,  100,  100,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  126,  102,  102,  102,  102,  102,  102,
      120,  123,  124,  125,  128,  129,  120,  130,  131,  132,
      133,  134,  478,  475,  446,  439,  438,  437,  406,  126,
      102,  102,  102,  102,  102,  102,  120,  396,  393,  392,
      128,  129,  120,  130,  131,  132,  133,  134,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,

      135,  135,  135,  135,  140,  135,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  135,  135,  135,  135,  135,  135,
      379,  135,  139,  366,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      144,  146,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  351,  342,  341,  340,  330,  319,  292,  146,  147,
      139,  139,  139,  139,  139,  139,  142,  149,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  146,  147,  289,  288,  286,  282,

      277,  275,  261,  149,  252,  243,  235,  234,  233,  230,
      150,  151,  153,  156,  142,  142,  142,  142,  142,  142,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  157,
      143,  143,  143,  143,  143,  143,  150,  151,  153,  156,
      221,  193,  183,  182,  181,  158,  179,  175,  162,  154,
      152,  148,  159,  138,  137,  157,  143,  143,  143,  143,
      143,  143,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  158,  145,  145,  145,  145,  145,  145,  159,  160,
      160,  160,  161,  164,  165,  166,  167,  168,  169,  163,
      170,  168,  171,  127,  173,  174,  176,  177,  145,  145,

      145,  145,  145,  145,  163,  160,  160,  160,  161,  164,
      165,  166,  167,  168,  169,  163,  170,  168,  171,  172,
      173,  174,  176,  177,  178,  121,  117,  107,   97,   75,
      163,   51,   47,   46,  172,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  172,   43,   38,   18,   14,
      178,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      172,  185,   12,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  187,
        7,  187,  187,  187,  187,  187,  187,  187,  187,  187,
        4,    3,    0,    0,    0,    0,  194,    0,    0,  185,

      185,  185,  185,  185,  185,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  195,  186,  186,  186,  186,  186,
      186,  188,  194,  188,  188,  188,  188,  188,  188,  188,
      188,  188,    0,    0,    0,    0,    0,    0,    0,    0,
      195,  186,  186,  186,  186,  186,  186,  189,    0,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  190,  196,  190,  190,  190,
      190,  190,  190,  190,  190,  190,    0,    0,    0,    0,
        0,    0,    0,    0,  198,  189,  189,  189,  189,  189,
      189,  191,  196,  191,  191,  191,  191,  191,  191,  191,

      191,  191,  191,  191,  191,  191,  191,  191,  191,  192,
      198,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      197,  199,  200,  202,  197,  203,  205,  206,  201,  191,
      191,  191,  191,  191,  191,  201,  207,  208,  209,  210,
      211,  212,  213,  201,  214,  215,  197,  199,  200,  202,
      197,  203,  205,  206,  201,  217,  212,  218,  219,  220,
      222,  201,  207,  208,  209,  210,  211,  212,  213,  201,
      214,  215,  223,  224,  225,  226,  227,  228,  229,  231,
      232,  217,  212,  218,  219,  220,  222,  236,    0,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  223,  224,

      225,  226,  227,  228,  229,  231,  232,  237,    0,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  238,  247,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  237,  237,  237,  237,  237,
      237,  239,  247,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  240,
      248,  240,  240,  240,  240,  240,  240,  240,  240,  240,
        0,    0,  249,    0,    0,    0,    0,    0,    0,  239,
      239,  239,  239,  239,  239,  242,  248,  242,  242,  242,

      242,  242,  242,  242,  242,  242,  242,  244,  249,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  246,    0,  246,  246,  246,
      246,  246,  246,  246,  246,  246,    0,    0,    0,    0,
        0,  250,  251,  253,  255,  244,  244,  244,  244,  244,
      244,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      256,  245,  245,  245,  245,  245,  245,  250,  251,  253,
      255,  257,  258,  260,  262,  263,  264,  265,  266,  267,
      268,  269,  270,  271,  272,  274,  256,  245,  245,  245,
      245,  245,  245,  276,  278,  279,  280,  257,  258,  260,

      262,  263,  264,  265,  266,  267,  268,  269,  270,  271,
      272,  274,  281,  283,  284,  285,  287,    0,  302,  276,
      278,  279,  280,  290,  290,  290,  290,  290,  290,  290,
      290,  290,    0,    0,    0,    0,    0,    0,  281,  283,
      284,  285,  287,  291,  302,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  293,    0,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  295,    0,  295,  295,  295,  295,  295,
      295,  295,  295,  295,    0,    0,    0,    0,    0,    0,
      304,    0,    0,  293,  293,  293,  293,  293,  293,  294,

      294,  294,  294,  294,  294,  294,  294,  294,  305,  294,
      294,  294,  294,  294,  294,  296,  304,  296,  296,  296,
      296,  296,  296,  296,  296,  296,    0,  306,    0,    0,
        0,    0,    0,    0,  305,  294,  294,  294,  294,  294,
      294,  297,    0,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  298,  306,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      299,  308,  299,  299,  299,  299,  299,  299,  299,  299,
      299,    0,    0,    0,    0,    0,    0,    0,    0,  310,
      298,  298,  298,  298,  298,  298,  300,  308,  300,  300,

      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  301,  310,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  307,  311,  312,  313,  314,
      315,  307,  316,  307,  300,  300,  300,  300,  300,  300,
      317,  318,  320,  321,  322,  323,  324,  325,  326,  327,
      328,  307,  311,  312,  313,  314,  315,  307,  316,  307,
      329,  331,  332,  333,  334,  335,  317,  318,  320,  321,
      322,  323,  324,  325,  326,  327,  328,  337,  338,  339,
        0,  355,    0,    0,    0,    0,  329,  331,  332,  333,
      334,  335,  343,    0,  343,  343,  343,  343,  343,  343,

      343,  343,  343,  337,  338,  339,  344,  355,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  345,    0,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  346,  356,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  345,  345,  345,  345,  345,
      345,  347,  356,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  348,
      357,  348,  348,  348,  348,  348,  348,  348,  348,  348,
        0,    0,  358,    0,    0,    0,    0,    0,    0,  347,

      347,  347,  347,  347,  347,  350,  357,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  352,  358,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  354,    0,  354,  354,  354,
      354,  354,  354,  354,  354,  354,    0,    0,    0,    0,
        0,  359,  360,  361,  362,  352,  352,  352,  352,  352,
      352,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      364,  353,  353,  353,  353,  353,  353,  359,  360,  361,
      362,  365,  367,  369,  372,  373,  374,  375,  376,  377,
      378,  380,  381,  382,  383,  384,  364,  353,  353,  353,

      353,  353,  353,  385,  386,  387,  388,  365,  367,  369,
      372,  373,  374,  375,  376,  377,  378,  380,  381,  382,
      383,  384,  389,  390,    0,  405,    0,    0,    0,  385,
      386,  387,  388,  394,  394,  394,  394,  394,  394,  394,
      394,  394,    0,    0,    0,    0,    0,    0,  389,  390,
      395,  405,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  397,    0,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      399,    0,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  400,  400,  400,  400,  400,  400,  400,  400,  400,

      397,  397,  397,  397,  397,  397,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  407,  398,  398,  398,  398,
      398,  398,  402,  408,  402,  402,  402,  402,  402,  402,
      402,  402,  402,    0,    0,    0,    0,    0,    0,    0,
        0,  407,  398,  398,  398,  398,  398,  398,  401,  408,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  404,  409,  404,  404,
      404,  404,  404,  404,  404,  404,  404,    0,    0,    0,
        0,    0,    0,    0,  410,  411,  401,  401,  401,  401,
      401,  401,  403,  409,  403,  403,  403,  403,  403,  403,

      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      410,  411,  412,  414,  415,  416,  418,  419,  420,  421,
      422,  424,  425,  426,  427,  428,  429,  430,  431,  425,
      403,  403,  403,  403,  403,  403,  433,  435,  412,  414,
      415,  416,  418,  419,  420,  421,  422,  424,  425,  426,
      427,  428,  429,  430,  431,  425,  436,    0,  450,    0,
        0,    0,  433,  435,  440,  440,  440,  440,  440,  440,
      440,  440,  440,    0,    0,    0,  451,    0,    0,    0,
        0,    0,  436,  441,  450,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,

      441,  442,  451,  442,  442,  442,  442,  442,  442,  442,
      442,  442,    0,    0,    0,    0,    0,    0,    0,    0,
      452,  441,  441,  441,  441,  441,  441,  443,    0,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  444,  452,  444,  444,  444,
      444,  444,  444,  444,  444,  444,    0,    0,  453,    0,
        0,    0,    0,    0,    0,  443,  443,  443,  443,  443,
      443,  445,    0,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  447,  453,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,

      447,  449,    0,  449,  449,  449,  449,  449,  449,  449,
      449,  449,    0,    0,    0,    0,    0,  454,  455,  456,
      458,  447,  447,  447,  447,  447,  447,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  459,  448,  448,  448,
      448,  448,  448,  454,  455,  456,  458,  460,  461,  462,
      463,  467,  468,  469,  470,  471,  472,  476,  477,    0,
      490,    0,  459,  448,  448,  448,  448,  448,  448,    0,
        0,    0,  492,  460,  461,  462,  463,  467,  468,  469,
      470,  471,  472,  476,  477,  480,  490,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  482,  492,  482,

      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  484,    0,  484,  484,  484,
      484,  484,  484,  484,  484,  484,    0,    0,    0,    0,
        0,    0,  495,    0,    0,  482,  482,  482,  482,  482,
      482,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      496,  483,  483,  483,  483,  483,  483,  486,  495,  486,
      486,  486,  486,  486,  486,  486,  486,  486,    0,    0,
        0,    0,    0,    0,    0,    0,  496,  483,  483,  483,
      483,  483,  483,  485,    0,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,

      485,  488,  497,  488,  488,  488,  488,  488,  488,  488,
      488,  488,    0,    0,    0,    0,    0,    0,    0,  499,
      502,  485,  485,  485,  485,  485,  485,  487,  497,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  499,  502,  503,  504,  505,
      506,  508,  509,  515,  523,  515,  515,  515,  515,  515,
      515,  515,  515,  515,    0,  487,  487,  487,  487,  487,
      487,    0,  524,  503,  504,  505,  506,  508,  509,  514,
      523,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  517,  524,  517,

      517,  517,  517,  517,  517,  517,  517,  517,    0,    0,
        0,    0,    0,    0,    0,    0,  529,  514,  514,  514,
      514,  514,  514,  516,    0,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  518,  529,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,    0,    0,    0,    0,    0,    0,    0,
      530,  516,  516,  516,  516,  516,  516,  520,    0,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  522,  530,  522,  522,  522,
      522,  522,  522,  522,  522,  522,    0,    0,    0,    0,

        0,    0,  531,  532,  533,  520,  520,  520,  520,  520,
      520,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      535,  521,  521,  521,  521,  521,  521,  526,  531,  532,
      533,  536,  537,  526,  540,  550,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  535,  521,  521,  521,
      521,  521,  521,  526,    0,    0,    0,  536,  537,  526,
      542,  550,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  544,    0,
      544,  544,  544,  544,  544,  544,  544,  544,  544,    0,
        0,    0,    0,    0,    0,  551,    0,    0,  542,  542,

      542,  542,  542,  542,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  552,  543,  543,  543,  543,  543,  543,
      546,  551,  546,  546,  546,  546,  546,  546,  546,  546,
      546,    0,    0,    0,    0,    0,    0,    0,    0,  552,
      543,  543,  543,  543,  543,  543,  545,    0,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  548,  554,  548,  548,  548,  548,
      548,  548,  548,  548,  548,    0,    0,    0,    0,    0,
        0,    0,  555,  556,  545,  545,  545,  545,  545,  545,
      547,  554,  547,  547,  547,  547,  547,  547,  547,  547,

      547,  547,  547,  547,  547,  547,  547,  547,  555,  556,
      557,  560,  565,  573,  565,  565,  565,  565,  565,  565,
      565,  565,  565,    0,    0,    0,    0,    0,  547,  547,
      547,  547,  547,  547,    0,    0,  557,  560,  564,  573,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  567,  574,  567,  567,
      567,  567,  567,  567,  567,  567,  567,    0,    0,    0,
        0,    0,    0,    0,    0,  576,  564,  564,  564,  564,
      564,  564,  566,  574,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,

      568,  576,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,    0,    0,    0,    0,    0,    0,    0,  578,
      566,  566,  566,  566,  566,  566,  570,    0,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  572,  578,  572,  572,  572,  572,
      572,  572,  572,  572,  572,    0,    0,    0,    0,    0,
      579,  580,  581,    0,  570,  570,  570,  570,  570,  570,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  595,
      571,  571,  571,  571,  571,  571,  579,  580,  581,  586,
        0,  586,  586,  586,  586,  586,  586,  586,  586,  586,

      586,    0,    0,    0,    0,  595,  571,  571,  571,  571,
      571,  571,  588,    0,  588,  588,  588,  588,  588,  588,
      588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      590,    0,  590,  590,  590,  590,  590,  590,  590,  590,
      590,    0,    0,    0,    0,    0,    0,  596,    0,    0,
      588,  588,  588,  588,  588,  588,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  599,  589,  589,  589,  589,
      589,  589,  592,  596,  592,  592,  592,  592,  592,  592,
      592,  592,  592,    0,    0,    0,    0,    0,    0,    0,
        0,  599,  589,  589,  589,  589,  589,  589,  591,    0,

      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  594,  601,  594,  594,
      594,  594,  594,  594,  594,  594,  594,    0,    0,    0,
        0,    0,    0,    0,  602,    0,  591,  591,  591,  591,
      591,  591,  593,  601,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      602,  608,    0,  608,  608,  608,  608,  608,  608,  608,
      608,  608,    0,    0,    0,    0,    0,    0,    0,  616,
      593,  593,  593,  593,  593,  593,  607,    0,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,

      607,  607,  607,  607,  610,  616,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  617,    0,    0,    0,    0,
        0,    0,    0,  622,  607,  607,  607,  607,  607,  607,
      609,    0,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  617,  609,  609,  609,  609,  609,  609,  611,  622,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
        0,    0,    0,    0,    0,    0,    0,  623,  609,  609,
      609,  609,  609,  609,  613,    0,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  615,  623,  615,  615,  615,  615,  615,  615,

      615,  615,  615,  624,    0,    0,    0,    0,    0,    0,
        0,    0,  613,  613,  613,  613,  613,  613,    0,    0,
        0,    0,    0,    0,    0,  636,    0,    0,  629,  624,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      631,    0,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  636,  631,  631,  631,  631,  631,  631,  632,  637,
      632,  632,  632,  632,  632,  632,  632,  632,  632,    0,
        0,    0,    0,    0,    0,    0,    0,  644,  631,  631,
      631,  631,  631,  631,  633,  637,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,

      633,  633,  634,  644,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  653,    0,    0,    0,    0,    0,    0,
        0,  654,  633,  633,  633,  633,  633,  633,  648,    0,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  653,
      648,  648,  648,  648,  648,  648,  649,  654,  649,  649,
      649,  649,  649,  649,  649,  649,  649,    0,  659,    0,
      666,    0,    0,    0,    0,    0,  648,  648,  648,  648,
      648,  648,  650,  668,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  659,  663,  666,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  672,  673,    0,  668,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  672,  673,  697,  697,  697,  697,  698,  698,
      698,  698,  699,  699,  699,  699,  700,    0,  700,  700,
      701,  701,  701,  701,  702,    0,  702,  702,  703,  703,
      705,  705,  706,  706,  707,  707,  708,  708,  709,  709,
      710,  710,  711,  711,  712,  712,  713,  713,  714,  714,
      715,  715,  716,  716,  717,  717,  718,  718,  719,  719,
      720,  720,  721,  721,  722,  722,  723,  723,  724,  724,
      725,  725,  726,  726,  727,  727,  728,  728,  729,  729,

      731,  731,  732,  732,  734,  734,  735,  735,  738,  738,
      739,  739,  741,  741,  744,  744,  745,  745,  746,  746,
      748,  748,  749,  749,  750,  750,  752,  752,  753,  753,
      754,  754,  756,  756,  757,  757,  758,  758,  760,  760,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[81] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
    0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_ClntParser_stype yylval;
}

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 697 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3741 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
{ return ClntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
{ return ClntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
{ return ClntParser::ADDRES_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
{ return ClntParser::IA_;}
	YY_BREAK
case 7:
YY_RULE_SETUP
{ return ClntParser::TA_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ return ClntParser::IAID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
{ return ClntParser::LOGLEVEL_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ return ClntParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
{ return ClntParser::LOGNAME_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
{ return ClntParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
{ return ClntParser::SCRIPTS_DIR_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ return ClntParser::VALID_TIME_; }
	YY_BREAK
case 18:
YY_RULE_SETUP
{ return ClntParser::T1_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
{ return ClntParser::T2_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
{ return ClntParser::OPTION_; }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ return ClntParser::DNS_SERVER_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
{ return ClntParser::DOMAIN_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
{ return ClntParser::NTP_SERVER_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
{ return ClntParser::TIME_ZONE_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
{ return ClntParser::SIP_SERVER_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
{ return ClntParser::SIP_DOMAIN_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
{ return ClntParser::FQDN_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
{ return ClntParser::FQDN_S_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
{ return ClntParser::NIS_SERVER_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
{ return ClntParser::NIS_DOMAIN_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
{ return ClntParser::NISP_SERVER_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
{ return ClntParser::NISP_DOMAIN_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ return ClntParser::LIFETIME_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ return ClntParser::REJECT_SERVERS_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 36:
YY_RULE_SETUP
{ return ClntParser::RAPID_COMMIT_;}
	YY_BREAK
case 37:
YY_RULE_SETUP
{ return ClntParser::UNICAST_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ return ClntParser::STRICT_RFC_NO_ROUTING_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LL_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LLT_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_EN_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
{ return ClntParser::VENDOR_SPEC_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ return ClntParser::ANON_INF_REQUEST_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
{ return ClntParser::INSIST_MODE_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
{ return ClntParser::INACTIVE_MODE_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ return ClntParser::AUTH_ENABLED_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ return ClntParser::AUTH_ACCEPT_METHODS_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ return ClntParser::DIGEST_NONE_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ return ClntParser::DIGEST_PLAIN_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ return ClntParser::EXPERIMENTAL_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ return ClntParser::ADDR_PARAMS_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ return ClntParser::MAPPING_PREFIX_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
;
	YY_BREAK
case 63:
YY_RULE_SETUP
;
	YY_BREAK
case 64:
YY_RULE_SETUP
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
BEGIN(INITIAL);
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 67:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 68:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 69:
YY_RULE_SETUP
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 70:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 71:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 72:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 73:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return ClntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return ClntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
{
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return ClntParser::DUID_;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
{ 
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::HEXNUMBER_;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
{ 
    if(!sscanf(yytext,"%u",(unsigned int*)&(yylval.ival))) { 
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::INTNUMBER_;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
{return yytext[0];} 
	YY_BREAK
case 80:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 697 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 697 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 696);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

