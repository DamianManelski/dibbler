
#line 3 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 91
#define YY_END_OF_BUFFER 92
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[773] =
    {   0,
        1,    1,    0,    0,    0,    0,   92,   90,    2,    1,
        1,   90,   72,   90,   90,   89,   89,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   76,   76,   91,    1,    1,
        1,    0,   84,   72,    0,   84,   74,   73,   89,    0,
        0,   88,    0,   81,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,    9,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   47,   85,   85,
       85,   85,   85,   85,   85,   85,   23,   24,   10,   85,
       85,   85,   85,   85,   75,   73,   89,    0,    0,    0,

       80,   86,   79,   79,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   89,    0,    0,    0,    0,   78,   78,
        0,   79,    0,   79,   85,   85,   68,   85,   85,   85,
       85,   85,   85,   85,   32,   11,   85,   85,   85,   85,
       85,    8,    0,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   89,    0,   87,    0,    0,

        0,   78,    0,   78,    0,   79,   79,   79,   79,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
        3,   85,   85,   85,   85,   85,   85,   85,    0,   85,
       85,   85,   12,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,    0,    0,    0,    0,    0,
       78,   78,   78,   78,    0,   79,   79,   79,    0,   79,
       85,   85,   85,   85,   85,   85,   85,   27,   85,   85,
       85,   85,   33,   85,   85,   85,   85,   85,   85,   85,
        0,    0,   85,   85,   85,   85,   25,   85,   48,   85,

       85,   85,   85,   85,   85,   19,   85,   85,   85,   85,
       85,    6,   85,   85,   85,   85,   85,    0,    0,    0,
        0,   78,   78,   78,    0,   78,    0,    0,   79,   79,
       79,   79,   85,    5,   85,   85,   85,   85,   85,   52,
       50,   85,   85,   85,   85,   85,   85,   85,   85,   85,
        0,    0,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   71,   39,   85,   85,   85,   85,   85,   85,
       44,   85,   85,   85,   87,    0,    0,    0,    0,    0,
       78,   78,   78,   78,    0,   79,   79,   79,    0,   79,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   51,

       85,   85,   85,   85,   38,   85,   85,   15,   16,    0,
        0,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   18,
        0,    0,    0,    0,   78,   78,   78,    0,   78,   83,
       79,   79,   79,   79,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   49,   85,   85,   85,   85,   14,    0,
        0,   85,   85,    4,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   13,   85,   29,   85,   85,    0,
        0,    0,    0,   82,   78,   78,   78,   78,   79,   79,
       79,    0,   79,   85,   85,   85,   85,   85,   85,   85,

       85,   26,   85,   85,   85,   17,    0,    0,   35,   34,
       28,   85,   85,   85,   85,   85,   85,   85,   31,   30,
       85,   85,   85,   85,   87,    0,    0,   78,   78,   78,
        0,   78,   79,   79,   79,   79,   70,   85,   85,   85,
       85,   85,   59,   85,   85,   85,   55,   37,   36,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   53,
        0,    0,    0,    0,   78,   78,   78,   78,   79,   79,
       79,    0,   79,    7,   85,   85,   57,   85,   60,   69,
       85,   85,   85,   85,   42,   85,   85,   85,   67,   85,
       85,    0,    0,    0,   78,   78,   78,    0,   78,   79,

       79,   79,   79,   85,   85,   85,   85,   56,   85,   85,
       85,   85,   40,   85,   85,   85,   87,    0,    0,    0,
       78,   78,   78,   78,   79,   79,   79,    0,   79,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   21,
        0,    0,   77,   80,   78,   78,   78,    0,   78,   79,
       79,   79,   79,   85,   85,   61,   85,   85,   41,   85,
       85,   22,   85,    0,    0,   77,    0,   78,   78,   78,
       78,   78,   79,   79,   79,    0,   79,   85,   85,   62,
       85,   85,   85,   85,   85,   85,   85,   87,   77,   80,
       78,    0,   78,   78,   78,   78,   79,   79,   79,   85,

       85,   85,   85,   85,   85,   20,   46,   85,   85,    0,
       77,   78,   78,   78,   78,   79,   79,   79,   85,   85,
       63,   64,   65,   66,   43,   85,    0,   78,   78,    0,
       78,   78,   79,   85,   58,   85,   87,   78,   78,   79,
       85,   85,    0,   78,   78,    0,   54,   45,   77,   78,
       78,   77,   78,   78,    0,    0,   78,   78,    0,   78,
       78,    0,   87,   78,   78,    0,   78,   78,    0,   78,
       78,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
        1,    1,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,    1,    1,    1,    1,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    3,    3,    3,    3,    3,    3,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[858] =
    {   0,
        0,    0, 1555, 1554,    0,    0, 1561, 3831, 3831,   72,
       74, 1555,    0, 1551,   71,   71,   34, 1502,  134,  183,
      227,  187,  239,  296,   77,   71,  194,   43,  188,  197,
      300,  313,   67,   87,   67, 3831, 1511, 3831,  108,  112,
      115, 1516, 3831,    0, 1513, 1512, 3831,    0,  358, 1496,
      376, 3831,    0,  402,    0,  444,   83,  170,    0,  179,
      176,  192,  181,  226,  235,  230,  243,  240,  249,  320,
      245,  245,  241,  236, 1507,  242,  287,    0,  303,  296,
      448,  294,  298,  302,  310,  452,    0,    0,    0,  363,
      374,  372,  377,  410, 3831,    0,  506, 1494,  427, 1484,

      550,    0,  594,  524,  636,  437,  438,  443,  451,  455,
     1466,  461,  459,  459,  452,  463,  465,  466,  515,  526,
     1457,  527,  123,  640, 1456,  530,  569,  567,  569,  613,
      604,  599,  627,  639, 1455,  634,  631,  643,  648,  651,
      646,  652,  646,  693,  575, 1442, 1441, 1348,  739,  711,
      720,  783,  825,  757,  867,  759,    0,  740, 1359,  754,
      787,  798, 1358,  790, 1357,    0,  804,  805,  822,  828,
      872,    0, 1356,  872,  862,  877,  860,  865,  878,  877,
      868,  885,  869,  885,  883,  877,  916, 1346,  895,  918,
     1308,  921,  919,  909, 1307,  945, 1294, 1293, 1292, 1291,

      971,  982, 1024, 1000, 1042, 1068, 1086, 1112, 1130, 1289,
      909,  908,  915,  928,  910,  926,  920, 1125,  997, 1005,
        0, 1067, 1074, 1122, 1117, 1128, 1119, 1134, 1132, 1123,
     1141, 1133,    0, 1143, 1135, 1132, 1128, 1300, 1147, 1134,
     1150, 1146, 1152, 1147, 1153, 1164, 1167, 1170, 1163, 1177,
     1159, 1167, 1210, 1169, 1184, 1189, 1093, 1092, 1091, 1208,
     1226, 1244, 1270, 1288, 1253, 1314, 1090, 1326, 1368, 1344,
     1189, 1215, 1263, 1287, 1335, 1101, 1332,    0, 1337, 1340,
     1343, 1366,    0, 1358, 1100, 1368, 1370, 1361, 1380, 1372,
     1371, 1382, 1375, 1371, 1384, 1373,    0, 1387, 1099, 1390,

     1392, 1098, 1070, 1382, 1396,    0, 1391, 1402, 1406, 1417,
     1061,    0, 1408, 1404, 1413, 1060, 1417, 1047, 1046, 1045,
     1440, 1464, 1044, 1476, 1518, 1494, 1536, 1562, 1573, 1591,
     1617, 1635, 1422, 1055, 1479, 1515, 1536, 1627, 1559,    0,
     1579, 1620, 1632, 1633, 1626, 1635, 1627, 1645, 1646, 1647,
     1640, 1636, 1654, 1634, 1648, 1636, 1655, 1656, 1655, 1664,
     1653, 1672,    0,    0, 1673, 1653, 1673, 1669, 1671, 1676,
        0, 1682, 1673, 1675, 1042, 1008, 1007, 1005, 1713, 1731,
     1742, 1760, 1786, 1804, 1769, 1830, 1004, 1842, 1884, 1860,
     1694, 1738, 1775, 1801, 1863, 1853, 1852, 1856, 1879,    0,

     1890, 1882, 1015, 1882,    0, 1880, 1887,    0,    0, 1899,
     1879, 1893, 1898, 1897, 1900, 1014, 1901, 1894, 1887, 1904,
     1896, 1909, 1914, 1914, 1917, 1931, 1933, 1933, 1924,    0,
     1001, 1000,  990, 1956, 1978,  972, 1990, 2032, 2008, 2017,
     2076, 2050, 2120, 2094, 1929, 2023,  964, 2024, 2072, 2100,
     2088, 2128, 2112,    0, 2111, 2119, 2129, 2115,    0, 2126,
     2131, 2123, 2120,    0, 2121, 2134, 2128, 2128, 2124, 2125,
     2124, 2131, 2136, 2164,    0, 2171,    0, 2170, 2171,  850,
      849,  847,  846, 2190, 2214, 2232, 2258, 2276, 2302,  845,
     2314, 2356, 2332, 2159, 2177, 2231, 2258, 2332, 2335, 2334,

     2331,    0, 2355, 2352, 2363,    0, 2355, 2352,    0,    0,
        0, 2362, 2367, 2368, 2365, 2370, 2354, 2362,    0,    0,
     2360,  856, 2359, 2377,  843,  842,  840, 2418,  839, 2430,
     2472, 2448, 2516, 2490, 2560, 2534,    0, 2434, 2458,  850,
     2520,  849,    0, 2527, 2530, 2565,    0, 3831, 3831, 2564,
     2553, 2565, 2553,  848, 2569, 2572, 2563, 2563, 2569,    0,
      805,  804,  803,  802, 2616, 2634, 2660, 2678, 2704,  801,
     2716, 2758, 2734,    0, 2574, 2611,    0, 2752,    0,    0,
     2637, 2675, 2718, 2740,    0, 2741, 2740, 2754,    0, 2755,
     2759,  800,  798,  797, 2810,  796, 2822, 2864, 2784, 2908,

     2840, 2952, 2882,  807, 2769, 2842, 2856,    0, 2869, 2893,
     2896, 2930,    0, 2920,  806, 2956,  793,  792,  763,  762,
     2999, 2973, 3043, 3017, 3061,  761, 3087, 3129, 3105, 2945,
     2987,  764, 3024, 3060, 3092, 3102, 3109, 3107, 3111,    0,
      759,  758,  757,    0, 3151,  729, 3173, 3215, 3191, 3259,
     3233, 3303, 3277, 3192, 3207,    0,  385, 3254,    0, 3269,
     3280,    0, 3297,  726,  672,  671,  670,  662, 3350, 3324,
     3394, 3368, 3412,  661, 3438,    0, 3456, 3297, 3343,    0,
      123,  661,  667, 3363, 3362, 3404, 3435,  658,  617, 3831,
      616,    0, 3492,  615, 3504, 3522, 3548, 3566,    0, 3457,

     3508,  619,  616,  617,  618,    0,    0, 3510, 3546,  609,
      608,  607,  606, 3604, 3592, 3622,  605,    0, 3563, 3585,
        0,    0,    0,    0,    0, 3603,  604,  603,  564,    0,
     3648, 3831,    0, 3604,    0, 3610,  563,  562,  561, 3831,
     3605, 3619,  560,  559,  530,    0,    0,    0,  529,  528,
      527,  526,  525,  480,    0,  427,  416,  415,    0,  414,
      413,    0,  412,  411,  382,  380,  332,  331,    0,  313,
      285, 3831, 3674, 3678, 3682, 3686, 3690, 3694, 3696,  302,
     3698, 3700, 3702, 3704, 3706, 3708, 3710, 3712, 3714, 3716,
     3718, 3720, 3722, 3724, 3726, 3728, 3730, 3732, 3734, 3736,

     3738, 3740, 3742, 3744, 3746, 3748, 3750, 3752, 3754, 3756,
     3758, 3760, 3762, 3764, 3766, 3768,  285, 3770, 3772, 3774,
      283, 3776, 3778, 3780,  282,  280, 3782, 3784, 3786,  229,
     3788, 3790,  226,  224, 3792, 3794, 3796, 3798, 3800,  207,
     3802, 3804, 3806, 3808, 3810,  143, 3812, 3814, 3816,  139,
     3818,  134, 3820, 3822, 3824,   79, 3826
    } ;

static yyconst flex_int16_t yy_def[858] =
    {   0,
      772,    1,  773,  773,  774,  774,  772,  772,  772,  772,
      772,  775,  776,  777,  772,  772,   16,  772,  772,   19,
       19,   19,   19,   19,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  772,  772,  772,  772,  772,
      772,  775,  772,  776,  777,  772,  772,  778,  772,  779,
       49,  772,  780,  772,   24,   24,   56,   56,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  772,  778,  772,  781,   97,  782,

      772,  780,  772,  103,   56,  105,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  772,  144,  783,  784,  785,  772,  149,
      772,  772,  772,  152,  105,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  772,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  145,  145,  784,  786,  787,

      772,  772,  772,  202,  772,  772,  206,  772,  208,  155,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  772,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  788,  772,  789,  790,  772,
      772,  261,  772,  263,  772,  772,  772,  772,  772,  268,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      772,  772,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  791,  792,  793,
      772,  772,  772,  772,  772,  324,  772,  772,  772,  329,
      772,  331,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      772,  772,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  789,  772,  794,  795,  772,  772,
      772,  381,  772,  383,  772,  772,  772,  772,  772,  388,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,  772,
      772,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      796,  797,  798,  772,  772,  772,  772,  772,  437,  772,
      772,  441,  772,  443,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  772,
      772,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  799,
      772,  800,  801,  772,  772,  485,  772,  487,  772,  772,
      772,  772,  491,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,  772,  772,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  802,  803,  804,  772,  772,  772,
      772,  530,  772,  533,  772,  535,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  772,  772,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      805,  772,  806,  807,  772,  565,  772,  567,  772,  772,
      772,  772,  571,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  808,  809,  810,  772,  772,  772,  772,  597,  772,

      600,  772,  602,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  811,  772,  812,  813,
      772,  621,  772,  623,  772,  772,  772,  772,  627,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      814,  815,  816,  817,  772,  772,  772,  772,  647,  772,
      650,  772,  652,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  818,  772,  819,  772,  820,  772,  669,
      772,  671,  772,  772,  772,  821,  675,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  822,  823,  772,
      824,  825,  772,  772,  772,  695,  772,  697,  826,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,  827,
      772,  828,  829,  772,  714,  772,  772,  830,   24,   24,
       24,   24,   24,   24,   24,   24,  831,  772,  832,  833,
      772,  772,  834,   24,   24,   24,  835,  836,  837,  772,
       24,   24,  838,  772,  839,  840,   24,   24,  841,  842,
      843,  844,  772,  845,  846,  847,  848,  849,  850,  772,
      851,  852,  772,  853,  854,  847,  772,  855,  856,  857,
      772,    0,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,

      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772
    } ;

static yyconst flex_int16_t yy_nxt[3906] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   20,   21,   22,   23,   24,   24,
       25,   24,   24,   26,   24,   27,   28,   29,   24,   30,
       31,   32,   33,   34,   35,   24,   24,   24,   19,   20,
       20,   21,   22,   23,   24,   24,   25,   24,   24,   26,
       24,   27,   28,   29,   24,   30,   31,   32,   33,   34,
       35,   24,   24,   24,   39,   40,   41,   40,   47,  772,
       77,  672,   48,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   50,   51,   51,   51,   51,   51,   51,   68,

       52,   71,   91,   94,   69,  772,   77,   72,  106,   92,
       39,   40,   70,   93,   41,   40,   53,   39,   40,   51,
       51,   51,   51,   51,   51,   68,   52,   71,   91,   94,
       69,  173,  174,   72,  106,   92,  765,  702,   70,   93,
      703,  763,   53,   55,   55,  758,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   50,   56,   56,   56,   57,
       56,   58,   55,   59,   55,   55,   55,   55,   55,   60,
       55,   55,   55,   55,   55,   55,   61,   55,   55,   55,
       55,   55,   56,   56,   56,   57,   56,   58,   55,   59,
       55,   55,   55,   55,   55,   60,   55,   55,   55,   55,

       55,   55,   61,   55,   55,   55,   55,   55,   56,  751,
       56,  107,   56,   78,   56,  108,   73,  109,   55,   80,
      110,  111,   55,   81,   74,   55,  740,   79,  739,   55,
       75,  733,   66,   82,   56,   76,   56,  107,   56,   78,
       56,  108,   73,  109,   55,   80,  110,  111,   55,   81,
       74,   55,   56,   79,   56,   55,   75,   62,   66,   82,
      112,   76,   63,   64,   56,  113,   56,  114,  115,   65,
      116,  117,  120,  121,   55,  122,  123,   67,   56,  125,
       56,   55,  718,   62,  713,  699,  112,  668,   63,   64,
       56,  113,   56,  114,  115,   65,  116,  117,  120,  121,

       55,  122,  123,   67,  102,  125,  769,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,  772,   55,   55,
       55,   55,   55,   55,   83,   55,   87,   88,  126,  127,
       84,   55,   85,  128,  769,   89,  133,  134,   55,  135,
      136,   86,  118,   90,   55,   55,   55,   55,   55,   55,
       83,   55,  769,  762,  126,  127,   84,   55,   85,  128,
      119,   89,  133,  134,   55,  135,  136,   86,  118,   90,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   98,
       99,   99,   99,   99,   99,   99,  119,   52,   99,   99,
       99,   99,   99,   99,   99,   99,   99,  139,  680,  681,

      682,  772,  683,  769,  140,  141,   99,   99,   99,   99,
       99,   99,  142,   52,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  139,  104,  104,  104,  104,  104,  104,
      140,  141,  762,  766,  762,  755,  762,  755,  142,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  690,  143,
      104,  104,  104,  104,  104,  104,  105,  105,  105,  105,
      105,  105,  105,  105,  105,   98,  105,  105,  105,  105,
      105,  105,  129,   59,  137,  143,  156,  157,  158,  130,
      159,  160,  131,  162,  163,  164,  132,  165,  166,  167,
      168,  138,  105,  105,  105,  105,  105,  105,  129,   59,

      137,  755,  156,  157,  158,  130,  159,  160,  131,  162,
      163,  164,  132,  165,  166,  167,  168,  138,  144,  144,
      144,  144,  144,  144,  144,  144,  144,   50,  145,  145,
      145,  145,  145,  145,  772,   52,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  169,  746,  756,  755,  746,
      667,  746,  170,  172,  145,  145,  145,  145,  145,  145,
      178,   52,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  169,  150,  150,  150,  150,  150,  150,  170,  172,
      730,  644,  746,  730,  743,  730,  178,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  179,  180,  150,  150,

      150,  150,  150,  150,  151,  181,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  153,  154,  154,  154,  154,
      154,  154,  179,  180,  692,  620,  676,  730,  692,  667,
      101,  181,  724,  723,  722,  721,  648,  692,  667,  182,
      183,  184,  154,  154,  154,  154,  154,  154,  155,  155,
      155,  155,  155,  155,  155,  155,  155,   50,  155,  155,
      155,  155,  155,  155,  175,  182,  183,  184,  185,  186,
      176,  188,  189,  190,  191,  192,  193,  194,  195,  710,
      705,  704,  628,  692,  155,  155,  155,  155,  155,  155,
      175,  690,  667,  620,  185,  186,  176,  188,  189,  190,

      191,  192,  193,  194,  195,  196,  196,  196,  196,  196,
      196,  196,  196,  196,   50,  197,  197,  197,  197,  197,
      197,  772,   52,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  197,  197,  197,  197,  197,  197,  564,   52,  201,
      598,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      203,  204,  204,  204,  204,  204,  204,  772,  211,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  667,  620,
      101,  656,  572,  644,  620,  212,  213,  204,  204,  204,
      204,  204,  204,  151,  215,  206,  206,  206,  206,  206,

      206,  206,  206,  206,  153,  207,  207,  207,  207,  207,
      207,  212,  213,  564,  641,  639,  630,  531,  620,  564,
      215,  483,  492,  101,  564,  483,  101,  216,  217,  219,
      221,  207,  207,  207,  207,  207,  207,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  222,  209,  209,  209,
      209,  209,  209,  216,  217,  219,  221,  586,  578,  576,
      438,  564,  223,  483,  561,  558,  389,  101,  483,  224,
      378,  378,  222,  209,  209,  209,  209,  209,  209,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  223,  210,
      210,  210,  210,  210,  210,  224,  225,  230,  232,  233,

      234,  235,  238,  239,  236,  226,  227,  228,  237,  240,
      241,  242,  231,  243,  244,  210,  210,  210,  210,  210,
      210,  248,  225,  230,  232,  233,  234,  235,  238,  239,
      236,  226,  227,  228,  237,  240,  241,  242,  231,  243,
      244,  245,  249,  252,  253,  254,  271,  248,  272,  273,
      274,  276,  277,  250,  275,  278,  246,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  772,  245,  249,  252,
      253,  254,  271,  496,  272,  273,  274,  276,  277,  250,
      275,  278,  246,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  201,  325,  261,  261,  261,  261,  261,  261,

      261,  261,  261,  203,  262,  262,  262,  262,  262,  262,
      772,  483,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  378,  101,  466,  456,  269,  101,  282,  378,  259,
      262,  262,  262,  262,  262,  262,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  283,  264,  264,  264,  264,
      264,  264,  265,  282,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  431,  392,  203,  378,  259,  259,  373,
      369,  283,  264,  264,  264,  264,  264,  264,  151,  362,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  153,
      267,  267,  267,  267,  267,  267,  772,  284,  267,  267,

      267,  267,  267,  267,  267,  267,  267,  361,  358,  345,
      338,  153,  101,  259,  148,  285,  267,  267,  267,  267,
      267,  267,  151,  284,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  269,  270,  270,  270,  270,  270,  270,
      772,  285,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  279,  286,  287,  288,  289,  290,  291,  280,  293,
      270,  270,  270,  270,  270,  270,  281,  294,  295,  296,
      297,  298,  292,  299,  301,  302,  303,  279,  286,  287,
      288,  289,  290,  291,  280,  293,  304,  305,  306,  307,
      308,  309,  281,  294,  295,  296,  297,  298,  292,  299,

      301,  302,  303,  310,  311,  312,  313,  314,  316,  317,
      101,  333,  304,  305,  306,  307,  308,  309,  321,  315,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  310,
      311,  312,  313,  314,  316,  317,  201,  333,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  203,  323,  323,
      323,  323,  323,  323,  772,  334,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  323,  323,  323,  323,  323,  323,
      201,  334,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  325,  326,  326,  326,  326,  326,  326,  772,  335,

      326,  326,  326,  326,  326,  326,  326,  326,  326,  300,
      772,  336,  259,  148,  256,  772,  255,  251,  326,  326,
      326,  326,  326,  326,  151,  335,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  153,  151,  336,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  269,  330,  330,
      330,  330,  330,  330,  772,  247,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  229,  220,  218,  214,  101,
      337,  339,  340,  341,  330,  330,  330,  330,  330,  330,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  342,
      332,  332,  332,  332,  332,  332,  337,  339,  340,  341,

      343,  344,  346,  347,  348,  349,  350,  351,  352,  353,
      354,  355,  356,  357,  359,  342,  332,  332,  332,  332,
      332,  332,  360,  363,  364,  365,  343,  344,  346,  347,
      348,  349,  350,  351,  352,  353,  354,  355,  356,  357,
      359,  366,  367,  368,  370,  371,  372,  374,  360,  363,
      364,  365,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  391,  148,  148,  187,  177,  171,  366,  367,  368,
      370,  371,  372,  374,  201,  161,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  203,  201,  391,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  325,  382,  382,

      382,  382,  382,  382,  772,  148,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  101,  124,  101,   45,   46,
       43,  393,   95,   54,  382,  382,  382,  382,  382,  382,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  394,
      384,  384,  384,  384,  384,  384,  385,  393,  327,  327,
      327,  327,  327,  327,  327,  327,  327,   46,  395,   43,
      772,   37,   37,  772,  772,  394,  384,  384,  384,  384,
      384,  384,  151,  772,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  151,  395,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  269,  387,  387,  387,  387,  387,

      387,  772,  399,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  772,  772,  772,  772,  772,  772,  772,  772,
      400,  387,  387,  387,  387,  387,  387,  151,  399,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  389,  390,
      390,  390,  390,  390,  390,  772,  400,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  396,  401,  402,  403,
      404,  405,  397,  406,  398,  390,  390,  390,  390,  390,
      390,  407,  408,  409,  410,  411,  412,  413,  414,  415,
      416,  417,  396,  401,  402,  403,  404,  405,  397,  406,
      398,  418,  419,  420,  421,  422,  423,  407,  408,  409,

      410,  411,  412,  413,  414,  415,  416,  417,  424,  425,
      426,  427,  428,  429,  430,  772,  445,  418,  419,  420,
      421,  422,  423,  434,  772,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  424,  425,  426,  427,  428,  429,
      430,  201,  445,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  201,  772,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  325,  436,  436,  436,  436,  436,  436,
      772,  446,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      436,  436,  436,  436,  436,  436,  201,  446,  437,  437,

      437,  437,  437,  437,  437,  437,  437,  438,  439,  439,
      439,  439,  439,  439,  772,  447,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  772,  772,  448,  772,  772,
      772,  772,  772,  772,  439,  439,  439,  439,  439,  439,
      151,  447,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  269,  151,  448,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  389,  442,  442,  442,  442,  442,  442,
      772,  772,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  772,  772,  772,  772,  772,  449,  450,  451,  452,
      442,  442,  442,  442,  442,  442,  443,  443,  443,  443,

      443,  443,  443,  443,  443,  453,  444,  444,  444,  444,
      444,  444,  449,  450,  451,  452,  454,  455,  457,  458,
      459,  460,  461,  462,  463,  464,  465,  467,  468,  469,
      470,  453,  444,  444,  444,  444,  444,  444,  471,  472,
      473,  474,  454,  455,  457,  458,  459,  460,  461,  462,
      463,  464,  465,  467,  468,  469,  470,  475,  476,  477,
      478,  479,  772,  494,  471,  472,  473,  474,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  772,  772,  772,
      772,  772,  772,  475,  476,  477,  478,  479,  201,  494,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  325,

      201,  772,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  438,  486,  486,  486,  486,  486,  486,  772,  772,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  486,  486,
      486,  486,  486,  486,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  495,  488,  488,  488,  488,  488,  488,
      772,  497,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  772,  772,  772,  772,  772,  772,  772,  772,  495,
      488,  488,  488,  488,  488,  488,  151,  497,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  389,  490,  490,

      490,  490,  490,  490,  772,  498,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  772,  772,  772,  772,  772,
      772,  772,  499,  500,  490,  490,  490,  490,  490,  490,
      151,  498,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  492,  493,  493,  493,  493,  493,  493,  499,  500,
      501,  502,  503,  504,  505,  506,  507,  508,  509,  510,
      511,  514,  515,  516,  517,  518,  519,  512,  493,  493,
      493,  493,  493,  493,  513,  520,  501,  502,  503,  504,
      505,  506,  507,  508,  509,  510,  511,  514,  515,  516,
      517,  518,  519,  512,  521,  522,  523,  524,  772,  537,

      513,  520,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  772,  772,  772,  772,  772,  772,  538,  772,  772,
      521,  522,  523,  524,  201,  537,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  438,  529,  529,  529,  529,
      529,  529,  772,  538,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  772,  772,  772,  772,  772,  772,  772,
      772,  539,  529,  529,  529,  529,  529,  529,  201,  772,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  531,
      532,  532,  532,  532,  532,  532,  772,  539,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  772,  772,  540,

      772,  772,  772,  772,  772,  772,  532,  532,  532,  532,
      532,  532,  151,  772,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  389,  151,  540,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  492,  534,  534,  534,  534,
      534,  534,  772,  772,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  772,  772,  772,  772,  772,  541,  542,
      543,  544,  534,  534,  534,  534,  534,  534,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  545,  536,  536,
      536,  536,  536,  536,  541,  542,  543,  544,  546,  547,
      548,  549,  550,  551,  552,  553,  554,  555,  556,  557,

      559,  560,  772,  545,  536,  536,  536,  536,  536,  536,
      772,  772,  772,  772,  546,  547,  548,  549,  550,  551,
      552,  553,  554,  555,  556,  557,  559,  560,  201,  772,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  438,
      201,  772,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  531,  566,  566,  566,  566,  566,  566,  772,  772,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  772,
      772,  772,  772,  772,  772,  574,  772,  772,  566,  566,
      566,  566,  566,  566,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  575,  568,  568,  568,  568,  568,  568,

      772,  574,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  772,  772,  772,  772,  772,  772,  772,  772,  575,
      568,  568,  568,  568,  568,  568,  151,  772,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  492,  570,  570,
      570,  570,  570,  570,  772,  577,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  772,  772,  772,  772,  772,
      772,  772,  579,  580,  570,  570,  570,  570,  570,  570,
      151,  577,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  572,  573,  573,  573,  573,  573,  573,  579,  580,
      581,  582,  583,  584,  585,  587,  588,  589,  590,  591,

      772,  604,  772,  772,  772,  772,  772,  772,  573,  573,
      573,  573,  573,  573,  772,  772,  581,  582,  583,  584,
      585,  587,  588,  589,  590,  591,  201,  604,  595,  595,
      595,  595,  595,  595,  595,  595,  595,  531,  596,  596,
      596,  596,  596,  596,  772,  605,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  772,  772,  772,  772,  772,
      772,  772,  772,  608,  596,  596,  596,  596,  596,  596,
      201,  605,  597,  597,  597,  597,  597,  597,  597,  597,
      597,  598,  599,  599,  599,  599,  599,  599,  772,  608,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  772,

      772,  609,  772,  772,  772,  772,  772,  772,  599,  599,
      599,  599,  599,  599,  151,  772,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  492,  151,  609,  600,  600,
      600,  600,  600,  600,  600,  600,  600,  572,  601,  601,
      601,  601,  601,  601,  772,  772,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  772,  772,  772,  772,  772,
      772,  610,  611,  612,  601,  601,  601,  601,  601,  601,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  613,
      603,  603,  603,  603,  603,  603,  606,  610,  611,  612,
      614,  615,  607,  616,  772,  631,  622,  622,  622,  622,

      622,  622,  622,  622,  622,  613,  603,  603,  603,  603,
      603,  603,  606,  772,  772,  772,  614,  615,  607,  616,
      201,  631,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  531,  201,  772,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  598,  622,  622,  622,  622,  622,  622,
      772,  772,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  772,  772,  772,  772,  772,  772,  632,  772,  772,
      622,  622,  622,  622,  622,  622,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  633,  624,  624,  624,  624,
      624,  624,  772,  632,  629,  629,  629,  629,  629,  629,

      629,  629,  629,  772,  772,  772,  772,  772,  772,  772,
      634,  633,  624,  624,  624,  624,  624,  624,  151,  635,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  572,
      626,  626,  626,  626,  626,  626,  634,  636,  772,  772,
      772,  772,  772,  772,  772,  635,  772,  772,  772,  772,
      772,  772,  772,  772,  637,  638,  626,  626,  626,  626,
      626,  626,  151,  636,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  628,  629,  629,  629,  629,  629,  629,
      637,  638,  640,  772,  654,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  772,  772,  772,  772,  772,  772,

      629,  629,  629,  629,  629,  629,  772,  772,  640,  201,
      654,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      598,  646,  646,  646,  646,  646,  646,  772,  655,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  772,  772,
      772,  772,  772,  772,  772,  772,  657,  646,  646,  646,
      646,  646,  646,  201,  655,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  648,  649,  649,  649,  649,  649,
      649,  151,  657,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  572,  772,  772,  772,  772,  772,  772,  772,
      658,  649,  649,  649,  649,  649,  649,  151,  772,  650,

      650,  650,  650,  650,  650,  650,  650,  650,  628,  651,
      651,  651,  651,  651,  651,  772,  658,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  772,  772,  772,  772,
      772,  659,  660,  661,  662,  651,  651,  651,  651,  651,
      651,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      663,  653,  653,  653,  653,  653,  653,  659,  660,  661,
      662,  201,  772,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  598,  772,  772,  772,  663,  653,  653,  653,
      653,  653,  653,  201,  772,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  648,  670,  670,  670,  670,  670,

      670,  772,  772,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  772,  772,  772,  772,  772,  772,  678,  772,
      772,  670,  670,  670,  670,  670,  670,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  679,  672,  672,  672,
      672,  672,  672,  772,  678,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  772,  772,  772,  772,  772,  772,
      772,  772,  679,  672,  672,  672,  672,  672,  672,  151,
      772,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      628,  674,  674,  674,  674,  674,  674,  772,  684,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  772,  772,

      772,  772,  772,  772,  772,  685,  686,  674,  674,  674,
      674,  674,  674,  151,  684,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  676,  677,  677,  677,  677,  677,
      677,  685,  686,  687,  772,  700,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  772,  772,  772,  772,  772,
      772,  677,  677,  677,  677,  677,  677,  772,  772,  687,
      201,  700,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  648,  694,  694,  694,  694,  694,  694,  772,  701,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  706,
      772,  772,  772,  772,  772,  772,  772,  707,  694,  694,

      694,  694,  694,  694,  201,  701,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  706,  696,  696,  696,  696,
      696,  696,  151,  707,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  628,  772,  772,  772,  772,  772,  772,
      772,  708,  696,  696,  696,  696,  696,  696,  151,  772,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  676,
      698,  698,  698,  698,  698,  698,  772,  708,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  709,  772,  772,
      772,  772,  772,  772,  772,  772,  698,  698,  698,  698,
      698,  698,  772,  772,  772,  772,  772,  772,  772,  719,

      772,  772,  201,  709,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  648,  201,  772,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  719,  715,  715,  715,  715,
      715,  715,  772,  720,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  772,  772,  772,  772,  772,  772,  772,
      772,  725,  715,  715,  715,  715,  715,  715,  151,  720,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  676,
      717,  717,  717,  717,  717,  717,  772,  725,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  726,  772,  734,
      772,  772,  772,  772,  772,  772,  717,  717,  717,  717,

      717,  717,  772,  772,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  726,  201,  734,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  735,  732,  732,  732,  732,
      732,  732,  151,  736,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  676,  741,  742,  747,  748,  772,  772,
      772,  735,  732,  732,  732,  732,  732,  732,  201,  736,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  772,
      741,  742,  747,  748,   36,   36,   36,   36,   38,   38,
       38,   38,   42,   42,   42,   42,   44,  772,   44,   44,
       45,   45,   45,   45,   96,  772,   96,   96,  100,  100,

      146,  146,  147,  147,  198,  198,  199,  199,  200,  200,
      257,  257,  258,  258,  318,  318,  319,  319,  320,  320,
      375,  375,  376,  376,  377,  377,  432,  432,  433,  433,
      480,  480,  481,  481,  482,  482,  525,  525,  526,  526,
      527,  527,  432,  432,  562,  562,  563,  563,  592,  592,
      593,  593,  594,  594,  617,  617,  618,  618,  619,  619,
      526,  526,  642,  642,  643,  643,  664,  664,  665,  665,
      666,  666,  688,  688,  689,  689,  691,  691,  593,  593,
      711,  711,  712,  712,  727,  727,  728,  728,  729,  729,
      737,  737,  738,  738,  642,  642,  744,  744,  745,  745,

      749,  749,  750,  750,  752,  752,  753,  753,  754,  754,
      689,  689,  757,  757,  759,  759,  760,  760,  761,  761,
      764,  764,  767,  767,  768,  768,  770,  770,  771,  771,
        7,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,

      772,  772,  772,  772,  772
    } ;

static yyconst flex_int16_t yy_chk[3906] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   10,   10,   11,   11,   15,   17,
       28,  856,   15,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   25,

       16,   26,   33,   35,   25,   17,   28,   26,   57,   34,
       39,   39,   25,   34,   40,   40,   16,   41,   41,   16,
       16,   16,   16,   16,   16,   25,   16,   26,   33,   35,
       25,  123,  123,   26,   57,   34,  852,  681,   25,   34,
      681,  850,   16,   19,   19,  846,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   20,  840,
       20,   58,   22,   29,   22,   60,   27,   61,   20,   30,
       62,   63,   22,   30,   27,   20,  834,   29,  833,   22,
       27,  830,   22,   30,   20,   27,   20,   58,   22,   29,
       22,   60,   27,   61,   20,   30,   62,   63,   22,   30,
       27,   20,   21,   29,   21,   22,   27,   21,   22,   30,
       64,   27,   21,   21,   23,   65,   23,   66,   67,   21,
       68,   69,   71,   72,   23,   73,   74,   23,   21,   76,
       21,   23,  826,   21,  825,  821,   64,  817,   21,   21,
       23,   65,   23,   66,   67,   21,   68,   69,   71,   72,

       23,   73,   74,   23,  780,   76,  771,   23,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   31,   24,   32,   32,   77,   79,
       31,   24,   31,   80,  770,   32,   82,   83,   24,   84,
       85,   31,   70,   32,   24,   24,   24,   24,   24,   24,
       31,   24,  768,  767,   77,   79,   31,   24,   31,   80,
       70,   32,   82,   83,   24,   84,   85,   31,   70,   32,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   70,   49,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   90,  657,  657,

      657,  766,  657,  765,   91,   92,   49,   49,   49,   49,
       49,   49,   93,   49,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   90,   54,   54,   54,   54,   54,   54,
       91,   92,  764,  763,  761,  760,  758,  757,   93,   99,
       99,   99,   99,   99,   99,   99,   99,   99,  756,   94,
       54,   54,   54,   54,   54,   54,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   81,   56,   86,   94,  106,  107,  108,   81,
      109,  110,   81,  112,  113,  114,   81,  115,  116,  117,
      118,   86,   56,   56,   56,   56,   56,   56,   81,   56,

       86,  754,  106,  107,  108,   81,  109,  110,   81,  112,
      113,  114,   81,  115,  116,  117,  118,   86,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,  104,   97,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  119,  753,  752,  751,  750,
      749,  745,  120,  122,   97,   97,   97,   97,   97,   97,
      126,   97,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  119,  101,  101,  101,  101,  101,  101,  120,  122,
      744,  743,  739,  738,  737,  729,  126,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  127,  128,  101,  101,

      101,  101,  101,  101,  103,  129,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  127,  128,  728,  727,  717,  713,  712,  711,
      710,  129,  705,  704,  703,  702,  694,  691,  689,  130,
      131,  132,  103,  103,  103,  103,  103,  103,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  124,  130,  131,  132,  133,  134,
      124,  136,  137,  138,  139,  140,  141,  142,  143,  688,
      683,  682,  674,  668,  105,  105,  105,  105,  105,  105,
      124,  667,  666,  665,  133,  134,  124,  136,  137,  138,

      139,  140,  141,  142,  143,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  150,  144,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  144,  144,  144,  144,  144,  144,  664,  144,  149,
      646,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  154,  156,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  643,  642,
      641,  632,  626,  620,  619,  156,  158,  149,  149,  149,
      149,  149,  149,  152,  160,  152,  152,  152,  152,  152,

      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  156,  158,  618,  617,  615,  604,  596,  594,  593,
      160,  592,  570,  564,  563,  562,  561,  161,  162,  164,
      167,  152,  152,  152,  152,  152,  152,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  168,  153,  153,  153,
      153,  153,  153,  161,  162,  164,  167,  554,  542,  540,
      529,  527,  169,  526,  525,  522,  490,  483,  482,  170,
      481,  480,  168,  153,  153,  153,  153,  153,  153,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  169,  155,
      155,  155,  155,  155,  155,  170,  171,  174,  175,  176,

      177,  178,  180,  181,  179,  171,  171,  171,  179,  182,
      183,  184,  174,  185,  186,  155,  155,  155,  155,  155,
      155,  189,  171,  174,  175,  176,  177,  178,  180,  181,
      179,  171,  171,  171,  179,  182,  183,  184,  174,  185,
      186,  187,  190,  192,  193,  194,  211,  189,  212,  213,
      214,  215,  216,  190,  214,  217,  187,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  187,  190,  192,
      193,  194,  211,  447,  212,  213,  214,  215,  216,  190,
      214,  217,  187,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  202,  436,  202,  202,  202,  202,  202,  202,

      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      204,  433,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  432,  431,  416,  403,  387,  378,  219,  377,  376,
      202,  202,  202,  202,  202,  202,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  220,  203,  203,  203,  203,
      203,  203,  205,  219,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  375,  334,  323,  320,  319,  318,  316,
      311,  220,  203,  203,  203,  203,  203,  203,  206,  303,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  207,  222,  207,  207,

      207,  207,  207,  207,  207,  207,  207,  302,  299,  285,
      276,  267,  259,  258,  257,  223,  206,  206,  206,  206,
      206,  206,  208,  222,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      209,  223,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  218,  224,  225,  226,  227,  228,  229,  218,  230,
      208,  208,  208,  208,  208,  208,  218,  231,  232,  234,
      235,  236,  229,  237,  239,  240,  241,  218,  224,  225,
      226,  227,  228,  229,  218,  230,  242,  243,  244,  245,
      246,  247,  218,  231,  232,  234,  235,  236,  229,  237,

      239,  240,  241,  248,  249,  250,  251,  252,  254,  255,
      256,  271,  242,  243,  244,  245,  246,  247,  260,  253,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  248,
      249,  250,  251,  252,  254,  255,  261,  271,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  262,  272,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  261,  261,  261,  261,  261,  261,
      263,  272,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  264,  273,

      264,  264,  264,  264,  264,  264,  264,  264,  264,  238,
      210,  274,  200,  199,  198,  197,  195,  191,  263,  263,
      263,  263,  263,  263,  266,  273,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  268,  274,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  270,  188,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  173,  165,  163,  159,  148,
      275,  277,  279,  280,  268,  268,  268,  268,  268,  268,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  281,
      269,  269,  269,  269,  269,  269,  275,  277,  279,  280,

      282,  284,  286,  287,  288,  289,  290,  291,  292,  293,
      294,  295,  296,  298,  300,  281,  269,  269,  269,  269,
      269,  269,  301,  304,  305,  307,  282,  284,  286,  287,
      288,  289,  290,  291,  292,  293,  294,  295,  296,  298,
      300,  308,  309,  310,  313,  314,  315,  317,  301,  304,
      305,  307,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  333,  147,  146,  135,  125,  121,  308,  309,  310,
      313,  314,  315,  317,  322,  111,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  324,  333,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,

      324,  324,  324,  324,  326,  100,  326,  326,  326,  326,
      326,  326,  326,  326,  326,   98,   75,   50,   46,   45,
       42,  335,   37,   18,  324,  324,  324,  324,  324,  324,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  336,
      325,  325,  325,  325,  325,  325,  327,  335,  327,  327,
      327,  327,  327,  327,  327,  327,  327,   14,  337,   12,
        7,    4,    3,    0,    0,  336,  325,  325,  325,  325,
      325,  325,  328,    0,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  329,  337,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,

      329,  330,  339,  330,  330,  330,  330,  330,  330,  330,
      330,  330,    0,    0,    0,    0,    0,    0,    0,    0,
      341,  329,  329,  329,  329,  329,  329,  331,  339,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  332,  341,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  338,  342,  343,  344,
      345,  346,  338,  347,  338,  331,  331,  331,  331,  331,
      331,  348,  349,  350,  351,  352,  353,  354,  355,  356,
      357,  358,  338,  342,  343,  344,  345,  346,  338,  347,
      338,  359,  360,  361,  362,  365,  366,  348,  349,  350,

      351,  352,  353,  354,  355,  356,  357,  358,  367,  368,
      369,  370,  372,  373,  374,    0,  391,  359,  360,  361,
      362,  365,  366,  379,    0,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  367,  368,  369,  370,  372,  373,
      374,  380,  391,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  381,    0,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      382,  392,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      381,  381,  381,  381,  381,  381,  383,  392,  383,  383,

      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  384,  393,  384,  384,  384,  384,
      384,  384,  384,  384,  384,    0,    0,  394,    0,    0,
        0,    0,    0,    0,  383,  383,  383,  383,  383,  383,
      386,  393,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  388,  394,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      390,    0,  390,  390,  390,  390,  390,  390,  390,  390,
      390,    0,    0,    0,    0,    0,  395,  396,  397,  398,
      388,  388,  388,  388,  388,  388,  389,  389,  389,  389,

      389,  389,  389,  389,  389,  399,  389,  389,  389,  389,
      389,  389,  395,  396,  397,  398,  401,  402,  404,  406,
      407,  410,  411,  412,  413,  414,  415,  417,  418,  419,
      420,  399,  389,  389,  389,  389,  389,  389,  421,  422,
      423,  424,  401,  402,  404,  406,  407,  410,  411,  412,
      413,  414,  415,  417,  418,  419,  420,  425,  426,  427,
      428,  429,    0,  445,  421,  422,  423,  424,  434,  434,
      434,  434,  434,  434,  434,  434,  434,    0,    0,    0,
        0,    0,    0,  425,  426,  427,  428,  429,  435,  445,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,

      437,    0,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  439,    0,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  437,  437,
      437,  437,  437,  437,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  446,  438,  438,  438,  438,  438,  438,
      442,  448,  442,  442,  442,  442,  442,  442,  442,  442,
      442,    0,    0,    0,    0,    0,    0,    0,    0,  446,
      438,  438,  438,  438,  438,  438,  441,  448,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,

      441,  441,  441,  441,  444,  449,  444,  444,  444,  444,
      444,  444,  444,  444,  444,    0,    0,    0,    0,    0,
        0,    0,  450,  451,  441,  441,  441,  441,  441,  441,
      443,  449,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  450,  451,
      452,  453,  455,  456,  457,  458,  460,  461,  462,  463,
      465,  467,  468,  469,  470,  471,  472,  466,  443,  443,
      443,  443,  443,  443,  466,  473,  452,  453,  455,  456,
      457,  458,  460,  461,  462,  463,  465,  467,  468,  469,
      470,  471,  472,  466,  474,  476,  478,  479,    0,  494,

      466,  473,  484,  484,  484,  484,  484,  484,  484,  484,
      484,    0,    0,    0,    0,    0,    0,  495,    0,    0,
      474,  476,  478,  479,  485,  494,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  486,  495,  486,  486,  486,  486,  486,  486,
      486,  486,  486,    0,    0,    0,    0,    0,    0,    0,
        0,  496,  485,  485,  485,  485,  485,  485,  487,    0,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  488,  496,  488,  488,
      488,  488,  488,  488,  488,  488,  488,    0,    0,  497,

        0,    0,    0,    0,    0,    0,  487,  487,  487,  487,
      487,  487,  489,    0,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  491,  497,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  493,    0,  493,  493,  493,  493,  493,  493,
      493,  493,  493,    0,    0,    0,    0,    0,  498,  499,
      500,  501,  491,  491,  491,  491,  491,  491,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  503,  492,  492,
      492,  492,  492,  492,  498,  499,  500,  501,  504,  505,
      507,  508,  512,  513,  514,  515,  516,  517,  518,  521,

      523,  524,    0,  503,  492,  492,  492,  492,  492,  492,
        0,    0,    0,    0,  504,  505,  507,  508,  512,  513,
      514,  515,  516,  517,  518,  521,  523,  524,  528,    0,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      530,    0,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  532,    0,
      532,  532,  532,  532,  532,  532,  532,  532,  532,    0,
        0,    0,    0,    0,    0,  538,    0,    0,  530,  530,
      530,  530,  530,  530,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  539,  531,  531,  531,  531,  531,  531,

      534,  538,  534,  534,  534,  534,  534,  534,  534,  534,
      534,    0,    0,    0,    0,    0,    0,    0,    0,  539,
      531,  531,  531,  531,  531,  531,  533,    0,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  536,  541,  536,  536,  536,  536,
      536,  536,  536,  536,  536,    0,    0,    0,    0,    0,
        0,    0,  544,  545,  533,  533,  533,  533,  533,  533,
      535,  541,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  544,  545,
      546,  550,  551,  552,  553,  555,  556,  557,  558,  559,

        0,  575,    0,    0,    0,    0,    0,    0,  535,  535,
      535,  535,  535,  535,    0,    0,  546,  550,  551,  552,
      553,  555,  556,  557,  558,  559,  565,  575,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  566,  576,  566,  566,  566,  566,
      566,  566,  566,  566,  566,    0,    0,    0,    0,    0,
        0,    0,    0,  581,  565,  565,  565,  565,  565,  565,
      567,  576,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  568,  581,
      568,  568,  568,  568,  568,  568,  568,  568,  568,    0,

        0,  582,    0,    0,    0,    0,    0,    0,  567,  567,
      567,  567,  567,  567,  569,    0,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  571,  582,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  573,    0,  573,  573,  573,  573,
      573,  573,  573,  573,  573,    0,    0,    0,    0,    0,
        0,  583,  584,  586,  571,  571,  571,  571,  571,  571,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  587,
      572,  572,  572,  572,  572,  572,  578,  583,  584,  586,
      588,  590,  578,  591,  599,  605,  599,  599,  599,  599,

      599,  599,  599,  599,  599,  587,  572,  572,  572,  572,
      572,  572,  578,    0,    0,    0,  588,  590,  578,  591,
      595,  605,  595,  595,  595,  595,  595,  595,  595,  595,
      595,  595,  597,    0,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      601,    0,  601,  601,  601,  601,  601,  601,  601,  601,
      601,    0,    0,    0,    0,    0,    0,  606,    0,    0,
      597,  597,  597,  597,  597,  597,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  607,  598,  598,  598,  598,
      598,  598,  603,  606,  603,  603,  603,  603,  603,  603,

      603,  603,  603,    0,    0,    0,    0,    0,    0,    0,
      609,  607,  598,  598,  598,  598,  598,  598,  600,  610,
      600,  600,  600,  600,  600,  600,  600,  600,  600,  600,
      600,  600,  600,  600,  600,  600,  609,  611,    0,    0,
        0,    0,    0,    0,    0,  610,    0,    0,    0,    0,
        0,    0,    0,    0,  612,  614,  600,  600,  600,  600,
      600,  600,  602,  611,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      612,  614,  616,  622,  630,  622,  622,  622,  622,  622,
      622,  622,  622,  622,    0,    0,    0,    0,    0,    0,

      602,  602,  602,  602,  602,  602,    0,    0,  616,  621,
      630,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  624,  631,  624,
      624,  624,  624,  624,  624,  624,  624,  624,    0,    0,
        0,    0,    0,    0,    0,    0,  633,  621,  621,  621,
      621,  621,  621,  623,  631,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  625,  633,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,    0,    0,    0,    0,    0,    0,    0,
      634,  623,  623,  623,  623,  623,  623,  627,    0,  627,

      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  629,  634,  629,  629,  629,
      629,  629,  629,  629,  629,  629,    0,    0,    0,    0,
        0,  635,  636,  637,  638,  627,  627,  627,  627,  627,
      627,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      639,  628,  628,  628,  628,  628,  628,  635,  636,  637,
      638,  645,    0,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,    0,    0,    0,  639,  628,  628,  628,
      628,  628,  628,  647,    0,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,

      647,  649,    0,  649,  649,  649,  649,  649,  649,  649,
      649,  649,    0,    0,    0,    0,    0,    0,  654,    0,
        0,  647,  647,  647,  647,  647,  647,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  655,  648,  648,  648,
      648,  648,  648,  651,  654,  651,  651,  651,  651,  651,
      651,  651,  651,  651,    0,    0,    0,    0,    0,    0,
        0,    0,  655,  648,  648,  648,  648,  648,  648,  650,
        0,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  653,  658,  653,
      653,  653,  653,  653,  653,  653,  653,  653,    0,    0,

        0,    0,    0,    0,    0,  660,  661,  650,  650,  650,
      650,  650,  650,  652,  658,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  660,  661,  663,  670,  678,  670,  670,  670,  670,
      670,  670,  670,  670,  670,    0,    0,    0,    0,    0,
        0,  652,  652,  652,  652,  652,  652,    0,    0,  663,
      669,  678,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  672,  679,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  684,
        0,    0,    0,    0,    0,    0,    0,  685,  669,  669,

      669,  669,  669,  669,  671,  679,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  684,  671,  671,  671,  671,
      671,  671,  673,  685,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,    0,    0,    0,    0,    0,    0,
        0,  686,  671,  671,  671,  671,  671,  671,  675,    0,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  677,  686,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  687,    0,    0,
        0,    0,    0,    0,    0,    0,  675,  675,  675,  675,
      675,  675,    0,    0,    0,    0,    0,    0,    0,  700,

        0,    0,  693,  687,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  695,    0,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  700,  695,  695,  695,  695,
      695,  695,  696,  701,  696,  696,  696,  696,  696,  696,
      696,  696,  696,    0,    0,    0,    0,    0,    0,    0,
        0,  708,  695,  695,  695,  695,  695,  695,  697,  701,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  698,  708,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  709,    0,  719,
        0,    0,    0,    0,    0,    0,  697,  697,  697,  697,

      697,  697,  715,    0,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  709,  714,  719,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  720,  714,  714,  714,  714,
      714,  714,  716,  726,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  734,  736,  741,  742,    0,    0,
        0,  720,  714,  714,  714,  714,  714,  714,  731,  726,
      731,  731,  731,  731,  731,  731,  731,  731,  731,    0,
      734,  736,  741,  742,  773,  773,  773,  773,  774,  774,
      774,  774,  775,  775,  775,  775,  776,    0,  776,  776,
      777,  777,  777,  777,  778,    0,  778,  778,  779,  779,

      781,  781,  782,  782,  783,  783,  784,  784,  785,  785,
      786,  786,  787,  787,  788,  788,  789,  789,  790,  790,
      791,  791,  792,  792,  793,  793,  794,  794,  795,  795,
      796,  796,  797,  797,  798,  798,  799,  799,  800,  800,
      801,  801,  802,  802,  803,  803,  804,  804,  805,  805,
      806,  806,  807,  807,  808,  808,  809,  809,  810,  810,
      811,  811,  812,  812,  813,  813,  814,  814,  815,  815,
      816,  816,  818,  818,  819,  819,  820,  820,  822,  822,
      823,  823,  824,  824,  827,  827,  828,  828,  829,  829,
      831,  831,  832,  832,  835,  835,  836,  836,  837,  837,

      838,  838,  839,  839,  841,  841,  842,  842,  843,  843,
      844,  844,  845,  845,  847,  847,  848,  848,  849,  849,
      851,  851,  853,  853,  854,  854,  855,  855,  857,  857,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,

      772,  772,  772,  772,  772
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[92] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_ClntParser_stype yylval;
}

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 773 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3831 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
{ return ClntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
{ return ClntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
{ return ClntParser::ADDRESS_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
{ return ClntParser::STRING_KEYWORD_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ return ClntParser::ADDRESS_LIST_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ return ClntParser::NAME_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ return ClntParser::IA_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
{ return ClntParser::TA_; }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ return ClntParser::IAID_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 13:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
{ return ClntParser::LOGLEVEL_; }
	YY_BREAK
case 15:
YY_RULE_SETUP
{ return ClntParser::LOGMODE_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ return ClntParser::LOGNAME_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ return ClntParser::LOGCOLORS_; }
	YY_BREAK
case 18:
YY_RULE_SETUP
{ return ClntParser::WORKDIR_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
{ return ClntParser::SCRIPT_; }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ return ClntParser::VALID_TIME_; }
	YY_BREAK
case 22:
YY_RULE_SETUP
{ return ClntParser::REMOTE_AUTOCONF_; }
	YY_BREAK
case 23:
YY_RULE_SETUP
{ return ClntParser::T1_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
{ return ClntParser::T2_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
{ return ClntParser::OPTION_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
{ return ClntParser::DNS_SERVER_;}
	YY_BREAK
case 27:
YY_RULE_SETUP
{ return ClntParser::DOMAIN_;}
	YY_BREAK
case 28:
YY_RULE_SETUP
{ return ClntParser::NTP_SERVER_;}
	YY_BREAK
case 29:
YY_RULE_SETUP
{ return ClntParser::TIME_ZONE_;}
	YY_BREAK
case 30:
YY_RULE_SETUP
{ return ClntParser::SIP_SERVER_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
{ return ClntParser::SIP_DOMAIN_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
{ return ClntParser::FQDN_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ return ClntParser::FQDN_S_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ return ClntParser::NIS_SERVER_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ return ClntParser::NIS_DOMAIN_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ return ClntParser::NISP_SERVER_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
{ return ClntParser::NISP_DOMAIN_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ return ClntParser::LIFETIME_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ return ClntParser::ROUTING_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ return ClntParser::REJECT_SERVERS_;}
	YY_BREAK
case 41:
YY_RULE_SETUP
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 42:
YY_RULE_SETUP
{ return ClntParser::RAPID_COMMIT_;}
	YY_BREAK
case 43:
YY_RULE_SETUP
{ return ClntParser::RECONFIGURE_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
{ return ClntParser::UNICAST_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
{ return ClntParser::STRICT_RFC_NO_ROUTING_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
{ return ClntParser::PREFIX_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LL_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LLT_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_EN_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ return ClntParser::VENDOR_SPEC_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ return ClntParser::ANON_INF_REQUEST_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ return ClntParser::INSIST_MODE_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ return ClntParser::INACTIVE_MODE_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ return ClntParser::AUTH_ENABLED_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ return ClntParser::AUTH_ACCEPT_METHODS_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ return ClntParser::DIGEST_NONE_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ return ClntParser::DIGEST_PLAIN_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
{ return ClntParser::SKIP_CONFIRM_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
{ return ClntParser::AFTR_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ return ClntParser::EXPERIMENTAL_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
{ return ClntParser::ADDR_PARAMS_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
{ return ClntParser::REQUEST_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
;
	YY_BREAK
case 73:
YY_RULE_SETUP
;
	YY_BREAK
case 74:
YY_RULE_SETUP
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
BEGIN(INITIAL);
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 77:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 78:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 79:
YY_RULE_SETUP
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 80:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 81:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 82:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 83:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return ClntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return ClntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
{
    // DUID in 0x00010203 format
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return ClntParser::DUID_;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
{
   // DUID in 00:01:02:03 format
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
        x = (toupper(*pos)-'A' + 10);
      else
        x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))	
        x += (toupper(*(pos+1))-'A' + 10);
      else
        x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }
   
   return ClntParser::DUID_;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
{ 
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::HEXNUMBER_;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
{ 
    if(!sscanf(yytext,"%u",(unsigned int*)&(yylval.ival))) { 
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::INTNUMBER_;
}
	YY_BREAK
case 90:
YY_RULE_SETUP
{return yytext[0];} 
	YY_BREAK
case 91:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 773 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 773 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 772);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

