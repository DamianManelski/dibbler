
#line 3 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 82
#define YY_END_OF_BUFFER 83
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[718] =
    {   0,
        1,    1,    0,    0,    0,    0,   83,   81,    2,    1,
        1,   81,   64,   81,   81,   80,   80,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   68,   68,   82,    1,
        1,    1,    0,   76,   64,    0,   76,   66,   65,   80,
        0,    0,   79,    0,   73,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,    6,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   40,   77,   77,
       77,   77,   77,   77,   77,   18,   19,    7,   77,   77,
       77,   77,   77,   77,   67,   65,   80,    0,    0,   72,

       78,   71,   71,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   80,    0,
        0,    0,   70,   70,    0,   71,    0,   71,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   27,    8,   77,
       77,   77,   77,   77,   77,    0,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   80,    0,    0,    0,    0,
       70,    0,   70,    0,   71,   71,   71,   71,   77,   77,

       77,   77,   77,   77,   77,   77,   77,   77,   77,    3,
       77,   77,   77,   77,   77,   77,   77,    0,   77,   77,
       77,    9,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
        0,    0,    0,    0,   70,   70,   70,   70,    0,   71,
       71,   71,    0,   71,   77,   77,   77,   77,   77,   77,
       77,   22,   77,   77,   77,   77,   28,   77,   77,   77,
       77,   77,   77,   77,    0,    0,   77,   77,   77,   77,
       20,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,    0,    0,    0,

       70,   70,   70,    0,   70,    0,    0,   71,   71,   71,
       71,   77,    5,   77,   77,   77,   77,   77,   44,   42,
       77,   77,   77,   77,   77,   77,   77,   77,   77,    0,
        0,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   37,   77,   77,
       77,    0,    0,    0,    0,    0,   70,   70,   70,   70,
        0,   71,   71,   71,    0,   71,   77,   77,   77,   77,
       77,   77,   77,   77,   43,   77,   77,   77,   77,   33,
       77,   12,   13,   77,    0,    0,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,

       77,   77,   77,   77,   14,    0,    0,    0,   70,   70,
       70,    0,   70,   75,   71,   71,   71,   71,   77,   77,
       77,   77,   77,   77,   77,   77,   41,   77,   77,   77,
       11,   77,    0,    0,   77,   77,    4,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   10,   77,   24,   77,
       77,   77,    0,    0,    0,   74,   70,   70,   70,   70,
       71,   71,   71,    0,   71,   77,   77,   77,   77,   77,
       77,   77,   21,   77,   77,   77,   77,    0,    0,   30,
       29,   23,   77,   77,   77,   77,   77,   77,   26,   25,
       77,   77,   77,   77,   77,    0,    0,   70,   70,   70,

        0,   70,   71,   71,   71,   71,   60,   77,   77,   77,
       77,   51,   77,   77,   77,   47,   77,   32,   31,   77,
       77,   77,   77,   77,   15,   77,   77,   63,   77,   45,
        0,    0,    0,   70,   70,   70,   70,   71,   71,   71,
        0,   71,   77,   77,   49,   77,   52,   59,   77,   77,
       77,   77,   77,   36,   77,   62,   77,   77,    0,    0,
       70,   70,   70,    0,   70,   71,   71,   71,   71,   77,
       77,   77,   77,   48,   77,   77,   77,   77,   34,   77,
       77,    0,    0,    0,   70,   70,   70,   70,   71,   71,
       71,    0,   71,   77,   77,   77,   77,   61,   77,   77,

       77,   77,   17,    0,   69,   72,   70,   70,   70,    0,
       70,   71,   71,   71,   71,   77,   77,   53,   77,   77,
       35,   77,   77,    0,   69,    0,   70,   70,   70,   70,
       70,   71,   71,   71,    0,   71,   77,   77,   54,   77,
       77,   77,   77,   77,   77,   69,   72,   70,    0,   70,
       70,   70,   70,   71,   71,   71,   77,   77,   77,   77,
       77,   77,   16,   39,   77,   69,   70,   70,   70,   70,
       71,   71,   71,   77,   77,   55,   56,   57,   58,   77,
       70,   70,    0,   70,   70,   71,   77,   50,   77,   70,
       70,   71,   77,   77,   70,   70,    0,   46,   38,   70,

       70,   70,   70,    0,   70,   70,   70,   70,    0,   70,
       70,   70,   70,    0,   70,   70,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
        1,    1,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,    1,    1,    1,    1,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    3,    3,    3,    3,    3,    3,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[782] =
    {   0,
        0,    0, 1083, 1082,    0,    0, 1062, 3772, 3772,   72,
       74, 1048,    0, 1045,   71,   71,   34, 1029,  134,  183,
      184,  186,  218,  275,   77,   71,   58,   72,   66,  185,
       88,  279,  292,   74,   89,  176, 3772, 1038, 3772,  115,
      129,  213, 1044, 3772,    0, 1041, 1040, 3772,    0,  349,
     1024,  258, 3772,    0,  393,    0,  435,  188,    0,  186,
      182,  201,  192,  199,  211,  205,  256,  282,  291,  293,
      289,  290,  282,  281, 1002,  294,  291,    0,  325,  316,
      323,  316,  319,  358,  441,    0,    0,    0,  361,  361,
      373,  406,  405,  428, 3772,    0,  495,  418,  989,  539,

        0,  583,  458,  625,  430,  444,  468,  473,  999,  478,
      476,  476,  468,  479,  510,  517,  512,  523,  998,  548,
      253,  629,  997,  556,  567,  598,  603,  600,  996,  609,
      616,  628,  634,  626,  638,  633,  639,  633,  680,  564,
      983,  982,  726,  698,  707,  770,  812,  744,  854,  746,
      727,  984,  741,  774,  785,  966,  777,  951,    0,  791,
      792,  809,  815,  850,  856,  944,  868,  851,  866,  849,
      854,  865,  867,  870,  859,  898,  943,  872,  875,  942,
      874,  879,  903,  893,  941,  927,  876,  837,  836,  953,
      964, 1006,  982, 1024, 1050, 1068, 1094, 1112,  834,  893,

      891,  898,  911,  894,  910,  974, 1107,  997, 1039,    0,
     1067, 1093, 1105, 1110, 1101, 1116, 1104, 1116, 1113, 1124,
     1116,    0, 1126, 1118, 1115, 1110,  845, 1116, 1117, 1132,
     1143, 1146, 1138, 1131, 1126, 1152, 1146,  844, 1148, 1163,
      831,  830,  829, 1190, 1205, 1223, 1249, 1267, 1232, 1293,
      827, 1305, 1347, 1323, 1168, 1194, 1242, 1266, 1314,  838,
     1311,    0, 1316, 1319, 1322, 1345,    0, 1337,  837, 1347,
     1339, 1358, 1350, 1357, 1350, 1361, 1354, 1350, 1363, 1352,
        0, 1366,  836, 1369,  835, 1361, 1368, 1364, 1368, 1394,
      804, 1385,  803, 1381, 1390,  802, 1394,  789,  788, 1419,

     1441,  787, 1453, 1495, 1471, 1513, 1539, 1550, 1568, 1594,
     1612, 1387,    0, 1456, 1492, 1513, 1604, 1536,    0, 1556,
     1597, 1609, 1610, 1603, 1612, 1614, 1622, 1623,  797, 1616,
     1612, 1630, 1610, 1624, 1612, 1631, 1632, 1622, 1628,  796,
     1647, 1627, 1636, 1632, 1634, 1650, 1652,    0, 1657, 1648,
     1650,  783,  782,  781, 1690, 1706, 1717, 1735, 1761, 1779,
     1744, 1805,  780, 1817, 1859, 1835, 1669, 1706, 1764, 1779,
     1827, 1826, 1830, 1838,    0, 1854, 1856,  791, 1856,    0,
     1860,    0,    0, 1857, 1873, 1853, 1867, 1872, 1871, 1874,
      762, 1875, 1868, 1877, 1879, 1875, 1887, 1887, 1875, 1889,

     1906, 1897, 1907, 1898,    0,  749,  748, 1931, 1952,  747,
     1964, 2006, 1982, 1991, 2050, 2024, 2094, 2068, 1903,  758,
     1990, 2002, 2057, 2061, 2075, 2085,    0, 2084, 2092, 2102,
        0, 2089, 2099, 2104, 2096, 2093,    0, 2094, 2101, 2102,
     2102, 2098, 2108, 2104, 2101, 2118,    0, 2125,    0, 2143,
     2143, 2144,  745,  744,  716, 2164, 2187, 2205, 2231, 2249,
     2275,  713, 2287, 2329, 2305, 2132, 2160, 2193, 2246, 2307,
     2306, 2303,    0, 2312, 2314, 2335, 2336, 2328, 2325,    0,
        0,    0, 2335, 2340, 2341, 2338, 2326, 2331,    0,    0,
     2332,  673, 2346, 2332, 2350,  660,  659, 2391,  650, 2403,

     2445, 2421, 2489, 2463, 2533, 2507,    0, 2413,  661, 2441,
      660,    0, 2483, 2502, 2511,    0, 2536, 3772, 3772, 2537,
     2526, 2538, 2526, 2542,    0, 2535, 2535,    0, 2541,    0,
      647,  646,  645, 2588, 2606, 2632, 2650, 2676,  606, 2688,
     2730, 2706, 2546, 2583,    0, 2724,    0,    0, 2609, 2643,
     2707, 2691, 2713,    0, 2712,    0, 2726, 2729,  605,  604,
     2755,  603, 2781, 2823, 2799, 2867, 2841, 2911, 2885,  614,
     2740, 2801, 2815,    0, 2851, 2872, 2888, 2900,    0,  613,
     2916,  600,  598,  597, 2959, 2933, 3003, 2977, 3021,  596,
     3047, 3089, 3065, 2905, 2947,  599, 2984,    0, 3020, 3052,

     3062, 3054,    0,  594,  593,    0, 3110,  592, 3133, 3175,
     3151, 3219, 3193, 3263, 3237, 3084, 3149,    0,  370, 3162,
        0, 3212, 3229,  553,  552,  551,  550, 3307, 3282, 3351,
     3325, 3369,  549, 3395,    0, 3413, 3272, 3310,    0,  213,
      549,  527, 3328, 3363, 3392,  518, 3772,  517,    0, 3449,
      516, 3461, 3479, 3505, 3523,    0, 3414, 3465,  520,  517,
      517,  518,    0,    0, 3467,  510,  477,  475, 3549, 3567,
     3593,  473,    0, 3518, 3512,    0,    0,    0,    0, 3559,
      471,  470,    0, 3606, 3772,    0, 3551,    0, 3569,  461,
      460, 3772, 3586, 3600,  407,  406,    0,    0,    0,  405,

      404,  403,  402,    0,  373,  372,  371,  370,    0,  369,
      368,  365,  331,    0,  329,  328, 3772, 3655, 3659, 3663,
     3667, 3671, 3675, 3677,  306, 3679, 3681, 3683, 3685, 3687,
     3689, 3691, 3693, 3695, 3697, 3699, 3701, 3703, 3705, 3707,
     3709, 3711, 3713, 3715, 3717, 3719, 3721, 3723, 3725, 3727,
      283, 3729, 3731,  282, 3733, 3735,  281,  278, 3737, 3739,
      264, 3741,  263,  262, 3743, 3745, 3747,  261, 3749, 3751,
     3753,  215, 3755, 3757, 3759,  143, 3761, 3763, 3765,   79,
     3767
    } ;

static yyconst flex_int16_t yy_def[782] =
    {   0,
      717,    1,  718,  718,  719,  719,  717,  717,  717,  717,
      717,  720,  721,  722,  717,  717,   16,  717,  717,   19,
       19,   19,   19,   19,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  717,  717,  717,  717,
      717,  717,  720,  717,  721,  722,  717,  717,  723,  717,
      724,   50,  717,  725,  717,   24,   24,   57,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  717,  723,  717,   97,  726,  717,

      725,  717,  102,   57,  104,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  717,  139,
      727,  728,  717,  143,  717,  717,  717,  146,  104,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  717,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  140,  140,  729,  730,  717,
      717,  717,  191,  717,  717,  195,  717,  197,  149,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  717,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      717,  731,  732,  717,  717,  245,  717,  247,  717,  717,
      717,  717,  717,  252,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  717,  717,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  733,  734,  717,

      717,  717,  717,  717,  303,  717,  717,  717,  308,  717,
      310,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  717,
      717,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  717,  735,  736,  717,  717,  717,  357,  717,  359,
      717,  717,  717,  717,  717,  364,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  717,  717,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,  737,  738,  717,  717,  717,
      717,  717,  411,  717,  717,  415,  717,  417,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  717,  717,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  717,  739,  740,  717,  717,  457,  717,  459,
      717,  717,  717,  717,  463,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  717,  717,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  741,  742,  717,  717,  717,

      717,  500,  717,  503,  717,  505,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  717,  717,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      717,  743,  744,  717,  534,  717,  536,  717,  717,  717,
      717,  540,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  745,  746,
      717,  717,  717,  717,  563,  717,  566,  717,  568,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  717,  747,  748,  717,  585,  717,  587,  717,  717,
      717,  717,  591,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,  749,  750,  751,  717,  717,  717,  717,
      609,  717,  612,  717,  614,   24,   24,   24,   24,   24,
       24,   24,   24,  717,  752,  717,  753,  717,  628,  717,
      630,  717,  717,  717,  754,  634,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  755,  717,  756,  757,  717,
      717,  717,  652,  717,  654,  758,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  717,  759,  760,  717,  669,
      717,  717,  761,   24,   24,   24,   24,   24,   24,   24,
      717,  762,  763,  717,  717,  764,   24,   24,   24,  765,
      766,  717,   24,   24,  717,  767,  768,   24,   24,  769,

      770,  717,  771,  772,  773,  774,  717,  775,  776,  777,
      778,  717,  779,  780,  781,  717,    0,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717
    } ;

static yyconst flex_int16_t yy_nxt[3847] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   20,   21,   22,   23,   24,   24,
       25,   24,   24,   26,   27,   28,   29,   30,   24,   31,
       32,   33,   34,   35,   36,   24,   24,   24,   19,   20,
       20,   21,   22,   23,   24,   24,   25,   24,   24,   26,
       27,   28,   29,   30,   24,   31,   32,   33,   34,   35,
       36,   24,   24,   24,   40,   41,   42,   41,   48,  717,
       73,  631,   49,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   51,   52,   52,   52,   52,   52,   52,   68,

       53,   71,   74,   77,   69,  717,   73,   72,   75,   91,
       80,   92,   70,   76,   81,   93,   54,   40,   41,   52,
       52,   52,   52,   52,   52,   68,   53,   71,   74,   77,
       69,   42,   41,   72,   75,   91,   80,   92,   70,   76,
       81,   93,   54,   56,   56,  711,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   51,   57,   57,   57,   58,
       57,   57,   56,   59,   56,   56,   56,   56,   56,   60,
       56,   56,   56,   56,   56,   56,   61,   56,   56,   56,
       56,   56,   57,   57,   57,   58,   57,   57,   56,   59,
       56,   56,   56,   56,   56,   60,   56,   56,   56,   56,

       56,   56,   61,   56,   56,   56,   56,   56,   57,   57,
       78,   57,   94,  105,   62,   40,   41,  706,   56,   63,
       64,   56,  106,  107,   79,   56,   65,  659,   56,  108,
      660,   66,  109,  110,   57,   57,   78,   57,   94,  105,
       62,  111,  112,   57,   56,   63,   64,   56,  106,  107,
       79,   56,   65,   56,   56,  108,   67,   66,  109,  110,
       56,  166,  167,  701,  692,  691,  686,  111,  112,   57,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   56,
      673,  113,   67,  668,  656,  627,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,  717,   56,   56,   56,

       56,   56,   56,   82,   56,   86,   87,  113,  101,   83,
       56,   84,  114,  115,   88,  116,  118,   56,  119,  120,
       85,  121,   89,   56,   56,   56,   56,   56,   56,   82,
       56,  123,  124,  117,   90,   83,   56,   84,  114,  115,
       88,  116,  118,   56,  119,  120,   85,  121,   89,  714,
      714,  125,  714,  126,  127,  128,  129,  123,  124,  117,
       90,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       51,   98,   98,   98,   98,   98,   98,  125,   53,  126,
      127,  128,  129,  639,  640,  641,  709,  642,  130,  714,
      709,  709,  704,  709,  704,  133,  134,   98,   98,   98,

       98,   98,   98,  135,   53,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  130,  103,  103,  103,  103,  103,
      103,  133,  134,  704,  697,  704,  697,  697,  683,  135,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  136,
      137,  103,  103,  103,  103,  103,  103,  104,  104,  104,
      104,  104,  104,  104,  104,  104,   51,  104,  104,  104,
      104,  104,  104,  131,   59,  136,  137,  138,  717,  150,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  151,
      132,  697,  683,  104,  104,  104,  104,  104,  104,  131,
       59,  683,  649,  138,  635,  150,  683,  152,  649,  153,

      155,  156,  157,  158,  159,  151,  132,  139,  139,  139,
      139,  139,  139,  139,  139,  139,   51,  140,  140,  140,
      140,  140,  140,  152,   53,  153,  155,  156,  157,  158,
      159,  626,  679,  678,  160,  677,  676,  610,  649,  626,
      662,  161,  162,  140,  140,  140,  140,  140,  140,  163,
       53,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      160,  144,  144,  144,  144,  144,  144,  161,  162,  661,
      592,  649,  647,  626,  584,  163,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  165,  171,  144,  144,  144,
      144,  144,  144,  145,  172,  146,  146,  146,  146,  146,

      146,  146,  146,  146,  147,  148,  148,  148,  148,  148,
      148,  165,  171,  564,  626,  584,  618,  541,  606,  584,
      172,  533,  602,  594,  501,  584,  533,  464,  173,  174,
      175,  148,  148,  148,  148,  148,  148,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  177,  149,  149,  149,
      149,  149,  149,  168,  173,  174,  175,  178,  179,  169,
      180,  181,  182,  183,  184,  185,  100,  533,  455,  546,
      544,  412,  177,  149,  149,  149,  149,  149,  149,  168,
      533,  455,  527,  178,  179,  169,  180,  181,  182,  183,
      184,  185,  186,  186,  186,  186,  186,  186,  186,  186,

      186,   51,  187,  187,  187,  187,  187,  187,  717,   53,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  187,  187,
      187,  187,  187,  187,  365,   53,  190,  100,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  192,  193,  193,
      193,  193,  193,  193,  717,  200,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  455,  354,  467,  304,  455,
      354,  439,  201,  202,  193,  193,  193,  193,  193,  193,
      145,  204,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  147,  196,  196,  196,  196,  196,  196,  201,  202,

      429,  253,  100,  354,  243,  395,  384,  204,  192,  354,
      243,  350,  347,  345,  205,  206,  208,  210,  196,  196,
      196,  196,  196,  196,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  211,  198,  198,  198,  198,  198,  198,
      205,  206,  208,  210,  339,  337,  324,  317,  147,  212,
      100,  243,  142,  295,  284,  717,  213,  243,  142,  211,
      198,  198,  198,  198,  198,  198,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  212,  199,  199,  199,  199,
      199,  199,  213,  214,  215,  216,  217,  221,  222,  223,
      224,  225,  227,  219,  228,  226,  229,  717,  233,  234,

      236,  237,  199,  199,  199,  199,  199,  199,  220,  214,
      215,  216,  217,  221,  222,  223,  224,  225,  227,  219,
      228,  226,  229,  230,  233,  234,  236,  237,  238,  239,
      255,  256,  257,  258,  220,  260,  261,  259,  231,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  717,  230,
      240,  235,  232,  218,  238,  239,  255,  256,  257,  258,
      209,  260,  261,  259,  231,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  190,  207,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  192,  246,  246,  246,  246,
      246,  246,  717,  203,  246,  246,  246,  246,  246,  246,

      246,  246,  246,  100,  142,  176,  170,  164,  154,  262,
      142,  122,  246,  246,  246,  246,  246,  246,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  266,  248,  248,
      248,  248,  248,  248,  249,  262,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  100,   46,   47,   44,   95,
       55,   47,   44,  266,  248,  248,  248,  248,  248,  248,
      145,  717,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  147,  251,  251,  251,  251,  251,  251,  717,  267,
      251,  251,  251,  251,  251,  251,  251,  251,  251,   38,
       38,  717,  717,  717,  717,  717,  717,  268,  251,  251,

      251,  251,  251,  251,  145,  267,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  253,  254,  254,  254,  254,
      254,  254,  717,  268,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  263,  269,  270,  271,  272,  273,  274,
      264,  275,  254,  254,  254,  254,  254,  254,  265,  277,
      278,  279,  280,  281,  282,  283,  276,  285,  286,  263,
      269,  270,  271,  272,  273,  274,  264,  275,  287,  288,
      289,  290,  291,  292,  265,  277,  278,  279,  280,  281,
      282,  283,  276,  285,  286,  293,  294,  296,  297,  717,
      312,  717,  717,  717,  287,  288,  289,  290,  291,  292,

      300,  717,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  293,  294,  296,  297,  190,  312,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  192,  302,  302,  302,
      302,  302,  302,  717,  313,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  302,  302,  302,  302,  302,  302,  190,
      313,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      304,  305,  305,  305,  305,  305,  305,  717,  314,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  717,  717,
      315,  717,  717,  717,  717,  717,  717,  305,  305,  305,

      305,  305,  305,  145,  314,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  147,  145,  315,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  253,  309,  309,  309,
      309,  309,  309,  717,  717,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  717,  717,  717,  717,  717,  316,
      318,  319,  320,  309,  309,  309,  309,  309,  309,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  321,  311,
      311,  311,  311,  311,  311,  316,  318,  319,  320,  322,
      323,  325,  326,  327,  328,  329,  330,  331,  332,  333,
      334,  335,  336,  338,  321,  311,  311,  311,  311,  311,

      311,  340,  341,  342,  343,  322,  323,  325,  326,  327,
      328,  329,  330,  331,  332,  333,  334,  335,  336,  338,
      344,  346,  348,  349,  351,  717,  367,  340,  341,  342,
      343,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      717,  717,  717,  717,  717,  717,  344,  346,  348,  349,
      351,  190,  367,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  192,  190,  717,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  304,  358,  358,  358,  358,  358,
      358,  717,  717,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  717,  717,  717,  717,  717,  717,  368,  717,

      717,  358,  358,  358,  358,  358,  358,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  369,  360,  360,  360,
      360,  360,  360,  361,  368,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  717,  370,  717,  717,  717,  717,
      717,  717,  369,  360,  360,  360,  360,  360,  360,  145,
      717,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      145,  370,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  253,  363,  363,  363,  363,  363,  363,  717,  374,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  717,
      717,  717,  717,  717,  717,  717,  717,  375,  363,  363,

      363,  363,  363,  363,  145,  374,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  365,  366,  366,  366,  366,
      366,  366,  717,  375,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  371,  376,  377,  378,  379,  380,  372,
      381,  373,  366,  366,  366,  366,  366,  366,  382,  383,
      385,  386,  387,  388,  389,  390,  391,  392,  393,  371,
      376,  377,  378,  379,  380,  372,  381,  373,  394,  396,
      397,  398,  399,  400,  382,  383,  385,  386,  387,  388,
      389,  390,  391,  392,  393,  401,  402,  403,  404,  405,
      717,  419,  717,  717,  394,  396,  397,  398,  399,  400,

      408,  717,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  401,  402,  403,  404,  405,  190,  419,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  190,  717,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  304,  410,
      410,  410,  410,  410,  410,  717,  420,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  410,  410,  410,  410,  410,
      410,  190,  420,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  412,  413,  413,  413,  413,  413,  413,  717,
      421,  413,  413,  413,  413,  413,  413,  413,  413,  413,

      717,  717,  422,  717,  717,  717,  717,  717,  717,  413,
      413,  413,  413,  413,  413,  145,  421,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  253,  145,  422,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  365,  416,
      416,  416,  416,  416,  416,  717,  717,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  717,  717,  717,  717,
      717,  423,  424,  425,  426,  416,  416,  416,  416,  416,
      416,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      427,  418,  418,  418,  418,  418,  418,  423,  424,  425,
      426,  428,  430,  431,  432,  433,  434,  435,  436,  437,

      438,  440,  441,  442,  443,  444,  427,  418,  418,  418,
      418,  418,  418,  445,  446,  447,  448,  428,  430,  431,
      432,  433,  434,  435,  436,  437,  438,  440,  441,  442,
      443,  444,  449,  450,  451,  452,  717,  466,  717,  445,
      446,  447,  448,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  717,  717,  717,  717,  717,  717,  449,  450,
      451,  452,  190,  466,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  304,  190,  717,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  412,  458,  458,  458,  458,
      458,  458,  717,  717,  458,  458,  458,  458,  458,  458,

      458,  458,  458,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  458,  458,  458,  458,  458,  458,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  468,  460,  460,
      460,  460,  460,  460,  717,  469,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  717,  717,  717,  717,  717,
      717,  717,  717,  468,  460,  460,  460,  460,  460,  460,
      145,  469,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  365,  462,  462,  462,  462,  462,  462,  717,  470,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  717,
      717,  717,  717,  717,  717,  717,  471,  472,  462,  462,

      462,  462,  462,  462,  145,  470,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  464,  465,  465,  465,  465,
      465,  465,  471,  472,  473,  474,  475,  476,  477,  478,
      479,  480,  481,  482,  483,  485,  486,  487,  488,  489,
      490,  484,  465,  465,  465,  465,  465,  465,  491,  492,
      473,  474,  475,  476,  477,  478,  479,  480,  481,  482,
      483,  485,  486,  487,  488,  489,  490,  484,  493,  494,
      495,  717,  507,  717,  491,  492,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  717,  717,  717,  717,  717,
      508,  717,  717,  717,  493,  494,  495,  190,  507,  498,

      498,  498,  498,  498,  498,  498,  498,  498,  412,  499,
      499,  499,  499,  499,  499,  717,  508,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  717,  717,  717,  717,
      717,  717,  717,  717,  509,  499,  499,  499,  499,  499,
      499,  190,  717,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  501,  502,  502,  502,  502,  502,  502,  717,
      509,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      717,  717,  510,  717,  717,  717,  717,  717,  717,  502,
      502,  502,  502,  502,  502,  145,  717,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  365,  145,  510,  503,

      503,  503,  503,  503,  503,  503,  503,  503,  464,  504,
      504,  504,  504,  504,  504,  717,  717,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  717,  717,  717,  717,
      717,  511,  512,  513,  514,  504,  504,  504,  504,  504,
      504,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      515,  506,  506,  506,  506,  506,  506,  511,  512,  513,
      514,  516,  517,  518,  519,  520,  521,  522,  523,  524,
      525,  526,  528,  529,  530,  717,  515,  506,  506,  506,
      506,  506,  506,  717,  717,  717,  717,  516,  517,  518,
      519,  520,  521,  522,  523,  524,  525,  526,  528,  529,

      530,  190,  717,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  412,  190,  717,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  501,  535,  535,  535,  535,  535,
      535,  717,  717,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  717,  717,  717,  717,  717,  717,  543,  717,
      717,  535,  535,  535,  535,  535,  535,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  545,  537,  537,  537,
      537,  537,  537,  717,  543,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  717,  717,  717,  717,  717,  717,
      717,  717,  545,  537,  537,  537,  537,  537,  537,  145,

      717,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      464,  539,  539,  539,  539,  539,  539,  717,  547,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  717,  717,
      717,  717,  717,  717,  717,  548,  549,  539,  539,  539,
      539,  539,  539,  145,  547,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  541,  542,  542,  542,  542,  542,
      542,  548,  549,  550,  551,  552,  553,  554,  555,  556,
      557,  558,  717,  570,  717,  717,  717,  717,  717,  717,
      717,  542,  542,  542,  542,  542,  542,  717,  717,  550,
      551,  552,  553,  554,  555,  556,  557,  558,  190,  570,

      561,  561,  561,  561,  561,  561,  561,  561,  561,  501,
      562,  562,  562,  562,  562,  562,  717,  571,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  717,  717,  717,
      717,  717,  717,  717,  717,  574,  562,  562,  562,  562,
      562,  562,  190,  571,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  564,  565,  565,  565,  565,  565,  565,
      717,  574,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  717,  717,  575,  717,  717,  717,  717,  717,  717,
      565,  565,  565,  565,  565,  565,  145,  717,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  464,  145,  575,

      566,  566,  566,  566,  566,  566,  566,  566,  566,  541,
      567,  567,  567,  567,  567,  567,  717,  717,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  717,  717,  717,
      717,  717,  717,  576,  577,  578,  567,  567,  567,  567,
      567,  567,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  579,  569,  569,  569,  569,  569,  569,  572,  576,
      577,  578,  580,  581,  573,  190,  595,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  501,  579,  569,  569,
      569,  569,  569,  569,  572,  717,  717,  717,  580,  581,
      573,  190,  595,  585,  585,  585,  585,  585,  585,  585,

      585,  585,  564,  586,  586,  586,  586,  586,  586,  717,
      717,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      717,  717,  717,  717,  717,  717,  596,  717,  717,  586,
      586,  586,  586,  586,  586,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  597,  588,  588,  588,  588,  588,
      588,  717,  596,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  717,  717,  717,  717,  717,  717,  717,  717,
      597,  588,  588,  588,  588,  588,  588,  145,  717,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  541,  590,
      590,  590,  590,  590,  590,  717,  598,  593,  593,  593,

      593,  593,  593,  593,  593,  593,  717,  717,  717,  717,
      717,  717,  717,  599,  600,  590,  590,  590,  590,  590,
      590,  145,  598,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  592,  593,  593,  593,  593,  593,  593,  599,
      600,  601,  603,  717,  616,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  717,  717,  717,  717,  717,  593,
      593,  593,  593,  593,  593,  717,  717,  601,  603,  190,
      616,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      564,  608,  608,  608,  608,  608,  608,  717,  617,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  717,  717,

      717,  717,  717,  717,  717,  717,  619,  608,  608,  608,
      608,  608,  608,  190,  617,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  610,  611,  611,  611,  611,  611,
      611,  145,  619,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  541,  717,  717,  717,  717,  717,  717,  717,
      620,  611,  611,  611,  611,  611,  611,  145,  717,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  592,  613,
      613,  613,  613,  613,  613,  717,  620,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  717,  717,  717,  717,
      717,  621,  622,  623,  717,  613,  613,  613,  613,  613,

      613,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      637,  615,  615,  615,  615,  615,  615,  621,  622,  623,
      190,  717,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  564,  717,  717,  717,  717,  637,  615,  615,  615,
      615,  615,  615,  190,  717,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  610,  629,  629,  629,  629,  629,
      629,  717,  717,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  717,  717,  717,  717,  717,  717,  638,  717,
      717,  629,  629,  629,  629,  629,  629,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  643,  631,  631,  631,

      631,  631,  631,  717,  638,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  717,  717,  717,  717,  717,  717,
      717,  717,  643,  631,  631,  631,  631,  631,  631,  145,
      717,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      592,  633,  633,  633,  633,  633,  633,  717,  644,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  717,  717,
      717,  717,  717,  717,  717,  645,  717,  633,  633,  633,
      633,  633,  633,  145,  644,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  635,  636,  636,  636,  636,  636,
      636,  645,  717,  717,  651,  651,  651,  651,  651,  651,

      651,  651,  651,  717,  717,  717,  717,  717,  717,  717,
      657,  636,  636,  636,  636,  636,  636,  190,  717,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  610,  651,
      651,  651,  651,  651,  651,  717,  657,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  658,  717,  717,  717,
      717,  717,  717,  717,  663,  651,  651,  651,  651,  651,
      651,  190,  717,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  658,  653,  653,  653,  653,  653,  653,  145,
      663,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      592,  717,  717,  717,  717,  717,  717,  717,  664,  653,

      653,  653,  653,  653,  653,  145,  717,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  635,  655,  655,  655,
      655,  655,  655,  717,  664,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  665,  717,  717,  717,  717,  717,
      717,  717,  717,  655,  655,  655,  655,  655,  655,  717,
      717,  717,  717,  717,  717,  717,  674,  717,  717,  190,
      665,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      610,  190,  717,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  674,  670,  670,  670,  670,  670,  670,  717,
      675,  670,  670,  670,  670,  670,  670,  670,  670,  670,

      717,  717,  717,  717,  717,  717,  717,  717,  680,  670,
      670,  670,  670,  670,  670,  145,  675,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  635,  672,  672,  672,
      672,  672,  672,  717,  680,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  687,  717,  717,  717,  717,  717,
      717,  717,  688,  672,  672,  672,  672,  672,  672,  190,
      717,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      687,  685,  685,  685,  685,  685,  685,  717,  688,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  717,  689,
      717,  693,  717,  717,  717,  717,  717,  685,  685,  685,

      685,  685,  685,  145,  694,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  635,  689,  190,  693,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  698,  699,  717,
      694,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  698,  699,   37,   37,   37,   37,   39,
       39,   39,   39,   43,   43,   43,   43,   45,  717,   45,
       45,   46,   46,   46,   46,   96,  717,   96,   96,   99,
       99,  141,  141,  188,  188,  189,  189,  241,  241,  242,
      242,  298,  298,  299,  299,  352,  352,  353,  353,  406,

      406,  407,  407,  453,  453,  454,  454,  496,  496,  497,
      497,  531,  531,  532,  532,  559,  559,  560,  560,  582,
      582,  583,  583,  604,  604,  605,  605,  624,  624,  625,
      625,  646,  646,  648,  648,  666,  666,  667,  667,  681,
      681,  682,  682,  690,  690,  695,  695,  696,  696,  700,
      700,  702,  702,  703,  703,  705,  705,  707,  707,  708,
      708,  710,  710,  712,  712,  713,  713,  715,  715,  716,
      716,    7,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,

      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717
    } ;

static yyconst flex_int16_t yy_chk[3847] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   10,   10,   11,   11,   15,   17,
       27,  780,   15,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   25,

       16,   26,   28,   29,   25,   17,   27,   26,   28,   34,
       31,   35,   25,   28,   31,   35,   16,   40,   40,   16,
       16,   16,   16,   16,   16,   25,   16,   26,   28,   29,
       25,   41,   41,   26,   28,   34,   31,   35,   25,   28,
       31,   35,   16,   19,   19,  776,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   20,   21,
       30,   22,   36,   58,   21,   42,   42,  772,   20,   21,
       21,   22,   60,   61,   30,   20,   21,  640,   22,   62,
      640,   22,   63,   64,   20,   21,   30,   22,   36,   58,
       21,   65,   66,   23,   20,   21,   21,   22,   60,   61,
       30,   20,   21,   23,   22,   62,   23,   22,   63,   64,
       23,  121,  121,  768,  764,  763,  761,   65,   66,   23,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   23,
      758,   67,   23,  757,  754,  751,   23,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   32,   24,   33,   33,   67,  725,   32,
       24,   32,   68,   69,   33,   70,   71,   24,   72,   73,
       32,   74,   33,   24,   24,   24,   24,   24,   24,   32,
       24,   76,   77,   70,   33,   32,   24,   32,   68,   69,
       33,   70,   71,   24,   72,   73,   32,   74,   33,  716,
      715,   79,  713,   80,   81,   82,   83,   76,   77,   70,
       33,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   79,   50,   80,
       81,   82,   83,  619,  619,  619,  712,  619,   84,  711,
      710,  708,  707,  706,  705,   89,   90,   50,   50,   50,

       50,   50,   50,   91,   50,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   84,   55,   55,   55,   55,   55,
       55,   89,   90,  703,  702,  701,  700,  696,  695,   91,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   92,
       93,   55,   55,   55,   55,   55,   55,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   85,   57,   92,   93,   94,  103,  105,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  106,
       85,  691,  690,   57,   57,   57,   57,   57,   57,   85,
       57,  682,  681,   94,  672,  105,  668,  107,  667,  108,

      110,  111,  112,  113,  114,  106,   85,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,  107,   97,  108,  110,  111,  112,  113,
      114,  666,  662,  661,  115,  660,  659,  651,  648,  646,
      642,  116,  117,   97,   97,   97,   97,   97,   97,  118,
       97,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      115,  100,  100,  100,  100,  100,  100,  116,  117,  641,
      633,  627,  626,  625,  624,  118,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  120,  124,  100,  100,  100,
      100,  100,  100,  102,  125,  102,  102,  102,  102,  102,

      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  120,  124,  608,  605,  604,  596,  590,  584,  583,
      125,  582,  580,  570,  562,  560,  559,  539,  126,  127,
      128,  102,  102,  102,  102,  102,  102,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  130,  104,  104,  104,
      104,  104,  104,  122,  126,  127,  128,  131,  132,  122,
      133,  134,  135,  136,  137,  138,  533,  532,  531,  511,
      509,  499,  130,  104,  104,  104,  104,  104,  104,  122,
      497,  496,  492,  131,  132,  122,  133,  134,  135,  136,
      137,  138,  139,  139,  139,  139,  139,  139,  139,  139,

      139,  139,  139,  139,  139,  139,  139,  139,  144,  139,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  139,  139,
      139,  139,  139,  139,  462,  139,  143,  455,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  148,  150,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  454,  453,  420,  410,  407,
      406,  391,  150,  151,  143,  143,  143,  143,  143,  143,
      146,  153,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  150,  151,

      378,  363,  354,  353,  352,  340,  329,  153,  302,  299,
      298,  296,  293,  291,  154,  155,  157,  160,  146,  146,
      146,  146,  146,  146,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  161,  147,  147,  147,  147,  147,  147,
      154,  155,  157,  160,  285,  283,  269,  260,  251,  162,
      243,  242,  241,  238,  227,  199,  163,  189,  188,  161,
      147,  147,  147,  147,  147,  147,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  162,  149,  149,  149,  149,
      149,  149,  163,  164,  164,  164,  165,  168,  169,  170,
      171,  172,  173,  167,  174,  172,  175,  187,  178,  179,

      181,  182,  149,  149,  149,  149,  149,  149,  167,  164,
      164,  164,  165,  168,  169,  170,  171,  172,  173,  167,
      174,  172,  175,  176,  178,  179,  181,  182,  183,  184,
      200,  201,  202,  203,  167,  204,  205,  203,  176,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  176,
      185,  180,  177,  166,  183,  184,  200,  201,  202,  203,
      158,  204,  205,  203,  176,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  191,  156,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  193,  152,  193,  193,  193,  193,  193,  193,

      193,  193,  193,  142,  141,  129,  123,  119,  109,  206,
       99,   75,  191,  191,  191,  191,  191,  191,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  208,  192,  192,
      192,  192,  192,  192,  194,  206,  194,  194,  194,  194,
      194,  194,  194,  194,  194,   51,   47,   46,   43,   38,
       18,   14,   12,  208,  192,  192,  192,  192,  192,  192,
      195,    7,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  196,  209,
      196,  196,  196,  196,  196,  196,  196,  196,  196,    4,
        3,    0,    0,    0,    0,    0,    0,  211,  195,  195,

      195,  195,  195,  195,  197,  209,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  198,  211,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  207,  212,  213,  214,  215,  216,  217,
      207,  218,  197,  197,  197,  197,  197,  197,  207,  219,
      220,  221,  223,  224,  225,  226,  218,  228,  229,  207,
      212,  213,  214,  215,  216,  217,  207,  218,  230,  231,
      232,  233,  234,  235,  207,  219,  220,  221,  223,  224,
      225,  226,  218,  228,  229,  236,  237,  239,  240,    0,
      255,    0,    0,    0,  230,  231,  232,  233,  234,  235,

      244,    0,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  236,  237,  239,  240,  245,  255,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  246,  256,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  245,  245,  245,  245,  245,  245,  247,
      256,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  248,  257,  248,
      248,  248,  248,  248,  248,  248,  248,  248,    0,    0,
      258,    0,    0,    0,    0,    0,    0,  247,  247,  247,

      247,  247,  247,  250,  257,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  252,  258,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  254,    0,  254,  254,  254,  254,  254,
      254,  254,  254,  254,    0,    0,    0,    0,    0,  259,
      261,  263,  264,  252,  252,  252,  252,  252,  252,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  265,  253,
      253,  253,  253,  253,  253,  259,  261,  263,  264,  266,
      268,  270,  271,  272,  273,  274,  275,  276,  277,  278,
      279,  280,  282,  284,  265,  253,  253,  253,  253,  253,

      253,  286,  287,  288,  289,  266,  268,  270,  271,  272,
      273,  274,  275,  276,  277,  278,  279,  280,  282,  284,
      290,  292,  294,  295,  297,    0,  312,  286,  287,  288,
      289,  300,  300,  300,  300,  300,  300,  300,  300,  300,
        0,    0,    0,    0,    0,    0,  290,  292,  294,  295,
      297,  301,  312,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  303,    0,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  305,    0,  305,  305,  305,  305,  305,  305,  305,
      305,  305,    0,    0,    0,    0,    0,    0,  314,    0,

        0,  303,  303,  303,  303,  303,  303,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  315,  304,  304,  304,
      304,  304,  304,  306,  314,  306,  306,  306,  306,  306,
      306,  306,  306,  306,    0,  316,    0,    0,    0,    0,
        0,    0,  315,  304,  304,  304,  304,  304,  304,  307,
        0,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      308,  316,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  309,  318,
      309,  309,  309,  309,  309,  309,  309,  309,  309,    0,
        0,    0,    0,    0,    0,    0,    0,  320,  308,  308,

      308,  308,  308,  308,  310,  318,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  311,  320,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  317,  321,  322,  323,  324,  325,  317,
      326,  317,  310,  310,  310,  310,  310,  310,  327,  328,
      330,  331,  332,  333,  334,  335,  336,  337,  338,  317,
      321,  322,  323,  324,  325,  317,  326,  317,  339,  341,
      342,  343,  344,  345,  327,  328,  330,  331,  332,  333,
      334,  335,  336,  337,  338,  346,  347,  349,  350,  351,
        0,  367,    0,    0,  339,  341,  342,  343,  344,  345,

      355,    0,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  346,  347,  349,  350,  351,  356,  367,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  357,    0,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  358,  368,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  357,  357,  357,  357,  357,
      357,  359,  368,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  360,
      369,  360,  360,  360,  360,  360,  360,  360,  360,  360,

        0,    0,  370,    0,    0,    0,    0,    0,    0,  359,
      359,  359,  359,  359,  359,  362,  369,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  364,  370,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  366,    0,  366,  366,  366,
      366,  366,  366,  366,  366,  366,    0,    0,    0,    0,
        0,  371,  372,  373,  374,  364,  364,  364,  364,  364,
      364,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      376,  365,  365,  365,  365,  365,  365,  371,  372,  373,
      374,  377,  379,  381,  384,  385,  386,  387,  388,  389,

      390,  392,  393,  394,  395,  396,  376,  365,  365,  365,
      365,  365,  365,  397,  398,  399,  400,  377,  379,  381,
      384,  385,  386,  387,  388,  389,  390,  392,  393,  394,
      395,  396,  401,  402,  403,  404,    0,  419,    0,  397,
      398,  399,  400,  408,  408,  408,  408,  408,  408,  408,
      408,  408,    0,    0,    0,    0,    0,    0,  401,  402,
      403,  404,  409,  419,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  411,    0,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  413,    0,  413,  413,  413,  413,  413,  413,

      413,  413,  413,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  411,  411,  411,  411,  411,  411,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  421,  412,  412,
      412,  412,  412,  412,  416,  422,  416,  416,  416,  416,
      416,  416,  416,  416,  416,    0,    0,    0,    0,    0,
        0,    0,    0,  421,  412,  412,  412,  412,  412,  412,
      415,  422,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  418,  423,
      418,  418,  418,  418,  418,  418,  418,  418,  418,    0,
        0,    0,    0,    0,    0,    0,  424,  425,  415,  415,

      415,  415,  415,  415,  417,  423,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  424,  425,  426,  428,  429,  430,  432,  433,
      434,  435,  436,  438,  439,  440,  441,  442,  443,  444,
      445,  439,  417,  417,  417,  417,  417,  417,  446,  448,
      426,  428,  429,  430,  432,  433,  434,  435,  436,  438,
      439,  440,  441,  442,  443,  444,  445,  439,  450,  451,
      452,    0,  466,    0,  446,  448,  456,  456,  456,  456,
      456,  456,  456,  456,  456,    0,    0,    0,    0,    0,
      467,    0,    0,    0,  450,  451,  452,  457,  466,  457,

      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  458,  467,  458,  458,  458,
      458,  458,  458,  458,  458,  458,    0,    0,    0,    0,
        0,    0,    0,    0,  468,  457,  457,  457,  457,  457,
      457,  459,    0,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  460,
      468,  460,  460,  460,  460,  460,  460,  460,  460,  460,
        0,    0,  469,    0,    0,    0,    0,    0,    0,  459,
      459,  459,  459,  459,  459,  461,    0,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  463,  469,  463,

      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  465,    0,  465,  465,  465,
      465,  465,  465,  465,  465,  465,    0,    0,    0,    0,
        0,  470,  471,  472,  474,  463,  463,  463,  463,  463,
      463,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      475,  464,  464,  464,  464,  464,  464,  470,  471,  472,
      474,  476,  477,  478,  479,  483,  484,  485,  486,  487,
      488,  491,  493,  494,  495,    0,  475,  464,  464,  464,
      464,  464,  464,    0,    0,    0,    0,  476,  477,  478,
      479,  483,  484,  485,  486,  487,  488,  491,  493,  494,

      495,  498,    0,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  500,    0,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  502,    0,  502,  502,  502,  502,  502,  502,  502,
      502,  502,    0,    0,    0,    0,    0,    0,  508,    0,
        0,  500,  500,  500,  500,  500,  500,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  510,  501,  501,  501,
      501,  501,  501,  504,  508,  504,  504,  504,  504,  504,
      504,  504,  504,  504,    0,    0,    0,    0,    0,    0,
        0,    0,  510,  501,  501,  501,  501,  501,  501,  503,

        0,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  506,  513,  506,
      506,  506,  506,  506,  506,  506,  506,  506,    0,    0,
        0,    0,    0,    0,    0,  514,  515,  503,  503,  503,
      503,  503,  503,  505,  513,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  514,  515,  517,  520,  521,  522,  523,  524,  526,
      527,  529,    0,  543,    0,    0,    0,    0,    0,    0,
        0,  505,  505,  505,  505,  505,  505,    0,    0,  517,
      520,  521,  522,  523,  524,  526,  527,  529,  534,  543,

      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  535,  544,  535,  535,
      535,  535,  535,  535,  535,  535,  535,    0,    0,    0,
        0,    0,    0,    0,    0,  549,  534,  534,  534,  534,
      534,  534,  536,  544,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      537,  549,  537,  537,  537,  537,  537,  537,  537,  537,
      537,    0,    0,  550,    0,    0,    0,    0,    0,    0,
      536,  536,  536,  536,  536,  536,  538,    0,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  540,  550,

      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  542,    0,  542,  542,
      542,  542,  542,  542,  542,  542,  542,    0,    0,    0,
        0,    0,    0,  551,  552,  553,  540,  540,  540,  540,
      540,  540,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  555,  541,  541,  541,  541,  541,  541,  546,  551,
      552,  553,  557,  558,  546,  561,  571,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  555,  541,  541,
      541,  541,  541,  541,  546,    0,    0,    0,  557,  558,
      546,  563,  571,  563,  563,  563,  563,  563,  563,  563,

      563,  563,  563,  563,  563,  563,  563,  563,  563,  565,
        0,  565,  565,  565,  565,  565,  565,  565,  565,  565,
        0,    0,    0,    0,    0,    0,  572,    0,    0,  563,
      563,  563,  563,  563,  563,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  573,  564,  564,  564,  564,  564,
      564,  567,  572,  567,  567,  567,  567,  567,  567,  567,
      567,  567,    0,    0,    0,    0,    0,    0,    0,    0,
      573,  564,  564,  564,  564,  564,  564,  566,    0,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  569,  575,  569,  569,  569,

      569,  569,  569,  569,  569,  569,    0,    0,    0,    0,
        0,    0,    0,  576,  577,  566,  566,  566,  566,  566,
      566,  568,  575,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  576,
      577,  578,  581,  586,  594,  586,  586,  586,  586,  586,
      586,  586,  586,  586,    0,    0,    0,    0,    0,  568,
      568,  568,  568,  568,  568,    0,    0,  578,  581,  585,
      594,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  588,  595,  588,
      588,  588,  588,  588,  588,  588,  588,  588,    0,    0,

        0,    0,    0,    0,    0,    0,  597,  585,  585,  585,
      585,  585,  585,  587,  595,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  589,  597,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,    0,    0,    0,    0,    0,    0,    0,
      599,  587,  587,  587,  587,  587,  587,  591,    0,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  593,  599,  593,  593,  593,
      593,  593,  593,  593,  593,  593,    0,    0,    0,    0,
        0,  600,  601,  602,    0,  591,  591,  591,  591,  591,

      591,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      616,  592,  592,  592,  592,  592,  592,  600,  601,  602,
      607,    0,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,    0,    0,    0,    0,  616,  592,  592,  592,
      592,  592,  592,  609,    0,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  611,    0,  611,  611,  611,  611,  611,  611,  611,
      611,  611,    0,    0,    0,    0,    0,    0,  617,    0,
        0,  609,  609,  609,  609,  609,  609,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  620,  610,  610,  610,

      610,  610,  610,  613,  617,  613,  613,  613,  613,  613,
      613,  613,  613,  613,    0,    0,    0,    0,    0,    0,
        0,    0,  620,  610,  610,  610,  610,  610,  610,  612,
        0,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  615,  622,  615,
      615,  615,  615,  615,  615,  615,  615,  615,    0,    0,
        0,    0,    0,    0,    0,  623,    0,  612,  612,  612,
      612,  612,  612,  614,  622,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  623,  629,    0,  629,  629,  629,  629,  629,  629,

      629,  629,  629,    0,    0,    0,    0,    0,    0,    0,
      637,  614,  614,  614,  614,  614,  614,  628,    0,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  628,  631,  637,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  638,    0,    0,    0,
        0,    0,    0,    0,  643,  628,  628,  628,  628,  628,
      628,  630,    0,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  638,  630,  630,  630,  630,  630,  630,  632,
      643,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,    0,    0,    0,    0,    0,    0,    0,  644,  630,

      630,  630,  630,  630,  630,  634,    0,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  636,  644,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  645,    0,    0,    0,    0,    0,
        0,    0,    0,  634,  634,  634,  634,  634,  634,    0,
        0,    0,    0,    0,    0,    0,  657,    0,    0,  650,
      645,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  652,    0,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  657,  652,  652,  652,  652,  652,  652,  653,
      658,  653,  653,  653,  653,  653,  653,  653,  653,  653,

        0,    0,    0,    0,    0,    0,    0,    0,  665,  652,
      652,  652,  652,  652,  652,  654,  658,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  655,  665,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  674,    0,    0,    0,    0,    0,
        0,    0,  675,  654,  654,  654,  654,  654,  654,  669,
        0,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      674,  669,  669,  669,  669,  669,  669,  670,  675,  670,
      670,  670,  670,  670,  670,  670,  670,  670,    0,  680,
        0,  687,    0,    0,    0,    0,    0,  669,  669,  669,

      669,  669,  669,  671,  689,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  680,  684,  687,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  693,  694,    0,
      689,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  693,  694,  718,  718,  718,  718,  719,
      719,  719,  719,  720,  720,  720,  720,  721,    0,  721,
      721,  722,  722,  722,  722,  723,    0,  723,  723,  724,
      724,  726,  726,  727,  727,  728,  728,  729,  729,  730,
      730,  731,  731,  732,  732,  733,  733,  734,  734,  735,

      735,  736,  736,  737,  737,  738,  738,  739,  739,  740,
      740,  741,  741,  742,  742,  743,  743,  744,  744,  745,
      745,  746,  746,  747,  747,  748,  748,  749,  749,  750,
      750,  752,  752,  753,  753,  755,  755,  756,  756,  759,
      759,  760,  760,  762,  762,  765,  765,  766,  766,  767,
      767,  769,  769,  770,  770,  771,  771,  773,  773,  774,
      774,  775,  775,  777,  777,  778,  778,  779,  779,  781,
      781,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,

      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[83] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
    0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_ClntParser_stype yylval;
}

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 718 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3772 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
{ return ClntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
{ return ClntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
{ return ClntParser::ADDRES_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
{ return ClntParser::IA_;}
	YY_BREAK
case 7:
YY_RULE_SETUP
{ return ClntParser::TA_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ return ClntParser::IAID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
{ return ClntParser::LOGLEVEL_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ return ClntParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
{ return ClntParser::LOGNAME_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
{ return ClntParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
{ return ClntParser::SCRIPTS_DIR_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ return ClntParser::VALID_TIME_; }
	YY_BREAK
case 18:
YY_RULE_SETUP
{ return ClntParser::T1_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
{ return ClntParser::T2_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
{ return ClntParser::OPTION_; }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ return ClntParser::DNS_SERVER_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
{ return ClntParser::DOMAIN_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
{ return ClntParser::NTP_SERVER_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
{ return ClntParser::TIME_ZONE_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
{ return ClntParser::SIP_SERVER_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
{ return ClntParser::SIP_DOMAIN_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
{ return ClntParser::FQDN_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
{ return ClntParser::FQDN_S_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
{ return ClntParser::NIS_SERVER_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
{ return ClntParser::NIS_DOMAIN_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
{ return ClntParser::NISP_SERVER_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
{ return ClntParser::NISP_DOMAIN_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ return ClntParser::LIFETIME_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ return ClntParser::REJECT_SERVERS_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 36:
YY_RULE_SETUP
{ return ClntParser::RAPID_COMMIT_;}
	YY_BREAK
case 37:
YY_RULE_SETUP
{ return ClntParser::UNICAST_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ return ClntParser::STRICT_RFC_NO_ROUTING_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LL_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LLT_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_EN_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
{ return ClntParser::VENDOR_SPEC_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ return ClntParser::ANON_INF_REQUEST_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
{ return ClntParser::INSIST_MODE_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
{ return ClntParser::INACTIVE_MODE_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ return ClntParser::AUTH_ENABLED_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ return ClntParser::AUTH_ACCEPT_METHODS_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ return ClntParser::DIGEST_NONE_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ return ClntParser::DIGEST_PLAIN_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ return ClntParser::EXPERIMENTAL_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ return ClntParser::ADDR_PARAMS_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ return ClntParser::MAPPING_PREFIX_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ return ClntParser::SKIP_CONFIRM_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ return ClntParser::TUNNEL_MODE_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
;
	YY_BREAK
case 65:
YY_RULE_SETUP
;
	YY_BREAK
case 66:
YY_RULE_SETUP
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
BEGIN(INITIAL);
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 69:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 70:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 71:
YY_RULE_SETUP
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 72:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 73:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 74:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 75:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return ClntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return ClntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
{
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return ClntParser::DUID_;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
{ 
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::HEXNUMBER_;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
{ 
    if(!sscanf(yytext,"%u",(unsigned int*)&(yylval.ival))) { 
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::INTNUMBER_;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
{return yytext[0];} 
	YY_BREAK
case 82:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 718 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 718 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 717);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

