
#line 3 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 91
#define YY_END_OF_BUFFER 92
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[784] =
    {   0,
        1,    1,    0,    0,    0,    0,   92,   90,    2,    1,
        1,   90,   72,   90,   90,   89,   89,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   76,   76,   91,    1,    1,
        1,    0,   84,   72,    0,   84,   74,   73,   89,    0,
        0,   88,    0,   81,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,    9,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   47,   85,   85,
       85,   85,   85,   85,   85,   24,   25,   10,   85,   85,
       85,   85,   85,   75,   73,   89,    0,    0,    0,   80,

       86,   79,   79,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   89,    0,    0,    0,    0,   78,   78,    0,
       79,    0,   79,   85,   85,   68,   85,   85,   85,   85,
       85,   85,   85,   33,   11,   85,   85,   85,   85,   85,
        8,    0,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   89,    0,   87,    0,    0,    0,

       78,    0,   78,    0,   79,   79,   79,   79,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,    3,
       85,   85,   85,   85,   85,   85,   85,    0,   85,   85,
       85,   12,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,    0,    0,    0,    0,    0,   78,
       78,   78,   78,    0,   79,   79,   79,    0,   79,   85,
       85,   85,   85,   85,   85,   85,   28,   85,   85,   85,
       85,   34,   85,   85,   85,   85,   85,   85,   85,    0,
        0,   85,   85,   85,   85,   85,   26,   85,   48,   85,

       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
        6,   85,   85,   85,   85,   85,    0,    0,    0,    0,
       78,   78,   78,    0,   78,    0,    0,   79,   79,   79,
       79,   85,    5,   85,   85,   85,   85,   85,   52,   50,
       85,   85,   85,   85,   85,   85,   85,   85,   85,    0,
        0,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   71,   85,   85,   85,   85,   85,   85,   85,
       44,   85,   85,   85,   87,    0,    0,    0,    0,    0,
       78,   78,   78,   78,    0,   79,   79,   79,    0,   79,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   51,

       85,   85,   85,   85,   39,   85,   85,   15,   16,    0,
        0,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   18,    0,    0,    0,    0,   78,   78,   78,    0,
       78,   83,   79,   79,   79,   79,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   49,   85,   85,   85,   85,
       14,    0,    0,   85,   85,    4,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   13,   85,
       30,   85,   85,    0,    0,    0,    0,   82,   78,   78,
       78,   78,   79,   79,   79,    0,   79,   85,   85,   85,

       85,   85,   85,   85,   85,   27,   85,   85,   85,   17,
        0,    0,   36,   35,   85,   29,   85,   85,   85,   85,
       85,   85,   85,   85,   32,   31,   85,   85,   85,   85,
       87,    0,    0,   78,   78,   78,    0,   78,   79,   79,
       79,   79,   70,   85,   85,   85,   85,   85,   59,   85,
       85,   85,   55,   38,   37,   85,   85,   85,   85,   85,
       85,   85,   85,   19,   85,   85,   85,   53,    0,    0,
        0,    0,   78,   78,   78,   78,   79,   79,   79,    0,
       79,    7,   85,   85,   57,   85,   60,   69,   85,   85,
       85,   85,   85,   42,   85,   85,   85,   67,   85,   85,

        0,    0,    0,   78,   78,   78,    0,   78,   79,   79,
       79,   79,   85,   85,   85,   85,   56,   85,   85,   85,
       85,   85,   40,   85,   85,   85,   87,    0,    0,    0,
       78,   78,   78,   78,   79,   79,   79,    0,   79,   85,
       85,   85,   85,   20,   85,   85,   85,   85,   85,   85,
       22,    0,    0,   77,   80,   78,   78,   78,    0,   78,
       79,   79,   79,   79,   85,   85,   61,   85,   85,   41,
       85,   85,   23,   85,    0,    0,   77,    0,   78,   78,
       78,   78,   78,   79,   79,   79,    0,   79,   85,   85,
       62,   85,   85,   85,   85,   85,   85,   85,   87,   77,

       80,   78,    0,   78,   78,   78,   78,   79,   79,   79,
       85,   85,   85,   85,   85,   85,   21,   46,   85,   85,
        0,   77,   78,   78,   78,   78,   79,   79,   79,   85,
       85,   63,   64,   65,   66,   43,   85,    0,   78,   78,
        0,   78,   78,   79,   85,   58,   85,   87,   78,   78,
       79,   85,   85,    0,   78,   78,    0,   54,   45,   77,
       78,   78,   77,   78,   78,    0,    0,   78,   78,    0,
       78,   78,    0,   87,   78,   78,    0,   78,   78,    0,
       78,   78,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
        1,    1,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,    1,    1,    1,    1,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    3,    3,    3,    3,    3,    3,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[869] =
    {   0,
        0,    0, 1697, 1600,    0,    0, 1607, 3841, 3841,   72,
       74, 1601,    0, 1598,   71,   71,   34, 1582,  134,  183,
      227,  187,  239,  296,   77,   71,  194,   43,  188,   87,
      235,  313,   67,   88,   67, 3841, 1591, 3841,  115,  129,
      217, 1597, 3841,    0, 1594, 1555, 3841,    0,  358, 1531,
      376, 3841,    0,  402,    0,  444,   83,   70,    0,   79,
      170,  187,  177,  187,  193,  208,  221,  230,  246,  284,
      243,  245,  241,  239,  288,  267,  287,    0,  307,  297,
      448,  297,  300,  309,  452,    0,    0,    0,  306,  311,
      309,  351,  358, 3841,    0,  506, 1530,  418, 1529,  550,

        0,  594,  429,  636,  436,  437,  442,  449,  454, 1540,
      459,  458,  458,  450,  462,  464,  465,  460,  508, 1539,
      519,  344,  640,  522, 1538,  523,  569,  567,  569,  613,
      604,  599,  638, 1536,  632,  630,  642,  647,  650,  645,
      651,  645,  692,  524, 1490, 1489, 1487,  738,  570,  710,
      782,  824,  756,  866,  758,    0,  674, 1498,  745,  753,
      796, 1497,  788, 1496,    0,  802,  788,  805,  820,  870,
        0, 1495,  870,  834,  875,  871,  859,  864,  876,  876,
      872,  884,  868,  885,  875,  914, 1494,  896,  916, 1484,
      919,  917,  907, 1454,  943, 1433, 1432, 1431, 1430,  719,

      971, 1013,  989, 1031, 1057, 1075, 1101, 1119, 1429,  907,
      905,  912,  927,  906,  924,  917, 1114,  944,  976,    0,
     1004, 1045, 1074, 1105, 1116, 1107, 1122, 1120, 1110, 1122,
     1121,    0, 1111, 1132, 1124, 1122, 1117, 1348, 1136, 1123,
     1139, 1135, 1135, 1141, 1152, 1155, 1147, 1151, 1165, 1147,
     1155, 1347, 1157, 1172, 1334, 1333, 1332, 1322, 1197, 1214,
     1232, 1258, 1276, 1241, 1302, 1284, 1314, 1356, 1332, 1177,
     1203, 1251, 1275, 1323, 1295, 1320,    0, 1325, 1328, 1331,
     1354,    0, 1346, 1294, 1356, 1358, 1349, 1368, 1360, 1359,
     1370, 1363, 1359, 1372, 1293, 1361,    0, 1375, 1292, 1378,

     1380, 1291, 1289, 1370, 1372, 1379, 1390, 1394, 1405, 1288,
        0, 1396, 1392, 1401, 1199, 1405, 1179, 1177, 1082, 1428,
     1452, 1081, 1464, 1506, 1482, 1524, 1550, 1561, 1579, 1605,
     1623, 1410, 1092, 1467, 1503, 1524, 1615, 1547,    0, 1567,
     1608, 1620, 1621, 1614, 1623, 1615, 1633, 1634, 1635, 1628,
     1624, 1642, 1622, 1636, 1627, 1625, 1644, 1654, 1644, 1653,
     1642, 1661,    0, 1091, 1662, 1653, 1662, 1658, 1660, 1665,
        0, 1671, 1662, 1664, 1078, 1077, 1076, 1075, 1701, 1720,
     1731, 1749, 1775, 1793, 1758, 1819, 1047, 1831, 1873, 1849,
     1738, 1771, 1776, 1849, 1853, 1843, 1842, 1861, 1879,    0,

     1880, 1872, 1050, 1872,    0, 1870, 1877,    0,    0, 1889,
     1869, 1883, 1888, 1887, 1892, 1891, 1049, 1892, 1885, 1885,
     1902, 1887, 1905, 1916, 1921, 1921, 1909, 1923, 1925, 1925,
     1920,    0, 1036, 1035, 1034, 1946, 1972, 1033, 1984, 2026,
     2002, 2011, 2070, 2044, 2114, 2088, 1935, 2017, 1044, 2018,
     2066, 2094, 2082, 2122, 2106,    0, 2105, 2113, 2123, 2109,
        0, 2120, 2125, 2117, 2114,    0, 2115, 2116, 2128, 2123,
     2123, 2119, 2120, 2119, 2139, 2153, 2150, 2160,    0, 2167,
        0, 2166, 2167, 1031,  997,  996,  994, 2184, 2210, 2228,
     2254, 2272, 2298,  993, 2310, 2352, 2328, 2173, 2217, 2265,

     2313, 2329, 2332, 2331, 2343,    0, 2362, 2349, 2360,    0,
     2352, 2349,    0,    0, 2359,    0, 2360, 2365, 2366, 2363,
     2368, 2352, 2360, 2358,    0,    0, 2359, 1004, 2365, 2383,
      991,  990,  989, 2424,  961, 2436, 2478, 2454, 2522, 2496,
     2566, 2540,    0, 2368, 2446,  904, 2474,  860,    0, 2516,
     2535, 2544,    0, 3841, 3841, 2559, 2570, 2559, 2571, 2559,
      859, 2575, 2578,    0, 2569, 2569, 2575,    0,  846,  845,
      844,  843, 2622, 2640, 2666, 2684, 2710,  842, 2722, 2764,
     2740,    0, 2580, 2617,    0, 2758,    0,    0, 2643, 2666,
     2741, 2725, 2747,    0, 2763, 2757, 2761,    0, 2763, 2766,

      841,  839,  838, 2817,  837, 2829, 2871, 2847, 2915, 2889,
     2959, 2933,  848, 2776, 2849, 2863,    0, 2904, 2920, 2936,
     2948, 2966,    0, 2956,  847, 2966,  804,  803,  802,  801,
     3009, 2983, 3053, 3027, 3071,  800, 3097, 3139, 3115, 2955,
     2997,  803, 3034,    0, 3070, 3102, 3112, 3119, 3117, 3121,
        0,  797,  796,  795,    0, 3161,  794, 3183, 3225, 3201,
     3269, 3243, 3313, 3287, 3202, 3217,    0,  385, 3264,    0,
     3279, 3290,    0, 3307,  793,  792,  791,  762,  761, 3360,
     3334, 3404, 3378, 3422,  760, 3448,    0, 3466, 3307, 3353,
        0,  214,  760,  766, 3373, 3372, 3414, 3445,  757,  756,

     3841,  728,    0, 3502,  672, 3514, 3532, 3558, 3576,    0,
     3467, 3518,  676,  673,  667,  668,    0,    0, 3520, 3556,
      660,  659,  658,  657, 3614, 3602, 3632,  617,    0, 3573,
     3595,    0,    0,    0,    0,    0, 3613,  616,  615,  614,
        0, 3658, 3841,    0, 3614,    0, 3620,  613,  612,  611,
     3841, 3615, 3629,  609,  608,  607,    0,    0,    0,  606,
      605,  604,  603,  574,  573,    0,  572,  571,  570,    0,
      560,  530,    0,  529,  528,  527,  526,  525,  419,    0,
      384,  383, 3841, 3684, 3688, 3692, 3696, 3700, 3704, 3706,
      401, 3708, 3710, 3712, 3714, 3716, 3718, 3720, 3722, 3724,

     3726, 3728, 3730, 3732, 3734, 3736, 3738, 3740, 3742, 3744,
     3746, 3748, 3750, 3752, 3754, 3756, 3758, 3760, 3762, 3764,
     3766, 3768, 3770, 3772, 3774, 3776, 3778,  399, 3780, 3782,
     3784,  356, 3786, 3788, 3790,  354,  296, 3792, 3794, 3796,
      285, 3798, 3800,  282,  280, 3802, 3804, 3806, 3808, 3810,
      231, 3812, 3814, 3816, 3818, 3820,  224, 3822, 3824, 3826,
      207, 3828,  143, 3830, 3832, 3834,   79, 3836
    } ;

static yyconst flex_int16_t yy_def[869] =
    {   0,
      783,    1,  784,  784,  785,  785,  783,  783,  783,  783,
      783,  786,  787,  788,  783,  783,   16,  783,  783,   19,
       19,   19,   19,   19,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  783,  783,  783,  783,  783,
      783,  786,  783,  787,  788,  783,  783,  789,  783,  790,
       49,  783,  791,  783,   24,   24,   56,   56,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  783,  789,  783,  792,   96,  793,  783,

      791,  783,  102,   56,  104,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  783,  143,  794,  795,  796,  783,  148,  783,
      783,  783,  151,  104,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  783,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  144,  144,  795,  797,  798,  783,

      783,  783,  201,  783,  783,  205,  783,  207,  154,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  783,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  799,  783,  800,  801,  783,  783,
      260,  783,  262,  783,  783,  783,  783,  783,  267,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  783,
      783,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  802,  803,  804,  783,
      783,  783,  783,  783,  323,  783,  783,  783,  328,  783,
      330,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  783,
      783,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  800,  783,  805,  806,  783,  783,
      783,  381,  783,  383,  783,  783,  783,  783,  783,  388,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,  783,
      783,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  807,  808,  809,  783,  783,  783,  783,  783,
      439,  783,  783,  443,  783,  445,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  783,  783,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  810,  783,  811,  812,  783,  783,  489,
      783,  491,  783,  783,  783,  783,  495,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      783,  783,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      813,  814,  815,  783,  783,  783,  783,  536,  783,  539,
      783,  541,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  783,  783,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  816,  783,
      817,  818,  783,  573,  783,  575,  783,  783,  783,  783,
      579,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

      819,  820,  821,  783,  783,  783,  783,  606,  783,  609,
      783,  611,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  822,  783,  823,  824,
      783,  631,  783,  633,  783,  783,  783,  783,  637,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  825,  826,  827,  828,  783,  783,  783,  783,  658,
      783,  661,  783,  663,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  829,  783,  830,  783,  831,  783,
      680,  783,  682,  783,  783,  783,  832,  686,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  833,  834,

      783,  835,  836,  783,  783,  783,  706,  783,  708,  837,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      838,  783,  839,  840,  783,  725,  783,  783,  841,   24,
       24,   24,   24,   24,   24,   24,   24,  842,  783,  843,
      844,  783,  783,  845,   24,   24,   24,  846,  847,  848,
      783,   24,   24,  849,  783,  850,  851,   24,   24,  852,
      853,  854,  855,  783,  856,  857,  858,  859,  860,  861,
      783,  862,  863,  783,  864,  865,  858,  783,  866,  867,
      868,  783,    0,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,

      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783
    } ;

static yyconst flex_int16_t yy_nxt[3916] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   20,   21,   22,   23,   24,   24,
       25,   24,   24,   26,   24,   27,   28,   29,   24,   30,
       31,   32,   33,   34,   35,   24,   24,   24,   19,   20,
       20,   21,   22,   23,   24,   24,   25,   24,   24,   26,
       24,   27,   28,   29,   24,   30,   31,   32,   33,   34,
       35,   24,   24,   24,   39,   40,   41,   40,   47,  783,
       77,  683,   48,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   50,   51,   51,   51,   51,   51,   51,   68,

       52,   71,   90,   93,   69,  783,   77,   72,  105,   80,
       91,  106,   70,   81,   92,  107,   53,   39,   40,   51,
       51,   51,   51,   51,   51,   68,   52,   71,   90,   93,
       69,   41,   40,   72,  105,   80,   91,  106,   70,   81,
       92,  107,   53,   55,   55,  776,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   50,   56,   56,   56,   57,
       56,   58,   55,   59,   55,   55,   55,   55,   55,   60,
       55,   55,   55,   55,   55,   55,   61,   55,   55,   55,
       55,   55,   56,   56,   56,   57,   56,   58,   55,   59,
       55,   55,   55,   55,   55,   60,   55,   55,   55,   55,

       55,   55,   61,   55,   55,   55,   55,   55,   56,  774,
       56,  108,   56,   78,   56,  109,   73,  110,   55,   39,
       40,  111,   55,  112,   74,   55,  769,   79,  713,   55,
       75,  714,   66,  762,   56,   76,   56,  108,   56,   78,
       56,  109,   73,  110,   55,  113,  114,  111,   55,  112,
       74,   55,   56,   79,   56,   55,   75,   62,   66,   82,
      115,   76,   63,   64,   56,   83,   56,   84,  116,   65,
      119,  113,  114,  120,   55,  121,   85,   67,   56,  122,
       56,   55,  751,   62,  750,   82,  115,  744,   63,   64,
       56,   83,   56,   84,  116,   65,  119,  123,  729,  120,

       55,  121,   85,   67,  125,  122,  117,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,  783,   55,   55,
       55,   55,   55,   55,  118,   55,   86,   87,  126,  124,
      125,   55,  117,  127,  128,   88,  133,  134,   55,  135,
      138,  139,  140,   89,   55,   55,   55,   55,   55,   55,
      118,   55,  172,  173,  126,  124,  724,   55,  710,  127,
      128,   88,  133,  134,   55,  135,  138,  139,  140,   89,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   97,
       98,   98,   98,   98,   98,   98,  141,   52,   98,   98,
       98,   98,   98,   98,   98,   98,   98,  142,  691,  692,

      693,  679,  694,  101,  780,  780,   98,   98,   98,   98,
       98,   98,  141,   52,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  142,  103,  103,  103,  103,  103,  103,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  783,
      780,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      103,  103,  103,  103,  103,  103,  104,  104,  104,  104,
      104,  104,  104,  104,  104,   97,  104,  104,  104,  104,
      104,  104,  129,   59,  136,  155,  156,  157,  158,  130,
      159,  161,  131,  162,  163,  164,  132,  165,  166,  167,
      168,  137,  104,  104,  104,  104,  104,  104,  129,   59,

      136,  155,  156,  157,  158,  130,  159,  161,  131,  162,
      163,  164,  132,  165,  166,  167,  168,  137,  143,  143,
      143,  143,  143,  143,  143,  143,  143,   50,  144,  144,
      144,  144,  144,  144,  169,   52,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  171,  773,  783,  780,  773,
      777,  773,  176,  178,  144,  144,  144,  144,  144,  144,
      169,   52,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  171,  149,  149,  149,  149,  149,  149,  176,  178,
      783,  766,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  773,  766,  701,  766,  757,  179,  180,  149,  149,

      149,  149,  149,  149,  150,  181,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  152,  153,  153,  153,  153,
      153,  153,  179,  180,  767,  766,  757,  678,  757,  741,
      655,  181,  757,  741,  754,  741,  703,  630,  687,  182,
      183,  184,  153,  153,  153,  153,  153,  153,  154,  154,
      154,  154,  154,  154,  154,  154,  154,   50,  154,  154,
      154,  154,  154,  154,  174,  182,  183,  184,  185,  187,
      175,  188,  189,  190,  191,  192,  193,  194,  741,  703,
      678,  100,  735,  734,  154,  154,  154,  154,  154,  154,
      174,  733,  732,  659,  185,  187,  175,  188,  189,  190,

      191,  192,  193,  194,  195,  195,  195,  195,  195,  195,
      195,  195,  195,   50,  196,  196,  196,  196,  196,  196,
      212,   52,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      196,  196,  196,  196,  196,  196,  212,   52,  200,  703,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  202,
      203,  203,  203,  203,  203,  203,  783,  210,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  678,  721,  716,
      715,  638,  703,  701,  211,  214,  203,  203,  203,  203,
      203,  203,  150,  215,  205,  205,  205,  205,  205,  205,

      205,  205,  205,  152,  206,  206,  206,  206,  206,  206,
      211,  214,  678,  630,  572,  607,  678,  630,  100,  215,
      667,  580,  655,  630,  572,  652,  216,  218,  220,  221,
      206,  206,  206,  206,  206,  206,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  222,  208,  208,  208,  208,
      208,  208,  216,  218,  220,  221,  650,  640,  537,  630,
      572,  223,  487,  496,  100,  572,  487,  100,  595,  586,
      231,  222,  208,  208,  208,  208,  208,  208,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  223,  209,  209,
      209,  209,  209,  209,  224,  229,  231,  232,  233,  234,

      235,  238,  236,  225,  226,  227,  237,  239,  240,  241,
      230,  242,  243,  584,  209,  209,  209,  209,  209,  209,
      224,  229,  247,  232,  233,  234,  235,  238,  236,  225,
      226,  227,  237,  239,  240,  241,  230,  242,  243,  244,
      248,  251,  252,  253,  270,  271,  272,  275,  247,  273,
      276,  249,  277,  274,  245,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  783,  244,  248,  251,  252,  253,
      270,  271,  272,  275,  281,  273,  276,  249,  277,  274,
      245,  200,  440,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  202,  261,  261,  261,  261,  261,  261,  783,

      281,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      572,  487,  569,  566,  389,  100,  282,  487,  378,  261,
      261,  261,  261,  261,  261,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  283,  263,  263,  263,  263,  263,
      263,  264,  282,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  378,  500,  324,  487,  378,  100,  469,  458,
      283,  263,  263,  263,  263,  263,  263,  150,  268,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  152,  266,
      266,  266,  266,  266,  266,  783,  284,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  100,  378,  258,  433,

      423,  392,  202,  378,  285,  266,  266,  266,  266,  266,
      266,  150,  284,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  268,  269,  269,  269,  269,  269,  269,  783,
      285,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      278,  286,  287,  288,  289,  290,  292,  279,  293,  269,
      269,  269,  269,  269,  269,  280,  294,  295,  296,  297,
      291,  298,  299,  301,  302,  303,  278,  286,  287,  288,
      289,  290,  292,  279,  293,  304,  305,  306,  307,  308,
      309,  280,  294,  295,  296,  297,  291,  298,  299,  301,
      302,  303,  310,  311,  312,  313,  315,  316,  258,  332,

      258,  304,  305,  306,  307,  308,  309,  320,  373,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  310,  311,
      312,  313,  315,  316,  200,  332,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  202,  322,  322,  322,  322,
      322,  322,  783,  333,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  322,  322,  322,  322,  322,  322,  200,  333,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  324,
      325,  325,  325,  325,  325,  325,  783,  334,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  369,  362,  335,

      361,  358,  355,  344,  337,  152,  325,  325,  325,  325,
      325,  325,  150,  334,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  152,  150,  335,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  268,  329,  329,  329,  329,
      329,  329,  783,  100,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  258,  147,  100,  314,  300,  336,  338,
      339,  340,  329,  329,  329,  329,  329,  329,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  341,  331,  331,
      331,  331,  331,  331,  336,  338,  339,  340,  342,  343,
      345,  346,  347,  348,  349,  350,  351,  352,  353,  354,

      356,  357,  359,  341,  331,  331,  331,  331,  331,  331,
      360,  363,  364,  365,  342,  343,  345,  346,  347,  348,
      349,  350,  351,  352,  353,  354,  356,  357,  359,  366,
      367,  368,  370,  371,  372,  374,  360,  363,  364,  365,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  391,
      783,  258,  147,  255,  783,  366,  367,  368,  370,  371,
      372,  374,  200,  254,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  202,  200,  391,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  324,  382,  382,  382,  382,
      382,  382,  783,  250,  382,  382,  382,  382,  382,  382,

      382,  382,  382,  246,  228,  219,  217,  213,  100,  393,
      147,  147,  382,  382,  382,  382,  382,  382,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  394,  384,  384,
      384,  384,  384,  384,  385,  393,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  186,  395,  177,  170,  160,
      147,  100,  100,  394,  384,  384,  384,  384,  384,  384,
      150,   45,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  150,  395,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  268,  387,  387,  387,  387,  387,  387,  783,
      399,  387,  387,  387,  387,  387,  387,  387,  387,  387,

       46,   43,   94,   54,   46,   43,  783,   37,  400,  387,
      387,  387,  387,  387,  387,  150,  399,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  389,  390,  390,  390,
      390,  390,  390,  783,  400,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  396,  401,  402,  403,  404,  405,
      397,  406,  398,  390,  390,  390,  390,  390,  390,  407,
      408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
      396,  401,  402,  403,  404,  405,  397,  406,  398,  418,
      419,  420,  421,  422,  424,  407,  408,  409,  410,  411,
      412,  413,  414,  415,  416,  417,  425,  426,  427,  428,

      429,  430,  431,  432,   37,  418,  419,  420,  421,  422,
      424,  436,  783,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  425,  426,  427,  428,  429,  430,  431,  432,
      200,  783,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  200,  783,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  324,  438,  438,  438,  438,  438,  438,  783,
      447,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  438,
      438,  438,  438,  438,  438,  200,  447,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  440,  441,  441,  441,

      441,  441,  441,  783,  448,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  783,  783,  449,  783,  783,  783,
      783,  783,  783,  441,  441,  441,  441,  441,  441,  150,
      448,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      268,  150,  449,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  389,  444,  444,  444,  444,  444,  444,  783,
      783,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      783,  783,  783,  783,  783,  450,  451,  452,  453,  444,
      444,  444,  444,  444,  444,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  454,  446,  446,  446,  446,  446,

      446,  450,  451,  452,  453,  455,  456,  457,  459,  460,
      461,  462,  463,  464,  465,  466,  467,  468,  470,  471,
      454,  446,  446,  446,  446,  446,  446,  472,  473,  474,
      475,  455,  456,  457,  459,  460,  461,  462,  463,  464,
      465,  466,  467,  468,  470,  471,  476,  477,  478,  479,
      480,  481,  482,  472,  473,  474,  475,  483,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  783,  783,  498,
      783,  783,  476,  477,  478,  479,  480,  481,  482,  783,
      783,  783,  200,  483,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  324,  200,  498,  489,  489,  489,  489,

      489,  489,  489,  489,  489,  440,  490,  490,  490,  490,
      490,  490,  783,  783,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  490,  490,  490,  490,  490,  490,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  499,  492,  492,
      492,  492,  492,  492,  783,  501,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  783,  783,  783,  783,  783,
      783,  783,  783,  499,  492,  492,  492,  492,  492,  492,
      150,  501,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  389,  494,  494,  494,  494,  494,  494,  783,  502,

      497,  497,  497,  497,  497,  497,  497,  497,  497,  783,
      783,  783,  783,  783,  783,  783,  503,  504,  494,  494,
      494,  494,  494,  494,  150,  502,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  496,  497,  497,  497,  497,
      497,  497,  503,  504,  505,  506,  507,  508,  509,  510,
      511,  512,  513,  514,  515,  516,  519,  520,  521,  522,
      523,  517,  497,  497,  497,  497,  497,  497,  518,  524,
      505,  506,  507,  508,  509,  510,  511,  512,  513,  514,
      515,  516,  519,  520,  521,  522,  523,  517,  525,  526,
      527,  528,  529,  530,  518,  524,  488,  488,  488,  488,

      488,  488,  488,  488,  488,  783,  783,  783,  783,  783,
      783,  783,  783,  543,  525,  526,  527,  528,  529,  530,
      200,  783,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  440,  535,  535,  535,  535,  535,  535,  783,  543,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  783,
      783,  783,  783,  783,  783,  783,  783,  544,  535,  535,
      535,  535,  535,  535,  200,  783,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  537,  538,  538,  538,  538,
      538,  538,  783,  544,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  783,  783,  545,  783,  783,  783,  783,

      783,  783,  538,  538,  538,  538,  538,  538,  150,  783,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  389,
      150,  545,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  496,  540,  540,  540,  540,  540,  540,  783,  783,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  783,
      783,  783,  783,  783,  546,  547,  548,  549,  540,  540,
      540,  540,  540,  540,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  550,  542,  542,  542,  542,  542,  542,
      546,  547,  548,  549,  551,  552,  553,  554,  555,  556,
      557,  558,  559,  560,  561,  562,  563,  564,  565,  550,

      542,  542,  542,  542,  542,  542,  567,  568,  783,  582,
      551,  552,  553,  554,  555,  556,  557,  558,  559,  560,
      561,  562,  563,  564,  565,  783,  783,  783,  783,  783,
      783,  783,  567,  568,  200,  582,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  440,  200,  783,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  537,  574,  574,
      574,  574,  574,  574,  783,  783,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  783,  783,  783,  783,  783,
      783,  583,  783,  783,  574,  574,  574,  574,  574,  574,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  585,

      576,  576,  576,  576,  576,  576,  783,  583,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  783,  783,  783,
      783,  783,  783,  783,  783,  585,  576,  576,  576,  576,
      576,  576,  150,  783,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  496,  578,  578,  578,  578,  578,  578,
      783,  587,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  783,  783,  783,  783,  783,  783,  783,  588,  589,
      578,  578,  578,  578,  578,  578,  150,  587,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  580,  581,  581,
      581,  581,  581,  581,  588,  589,  590,  591,  592,  593,

      594,  596,  597,  598,  599,  600,  783,  613,  783,  783,
      783,  783,  783,  783,  581,  581,  581,  581,  581,  581,
      783,  783,  590,  591,  592,  593,  594,  596,  597,  598,
      599,  600,  200,  613,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  537,  605,  605,  605,  605,  605,  605,
      783,  614,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  783,  783,  783,  783,  783,  783,  783,  783,  617,
      605,  605,  605,  605,  605,  605,  200,  614,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  607,  608,  608,
      608,  608,  608,  608,  783,  617,  608,  608,  608,  608,

      608,  608,  608,  608,  608,  783,  783,  618,  783,  783,
      783,  783,  783,  783,  608,  608,  608,  608,  608,  608,
      150,  783,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  496,  150,  618,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  580,  610,  610,  610,  610,  610,  610,
      783,  783,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  783,  783,  783,  783,  783,  783,  619,  620,  621,
      610,  610,  610,  610,  610,  610,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  622,  612,  612,  612,  612,
      612,  612,  615,  619,  620,  621,  623,  624,  616,  625,

      626,  783,  641,  783,  783,  783,  783,  783,  783,  783,
      783,  622,  612,  612,  612,  612,  612,  612,  615,  783,
      783,  783,  623,  624,  616,  625,  626,  200,  641,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  537,  200,
      783,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      607,  632,  632,  632,  632,  632,  632,  783,  783,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  783,  783,
      783,  783,  783,  783,  642,  783,  783,  632,  632,  632,
      632,  632,  632,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  643,  634,  634,  634,  634,  634,  634,  783,

      642,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      783,  783,  783,  783,  783,  783,  783,  783,  643,  634,
      634,  634,  634,  634,  634,  150,  783,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  580,  636,  636,  636,
      636,  636,  636,  783,  644,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  783,  783,  783,  783,  783,  783,
      783,  645,  646,  636,  636,  636,  636,  636,  636,  150,
      644,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      638,  639,  639,  639,  639,  639,  639,  645,  646,  647,
      648,  649,  651,  783,  665,  657,  657,  657,  657,  657,

      657,  657,  657,  657,  783,  783,  783,  639,  639,  639,
      639,  639,  639,  783,  783,  647,  648,  649,  651,  200,
      665,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      607,  657,  657,  657,  657,  657,  657,  783,  666,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  783,  783,
      783,  783,  783,  783,  783,  783,  668,  657,  657,  657,
      657,  657,  657,  200,  666,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  659,  660,  660,  660,  660,  660,
      660,  150,  668,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  580,  783,  783,  783,  783,  783,  783,  783,

      669,  660,  660,  660,  660,  660,  660,  150,  783,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  638,  662,
      662,  662,  662,  662,  662,  783,  669,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  783,  783,  783,  783,
      783,  670,  671,  672,  673,  662,  662,  662,  662,  662,
      662,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      674,  664,  664,  664,  664,  664,  664,  670,  671,  672,
      673,  200,  783,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  607,  783,  783,  783,  674,  664,  664,  664,
      664,  664,  664,  200,  783,  680,  680,  680,  680,  680,

      680,  680,  680,  680,  659,  681,  681,  681,  681,  681,
      681,  783,  783,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  783,  783,  783,  783,  783,  783,  689,  783,
      783,  681,  681,  681,  681,  681,  681,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  690,  683,  683,  683,
      683,  683,  683,  783,  689,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  783,  783,  783,  783,  783,  783,
      783,  783,  690,  683,  683,  683,  683,  683,  683,  150,
      783,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      638,  685,  685,  685,  685,  685,  685,  783,  695,  688,

      688,  688,  688,  688,  688,  688,  688,  688,  783,  783,
      783,  783,  783,  783,  783,  696,  697,  685,  685,  685,
      685,  685,  685,  150,  695,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  687,  688,  688,  688,  688,  688,
      688,  696,  697,  698,  783,  711,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  783,  783,  783,  783,  783,
      783,  688,  688,  688,  688,  688,  688,  783,  783,  698,
      200,  711,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  659,  705,  705,  705,  705,  705,  705,  783,  712,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  717,

      783,  783,  783,  783,  783,  783,  783,  718,  705,  705,
      705,  705,  705,  705,  200,  712,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  717,  707,  707,  707,  707,
      707,  707,  150,  718,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  638,  783,  783,  783,  783,  783,  783,
      783,  719,  707,  707,  707,  707,  707,  707,  150,  783,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  687,
      709,  709,  709,  709,  709,  709,  783,  719,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  720,  783,  783,
      783,  783,  783,  783,  783,  783,  709,  709,  709,  709,

      709,  709,  783,  783,  783,  783,  783,  783,  783,  730,
      783,  783,  200,  720,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  659,  200,  783,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  730,  726,  726,  726,  726,
      726,  726,  783,  731,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  783,  783,  783,  783,  783,  783,  783,
      783,  736,  726,  726,  726,  726,  726,  726,  150,  731,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  687,
      728,  728,  728,  728,  728,  728,  783,  736,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  737,  783,  745,

      783,  783,  783,  783,  783,  783,  728,  728,  728,  728,
      728,  728,  783,  783,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  737,  200,  745,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  746,  743,  743,  743,  743,
      743,  743,  150,  747,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  687,  752,  753,  758,  759,  783,  783,
      783,  746,  743,  743,  743,  743,  743,  743,  200,  747,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  783,
      752,  753,  758,  759,   36,   36,   36,   36,   38,   38,
       38,   38,   42,   42,   42,   42,   44,  783,   44,   44,

       45,   45,   45,   45,   95,  783,   95,   95,   99,   99,
      145,  145,  146,  146,  197,  197,  198,  198,  199,  199,
      256,  256,  257,  257,  317,  317,  318,  318,  319,  319,
      375,  375,  376,  376,  377,  377,  434,  434,  435,  435,
      484,  484,  485,  485,  486,  486,  531,  531,  532,  532,
      533,  533,  434,  434,  570,  570,  571,  571,  601,  601,
      602,  602,  603,  603,  627,  627,  628,  628,  629,  629,
      532,  532,  653,  653,  654,  654,  675,  675,  676,  676,
      677,  677,  699,  699,  700,  700,  702,  702,  602,  602,
      722,  722,  723,  723,  738,  738,  739,  739,  740,  740,

      748,  748,  749,  749,  653,  653,  755,  755,  756,  756,
      760,  760,  761,  761,  763,  763,  764,  764,  765,  765,
      700,  700,  768,  768,  770,  770,  771,  771,  772,  772,
      775,  775,  778,  778,  779,  779,  781,  781,  782,  782,
        7,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,

      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783
    } ;

static yyconst flex_int16_t yy_chk[3916] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   10,   10,   11,   11,   15,   17,
       28,  867,   15,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   25,

       16,   26,   33,   35,   25,   17,   28,   26,   57,   30,
       34,   58,   25,   30,   34,   60,   16,   39,   39,   16,
       16,   16,   16,   16,   16,   25,   16,   26,   33,   35,
       25,   40,   40,   26,   57,   30,   34,   58,   25,   30,
       34,   60,   16,   19,   19,  863,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   20,  861,
       20,   61,   22,   29,   22,   62,   27,   63,   20,   41,
       41,   64,   22,   65,   27,   20,  857,   29,  692,   22,
       27,  692,   22,  851,   20,   27,   20,   61,   22,   29,
       22,   62,   27,   63,   20,   66,   67,   64,   22,   65,
       27,   20,   21,   29,   21,   22,   27,   21,   22,   31,
       68,   27,   21,   21,   23,   31,   23,   31,   69,   21,
       71,   66,   67,   72,   23,   73,   31,   23,   21,   74,
       21,   23,  845,   21,  844,   31,   68,  841,   21,   21,
       23,   31,   23,   31,   69,   21,   71,   75,  837,   72,

       23,   73,   31,   23,   76,   74,   70,   23,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   70,   24,   32,   32,   77,   75,
       76,   24,   70,   79,   80,   32,   82,   83,   24,   84,
       89,   90,   91,   32,   24,   24,   24,   24,   24,   24,
       70,   24,  122,  122,   77,   75,  836,   24,  832,   79,
       80,   32,   82,   83,   24,   84,   89,   90,   91,   32,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   92,   49,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   93,  668,  668,

      668,  828,  668,  791,  782,  781,   49,   49,   49,   49,
       49,   49,   92,   49,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   93,   54,   54,   54,   54,   54,   54,
       98,   98,   98,   98,   98,   98,   98,   98,   98,  103,
      779,  103,  103,  103,  103,  103,  103,  103,  103,  103,
       54,   54,   54,   54,   54,   54,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   81,   56,   85,  105,  106,  107,  108,   81,
      109,  111,   81,  112,  113,  114,   81,  115,  116,  117,
      118,   85,   56,   56,   56,   56,   56,   56,   81,   56,

       85,  105,  106,  107,  108,   81,  109,  111,   81,  112,
      113,  114,   81,  115,  116,  117,  118,   85,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,  119,   96,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  121,  778,  777,  776,  775,
      774,  772,  124,  126,   96,   96,   96,   96,   96,   96,
      119,   96,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  121,  100,  100,  100,  100,  100,  100,  124,  126,
      149,  771,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  769,  768,  767,  765,  764,  127,  128,  100,  100,

      100,  100,  100,  100,  102,  129,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  127,  128,  763,  762,  761,  760,  756,  755,
      754,  129,  750,  749,  748,  740,  739,  738,  728,  130,
      131,  132,  102,  102,  102,  102,  102,  102,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  123,  130,  131,  132,  133,  135,
      123,  136,  137,  138,  139,  140,  141,  142,  724,  723,
      722,  721,  716,  715,  104,  104,  104,  104,  104,  104,
      123,  714,  713,  705,  133,  135,  123,  136,  137,  138,

      139,  140,  141,  142,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      157,  143,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      143,  143,  143,  143,  143,  143,  157,  143,  148,  702,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  153,  155,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  700,  699,  694,
      693,  685,  679,  678,  155,  159,  148,  148,  148,  148,
      148,  148,  151,  160,  151,  151,  151,  151,  151,  151,

      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      155,  159,  677,  676,  675,  657,  654,  653,  652,  160,
      642,  636,  630,  629,  628,  627,  161,  163,  166,  167,
      151,  151,  151,  151,  151,  151,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  168,  152,  152,  152,  152,
      152,  152,  161,  163,  166,  167,  625,  613,  605,  603,
      602,  169,  601,  578,  572,  571,  570,  569,  561,  548,
      174,  168,  152,  152,  152,  152,  152,  152,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  169,  154,  154,
      154,  154,  154,  154,  170,  173,  174,  175,  176,  177,

      178,  180,  179,  170,  170,  170,  179,  181,  182,  183,
      173,  184,  185,  546,  154,  154,  154,  154,  154,  154,
      170,  173,  188,  175,  176,  177,  178,  180,  179,  170,
      170,  170,  179,  181,  182,  183,  173,  184,  185,  186,
      189,  191,  192,  193,  210,  211,  212,  214,  188,  213,
      215,  189,  216,  213,  186,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  186,  189,  191,  192,  193,
      210,  211,  212,  214,  218,  213,  215,  189,  216,  213,
      186,  201,  535,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  203,

      218,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      533,  532,  531,  528,  494,  487,  219,  486,  485,  201,
      201,  201,  201,  201,  201,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  221,  202,  202,  202,  202,  202,
      202,  204,  219,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  484,  449,  438,  435,  434,  433,  417,  403,
      221,  202,  202,  202,  202,  202,  202,  205,  387,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  206,  222,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  378,  377,  376,  375,

      364,  333,  322,  319,  223,  205,  205,  205,  205,  205,
      205,  207,  222,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  208,
      223,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      217,  224,  225,  226,  227,  228,  229,  217,  230,  207,
      207,  207,  207,  207,  207,  217,  231,  233,  234,  235,
      228,  236,  237,  239,  240,  241,  217,  224,  225,  226,
      227,  228,  229,  217,  230,  242,  243,  244,  245,  246,
      247,  217,  231,  233,  234,  235,  228,  236,  237,  239,
      240,  241,  248,  249,  250,  251,  253,  254,  318,  270,

      317,  242,  243,  244,  245,  246,  247,  259,  315,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  248,  249,
      250,  251,  253,  254,  260,  270,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  261,  271,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  260,  260,  260,  260,  260,  260,  262,  271,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  263,  272,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  310,  303,  273,

      302,  299,  295,  284,  275,  266,  262,  262,  262,  262,
      262,  262,  265,  272,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  267,  273,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  269,  258,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  257,  256,  255,  252,  238,  274,  276,
      278,  279,  267,  267,  267,  267,  267,  267,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  280,  268,  268,
      268,  268,  268,  268,  274,  276,  278,  279,  281,  283,
      285,  286,  287,  288,  289,  290,  291,  292,  293,  294,

      296,  298,  300,  280,  268,  268,  268,  268,  268,  268,
      301,  304,  305,  306,  281,  283,  285,  286,  287,  288,
      289,  290,  291,  292,  293,  294,  296,  298,  300,  307,
      308,  309,  312,  313,  314,  316,  301,  304,  305,  306,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  332,
      209,  199,  198,  197,  196,  307,  308,  309,  312,  313,
      314,  316,  321,  194,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  323,  332,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  325,  190,  325,  325,  325,  325,  325,  325,

      325,  325,  325,  187,  172,  164,  162,  158,  147,  334,
      146,  145,  323,  323,  323,  323,  323,  323,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  335,  324,  324,
      324,  324,  324,  324,  326,  334,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  134,  336,  125,  120,  110,
       99,   97,   50,  335,  324,  324,  324,  324,  324,  324,
      327,   46,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  328,  336,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  329,
      338,  329,  329,  329,  329,  329,  329,  329,  329,  329,

       45,   42,   37,   18,   14,   12,    7,    4,  340,  328,
      328,  328,  328,  328,  328,  330,  338,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  331,  340,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  337,  341,  342,  343,  344,  345,
      337,  346,  337,  330,  330,  330,  330,  330,  330,  347,
      348,  349,  350,  351,  352,  353,  354,  355,  356,  357,
      337,  341,  342,  343,  344,  345,  337,  346,  337,  358,
      359,  360,  361,  362,  365,  347,  348,  349,  350,  351,
      352,  353,  354,  355,  356,  357,  366,  367,  368,  369,

      370,  372,  373,  374,    3,  358,  359,  360,  361,  362,
      365,  379,    0,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  366,  367,  368,  369,  370,  372,  373,  374,
      380,    0,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  381,    0,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  382,
      391,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  381,
      381,  381,  381,  381,  381,  383,  391,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,

      383,  383,  383,  384,  392,  384,  384,  384,  384,  384,
      384,  384,  384,  384,    0,    0,  393,    0,    0,    0,
        0,    0,    0,  383,  383,  383,  383,  383,  383,  386,
      392,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  388,  393,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  390,
        0,  390,  390,  390,  390,  390,  390,  390,  390,  390,
        0,    0,    0,    0,    0,  394,  395,  396,  397,  388,
      388,  388,  388,  388,  388,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  398,  389,  389,  389,  389,  389,

      389,  394,  395,  396,  397,  399,  401,  402,  404,  406,
      407,  410,  411,  412,  413,  414,  415,  416,  418,  419,
      398,  389,  389,  389,  389,  389,  389,  420,  421,  422,
      423,  399,  401,  402,  404,  406,  407,  410,  411,  412,
      413,  414,  415,  416,  418,  419,  424,  425,  426,  427,
      428,  429,  430,  420,  421,  422,  423,  431,  436,  436,
      436,  436,  436,  436,  436,  436,  436,    0,    0,  447,
        0,    0,  424,  425,  426,  427,  428,  429,  430,    0,
        0,    0,  437,  431,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  439,  447,  439,  439,  439,  439,

      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  441,    0,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  439,  439,  439,  439,  439,  439,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  448,  440,  440,
      440,  440,  440,  440,  444,  450,  444,  444,  444,  444,
      444,  444,  444,  444,  444,    0,    0,    0,    0,    0,
        0,    0,    0,  448,  440,  440,  440,  440,  440,  440,
      443,  450,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  446,  451,

      446,  446,  446,  446,  446,  446,  446,  446,  446,    0,
        0,    0,    0,    0,    0,    0,  452,  453,  443,  443,
      443,  443,  443,  443,  445,  451,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  452,  453,  454,  455,  457,  458,  459,  460,
      462,  463,  464,  465,  467,  468,  470,  471,  472,  473,
      474,  469,  445,  445,  445,  445,  445,  445,  469,  475,
      454,  455,  457,  458,  459,  460,  462,  463,  464,  465,
      467,  468,  470,  471,  472,  473,  474,  469,  476,  477,
      478,  480,  482,  483,  469,  475,  488,  488,  488,  488,

      488,  488,  488,  488,  488,    0,    0,    0,    0,    0,
        0,    0,    0,  498,  476,  477,  478,  480,  482,  483,
      489,    0,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  490,  498,
      490,  490,  490,  490,  490,  490,  490,  490,  490,    0,
        0,    0,    0,    0,    0,    0,    0,  499,  489,  489,
      489,  489,  489,  489,  491,    0,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  492,  499,  492,  492,  492,  492,  492,  492,
      492,  492,  492,    0,    0,  500,    0,    0,    0,    0,

        0,    0,  491,  491,  491,  491,  491,  491,  493,    0,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      495,  500,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  497,    0,
      497,  497,  497,  497,  497,  497,  497,  497,  497,    0,
        0,    0,    0,    0,  501,  502,  503,  504,  495,  495,
      495,  495,  495,  495,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  505,  496,  496,  496,  496,  496,  496,
      501,  502,  503,  504,  507,  508,  509,  511,  512,  515,
      517,  518,  519,  520,  521,  522,  523,  524,  527,  505,

      496,  496,  496,  496,  496,  496,  529,  530,    0,  544,
      507,  508,  509,  511,  512,  515,  517,  518,  519,  520,
      521,  522,  523,  524,  527,    0,    0,    0,    0,    0,
        0,    0,  529,  530,  534,  544,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  536,    0,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  538,    0,  538,  538,  538,  538,
      538,  538,  538,  538,  538,    0,    0,    0,    0,    0,
        0,  545,    0,    0,  536,  536,  536,  536,  536,  536,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  547,

      537,  537,  537,  537,  537,  537,  540,  545,  540,  540,
      540,  540,  540,  540,  540,  540,  540,    0,    0,    0,
        0,    0,    0,    0,    0,  547,  537,  537,  537,  537,
      537,  537,  539,    0,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      542,  550,  542,  542,  542,  542,  542,  542,  542,  542,
      542,    0,    0,    0,    0,    0,    0,    0,  551,  552,
      539,  539,  539,  539,  539,  539,  541,  550,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  551,  552,  556,  557,  558,  559,

      560,  562,  563,  565,  566,  567,    0,  583,    0,    0,
        0,    0,    0,    0,  541,  541,  541,  541,  541,  541,
        0,    0,  556,  557,  558,  559,  560,  562,  563,  565,
      566,  567,  573,  583,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      574,  584,  574,  574,  574,  574,  574,  574,  574,  574,
      574,    0,    0,    0,    0,    0,    0,    0,    0,  589,
      573,  573,  573,  573,  573,  573,  575,  584,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  576,  589,  576,  576,  576,  576,

      576,  576,  576,  576,  576,    0,    0,  590,    0,    0,
        0,    0,    0,    0,  575,  575,  575,  575,  575,  575,
      577,    0,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  579,  590,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      581,    0,  581,  581,  581,  581,  581,  581,  581,  581,
      581,    0,    0,    0,    0,    0,    0,  591,  592,  593,
      579,  579,  579,  579,  579,  579,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  595,  580,  580,  580,  580,
      580,  580,  586,  591,  592,  593,  596,  597,  586,  599,

      600,    0,  614,    0,    0,    0,    0,    0,    0,    0,
        0,  595,  580,  580,  580,  580,  580,  580,  586,    0,
        0,    0,  596,  597,  586,  599,  600,  604,  614,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  606,
        0,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  608,    0,  608,
      608,  608,  608,  608,  608,  608,  608,  608,    0,    0,
        0,    0,    0,    0,  615,    0,    0,  606,  606,  606,
      606,  606,  606,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  616,  607,  607,  607,  607,  607,  607,  610,

      615,  610,  610,  610,  610,  610,  610,  610,  610,  610,
        0,    0,    0,    0,    0,    0,    0,    0,  616,  607,
      607,  607,  607,  607,  607,  609,    0,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  612,  618,  612,  612,  612,  612,  612,
      612,  612,  612,  612,    0,    0,    0,    0,    0,    0,
        0,  619,  620,  609,  609,  609,  609,  609,  609,  611,
      618,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  619,  620,  621,
      622,  624,  626,  632,  640,  632,  632,  632,  632,  632,

      632,  632,  632,  632,    0,    0,    0,  611,  611,  611,
      611,  611,  611,    0,    0,  621,  622,  624,  626,  631,
      640,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  634,  641,  634,
      634,  634,  634,  634,  634,  634,  634,  634,    0,    0,
        0,    0,    0,    0,    0,    0,  643,  631,  631,  631,
      631,  631,  631,  633,  641,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  635,  643,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,    0,    0,    0,    0,    0,    0,    0,

      645,  633,  633,  633,  633,  633,  633,  637,    0,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  639,  645,  639,  639,  639,
      639,  639,  639,  639,  639,  639,    0,    0,    0,    0,
        0,  646,  647,  648,  649,  637,  637,  637,  637,  637,
      637,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      650,  638,  638,  638,  638,  638,  638,  646,  647,  648,
      649,  656,    0,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,    0,    0,    0,  650,  638,  638,  638,
      638,  638,  638,  658,    0,  658,  658,  658,  658,  658,

      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  660,    0,  660,  660,  660,  660,  660,  660,  660,
      660,  660,    0,    0,    0,    0,    0,    0,  665,    0,
        0,  658,  658,  658,  658,  658,  658,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  666,  659,  659,  659,
      659,  659,  659,  662,  665,  662,  662,  662,  662,  662,
      662,  662,  662,  662,    0,    0,    0,    0,    0,    0,
        0,    0,  666,  659,  659,  659,  659,  659,  659,  661,
        0,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  664,  669,  664,

      664,  664,  664,  664,  664,  664,  664,  664,    0,    0,
        0,    0,    0,    0,    0,  671,  672,  661,  661,  661,
      661,  661,  661,  663,  669,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  671,  672,  674,  681,  689,  681,  681,  681,  681,
      681,  681,  681,  681,  681,    0,    0,    0,    0,    0,
        0,  663,  663,  663,  663,  663,  663,    0,    0,  674,
      680,  689,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  683,  690,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  695,

        0,    0,    0,    0,    0,    0,    0,  696,  680,  680,
      680,  680,  680,  680,  682,  690,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  695,  682,  682,  682,  682,
      682,  682,  684,  696,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,    0,    0,    0,    0,    0,    0,
        0,  697,  682,  682,  682,  682,  682,  682,  686,    0,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  688,  697,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  698,    0,    0,
        0,    0,    0,    0,    0,    0,  686,  686,  686,  686,

      686,  686,    0,    0,    0,    0,    0,    0,    0,  711,
        0,    0,  704,  698,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  706,    0,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  711,  706,  706,  706,  706,
      706,  706,  707,  712,  707,  707,  707,  707,  707,  707,
      707,  707,  707,    0,    0,    0,    0,    0,    0,    0,
        0,  719,  706,  706,  706,  706,  706,  706,  708,  712,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  709,  719,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  720,    0,  730,

        0,    0,    0,    0,    0,    0,  708,  708,  708,  708,
      708,  708,  726,    0,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  720,  725,  730,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  731,  725,  725,  725,  725,
      725,  725,  727,  737,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  745,  747,  752,  753,    0,    0,
        0,  731,  725,  725,  725,  725,  725,  725,  742,  737,
      742,  742,  742,  742,  742,  742,  742,  742,  742,    0,
      745,  747,  752,  753,  784,  784,  784,  784,  785,  785,
      785,  785,  786,  786,  786,  786,  787,    0,  787,  787,

      788,  788,  788,  788,  789,    0,  789,  789,  790,  790,
      792,  792,  793,  793,  794,  794,  795,  795,  796,  796,
      797,  797,  798,  798,  799,  799,  800,  800,  801,  801,
      802,  802,  803,  803,  804,  804,  805,  805,  806,  806,
      807,  807,  808,  808,  809,  809,  810,  810,  811,  811,
      812,  812,  813,  813,  814,  814,  815,  815,  816,  816,
      817,  817,  818,  818,  819,  819,  820,  820,  821,  821,
      822,  822,  823,  823,  824,  824,  825,  825,  826,  826,
      827,  827,  829,  829,  830,  830,  831,  831,  833,  833,
      834,  834,  835,  835,  838,  838,  839,  839,  840,  840,

      842,  842,  843,  843,  846,  846,  847,  847,  848,  848,
      849,  849,  850,  850,  852,  852,  853,  853,  854,  854,
      855,  855,  856,  856,  858,  858,  859,  859,  860,  860,
      862,  862,  864,  864,  865,  865,  866,  866,  868,  868,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,

      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[92] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_ClntParser_stype yylval;
}

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 784 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3841 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
{ return ClntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
{ return ClntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
{ return ClntParser::ADDRESS_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
{ return ClntParser::STRING_KEYWORD_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ return ClntParser::ADDRESS_LIST_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ return ClntParser::NAME_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ return ClntParser::IA_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
{ return ClntParser::TA_; }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ return ClntParser::IAID_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 13:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
{ return ClntParser::LOGLEVEL_; }
	YY_BREAK
case 15:
YY_RULE_SETUP
{ return ClntParser::LOGMODE_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ return ClntParser::LOGNAME_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ return ClntParser::LOGCOLORS_; }
	YY_BREAK
case 18:
YY_RULE_SETUP
{ return ClntParser::WORKDIR_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
{ return ClntParser::SCRIPTS_DIR_; }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ return ClntParser::NOTIFY_SCRIPTS_; }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 22:
YY_RULE_SETUP
{ return ClntParser::VALID_TIME_; }
	YY_BREAK
case 23:
YY_RULE_SETUP
{ return ClntParser::REMOTE_AUTOCONF_; }
	YY_BREAK
case 24:
YY_RULE_SETUP
{ return ClntParser::T1_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
{ return ClntParser::T2_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
{ return ClntParser::OPTION_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
{ return ClntParser::DNS_SERVER_;}
	YY_BREAK
case 28:
YY_RULE_SETUP
{ return ClntParser::DOMAIN_;}
	YY_BREAK
case 29:
YY_RULE_SETUP
{ return ClntParser::NTP_SERVER_;}
	YY_BREAK
case 30:
YY_RULE_SETUP
{ return ClntParser::TIME_ZONE_;}
	YY_BREAK
case 31:
YY_RULE_SETUP
{ return ClntParser::SIP_SERVER_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
{ return ClntParser::SIP_DOMAIN_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ return ClntParser::FQDN_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ return ClntParser::FQDN_S_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ return ClntParser::NIS_SERVER_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ return ClntParser::NIS_DOMAIN_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
{ return ClntParser::NISP_SERVER_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ return ClntParser::NISP_DOMAIN_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ return ClntParser::LIFETIME_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ return ClntParser::REJECT_SERVERS_;}
	YY_BREAK
case 41:
YY_RULE_SETUP
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 42:
YY_RULE_SETUP
{ return ClntParser::RAPID_COMMIT_;}
	YY_BREAK
case 43:
YY_RULE_SETUP
{ return ClntParser::RECONFIGURE_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
{ return ClntParser::UNICAST_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
{ return ClntParser::STRICT_RFC_NO_ROUTING_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
{ return ClntParser::PREFIX_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LL_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LLT_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_EN_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ return ClntParser::VENDOR_SPEC_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ return ClntParser::ANON_INF_REQUEST_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ return ClntParser::INSIST_MODE_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ return ClntParser::INACTIVE_MODE_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ return ClntParser::AUTH_ENABLED_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ return ClntParser::AUTH_ACCEPT_METHODS_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ return ClntParser::DIGEST_NONE_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ return ClntParser::DIGEST_PLAIN_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
{ return ClntParser::SKIP_CONFIRM_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
{ return ClntParser::AFTR_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ return ClntParser::EXPERIMENTAL_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
{ return ClntParser::ADDR_PARAMS_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
{ return ClntParser::REQUEST_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
;
	YY_BREAK
case 73:
YY_RULE_SETUP
;
	YY_BREAK
case 74:
YY_RULE_SETUP
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
BEGIN(INITIAL);
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 77:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 78:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 79:
YY_RULE_SETUP
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 80:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 81:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 82:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 83:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return ClntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return ClntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
{
    // DUID in 0x00010203 format
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return ClntParser::DUID_;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
{
   // DUID in 00:01:02:03 format
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
        x = (toupper(*pos)-'A' + 10);
      else
        x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))	
        x += (toupper(*(pos+1))-'A' + 10);
      else
        x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }
   
   return ClntParser::DUID_;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
{ 
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::HEXNUMBER_;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
{ 
    if(!sscanf(yytext,"%u",(unsigned int*)&(yylval.ival))) { 
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::INTNUMBER_;
}
	YY_BREAK
case 90:
YY_RULE_SETUP
{return yytext[0];} 
	YY_BREAK
case 91:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 784 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 784 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 783);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

