
#line 3 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 81
#define YY_END_OF_BUFFER 82
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[707] =
    {   0,
        1,    1,    0,    0,    0,    0,   82,   80,    2,    1,
        1,   80,   63,   80,   80,   79,   79,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   67,   67,   81,    1,
        1,    1,    0,   75,   63,    0,   75,   65,   64,   79,
        0,    0,   78,    0,   72,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,    6,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   40,   76,   76,
       76,   76,   76,   76,   18,   19,    7,   76,   76,   76,
       76,   76,   76,   66,   64,   79,    0,    0,   71,   77,

       70,   70,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   79,    0,    0,    0,
       69,   69,    0,   70,    0,   70,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   27,    8,   76,   76,   76,
       76,   76,   76,    0,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   79,    0,    0,    0,    0,   69,    0,   69,
        0,   70,   70,   70,   70,   76,   76,   76,   76,   76,

       76,   76,   76,   76,   76,   76,    3,   76,   76,   76,
       76,   76,   76,   76,    0,   76,   76,   76,    9,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,    0,    0,    0,    0,
       69,   69,   69,   69,    0,   70,   70,   70,    0,   70,
       76,   76,   76,   76,   76,   76,   76,   22,   76,   76,
       76,   76,   28,   76,   76,   76,   76,   76,   76,   76,
        0,    0,   76,   76,   76,   76,   20,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,    0,    0,    0,   69,   69,   69,    0,   69,

        0,    0,   70,   70,   70,   70,   76,    5,   76,   76,
       76,   76,   76,   44,   42,   76,   76,   76,   76,   76,
       76,   76,   76,   76,    0,    0,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       37,   76,   76,   76,   76,    0,    0,    0,    0,    0,
       69,   69,   69,   69,    0,   70,   70,   70,    0,   70,
       76,   76,   76,   76,   76,   76,   76,   76,   43,   76,
       76,   76,   76,   33,   76,   12,   13,   76,    0,    0,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   14,    0,    0,

        0,   69,   69,   69,    0,   69,   74,   70,   70,   70,
       70,   76,   76,   76,   76,   76,   76,   76,   76,   41,
       76,   76,   76,   11,   76,    0,    0,   76,   76,    4,
       76,   76,   76,   76,   76,   76,   76,   76,   10,   76,
       24,   76,   76,   76,    0,    0,    0,   73,   69,   69,
       69,   69,   70,   70,   70,    0,   70,   76,   76,   76,
       76,   76,   76,   76,   21,   76,   76,   76,   76,    0,
        0,   30,   29,   23,   76,   76,   76,   76,   76,   76,
       26,   25,   76,   76,   76,   76,    0,    0,   69,   69,
       69,    0,   69,   70,   70,   70,   70,   60,   76,   76,

       76,   76,   51,   76,   76,   76,   47,   76,   32,   31,
       76,   76,   76,   76,   76,   15,   76,   62,   76,   45,
        0,    0,    0,   69,   69,   69,   69,   70,   70,   70,
        0,   70,   76,   76,   49,   76,   52,   59,   76,   76,
       76,   76,   76,   36,   76,   76,   76,    0,    0,   69,
       69,   69,    0,   69,   70,   70,   70,   70,   76,   76,
       76,   76,   48,   76,   76,   76,   76,   34,   76,   76,
        0,    0,    0,   69,   69,   69,   69,   70,   70,   70,
        0,   70,   76,   76,   76,   76,   61,   76,   76,   76,
       76,   17,    0,   68,   71,   69,   69,   69,    0,   69,

       70,   70,   70,   70,   76,   76,   53,   76,   76,   35,
       76,   76,    0,   68,    0,   69,   69,   69,   69,   69,
       70,   70,   70,    0,   70,   76,   76,   54,   76,   76,
       76,   76,   76,   76,   68,   71,   69,    0,   69,   69,
       69,   69,   70,   70,   70,   76,   76,   76,   76,   76,
       76,   16,   39,   76,   68,   69,   69,   69,   69,   70,
       70,   70,   76,   76,   55,   56,   57,   58,   76,   69,
       69,    0,   69,   69,   70,   76,   50,   76,   69,   69,
       70,   76,   76,   69,   69,    0,   46,   38,   69,   69,
       69,   69,    0,   69,   69,   69,   69,    0,   69,   69,

       69,   69,    0,   69,   69,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
        1,    1,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,    1,    1,    1,    1,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    3,    3,    3,    3,    3,    3,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[771] =
    {   0,
        0,    0, 1039, 1038,    0,    0, 1045, 3751, 3751,   72,
       74, 1006,    0, 1003,   71,   71,   34,  986,  134,  183,
      184,  186,  218,  275,   77,   71,   58,   72,   66,  185,
       88,  192,  292,  268,   89,   73, 3751,  995, 3751,  115,
      129,  210, 1001, 3751,    0,  998,  997, 3751,    0,  337,
      981,  258, 3751,    0,  381,    0,  423,  190,    0,  187,
      188,  204,  198,  205,  251,  246,  260,  282,  291,  325,
      288,  288,  281,  279,  983,  283,  335,    0,  357,  347,
      394,  388,  391,  438,    0,    0,    0,  421,  426,  431,
      425,  424,  422, 3751,    0,  492,  399,  953,  536,    0,

      580,  478,  622,  424,  464,  471,  475,  950,  480,  495,
      505,  503,  514,  558,  559,  561,  598,  943,  588,  253,
      628,  942,  597,  616,  624,  629,  626,  941,  616,  629,
      634,  637,  940,  632,  638,  632,  679,  554,  875,  836,
      725,  697,  706,  769,  811,  743,  853,  745,  726,  847,
      740,  773,  784,  845,  776,  844,    0,  790,  791,  808,
      814,  849,  855,  843,  867,  850,  865,  848,  853,  864,
      866,  869,  858,  897,  871,  874,  842,  877,  876,  902,
      892,  841,  926,  828,  826,  825,  952,  963, 1005,  981,
     1023, 1049, 1067, 1093, 1111,  824,  892,  890,  897,  910,

      893,  909,  973, 1106,  996, 1038,    0, 1066, 1092, 1104,
     1109, 1100, 1115, 1103, 1115, 1112, 1123, 1115,    0, 1125,
     1117, 1114, 1109,  835, 1115, 1116, 1131, 1142, 1136, 1129,
     1124, 1132, 1148,  834, 1146, 1161,  791,  790,  789, 1189,
     1203, 1221, 1247, 1265, 1230, 1291,  788, 1303, 1345, 1321,
     1166, 1192, 1240, 1264, 1312,  799, 1309,    0, 1314, 1317,
     1320, 1343,    0, 1335,  798, 1345, 1337, 1356, 1348, 1355,
     1348, 1359, 1352, 1348, 1361, 1350,    0, 1364,  796, 1367,
      795, 1359, 1366, 1362, 1376,  794, 1382, 1378, 1385, 1388,
      793, 1392,  780,  779, 1417, 1439,  778, 1451, 1493, 1469,

     1511, 1537, 1548, 1566, 1592, 1610, 1385,    0, 1454, 1490,
     1511, 1602, 1534,    0, 1554, 1595, 1607, 1608, 1601, 1610,
     1612, 1620, 1621,  761, 1614, 1610, 1628, 1608, 1622, 1610,
     1629, 1630, 1620, 1626,  760, 1645, 1625, 1629, 1631, 1636,
        0, 1656, 1654, 1645, 1647,  747,  746,  745, 1688, 1703,
     1714, 1732, 1758, 1776, 1741, 1802,  744, 1814, 1856, 1832,
     1666, 1659, 1717, 1764, 1765, 1822, 1826, 1834,    0, 1835,
     1842,  755, 1852,    0, 1856,    0,    0, 1853, 1869, 1849,
     1863, 1868, 1867, 1870,  727, 1871, 1864, 1873, 1875, 1871,
     1876, 1870, 1884, 1886, 1883, 1902, 1893,    0,  712,  658,

     1928, 1947,  656, 1959, 2001, 1977, 1986, 2045, 2019, 2089,
     2063, 1898,  667, 1985, 1997, 2052, 2056, 2070, 2080,    0,
     2079, 2087, 2097,    0, 2084, 2094, 2099, 2091, 2088,    0,
     2089, 2096, 2097, 2097, 2093, 2103, 2099, 2096,    0, 2119,
        0, 2105, 2137, 2138,  647,  646,  645, 2159, 2181, 2199,
     2225, 2243, 2269,  644, 2281, 2323, 2299, 2126, 2154, 2187,
     2240, 2301, 2300, 2297,    0, 2306, 2308, 2329, 2330, 2322,
     2319,    0,    0,    0, 2329, 2334, 2335, 2332, 2320, 2325,
        0,    0,  617, 2331, 2325, 2343,  602,  601, 2384,  600,
     2396, 2438, 2414, 2482, 2456, 2526, 2500,    0, 2334,  611,

     2416,  610,    0, 2424, 2478, 2503,    0, 2502, 3751, 3751,
     2529, 2518, 2530, 2518, 2534,    0, 2526,    0, 2532,    0,
      597,  595,  594, 2579, 2553, 2623, 2597, 2641,  593, 2667,
     2709, 2685, 2537, 2574,    0, 2703,    0,    0, 2600, 2640,
     2686, 2670, 2692,    0, 2691, 2705, 2708,  592,  591, 2734,
      590, 2760, 2802, 2778, 2846, 2820, 2890, 2864,  601, 2719,
     2780, 2794,    0, 2830, 2851, 2867, 2879,    0,  572, 2895,
      559,  558,  557, 2938, 2912, 2982, 2956, 3000,  556, 3026,
     3068, 3044, 2884, 2926,  559, 2963,    0, 2999, 3031, 3041,
     3033,    0,  554,  516,    0, 3089,  515, 3112, 3154, 3130,

     3198, 3172, 3242, 3216, 3063, 3128,    0,  318, 3141,    0,
     3191, 3208,  514,  513,  512,  511, 3286, 3261, 3330, 3304,
     3348,  509, 3374,    0, 3392, 3251, 3289,    0,  213,  509,
      511, 3307, 3342, 3371,  502, 3751,  501,    0, 3428,  459,
     3440, 3458, 3484, 3502,    0, 3393, 3444,  463,  452,  453,
      454,    0,    0, 3446,  446,  445,  444, 3528, 3546, 3572,
      443,    0, 3497, 3491,    0,    0,    0,    0, 3538,  441,
      405,    0, 3585, 3751,    0, 3530,    0, 3548,  403,  402,
     3751, 3565, 3579,  401,  400,    0,    0,    0,  399,  361,
      360,  359,    0,  358,  357,  356,  354,    0,  353,  351,

      350,  349,    0,  348,  347, 3751, 3634, 3638, 3642, 3646,
     3650, 3654, 3656,  365, 3658, 3660, 3662, 3664, 3666, 3668,
     3670, 3672, 3674, 3676, 3678, 3680, 3682, 3684, 3686, 3688,
     3690, 3692, 3694, 3696, 3698, 3700, 3702, 3704, 3706,  335,
     3708, 3710,  319, 3712, 3714,  282,  278, 3716, 3718,  266,
     3720,  265,  264, 3722, 3724, 3726,  261, 3728, 3730, 3732,
      215, 3734, 3736, 3738,  143, 3740, 3742, 3744,   79, 3746
    } ;

static yyconst flex_int16_t yy_def[771] =
    {   0,
      706,    1,  707,  707,  708,  708,  706,  706,  706,  706,
      706,  709,  710,  711,  706,  706,   16,  706,  706,   19,
       19,   19,   19,   19,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  706,  706,  706,  706,
      706,  706,  709,  706,  710,  711,  706,  706,  712,  706,
      713,   50,  706,  714,  706,   24,   24,   57,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  706,  712,  706,   96,  715,  706,  714,

      706,  101,   57,  103,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  706,  137,  716,  717,
      706,  141,  706,  706,  706,  144,  103,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  706,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  138,  138,  718,  719,  706,  706,  706,  188,
      706,  706,  192,  706,  194,  147,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  706,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  706,  720,  721,  706,
      706,  241,  706,  243,  706,  706,  706,  706,  706,  248,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      706,  706,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  722,  723,  706,  706,  706,  706,  706,  298,

      706,  706,  706,  303,  706,  305,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  706,  706,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  706,  724,  725,  706,  706,
      706,  351,  706,  353,  706,  706,  706,  706,  706,  358,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  706,  706,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  726,  727,

      706,  706,  706,  706,  706,  404,  706,  706,  408,  706,
      410,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  706,  706,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  706,  728,  729,  706,  706,  449,
      706,  451,  706,  706,  706,  706,  455,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  706,
      706,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  730,  731,  706,  706,
      706,  706,  491,  706,  494,  706,  496,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,  706,  706,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      706,  732,  733,  706,  524,  706,  526,  706,  706,  706,
      706,  530,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  734,  735,  706,
      706,  706,  706,  552,  706,  555,  706,  557,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      706,  736,  737,  706,  574,  706,  576,  706,  706,  706,
      706,  580,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  738,  739,  740,  706,  706,  706,  706,  598,

      706,  601,  706,  603,   24,   24,   24,   24,   24,   24,
       24,   24,  706,  741,  706,  742,  706,  617,  706,  619,
      706,  706,  706,  743,  623,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  744,  706,  745,  746,  706,  706,
      706,  641,  706,  643,  747,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  706,  748,  749,  706,  658,  706,
      706,  750,   24,   24,   24,   24,   24,   24,   24,  706,
      751,  752,  706,  706,  753,   24,   24,   24,  754,  755,
      706,   24,   24,  706,  756,  757,   24,   24,  758,  759,
      706,  760,  761,  762,  763,  706,  764,  765,  766,  767,

      706,  768,  769,  770,  706,    0,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706
    } ;

static yyconst flex_int16_t yy_nxt[3826] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   20,   21,   22,   23,   24,   24,
       25,   24,   24,   26,   27,   28,   29,   30,   24,   31,
       32,   33,   34,   35,   36,   24,   24,   24,   19,   20,
       20,   21,   22,   23,   24,   24,   25,   24,   24,   26,
       27,   28,   29,   30,   24,   31,   32,   33,   34,   35,
       36,   24,   24,   24,   40,   41,   42,   41,   48,  706,
       73,  620,   49,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   51,   52,   52,   52,   52,   52,   52,   68,

       53,   71,   74,   77,   69,  706,   73,   72,   75,   93,
       80,   91,   70,   76,   81,   92,   54,   40,   41,   52,
       52,   52,   52,   52,   52,   68,   53,   71,   74,   77,
       69,   42,   41,   72,   75,   93,   80,   91,   70,   76,
       81,   92,   54,   56,   56,  700,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   51,   57,   57,   57,   58,
       57,   57,   56,   59,   56,   56,   56,   56,   56,   60,
       56,   56,   56,   56,   56,   56,   61,   56,   56,   56,
       56,   56,   57,   57,   57,   58,   57,   57,   56,   59,
       56,   56,   56,   56,   56,   60,   56,   56,   56,   56,

       56,   56,   61,   56,   56,   56,   56,   56,   57,   57,
       78,   57,   40,   41,   62,  104,   82,  695,   56,   63,
       64,   56,   83,  105,   79,   56,   65,  648,   56,  106,
      649,   66,  107,   84,   57,   57,   78,   57,  108,  109,
       62,  104,   82,   57,   56,   63,   64,   56,   83,  105,
       79,   56,   65,   56,   56,  106,   67,   66,  107,   84,
       56,  164,  165,  690,  108,  109,  681,  680,  675,   57,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   56,
      662,  110,   67,  111,  657,  112,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,  706,   56,   56,   56,

       56,   56,   56,   89,   56,   85,   86,  110,   90,  111,
       56,  112,  113,  114,   87,  117,  118,   56,  119,  120,
      122,  645,   88,   56,   56,   56,   56,   56,   56,   89,
       56,  628,  629,  630,   90,  631,   56,  616,  113,  114,
       87,  117,  118,   56,  119,  120,  122,  115,   88,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   51,   97,
       97,   97,   97,   97,   97,  116,   53,  100,  703,  703,
      703,  698,  703,  115,  698,  698,  123,  693,  698,  693,
      693,  686,  693,  124,  125,   97,   97,   97,   97,   97,
       97,  116,   53,  101,  101,  101,  101,  101,  101,  101,

      101,  101,  123,  102,  102,  102,  102,  102,  102,  124,
      125,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      686,  686,  672,  686,  672,  126,  672,  127,  128,  102,
      102,  102,  102,  102,  102,  103,  103,  103,  103,  103,
      103,  103,  103,  103,   51,  103,  103,  103,  103,  103,
      103,  126,   59,  127,  128,  131,  132,  133,  134,  135,
      129,  136,  638,  148,  624,  672,  638,  615,  668,  667,
      666,  103,  103,  103,  103,  103,  103,  130,   59,  665,
      599,  131,  132,  133,  134,  135,  129,  136,  706,  148,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  149,

      150,  151,  153,  130,  137,  137,  137,  137,  137,  137,
      137,  137,  137,   51,  138,  138,  138,  138,  138,  138,
      154,   53,  638,  615,  651,  149,  150,  151,  153,  650,
      581,  155,  638,  636,  615,  573,  553,  615,  156,  157,
      138,  138,  138,  138,  138,  138,  154,   53,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  155,  142,  142,
      142,  142,  142,  142,  156,  157,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  573,  607,  531,  595,  573,
      523,  591,  158,  159,  142,  142,  142,  142,  142,  142,
      143,  160,  144,  144,  144,  144,  144,  144,  144,  144,

      144,  145,  146,  146,  146,  146,  146,  146,  158,  159,
      583,  492,  573,  523,  456,   99,  523,  160,  447,  536,
      534,  405,  523,  447,  161,  163,  517,  169,  146,  146,
      146,  146,  146,  146,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  170,  147,  147,  147,  147,  147,  147,
      161,  163,  166,  169,  171,  172,  173,  175,  167,  176,
      177,  178,  180,  181,  182,  359,   99,  447,  348,  170,
      147,  147,  147,  147,  147,  147,  459,  299,  166,  447,
      171,  172,  173,  175,  167,  176,  177,  178,  180,  181,
      182,  183,  183,  183,  183,  183,  183,  183,  183,  183,

       51,  184,  184,  184,  184,  184,  184,  706,   53,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  184,  184,  184,
      184,  184,  184,  348,   53,  187,  432,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  189,  190,  190,  190,
      190,  190,  190,  706,  197,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  422,  249,   99,  348,  239,  389,
      378,  198,  199,  190,  190,  190,  190,  190,  190,  143,
      201,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      145,  193,  193,  193,  193,  193,  193,  198,  199,  189,

      348,  239,  344,  339,  334,  332,  201,  319,  312,  145,
       99,  239,  140,  202,  203,  205,  207,  193,  193,  193,
      193,  193,  193,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  208,  195,  195,  195,  195,  195,  195,  202,
      203,  205,  207,  290,  280,  706,  239,  140,  209,  706,
      236,  231,  215,  206,  204,  210,  200,   99,  208,  195,
      195,  195,  195,  195,  195,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  209,  196,  196,  196,  196,  196,
      196,  210,  211,  212,  213,  214,  218,  219,  220,  221,
      222,  224,  216,  225,  223,  226,  140,  229,  230,  232,

      233,  196,  196,  196,  196,  196,  196,  217,  211,  212,
      213,  214,  218,  219,  220,  221,  222,  224,  216,  225,
      223,  226,  227,  229,  230,  232,  233,  234,  235,  251,
      252,  253,  254,  217,  256,  257,  255,  228,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  706,  227,  179,
      174,  168,  162,  234,  235,  251,  252,  253,  254,  152,
      256,  257,  255,  228,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  187,  140,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  189,  242,  242,  242,  242,  242,
      242,  706,  121,  242,  242,  242,  242,  242,  242,  242,

      242,  242,   99,   46,   47,   44,   94,   55,  258,   47,
       44,  242,  242,  242,  242,  242,  242,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  262,  244,  244,  244,
      244,  244,  244,  245,  258,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  706,   38,   38,  706,  706,  706,
      706,  706,  262,  244,  244,  244,  244,  244,  244,  143,
      706,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      145,  247,  247,  247,  247,  247,  247,  706,  263,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  706,  706,
      706,  706,  706,  706,  706,  706,  264,  247,  247,  247,

      247,  247,  247,  143,  263,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  249,  250,  250,  250,  250,  250,
      250,  706,  264,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  259,  265,  266,  267,  268,  269,  270,  260,
      271,  250,  250,  250,  250,  250,  250,  261,  273,  274,
      275,  276,  277,  278,  279,  272,  281,  282,  259,  265,
      266,  267,  268,  269,  270,  260,  271,  283,  284,  285,
      286,  287,  288,  261,  273,  274,  275,  276,  277,  278,
      279,  272,  281,  282,  289,  291,  292,  706,  307,  706,
      706,  706,  706,  283,  284,  285,  286,  287,  288,  295,

      706,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      289,  291,  292,  187,  307,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  189,  297,  297,  297,  297,  297,
      297,  706,  308,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  297,  297,  297,  297,  297,  297,  187,  308,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  299,  300,
      300,  300,  300,  300,  300,  706,  309,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  706,  706,  310,  706,
      706,  706,  706,  706,  706,  300,  300,  300,  300,  300,

      300,  143,  309,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  145,  143,  310,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  249,  304,  304,  304,  304,  304,
      304,  706,  706,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  706,  706,  706,  706,  706,  311,  313,  314,
      315,  304,  304,  304,  304,  304,  304,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  316,  306,  306,  306,
      306,  306,  306,  311,  313,  314,  315,  317,  318,  320,
      321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
      331,  333,  316,  306,  306,  306,  306,  306,  306,  335,

      336,  337,  338,  317,  318,  320,  321,  322,  323,  324,
      325,  326,  327,  328,  329,  330,  331,  333,  340,  341,
      342,  343,  345,  706,  361,  335,  336,  337,  338,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  706,  706,
      706,  706,  706,  706,  340,  341,  342,  343,  345,  187,
      361,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      189,  187,  706,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  299,  352,  352,  352,  352,  352,  352,  706,
      706,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      706,  706,  706,  706,  706,  706,  362,  706,  706,  352,

      352,  352,  352,  352,  352,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  363,  354,  354,  354,  354,  354,
      354,  355,  362,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  706,  364,  706,  706,  706,  706,  706,  706,
      363,  354,  354,  354,  354,  354,  354,  143,  706,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  143,  364,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  249,
      357,  357,  357,  357,  357,  357,  706,  368,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  706,  706,  706,
      706,  706,  706,  706,  706,  369,  357,  357,  357,  357,

      357,  357,  143,  368,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  359,  360,  360,  360,  360,  360,  360,
      706,  369,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  365,  370,  371,  372,  373,  374,  366,  375,  367,
      360,  360,  360,  360,  360,  360,  376,  377,  379,  380,
      381,  382,  383,  384,  385,  386,  387,  365,  370,  371,
      372,  373,  374,  366,  375,  367,  388,  390,  391,  392,
      393,  394,  376,  377,  379,  380,  381,  382,  383,  384,
      385,  386,  387,  395,  396,  397,  398,  706,  412,  706,
      706,  706,  388,  390,  391,  392,  393,  394,  401,  413,

      349,  349,  349,  349,  349,  349,  349,  349,  349,  395,
      396,  397,  398,  187,  412,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  187,  413,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  299,  403,  403,  403,  403,
      403,  403,  706,  414,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  403,  403,  403,  403,  403,  403,  187,  414,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  405,
      406,  406,  406,  406,  406,  406,  706,  415,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  706,  706,  416,

      706,  706,  706,  706,  706,  706,  406,  406,  406,  406,
      406,  406,  143,  415,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  249,  143,  416,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  359,  409,  409,  409,  409,
      409,  409,  706,  706,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  706,  706,  706,  706,  706,  417,  418,
      419,  420,  409,  409,  409,  409,  409,  409,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  421,  411,  411,
      411,  411,  411,  411,  417,  418,  419,  420,  423,  424,
      425,  426,  427,  428,  429,  430,  431,  433,  434,  435,

      436,  437,  438,  421,  411,  411,  411,  411,  411,  411,
      439,  440,  441,  442,  423,  424,  425,  426,  427,  428,
      429,  430,  431,  433,  434,  435,  436,  437,  438,  443,
      444,  706,  458,  706,  706,  706,  439,  440,  441,  442,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  706,
      706,  706,  706,  706,  706,  443,  444,  187,  458,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  299,  187,
      706,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      405,  450,  450,  450,  450,  450,  450,  706,  706,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  407,  407,

      407,  407,  407,  407,  407,  407,  407,  450,  450,  450,
      450,  450,  450,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  460,  452,  452,  452,  452,  452,  452,  706,
      461,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      706,  706,  706,  706,  706,  706,  706,  706,  460,  452,
      452,  452,  452,  452,  452,  143,  461,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  359,  454,  454,  454,
      454,  454,  454,  706,  462,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  706,  706,  706,  706,  706,  706,
      706,  463,  464,  454,  454,  454,  454,  454,  454,  143,

      462,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      456,  457,  457,  457,  457,  457,  457,  463,  464,  465,
      466,  467,  468,  469,  470,  471,  472,  473,  474,  475,
      477,  478,  479,  480,  481,  482,  476,  457,  457,  457,
      457,  457,  457,  483,  484,  465,  466,  467,  468,  469,
      470,  471,  472,  473,  474,  475,  477,  478,  479,  480,
      481,  482,  476,  485,  486,  706,  498,  706,  706,  483,
      484,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      706,  706,  706,  706,  499,  706,  706,  706,  706,  485,
      486,  187,  498,  489,  489,  489,  489,  489,  489,  489,

      489,  489,  405,  490,  490,  490,  490,  490,  490,  706,
      499,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      706,  706,  706,  706,  706,  706,  706,  706,  500,  490,
      490,  490,  490,  490,  490,  187,  706,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  492,  493,  493,  493,
      493,  493,  493,  706,  500,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  706,  706,  501,  706,  706,  706,
      706,  706,  706,  493,  493,  493,  493,  493,  493,  143,
      706,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      359,  143,  501,  494,  494,  494,  494,  494,  494,  494,

      494,  494,  456,  495,  495,  495,  495,  495,  495,  706,
      706,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      706,  706,  706,  706,  706,  502,  503,  504,  505,  495,
      495,  495,  495,  495,  495,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  506,  497,  497,  497,  497,  497,
      497,  502,  503,  504,  505,  507,  508,  509,  510,  511,
      512,  513,  514,  515,  516,  518,  519,  520,  706,  533,
      506,  497,  497,  497,  497,  497,  497,  706,  706,  706,
      706,  507,  508,  509,  510,  511,  512,  513,  514,  515,
      516,  518,  519,  520,  187,  533,  350,  350,  350,  350,

      350,  350,  350,  350,  350,  405,  187,  706,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  492,  525,  525,
      525,  525,  525,  525,  706,  706,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  706,  706,  706,  706,  706,
      706,  535,  706,  706,  525,  525,  525,  525,  525,  525,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  537,
      527,  527,  527,  527,  527,  527,  706,  535,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  706,  706,  706,
      706,  706,  706,  706,  706,  537,  527,  527,  527,  527,
      527,  527,  143,  706,  528,  528,  528,  528,  528,  528,

      528,  528,  528,  456,  529,  529,  529,  529,  529,  529,
      706,  538,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  706,  706,  706,  706,  706,  706,  706,  539,  540,
      529,  529,  529,  529,  529,  529,  143,  538,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  531,  532,  532,
      532,  532,  532,  532,  539,  540,  541,  542,  543,  544,
      545,  546,  547,  706,  559,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  532,  532,  532,  532,  532,  532,
      706,  706,  541,  542,  543,  544,  545,  546,  547,  187,
      559,  550,  550,  550,  550,  550,  550,  550,  550,  550,

      492,  551,  551,  551,  551,  551,  551,  706,  560,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  706,  706,
      706,  706,  706,  706,  706,  706,  563,  551,  551,  551,
      551,  551,  551,  187,  560,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  553,  554,  554,  554,  554,  554,
      554,  143,  563,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  456,  706,  706,  706,  706,  706,  706,  706,
      564,  554,  554,  554,  554,  554,  554,  143,  706,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  531,  556,
      556,  556,  556,  556,  556,  706,  564,  556,  556,  556,

      556,  556,  556,  556,  556,  556,  706,  706,  706,  706,
      706,  706,  565,  566,  567,  556,  556,  556,  556,  556,
      556,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      568,  558,  558,  558,  558,  558,  558,  561,  565,  566,
      567,  569,  570,  562,  187,  584,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  492,  568,  558,  558,  558,
      558,  558,  558,  561,  706,  706,  706,  569,  570,  562,
      187,  584,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  553,  575,  575,  575,  575,  575,  575,  706,  706,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  706,

      706,  706,  706,  706,  706,  585,  706,  706,  575,  575,
      575,  575,  575,  575,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  586,  577,  577,  577,  577,  577,  577,
      706,  585,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  706,  706,  706,  706,  706,  706,  706,  706,  586,
      577,  577,  577,  577,  577,  577,  143,  706,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  531,  579,  579,
      579,  579,  579,  579,  706,  587,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  706,  706,  706,  706,  706,
      706,  706,  588,  589,  579,  579,  579,  579,  579,  579,

      143,  587,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  581,  582,  582,  582,  582,  582,  582,  588,  589,
      590,  592,  706,  605,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  706,  706,  706,  706,  706,  582,  582,
      582,  582,  582,  582,  706,  706,  590,  592,  187,  605,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  553,
      597,  597,  597,  597,  597,  597,  706,  606,  600,  600,
      600,  600,  600,  600,  600,  600,  600,  706,  706,  706,
      706,  706,  706,  706,  706,  608,  597,  597,  597,  597,
      597,  597,  187,  606,  598,  598,  598,  598,  598,  598,

      598,  598,  598,  599,  600,  600,  600,  600,  600,  600,
      143,  608,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  531,  706,  706,  706,  706,  706,  706,  706,  609,
      600,  600,  600,  600,  600,  600,  143,  706,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  581,  602,  602,
      602,  602,  602,  602,  706,  609,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  706,  706,  706,  706,  706,
      610,  611,  612,  706,  602,  602,  602,  602,  602,  602,
      603,  603,  603,  603,  603,  603,  603,  603,  603,  626,
      604,  604,  604,  604,  604,  604,  610,  611,  612,  187,

      706,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      553,  706,  706,  706,  706,  626,  604,  604,  604,  604,
      604,  604,  187,  706,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  599,  618,  618,  618,  618,  618,  618,
      706,  706,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  706,  706,  706,  706,  706,  706,  627,  706,  706,
      618,  618,  618,  618,  618,  618,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  632,  620,  620,  620,  620,
      620,  620,  706,  627,  622,  622,  622,  622,  622,  622,
      622,  622,  622,  706,  706,  706,  706,  706,  706,  706,

      706,  632,  620,  620,  620,  620,  620,  620,  143,  706,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  581,
      622,  622,  622,  622,  622,  622,  706,  633,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  706,  706,  706,
      706,  706,  706,  706,  634,  706,  622,  622,  622,  622,
      622,  622,  143,  633,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  624,  625,  625,  625,  625,  625,  625,
      634,  706,  706,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  706,  706,  706,  706,  706,  706,  706,  646,
      625,  625,  625,  625,  625,  625,  187,  706,  639,  639,

      639,  639,  639,  639,  639,  639,  639,  599,  640,  640,
      640,  640,  640,  640,  706,  646,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  647,  706,  706,  706,  706,
      706,  706,  706,  652,  640,  640,  640,  640,  640,  640,
      187,  706,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  647,  642,  642,  642,  642,  642,  642,  143,  652,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  581,
      706,  706,  706,  706,  706,  706,  706,  653,  642,  642,
      642,  642,  642,  642,  143,  706,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  624,  644,  644,  644,  644,

      644,  644,  706,  653,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  654,  706,  706,  706,  706,  706,  706,
      706,  706,  644,  644,  644,  644,  644,  644,  706,  706,
      706,  706,  706,  706,  706,  663,  706,  706,  187,  654,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  599,
      187,  706,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  663,  659,  659,  659,  659,  659,  659,  706,  664,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  706,
      706,  706,  706,  706,  706,  706,  706,  669,  659,  659,
      659,  659,  659,  659,  143,  664,  660,  660,  660,  660,

      660,  660,  660,  660,  660,  624,  661,  661,  661,  661,
      661,  661,  706,  669,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  676,  706,  706,  706,  706,  706,  706,
      706,  677,  661,  661,  661,  661,  661,  661,  187,  706,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  676,
      674,  674,  674,  674,  674,  674,  706,  677,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  706,  678,  706,
      682,  706,  706,  706,  706,  706,  674,  674,  674,  674,
      674,  674,  143,  683,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  624,  678,  187,  682,  350,  350,  350,

      350,  350,  350,  350,  350,  350,  687,  688,  706,  683,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  687,  688,   37,   37,   37,   37,   39,   39,
       39,   39,   43,   43,   43,   43,   45,  706,   45,   45,
       46,   46,   46,   46,   95,  706,   95,   95,   98,   98,
      139,  139,  185,  185,  186,  186,  237,  237,  238,  238,
      293,  293,  294,  294,  346,  346,  347,  347,  399,  399,
      400,  400,  445,  445,  446,  446,  487,  487,  488,  488,
      521,  521,  522,  522,  548,  548,  549,  549,  571,  571,

      572,  572,  593,  593,  594,  594,  613,  613,  614,  614,
      635,  635,  637,  637,  655,  655,  656,  656,  670,  670,
      671,  671,  679,  679,  684,  684,  685,  685,  689,  689,
      691,  691,  692,  692,  694,  694,  696,  696,  697,  697,
      699,  699,  701,  701,  702,  702,  704,  704,  705,  705,
        7,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,

      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706
    } ;

static yyconst flex_int16_t yy_chk[3826] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   10,   10,   11,   11,   15,   17,
       27,  769,   15,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   25,

       16,   26,   28,   29,   25,   17,   27,   26,   28,   36,
       31,   35,   25,   28,   31,   35,   16,   40,   40,   16,
       16,   16,   16,   16,   16,   25,   16,   26,   28,   29,
       25,   41,   41,   26,   28,   36,   31,   35,   25,   28,
       31,   35,   16,   19,   19,  765,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   20,   21,
       30,   22,   42,   42,   21,   58,   32,  761,   20,   21,
       21,   22,   32,   60,   30,   20,   21,  629,   22,   61,
      629,   22,   62,   32,   20,   21,   30,   22,   63,   64,
       21,   58,   32,   23,   20,   21,   21,   22,   32,   60,
       30,   20,   21,   23,   22,   61,   23,   22,   62,   32,
       23,  120,  120,  757,   63,   64,  753,  752,  750,   23,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   23,
      747,   65,   23,   66,  746,   67,   23,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   34,   24,   33,   33,   65,   34,   66,
       24,   67,   68,   69,   33,   71,   72,   24,   73,   74,
       76,  743,   33,   24,   24,   24,   24,   24,   24,   34,
       24,  608,  608,  608,   34,  608,   24,  740,   68,   69,
       33,   71,   72,   24,   73,   74,   76,   70,   33,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   70,   50,  714,  705,  704,
      702,  701,  700,   70,  699,  697,   77,  696,  695,  694,
      692,  691,  690,   79,   80,   50,   50,   50,   50,   50,
       50,   70,   50,   55,   55,   55,   55,   55,   55,   55,

       55,   55,   77,   55,   55,   55,   55,   55,   55,   79,
       80,   97,   97,   97,   97,   97,   97,   97,   97,   97,
      689,  685,  684,  680,  679,   81,  671,   82,   83,   55,
       55,   55,   55,   55,   55,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   81,   57,   82,   83,   88,   89,   90,   91,   92,
       84,   93,  670,  104,  661,  657,  656,  655,  651,  650,
      649,   57,   57,   57,   57,   57,   57,   84,   57,  648,
      640,   88,   89,   90,   91,   92,   84,   93,  102,  104,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  105,

      106,  107,  109,   84,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
      110,   96,  637,  635,  631,  105,  106,  107,  109,  630,
      622,  111,  616,  615,  614,  613,  597,  594,  112,  113,
       96,   96,   96,   96,   96,   96,  110,   96,   99,   99,
       99,   99,   99,   99,   99,   99,   99,  111,   99,   99,
       99,   99,   99,   99,  112,  113,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  593,  585,  579,  573,  572,
      571,  569,  114,  115,   99,   99,   99,   99,   99,   99,
      101,  116,  101,  101,  101,  101,  101,  101,  101,  101,

      101,  101,  101,  101,  101,  101,  101,  101,  114,  115,
      559,  551,  549,  548,  529,  523,  522,  116,  521,  502,
      500,  490,  488,  487,  117,  119,  483,  123,  101,  101,
      101,  101,  101,  101,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  124,  103,  103,  103,  103,  103,  103,
      117,  119,  121,  123,  125,  126,  127,  129,  121,  130,
      131,  132,  134,  135,  136,  454,  447,  446,  445,  124,
      103,  103,  103,  103,  103,  103,  413,  403,  121,  400,
      125,  126,  127,  129,  121,  130,  131,  132,  134,  135,
      136,  137,  137,  137,  137,  137,  137,  137,  137,  137,

      137,  137,  137,  137,  137,  137,  137,  142,  137,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  137,  137,  137,
      137,  137,  137,  399,  137,  141,  385,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  146,  148,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  372,  357,  348,  347,  346,  335,
      324,  148,  149,  141,  141,  141,  141,  141,  141,  144,
      151,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  148,  149,  297,

      294,  293,  291,  286,  281,  279,  151,  265,  256,  247,
      239,  238,  237,  152,  153,  155,  158,  144,  144,  144,
      144,  144,  144,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  159,  145,  145,  145,  145,  145,  145,  152,
      153,  155,  158,  234,  224,  196,  186,  185,  160,  184,
      182,  177,  164,  156,  154,  161,  150,  140,  159,  145,
      145,  145,  145,  145,  145,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  160,  147,  147,  147,  147,  147,
      147,  161,  162,  162,  162,  163,  166,  167,  168,  169,
      170,  171,  165,  172,  170,  173,  139,  175,  176,  178,

      179,  147,  147,  147,  147,  147,  147,  165,  162,  162,
      162,  163,  166,  167,  168,  169,  170,  171,  165,  172,
      170,  173,  174,  175,  176,  178,  179,  180,  181,  197,
      198,  199,  200,  165,  201,  202,  200,  174,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  174,  133,
      128,  122,  118,  180,  181,  197,  198,  199,  200,  108,
      201,  202,  200,  174,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  188,   98,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  190,   75,  190,  190,  190,  190,  190,  190,  190,

      190,  190,   51,   47,   46,   43,   38,   18,  203,   14,
       12,  188,  188,  188,  188,  188,  188,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  205,  189,  189,  189,
      189,  189,  189,  191,  203,  191,  191,  191,  191,  191,
      191,  191,  191,  191,    7,    4,    3,    0,    0,    0,
        0,    0,  205,  189,  189,  189,  189,  189,  189,  192,
        0,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  193,  206,  193,
      193,  193,  193,  193,  193,  193,  193,  193,    0,    0,
        0,    0,    0,    0,    0,    0,  208,  192,  192,  192,

      192,  192,  192,  194,  206,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  195,  208,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  204,  209,  210,  211,  212,  213,  214,  204,
      215,  194,  194,  194,  194,  194,  194,  204,  216,  217,
      218,  220,  221,  222,  223,  215,  225,  226,  204,  209,
      210,  211,  212,  213,  214,  204,  215,  227,  228,  229,
      230,  231,  232,  204,  216,  217,  218,  220,  221,  222,
      223,  215,  225,  226,  233,  235,  236,    0,  251,    0,
        0,    0,    0,  227,  228,  229,  230,  231,  232,  240,

        0,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      233,  235,  236,  241,  251,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  242,  252,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  241,  241,  241,  241,  241,  241,  243,  252,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  244,  253,  244,  244,  244,
      244,  244,  244,  244,  244,  244,    0,    0,  254,    0,
        0,    0,    0,    0,    0,  243,  243,  243,  243,  243,

      243,  246,  253,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  248,  254,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  250,    0,  250,  250,  250,  250,  250,  250,  250,
      250,  250,    0,    0,    0,    0,    0,  255,  257,  259,
      260,  248,  248,  248,  248,  248,  248,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  261,  249,  249,  249,
      249,  249,  249,  255,  257,  259,  260,  262,  264,  266,
      267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
      278,  280,  261,  249,  249,  249,  249,  249,  249,  282,

      283,  284,  285,  262,  264,  266,  267,  268,  269,  270,
      271,  272,  273,  274,  275,  276,  278,  280,  287,  288,
      289,  290,  292,    0,  307,  282,  283,  284,  285,  295,
      295,  295,  295,  295,  295,  295,  295,  295,    0,    0,
        0,    0,    0,    0,  287,  288,  289,  290,  292,  296,
      307,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  298,    0,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  300,
        0,  300,  300,  300,  300,  300,  300,  300,  300,  300,
        0,    0,    0,    0,    0,    0,  309,    0,    0,  298,

      298,  298,  298,  298,  298,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  310,  299,  299,  299,  299,  299,
      299,  301,  309,  301,  301,  301,  301,  301,  301,  301,
      301,  301,    0,  311,    0,    0,    0,    0,    0,    0,
      310,  299,  299,  299,  299,  299,  299,  302,    0,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  303,  311,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  304,  313,  304,  304,
      304,  304,  304,  304,  304,  304,  304,    0,    0,    0,
        0,    0,    0,    0,    0,  315,  303,  303,  303,  303,

      303,  303,  305,  313,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      306,  315,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  312,  316,  317,  318,  319,  320,  312,  321,  312,
      305,  305,  305,  305,  305,  305,  322,  323,  325,  326,
      327,  328,  329,  330,  331,  332,  333,  312,  316,  317,
      318,  319,  320,  312,  321,  312,  334,  336,  337,  338,
      339,  340,  322,  323,  325,  326,  327,  328,  329,  330,
      331,  332,  333,  342,  343,  344,  345,    0,  361,    0,
        0,    0,  334,  336,  337,  338,  339,  340,  349,  362,

      349,  349,  349,  349,  349,  349,  349,  349,  349,  342,
      343,  344,  345,  350,  361,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  351,  362,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  352,  363,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  351,  351,  351,  351,  351,  351,  353,  363,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  354,  364,  354,  354,
      354,  354,  354,  354,  354,  354,  354,    0,    0,  365,

        0,    0,    0,    0,    0,    0,  353,  353,  353,  353,
      353,  353,  356,  364,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  358,  365,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  360,    0,  360,  360,  360,  360,  360,  360,
      360,  360,  360,    0,    0,    0,    0,    0,  366,  367,
      368,  370,  358,  358,  358,  358,  358,  358,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  371,  359,  359,
      359,  359,  359,  359,  366,  367,  368,  370,  373,  375,
      378,  379,  380,  381,  382,  383,  384,  386,  387,  388,

      389,  390,  391,  371,  359,  359,  359,  359,  359,  359,
      392,  393,  394,  395,  373,  375,  378,  379,  380,  381,
      382,  383,  384,  386,  387,  388,  389,  390,  391,  396,
      397,    0,  412,    0,    0,    0,  392,  393,  394,  395,
      401,  401,  401,  401,  401,  401,  401,  401,  401,    0,
        0,    0,    0,    0,    0,  396,  397,  402,  412,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  404,
        0,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  406,    0,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  407,  407,

      407,  407,  407,  407,  407,  407,  407,  404,  404,  404,
      404,  404,  404,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  414,  405,  405,  405,  405,  405,  405,  409,
      415,  409,  409,  409,  409,  409,  409,  409,  409,  409,
        0,    0,    0,    0,    0,    0,    0,    0,  414,  405,
      405,  405,  405,  405,  405,  408,  415,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  411,  416,  411,  411,  411,  411,  411,
      411,  411,  411,  411,    0,    0,    0,    0,    0,    0,
        0,  417,  418,  408,  408,  408,  408,  408,  408,  410,

      416,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  417,  418,  419,
      421,  422,  423,  425,  426,  427,  428,  429,  431,  432,
      433,  434,  435,  436,  437,  438,  432,  410,  410,  410,
      410,  410,  410,  440,  442,  419,  421,  422,  423,  425,
      426,  427,  428,  429,  431,  432,  433,  434,  435,  436,
      437,  438,  432,  443,  444,    0,  458,    0,    0,  440,
      442,  448,  448,  448,  448,  448,  448,  448,  448,  448,
        0,    0,    0,    0,  459,    0,    0,    0,    0,  443,
      444,  449,  458,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  449,  449,  449,  449,  450,
      459,  450,  450,  450,  450,  450,  450,  450,  450,  450,
        0,    0,    0,    0,    0,    0,    0,    0,  460,  449,
      449,  449,  449,  449,  449,  451,    0,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  452,  460,  452,  452,  452,  452,  452,
      452,  452,  452,  452,    0,    0,  461,    0,    0,    0,
        0,    0,    0,  451,  451,  451,  451,  451,  451,  453,
        0,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  455,  461,  455,  455,  455,  455,  455,  455,  455,

      455,  455,  455,  455,  455,  455,  455,  455,  455,  457,
        0,  457,  457,  457,  457,  457,  457,  457,  457,  457,
        0,    0,    0,    0,    0,  462,  463,  464,  466,  455,
      455,  455,  455,  455,  455,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  467,  456,  456,  456,  456,  456,
      456,  462,  463,  464,  466,  468,  469,  470,  471,  475,
      476,  477,  478,  479,  480,  484,  485,  486,    0,  499,
      467,  456,  456,  456,  456,  456,  456,    0,    0,    0,
        0,  468,  469,  470,  471,  475,  476,  477,  478,  479,
      480,  484,  485,  486,  489,  499,  489,  489,  489,  489,

      489,  489,  489,  489,  489,  489,  491,    0,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  493,    0,  493,  493,  493,  493,
      493,  493,  493,  493,  493,    0,    0,    0,    0,    0,
        0,  501,    0,    0,  491,  491,  491,  491,  491,  491,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  504,
      492,  492,  492,  492,  492,  492,  495,  501,  495,  495,
      495,  495,  495,  495,  495,  495,  495,    0,    0,    0,
        0,    0,    0,    0,    0,  504,  492,  492,  492,  492,
      492,  492,  494,    0,  494,  494,  494,  494,  494,  494,

      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      497,  505,  497,  497,  497,  497,  497,  497,  497,  497,
      497,    0,    0,    0,    0,    0,    0,    0,  506,  508,
      494,  494,  494,  494,  494,  494,  496,  505,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  506,  508,  511,  512,  513,  514,
      515,  517,  519,  525,  533,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  496,  496,  496,  496,  496,  496,
        0,    0,  511,  512,  513,  514,  515,  517,  519,  524,
      533,  524,  524,  524,  524,  524,  524,  524,  524,  524,

      524,  524,  524,  524,  524,  524,  524,  527,  534,  527,
      527,  527,  527,  527,  527,  527,  527,  527,    0,    0,
        0,    0,    0,    0,    0,    0,  539,  524,  524,  524,
      524,  524,  524,  526,  534,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  528,  539,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,    0,    0,    0,    0,    0,    0,    0,
      540,  526,  526,  526,  526,  526,  526,  530,    0,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  532,  540,  532,  532,  532,

      532,  532,  532,  532,  532,  532,    0,    0,    0,    0,
        0,    0,  541,  542,  543,  530,  530,  530,  530,  530,
      530,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      545,  531,  531,  531,  531,  531,  531,  536,  541,  542,
      543,  546,  547,  536,  550,  560,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  545,  531,  531,  531,
      531,  531,  531,  536,    0,    0,    0,  546,  547,  536,
      552,  560,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  554,    0,
      554,  554,  554,  554,  554,  554,  554,  554,  554,    0,

        0,    0,    0,    0,    0,  561,    0,    0,  552,  552,
      552,  552,  552,  552,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  562,  553,  553,  553,  553,  553,  553,
      556,  561,  556,  556,  556,  556,  556,  556,  556,  556,
      556,    0,    0,    0,    0,    0,    0,    0,    0,  562,
      553,  553,  553,  553,  553,  553,  555,    0,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  558,  564,  558,  558,  558,  558,
      558,  558,  558,  558,  558,    0,    0,    0,    0,    0,
        0,    0,  565,  566,  555,  555,  555,  555,  555,  555,

      557,  564,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  565,  566,
      567,  570,  575,  583,  575,  575,  575,  575,  575,  575,
      575,  575,  575,    0,    0,    0,    0,    0,  557,  557,
      557,  557,  557,  557,    0,    0,  567,  570,  574,  583,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  577,  584,  577,  577,
      577,  577,  577,  577,  577,  577,  577,    0,    0,    0,
        0,    0,    0,    0,    0,  586,  574,  574,  574,  574,
      574,  574,  576,  584,  576,  576,  576,  576,  576,  576,

      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      578,  586,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,    0,    0,    0,    0,    0,    0,    0,  588,
      576,  576,  576,  576,  576,  576,  580,    0,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  582,  588,  582,  582,  582,  582,
      582,  582,  582,  582,  582,    0,    0,    0,    0,    0,
      589,  590,  591,    0,  580,  580,  580,  580,  580,  580,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  605,
      581,  581,  581,  581,  581,  581,  589,  590,  591,  596,

        0,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,    0,    0,    0,    0,  605,  581,  581,  581,  581,
      581,  581,  598,    0,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      600,    0,  600,  600,  600,  600,  600,  600,  600,  600,
      600,    0,    0,    0,    0,    0,    0,  606,    0,    0,
      598,  598,  598,  598,  598,  598,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  609,  599,  599,  599,  599,
      599,  599,  602,  606,  602,  602,  602,  602,  602,  602,
      602,  602,  602,    0,    0,    0,    0,    0,    0,    0,

        0,  609,  599,  599,  599,  599,  599,  599,  601,    0,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  604,  611,  604,  604,
      604,  604,  604,  604,  604,  604,  604,    0,    0,    0,
        0,    0,    0,    0,  612,    0,  601,  601,  601,  601,
      601,  601,  603,  611,  603,  603,  603,  603,  603,  603,
      603,  603,  603,  603,  603,  603,  603,  603,  603,  603,
      612,  618,    0,  618,  618,  618,  618,  618,  618,  618,
      618,  618,    0,    0,    0,    0,    0,    0,    0,  626,
      603,  603,  603,  603,  603,  603,  617,    0,  617,  617,

      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  620,  626,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  627,    0,    0,    0,    0,
        0,    0,    0,  632,  617,  617,  617,  617,  617,  617,
      619,    0,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  627,  619,  619,  619,  619,  619,  619,  621,  632,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
        0,    0,    0,    0,    0,    0,    0,  633,  619,  619,
      619,  619,  619,  619,  623,    0,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,

      623,  623,  625,  633,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  634,    0,    0,    0,    0,    0,    0,
        0,    0,  623,  623,  623,  623,  623,  623,    0,    0,
        0,    0,    0,    0,    0,  646,    0,    0,  639,  634,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      641,    0,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  646,  641,  641,  641,  641,  641,  641,  642,  647,
      642,  642,  642,  642,  642,  642,  642,  642,  642,    0,
        0,    0,    0,    0,    0,    0,    0,  654,  641,  641,
      641,  641,  641,  641,  643,  647,  643,  643,  643,  643,

      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  644,  654,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  663,    0,    0,    0,    0,    0,    0,
        0,  664,  643,  643,  643,  643,  643,  643,  658,    0,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  663,
      658,  658,  658,  658,  658,  658,  659,  664,  659,  659,
      659,  659,  659,  659,  659,  659,  659,    0,  669,    0,
      676,    0,    0,    0,    0,    0,  658,  658,  658,  658,
      658,  658,  660,  678,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  669,  673,  676,  673,  673,  673,

      673,  673,  673,  673,  673,  673,  682,  683,    0,  678,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  682,  683,  707,  707,  707,  707,  708,  708,
      708,  708,  709,  709,  709,  709,  710,    0,  710,  710,
      711,  711,  711,  711,  712,    0,  712,  712,  713,  713,
      715,  715,  716,  716,  717,  717,  718,  718,  719,  719,
      720,  720,  721,  721,  722,  722,  723,  723,  724,  724,
      725,  725,  726,  726,  727,  727,  728,  728,  729,  729,
      730,  730,  731,  731,  732,  732,  733,  733,  734,  734,

      735,  735,  736,  736,  737,  737,  738,  738,  739,  739,
      741,  741,  742,  742,  744,  744,  745,  745,  748,  748,
      749,  749,  751,  751,  754,  754,  755,  755,  756,  756,
      758,  758,  759,  759,  760,  760,  762,  762,  763,  763,
      764,  764,  766,  766,  767,  767,  768,  768,  770,  770,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,

      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[82] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
    0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_ClntParser_stype yylval;
}

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 707 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3751 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
{ return ClntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
{ return ClntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
{ return ClntParser::ADDRES_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
{ return ClntParser::IA_;}
	YY_BREAK
case 7:
YY_RULE_SETUP
{ return ClntParser::TA_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ return ClntParser::IAID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
{ return ClntParser::LOGLEVEL_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ return ClntParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
{ return ClntParser::LOGNAME_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
{ return ClntParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
{ return ClntParser::SCRIPTS_DIR_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ return ClntParser::VALID_TIME_; }
	YY_BREAK
case 18:
YY_RULE_SETUP
{ return ClntParser::T1_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
{ return ClntParser::T2_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
{ return ClntParser::OPTION_; }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ return ClntParser::DNS_SERVER_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
{ return ClntParser::DOMAIN_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
{ return ClntParser::NTP_SERVER_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
{ return ClntParser::TIME_ZONE_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
{ return ClntParser::SIP_SERVER_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
{ return ClntParser::SIP_DOMAIN_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
{ return ClntParser::FQDN_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
{ return ClntParser::FQDN_S_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
{ return ClntParser::NIS_SERVER_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
{ return ClntParser::NIS_DOMAIN_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
{ return ClntParser::NISP_SERVER_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
{ return ClntParser::NISP_DOMAIN_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ return ClntParser::LIFETIME_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ return ClntParser::REJECT_SERVERS_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 36:
YY_RULE_SETUP
{ return ClntParser::RAPID_COMMIT_;}
	YY_BREAK
case 37:
YY_RULE_SETUP
{ return ClntParser::UNICAST_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ return ClntParser::STRICT_RFC_NO_ROUTING_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LL_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LLT_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_EN_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
{ return ClntParser::VENDOR_SPEC_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ return ClntParser::ANON_INF_REQUEST_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
{ return ClntParser::INSIST_MODE_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
{ return ClntParser::INACTIVE_MODE_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ return ClntParser::AUTH_ENABLED_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ return ClntParser::AUTH_ACCEPT_METHODS_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ return ClntParser::DIGEST_NONE_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ return ClntParser::DIGEST_PLAIN_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ return ClntParser::EXPERIMENTAL_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ return ClntParser::ADDR_PARAMS_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ return ClntParser::MAPPING_PREFIX_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ return ClntParser::USE_CONFIRM_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
;
	YY_BREAK
case 64:
YY_RULE_SETUP
;
	YY_BREAK
case 65:
YY_RULE_SETUP
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
BEGIN(INITIAL);
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 68:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 69:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 70:
YY_RULE_SETUP
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 71:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 72:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 73:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 74:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return ClntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return ClntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
{
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return ClntParser::DUID_;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
{ 
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::HEXNUMBER_;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
{ 
    if(!sscanf(yytext,"%u",(unsigned int*)&(yylval.ival))) { 
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::INTNUMBER_;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
{return yytext[0];} 
	YY_BREAK
case 81:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 707 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 707 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 706);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

