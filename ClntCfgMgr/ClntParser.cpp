#define YY_ClntParser_h_included
#define YY_USE_CLASS

/*  A Bison++ parser, made from ClntParser.y  */

 /* with Bison++ version bison++ Version 1.21.9-1, adapted from GNU bison by coetmeur@icdc.fr
Maintained by Magnus Ekdahl <magnus@debian.org>
  */

#define YY_USE_CLASS

#line 1 "../bison++/bison.cc"
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Bob Corbett and Richard Stallman

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 1, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  

   As a special exception, when this file is copied by Bison++ into a
   Bison++ output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison, and has been in Bison++ since 1.21.9.  

*/

/* HEADER SECTION */
#if defined( _MSDOS ) || defined(MSDOS) || defined(__MSDOS__) 
 #define __MSDOS_AND_ALIKE
#endif

#if defined(_WINDOWS) && defined(_MSC_VER)
 #define __HAVE_NO_ALLOCA
 #define __MSDOS_AND_ALIKE
#endif

#ifndef alloca
 #if defined( __GNUC__)
  #define alloca __builtin_alloca

 #elif (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc)  || defined (__sgi)
  #include <alloca.h>

 #elif defined (__MSDOS_AND_ALIKE)
  #include <malloc.h>
  #ifndef __TURBOC__
   /* MS C runtime lib */
   #define alloca _alloca
  #endif

 #elif defined(_AIX)
  /* pragma must be put before any C/C++ instruction !! */
  #pragma alloca
  #include <malloc.h>

 #elif defined(__hpux)
  #ifdef __cplusplus
   extern "C" {
     void *alloca (unsigned int);
   };
  #else /* not __cplusplus */
   void *alloca ();
  #endif /* not __cplusplus */

 #endif /* not _AIX  not MSDOS, or __TURBOC__ or _AIX, not sparc.  */
#endif /* alloca not defined.  */

#ifdef c_plusplus
 #ifndef __cplusplus
  #define __cplusplus
 #endif
#endif

#ifdef __cplusplus
 #ifndef YY_USE_CLASS
/*#warning "For C++ its recomended to use bison++, otherwise classes won't be generated"*/
 #endif
#else
 #ifndef __STDC__
  #define const
 #endif
 #ifdef YY_USE_CLASS
  #error "This is a C++ header generated by bison++, please use a C++ compiler!"
 #endif
#endif

#include <stdio.h>
#define YYBISON 1  

 #line 88 "../bison++/bison.cc"
#line 3 "ClntParser.y"

#include <iostream>
#include <string>
#include <malloc.h>
#include "DHCPConst.h"
#include "SmartPtr.h"
#include "Container.h"
#include "ClntParser.h"
#include "ClntParsGlobalOpt.h"
#include "ClntCfgIface.h"
#include "ClntCfgAddr.h"
#include "ClntCfgIA.h"
#include "ClntCfgTA.h"
#include "ClntCfgPD.h"
#include "ClntOptVendorSpec.h"
#include "CfgMgr.h"
#include "Logger.h"

using namespace std;
    
#define YY_USE_CLASS
#line 26 "ClntParser.y"

#include "FlexLexer.h"
#define YY_ClntParser_MEMBERS  yyFlexLexer * lex;                                          \
/*List of options in scope stack,the most fresh is last in the list*/       \
List(TClntParsGlobalOpt) ParserOptStack;			            \
/*List of parsed interfaces/IAs/Addresses, last */                          \
/*interface/IA/address is just being parsing or have been just parsed*/     \
List(TClntCfgIface) ClntCfgIfaceLst;	                                    \
List(TClntCfgIA)    ClntCfgIALst;		                            \
List(TClntCfgTA)    ClntCfgTALst;                                           \
List(TClntCfgPD)    ClntCfgPDLst;                                           \
List(TClntCfgAddr)  ClntCfgAddrLst;                                         \
/*Pointer to list which should contain either rejected servers or */        \
/*preffered servers*/                                                       \
TContainer<SmartPtr<TStationID> > PresentStationLst;                        \
TContainer<SmartPtr<TIPv6Addr> > PresentAddrLst;                            \
TContainer<SmartPtr<string> > PresentStringLst;                             \
List(TClntOptVendorSpec) VendorSpec;					    \
/*method check whether interface with id=ifaceNr has been */                \
/*already declared */                                                       \
bool CheckIsIface(int ifaceNr);                                             \
/* method check if interface with id=ifaceName has been already declared */ \
bool CheckIsIface(string ifaceName);                                        \
void StartIfaceDeclaration();                                               \
bool EndIfaceDeclaration();                                                 \
void EmptyIface();                                                          \
void StartIADeclaration(bool aggregation);                                  \
void EndIADeclaration();                                                    \
void StartPDDeclaration();                                                  \
bool EndPDDeclaration();                                                    \
void EmptyIA();                                                             \
void EmptyAddr();                                                           \
bool iaidSet;                                                               \
unsigned int iaid;                                                          \
virtual ~ClntParser();                                                      \
EDUIDType DUIDType;                                                         \
int DUIDEnterpriseNumber;                                                   \
SPtr<TDUID> DUIDEnterpriseID;
#define YY_ClntParser_CONSTRUCTOR_PARAM  yyFlexLexer * lex
#define YY_ClntParser_CONSTRUCTOR_CODE                                                     \
    this->lex = lex;                                                        \
    ParserOptStack.append(new TClntParsGlobalOpt());                        \
    ParserOptStack.getFirst()->setIAIDCnt(1);                               \
    ParserOptStack.getLast();                                               \
    DUIDType = DUID_TYPE_NOT_DEFINED;                                       \
    DUIDEnterpriseID = 0;

#line 78 "ClntParser.y"
typedef union    
{
    int ival;    
    char *strval;  
    struct SDuid  {      
        int length;    
        char* duid;  
    } duidval;  
    char addrval[16];  
} yy_ClntParser_stype;
#define YY_ClntParser_STYPE yy_ClntParser_stype
#line 89 "ClntParser.y"

namespace std
{
    extern yy_ClntParser_stype yylval;
}

#line 88 "../bison++/bison.cc"
/* %{ and %header{ and %union, during decl */
#define YY_ClntParser_BISON 1

#ifndef YY_ClntParser_COMPATIBILITY
 #ifndef YY_USE_CLASS
  #define  YY_ClntParser_COMPATIBILITY 1
 #else
  #define  YY_ClntParser_COMPATIBILITY 0
 #endif
#endif

#if YY_ClntParser_COMPATIBILITY != 0
 /* backward compatibility */
 #ifdef YYLTYPE
  #ifndef YY_ClntParser_LTYPE
   #define YY_ClntParser_LTYPE YYLTYPE
  #endif
 #endif
/* Testing alternative bison solution
   /#ifdef YYSTYPE*/
#ifndef YY_ClntParser_STYPE 
   #define YY_ClntParser_STYPE YYSTYPE
#endif
/*#endif*/
 #ifdef YYDEBUG
  #ifndef YY_ClntParser_DEBUG
   #define  YY_ClntParser_DEBUG YYDEBUG
  #endif
 #endif
 
 /* use goto to be compatible */
 #ifndef YY_ClntParser_USE_GOTO
  #define YY_ClntParser_USE_GOTO 1
 #endif
#endif

/* use no goto to be clean in C++ */
#ifndef YY_ClntParser_USE_GOTO
 #define YY_ClntParser_USE_GOTO 0
#endif

#ifndef YY_ClntParser_PURE

 #line 130 "../bison++/bison.cc"

#line 130 "../bison++/bison.cc"
/*  YY_ClntParser_PURE */
#endif

/* section apres lecture def, avant lecture grammaire S2 */

 #line 134 "../bison++/bison.cc"

#line 134 "../bison++/bison.cc"
/* prefix */
#ifndef YY_ClntParser_DEBUG

 #line 136 "../bison++/bison.cc"

#line 136 "../bison++/bison.cc"
/* YY_ClntParser_DEBUG */
#endif


#ifndef YY_ClntParser_LSP_NEEDED

 #line 141 "../bison++/bison.cc"

#line 141 "../bison++/bison.cc"
 /* YY_ClntParser_LSP_NEEDED*/
#endif



/* DEFAULT LTYPE*/
#ifdef YY_ClntParser_LSP_NEEDED
#ifndef YY_ClntParser_LTYPE
#ifndef BISON_YYLTYPE_ISDECLARED
#define BISON_YYLTYPE_ISDECLARED
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#endif
#define YY_ClntParser_LTYPE yyltype
#endif
#endif
/* DEFAULT STYPE*/
      /* We used to use `unsigned long' as YY_ClntParser_STYPE on MSDOS,
	 but it seems better to be consistent.
	 Most programs should declare their own type anyway.  */

#ifndef YY_ClntParser_STYPE
#define YY_ClntParser_STYPE int
#endif
/* DEFAULT MISCELANEOUS */
#ifndef YY_ClntParser_PARSE
#define YY_ClntParser_PARSE yyparse
#endif
#ifndef YY_ClntParser_LEX
#define YY_ClntParser_LEX yylex
#endif
#ifndef YY_ClntParser_LVAL
#define YY_ClntParser_LVAL yylval
#endif
#ifndef YY_ClntParser_LLOC
#define YY_ClntParser_LLOC yylloc
#endif
#ifndef YY_ClntParser_CHAR
#define YY_ClntParser_CHAR yychar
#endif
#ifndef YY_ClntParser_NERRS
#define YY_ClntParser_NERRS yynerrs
#endif
#ifndef YY_ClntParser_DEBUG_FLAG
#define YY_ClntParser_DEBUG_FLAG yydebug
#endif
#ifndef YY_ClntParser_ERROR
#define YY_ClntParser_ERROR yyerror
#endif

#ifndef YY_ClntParser_PARSE_PARAM
 #ifndef YY_USE_CLASS
  #ifdef YYPARSE_PARAM
   #define YY_ClntParser_PARSE_PARAM void* YYPARSE_PARAM 
  #else
   #ifndef __STDC__
    #ifndef __cplusplus
     #define YY_ClntParser_PARSE_PARAM
    #endif
   #endif
  #endif
 #endif
 #ifndef YY_ClntParser_PARSE_PARAM
  #define YY_ClntParser_PARSE_PARAM void
 #endif
#endif

#if YY_ClntParser_COMPATIBILITY != 0
/* backward compatibility */
#ifdef YY_ClntParser_LTYPE
#ifndef YYLTYPE
#define YYLTYPE YY_ClntParser_LTYPE
#else
/* WARNING obsolete !!! user defined YYLTYPE not reported into generated header */
#endif
#endif

/* Removed due to bison compabilityproblems
/#ifndef YYSTYPE
/#define YYSTYPE YY_ClntParser_STYPE
/#else*/
/* WARNING obsolete !!! user defined YYSTYPE not reported into generated header */
/*#endif*/

#ifdef YY_ClntParser_PURE
#  ifndef YYPURE
#    define YYPURE YY_ClntParser_PURE
#  endif
#endif

#ifdef YY_ClntParser_DEBUG
#  ifndef YYDEBUG
#    define YYDEBUG YY_ClntParser_DEBUG 
#  endif
#endif

#ifndef YY_ClntParser_ERROR_VERBOSE
 #ifdef YYERROR_VERBOSE
  #define YY_ClntParser_ERROR_VERBOSE YYERROR_VERBOSE
 #endif
#endif

#ifndef YY_ClntParser_LSP_NEEDED
#  ifdef YYLSP_NEEDED
#    define YY_ClntParser_LSP_NEEDED YYLSP_NEEDED
#  endif
#endif

#endif

#ifndef YY_USE_CLASS
/* TOKEN C */

 #line 263 "../bison++/bison.cc"
#define	T1_	258
#define	T2_	259
#define	PREF_TIME_	260
#define	DNS_SERVER_	261
#define	VALID_TIME_	262
#define	UNICAST_	263
#define	NTP_SERVER_	264
#define	DOMAIN_	265
#define	TIME_ZONE_	266
#define	SIP_SERVER_	267
#define	SIP_DOMAIN_	268
#define	NIS_SERVER_	269
#define	NISP_SERVER_	270
#define	NIS_DOMAIN_	271
#define	NISP_DOMAIN_	272
#define	FQDN_	273
#define	LIFETIME_	274
#define	VENDOR_SPEC_	275
#define	IFACE_	276
#define	NO_CONFIG_	277
#define	REJECT_SERVERS_	278
#define	PREFERRED_SERVERS_	279
#define	IA_	280
#define	TA_	281
#define	IAID_	282
#define	ADDRES_	283
#define	IPV6ADDR_	284
#define	WORKDIR_	285
#define	RAPID_COMMIT_	286
#define	STATELESS_	287
#define	ANON_INF_REQUEST_	288
#define	OPTION_	289
#define	SCRIPTS_DIR_	290
#define	LOGNAME_	291
#define	LOGLEVEL_	292
#define	LOGMODE_	293
#define	STRING_	294
#define	HEXNUMBER_	295
#define	INTNUMBER_	296
#define	DUID_	297
#define	STRICT_RFC_NO_ROUTING_	298
#define	PD_	299
#define	DUID_TYPE_	300
#define	DUID_TYPE_LLT_	301
#define	DUID_TYPE_LL_	302
#define	DUID_TYPE_EN_	303
#define	AUTH_	304
#define	DIGEST_NONE_	305
#define	DIGEST_HMAC_SHA1_	306


#line 263 "../bison++/bison.cc"
 /* #defines tokens */
#else
/* CLASS */
#ifndef YY_ClntParser_CLASS
#define YY_ClntParser_CLASS ClntParser
#endif
#ifndef YY_ClntParser_INHERIT
#define YY_ClntParser_INHERIT
#endif
#ifndef YY_ClntParser_MEMBERS
#define YY_ClntParser_MEMBERS 
#endif
#ifndef YY_ClntParser_LEX_BODY
#define YY_ClntParser_LEX_BODY  
#endif
#ifndef YY_ClntParser_ERROR_BODY
#define YY_ClntParser_ERROR_BODY  
#endif
#ifndef YY_ClntParser_CONSTRUCTOR_PARAM
#define YY_ClntParser_CONSTRUCTOR_PARAM
#endif
#ifndef YY_ClntParser_CONSTRUCTOR_CODE
#define YY_ClntParser_CONSTRUCTOR_CODE
#endif
#ifndef YY_ClntParser_CONSTRUCTOR_INIT
#define YY_ClntParser_CONSTRUCTOR_INIT
#endif
/* choose between enum and const */
#ifndef YY_ClntParser_USE_CONST_TOKEN
#define YY_ClntParser_USE_CONST_TOKEN 0
/* yes enum is more compatible with flex,  */
/* so by default we use it */ 
#endif
#if YY_ClntParser_USE_CONST_TOKEN != 0
#ifndef YY_ClntParser_ENUM_TOKEN
#define YY_ClntParser_ENUM_TOKEN yy_ClntParser_enum_token
#endif
#endif

class YY_ClntParser_CLASS YY_ClntParser_INHERIT
{
public: 
#if YY_ClntParser_USE_CONST_TOKEN != 0
/* static const int token ... */

 #line 307 "../bison++/bison.cc"
static const int T1_;
static const int T2_;
static const int PREF_TIME_;
static const int DNS_SERVER_;
static const int VALID_TIME_;
static const int UNICAST_;
static const int NTP_SERVER_;
static const int DOMAIN_;
static const int TIME_ZONE_;
static const int SIP_SERVER_;
static const int SIP_DOMAIN_;
static const int NIS_SERVER_;
static const int NISP_SERVER_;
static const int NIS_DOMAIN_;
static const int NISP_DOMAIN_;
static const int FQDN_;
static const int LIFETIME_;
static const int VENDOR_SPEC_;
static const int IFACE_;
static const int NO_CONFIG_;
static const int REJECT_SERVERS_;
static const int PREFERRED_SERVERS_;
static const int IA_;
static const int TA_;
static const int IAID_;
static const int ADDRES_;
static const int IPV6ADDR_;
static const int WORKDIR_;
static const int RAPID_COMMIT_;
static const int STATELESS_;
static const int ANON_INF_REQUEST_;
static const int OPTION_;
static const int SCRIPTS_DIR_;
static const int LOGNAME_;
static const int LOGLEVEL_;
static const int LOGMODE_;
static const int STRING_;
static const int HEXNUMBER_;
static const int INTNUMBER_;
static const int DUID_;
static const int STRICT_RFC_NO_ROUTING_;
static const int PD_;
static const int DUID_TYPE_;
static const int DUID_TYPE_LLT_;
static const int DUID_TYPE_LL_;
static const int DUID_TYPE_EN_;
static const int AUTH_;
static const int DIGEST_NONE_;
static const int DIGEST_HMAC_SHA1_;


#line 307 "../bison++/bison.cc"
 /* decl const */
#else
enum YY_ClntParser_ENUM_TOKEN { YY_ClntParser_NULL_TOKEN=0

 #line 310 "../bison++/bison.cc"
	,T1_=258
	,T2_=259
	,PREF_TIME_=260
	,DNS_SERVER_=261
	,VALID_TIME_=262
	,UNICAST_=263
	,NTP_SERVER_=264
	,DOMAIN_=265
	,TIME_ZONE_=266
	,SIP_SERVER_=267
	,SIP_DOMAIN_=268
	,NIS_SERVER_=269
	,NISP_SERVER_=270
	,NIS_DOMAIN_=271
	,NISP_DOMAIN_=272
	,FQDN_=273
	,LIFETIME_=274
	,VENDOR_SPEC_=275
	,IFACE_=276
	,NO_CONFIG_=277
	,REJECT_SERVERS_=278
	,PREFERRED_SERVERS_=279
	,IA_=280
	,TA_=281
	,IAID_=282
	,ADDRES_=283
	,IPV6ADDR_=284
	,WORKDIR_=285
	,RAPID_COMMIT_=286
	,STATELESS_=287
	,ANON_INF_REQUEST_=288
	,OPTION_=289
	,SCRIPTS_DIR_=290
	,LOGNAME_=291
	,LOGLEVEL_=292
	,LOGMODE_=293
	,STRING_=294
	,HEXNUMBER_=295
	,INTNUMBER_=296
	,DUID_=297
	,STRICT_RFC_NO_ROUTING_=298
	,PD_=299
	,DUID_TYPE_=300
	,DUID_TYPE_LLT_=301
	,DUID_TYPE_LL_=302
	,DUID_TYPE_EN_=303
	,AUTH_=304
	,DIGEST_NONE_=305
	,DIGEST_HMAC_SHA1_=306


#line 310 "../bison++/bison.cc"
 /* enum token */
     }; /* end of enum declaration */
#endif
public:
 int YY_ClntParser_PARSE (YY_ClntParser_PARSE_PARAM);
 virtual void YY_ClntParser_ERROR(char *msg) YY_ClntParser_ERROR_BODY;
#ifdef YY_ClntParser_PURE
#ifdef YY_ClntParser_LSP_NEEDED
 virtual int  YY_ClntParser_LEX (YY_ClntParser_STYPE *YY_ClntParser_LVAL,YY_ClntParser_LTYPE *YY_ClntParser_LLOC) YY_ClntParser_LEX_BODY;
#else
 virtual int  YY_ClntParser_LEX (YY_ClntParser_STYPE *YY_ClntParser_LVAL) YY_ClntParser_LEX_BODY;
#endif
#else
 virtual int YY_ClntParser_LEX() YY_ClntParser_LEX_BODY;
 YY_ClntParser_STYPE YY_ClntParser_LVAL;
#ifdef YY_ClntParser_LSP_NEEDED
 YY_ClntParser_LTYPE YY_ClntParser_LLOC;
#endif
 int   YY_ClntParser_NERRS;
 int    YY_ClntParser_CHAR;
#endif
#if YY_ClntParser_DEBUG != 0
 int YY_ClntParser_DEBUG_FLAG;   /*  nonzero means print parse trace     */
#endif
public:
 YY_ClntParser_CLASS(YY_ClntParser_CONSTRUCTOR_PARAM);
public:
 YY_ClntParser_MEMBERS 
};
/* other declare folow */
#if YY_ClntParser_USE_CONST_TOKEN != 0

 #line 341 "../bison++/bison.cc"
const int YY_ClntParser_CLASS::T1_=258;
const int YY_ClntParser_CLASS::T2_=259;
const int YY_ClntParser_CLASS::PREF_TIME_=260;
const int YY_ClntParser_CLASS::DNS_SERVER_=261;
const int YY_ClntParser_CLASS::VALID_TIME_=262;
const int YY_ClntParser_CLASS::UNICAST_=263;
const int YY_ClntParser_CLASS::NTP_SERVER_=264;
const int YY_ClntParser_CLASS::DOMAIN_=265;
const int YY_ClntParser_CLASS::TIME_ZONE_=266;
const int YY_ClntParser_CLASS::SIP_SERVER_=267;
const int YY_ClntParser_CLASS::SIP_DOMAIN_=268;
const int YY_ClntParser_CLASS::NIS_SERVER_=269;
const int YY_ClntParser_CLASS::NISP_SERVER_=270;
const int YY_ClntParser_CLASS::NIS_DOMAIN_=271;
const int YY_ClntParser_CLASS::NISP_DOMAIN_=272;
const int YY_ClntParser_CLASS::FQDN_=273;
const int YY_ClntParser_CLASS::LIFETIME_=274;
const int YY_ClntParser_CLASS::VENDOR_SPEC_=275;
const int YY_ClntParser_CLASS::IFACE_=276;
const int YY_ClntParser_CLASS::NO_CONFIG_=277;
const int YY_ClntParser_CLASS::REJECT_SERVERS_=278;
const int YY_ClntParser_CLASS::PREFERRED_SERVERS_=279;
const int YY_ClntParser_CLASS::IA_=280;
const int YY_ClntParser_CLASS::TA_=281;
const int YY_ClntParser_CLASS::IAID_=282;
const int YY_ClntParser_CLASS::ADDRES_=283;
const int YY_ClntParser_CLASS::IPV6ADDR_=284;
const int YY_ClntParser_CLASS::WORKDIR_=285;
const int YY_ClntParser_CLASS::RAPID_COMMIT_=286;
const int YY_ClntParser_CLASS::STATELESS_=287;
const int YY_ClntParser_CLASS::ANON_INF_REQUEST_=288;
const int YY_ClntParser_CLASS::OPTION_=289;
const int YY_ClntParser_CLASS::SCRIPTS_DIR_=290;
const int YY_ClntParser_CLASS::LOGNAME_=291;
const int YY_ClntParser_CLASS::LOGLEVEL_=292;
const int YY_ClntParser_CLASS::LOGMODE_=293;
const int YY_ClntParser_CLASS::STRING_=294;
const int YY_ClntParser_CLASS::HEXNUMBER_=295;
const int YY_ClntParser_CLASS::INTNUMBER_=296;
const int YY_ClntParser_CLASS::DUID_=297;
const int YY_ClntParser_CLASS::STRICT_RFC_NO_ROUTING_=298;
const int YY_ClntParser_CLASS::PD_=299;
const int YY_ClntParser_CLASS::DUID_TYPE_=300;
const int YY_ClntParser_CLASS::DUID_TYPE_LLT_=301;
const int YY_ClntParser_CLASS::DUID_TYPE_LL_=302;
const int YY_ClntParser_CLASS::DUID_TYPE_EN_=303;
const int YY_ClntParser_CLASS::AUTH_=304;
const int YY_ClntParser_CLASS::DIGEST_NONE_=305;
const int YY_ClntParser_CLASS::DIGEST_HMAC_SHA1_=306;


#line 341 "../bison++/bison.cc"
 /* const YY_ClntParser_CLASS::token */
#endif
/*apres const  */
YY_ClntParser_CLASS::YY_ClntParser_CLASS(YY_ClntParser_CONSTRUCTOR_PARAM) YY_ClntParser_CONSTRUCTOR_INIT
{
#if YY_ClntParser_DEBUG != 0
YY_ClntParser_DEBUG_FLAG=0;
#endif
YY_ClntParser_CONSTRUCTOR_CODE;
}
#endif

 #line 352 "../bison++/bison.cc"


#define	YYFINAL		202
#define	YYFLAG		-32768
#define	YYNTBASE	55

#define YYTRANSLATE(x) ((unsigned)(x) <= 306 ? yytranslate[x] : 126)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,    54,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    52,     2,    53,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51
};

#if YY_ClntParser_DEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     5,     7,    10,    13,    15,    17,    19,
    21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
    41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
    61,    63,    65,    67,    69,    71,    73,    75,    77,    78,
    85,    86,    93,    98,   103,   107,   111,   113,   116,   118,
   121,   123,   126,   128,   131,   133,   134,   135,   142,   146,
   149,   151,   154,   155,   161,   165,   167,   169,   172,   174,
   177,   178,   184,   185,   192,   197,   201,   204,   206,   208,
   211,   213,   216,   218,   220,   223,   226,   229,   232,   235,
   240,   242,   245,   247,   250,   253,   256,   258,   259,   263,
   264,   268,   271,   274,   277,   280,   283,   285,   289,   290,
   296,   298,   301,   303,   305,   308,   310,   312,   316,   320,
   322,   326,   328,   332,   334,   336,   339,   340,   345,   348,
   349,   354,   357,   358,   363,   366,   370,   373,   374,   379,
   382,   383,   388,   391,   395,   398,   399,   404,   407,   408,
   413,   416,   420,   423,   427,   430,   433,   438,   442,   444
};

static const short yyrhs[] = {    56,
     0,     0,    57,     0,    60,     0,    56,    57,     0,    56,
    60,     0,    58,     0,    78,     0,    79,     0,    77,     0,
    82,     0,    80,     0,    83,     0,    84,     0,    85,     0,
    86,     0,    59,     0,    81,     0,   100,     0,   105,     0,
   107,     0,   109,     0,   111,     0,   112,     0,   114,     0,
   116,     0,   117,     0,   119,     0,   121,     0,   122,     0,
   123,     0,   124,     0,    87,     0,    89,     0,    94,     0,
    95,     0,    92,     0,    76,     0,     0,    21,    39,    52,
    61,    63,    53,     0,     0,    21,   104,    52,    62,    63,
    53,     0,    21,    39,    52,    53,     0,    21,   104,    52,
    53,     0,    21,    39,    22,     0,    21,   104,    22,     0,
    58,     0,    63,    58,     0,    69,     0,    63,    69,     0,
    64,     0,    63,    64,     0,    96,     0,    63,    96,     0,
    26,     0,     0,     0,    26,    52,    65,    67,    66,    53,
     0,    26,    52,    53,     0,    67,    68,     0,    68,     0,
    27,   104,     0,     0,    25,    52,    70,    71,    53,     0,
    25,    52,    53,     0,    25,     0,    59,     0,    71,    59,
     0,    72,     0,    71,    72,     0,     0,    28,    52,    73,
    75,    53,     0,     0,    28,   104,    52,    74,    75,    53,
     0,    28,   104,    52,    53,     0,    28,    52,    53,     0,
    28,   104,     0,    28,     0,    76,     0,    75,    76,     0,
    29,     0,    75,    29,     0,    91,     0,    93,     0,    37,
   104,     0,    38,    39,     0,    36,    39,     0,    45,    46,
     0,    45,    47,     0,    45,    48,   104,    42,     0,    32,
     0,    30,    39,     0,    43,     0,    35,    39,     0,    49,
    50,     0,    49,    51,     0,    33,     0,     0,    23,    88,
   101,     0,     0,    24,    90,   101,     0,     5,   104,     0,
    31,   104,     0,     7,   104,     0,     3,   104,     0,     4,
   104,     0,    44,     0,    44,    52,    53,     0,     0,    44,
    52,    97,    98,    53,     0,    99,     0,    98,    99,     0,
    94,     0,    95,     0,     8,   104,     0,    29,     0,    42,
     0,   101,    54,    29,     0,   101,    54,    42,     0,    29,
     0,   102,    54,    29,     0,    39,     0,   103,    54,    39,
     0,    40,     0,    41,     0,    34,     6,     0,     0,    34,
     6,   106,   102,     0,    34,    10,     0,     0,    34,    10,
   108,   103,     0,    34,     9,     0,     0,    34,     9,   110,
   102,     0,    34,    11,     0,    34,    11,    39,     0,    34,
    12,     0,     0,    34,    12,   113,   102,     0,    34,    13,
     0,     0,    34,    13,   115,   103,     0,    34,    18,     0,
    34,    18,    39,     0,    34,    14,     0,     0,    34,    14,
   118,   102,     0,    34,    15,     0,     0,    34,    15,   120,
   102,     0,    34,    16,     0,    34,    16,    39,     0,    34,
    17,     0,    34,    17,    39,     0,    34,    19,     0,    34,
    20,     0,    34,    20,   104,    42,     0,    34,    20,   125,
     0,   104,     0,   125,    54,   104,     0
};

#endif

#if (YY_ClntParser_DEBUG != 0) || defined(YY_ClntParser_ERROR_VERBOSE) 
static const short yyrline[] = { 0,
   123,   124,   128,   129,   130,   131,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   169,   170,   171,   172,   179,   184,
   198,   203,   213,   224,   234,   246,   259,   260,   261,   262,
   263,   264,   265,   266,   273,   278,   285,   291,   291,   299,
   300,   304,   316,   320,   328,   337,   345,   346,   347,   348,
   352,   358,   367,   372,   378,   383,   388,   393,   400,   401,
   402,   412,   425,   426,   430,   440,   445,   450,   451,   452,
   460,   467,   474,   483,   489,   490,   493,   499,   504,   510,
   513,   520,   527,   534,   541,   548,   555,   561,   567,   571,
   578,   579,   583,   584,   588,   606,   610,   614,   618,   625,
   626,   630,   631,   634,   635,   642,   648,   652,   661,   666,
   669,   678,   684,   687,   696,   700,   710,   716,   719,   728,
   733,   736,   745,   749,   759,   765,   768,   777,   783,   786,
   795,   799,   810,   814,   824,   831,   837,   843,   851,   852
};

static const char * const yytname[] = {   "$","error","$illegal.","T1_","T2_",
"PREF_TIME_","DNS_SERVER_","VALID_TIME_","UNICAST_","NTP_SERVER_","DOMAIN_",
"TIME_ZONE_","SIP_SERVER_","SIP_DOMAIN_","NIS_SERVER_","NISP_SERVER_","NIS_DOMAIN_",
"NISP_DOMAIN_","FQDN_","LIFETIME_","VENDOR_SPEC_","IFACE_","NO_CONFIG_","REJECT_SERVERS_",
"PREFERRED_SERVERS_","IA_","TA_","IAID_","ADDRES_","IPV6ADDR_","WORKDIR_","RAPID_COMMIT_",
"STATELESS_","ANON_INF_REQUEST_","OPTION_","SCRIPTS_DIR_","LOGNAME_","LOGLEVEL_",
"LOGMODE_","STRING_","HEXNUMBER_","INTNUMBER_","DUID_","STRICT_RFC_NO_ROUTING_",
"PD_","DUID_TYPE_","DUID_TYPE_LLT_","DUID_TYPE_LL_","DUID_TYPE_EN_","AUTH_",
"DIGEST_NONE_","DIGEST_HMAC_SHA1_","'{'","'}'","','","Grammar","GlobalDeclarationList",
"GlobalOptionDeclaration","InterfaceOptionDeclaration","IAOptionDeclaration",
"InterfaceDeclaration","@1","@2","InterfaceDeclarationsList","TADeclaration",
"@3","@4","TADeclarationList","IAID","IADeclaration","@5","IADeclarationList",
"ADDRESDeclaration","@6","@7","ADDRESDeclarationList","ADDRESOptionDeclaration",
"LogLevelOption","LogModeOption","LogNameOption","DuidTypeOption","NoIAsOptions",
"WorkDirOption","StrictRfcNoRoutingOption","ScriptsDir","AuthOption","AnonInfRequest",
"RejectServersOption","@8","PreferServersOption","@9","PreferredTimeOption",
"RapidCommitOption","ValidTimeOption","T1Option","T2Option","PDDeclaration",
"@10","PDOptionsList","PDOption","UnicastOption","ADDRESDUIDList","ADDRESSList",
"StringList","Number","DNSServerOption","@11","DomainOption","@12","NTPServerOption",
"@13","TimeZoneOption","SIPServerOption","@14","SIPDomainOption","@15","FQDNOption",
"NISServerOption","@16","NISPServerOption","@17","NISDomainOption","NISPDomainOption",
"LifetimeOption","VendorSpecOption","VendorSpecList",""
};
#endif

static const short yyr1[] = {     0,
    55,    55,    56,    56,    56,    56,    57,    57,    57,    57,
    57,    57,    57,    57,    57,    57,    58,    58,    58,    58,
    58,    58,    58,    58,    58,    58,    58,    58,    58,    58,
    58,    58,    58,    58,    59,    59,    59,    59,    61,    60,
    62,    60,    60,    60,    60,    60,    63,    63,    63,    63,
    63,    63,    63,    63,    64,    65,    66,    64,    64,    67,
    67,    68,    70,    69,    69,    69,    71,    71,    71,    71,
    73,    72,    74,    72,    72,    72,    72,    72,    75,    75,
    75,    75,    76,    76,    77,    78,    79,    80,    80,    80,
    81,    82,    83,    84,    85,    85,    86,    88,    87,    90,
    89,    91,    92,    93,    94,    95,    96,    96,    97,    96,
    98,    98,    99,    99,   100,   101,   101,   101,   101,   102,
   102,   103,   103,   104,   104,   105,   106,   105,   107,   108,
   107,   109,   110,   109,   111,   111,   112,   113,   112,   114,
   115,   114,   116,   116,   117,   118,   117,   119,   120,   119,
   121,   121,   122,   122,   123,   124,   124,   124,   125,   125
};

static const short yyr2[] = {     0,
     1,     0,     1,     1,     2,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     0,     6,
     0,     6,     4,     4,     3,     3,     1,     2,     1,     2,
     1,     2,     1,     2,     1,     0,     0,     6,     3,     2,
     1,     2,     0,     5,     3,     1,     1,     2,     1,     2,
     0,     5,     0,     6,     4,     3,     2,     1,     1,     2,
     1,     2,     1,     1,     2,     2,     2,     2,     2,     4,
     1,     2,     1,     2,     2,     2,     1,     0,     3,     0,
     3,     2,     2,     2,     2,     2,     1,     3,     0,     5,
     1,     2,     1,     1,     2,     1,     1,     3,     3,     1,
     3,     1,     3,     1,     1,     2,     0,     4,     2,     0,
     4,     2,     0,     4,     2,     3,     2,     0,     4,     2,
     0,     4,     2,     3,     2,     0,     4,     2,     0,     4,
     2,     3,     2,     3,     2,     2,     4,     3,     1,     3
};

static const short yydefact[] = {     2,
     0,     0,     0,     0,     0,     0,    98,   100,     0,     0,
    91,    97,     0,     0,     0,     0,     0,    93,     0,     0,
     1,     3,     7,    17,     4,    38,    10,     8,     9,    12,
    18,    11,    13,    14,    15,    16,    33,    34,    83,    37,
    84,    35,    36,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,   124,   125,   105,
   106,   102,   104,   115,     0,     0,     0,     0,    92,   103,
   126,   132,   129,   135,   137,   140,   145,   148,   151,   153,
   143,   155,   156,    94,    87,    85,    86,    88,    89,     0,
    95,    96,     5,     6,    45,    39,    46,    41,   116,   117,
    99,   101,     0,     0,     0,   136,     0,     0,     0,     0,
   152,   154,   144,   159,   158,     0,    43,     0,    44,     0,
     0,   120,   128,   134,   122,   131,   139,   142,   147,   150,
   157,     0,    90,    66,    55,   107,    47,     0,    51,    49,
    53,     0,   118,   119,     0,     0,   160,    63,    56,   109,
    40,    48,    52,    50,    54,    42,   121,   123,    65,     0,
    59,     0,   108,     0,    78,    67,     0,    69,     0,    57,
    61,   113,   114,     0,   111,    71,    77,    64,    68,    70,
    62,     0,    60,   110,   112,    76,     0,    73,    58,    81,
     0,    79,    75,     0,    82,    72,    80,     0,    74,     0,
     0,     0
};

static const short yydefgoto[] = {   200,
    21,    22,    23,    24,    25,   118,   120,   138,   139,   162,
   182,   170,   171,   140,   160,   167,   168,   187,   194,   191,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    67,    38,    68,    39,    40,    41,    42,    43,
   141,   164,   174,   175,    44,   101,   123,   126,    60,    45,
   103,    46,   105,    47,   104,    48,    49,   107,    50,   108,
    51,    52,   109,    53,   110,    54,    55,    56,    57,   115
};

static const short yypact[] = {    82,
    17,    17,    17,    17,    17,   105,-32768,-32768,   -26,    17,
-32768,-32768,   166,   -21,    -8,    17,    -1,-32768,   102,    73,
    82,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    10,    22,   -13,   -13,-32768,-32768,
    20,    34,    12,    27,    50,    56,    69,    78,    70,    90,
   101,-32768,    17,-32768,-32768,-32768,-32768,-32768,-32768,    17,
-32768,-32768,-32768,-32768,-32768,   104,-32768,   106,-32768,-32768,
    67,    67,   129,   129,   121,-32768,   129,   121,   129,   129,
-32768,-32768,-32768,   123,   112,   126,-32768,   130,-32768,   130,
   -12,-32768,   115,   115,-32768,   116,   115,   116,   115,   115,
-32768,    17,-32768,   119,   135,   136,-32768,     2,-32768,-32768,
-32768,    16,-32768,-32768,   144,   150,-32768,   137,   138,   139,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    68,
-32768,   167,-32768,   148,    24,-32768,    49,-32768,    17,   167,
-32768,-32768,-32768,     8,-32768,   140,   143,-32768,-32768,-32768,
-32768,   145,-32768,-32768,-32768,-32768,    63,   146,-32768,-32768,
    30,-32768,-32768,    63,-32768,-32768,-32768,    38,-32768,   196,
   197,-32768
};

static const short yypgoto[] = {-32768,
-32768,   179,   -10,  -145,   180,-32768,-32768,    83,   -60,-32768,
-32768,-32768,    35,   -16,-32768,-32768,    37,-32768,-32768,    13,
   -94,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -80,   -63,
     5,-32768,-32768,    28,-32768,   141,    32,    98,    -2,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768
};


#define	YYLAST		209


static const short yytable[] = {    61,
    62,    63,    64,    66,     1,     2,     3,    70,     4,     5,
     1,     2,    69,    86,   166,    99,   143,    84,     1,     2,
     3,   179,     4,     5,     7,     8,   134,   135,   100,   144,
    85,    95,    10,    11,     3,    13,     4,    87,     7,     8,
   134,   135,     3,    97,     4,   136,    10,    11,  -127,    13,
  -130,     1,     2,     3,   151,     4,    58,    59,   195,   136,
   184,    96,  -133,    58,    59,   106,   195,     3,   156,     4,
     1,     2,     3,    98,     4,   176,   165,   153,  -138,    10,
   114,   153,   196,   172,     1,     2,     3,   116,     4,     5,
   199,   190,   192,   172,  -141,   165,   197,  -146,    10,   192,
   173,   178,     6,   197,     7,     8,  -149,   137,   111,   137,
   173,     9,    10,    11,    12,    13,    14,    15,    16,    17,
   121,   154,    91,    92,    18,   154,    19,   152,   112,   147,
    20,   152,     1,     2,     3,   124,     4,     5,   127,   113,
   129,   130,   155,    65,    58,    59,   155,    88,    89,    90,
     1,     2,     7,     8,   134,   135,   117,   122,   119,   125,
    10,    11,   177,    13,   131,   132,   181,   133,   145,   146,
   148,    71,   157,   136,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,   149,   150,   158,   159,
   161,   163,   186,   169,   188,   201,   202,   189,   193,    93,
    94,   185,   142,   180,   183,   128,   198,     0,   102
};

static const short yycheck[] = {     2,
     3,     4,     5,     6,     3,     4,     5,    10,     7,     8,
     3,     4,    39,    16,   160,    29,    29,    39,     3,     4,
     5,   167,     7,     8,    23,    24,    25,    26,    42,    42,
    39,    22,    31,    32,     5,    34,     7,    39,    23,    24,
    25,    26,     5,    22,     7,    44,    31,    32,    29,    34,
    39,     3,     4,     5,    53,     7,    40,    41,    29,    44,
    53,    52,    29,    40,    41,    39,    29,     5,    53,     7,
     3,     4,     5,    52,     7,    52,    28,   138,    29,    31,
    83,   142,    53,   164,     3,     4,     5,    90,     7,     8,
    53,    29,   187,   174,    39,    28,   191,    29,    31,   194,
   164,    53,    21,   198,    23,    24,    29,   118,    39,   120,
   174,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    54,   138,    50,    51,    43,   142,    45,   138,    39,   132,
    49,   142,     3,     4,     5,   104,     7,     8,   107,    39,
   109,   110,   138,    39,    40,    41,   142,    46,    47,    48,
     3,     4,    23,    24,    25,    26,    53,    29,    53,    39,
    31,    32,   165,    34,    42,    54,   169,    42,    54,    54,
    52,     6,    29,    44,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    52,    52,    39,    53,
    53,    53,    53,    27,    52,     0,     0,    53,    53,    21,
    21,   174,   120,   167,   170,   108,   194,    -1,    68
};

#line 352 "../bison++/bison.cc"
 /* fattrs + tables */

/* parser code folow  */


/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: dollar marks section change
   the next  is replaced by the list of actions, each action
   as one case of the switch.  */ 

#if YY_ClntParser_USE_GOTO != 0
/* 
 SUPRESSION OF GOTO : on some C++ compiler (sun c++)
  the goto is strictly forbidden if any constructor/destructor
  is used in the whole function (very stupid isn't it ?)
 so goto are to be replaced with a 'while/switch/case construct'
 here are the macro to keep some apparent compatibility
*/
#define YYGOTO(lb) {yy_gotostate=lb;continue;}
#define YYBEGINGOTO  enum yy_labels yy_gotostate=yygotostart; \
                     for(;;) switch(yy_gotostate) { case yygotostart: {
#define YYLABEL(lb) } case lb: {
#define YYENDGOTO } } 
#define YYBEGINDECLARELABEL enum yy_labels {yygotostart
#define YYDECLARELABEL(lb) ,lb
#define YYENDDECLARELABEL  }
#else
/* macro to keep goto */
#define YYGOTO(lb) goto lb
#define YYBEGINGOTO 
#define YYLABEL(lb) lb:
#define YYENDGOTO
#define YYBEGINDECLARELABEL 
#define YYDECLARELABEL(lb)
#define YYENDDECLARELABEL  
#endif
/* LABEL DECLARATION */
YYBEGINDECLARELABEL
  YYDECLARELABEL(yynewstate)
  YYDECLARELABEL(yybackup)
/* YYDECLARELABEL(yyresume) */
  YYDECLARELABEL(yydefault)
  YYDECLARELABEL(yyreduce)
  YYDECLARELABEL(yyerrlab)   /* here on detecting error */
  YYDECLARELABEL(yyerrlab1)   /* here on error raised explicitly by an action */
  YYDECLARELABEL(yyerrdefault)  /* current state does not do anything special for the error token. */
  YYDECLARELABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */
  YYDECLARELABEL(yyerrhandle)  
YYENDDECLARELABEL
/* ALLOCA SIMULATION */
/* __HAVE_NO_ALLOCA */
#ifdef __HAVE_NO_ALLOCA
int __alloca_free_ptr(char *ptr,char *ref)
{if(ptr!=ref) free(ptr);
 return 0;}

#define __ALLOCA_alloca(size) malloc(size)
#define __ALLOCA_free(ptr,ref) __alloca_free_ptr((char *)ptr,(char *)ref)

#ifdef YY_ClntParser_LSP_NEEDED
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		    __ALLOCA_free(yyls,yylsa)+\
		   (num)); } while(0)
#else
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		   (num)); } while(0)
#endif
#else
#define __ALLOCA_return(num) do { return(num); } while(0)
#define __ALLOCA_alloca(size) alloca(size)
#define __ALLOCA_free(ptr,ref) 
#endif

/* ENDALLOCA SIMULATION */

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (YY_ClntParser_CHAR = YYEMPTY)
#define YYEMPTY         -2
#define YYEOF           0
#define YYACCEPT        __ALLOCA_return(0)
#define YYABORT         __ALLOCA_return(1)
#define YYERROR         YYGOTO(yyerrlab1)
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL          YYGOTO(yyerrlab)
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do                                                              \
  if (YY_ClntParser_CHAR == YYEMPTY && yylen == 1)                               \
    { YY_ClntParser_CHAR = (token), YY_ClntParser_LVAL = (value);                 \
      yychar1 = YYTRANSLATE (YY_ClntParser_CHAR);                                \
      YYPOPSTACK;                                               \
      YYGOTO(yybackup);                                            \
    }                                                           \
  else                                                          \
    { YY_ClntParser_ERROR ("syntax error: cannot back up"); YYERROR; }   \
while (0)

#define YYTERROR        1
#define YYERRCODE       256

#ifndef YY_ClntParser_PURE
/* UNPURE */
#define YYLEX           YY_ClntParser_LEX()
#ifndef YY_USE_CLASS
/* If nonreentrant, and not class , generate the variables here */
int     YY_ClntParser_CHAR;                      /*  the lookahead symbol        */
YY_ClntParser_STYPE      YY_ClntParser_LVAL;              /*  the semantic value of the */
				/*  lookahead symbol    */
int YY_ClntParser_NERRS;                 /*  number of parse errors so far */
#ifdef YY_ClntParser_LSP_NEEDED
YY_ClntParser_LTYPE YY_ClntParser_LLOC;   /*  location data for the lookahead     */
			/*  symbol                              */
#endif
#endif


#else
/* PURE */
#ifdef YY_ClntParser_LSP_NEEDED
#define YYLEX           YY_ClntParser_LEX(&YY_ClntParser_LVAL, &YY_ClntParser_LLOC)
#else
#define YYLEX           YY_ClntParser_LEX(&YY_ClntParser_LVAL)
#endif
#endif
#ifndef YY_USE_CLASS
#if YY_ClntParser_DEBUG != 0
int YY_ClntParser_DEBUG_FLAG;                    /*  nonzero means print parse trace     */
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif
#endif



/*  YYINITDEPTH indicates the initial size of the parser's stacks       */

#ifndef YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif


#if __GNUC__ > 1                /* GNU C and GNU C++ define this.  */
#define __yy_bcopy(FROM,TO,COUNT)       __builtin_memcpy(TO,FROM,COUNT)
#else                           /* not GNU C or C++ */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */

#ifdef __cplusplus
static void __yy_bcopy (char *from, char *to, int count)
#else
#ifdef __STDC__
static void __yy_bcopy (char *from, char *to, int count)
#else
static void __yy_bcopy (from, to, count)
     char *from;
     char *to;
     int count;
#endif
#endif
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}
#endif


int
#ifdef YY_USE_CLASS
 YY_ClntParser_CLASS::
#endif
     YY_ClntParser_PARSE(YY_ClntParser_PARSE_PARAM)
#ifndef __STDC__
#ifndef __cplusplus
#ifndef YY_USE_CLASS
/* parameter definition without protypes */
YY_ClntParser_PARSE_PARAM_DEF
#endif
#endif
#endif
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YY_ClntParser_STYPE *yyvsp;
  int yyerrstatus;      /*  number of tokens to shift before error messages enabled */
  int yychar1=0;          /*  lookahead token as an internal (translated) token number */

  short yyssa[YYINITDEPTH];     /*  the state stack                     */
  YY_ClntParser_STYPE yyvsa[YYINITDEPTH];        /*  the semantic value stack            */

  short *yyss = yyssa;          /*  refer to the stacks thru separate pointers */
  YY_ClntParser_STYPE *yyvs = yyvsa;     /*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YY_ClntParser_LSP_NEEDED
  YY_ClntParser_LTYPE yylsa[YYINITDEPTH];        /*  the location stack                  */
  YY_ClntParser_LTYPE *yyls = yylsa;
  YY_ClntParser_LTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YY_ClntParser_PURE
  int YY_ClntParser_CHAR;
  YY_ClntParser_STYPE YY_ClntParser_LVAL;
  int YY_ClntParser_NERRS;
#ifdef YY_ClntParser_LSP_NEEDED
  YY_ClntParser_LTYPE YY_ClntParser_LLOC;
#endif
#endif

  YY_ClntParser_STYPE yyval;             /*  the variable used to return         */
				/*  semantic values from the action     */
				/*  routines                            */

  int yylen;
/* start loop, in which YYGOTO may be used. */
YYBEGINGOTO

#if YY_ClntParser_DEBUG != 0
  if (YY_ClntParser_DEBUG_FLAG)
    fprintf(stderr, "Starting parse\n");
#endif
  yystate = 0;
  yyerrstatus = 0;
  YY_ClntParser_NERRS = 0;
  YY_ClntParser_CHAR = YYEMPTY;          /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YY_ClntParser_LSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
YYLABEL(yynewstate)

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YY_ClntParser_STYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YY_ClntParser_LSP_NEEDED
      YY_ClntParser_LTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YY_ClntParser_LSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YY_ClntParser_LSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  YY_ClntParser_ERROR("parser stack overflow");
	  __ALLOCA_return(2);
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) __ALLOCA_alloca (yystacksize * sizeof (*yyssp));
      __yy_bcopy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      __ALLOCA_free(yyss1,yyssa);
      yyvs = (YY_ClntParser_STYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yyvsp));
      __yy_bcopy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
      __ALLOCA_free(yyvs1,yyvsa);
#ifdef YY_ClntParser_LSP_NEEDED
      yyls = (YY_ClntParser_LTYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yylsp));
      __yy_bcopy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
      __ALLOCA_free(yyls1,yylsa);
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YY_ClntParser_LSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YY_ClntParser_DEBUG != 0
      if (YY_ClntParser_DEBUG_FLAG)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YY_ClntParser_DEBUG != 0
  if (YY_ClntParser_DEBUG_FLAG)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  YYGOTO(yybackup);
YYLABEL(yybackup)

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* YYLABEL(yyresume) */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yydefault);

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (YY_ClntParser_CHAR == YYEMPTY)
    {
#if YY_ClntParser_DEBUG != 0
      if (YY_ClntParser_DEBUG_FLAG)
	fprintf(stderr, "Reading a token: ");
#endif
      YY_ClntParser_CHAR = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (YY_ClntParser_CHAR <= 0)           /* This means end of input. */
    {
      yychar1 = 0;
      YY_ClntParser_CHAR = YYEOF;                /* Don't call YYLEX any more */

#if YY_ClntParser_DEBUG != 0
      if (YY_ClntParser_DEBUG_FLAG)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(YY_ClntParser_CHAR);

#if YY_ClntParser_DEBUG != 0
      if (YY_ClntParser_DEBUG_FLAG)
	{
	  fprintf (stderr, "Next token is %d (%s", YY_ClntParser_CHAR, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, YY_ClntParser_CHAR, YY_ClntParser_LVAL);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    YYGOTO(yydefault);

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrlab);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrlab);

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YY_ClntParser_DEBUG != 0
  if (YY_ClntParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting token %d (%s), ", YY_ClntParser_CHAR, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (YY_ClntParser_CHAR != YYEOF)
    YY_ClntParser_CHAR = YYEMPTY;

  *++yyvsp = YY_ClntParser_LVAL;
#ifdef YY_ClntParser_LSP_NEEDED
  *++yylsp = YY_ClntParser_LLOC;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  YYGOTO(yynewstate);

/* Do the default action for the current state.  */
YYLABEL(yydefault)

  yyn = yydefact[yystate];
  if (yyn == 0)
    YYGOTO(yyerrlab);

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
YYLABEL(yyreduce)
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YY_ClntParser_DEBUG != 0
  if (YY_ClntParser_DEBUG_FLAG)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


 #line 839 "../bison++/bison.cc"

  switch (yyn) {

case 39:
#line 180 "ClntParser.y"
{
    CheckIsIface(string(yyvsp[-1].strval)); //If no - everything is ok
    StartIfaceDeclaration();
;
    break;}
case 40:
#line 185 "ClntParser.y"
{
    //Information about new interface has been read
    //Add it to list of read interfaces
    ClntCfgIfaceLst.append(new TClntCfgIface(yyvsp[-4].strval));
    //FIXME:used of char * should be always realeased
    delete [] yyvsp[-4].strval;
    if (!EndIfaceDeclaration())
	YYABORT;
;
    break;}
case 41:
#line 199 "ClntParser.y"
{
    CheckIsIface(yyvsp[-1].ival);   //If no - everything is ok
    StartIfaceDeclaration();
;
    break;}
case 42:
#line 204 "ClntParser.y"
{
    ClntCfgIfaceLst.append(new TClntCfgIface(yyvsp[-4].ival) );
    if (!EndIfaceDeclaration())
	YYABORT;
;
    break;}
case 43:
#line 214 "ClntParser.y"
{
    CheckIsIface(string(yyvsp[-2].strval));
    ClntCfgIfaceLst.append(new TClntCfgIface(yyvsp[-2].strval));
    delete [] yyvsp[-2].strval;
    EmptyIface();
;
    break;}
case 44:
#line 225 "ClntParser.y"
{
    CheckIsIface(yyvsp[-2].ival);
    ClntCfgIfaceLst.append(new TClntCfgIface(yyvsp[-2].ival));
    EmptyIface();
;
    break;}
case 45:
#line 235 "ClntParser.y"
{
    CheckIsIface(string(yyvsp[-1].strval));
    ClntCfgIfaceLst.append(new TClntCfgIface(yyvsp[-1].strval));
    ClntCfgIfaceLst.getLast()->setOptions(ParserOptStack.getLast());
    ClntCfgIfaceLst.getLast()->setNoConfig();
    delete yyvsp[-1].strval;
;
    break;}
case 46:
#line 247 "ClntParser.y"
{
    CheckIsIface(yyvsp[-1].ival);
    ClntCfgIfaceLst.append(SmartPtr<TClntCfgIface> (new TClntCfgIface(yyvsp[-1].ival)) );
    ClntCfgIfaceLst.getLast()->setOptions(ParserOptStack.getLast());
    ClntCfgIfaceLst.getLast()->setNoConfig();
;
    break;}
case 55:
#line 274 "ClntParser.y"
{ 
    //Log(Crit) << "TA without params." << LogEnd;
    this->ClntCfgTALst.append( new TClntCfgTA() ); // append new TA
;
    break;}
case 56:
#line 279 "ClntParser.y"
{
    //Log(Crit) << "TA with params started." << LogEnd;
    this->ClntCfgTALst.append( new TClntCfgTA() ); // append new TA
    this->iaidSet = false;
;
    break;}
case 57:
#line 285 "ClntParser.y"
{
    if (this->iaidSet)
	this->ClntCfgTALst.getLast()->setIAID(this->iaid);
    //Log(Crit) << "TA with params ended." << LogEnd;
;
    break;}
case 59:
#line 292 "ClntParser.y"
{
    //Log(Crit) << "TA without params." << LogEnd;
    this->ClntCfgTALst.append( new TClntCfgTA() ); // append new TA
;
    break;}
case 62:
#line 305 "ClntParser.y"
{
    this->iaidSet = true;
    this->iaid = yyvsp[0].ival;
    Log(Crit) << "IAID=" << this->iaid << " parsed." << LogEnd;
;
    break;}
case 63:
#line 317 "ClntParser.y"
{ 
    StartIADeclaration(false);
;
    break;}
case 64:
#line 321 "ClntParser.y"
{
    EndIADeclaration();
;
    break;}
case 65:
#line 329 "ClntParser.y"
{
    StartIADeclaration(true);
    EndIADeclaration();
;
    break;}
case 66:
#line 338 "ClntParser.y"
{
    StartIADeclaration(true);
    EndIADeclaration();
;
    break;}
case 71:
#line 353 "ClntParser.y"
{
    SmartPtr<TClntParsGlobalOpt> globalOpt = ParserOptStack.getLast();
    SmartPtr<TClntParsGlobalOpt> newOpt = new TClntParsGlobalOpt(*globalOpt);
    ParserOptStack.append(newOpt);
;
    break;}
case 72:
#line 359 "ClntParser.y"
{
    //ClntCfgAddrLst.append(SmartPtr<TClntCfgAddr> (new TClntCfgAddr()));
    //set proper options specific for this Address
    //ClntCfgAddrLst.getLast()->setOptions(&(*ParserOptStack.getLast()));
    if (ParserOptStack.count())
	ParserOptStack.delLast();
;
    break;}
case 73:
#line 368 "ClntParser.y"
{
    ParserOptStack.append(new TClntParsGlobalOpt(*ParserOptStack.getLast()));
    ParserOptStack.getLast()->setAddrHint(false);
;
    break;}
case 74:
#line 373 "ClntParser.y"
{
    for (int i=0;i<yyvsp[-4].ival; i++) EmptyAddr();
    ParserOptStack.delLast();
;
    break;}
case 75:
#line 379 "ClntParser.y"
{
    for (int i=0;i<yyvsp[-2].ival; i++) EmptyAddr();
;
    break;}
case 76:
#line 384 "ClntParser.y"
{
    EmptyAddr();
;
    break;}
case 77:
#line 389 "ClntParser.y"
{
    for (int i=0;i<yyvsp[0].ival; i++) EmptyAddr();
;
    break;}
case 78:
#line 394 "ClntParser.y"
{
    EmptyAddr();
;
    break;}
case 81:
#line 403 "ClntParser.y"
{
    if (ParserOptStack.getLast()->getAddrHint())
    {
        ClntCfgAddrLst.append(new TClntCfgAddr(new TIPv6Addr(yyvsp[0].addrval)));
        ClntCfgAddrLst.getLast()->setOptions(ParserOptStack.getLast());
    }
    else
	YYABORT;  //this is aggregated version of IA
;
    break;}
case 82:
#line 413 "ClntParser.y"
{
    if (ParserOptStack.getLast()->getAddrHint())
    {
	ClntCfgAddrLst.append(new TClntCfgAddr(new TIPv6Addr(yyvsp[0].addrval)));
	ClntCfgAddrLst.getLast()->setOptions(ParserOptStack.getLast());
    }
    else
	YYABORT; //here is agregated version of IA
;
    break;}
case 85:
#line 431 "ClntParser.y"
{
    if ( (yyvsp[0].ival<1) || (yyvsp[0].ival>8) ) {
	Log(Crit) << "Invalid loglevel specified: " << yyvsp[0].ival << ". Allowed range: 1-8." << LogEnd;
    }
    logger::setLogLevel(yyvsp[0].ival);
;
    break;}
case 86:
#line 440 "ClntParser.y"
{
    logger::setLogMode(yyvsp[0].strval);
;
    break;}
case 87:
#line 445 "ClntParser.y"
{
    logger::setLogName(yyvsp[0].strval);
;
    break;}
case 88:
#line 450 "ClntParser.y"
{ this->DUIDType  = DUID_TYPE_LLT;;
    break;}
case 89:
#line 451 "ClntParser.y"
{ this->DUIDType  = DUID_TYPE_LL; ;
    break;}
case 90:
#line 452 "ClntParser.y"
{ 
  this->DUIDType       = DUID_TYPE_EN; 
  this->DUIDEnterpriseNumber = yyvsp[-1].ival;
  this->DUIDEnterpriseID     = new TDUID(yyvsp[0].duidval.duid, yyvsp[0].duidval.length); 
;
    break;}
case 91:
#line 461 "ClntParser.y"
{
    ParserOptStack.getLast()->setIsIAs(false);
;
    break;}
case 92:
#line 468 "ClntParser.y"
{
    ParserOptStack.getLast()->setWorkDir(yyvsp[0].strval);
;
    break;}
case 93:
#line 475 "ClntParser.y"
{
    Log(Notice) << "Strict-rfc-no-routing directive set: addresses will be added with 128 prefix." << LogEnd;
    ParserOptStack.getLast()->setPrefixLength(128);
    // by default prefix is set to 128
;
    break;}
case 94:
#line 484 "ClntParser.y"
{
    ParserOptStack.getLast()->setScriptsDir(yyvsp[0].strval);
;
    break;}
case 95:
#line 489 "ClntParser.y"
{ ParserOptStack.getLast()->setDigest(DIGEST_NONE); ;
    break;}
case 96:
#line 490 "ClntParser.y"
{ ParserOptStack.getLast()->setDigest(DIGEST_HMAC_SHA1); ;
    break;}
case 97:
#line 494 "ClntParser.y"
{
    ParserOptStack.getLast()->setAnonInfRequest(true);
;
    break;}
case 98:
#line 500 "ClntParser.y"
{
    //ParserOptStack.getLast()->clearRejedSrv();
    PresentStationLst.clear();
;
    break;}
case 99:
#line 504 "ClntParser.y"
{
    ParserOptStack.getLast()->setRejedSrvLst(&PresentStationLst);
;
    break;}
case 100:
#line 511 "ClntParser.y"
{
    PresentStationLst.clear();
;
    break;}
case 101:
#line 513 "ClntParser.y"
{
    ParserOptStack.getLast()->setPrefSrvLst(&PresentStationLst);
;
    break;}
case 102:
#line 521 "ClntParser.y"
{
    ParserOptStack.getLast()->setPref(yyvsp[0].ival);
;
    break;}
case 103:
#line 528 "ClntParser.y"
{ 
    ParserOptStack.getLast()->setRapidCommit(yyvsp[0].ival);
;
    break;}
case 104:
#line 535 "ClntParser.y"
{
    ParserOptStack.getLast()->setValid(yyvsp[0].ival);
;
    break;}
case 105:
#line 542 "ClntParser.y"
{
    ParserOptStack.getLast()->setT1(yyvsp[0].ival);
;
    break;}
case 106:
#line 549 "ClntParser.y"
{
    ParserOptStack.getLast()->setT2(yyvsp[0].ival);
;
    break;}
case 107:
#line 556 "ClntParser.y"
{
    Log(Debug) << "Prefix delegation option found." << LogEnd;
    StartPDDeclaration();
    EndPDDeclaration();
;
    break;}
case 108:
#line 562 "ClntParser.y"
{
    Log(Debug) << "Prefix delegation option found." << LogEnd;
    StartPDDeclaration();
    EndPDDeclaration();
;
    break;}
case 109:
#line 568 "ClntParser.y"
{
    StartPDDeclaration();
;
    break;}
case 110:
#line 572 "ClntParser.y"
{
    EndPDDeclaration();
;
    break;}
case 115:
#line 589 "ClntParser.y"
{
    switch(yyvsp[0].ival) {
    case 0:
	ParserOptStack.getLast()->setUnicast(false);
	break;
    case 1:
	ParserOptStack.getLast()->setUnicast(true);
	break;
    default:
	Log(Error) << "Invalid parameter (" << yyvsp[0].ival << ") passed to unicast in line " 
		   << lex->YYText() << "." << LogEnd;
	return 1;
    }
;
    break;}
case 116:
#line 607 "ClntParser.y"
{
    PresentStationLst.append(SmartPtr<TStationID> (new TStationID(new TIPv6Addr(yyvsp[0].addrval))));
;
    break;}
case 117:
#line 611 "ClntParser.y"
{
    PresentStationLst.append(SmartPtr<TStationID> (new TStationID(new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length))));
;
    break;}
case 118:
#line 615 "ClntParser.y"
{
    PresentStationLst.append(SmartPtr<TStationID> (new TStationID(new TIPv6Addr(yyvsp[0].addrval))));
;
    break;}
case 119:
#line 619 "ClntParser.y"
{
    PresentStationLst.append(SmartPtr<TStationID> (new TStationID( new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length))));
;
    break;}
case 120:
#line 625 "ClntParser.y"
{PresentAddrLst.append(SmartPtr<TIPv6Addr> (new TIPv6Addr(yyvsp[0].addrval)));;
    break;}
case 121:
#line 626 "ClntParser.y"
{PresentAddrLst.append(SmartPtr<TIPv6Addr> (new TIPv6Addr(yyvsp[0].addrval)));;
    break;}
case 122:
#line 630 "ClntParser.y"
{ PresentStringLst.append(SmartPtr<string> (new string(yyvsp[0].strval))); ;
    break;}
case 123:
#line 631 "ClntParser.y"
{ PresentStringLst.append(SmartPtr<string> (new string(yyvsp[0].strval))); ;
    break;}
case 124:
#line 634 "ClntParser.y"
{yyval.ival=yyvsp[0].ival;;
    break;}
case 125:
#line 635 "ClntParser.y"
{yyval.ival=yyvsp[0].ival;;
    break;}
case 126:
#line 643 "ClntParser.y"
{
    PresentAddrLst.clear();
//    PresentAddrLst.append(SmartPtr<TIPv6Addr> (new TIPv6Addr()));
    ParserOptStack.getLast()->setDNSServerLst(&PresentAddrLst);
;
    break;}
case 127:
#line 649 "ClntParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 128:
#line 652 "ClntParser.y"
{
    ParserOptStack.getLast()->setDNSServerLst(&PresentAddrLst);
;
    break;}
case 129:
#line 662 "ClntParser.y"
{
    PresentStringLst.clear();
    ParserOptStack.getLast()->setDomainLst(&PresentStringLst);
;
    break;}
case 130:
#line 666 "ClntParser.y"
{ 
    PresentStringLst.clear();
;
    break;}
case 131:
#line 669 "ClntParser.y"
{
    ParserOptStack.getLast()->setDomainLst(&PresentStringLst);
;
    break;}
case 132:
#line 679 "ClntParser.y"
{
    PresentAddrLst.clear();
//    PresentAddrLst.append(SmartPtr<TIPv6Addr> (new TIPv6Addr()));
    ParserOptStack.getLast()->setNTPServerLst(&PresentAddrLst);
;
    break;}
case 133:
#line 684 "ClntParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 134:
#line 687 "ClntParser.y"
{
    ParserOptStack.getLast()->setNTPServerLst(&PresentAddrLst);
;
    break;}
case 135:
#line 697 "ClntParser.y"
{
    ParserOptStack.getLast()->setTimezone(string(""));
  ;
    break;}
case 136:
#line 701 "ClntParser.y"
{
    ParserOptStack.getLast()->setTimezone(yyvsp[0].strval);
;
    break;}
case 137:
#line 711 "ClntParser.y"
{
    PresentAddrLst.clear();
//    PresentAddrLst.append(SmartPtr<TIPv6Addr> (new TIPv6Addr()));
    ParserOptStack.getLast()->setSIPServerLst(&PresentAddrLst);
;
    break;}
case 138:
#line 716 "ClntParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 139:
#line 719 "ClntParser.y"
{
    ParserOptStack.getLast()->setSIPServerLst(&PresentAddrLst);
;
    break;}
case 140:
#line 729 "ClntParser.y"
{
    PresentStringLst.clear();
    ParserOptStack.getLast()->setSIPDomainLst(&PresentStringLst);
;
    break;}
case 141:
#line 733 "ClntParser.y"
{
    PresentStringLst.clear();
;
    break;}
case 142:
#line 736 "ClntParser.y"
{
    ParserOptStack.getLast()->setSIPDomainLst(&PresentStringLst);
;
    break;}
case 143:
#line 746 "ClntParser.y"
{
    ParserOptStack.getLast()->setFQDN(string(""));
;
    break;}
case 144:
#line 750 "ClntParser.y"
{
    ParserOptStack.getLast()->setFQDN(yyvsp[0].strval);
;
    break;}
case 145:
#line 760 "ClntParser.y"
{
    PresentAddrLst.clear();
//    PresentAddrLst.append(SmartPtr<TIPv6Addr> (new TIPv6Addr()));
    ParserOptStack.getLast()->setNISServerLst(&PresentAddrLst);
;
    break;}
case 146:
#line 765 "ClntParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 147:
#line 768 "ClntParser.y"
{
    ParserOptStack.getLast()->setNISServerLst(&PresentAddrLst);
;
    break;}
case 148:
#line 778 "ClntParser.y"
{
    PresentAddrLst.clear();
//    PresentAddrLst.append(SmartPtr<TIPv6Addr> (new TIPv6Addr()));
    ParserOptStack.getLast()->setNISPServerLst(&PresentAddrLst);
;
    break;}
case 149:
#line 783 "ClntParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 150:
#line 786 "ClntParser.y"
{
    ParserOptStack.getLast()->setNISPServerLst(&PresentAddrLst);
;
    break;}
case 151:
#line 796 "ClntParser.y"
{
    ParserOptStack.getLast()->setNISDomain("");
;
    break;}
case 152:
#line 800 "ClntParser.y"
{
    ParserOptStack.getLast()->setNISDomain(yyvsp[0].strval);
;
    break;}
case 153:
#line 811 "ClntParser.y"
{
    ParserOptStack.getLast()->setNISPDomain("");
;
    break;}
case 154:
#line 815 "ClntParser.y"
{
    ParserOptStack.getLast()->setNISPDomain(yyvsp[0].strval);
;
    break;}
case 155:
#line 825 "ClntParser.y"
{
    ParserOptStack.getLast()->setLifetime();
;
    break;}
case 156:
#line 832 "ClntParser.y"
{
    Log(Debug) << "VendorSpec defined (no details)." << LogEnd;
    ParserOptStack.getLast()->setVendorSpec();
    this->VendorSpec.clear();
;
    break;}
case 157:
#line 838 "ClntParser.y"
{
    Log(Debug) << "VendorSpec defined (enterprise=" << yyvsp[-1].ival << ", hint data length=" << yyvsp[0].duidval.length << ")." << LogEnd;
    ParserOptStack.getLast()->setVendorSpec();
    this->VendorSpec.append(new TClntOptVendorSpec(yyvsp[-1].ival, yyvsp[0].duidval.duid, yyvsp[0].duidval.length, 0));
;
    break;}
case 158:
#line 844 "ClntParser.y"
{
    ParserOptStack.getLast()->setVendorSpec();
    Log(Debug) << "VendorSpec defined (multiple times)." << LogEnd;
;
    break;}
case 159:
#line 851 "ClntParser.y"
{ VendorSpec.append( new TClntOptVendorSpec(yyvsp[0].ival,0,0,0) ); ;
    break;}
case 160:
#line 852 "ClntParser.y"
{ VendorSpec.append( new TClntOptVendorSpec(yyvsp[0].ival,0,0,0) ); ;
    break;}
}

#line 839 "../bison++/bison.cc"
   /* the action file gets copied in in place of this dollarsign  */
  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YY_ClntParser_LSP_NEEDED
  yylsp -= yylen;
#endif

#if YY_ClntParser_DEBUG != 0
  if (YY_ClntParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YY_ClntParser_LSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = YY_ClntParser_LLOC.first_line;
      yylsp->first_column = YY_ClntParser_LLOC.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  YYGOTO(yynewstate);

YYLABEL(yyerrlab)   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++YY_ClntParser_NERRS;

#ifdef YY_ClntParser_ERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      YY_ClntParser_ERROR(msg);
	      free(msg);
	    }
	  else
	    YY_ClntParser_ERROR ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YY_ClntParser_ERROR_VERBOSE */
	YY_ClntParser_ERROR("parse error");
    }

  YYGOTO(yyerrlab1);
YYLABEL(yyerrlab1)   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (YY_ClntParser_CHAR == YYEOF)
	YYABORT;

#if YY_ClntParser_DEBUG != 0
      if (YY_ClntParser_DEBUG_FLAG)
	fprintf(stderr, "Discarding token %d (%s).\n", YY_ClntParser_CHAR, yytname[yychar1]);
#endif

      YY_ClntParser_CHAR = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;              /* Each real token shifted decrements this */

  YYGOTO(yyerrhandle);

YYLABEL(yyerrdefault)  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) YYGOTO(yydefault);
#endif

YYLABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YY_ClntParser_LSP_NEEDED
  yylsp--;
#endif

#if YY_ClntParser_DEBUG != 0
  if (YY_ClntParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

YYLABEL(yyerrhandle)

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yyerrdefault);

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    YYGOTO(yyerrdefault);

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrpop);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrpop);

  if (yyn == YYFINAL)
    YYACCEPT;

#if YY_ClntParser_DEBUG != 0
  if (YY_ClntParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = YY_ClntParser_LVAL;
#ifdef YY_ClntParser_LSP_NEEDED
  *++yylsp = YY_ClntParser_LLOC;
#endif

  yystate = yyn;
  YYGOTO(yynewstate);
/* end loop, in which YYGOTO may be used. */
  YYENDGOTO
}

/* END */

 #line 1038 "../bison++/bison.cc"
#line 856 "ClntParser.y"


/////////////////////////////////////////////////////////////////////////////
// programs section
/////////////////////////////////////////////////////////////////////////////

//
/** 
 * method check whether interface with id=ifaceNr has been 
 * already declared. YYABORT macro is called to abort parsing.
 * 
 * @param ifaceNr 
 * 
 * @return true if not declared.
 */bool ClntParser::CheckIsIface(int ifaceNr)
{
  SmartPtr<TClntCfgIface> ptr;
  ClntCfgIfaceLst.first();
  while (ptr=ClntCfgIfaceLst.get())
    if ((ptr->getID())==ifaceNr) YYABORT;
  return true;
}
    
//method check whether interface with id=ifaceName has been
//already declared 
bool ClntParser::CheckIsIface(string ifaceName)
{
  SmartPtr<TClntCfgIface> ptr;
  ClntCfgIfaceLst.first();
  while (ptr=ClntCfgIfaceLst.get())
  {
    string presName=ptr->getName();
    if (presName==ifaceName) YYABORT;
  };
  return true;
}

/** 
 * creates new scope appropriately for interface options and declarations
 * clears all lists except the list of interfaces and adds new group
 */
void ClntParser::StartIfaceDeclaration()
{
  //Interface scope, so parameters associated with global scope are pushed on stack
  ParserOptStack.append(new TClntParsGlobalOpt(*ParserOptStack.getLast()));
  ClntCfgIALst.clear();
  ClntCfgAddrLst.clear();
  this->VendorSpec.clear();
}

bool ClntParser::EndIfaceDeclaration()
{
    SmartPtr<TClntCfgIface> iface = ClntCfgIfaceLst.getLast();
    if (!iface) {
	Log(Crit) << "Internal error: Interface not found. Something is wrong. Very wrong." << LogEnd;
	return false;
    }

    // set interface options on the basis of just read information
    // preferred-server and rejected-servers are also copied here
    if (VendorSpec.count())
	ParserOptStack.getLast()->setVendorSpec(VendorSpec);
    iface->setOptions(ParserOptStack.getLast());
    iface->setPrefixLength(ParserOptStack.getLast()->getPrefixLength());

    if ( (iface->stateless()) && (ClntCfgIALst.count()) ) {
	Log(Crit) << "Interface " << iface->getFullName() << " is configured stateless, "
	    " but has " << ClntCfgIALst.count() << " IA(s) defined." << LogEnd;
	return false;
    }

    if ( (iface->stateless()) && (ClntCfgTALst.count()) ) {
	Log(Crit) << "Interface " << iface->getFullName() << " is configured stateless, "
	    " but has TA defined." << LogEnd;
	return false;
    }

    // add all IAs to the interface
    SmartPtr<TClntCfgIA> ia;
    ClntCfgIALst.first();
    while (ia=ClntCfgIALst.get()) {
	ClntCfgIfaceLst.getLast()->addIA(ia);
    }
    
    //add all TAs to the interface
    SmartPtr<TClntCfgTA> ptrTA;
    ClntCfgTALst.first();
    while ( ptrTA = ClntCfgTALst.get() ) {
	iface->addTA(ptrTA);
    }

    //add all PDs to the interface
    SPtr<TClntCfgPD> pd;
    ClntCfgPDLst.first();
    while (pd = ClntCfgPDLst.get() ) {
	iface->addPD(pd);
    }

    //restore global options
    ParserOptStack.delLast();
    ClntCfgIALst.clear();
    return true;
}   

void ClntParser::EmptyIface()
{
    //set iface options on the basis of recent information
    ClntCfgIfaceLst.getLast()->setOptions(ParserOptStack.getLast());
    //add one IA with one address to this iface
    EmptyIA();
    ClntCfgIALst.getLast()->setOptions(ParserOptStack.getLast());
    ClntCfgIfaceLst.getLast()->addIA(ClntCfgIALst.getLast());
}

/** 
 * method creates new scope appropriately for interface options and declarations
 * clears list of addresses
 * 
 * @param aggregation - does this IA contains suboptions ( ia { ... } )
 */
void ClntParser::StartIADeclaration(bool aggregation)
{
  ParserOptStack.append(new TClntParsGlobalOpt(*ParserOptStack.getLast()));
  ParserOptStack.getLast()->setAddrHint(!aggregation);
  ClntCfgAddrLst.clear();
}

/** 
 * Inbelivable piece of crap code. If you read this, rewrite this code immediately.
 * 
 */
void ClntParser::EndIADeclaration()
{
    if(!ClntCfgAddrLst.count()) {
	EmptyIA();
    } else {
	SmartPtr<TClntCfgIA> ia = new TClntCfgIA();
	ClntCfgIALst.append(ia);
	SmartPtr<TClntCfgAddr> ptr;
	ClntCfgAddrLst.first();
	while(ptr=ClntCfgAddrLst.get())
	    ia->addAddr(ptr);
    }

    //set proper options specific for this IA
    ClntCfgIALst.getLast()->setOptions(ParserOptStack.getLast());

    ClntCfgAddrLst.clear();
    ParserOptStack.delLast();

    //this IA matches with previous ones and can be grouped with them
    //so it's should be left on the list and be appended with them to present list
}

void ClntParser::StartPDDeclaration()
{
  ParserOptStack.append(new TClntParsGlobalOpt(*ParserOptStack.getLast()));
  ClntCfgAddrLst.clear();
}

bool ClntParser::EndPDDeclaration()
{
    SPtr<TClntCfgPD> pd = new TClntCfgPD();
    pd->setOptions(ParserOptStack.getLast());
    ClntCfgPDLst.append(pd);
    ParserOptStack.delLast();
    return true;
}

/** 
 * method adds 1 IA object (containing 1 address) to the ClntCfgIA list.
 * Both objects' properties are set to last parsed values
 * 
 */void ClntParser::EmptyIA()
{
    EmptyAddr();
    ClntCfgIALst.append(new TClntCfgIA());
    ClntCfgIALst.getLast()->setOptions(ParserOptStack.getLast());
    //ClntCfgIALst.getLast()->addAddr(ClntCfgAddrLst.getLast());
}   

/** 
 * method adds empty address to the ClntCfgAddrList list and sets
 * its properties to last parsed values
 * 
 */
void ClntParser::EmptyAddr()
{
    ClntCfgAddrLst.append(new TClntCfgAddr());
    ClntCfgAddrLst.getLast()->setOptions(ParserOptStack.getLast());
}   


int ClntParser::yylex()
{
    memset(&std::yylval,0, sizeof(std::yylval));
    memset(&this->yylval,0, sizeof(this->yylval));
    int x = this->lex->yylex();
    this->yylval=std::yylval;
    return x;
}

/** 
 * This method is called when parsing error is detected.
 * 
 * @param m - first invalid character
 */
void ClntParser::yyerror(char *m)
{
    Log(Crit) << "Config parse error: line " << lex->lineno() 
	      << ", unexpected [" << lex->YYText() << "] token." << LogEnd;
}

/** 
 * Desctructor. Just cleans things up
 * 
 */

ClntParser::~ClntParser() {
    this->ClntCfgIfaceLst.clear();
    this->ClntCfgIALst.clear();
    this->ClntCfgTALst.clear();
    this->ClntCfgAddrLst.clear();
}
