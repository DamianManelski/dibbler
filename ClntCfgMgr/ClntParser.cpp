#define YY_ClntParser_h_included
#define YY_USE_CLASS

/*  A Bison++ parser, made from ClntParser.y  */

 /* with Bison++ version bison++ Version 1.21.9-1, adapted from GNU bison by coetmeur@icdc.fr
Maintained by Magnus Ekdahl <magnus@debian.org>
  */

#define YY_USE_CLASS

#line 1 "../bison++/bison.cc"
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Bob Corbett and Richard Stallman

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 1, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  

   As a special exception, when this file is copied by Bison++ into a
   Bison++ output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison, and has been in Bison++ since 1.21.9.  

*/

/* HEADER SECTION */
#if defined( _MSDOS ) || defined(MSDOS) || defined(__MSDOS__) 
 #define __MSDOS_AND_ALIKE
#endif

#if defined(_WINDOWS) && defined(_MSC_VER)
 #define __HAVE_NO_ALLOCA
 #define __MSDOS_AND_ALIKE
#endif

#ifndef alloca
 #if defined( __GNUC__)
  #define alloca __builtin_alloca

 #elif (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc)  || defined (__sgi)
  #include <alloca.h>

 #elif defined (__MSDOS_AND_ALIKE)
  #include <malloc.h>
  #ifndef __TURBOC__
   /* MS C runtime lib */
   #define alloca _alloca
  #endif

 #elif defined(_AIX)
  /* pragma must be put before any C/C++ instruction !! */
  #pragma alloca
  #include <malloc.h>

 #elif defined(__hpux)
  #ifdef __cplusplus
   extern "C" {
     void *alloca (unsigned int);
   };
  #else /* not __cplusplus */
   void *alloca ();
  #endif /* not __cplusplus */

 #endif /* not _AIX  not MSDOS, or __TURBOC__ or _AIX, not sparc.  */
#endif /* alloca not defined.  */

#ifdef c_plusplus
 #ifndef __cplusplus
  #define __cplusplus
 #endif
#endif

#ifdef __cplusplus
 #ifndef YY_USE_CLASS
/*#warning "For C++ its recomended to use bison++, otherwise classes won't be generated"*/
 #endif
#else
 #ifndef __STDC__
  #define const
 #endif
 #ifdef YY_USE_CLASS
  #error "This is a C++ header generated by bison++, please use a C++ compiler!"
 #endif
#endif

#include <stdio.h>
#define YYBISON 1  

 #line 88 "../bison++/bison.cc"
#line 3 "ClntParser.y"

#include <iostream>
#include <string>
#include <malloc.h>
#include "DHCPConst.h"
#include "SmartPtr.h"
#include "Container.h"
#include "ClntParser.h"
#include "ClntParsGlobalOpt.h"
#include "ClntCfgIface.h"
#include "ClntCfgAddr.h"
#include "ClntCfgIA.h"
#include "ClntCfgTA.h"
#include "ClntCfgPD.h"
#include "ClntOptVendorSpec.h"
#include "ClntCfgMgr.h"
#include "Logger.h"
#include "OptGeneric.h"
#include "OptAddr.h"
#include "OptAddrLst.h"
#include "OptString.h"

using namespace std;

#define YY_USE_CLASS
#line 30 "ClntParser.y"

#include "FlexLexer.h"
#define YY_ClntParser_MEMBERS  yyFlexLexer * lex;                                          \
/*List of options in scope stack,the most fresh is last in the list*/       \
List(TClntParsGlobalOpt) ParserOptStack;			            \
/*List of parsed interfaces/IAs/Addresses, last */                          \
/*interface/IA/address is just being parsing or have been just parsed*/     \
List(TClntCfgIface) ClntCfgIfaceLst;	                                    \
List(TClntCfgIA)    ClntCfgIALst;		                            \
List(TClntCfgTA)    ClntCfgTALst;                                           \
List(TClntCfgPD)    ClntCfgPDLst;                                           \
List(TClntCfgAddr)  ClntCfgAddrLst;                                         \
List(DigestTypes)   DigestLst;                                              \
/*Pointer to list which should contain either rejected servers or */        \
/*preffered servers*/                                                       \
List(TStationID) PresentStationLst;		                            \
List(TIPv6Addr) PresentAddrLst;			                            \
List(TClntCfgPrefix) PrefixLst;                                             \
List(string) PresentStringLst;	                                            \
List(TOptVendorSpecInfo) VendorSpec;					    \
bool IfaceDefined(int ifaceNr);                                             \
bool IfaceDefined(string ifaceName);                                        \
bool StartIfaceDeclaration(string ifaceName);                               \
bool StartIfaceDeclaration(int ifindex);                                    \
bool EndIfaceDeclaration();                                                 \
void EmptyIface();                                                          \
void StartIADeclaration(bool aggregation);                                  \
void EndIADeclaration();                                                    \
void StartPDDeclaration();                                                  \
bool EndPDDeclaration();                                                    \
void EmptyIA();                                                             \
void EmptyAddr();                                                           \
TClntCfgMgr * CfgMgr;                                                       \
bool iaidSet;                                                               \
unsigned int iaid;                                                          \
virtual ~ClntParser();                                                      \
EDUIDType DUIDType;                                                         \
int DUIDEnterpriseNumber;                                                   \
SPtr<TDUID> DUIDEnterpriseID;
#define YY_ClntParser_CONSTRUCTOR_PARAM  yyFlexLexer * lex
#define YY_ClntParser_CONSTRUCTOR_CODE                                                     \
    this->lex = lex;                                                        \
    ParserOptStack.append(new TClntParsGlobalOpt());                        \
    ParserOptStack.getFirst()->setIAIDCnt(1);                               \
    ParserOptStack.getLast();                                               \
    DUIDType = DUID_TYPE_NOT_DEFINED;                                       \
    DUIDEnterpriseID = 0;

#line 83 "ClntParser.y"
typedef union
{
    int ival;
    char *strval;
    struct SDuid  {
	int length;
	char* duid;
    } duidval;
    char addrval[16];
} yy_ClntParser_stype;
#define YY_ClntParser_STYPE yy_ClntParser_stype
#line 94 "ClntParser.y"

namespace std
{
    extern yy_ClntParser_stype yylval;
}

#line 88 "../bison++/bison.cc"
/* %{ and %header{ and %union, during decl */
#define YY_ClntParser_BISON 1

#ifndef YY_ClntParser_COMPATIBILITY
 #ifndef YY_USE_CLASS
  #define  YY_ClntParser_COMPATIBILITY 1
 #else
  #define  YY_ClntParser_COMPATIBILITY 0
 #endif
#endif

#if YY_ClntParser_COMPATIBILITY != 0
 /* backward compatibility */
 #ifdef YYLTYPE
  #ifndef YY_ClntParser_LTYPE
   #define YY_ClntParser_LTYPE YYLTYPE
  #endif
 #endif
/* Testing alternative bison solution
   /#ifdef YYSTYPE*/
#ifndef YY_ClntParser_STYPE 
   #define YY_ClntParser_STYPE YYSTYPE
#endif
/*#endif*/
 #ifdef YYDEBUG
  #ifndef YY_ClntParser_DEBUG
   #define  YY_ClntParser_DEBUG YYDEBUG
  #endif
 #endif
 
 /* use goto to be compatible */
 #ifndef YY_ClntParser_USE_GOTO
  #define YY_ClntParser_USE_GOTO 1
 #endif
#endif

/* use no goto to be clean in C++ */
#ifndef YY_ClntParser_USE_GOTO
 #define YY_ClntParser_USE_GOTO 0
#endif

#ifndef YY_ClntParser_PURE

 #line 130 "../bison++/bison.cc"

#line 130 "../bison++/bison.cc"
/*  YY_ClntParser_PURE */
#endif

/* section apres lecture def, avant lecture grammaire S2 */

 #line 134 "../bison++/bison.cc"

#line 134 "../bison++/bison.cc"
/* prefix */
#ifndef YY_ClntParser_DEBUG

 #line 136 "../bison++/bison.cc"
<<<<<<< HEAD
=======
#define YY_ClntParser_DEBUG 1
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d

#line 136 "../bison++/bison.cc"
/* YY_ClntParser_DEBUG */
#endif


#ifndef YY_ClntParser_LSP_NEEDED

 #line 141 "../bison++/bison.cc"

#line 141 "../bison++/bison.cc"
 /* YY_ClntParser_LSP_NEEDED*/
#endif



/* DEFAULT LTYPE*/
#ifdef YY_ClntParser_LSP_NEEDED
#ifndef YY_ClntParser_LTYPE
#ifndef BISON_YYLTYPE_ISDECLARED
#define BISON_YYLTYPE_ISDECLARED
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#endif
#define YY_ClntParser_LTYPE yyltype
#endif
#endif
/* DEFAULT STYPE*/
      /* We used to use `unsigned long' as YY_ClntParser_STYPE on MSDOS,
	 but it seems better to be consistent.
	 Most programs should declare their own type anyway.  */

#ifndef YY_ClntParser_STYPE
#define YY_ClntParser_STYPE int
#endif
/* DEFAULT MISCELANEOUS */
#ifndef YY_ClntParser_PARSE
#define YY_ClntParser_PARSE yyparse
#endif
#ifndef YY_ClntParser_LEX
#define YY_ClntParser_LEX yylex
#endif
#ifndef YY_ClntParser_LVAL
#define YY_ClntParser_LVAL yylval
#endif
#ifndef YY_ClntParser_LLOC
#define YY_ClntParser_LLOC yylloc
#endif
#ifndef YY_ClntParser_CHAR
#define YY_ClntParser_CHAR yychar
#endif
#ifndef YY_ClntParser_NERRS
#define YY_ClntParser_NERRS yynerrs
#endif
#ifndef YY_ClntParser_DEBUG_FLAG
#define YY_ClntParser_DEBUG_FLAG yydebug
#endif
#ifndef YY_ClntParser_ERROR
#define YY_ClntParser_ERROR yyerror
#endif

#ifndef YY_ClntParser_PARSE_PARAM
 #ifndef YY_USE_CLASS
  #ifdef YYPARSE_PARAM
   #define YY_ClntParser_PARSE_PARAM void* YYPARSE_PARAM 
  #else
   #ifndef __STDC__
    #ifndef __cplusplus
     #define YY_ClntParser_PARSE_PARAM
    #endif
   #endif
  #endif
 #endif
 #ifndef YY_ClntParser_PARSE_PARAM
  #define YY_ClntParser_PARSE_PARAM void
 #endif
#endif

#if YY_ClntParser_COMPATIBILITY != 0
/* backward compatibility */
#ifdef YY_ClntParser_LTYPE
#ifndef YYLTYPE
#define YYLTYPE YY_ClntParser_LTYPE
#else
/* WARNING obsolete !!! user defined YYLTYPE not reported into generated header */
#endif
#endif

/* Removed due to bison compabilityproblems
/#ifndef YYSTYPE
/#define YYSTYPE YY_ClntParser_STYPE
/#else*/
/* WARNING obsolete !!! user defined YYSTYPE not reported into generated header */
/*#endif*/

#ifdef YY_ClntParser_PURE
#  ifndef YYPURE
#    define YYPURE YY_ClntParser_PURE
#  endif
#endif

#ifdef YY_ClntParser_DEBUG
#  ifndef YYDEBUG
#    define YYDEBUG YY_ClntParser_DEBUG 
#  endif
#endif

#ifndef YY_ClntParser_ERROR_VERBOSE
 #ifdef YYERROR_VERBOSE
  #define YY_ClntParser_ERROR_VERBOSE YYERROR_VERBOSE
 #endif
#endif

#ifndef YY_ClntParser_LSP_NEEDED
#  ifdef YYLSP_NEEDED
#    define YY_ClntParser_LSP_NEEDED YYLSP_NEEDED
#  endif
#endif

#endif

#ifndef YY_USE_CLASS
/* TOKEN C */

 #line 263 "../bison++/bison.cc"
#define	T1_	258
#define	T2_	259
#define	PREF_TIME_	260
#define	DNS_SERVER_	261
#define	VALID_TIME_	262
#define	UNICAST_	263
#define	NTP_SERVER_	264
#define	DOMAIN_	265
#define	TIME_ZONE_	266
#define	SIP_SERVER_	267
#define	SIP_DOMAIN_	268
#define	NIS_SERVER_	269
#define	NISP_SERVER_	270
#define	NIS_DOMAIN_	271
#define	NISP_DOMAIN_	272
#define	FQDN_	273
#define	FQDN_S_	274
<<<<<<< HEAD
#define	LIFETIME_	275
#define	VENDOR_SPEC_	276
#define	IFACE_	277
#define	NO_CONFIG_	278
#define	REJECT_SERVERS_	279
#define	PREFERRED_SERVERS_	280
#define	IA_	281
#define	TA_	282
#define	IAID_	283
#define	ADDRESS_	284
#define	NAME_	285
#define	IPV6ADDR_	286
#define	WORKDIR_	287
#define	RAPID_COMMIT_	288
#define	OPTION_	289
#define	SCRIPTS_DIR_	290
#define	NOTIFY_SCRIPTS_	291
#define	LOGNAME_	292
#define	LOGLEVEL_	293
#define	LOGMODE_	294
#define	LOGCOLORS_	295
#define	STRING_	296
#define	HEXNUMBER_	297
#define	INTNUMBER_	298
#define	DUID_	299
#define	STRICT_RFC_NO_ROUTING_	300
#define	SKIP_CONFIRM_	301
#define	PD_	302
#define	PREFIX_	303
#define	DUID_TYPE_	304
#define	DUID_TYPE_LLT_	305
#define	DUID_TYPE_LL_	306
#define	DUID_TYPE_EN_	307
#define	AUTH_ENABLED_	308
#define	AUTH_ACCEPT_METHODS_	309
#define	DIGEST_NONE_	310
#define	DIGEST_PLAIN_	311
#define	DIGEST_HMAC_MD5_	312
#define	DIGEST_HMAC_SHA1_	313
#define	DIGEST_HMAC_SHA224_	314
#define	DIGEST_HMAC_SHA256_	315
#define	DIGEST_HMAC_SHA384_	316
#define	DIGEST_HMAC_SHA512_	317
#define	STATELESS_	318
#define	ANON_INF_REQUEST_	319
#define	INSIST_MODE_	320
#define	INACTIVE_MODE_	321
#define	EXPERIMENTAL_	322
#define	ADDR_PARAMS_	323
#define	REMOTE_AUTOCONF_	324
#define	AFTR_	325
#define	ADDRESS_LIST_	326
#define	STRING_KEYWORD_	327
#define	REQUEST_	328
#define	RECONFIGURE_	329
=======
#define	DDNS_PROTOCOL_	275
#define	DDNS_TIMEOUT_	276
#define	LIFETIME_	277
#define	VENDOR_SPEC_	278
#define	IFACE_	279
#define	NO_CONFIG_	280
#define	REJECT_SERVERS_	281
#define	PREFERRED_SERVERS_	282
#define	IA_	283
#define	TA_	284
#define	IAID_	285
#define	ADDRESS_	286
#define	NAME_	287
#define	IPV6ADDR_	288
#define	WORKDIR_	289
#define	RAPID_COMMIT_	290
#define	OPTION_	291
#define	SCRIPT_	292
#define	LOGNAME_	293
#define	LOGLEVEL_	294
#define	LOGMODE_	295
#define	LOGCOLORS_	296
#define	STRING_	297
#define	HEXNUMBER_	298
#define	INTNUMBER_	299
#define	DUID_	300
#define	STRICT_RFC_NO_ROUTING_	301
#define	SKIP_CONFIRM_	302
#define	PD_	303
#define	PREFIX_	304
#define	DUID_TYPE_	305
#define	DUID_TYPE_LLT_	306
#define	DUID_TYPE_LL_	307
#define	DUID_TYPE_EN_	308
#define	AUTH_ENABLED_	309
#define	AUTH_ACCEPT_METHODS_	310
#define	DIGEST_NONE_	311
#define	DIGEST_PLAIN_	312
#define	DIGEST_HMAC_MD5_	313
#define	DIGEST_HMAC_SHA1_	314
#define	DIGEST_HMAC_SHA224_	315
#define	DIGEST_HMAC_SHA256_	316
#define	DIGEST_HMAC_SHA384_	317
#define	DIGEST_HMAC_SHA512_	318
#define	STATELESS_	319
#define	ANON_INF_REQUEST_	320
#define	INSIST_MODE_	321
#define	INACTIVE_MODE_	322
#define	EXPERIMENTAL_	323
#define	ADDR_PARAMS_	324
#define	REMOTE_AUTOCONF_	325
#define	AFTR_	326
#define	ROUTING_	327
#define	ADDRESS_LIST_	328
#define	STRING_KEYWORD_	329
#define	REQUEST_	330
#define	RECONFIGURE_	331
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d


#line 263 "../bison++/bison.cc"
 /* #defines tokens */
#else
/* CLASS */
#ifndef YY_ClntParser_CLASS
#define YY_ClntParser_CLASS ClntParser
#endif
#ifndef YY_ClntParser_INHERIT
#define YY_ClntParser_INHERIT
#endif
#ifndef YY_ClntParser_MEMBERS
#define YY_ClntParser_MEMBERS 
#endif
#ifndef YY_ClntParser_LEX_BODY
#define YY_ClntParser_LEX_BODY  
#endif
#ifndef YY_ClntParser_ERROR_BODY
#define YY_ClntParser_ERROR_BODY  
#endif
#ifndef YY_ClntParser_CONSTRUCTOR_PARAM
#define YY_ClntParser_CONSTRUCTOR_PARAM
#endif
#ifndef YY_ClntParser_CONSTRUCTOR_CODE
#define YY_ClntParser_CONSTRUCTOR_CODE
#endif
#ifndef YY_ClntParser_CONSTRUCTOR_INIT
#define YY_ClntParser_CONSTRUCTOR_INIT
#endif
/* choose between enum and const */
#ifndef YY_ClntParser_USE_CONST_TOKEN
#define YY_ClntParser_USE_CONST_TOKEN 0
/* yes enum is more compatible with flex,  */
/* so by default we use it */ 
#endif
#if YY_ClntParser_USE_CONST_TOKEN != 0
#ifndef YY_ClntParser_ENUM_TOKEN
#define YY_ClntParser_ENUM_TOKEN yy_ClntParser_enum_token
#endif
#endif

class YY_ClntParser_CLASS YY_ClntParser_INHERIT
{
public: 
#if YY_ClntParser_USE_CONST_TOKEN != 0
/* static const int token ... */

 #line 307 "../bison++/bison.cc"
static const int T1_;
static const int T2_;
static const int PREF_TIME_;
static const int DNS_SERVER_;
static const int VALID_TIME_;
static const int UNICAST_;
static const int NTP_SERVER_;
static const int DOMAIN_;
static const int TIME_ZONE_;
static const int SIP_SERVER_;
static const int SIP_DOMAIN_;
static const int NIS_SERVER_;
static const int NISP_SERVER_;
static const int NIS_DOMAIN_;
static const int NISP_DOMAIN_;
static const int FQDN_;
static const int FQDN_S_;
<<<<<<< HEAD
=======
static const int DDNS_PROTOCOL_;
static const int DDNS_TIMEOUT_;
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
static const int LIFETIME_;
static const int VENDOR_SPEC_;
static const int IFACE_;
static const int NO_CONFIG_;
static const int REJECT_SERVERS_;
static const int PREFERRED_SERVERS_;
static const int IA_;
static const int TA_;
static const int IAID_;
static const int ADDRESS_;
static const int NAME_;
static const int IPV6ADDR_;
static const int WORKDIR_;
static const int RAPID_COMMIT_;
static const int OPTION_;
<<<<<<< HEAD
static const int SCRIPTS_DIR_;
static const int NOTIFY_SCRIPTS_;
=======
static const int SCRIPT_;
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
static const int LOGNAME_;
static const int LOGLEVEL_;
static const int LOGMODE_;
static const int LOGCOLORS_;
static const int STRING_;
static const int HEXNUMBER_;
static const int INTNUMBER_;
static const int DUID_;
static const int STRICT_RFC_NO_ROUTING_;
static const int SKIP_CONFIRM_;
static const int PD_;
static const int PREFIX_;
static const int DUID_TYPE_;
static const int DUID_TYPE_LLT_;
static const int DUID_TYPE_LL_;
static const int DUID_TYPE_EN_;
static const int AUTH_ENABLED_;
static const int AUTH_ACCEPT_METHODS_;
static const int DIGEST_NONE_;
static const int DIGEST_PLAIN_;
static const int DIGEST_HMAC_MD5_;
static const int DIGEST_HMAC_SHA1_;
static const int DIGEST_HMAC_SHA224_;
static const int DIGEST_HMAC_SHA256_;
static const int DIGEST_HMAC_SHA384_;
static const int DIGEST_HMAC_SHA512_;
static const int STATELESS_;
static const int ANON_INF_REQUEST_;
static const int INSIST_MODE_;
static const int INACTIVE_MODE_;
static const int EXPERIMENTAL_;
static const int ADDR_PARAMS_;
static const int REMOTE_AUTOCONF_;
static const int AFTR_;
<<<<<<< HEAD
=======
static const int ROUTING_;
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
static const int ADDRESS_LIST_;
static const int STRING_KEYWORD_;
static const int REQUEST_;
static const int RECONFIGURE_;


#line 307 "../bison++/bison.cc"
 /* decl const */
#else
enum YY_ClntParser_ENUM_TOKEN { YY_ClntParser_NULL_TOKEN=0

 #line 310 "../bison++/bison.cc"
	,T1_=258
	,T2_=259
	,PREF_TIME_=260
	,DNS_SERVER_=261
	,VALID_TIME_=262
	,UNICAST_=263
	,NTP_SERVER_=264
	,DOMAIN_=265
	,TIME_ZONE_=266
	,SIP_SERVER_=267
	,SIP_DOMAIN_=268
	,NIS_SERVER_=269
	,NISP_SERVER_=270
	,NIS_DOMAIN_=271
	,NISP_DOMAIN_=272
	,FQDN_=273
	,FQDN_S_=274
<<<<<<< HEAD
	,LIFETIME_=275
	,VENDOR_SPEC_=276
	,IFACE_=277
	,NO_CONFIG_=278
	,REJECT_SERVERS_=279
	,PREFERRED_SERVERS_=280
	,IA_=281
	,TA_=282
	,IAID_=283
	,ADDRESS_=284
	,NAME_=285
	,IPV6ADDR_=286
	,WORKDIR_=287
	,RAPID_COMMIT_=288
	,OPTION_=289
	,SCRIPTS_DIR_=290
	,NOTIFY_SCRIPTS_=291
	,LOGNAME_=292
	,LOGLEVEL_=293
	,LOGMODE_=294
	,LOGCOLORS_=295
	,STRING_=296
	,HEXNUMBER_=297
	,INTNUMBER_=298
	,DUID_=299
	,STRICT_RFC_NO_ROUTING_=300
	,SKIP_CONFIRM_=301
	,PD_=302
	,PREFIX_=303
	,DUID_TYPE_=304
	,DUID_TYPE_LLT_=305
	,DUID_TYPE_LL_=306
	,DUID_TYPE_EN_=307
	,AUTH_ENABLED_=308
	,AUTH_ACCEPT_METHODS_=309
	,DIGEST_NONE_=310
	,DIGEST_PLAIN_=311
	,DIGEST_HMAC_MD5_=312
	,DIGEST_HMAC_SHA1_=313
	,DIGEST_HMAC_SHA224_=314
	,DIGEST_HMAC_SHA256_=315
	,DIGEST_HMAC_SHA384_=316
	,DIGEST_HMAC_SHA512_=317
	,STATELESS_=318
	,ANON_INF_REQUEST_=319
	,INSIST_MODE_=320
	,INACTIVE_MODE_=321
	,EXPERIMENTAL_=322
	,ADDR_PARAMS_=323
	,REMOTE_AUTOCONF_=324
	,AFTR_=325
	,ADDRESS_LIST_=326
	,STRING_KEYWORD_=327
	,REQUEST_=328
	,RECONFIGURE_=329
=======
	,DDNS_PROTOCOL_=275
	,DDNS_TIMEOUT_=276
	,LIFETIME_=277
	,VENDOR_SPEC_=278
	,IFACE_=279
	,NO_CONFIG_=280
	,REJECT_SERVERS_=281
	,PREFERRED_SERVERS_=282
	,IA_=283
	,TA_=284
	,IAID_=285
	,ADDRESS_=286
	,NAME_=287
	,IPV6ADDR_=288
	,WORKDIR_=289
	,RAPID_COMMIT_=290
	,OPTION_=291
	,SCRIPT_=292
	,LOGNAME_=293
	,LOGLEVEL_=294
	,LOGMODE_=295
	,LOGCOLORS_=296
	,STRING_=297
	,HEXNUMBER_=298
	,INTNUMBER_=299
	,DUID_=300
	,STRICT_RFC_NO_ROUTING_=301
	,SKIP_CONFIRM_=302
	,PD_=303
	,PREFIX_=304
	,DUID_TYPE_=305
	,DUID_TYPE_LLT_=306
	,DUID_TYPE_LL_=307
	,DUID_TYPE_EN_=308
	,AUTH_ENABLED_=309
	,AUTH_ACCEPT_METHODS_=310
	,DIGEST_NONE_=311
	,DIGEST_PLAIN_=312
	,DIGEST_HMAC_MD5_=313
	,DIGEST_HMAC_SHA1_=314
	,DIGEST_HMAC_SHA224_=315
	,DIGEST_HMAC_SHA256_=316
	,DIGEST_HMAC_SHA384_=317
	,DIGEST_HMAC_SHA512_=318
	,STATELESS_=319
	,ANON_INF_REQUEST_=320
	,INSIST_MODE_=321
	,INACTIVE_MODE_=322
	,EXPERIMENTAL_=323
	,ADDR_PARAMS_=324
	,REMOTE_AUTOCONF_=325
	,AFTR_=326
	,ROUTING_=327
	,ADDRESS_LIST_=328
	,STRING_KEYWORD_=329
	,REQUEST_=330
	,RECONFIGURE_=331
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d


#line 310 "../bison++/bison.cc"
 /* enum token */
     }; /* end of enum declaration */
#endif
public:
 int YY_ClntParser_PARSE (YY_ClntParser_PARSE_PARAM);
 virtual void YY_ClntParser_ERROR(char *msg) YY_ClntParser_ERROR_BODY;
#ifdef YY_ClntParser_PURE
#ifdef YY_ClntParser_LSP_NEEDED
 virtual int  YY_ClntParser_LEX (YY_ClntParser_STYPE *YY_ClntParser_LVAL,YY_ClntParser_LTYPE *YY_ClntParser_LLOC) YY_ClntParser_LEX_BODY;
#else
 virtual int  YY_ClntParser_LEX (YY_ClntParser_STYPE *YY_ClntParser_LVAL) YY_ClntParser_LEX_BODY;
#endif
#else
 virtual int YY_ClntParser_LEX() YY_ClntParser_LEX_BODY;
 YY_ClntParser_STYPE YY_ClntParser_LVAL;
#ifdef YY_ClntParser_LSP_NEEDED
 YY_ClntParser_LTYPE YY_ClntParser_LLOC;
#endif
 int   YY_ClntParser_NERRS;
 int    YY_ClntParser_CHAR;
#endif
#if YY_ClntParser_DEBUG != 0
 int YY_ClntParser_DEBUG_FLAG;   /*  nonzero means print parse trace     */
#endif
public:
 YY_ClntParser_CLASS(YY_ClntParser_CONSTRUCTOR_PARAM);
public:
 YY_ClntParser_MEMBERS 
};
/* other declare folow */
#if YY_ClntParser_USE_CONST_TOKEN != 0

 #line 341 "../bison++/bison.cc"
const int YY_ClntParser_CLASS::T1_=258;
const int YY_ClntParser_CLASS::T2_=259;
const int YY_ClntParser_CLASS::PREF_TIME_=260;
const int YY_ClntParser_CLASS::DNS_SERVER_=261;
const int YY_ClntParser_CLASS::VALID_TIME_=262;
const int YY_ClntParser_CLASS::UNICAST_=263;
const int YY_ClntParser_CLASS::NTP_SERVER_=264;
const int YY_ClntParser_CLASS::DOMAIN_=265;
const int YY_ClntParser_CLASS::TIME_ZONE_=266;
const int YY_ClntParser_CLASS::SIP_SERVER_=267;
const int YY_ClntParser_CLASS::SIP_DOMAIN_=268;
const int YY_ClntParser_CLASS::NIS_SERVER_=269;
const int YY_ClntParser_CLASS::NISP_SERVER_=270;
const int YY_ClntParser_CLASS::NIS_DOMAIN_=271;
const int YY_ClntParser_CLASS::NISP_DOMAIN_=272;
const int YY_ClntParser_CLASS::FQDN_=273;
const int YY_ClntParser_CLASS::FQDN_S_=274;
<<<<<<< HEAD
const int YY_ClntParser_CLASS::LIFETIME_=275;
const int YY_ClntParser_CLASS::VENDOR_SPEC_=276;
const int YY_ClntParser_CLASS::IFACE_=277;
const int YY_ClntParser_CLASS::NO_CONFIG_=278;
const int YY_ClntParser_CLASS::REJECT_SERVERS_=279;
const int YY_ClntParser_CLASS::PREFERRED_SERVERS_=280;
const int YY_ClntParser_CLASS::IA_=281;
const int YY_ClntParser_CLASS::TA_=282;
const int YY_ClntParser_CLASS::IAID_=283;
const int YY_ClntParser_CLASS::ADDRESS_=284;
const int YY_ClntParser_CLASS::NAME_=285;
const int YY_ClntParser_CLASS::IPV6ADDR_=286;
const int YY_ClntParser_CLASS::WORKDIR_=287;
const int YY_ClntParser_CLASS::RAPID_COMMIT_=288;
const int YY_ClntParser_CLASS::OPTION_=289;
const int YY_ClntParser_CLASS::SCRIPTS_DIR_=290;
const int YY_ClntParser_CLASS::NOTIFY_SCRIPTS_=291;
const int YY_ClntParser_CLASS::LOGNAME_=292;
const int YY_ClntParser_CLASS::LOGLEVEL_=293;
const int YY_ClntParser_CLASS::LOGMODE_=294;
const int YY_ClntParser_CLASS::LOGCOLORS_=295;
const int YY_ClntParser_CLASS::STRING_=296;
const int YY_ClntParser_CLASS::HEXNUMBER_=297;
const int YY_ClntParser_CLASS::INTNUMBER_=298;
const int YY_ClntParser_CLASS::DUID_=299;
const int YY_ClntParser_CLASS::STRICT_RFC_NO_ROUTING_=300;
const int YY_ClntParser_CLASS::SKIP_CONFIRM_=301;
const int YY_ClntParser_CLASS::PD_=302;
const int YY_ClntParser_CLASS::PREFIX_=303;
const int YY_ClntParser_CLASS::DUID_TYPE_=304;
const int YY_ClntParser_CLASS::DUID_TYPE_LLT_=305;
const int YY_ClntParser_CLASS::DUID_TYPE_LL_=306;
const int YY_ClntParser_CLASS::DUID_TYPE_EN_=307;
const int YY_ClntParser_CLASS::AUTH_ENABLED_=308;
const int YY_ClntParser_CLASS::AUTH_ACCEPT_METHODS_=309;
const int YY_ClntParser_CLASS::DIGEST_NONE_=310;
const int YY_ClntParser_CLASS::DIGEST_PLAIN_=311;
const int YY_ClntParser_CLASS::DIGEST_HMAC_MD5_=312;
const int YY_ClntParser_CLASS::DIGEST_HMAC_SHA1_=313;
const int YY_ClntParser_CLASS::DIGEST_HMAC_SHA224_=314;
const int YY_ClntParser_CLASS::DIGEST_HMAC_SHA256_=315;
const int YY_ClntParser_CLASS::DIGEST_HMAC_SHA384_=316;
const int YY_ClntParser_CLASS::DIGEST_HMAC_SHA512_=317;
const int YY_ClntParser_CLASS::STATELESS_=318;
const int YY_ClntParser_CLASS::ANON_INF_REQUEST_=319;
const int YY_ClntParser_CLASS::INSIST_MODE_=320;
const int YY_ClntParser_CLASS::INACTIVE_MODE_=321;
const int YY_ClntParser_CLASS::EXPERIMENTAL_=322;
const int YY_ClntParser_CLASS::ADDR_PARAMS_=323;
const int YY_ClntParser_CLASS::REMOTE_AUTOCONF_=324;
const int YY_ClntParser_CLASS::AFTR_=325;
const int YY_ClntParser_CLASS::ADDRESS_LIST_=326;
const int YY_ClntParser_CLASS::STRING_KEYWORD_=327;
const int YY_ClntParser_CLASS::REQUEST_=328;
const int YY_ClntParser_CLASS::RECONFIGURE_=329;
=======
const int YY_ClntParser_CLASS::DDNS_PROTOCOL_=275;
const int YY_ClntParser_CLASS::DDNS_TIMEOUT_=276;
const int YY_ClntParser_CLASS::LIFETIME_=277;
const int YY_ClntParser_CLASS::VENDOR_SPEC_=278;
const int YY_ClntParser_CLASS::IFACE_=279;
const int YY_ClntParser_CLASS::NO_CONFIG_=280;
const int YY_ClntParser_CLASS::REJECT_SERVERS_=281;
const int YY_ClntParser_CLASS::PREFERRED_SERVERS_=282;
const int YY_ClntParser_CLASS::IA_=283;
const int YY_ClntParser_CLASS::TA_=284;
const int YY_ClntParser_CLASS::IAID_=285;
const int YY_ClntParser_CLASS::ADDRESS_=286;
const int YY_ClntParser_CLASS::NAME_=287;
const int YY_ClntParser_CLASS::IPV6ADDR_=288;
const int YY_ClntParser_CLASS::WORKDIR_=289;
const int YY_ClntParser_CLASS::RAPID_COMMIT_=290;
const int YY_ClntParser_CLASS::OPTION_=291;
const int YY_ClntParser_CLASS::SCRIPT_=292;
const int YY_ClntParser_CLASS::LOGNAME_=293;
const int YY_ClntParser_CLASS::LOGLEVEL_=294;
const int YY_ClntParser_CLASS::LOGMODE_=295;
const int YY_ClntParser_CLASS::LOGCOLORS_=296;
const int YY_ClntParser_CLASS::STRING_=297;
const int YY_ClntParser_CLASS::HEXNUMBER_=298;
const int YY_ClntParser_CLASS::INTNUMBER_=299;
const int YY_ClntParser_CLASS::DUID_=300;
const int YY_ClntParser_CLASS::STRICT_RFC_NO_ROUTING_=301;
const int YY_ClntParser_CLASS::SKIP_CONFIRM_=302;
const int YY_ClntParser_CLASS::PD_=303;
const int YY_ClntParser_CLASS::PREFIX_=304;
const int YY_ClntParser_CLASS::DUID_TYPE_=305;
const int YY_ClntParser_CLASS::DUID_TYPE_LLT_=306;
const int YY_ClntParser_CLASS::DUID_TYPE_LL_=307;
const int YY_ClntParser_CLASS::DUID_TYPE_EN_=308;
const int YY_ClntParser_CLASS::AUTH_ENABLED_=309;
const int YY_ClntParser_CLASS::AUTH_ACCEPT_METHODS_=310;
const int YY_ClntParser_CLASS::DIGEST_NONE_=311;
const int YY_ClntParser_CLASS::DIGEST_PLAIN_=312;
const int YY_ClntParser_CLASS::DIGEST_HMAC_MD5_=313;
const int YY_ClntParser_CLASS::DIGEST_HMAC_SHA1_=314;
const int YY_ClntParser_CLASS::DIGEST_HMAC_SHA224_=315;
const int YY_ClntParser_CLASS::DIGEST_HMAC_SHA256_=316;
const int YY_ClntParser_CLASS::DIGEST_HMAC_SHA384_=317;
const int YY_ClntParser_CLASS::DIGEST_HMAC_SHA512_=318;
const int YY_ClntParser_CLASS::STATELESS_=319;
const int YY_ClntParser_CLASS::ANON_INF_REQUEST_=320;
const int YY_ClntParser_CLASS::INSIST_MODE_=321;
const int YY_ClntParser_CLASS::INACTIVE_MODE_=322;
const int YY_ClntParser_CLASS::EXPERIMENTAL_=323;
const int YY_ClntParser_CLASS::ADDR_PARAMS_=324;
const int YY_ClntParser_CLASS::REMOTE_AUTOCONF_=325;
const int YY_ClntParser_CLASS::AFTR_=326;
const int YY_ClntParser_CLASS::ROUTING_=327;
const int YY_ClntParser_CLASS::ADDRESS_LIST_=328;
const int YY_ClntParser_CLASS::STRING_KEYWORD_=329;
const int YY_ClntParser_CLASS::REQUEST_=330;
const int YY_ClntParser_CLASS::RECONFIGURE_=331;
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d


#line 341 "../bison++/bison.cc"
 /* const YY_ClntParser_CLASS::token */
#endif
/*apres const  */
YY_ClntParser_CLASS::YY_ClntParser_CLASS(YY_ClntParser_CONSTRUCTOR_PARAM) YY_ClntParser_CONSTRUCTOR_INIT
{
#if YY_ClntParser_DEBUG != 0
YY_ClntParser_DEBUG_FLAG=0;
#endif
YY_ClntParser_CONSTRUCTOR_CODE;
}
#endif

 #line 352 "../bison++/bison.cc"


<<<<<<< HEAD
#define	YYFINAL		267
#define	YYFLAG		-32768
#define	YYNTBASE	80

#define YYTRANSLATE(x) ((unsigned)(x) <= 329 ? yytranslate[x] : 170)
=======
#define	YYFINAL		279
#define	YYFLAG		-32768
#define	YYNTBASE	82

#define YYTRANSLATE(x) ((unsigned)(x) <= 331 ? yytranslate[x] : 175)
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
<<<<<<< HEAD
     2,     2,     2,    77,    79,     2,    78,     2,     2,     2,
=======
     2,     2,     2,    79,    81,     2,    80,     2,     2,     2,
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
<<<<<<< HEAD
     2,     2,    75,     2,    76,     2,     2,     2,     2,     2,
=======
     2,     2,    77,     2,    78,     2,     2,     2,     2,     2,
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
<<<<<<< HEAD
    66,    67,    68,    69,    70,    71,    72,    73,    74
=======
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
};

#if YY_ClntParser_DEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     5,     7,    10,    13,    15,    17,    19,
    21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
    41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
    61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
    81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
<<<<<<< HEAD
   101,   103,   104,   111,   112,   119,   124,   129,   133,   137,
   139,   142,   144,   147,   149,   152,   154,   157,   159,   160,
   161,   168,   172,   175,   177,   180,   181,   187,   188,   195,
   199,   201,   204,   206,   209,   211,   214,   215,   221,   222,
   229,   234,   238,   241,   243,   245,   248,   250,   253,   255,
   257,   260,   263,   266,   269,   272,   275,   280,   282,   285,
   287,   290,   293,   294,   298,   300,   304,   306,   308,   310,
   312,   314,   316,   318,   320,   322,   324,   325,   329,   330,
   334,   337,   340,   342,   344,   346,   348,   351,   354,   357,
   360,   362,   366,   367,   373,   375,   378,   380,   382,   384,
   389,   391,   394,   396,   398,   402,   406,   408,   412,   414,
   418,   420,   422,   425,   426,   431,   434,   435,   440,   443,
   444,   449,   452,   456,   459,   460,   465,   468,   469,   474,
   477,   481,   485,   488,   489,   494,   497,   498,   503,   506,
   510,   513,   517,   520,   523,   527,   529,   533,   537,   543,
   546,   551,   556,   557,   563,   568,   573,   578
};

static const short yyrhs[] = {    81,
     0,     0,    82,     0,    85,     0,    81,    82,     0,    81,
    85,     0,    83,     0,   104,     0,   105,     0,   103,     0,
   106,     0,   109,     0,   107,     0,   110,     0,   111,     0,
   112,     0,   113,     0,   117,     0,   118,     0,   119,     0,
   157,     0,   120,     0,   129,     0,   130,     0,   131,     0,
    84,     0,   108,     0,   140,     0,   145,     0,   147,     0,
   149,     0,   151,     0,   152,     0,   154,     0,   156,     0,
   158,     0,   160,     0,   162,     0,   163,     0,   164,     0,
   165,     0,   167,     0,   121,     0,   123,     0,   168,     0,
   128,     0,   133,     0,   134,     0,   126,     0,   102,     0,
   127,     0,     0,    22,    41,    75,    86,    88,    76,     0,
     0,    22,   144,    75,    87,    88,    76,     0,    22,    41,
    75,    76,     0,    22,   144,    75,    76,     0,    22,    41,
    23,     0,    22,   144,    23,     0,    83,     0,    88,    83,
     0,    94,     0,    88,    94,     0,    89,     0,    88,    89,
     0,   135,     0,    88,   135,     0,    27,     0,     0,     0,
    27,    75,    90,    92,    91,    76,     0,    27,    75,    76,
     0,    92,    93,     0,    93,     0,    28,   144,     0,     0,
    26,    75,    95,    97,    76,     0,     0,    26,   144,    75,
    96,    97,    76,     0,    26,    75,    76,     0,    26,     0,
    26,   144,     0,    84,     0,    97,    84,     0,    98,     0,
    97,    98,     0,     0,    29,    75,    99,   101,    76,     0,
     0,    29,   144,    75,   100,   101,    76,     0,    29,   144,
    75,    76,     0,    29,    75,    76,     0,    29,   144,     0,
    29,     0,   102,     0,   101,   102,     0,    31,     0,   101,
    31,     0,   125,     0,   132,     0,    38,   144,     0,    39,
    41,     0,    37,    41,     0,    40,   144,     0,    49,    50,
     0,    49,    51,     0,    49,    52,   144,    44,     0,    63,
     0,    32,    41,     0,    45,     0,    35,    41,     0,    53,
   144,     0,     0,    54,   114,   115,     0,   116,     0,   115,
    77,   116,     0,    57,     0,    58,     0,    59,     0,    60,
     0,    61,     0,    62,     0,    64,     0,    66,     0,    65,
     0,    67,     0,     0,    24,   122,   141,     0,     0,    25,
   124,   141,     0,     5,   144,     0,    33,   144,     0,    68,
     0,    69,     0,    46,     0,    36,     0,    74,   144,     0,
     7,   144,     0,     3,   144,     0,     4,   144,     0,    47,
     0,    47,    75,    76,     0,     0,    47,    75,   136,   137,
    76,     0,   138,     0,   137,   138,     0,   139,     0,   133,
     0,   134,     0,    48,    31,    78,   144,     0,    48,     0,
     8,   144,     0,    31,     0,    44,     0,   141,    77,    31,
     0,   141,    77,    44,     0,    31,     0,   142,    77,    31,
     0,    41,     0,   143,    77,    41,     0,    42,     0,    43,
     0,    34,     6,     0,     0,    34,     6,   146,   142,     0,
    34,    10,     0,     0,    34,    10,   148,   143,     0,    34,
     9,     0,     0,    34,     9,   150,   142,     0,    34,    11,
     0,    34,    11,    41,     0,    34,    12,     0,     0,    34,
    12,   153,   142,     0,    34,    13,     0,     0,    34,    13,
   155,   143,     0,    34,    18,     0,    34,    18,    41,     0,
    34,    19,   144,     0,    34,    14,     0,     0,    34,    14,
   159,   142,     0,    34,    15,     0,     0,    34,    15,   161,
   142,     0,    34,    16,     0,    34,    16,    41,     0,    34,
    17,     0,    34,    17,    41,     0,    34,    20,     0,    34,
    21,     0,    34,    21,   166,     0,   144,     0,   144,    79,
   144,     0,   166,    77,   144,     0,   166,    77,   144,    79,
   144,     0,    34,    70,     0,    34,   144,    79,    44,     0,
    34,   144,    29,    31,     0,     0,    34,   144,    71,   169,
   142,     0,    34,   144,    72,    41,     0,    34,   144,    29,
    73,     0,    34,   144,    41,    73,     0,    34,   144,    71,
     0
=======
   101,   103,   105,   107,   108,   115,   116,   123,   128,   133,
   137,   141,   143,   146,   148,   151,   153,   156,   158,   161,
   163,   164,   165,   172,   176,   179,   181,   184,   185,   191,
   192,   199,   203,   205,   208,   210,   213,   215,   218,   219,
   225,   226,   233,   238,   242,   245,   247,   249,   252,   254,
   257,   259,   261,   264,   267,   270,   273,   276,   279,   284,
   286,   289,   291,   294,   297,   298,   302,   304,   308,   310,
   312,   314,   316,   318,   320,   322,   324,   326,   328,   329,
   333,   334,   338,   341,   344,   346,   348,   350,   353,   356,
   359,   362,   365,   368,   370,   374,   375,   381,   384,   385,
   392,   394,   397,   399,   401,   403,   408,   410,   413,   416,
   418,   420,   424,   428,   430,   434,   436,   440,   442,   444,
   447,   448,   453,   456,   457,   462,   465,   466,   471,   474,
   478,   481,   482,   487,   490,   491,   496,   499,   503,   507,
   510,   511,   516,   519,   520,   525,   528,   532,   535,   539,
   542,   545,   549,   551,   555,   559,   565,   568,   573,   578,
   579,   585,   590,   595,   600
};

static const short yyrhs[] = {    83,
     0,     0,    84,     0,    87,     0,    83,    84,     0,    83,
    87,     0,    85,     0,   106,     0,   107,     0,   105,     0,
   108,     0,   111,     0,   109,     0,   112,     0,   113,     0,
   133,     0,   134,     0,   114,     0,   115,     0,   119,     0,
   120,     0,   121,     0,   162,     0,   122,     0,   131,     0,
   132,     0,    86,     0,   145,     0,   110,     0,   144,     0,
   150,     0,   152,     0,   154,     0,   156,     0,   157,     0,
   159,     0,   161,     0,   163,     0,   165,     0,   167,     0,
   168,     0,   169,     0,   170,     0,   172,     0,   123,     0,
   125,     0,   173,     0,   130,     0,   136,     0,   137,     0,
   128,     0,   104,     0,   129,     0,     0,    24,    42,    77,
    88,    90,    78,     0,     0,    24,   149,    77,    89,    90,
    78,     0,    24,    42,    77,    78,     0,    24,   149,    77,
    78,     0,    24,    42,    25,     0,    24,   149,    25,     0,
    85,     0,    90,    85,     0,    96,     0,    90,    96,     0,
    91,     0,    90,    91,     0,   138,     0,    90,   138,     0,
    29,     0,     0,     0,    29,    77,    92,    94,    93,    78,
     0,    29,    77,    78,     0,    94,    95,     0,    95,     0,
    30,   149,     0,     0,    28,    77,    97,    99,    78,     0,
     0,    28,   149,    77,    98,    99,    78,     0,    28,    77,
    78,     0,    28,     0,    28,   149,     0,    86,     0,    99,
    86,     0,   100,     0,    99,   100,     0,     0,    31,    77,
   101,   103,    78,     0,     0,    31,   149,    77,   102,   103,
    78,     0,    31,   149,    77,    78,     0,    31,    77,    78,
     0,    31,   149,     0,    31,     0,   104,     0,   103,   104,
     0,    33,     0,   103,    33,     0,   127,     0,   135,     0,
    39,   149,     0,    40,    42,     0,    38,    42,     0,    41,
   149,     0,    50,    51,     0,    50,    52,     0,    50,    53,
   149,    45,     0,    64,     0,    34,    42,     0,    46,     0,
    37,    42,     0,    54,   149,     0,     0,    55,   116,   117,
     0,   118,     0,   117,    79,   118,     0,    58,     0,    59,
     0,    60,     0,    61,     0,    62,     0,    63,     0,    65,
     0,    67,     0,    66,     0,    68,     0,     0,    26,   124,
   146,     0,     0,    27,   126,   146,     0,     5,   149,     0,
    35,   149,     0,    69,     0,    70,     0,    47,     0,    76,
   149,     0,    20,    42,     0,    21,   149,     0,     7,   149,
     0,     3,   149,     0,     4,   149,     0,    48,     0,    48,
    77,    78,     0,     0,    48,    77,   139,   141,    78,     0,
    48,   149,     0,     0,    48,   149,    77,   140,   141,    78,
     0,   142,     0,   141,   142,     0,   143,     0,   136,     0,
   137,     0,    49,    33,    80,   149,     0,    49,     0,     8,
   149,     0,    72,   149,     0,    33,     0,    45,     0,   146,
    79,    33,     0,   146,    79,    45,     0,    33,     0,   147,
    79,    33,     0,    42,     0,   148,    79,    42,     0,    43,
     0,    44,     0,    36,     6,     0,     0,    36,     6,   151,
   147,     0,    36,    10,     0,     0,    36,    10,   153,   148,
     0,    36,     9,     0,     0,    36,     9,   155,   147,     0,
    36,    11,     0,    36,    11,    42,     0,    36,    12,     0,
     0,    36,    12,   158,   147,     0,    36,    13,     0,     0,
    36,    13,   160,   148,     0,    36,    18,     0,    36,    18,
    42,     0,    36,    19,   149,     0,    36,    14,     0,     0,
    36,    14,   164,   147,     0,    36,    15,     0,     0,    36,
    15,   166,   147,     0,    36,    16,     0,    36,    16,    42,
     0,    36,    17,     0,    36,    17,    42,     0,    36,    22,
     0,    36,    23,     0,    36,    23,   171,     0,   149,     0,
   149,    81,   149,     0,   171,    79,   149,     0,   171,    79,
   149,    81,   149,     0,    36,    71,     0,    36,   149,    81,
    45,     0,    36,   149,    31,    33,     0,     0,    36,   149,
    73,   174,   147,     0,    36,   149,    74,    42,     0,    36,
   149,    31,    75,     0,    36,   149,    42,    75,     0,    36,
   149,    73,     0
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
};

#endif

#if (YY_ClntParser_DEBUG != 0) || defined(YY_ClntParser_ERROR_VERBOSE) 
static const short yyrline[] = { 0,
<<<<<<< HEAD
   134,   135,   139,   140,   141,   142,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   163,   164,   168,   169,   170,   171,   172,
   173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
   183,   184,   185,   186,   187,   188,   192,   193,   194,   195,
   196,   203,   208,   218,   225,   234,   246,   257,   270,   284,
   285,   286,   287,   288,   289,   290,   291,   298,   303,   310,
   316,   316,   324,   325,   329,   341,   345,   350,   355,   365,
   374,   380,   391,   392,   393,   394,   398,   404,   413,   418,
   424,   429,   434,   439,   446,   447,   448,   458,   471,   472,
   476,   486,   491,   496,   502,   503,   504,   512,   519,   526,
   535,   541,   544,   547,   552,   553,   557,   558,   559,   560,
   561,   562,   566,   572,   578,   584,   591,   596,   602,   605,
   612,   619,   626,   637,   654,   661,   668,   676,   683,   690,
   697,   703,   709,   713,   720,   721,   725,   726,   727,   731,
   738,   747,   765,   769,   773,   777,   784,   785,   789,   790,
   793,   794,   801,   807,   811,   820,   825,   828,   837,   843,
   846,   855,   859,   869,   875,   878,   887,   892,   895,   904,
   908,   915,   930,   936,   939,   948,   954,   957,   966,   970,
   981,   985,   995,  1002,  1007,  1015,  1016,  1017,  1018,  1022,
  1029,  1035,  1043,  1047,  1053,  1059,  1065,  1071
=======
   136,   137,   141,   142,   143,   144,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   171,   172,   173,   174,
   175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
   185,   186,   187,   188,   189,   190,   191,   192,   196,   197,
   198,   199,   200,   207,   212,   222,   229,   238,   250,   261,
   274,   288,   289,   290,   291,   292,   293,   294,   295,   302,
   307,   314,   320,   320,   328,   329,   333,   345,   349,   354,
   359,   369,   378,   384,   395,   396,   397,   398,   402,   408,
   417,   422,   428,   433,   438,   443,   450,   451,   452,   462,
   475,   476,   480,   490,   495,   500,   506,   507,   508,   516,
   523,   530,   539,   545,   548,   551,   556,   557,   561,   562,
   563,   564,   565,   566,   570,   576,   582,   588,   595,   600,
   606,   609,   616,   623,   630,   641,   658,   665,   672,   689,
   697,   704,   711,   718,   724,   730,   734,   738,   745,   750,
   758,   759,   763,   764,   765,   769,   776,   784,   802,   819,
   823,   827,   831,   838,   839,   843,   844,   847,   848,   855,
   861,   865,   874,   879,   882,   891,   897,   900,   909,   913,
   923,   929,   932,   941,   946,   949,   958,   962,   969,   984,
   990,   993,  1002,  1008,  1011,  1020,  1024,  1035,  1039,  1049,
  1056,  1061,  1069,  1070,  1071,  1072,  1076,  1083,  1089,  1097,
  1101,  1107,  1113,  1119,  1125
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
};

static const char * const yytname[] = {   "$","error","$illegal.","T1_","T2_",
"PREF_TIME_","DNS_SERVER_","VALID_TIME_","UNICAST_","NTP_SERVER_","DOMAIN_",
"TIME_ZONE_","SIP_SERVER_","SIP_DOMAIN_","NIS_SERVER_","NISP_SERVER_","NIS_DOMAIN_",
<<<<<<< HEAD
"NISP_DOMAIN_","FQDN_","FQDN_S_","LIFETIME_","VENDOR_SPEC_","IFACE_","NO_CONFIG_",
"REJECT_SERVERS_","PREFERRED_SERVERS_","IA_","TA_","IAID_","ADDRESS_","NAME_",
"IPV6ADDR_","WORKDIR_","RAPID_COMMIT_","OPTION_","SCRIPTS_DIR_","NOTIFY_SCRIPTS_",
"LOGNAME_","LOGLEVEL_","LOGMODE_","LOGCOLORS_","STRING_","HEXNUMBER_","INTNUMBER_",
"DUID_","STRICT_RFC_NO_ROUTING_","SKIP_CONFIRM_","PD_","PREFIX_","DUID_TYPE_",
"DUID_TYPE_LLT_","DUID_TYPE_LL_","DUID_TYPE_EN_","AUTH_ENABLED_","AUTH_ACCEPT_METHODS_",
"DIGEST_NONE_","DIGEST_PLAIN_","DIGEST_HMAC_MD5_","DIGEST_HMAC_SHA1_","DIGEST_HMAC_SHA224_",
"DIGEST_HMAC_SHA256_","DIGEST_HMAC_SHA384_","DIGEST_HMAC_SHA512_","STATELESS_",
"ANON_INF_REQUEST_","INSIST_MODE_","INACTIVE_MODE_","EXPERIMENTAL_","ADDR_PARAMS_",
"REMOTE_AUTOCONF_","AFTR_","ADDRESS_LIST_","STRING_KEYWORD_","REQUEST_","RECONFIGURE_",
"'{'","'}'","','","'/'","'-'","Grammar","GlobalDeclarationList","GlobalOptionDeclaration",
"InterfaceOptionDeclaration","IAOptionDeclaration","InterfaceDeclaration","@1",
"@2","InterfaceDeclarationsList","TADeclaration","@3","@4","TADeclarationList",
"IAID","IADeclaration","@5","@6","IADeclarationList","ADDRESDeclaration","@7",
"@8","ADDRESDeclarationList","ADDRESOptionDeclaration","LogLevelOption","LogModeOption",
"LogNameOption","LogColors","DuidTypeOption","NoIAsOptions","WorkDirOption",
"StrictRfcNoRoutingOption","ScriptsDir","AuthEnabledOption","AuthAcceptOption",
"@9","DigestList","Digest","AnonInfRequest","InactiveMode","InsistMode","Experimental",
"RejectServersOption","@10","PreferServersOption","@11","PreferredTimeOption",
"RapidCommitOption","ExperimentalAddrParams","ExperimentalRemoteAutoconf","SkipConfirm",
"NotifyScripts","ReconfigureAccept","ValidTimeOption","T1Option","T2Option",
"PDDeclaration","@12","PDOptionsList","PDOption","Prefix","UnicastOption","ADDRESDUIDList",
"ADDRESSList","StringList","Number","DNSServerOption","@13","DomainOption","@14",
"NTPServerOption","@15","TimeZoneOption","SIPServerOption","@16","SIPDomainOption",
"@17","FQDNOption","FQDNBits","NISServerOption","@18","NISPServerOption","@19",
"NISDomainOption","NISPDomainOption","LifetimeOption","VendorSpecOption","VendorSpecList",
"DsLiteTunnelOption","ExtraOption","@20",""
=======
"NISP_DOMAIN_","FQDN_","FQDN_S_","DDNS_PROTOCOL_","DDNS_TIMEOUT_","LIFETIME_",
"VENDOR_SPEC_","IFACE_","NO_CONFIG_","REJECT_SERVERS_","PREFERRED_SERVERS_",
"IA_","TA_","IAID_","ADDRESS_","NAME_","IPV6ADDR_","WORKDIR_","RAPID_COMMIT_",
"OPTION_","SCRIPT_","LOGNAME_","LOGLEVEL_","LOGMODE_","LOGCOLORS_","STRING_",
"HEXNUMBER_","INTNUMBER_","DUID_","STRICT_RFC_NO_ROUTING_","SKIP_CONFIRM_","PD_",
"PREFIX_","DUID_TYPE_","DUID_TYPE_LLT_","DUID_TYPE_LL_","DUID_TYPE_EN_","AUTH_ENABLED_",
"AUTH_ACCEPT_METHODS_","DIGEST_NONE_","DIGEST_PLAIN_","DIGEST_HMAC_MD5_","DIGEST_HMAC_SHA1_",
"DIGEST_HMAC_SHA224_","DIGEST_HMAC_SHA256_","DIGEST_HMAC_SHA384_","DIGEST_HMAC_SHA512_",
"STATELESS_","ANON_INF_REQUEST_","INSIST_MODE_","INACTIVE_MODE_","EXPERIMENTAL_",
"ADDR_PARAMS_","REMOTE_AUTOCONF_","AFTR_","ROUTING_","ADDRESS_LIST_","STRING_KEYWORD_",
"REQUEST_","RECONFIGURE_","'{'","'}'","','","'/'","'-'","Grammar","GlobalDeclarationList",
"GlobalOptionDeclaration","InterfaceOptionDeclaration","IAOptionDeclaration",
"InterfaceDeclaration","@1","@2","InterfaceDeclarationsList","TADeclaration",
"@3","@4","TADeclarationList","IAID","IADeclaration","@5","@6","IADeclarationList",
"ADDRESDeclaration","@7","@8","ADDRESDeclarationList","ADDRESOptionDeclaration",
"LogLevelOption","LogModeOption","LogNameOption","LogColors","DuidTypeOption",
"StatelessMode","WorkDirOption","StrictRfcNoRoutingOption","ScriptName","AuthEnabledOption",
"AuthAcceptOption","@9","DigestList","Digest","AnonInfRequest","InactiveMode",
"InsistMode","Experimental","RejectServersOption","@10","PreferServersOption",
"@11","PreferredTimeOption","RapidCommitOption","ExperimentalAddrParams","ExperimentalRemoteAutoconf",
"SkipConfirm","ReconfigureAccept","DdnsProtocol","DdnsTimeout","ValidTimeOption",
"T1Option","T2Option","PDDeclaration","@12","@13","PDOptionsList","PDOption",
"Prefix","UnicastOption","Routing","ADDRESDUIDList","ADDRESSList","StringList",
"Number","DNSServerOption","@14","DomainOption","@15","NTPServerOption","@16",
"TimeZoneOption","SIPServerOption","@17","SIPDomainOption","@18","FQDNOption",
"FQDNBits","NISServerOption","@19","NISPServerOption","@20","NISDomainOption",
"NISPDomainOption","LifetimeOption","VendorSpecOption","VendorSpecList","DsLiteTunnelOption",
"ExtraOption","@21",""
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
};
#endif

static const short yyr1[] = {     0,
<<<<<<< HEAD
    80,    80,    81,    81,    81,    81,    82,    82,    82,    82,
    82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
    82,    82,    82,    82,    82,    83,    83,    83,    83,    83,
    83,    83,    83,    83,    83,    83,    83,    83,    83,    83,
    83,    83,    83,    83,    83,    83,    84,    84,    84,    84,
    84,    86,    85,    87,    85,    85,    85,    85,    85,    88,
    88,    88,    88,    88,    88,    88,    88,    89,    90,    91,
    89,    89,    92,    92,    93,    95,    94,    96,    94,    94,
    94,    94,    97,    97,    97,    97,    99,    98,   100,    98,
    98,    98,    98,    98,   101,   101,   101,   101,   102,   102,
   103,   104,   105,   106,   107,   107,   107,   108,   109,   110,
   111,   112,   114,   113,   115,   115,   116,   116,   116,   116,
   116,   116,   117,   118,   119,   120,   122,   121,   124,   123,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   135,   136,   135,   137,   137,   138,   138,   138,   139,
   139,   140,   141,   141,   141,   141,   142,   142,   143,   143,
   144,   144,   145,   146,   145,   147,   148,   147,   149,   150,
   149,   151,   151,   152,   153,   152,   154,   155,   154,   156,
   156,   157,   158,   159,   158,   160,   161,   160,   162,   162,
   163,   163,   164,   165,   165,   166,   166,   166,   166,   167,
   168,   168,   169,   168,   168,   168,   168,   168
=======
    82,    82,    83,    83,    83,    83,    84,    84,    84,    84,
    84,    84,    84,    84,    84,    84,    84,    84,    84,    84,
    84,    84,    84,    84,    84,    84,    85,    85,    85,    85,
    85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
    85,    85,    85,    85,    85,    85,    85,    85,    86,    86,
    86,    86,    86,    88,    87,    89,    87,    87,    87,    87,
    87,    90,    90,    90,    90,    90,    90,    90,    90,    91,
    92,    93,    91,    91,    94,    94,    95,    97,    96,    98,
    96,    96,    96,    96,    99,    99,    99,    99,   101,   100,
   102,   100,   100,   100,   100,   100,   103,   103,   103,   103,
   104,   104,   105,   106,   107,   108,   109,   109,   109,   110,
   111,   112,   113,   114,   116,   115,   117,   117,   118,   118,
   118,   118,   118,   118,   119,   120,   121,   122,   124,   123,
   126,   125,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   138,   139,   138,   138,   140,   138,
   141,   141,   142,   142,   142,   143,   143,   144,   145,   146,
   146,   146,   146,   147,   147,   148,   148,   149,   149,   150,
   151,   150,   152,   153,   152,   154,   155,   154,   156,   156,
   157,   158,   157,   159,   160,   159,   161,   161,   162,   163,
   164,   163,   165,   166,   165,   167,   167,   168,   168,   169,
   170,   170,   171,   171,   171,   171,   172,   173,   173,   174,
   173,   173,   173,   173,   173
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
};

static const short yyr2[] = {     0,
     1,     0,     1,     1,     2,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
<<<<<<< HEAD
     1,     0,     6,     0,     6,     4,     4,     3,     3,     1,
     2,     1,     2,     1,     2,     1,     2,     1,     0,     0,
     6,     3,     2,     1,     2,     0,     5,     0,     6,     3,
     1,     2,     1,     2,     1,     2,     0,     5,     0,     6,
     4,     3,     2,     1,     1,     2,     1,     2,     1,     1,
     2,     2,     2,     2,     2,     2,     4,     1,     2,     1,
     2,     2,     0,     3,     1,     3,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     0,     3,     0,     3,
     2,     2,     1,     1,     1,     1,     2,     2,     2,     2,
     1,     3,     0,     5,     1,     2,     1,     1,     1,     4,
     1,     2,     1,     1,     3,     3,     1,     3,     1,     3,
     1,     1,     2,     0,     4,     2,     0,     4,     2,     0,
     4,     2,     3,     2,     0,     4,     2,     0,     4,     2,
     3,     3,     2,     0,     4,     2,     0,     4,     2,     3,
     2,     3,     2,     2,     3,     1,     3,     3,     5,     2,
     4,     4,     0,     5,     4,     4,     4,     3
};

static const short yydefact[] = {     2,
     0,     0,     0,     0,     0,     0,   127,   129,     0,     0,
     0,     0,   136,     0,     0,     0,     0,   110,   135,     0,
     0,   113,   108,   123,   125,   124,   126,   133,   134,     0,
     1,     3,     7,    26,     4,    50,    10,     8,     9,    11,
    13,    27,    12,    14,    15,    16,    17,    18,    19,    20,
    22,    43,    44,    99,    49,    51,    46,    23,    24,    25,
   100,    47,    48,    28,    29,    30,    31,    32,    33,    34,
    35,    21,    36,    37,    38,    39,    40,    41,    42,    45,
   161,   162,   139,   140,   131,   138,   152,     0,     0,     0,
     0,   109,   132,   163,   169,   166,   172,   174,   177,   183,
   186,   189,   191,   180,     0,   193,   194,   200,     0,   111,
   103,   101,   102,   104,   105,   106,     0,   112,     0,   137,
     5,     6,    58,    52,    59,    54,   153,   154,   128,   130,
     0,     0,     0,   173,     0,     0,     0,     0,   190,   192,
   181,   182,   196,   195,     0,     0,   208,     0,     0,     0,
   117,   118,   119,   120,   121,   122,   114,   115,    56,     0,
    57,     0,     0,   157,   165,   171,   159,   168,   176,   179,
   185,   188,     0,     0,   202,   206,   207,     0,   205,   201,
   107,     0,    81,    68,     0,   141,    60,     0,    64,    62,
    66,     0,   155,   156,     0,     0,   197,   198,   204,   116,
    76,    82,    69,   143,    53,    61,    65,    63,    67,    55,
   158,   160,     0,    80,     0,    78,    72,     0,   142,     0,
   199,    94,    83,     0,    85,     0,     0,    70,    74,   151,
   148,   149,     0,   145,   147,    87,    93,    77,    84,    86,
     0,    75,     0,    73,     0,   144,   146,    92,     0,    89,
    79,    71,     0,    97,     0,    95,    91,     0,   150,    98,
    88,    96,     0,    90,     0,     0,     0
};

static const short yydefgoto[] = {   265,
    31,    32,    33,    34,    35,   160,   162,   188,   189,   218,
   243,   228,   229,   190,   215,   226,   224,   225,   249,   258,
   255,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,   119,   157,   158,    48,    49,    50,    51,
    52,    90,    53,    91,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,   191,   220,   233,   234,   235,    64,
   129,   165,   168,   109,    65,   131,    66,   133,    67,   132,
    68,    69,   135,    70,   136,    71,    72,    73,   137,    74,
   138,    75,    76,    77,    78,   144,    79,    80,   178
};

static const short yypact[] = {   121,
    69,    69,    69,    69,    69,    93,-32768,-32768,   -28,    69,
   244,   -26,-32768,    -6,    69,    37,    69,-32768,-32768,    90,
    69,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    69,
   121,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
=======
     1,     1,     1,     0,     6,     0,     6,     4,     4,     3,
     3,     1,     2,     1,     2,     1,     2,     1,     2,     1,
     0,     0,     6,     3,     2,     1,     2,     0,     5,     0,
     6,     3,     1,     2,     1,     2,     1,     2,     0,     5,
     0,     6,     4,     3,     2,     1,     1,     2,     1,     2,
     1,     1,     2,     2,     2,     2,     2,     2,     4,     1,
     2,     1,     2,     2,     0,     3,     1,     3,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     0,     3,
     0,     3,     2,     2,     1,     1,     1,     2,     2,     2,
     2,     2,     2,     1,     3,     0,     5,     2,     0,     6,
     1,     2,     1,     1,     1,     4,     1,     2,     2,     1,
     1,     3,     3,     1,     3,     1,     3,     1,     1,     2,
     0,     4,     2,     0,     4,     2,     0,     4,     2,     3,
     2,     0,     4,     2,     0,     4,     2,     3,     3,     2,
     0,     4,     2,     0,     4,     2,     3,     2,     3,     2,
     2,     3,     1,     3,     3,     5,     2,     4,     4,     0,
     5,     4,     4,     4,     3
};

static const short yydefact[] = {     2,
     0,     0,     0,     0,     0,     0,     0,     0,   129,   131,
     0,     0,     0,     0,     0,     0,     0,     0,   112,   137,
     0,     0,   115,   110,   125,   127,   126,   128,   135,   136,
     0,     0,     1,     3,     7,    27,     4,    52,    10,     8,
     9,    11,    13,    29,    12,    14,    15,    18,    19,    20,
    21,    22,    24,    45,    46,   101,    51,    53,    48,    25,
    26,    16,    17,   102,    49,    50,    30,    28,    31,    32,
    33,    34,    35,    36,    37,    23,    38,    39,    40,    41,
    42,    43,    44,    47,   168,   169,   142,   143,   133,   141,
   158,   139,   140,     0,     0,     0,     0,   111,   134,   170,
   176,   173,   179,   181,   184,   190,   193,   196,   198,   187,
     0,   200,   201,   207,     0,   113,   105,   103,   104,   106,
   107,   108,     0,   114,     0,   159,   138,     5,     6,    60,
    54,    61,    56,   160,   161,   130,   132,     0,     0,     0,
   180,     0,     0,     0,     0,   197,   199,   188,   189,   203,
   202,     0,     0,   215,     0,     0,     0,   119,   120,   121,
   122,   123,   124,   116,   117,    58,     0,    59,     0,     0,
   164,   172,   178,   166,   175,   183,   186,   192,   195,     0,
     0,   209,   213,   214,     0,   212,   208,   109,     0,    83,
    70,     0,   144,    62,     0,    66,    64,    68,     0,   162,
   163,     0,     0,   204,   205,   211,   118,    78,    84,    71,
   146,   148,    55,    63,    67,    65,    69,    57,   165,   167,
     0,    82,     0,    80,    74,     0,   145,     0,   149,   206,
    96,    85,     0,    87,     0,     0,    72,    76,   157,   154,
   155,     0,   151,   153,     0,    89,    95,    79,    86,    88,
     0,    77,     0,    75,     0,   147,   152,     0,    94,     0,
    91,    81,    73,     0,   150,    99,     0,    97,    93,     0,
   156,   100,    90,    98,     0,    92,     0,     0,     0
};

static const short yydefgoto[] = {   277,
    33,    34,    35,    36,    37,   167,   169,   195,   196,   226,
   253,   237,   238,   197,   223,   235,   233,   234,   260,   270,
   267,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,   125,   164,   165,    50,    51,    52,    53,
    54,    96,    55,    97,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,   198,   228,   245,   242,   243,
   244,    67,    68,   136,   172,   175,   115,    69,   138,    70,
   140,    71,   139,    72,    73,   142,    74,   143,    75,    76,
    77,   144,    78,   145,    79,    80,    81,    82,   151,    83,
    84,   185
};

static const short yypact[] = {   131,
    99,    99,    99,    99,    99,   -37,    99,   173,-32768,-32768,
   -13,    99,   270,    -3,     6,    99,    12,    99,-32768,-32768,
   122,    99,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    99,    99,   131,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
<<<<<<< HEAD
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -15,   -11,    26,
    26,-32768,-32768,    72,    92,    86,    91,   116,   109,   120,
   132,   123,   127,   130,    69,-32768,    69,-32768,    30,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,    69,-32768,   170,-32768,
-32768,-32768,-32768,   -46,-32768,   103,-32768,-32768,   106,   106,
   160,   160,   151,-32768,   160,   151,   160,   160,-32768,-32768,
-32768,-32768,   115,   119,   -21,   128,   162,   161,   159,   169,
-32768,-32768,-32768,-32768,-32768,-32768,   137,-32768,-32768,   173,
-32768,   173,    43,-32768,   139,   139,-32768,   140,   139,   140,
   139,   139,    69,    69,-32768,-32768,-32768,   160,-32768,-32768,
-32768,   170,    38,   129,   260,   144,-32768,    14,-32768,-32768,
-32768,    29,-32768,-32768,   191,   183,-32768,   146,   139,-32768,
   157,   163,   158,   164,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    69,-32768,    81,-32768,-32768,   207,-32768,   114,
-32768,    77,-32768,    39,-32768,    81,    69,   207,-32768,   206,
-32768,-32768,     3,-32768,-32768,   167,   171,-32768,-32768,-32768,
    62,-32768,   168,-32768,   189,-32768,-32768,-32768,    19,   172,
-32768,-32768,    69,-32768,    18,-32768,-32768,    19,-32768,-32768,
-32768,-32768,    68,-32768,   239,   245,-32768
};

static const short yypgoto[] = {-32768,
-32768,   216,   -23,   -93,   218,-32768,-32768,   117,  -161,-32768,
-32768,-32768,    40,   -99,-32768,-32768,    56,  -213,-32768,-32768,
    25,   -40,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   102,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  -175,  -112,   -92,-32768,-32768,    52,-32768,-32768,
   197,    73,   153,    -1,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768
};


#define	YYLAST		330


static const short yytable[] = {    83,
    84,    85,    86,    87,    89,     1,     2,   123,    93,   175,
   240,   125,    92,   112,   110,   114,     1,     2,     3,   118,
     4,     5,     3,     3,     4,     4,   207,   240,   120,   159,
   207,     1,     2,     3,   111,     4,     5,     7,     8,   183,
   184,     1,     2,     3,   231,     4,    10,   185,   260,   254,
   230,   176,     7,     8,   183,   184,   127,   231,   145,   124,
   186,    10,   185,   126,     1,     2,     3,   222,     4,   128,
   146,    10,     3,   193,     4,   186,    23,   113,   246,    81,
    82,    28,    29,     1,     2,     3,   194,     4,   208,   205,
   222,    23,   208,   261,    10,   209,    28,    29,   260,   209,
   147,   148,  -164,   142,   210,   143,    28,   232,   149,   222,
    81,    82,   201,    10,   238,   150,     1,     2,    81,    82,
   232,   223,  -170,     1,     2,     3,  -167,     4,     5,    28,
   239,   134,   223,    88,    81,    82,   187,   251,   187,   115,
   116,   117,     6,   264,     7,     8,  -175,   239,    28,  -178,
  -184,   236,     9,    10,    11,    12,    13,    14,    15,    16,
    17,   230,  -187,   139,   206,    18,    19,   140,   206,    20,
   141,   197,   198,    21,    22,     1,     2,     3,   161,     4,
     5,   202,   163,    23,    24,    25,    26,    27,    28,    29,
   164,   167,  -203,   173,    30,   174,     7,     8,   183,   184,
   177,   179,   180,   203,   166,    10,   185,   169,   256,   171,
   172,   221,   181,   182,   262,   195,   196,   256,   204,   186,
   237,   211,   262,   212,   213,   242,   151,   152,   153,   154,
   155,   156,   214,   217,   227,    23,   245,   216,   266,   219,
    28,    29,   248,   252,   267,   250,   121,   257,   122,    94,
   199,   259,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,    94,   253,   244,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   192,   106,
   107,   241,   263,   200,   247,    81,    82,   130,   170,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    81,    82,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   108,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   108
};

static const short yycheck[] = {     1,
     2,     3,     4,     5,     6,     3,     4,    23,    10,    31,
   224,    23,    41,    15,    41,    17,     3,     4,     5,    21,
     7,     8,     5,     5,     7,     7,   188,   241,    30,    76,
   192,     3,     4,     5,    41,     7,     8,    24,    25,    26,
    27,     3,     4,     5,   220,     7,    33,    34,    31,    31,
    48,    73,    24,    25,    26,    27,    31,   233,    29,    75,
    47,    33,    34,    75,     3,     4,     5,    29,     7,    44,
    41,    33,     5,    31,     7,    47,    63,    41,    76,    42,
    43,    68,    69,     3,     4,     5,    44,     7,   188,    76,
    29,    63,   192,    76,    33,   188,    68,    69,    31,   192,
    71,    72,    31,   105,    76,   107,    68,   220,    79,    29,
    42,    43,    75,    33,    76,   117,     3,     4,    42,    43,
   233,   215,    31,     3,     4,     5,    41,     7,     8,    68,
   224,    41,   226,    41,    42,    43,   160,    76,   162,    50,
    51,    52,    22,    76,    24,    25,    31,   241,    68,    41,
    31,    75,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    48,    31,    41,   188,    45,    46,    41,   192,    49,
    41,   173,   174,    53,    54,     3,     4,     5,    76,     7,
     8,   183,    77,    63,    64,    65,    66,    67,    68,    69,
    31,    41,    31,    79,    74,    77,    24,    25,    26,    27,
    73,    41,    44,    75,   132,    33,    34,   135,   249,   137,
   138,   213,    44,    77,   255,    77,    77,   258,    75,    47,
   222,    31,   263,    41,    79,   227,    57,    58,    59,    60,
    61,    62,    76,    76,    28,    63,    31,    75,     0,    76,
    68,    69,    76,    76,     0,    75,    31,    76,    31,     6,
   178,   253,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,     6,    78,   228,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,   162,    20,
    21,   226,   258,   182,   233,    42,    43,    91,   136,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    42,    43,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70
=======
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,    -9,     3,   111,   111,-32768,-32768,    28,
    57,    29,    34,    83,    82,    96,   115,   140,   142,   151,
    99,-32768,    99,-32768,    33,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    99,-32768,   163,-32768,-32768,-32768,-32768,-32768,
    75,-32768,    86,-32768,-32768,   127,   127,   194,   194,   186,
-32768,   194,   186,   194,   194,-32768,-32768,-32768,-32768,   148,
   157,   -20,   162,   206,   201,   199,   200,-32768,-32768,-32768,
-32768,-32768,-32768,   167,-32768,-32768,   205,-32768,   205,   117,
-32768,   168,   168,-32768,   169,   168,   169,   168,   168,    99,
    99,-32768,-32768,-32768,   194,-32768,-32768,-32768,   163,    38,
   172,   285,    53,-32768,    15,-32768,-32768,-32768,    30,-32768,
-32768,   217,   209,-32768,   171,   168,-32768,   176,   178,   179,
   180,   182,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    99,-32768,   114,-32768,-32768,   226,-32768,    21,-32768,-32768,
    60,-32768,     5,-32768,   114,    99,   226,-32768,   227,-32768,
-32768,    23,-32768,-32768,    21,   183,   185,-32768,-32768,-32768,
    42,-32768,   187,-32768,   184,-32768,-32768,    49,-32768,   121,
   188,-32768,-32768,    99,-32768,-32768,    55,-32768,-32768,   121,
-32768,-32768,-32768,-32768,    62,-32768,   267,   268,-32768
};

static const short yypgoto[] = {-32768,
-32768,   237,    -8,  -110,   238,-32768,-32768,   103,   -90,-32768,
-32768,-32768,    36,    -5,-32768,-32768,    69,  -219,-32768,-32768,
     8,   -56,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   101,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   -82,   -40,    43,-32768,-32768,    61,  -111,
-32768,-32768,-32768,   208,   -53,   166,    -1,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768
};


#define	YYLAST		356


static const short yytable[] = {    87,
    88,    89,    90,    91,    92,    93,    95,     1,     2,     3,
    99,     4,   182,   250,   118,   130,   120,     1,     2,     3,
   124,     4,     5,     1,     2,     1,     2,   132,    98,   126,
   127,   250,     1,     2,     3,   231,     4,     5,   116,    12,
     9,    10,   190,   191,     1,     2,     3,   117,     4,    12,
   192,     1,     2,   119,   183,     9,    10,   190,   191,     3,
  -171,     4,   193,   152,    12,   192,     3,   131,     4,   239,
  -174,   239,   231,    29,   153,   141,    12,   193,    24,   133,
    85,    86,   248,    29,    30,   173,    31,   272,   176,  -177,
   178,   179,   213,    24,   272,    85,    86,   239,    29,    30,
   256,    31,    85,    86,   215,   154,   155,   218,   215,   149,
    29,   150,   232,   156,   208,  -182,     1,     2,     3,   262,
     4,   157,   249,  -185,   232,     3,   265,     4,  -191,   211,
   257,   206,   273,     1,     2,     3,   246,     4,     5,   276,
   249,    85,    86,   134,   231,   240,   257,  -194,    12,   200,
     6,     7,   166,   266,     8,   135,     9,    10,   194,   240,
   194,   201,   240,   168,    11,    12,    13,    14,    15,    16,
    17,    18,   121,   122,   123,   240,    19,    20,   204,   205,
    21,   146,    29,   147,    22,    23,   214,   241,   209,   216,
   214,   212,   148,   216,    24,    25,    26,    27,    28,    29,
    30,   241,    31,   268,   241,   170,    32,     1,     2,     3,
   274,     4,     5,   268,    94,    85,    86,   241,   274,   230,
   158,   159,   160,   161,   162,   163,   171,   174,   180,   247,
     9,    10,   190,   191,   252,   181,   184,   217,  -210,    12,
   192,   217,   186,   187,   188,   189,   202,   203,   210,   219,
   220,   221,   193,   222,   224,   236,   225,   227,   229,   255,
   259,   261,   271,   264,   263,   269,   278,   279,    24,   128,
   129,   199,   254,    29,    30,   100,    31,   275,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   207,
   100,   112,   113,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   251,   137,   258,   112,   113,   177,     0,
     0,     0,    85,    86,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    85,    86,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   114,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   114
};

static const short yycheck[] = {     1,
     2,     3,     4,     5,    42,     7,     8,     3,     4,     5,
    12,     7,    33,   233,    16,    25,    18,     3,     4,     5,
    22,     7,     8,     3,     4,     3,     4,    25,    42,    31,
    32,   251,     3,     4,     5,    31,     7,     8,    42,    35,
    26,    27,    28,    29,     3,     4,     5,    42,     7,    35,
    36,     3,     4,    42,    75,    26,    27,    28,    29,     5,
    33,     7,    48,    31,    35,    36,     5,    77,     7,    49,
    42,    49,    31,    69,    42,    42,    35,    48,    64,    77,
    43,    44,    78,    69,    70,   139,    72,    33,   142,    33,
   144,   145,    78,    64,    33,    43,    44,    49,    69,    70,
    78,    72,    43,    44,   195,    73,    74,    78,   199,   111,
    69,   113,   223,    81,    77,    33,     3,     4,     5,    78,
     7,   123,   233,    42,   235,     5,    78,     7,    33,    77,
   242,   185,    78,     3,     4,     5,    77,     7,     8,    78,
   251,    43,    44,    33,    31,   228,   258,    33,    35,    33,
    20,    21,    78,    33,    24,    45,    26,    27,   167,   242,
   169,    45,   245,    78,    34,    35,    36,    37,    38,    39,
    40,    41,    51,    52,    53,   258,    46,    47,   180,   181,
    50,    42,    69,    42,    54,    55,   195,   228,   190,   195,
   199,   193,    42,   199,    64,    65,    66,    67,    68,    69,
    70,   242,    72,   260,   245,    79,    76,     3,     4,     5,
   267,     7,     8,   270,    42,    43,    44,   258,   275,   221,
    58,    59,    60,    61,    62,    63,    33,    42,    81,   231,
    26,    27,    28,    29,   236,    79,    75,   195,    33,    35,
    36,   199,    42,    45,    45,    79,    79,    79,    77,    33,
    42,    81,    48,    78,    77,    30,    78,    78,    77,    33,
    78,    77,   264,    80,    78,    78,     0,     0,    64,    33,
    33,   169,   237,    69,    70,     6,    72,   270,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,   189,
     6,    22,    23,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,   235,    97,   245,    22,    23,   143,    -1,
    -1,    -1,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    71
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
};

#line 352 "../bison++/bison.cc"
 /* fattrs + tables */

/* parser code folow  */


/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: dollar marks section change
   the next  is replaced by the list of actions, each action
   as one case of the switch.  */ 

#if YY_ClntParser_USE_GOTO != 0
/* 
 SUPRESSION OF GOTO : on some C++ compiler (sun c++)
  the goto is strictly forbidden if any constructor/destructor
  is used in the whole function (very stupid isn't it ?)
 so goto are to be replaced with a 'while/switch/case construct'
 here are the macro to keep some apparent compatibility
*/
#define YYGOTO(lb) {yy_gotostate=lb;continue;}
#define YYBEGINGOTO  enum yy_labels yy_gotostate=yygotostart; \
                     for(;;) switch(yy_gotostate) { case yygotostart: {
#define YYLABEL(lb) } case lb: {
#define YYENDGOTO } } 
#define YYBEGINDECLARELABEL enum yy_labels {yygotostart
#define YYDECLARELABEL(lb) ,lb
#define YYENDDECLARELABEL  }
#else
/* macro to keep goto */
#define YYGOTO(lb) goto lb
#define YYBEGINGOTO 
#define YYLABEL(lb) lb:
#define YYENDGOTO
#define YYBEGINDECLARELABEL 
#define YYDECLARELABEL(lb)
#define YYENDDECLARELABEL  
#endif
/* LABEL DECLARATION */
YYBEGINDECLARELABEL
  YYDECLARELABEL(yynewstate)
  YYDECLARELABEL(yybackup)
/* YYDECLARELABEL(yyresume) */
  YYDECLARELABEL(yydefault)
  YYDECLARELABEL(yyreduce)
  YYDECLARELABEL(yyerrlab)   /* here on detecting error */
  YYDECLARELABEL(yyerrlab1)   /* here on error raised explicitly by an action */
  YYDECLARELABEL(yyerrdefault)  /* current state does not do anything special for the error token. */
  YYDECLARELABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */
  YYDECLARELABEL(yyerrhandle)  
YYENDDECLARELABEL
/* ALLOCA SIMULATION */
/* __HAVE_NO_ALLOCA */
#ifdef __HAVE_NO_ALLOCA
int __alloca_free_ptr(char *ptr,char *ref)
{if(ptr!=ref) free(ptr);
 return 0;}

#define __ALLOCA_alloca(size) malloc(size)
#define __ALLOCA_free(ptr,ref) __alloca_free_ptr((char *)ptr,(char *)ref)

#ifdef YY_ClntParser_LSP_NEEDED
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		    __ALLOCA_free(yyls,yylsa)+\
		   (num)); } while(0)
#else
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		   (num)); } while(0)
#endif
#else
#define __ALLOCA_return(num) do { return(num); } while(0)
#define __ALLOCA_alloca(size) alloca(size)
#define __ALLOCA_free(ptr,ref) 
#endif

/* ENDALLOCA SIMULATION */

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (YY_ClntParser_CHAR = YYEMPTY)
#define YYEMPTY         -2
#define YYEOF           0
#define YYACCEPT        __ALLOCA_return(0)
#define YYABORT         __ALLOCA_return(1)
#define YYERROR         YYGOTO(yyerrlab1)
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL          YYGOTO(yyerrlab)
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do                                                              \
  if (YY_ClntParser_CHAR == YYEMPTY && yylen == 1)                               \
    { YY_ClntParser_CHAR = (token), YY_ClntParser_LVAL = (value);                 \
      yychar1 = YYTRANSLATE (YY_ClntParser_CHAR);                                \
      YYPOPSTACK;                                               \
      YYGOTO(yybackup);                                            \
    }                                                           \
  else                                                          \
    { YY_ClntParser_ERROR ("syntax error: cannot back up"); YYERROR; }   \
while (0)

#define YYTERROR        1
#define YYERRCODE       256

#ifndef YY_ClntParser_PURE
/* UNPURE */
#define YYLEX           YY_ClntParser_LEX()
#ifndef YY_USE_CLASS
/* If nonreentrant, and not class , generate the variables here */
int     YY_ClntParser_CHAR;                      /*  the lookahead symbol        */
YY_ClntParser_STYPE      YY_ClntParser_LVAL;              /*  the semantic value of the */
				/*  lookahead symbol    */
int YY_ClntParser_NERRS;                 /*  number of parse errors so far */
#ifdef YY_ClntParser_LSP_NEEDED
YY_ClntParser_LTYPE YY_ClntParser_LLOC;   /*  location data for the lookahead     */
			/*  symbol                              */
#endif
#endif


#else
/* PURE */
#ifdef YY_ClntParser_LSP_NEEDED
#define YYLEX           YY_ClntParser_LEX(&YY_ClntParser_LVAL, &YY_ClntParser_LLOC)
#else
#define YYLEX           YY_ClntParser_LEX(&YY_ClntParser_LVAL)
#endif
#endif
#ifndef YY_USE_CLASS
#if YY_ClntParser_DEBUG != 0
int YY_ClntParser_DEBUG_FLAG;                    /*  nonzero means print parse trace     */
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif
#endif



/*  YYINITDEPTH indicates the initial size of the parser's stacks       */

#ifndef YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif


#if __GNUC__ > 1                /* GNU C and GNU C++ define this.  */
#define __yy_bcopy(FROM,TO,COUNT)       __builtin_memcpy(TO,FROM,COUNT)
#else                           /* not GNU C or C++ */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */

#ifdef __cplusplus
static void __yy_bcopy (char *from, char *to, int count)
#else
#ifdef __STDC__
static void __yy_bcopy (char *from, char *to, int count)
#else
static void __yy_bcopy (from, to, count)
     char *from;
     char *to;
     int count;
#endif
#endif
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}
#endif


int
#ifdef YY_USE_CLASS
 YY_ClntParser_CLASS::
#endif
     YY_ClntParser_PARSE(YY_ClntParser_PARSE_PARAM)
#ifndef __STDC__
#ifndef __cplusplus
#ifndef YY_USE_CLASS
/* parameter definition without protypes */
YY_ClntParser_PARSE_PARAM_DEF
#endif
#endif
#endif
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YY_ClntParser_STYPE *yyvsp;
  int yyerrstatus;      /*  number of tokens to shift before error messages enabled */
  int yychar1=0;          /*  lookahead token as an internal (translated) token number */

  short yyssa[YYINITDEPTH];     /*  the state stack                     */
  YY_ClntParser_STYPE yyvsa[YYINITDEPTH];        /*  the semantic value stack            */

  short *yyss = yyssa;          /*  refer to the stacks thru separate pointers */
  YY_ClntParser_STYPE *yyvs = yyvsa;     /*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YY_ClntParser_LSP_NEEDED
  YY_ClntParser_LTYPE yylsa[YYINITDEPTH];        /*  the location stack                  */
  YY_ClntParser_LTYPE *yyls = yylsa;
  YY_ClntParser_LTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YY_ClntParser_PURE
  int YY_ClntParser_CHAR;
  YY_ClntParser_STYPE YY_ClntParser_LVAL;
  int YY_ClntParser_NERRS;
#ifdef YY_ClntParser_LSP_NEEDED
  YY_ClntParser_LTYPE YY_ClntParser_LLOC;
#endif
#endif

  YY_ClntParser_STYPE yyval;             /*  the variable used to return         */
				/*  semantic values from the action     */
				/*  routines                            */

  int yylen;
/* start loop, in which YYGOTO may be used. */
YYBEGINGOTO

#if YY_ClntParser_DEBUG != 0
  if (YY_ClntParser_DEBUG_FLAG)
    fprintf(stderr, "Starting parse\n");
#endif
  yystate = 0;
  yyerrstatus = 0;
  YY_ClntParser_NERRS = 0;
  YY_ClntParser_CHAR = YYEMPTY;          /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YY_ClntParser_LSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
YYLABEL(yynewstate)

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YY_ClntParser_STYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YY_ClntParser_LSP_NEEDED
      YY_ClntParser_LTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YY_ClntParser_LSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YY_ClntParser_LSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	    YY_ClntParser_ERROR(((char*)"parser stack overflow"));
	  __ALLOCA_return(2);
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) __ALLOCA_alloca (yystacksize * sizeof (*yyssp));
      __yy_bcopy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      __ALLOCA_free(yyss1,yyssa);
      yyvs = (YY_ClntParser_STYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yyvsp));
      __yy_bcopy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
      __ALLOCA_free(yyvs1,yyvsa);
#ifdef YY_ClntParser_LSP_NEEDED
      yyls = (YY_ClntParser_LTYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yylsp));
      __yy_bcopy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
      __ALLOCA_free(yyls1,yylsa);
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YY_ClntParser_LSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YY_ClntParser_DEBUG != 0
      if (YY_ClntParser_DEBUG_FLAG)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YY_ClntParser_DEBUG != 0
  if (YY_ClntParser_DEBUG_FLAG)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  YYGOTO(yybackup);
YYLABEL(yybackup)

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* YYLABEL(yyresume) */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yydefault);

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (YY_ClntParser_CHAR == YYEMPTY)
    {
#if YY_ClntParser_DEBUG != 0
      if (YY_ClntParser_DEBUG_FLAG)
	fprintf(stderr, "Reading a token: ");
#endif
      YY_ClntParser_CHAR = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (YY_ClntParser_CHAR <= 0)           /* This means end of input. */
    {
      yychar1 = 0;
      YY_ClntParser_CHAR = YYEOF;                /* Don't call YYLEX any more */

#if YY_ClntParser_DEBUG != 0
      if (YY_ClntParser_DEBUG_FLAG)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(YY_ClntParser_CHAR);

#if YY_ClntParser_DEBUG != 0
      if (YY_ClntParser_DEBUG_FLAG)
	{
	  fprintf (stderr, "Next token is %d (%s", YY_ClntParser_CHAR, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, YY_ClntParser_CHAR, YY_ClntParser_LVAL);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    YYGOTO(yydefault);

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrlab);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrlab);

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YY_ClntParser_DEBUG != 0
  if (YY_ClntParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting token %d (%s), ", YY_ClntParser_CHAR, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (YY_ClntParser_CHAR != YYEOF)
    YY_ClntParser_CHAR = YYEMPTY;

  *++yyvsp = YY_ClntParser_LVAL;
#ifdef YY_ClntParser_LSP_NEEDED
  *++yylsp = YY_ClntParser_LLOC;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  YYGOTO(yynewstate);

/* Do the default action for the current state.  */
YYLABEL(yydefault)

  yyn = yydefact[yystate];
  if (yyn == 0)
    YYGOTO(yyerrlab);

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
YYLABEL(yyreduce)
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YY_ClntParser_DEBUG != 0
  if (YY_ClntParser_DEBUG_FLAG)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


 #line 839 "../bison++/bison.cc"

  switch (yyn) {

<<<<<<< HEAD
case 52:
#line 204 "ClntParser.y"
=======
case 54:
#line 208 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    if (!StartIfaceDeclaration(yyvsp[-1].strval))
	YYABORT;
;
    break;}
<<<<<<< HEAD
case 53:
#line 209 "ClntParser.y"
=======
case 55:
#line 213 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    delete [] yyvsp[-4].strval;
    if (!EndIfaceDeclaration())
	YYABORT;
;
    break;}
<<<<<<< HEAD
case 54:
#line 219 "ClntParser.y"
=======
case 56:
#line 223 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    if (!IfaceDefined(yyvsp[-1].ival))
	YYABORT;
    if (!StartIfaceDeclaration(yyvsp[-1].ival))
	YYABORT;
;
    break;}
<<<<<<< HEAD
case 55:
#line 226 "ClntParser.y"
=======
case 57:
#line 230 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    if (!EndIfaceDeclaration())
	YYABORT;
;
    break;}
<<<<<<< HEAD
case 56:
#line 235 "ClntParser.y"
=======
case 58:
#line 239 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    if (!IfaceDefined(string(yyvsp[-2].strval)))
	YYABORT;
    ClntCfgIfaceLst.append(new TClntCfgIface(yyvsp[-2].strval));
    delete [] yyvsp[-2].strval;
    EmptyIface();
;
    break;}
<<<<<<< HEAD
case 57:
#line 247 "ClntParser.y"
=======
case 59:
#line 251 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    if (!IfaceDefined(yyvsp[-2].ival))
	YYABORT;
    ClntCfgIfaceLst.append(new TClntCfgIface(yyvsp[-2].ival));
    EmptyIface();
;
    break;}
<<<<<<< HEAD
case 58:
#line 258 "ClntParser.y"
=======
case 60:
#line 262 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    if (!IfaceDefined(string(yyvsp[-1].strval)))
	YYABORT;
    ClntCfgIfaceLst.append(new TClntCfgIface(yyvsp[-1].strval));
    ClntCfgIfaceLst.getLast()->setOptions(ParserOptStack.getLast());
    ClntCfgIfaceLst.getLast()->setNoConfig();
    delete yyvsp[-1].strval;
;
    break;}
<<<<<<< HEAD
case 59:
#line 271 "ClntParser.y"
=======
case 61:
#line 275 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    if (!IfaceDefined(yyvsp[-1].ival))
	YYABORT;
    ClntCfgIfaceLst.append(SPtr<TClntCfgIface> (new TClntCfgIface(yyvsp[-1].ival)) );
    ClntCfgIfaceLst.getLast()->setOptions(ParserOptStack.getLast());
    ClntCfgIfaceLst.getLast()->setNoConfig();
;
    break;}
<<<<<<< HEAD
case 68:
#line 299 "ClntParser.y"
=======
case 70:
#line 303 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    //Log(Crit) << "TA without params." << LogEnd;
    this->ClntCfgTALst.append( new TClntCfgTA() ); // append new TA
;
    break;}
<<<<<<< HEAD
case 69:
#line 304 "ClntParser.y"
=======
case 71:
#line 308 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    //Log(Crit) << "TA with params started." << LogEnd;
    this->ClntCfgTALst.append( new TClntCfgTA() ); // append new TA
    this->iaidSet = false;
;
    break;}
<<<<<<< HEAD
case 70:
#line 310 "ClntParser.y"
=======
case 72:
#line 314 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    if (this->iaidSet)
	this->ClntCfgTALst.getLast()->setIAID(this->iaid);
    //Log(Crit) << "TA with params ended." << LogEnd;
;
    break;}
<<<<<<< HEAD
case 72:
#line 317 "ClntParser.y"
=======
case 74:
#line 321 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    //Log(Crit) << "TA without params." << LogEnd;
    this->ClntCfgTALst.append( new TClntCfgTA() ); // append new TA
;
    break;}
<<<<<<< HEAD
case 75:
#line 330 "ClntParser.y"
=======
case 77:
#line 334 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    this->iaidSet = true;
    this->iaid = yyvsp[0].ival;
    Log(Crit) << "IAID=" << this->iaid << " parsed." << LogEnd;
;
    break;}
<<<<<<< HEAD
case 76:
#line 342 "ClntParser.y"
=======
case 78:
#line 346 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    StartIADeclaration(false);
;
    break;}
<<<<<<< HEAD
case 77:
#line 346 "ClntParser.y"
=======
case 79:
#line 350 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    EndIADeclaration();
;
    break;}
<<<<<<< HEAD
case 78:
#line 351 "ClntParser.y"
=======
case 80:
#line 355 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    StartIADeclaration(false);
    this->iaid = yyvsp[-1].ival;
;
    break;}
<<<<<<< HEAD
case 79:
#line 356 "ClntParser.y"
=======
case 81:
#line 360 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    EndIADeclaration();
    Log(Info) << "Setting IAID to " << this->iaid << LogEnd;
    ClntCfgIALst.getLast()->setIAID(this->iaid);
;
    break;}
<<<<<<< HEAD
case 80:
#line 366 "ClntParser.y"
=======
case 82:
#line 370 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    StartIADeclaration(true);
    EndIADeclaration();
;
    break;}
<<<<<<< HEAD
case 81:
#line 375 "ClntParser.y"
=======
case 83:
#line 379 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    StartIADeclaration(true);
    EndIADeclaration();
;
    break;}
<<<<<<< HEAD
case 82:
#line 381 "ClntParser.y"
=======
case 84:
#line 385 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    StartIADeclaration(true);
    EndIADeclaration();
    Log(Info) << "Setting IAID to " << yyvsp[0].ival << LogEnd;
    ClntCfgIALst.getLast()->setIAID(yyvsp[0].ival);
;
    break;}
<<<<<<< HEAD
case 87:
#line 399 "ClntParser.y"
=======
case 89:
#line 403 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    SPtr<TClntParsGlobalOpt> globalOpt = ParserOptStack.getLast();
    SPtr<TClntParsGlobalOpt> newOpt = new TClntParsGlobalOpt(*globalOpt);
    ParserOptStack.append(newOpt);
;
    break;}
<<<<<<< HEAD
case 88:
#line 405 "ClntParser.y"
=======
case 90:
#line 409 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    //ClntCfgAddrLst.append(SPtr<TClntCfgAddr> (new TClntCfgAddr()));
    //set proper options specific for this Address
    //ClntCfgAddrLst.getLast()->setOptions(&(*ParserOptStack.getLast()));
    if (ParserOptStack.count())
	ParserOptStack.delLast();
;
    break;}
<<<<<<< HEAD
case 89:
#line 414 "ClntParser.y"
=======
case 91:
#line 418 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    ParserOptStack.append(new TClntParsGlobalOpt(*ParserOptStack.getLast()));
    ParserOptStack.getLast()->setAddrHint(false);
;
    break;}
<<<<<<< HEAD
case 90:
#line 419 "ClntParser.y"
=======
case 92:
#line 423 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    for (int i=0;i<yyvsp[-4].ival; i++) EmptyAddr();
    ParserOptStack.delLast();
;
    break;}
<<<<<<< HEAD
case 91:
#line 425 "ClntParser.y"
=======
case 93:
#line 429 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    for (int i=0;i<yyvsp[-2].ival; i++) EmptyAddr();
;
    break;}
<<<<<<< HEAD
case 92:
#line 430 "ClntParser.y"
=======
case 94:
#line 434 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    EmptyAddr();
;
    break;}
<<<<<<< HEAD
case 93:
#line 435 "ClntParser.y"
=======
case 95:
#line 439 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    for (int i=0;i<yyvsp[0].ival; i++) EmptyAddr();
;
    break;}
<<<<<<< HEAD
case 94:
#line 440 "ClntParser.y"
=======
case 96:
#line 444 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    EmptyAddr();
;
    break;}
<<<<<<< HEAD
case 97:
#line 449 "ClntParser.y"
=======
case 99:
#line 453 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    if (ParserOptStack.getLast()->getAddrHint())
    {
	ClntCfgAddrLst.append(new TClntCfgAddr(new TIPv6Addr(yyvsp[0].addrval)));
	ClntCfgAddrLst.getLast()->setOptions(ParserOptStack.getLast());
    }
    else
	YYABORT;  //this is aggregated version of IA
;
    break;}
<<<<<<< HEAD
case 98:
#line 459 "ClntParser.y"
=======
case 100:
#line 463 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    if (ParserOptStack.getLast()->getAddrHint())
    {
	ClntCfgAddrLst.append(new TClntCfgAddr(new TIPv6Addr(yyvsp[0].addrval)));
	ClntCfgAddrLst.getLast()->setOptions(ParserOptStack.getLast());
    }
    else
	YYABORT; //here is agregated version of IA
;
    break;}
<<<<<<< HEAD
case 101:
#line 477 "ClntParser.y"
=======
case 103:
#line 481 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    if ( (yyvsp[0].ival<1) || (yyvsp[0].ival>8) ) {
	Log(Crit) << "Invalid loglevel specified: " << yyvsp[0].ival << ". Allowed range: 1-8." << LogEnd;
    }
    logger::setLogLevel(yyvsp[0].ival);
;
    break;}
<<<<<<< HEAD
case 102:
#line 486 "ClntParser.y"
=======
case 104:
#line 490 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    logger::setLogMode(yyvsp[0].strval);
;
    break;}
<<<<<<< HEAD
case 103:
#line 491 "ClntParser.y"
=======
case 105:
#line 495 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    logger::setLogName(yyvsp[0].strval);
;
    break;}
<<<<<<< HEAD
case 104:
#line 497 "ClntParser.y"
=======
case 106:
#line 501 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    logger::setColors(yyvsp[0].ival==1);
;
    break;}
<<<<<<< HEAD
case 105:
#line 502 "ClntParser.y"
{ this->DUIDType  = DUID_TYPE_LLT;;
    break;}
case 106:
#line 503 "ClntParser.y"
{ this->DUIDType  = DUID_TYPE_LL; ;
    break;}
case 107:
#line 504 "ClntParser.y"
=======
case 107:
#line 506 "ClntParser.y"
{ this->DUIDType  = DUID_TYPE_LLT;;
    break;}
case 108:
#line 507 "ClntParser.y"
{ this->DUIDType  = DUID_TYPE_LL; ;
    break;}
case 109:
#line 508 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
  this->DUIDType       = DUID_TYPE_EN;
  this->DUIDEnterpriseNumber = yyvsp[-1].ival;
  this->DUIDEnterpriseID     = new TDUID(yyvsp[0].duidval.duid, yyvsp[0].duidval.length);
;
    break;}
<<<<<<< HEAD
case 108:
#line 513 "ClntParser.y"
=======
case 110:
#line 517 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    ParserOptStack.getLast()->setIsIAs(false);
;
    break;}
<<<<<<< HEAD
case 109:
#line 520 "ClntParser.y"
=======
case 111:
#line 524 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    ParserOptStack.getLast()->setWorkDir(yyvsp[0].strval);
;
    break;}
<<<<<<< HEAD
case 110:
#line 527 "ClntParser.y"
=======
case 112:
#line 531 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    Log(Notice) << "Strict-rfc-no-routing directive set: addresses will be added with 128 prefix." << LogEnd;
    ParserOptStack.getLast()->setPrefixLength(128);
    // by default prefix is set to 128
;
    break;}
<<<<<<< HEAD
case 111:
#line 536 "ClntParser.y"
{
    ParserOptStack.getLast()->setScriptsDir(yyvsp[0].strval);
;
    break;}
case 112:
#line 541 "ClntParser.y"
{ ParserOptStack.getLast()->setAuthEnabled(yyvsp[0].ival); ;
    break;}
case 113:
#line 545 "ClntParser.y"
=======
case 113:
#line 540 "ClntParser.y"
{
    CfgMgr->setScript(yyvsp[0].strval);
;
    break;}
case 114:
#line 545 "ClntParser.y"
{ ParserOptStack.getLast()->setAuthEnabled(yyvsp[0].ival); ;
    break;}
case 115:
#line 549 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    DigestLst.clear();
;
    break;}
<<<<<<< HEAD
case 114:
#line 547 "ClntParser.y"
=======
case 116:
#line 551 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    ParserOptStack.getLast()->setAuthAcceptMethods(DigestLst);
;
    break;}
<<<<<<< HEAD
case 117:
#line 557 "ClntParser.y"
{ SPtr<DigestTypes> dt = new DigestTypes; *dt = DIGEST_HMAC_MD5; DigestLst.append(dt); ;
    break;}
case 118:
#line 558 "ClntParser.y"
{ SPtr<DigestTypes> dt = new DigestTypes; *dt = DIGEST_HMAC_SHA1; DigestLst.append(dt); ;
    break;}
case 119:
#line 559 "ClntParser.y"
{ SPtr<DigestTypes> dt = new DigestTypes; *dt = DIGEST_HMAC_SHA224; DigestLst.append(dt); ;
    break;}
case 120:
#line 560 "ClntParser.y"
{ SPtr<DigestTypes> dt = new DigestTypes; *dt = DIGEST_HMAC_SHA256; DigestLst.append(dt); ;
    break;}
case 121:
#line 561 "ClntParser.y"
{ SPtr<DigestTypes> dt = new DigestTypes; *dt = DIGEST_HMAC_SHA384; DigestLst.append(dt); ;
    break;}
case 122:
#line 562 "ClntParser.y"
{ SPtr<DigestTypes> dt = new DigestTypes; *dt = DIGEST_HMAC_SHA512; DigestLst.append(dt); ;
    break;}
case 123:
#line 567 "ClntParser.y"
=======
case 119:
#line 561 "ClntParser.y"
{ SPtr<DigestTypes> dt = new DigestTypes; *dt = DIGEST_HMAC_MD5; DigestLst.append(dt); ;
    break;}
case 120:
#line 562 "ClntParser.y"
{ SPtr<DigestTypes> dt = new DigestTypes; *dt = DIGEST_HMAC_SHA1; DigestLst.append(dt); ;
    break;}
case 121:
#line 563 "ClntParser.y"
{ SPtr<DigestTypes> dt = new DigestTypes; *dt = DIGEST_HMAC_SHA224; DigestLst.append(dt); ;
    break;}
case 122:
#line 564 "ClntParser.y"
{ SPtr<DigestTypes> dt = new DigestTypes; *dt = DIGEST_HMAC_SHA256; DigestLst.append(dt); ;
    break;}
case 123:
#line 565 "ClntParser.y"
{ SPtr<DigestTypes> dt = new DigestTypes; *dt = DIGEST_HMAC_SHA384; DigestLst.append(dt); ;
    break;}
case 124:
#line 566 "ClntParser.y"
{ SPtr<DigestTypes> dt = new DigestTypes; *dt = DIGEST_HMAC_SHA512; DigestLst.append(dt); ;
    break;}
case 125:
#line 571 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    ParserOptStack.getLast()->setAnonInfRequest(true);
;
    break;}
<<<<<<< HEAD
case 124:
#line 573 "ClntParser.y"
=======
case 126:
#line 577 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    ParserOptStack.getLast()->setInactiveMode(true);
;
    break;}
<<<<<<< HEAD
case 125:
#line 579 "ClntParser.y"
=======
case 127:
#line 583 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    ParserOptStack.getLast()->setInsistMode(true);
;
    break;}
<<<<<<< HEAD
case 126:
#line 585 "ClntParser.y"
=======
case 128:
#line 589 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    Log(Crit) << "Experimental features are allowed." << LogEnd;
    ParserOptStack.getLast()->setExperimental();
;
    break;}
<<<<<<< HEAD
case 127:
#line 592 "ClntParser.y"
=======
case 129:
#line 596 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    //ParserOptStack.getLast()->clearRejedSrv();
    PresentStationLst.clear();
;
    break;}
<<<<<<< HEAD
case 128:
#line 596 "ClntParser.y"
=======
case 130:
#line 600 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    ParserOptStack.getLast()->setRejedSrvLst(&PresentStationLst);
;
    break;}
<<<<<<< HEAD
case 129:
#line 603 "ClntParser.y"
=======
case 131:
#line 607 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    PresentStationLst.clear();
;
    break;}
<<<<<<< HEAD
case 130:
#line 605 "ClntParser.y"
=======
case 132:
#line 609 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    ParserOptStack.getLast()->setPrefSrvLst(&PresentStationLst);
;
    break;}
<<<<<<< HEAD
case 131:
#line 613 "ClntParser.y"
=======
case 133:
#line 617 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    ParserOptStack.getLast()->setPref(yyvsp[0].ival);
;
    break;}
<<<<<<< HEAD
case 132:
#line 620 "ClntParser.y"
=======
case 134:
#line 624 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    ParserOptStack.getLast()->setRapidCommit(yyvsp[0].ival);
;
    break;}
<<<<<<< HEAD
case 133:
#line 627 "ClntParser.y"
=======
case 135:
#line 631 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
	if (!ParserOptStack.getLast()->getExperimental()) {
	Log(Crit) << "Experimental 'addr-params' defined, but experimental features are disabled."
		  << "Add 'experimental' in global section of client.conf to enable it." << LogEnd;
	YYABORT;
    }
    ParserOptStack.getLast()->setAddrParams(true);
;
    break;}
<<<<<<< HEAD
case 134:
#line 638 "ClntParser.y"
=======
case 136:
#line 642 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    if (!ParserOptStack.getLast()->getExperimental()) {
	Log(Crit) << "Experimental remote autoconfiguration feature defined, but experimental"
	" features are disabled. Add 'experimental' in global section of client.conf "
	"to enable it." << LogEnd;
	YYABORT;
    }
#ifdef MOD_REMOTE_AUTOCONF
    CfgMgr->setRemoteAutoconf(true);
#else
	Log(Error) << "Remote autoconf support not compiled in." << LogEnd;
#endif
;
    break;}
<<<<<<< HEAD
case 135:
#line 655 "ClntParser.y"
=======
case 137:
#line 659 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    Log(Debug) << "CONFIRM support disabled (skip-confirm in client.conf)." << LogEnd;
    ParserOptStack.getLast()->setConfirm(false);
;
    break;}
<<<<<<< HEAD
case 136:
#line 662 "ClntParser.y"
{
    Log(Debug) << "Notify scripts enabled." << LogEnd;
    ParserOptStack.getLast()->setNotifyScripts(true);
;
    break;}
case 137:
#line 669 "ClntParser.y"
{
    Log(Debug) << "Reconfigure accept " << ((yyvsp[0].ival>0)?"enabled":"disabled") << "." << LogEnd;
    CfgMgr->setReconfigure(yyvsp[0].ival);
;
    break;}
case 138:
#line 677 "ClntParser.y"
=======
case 138:
#line 666 "ClntParser.y"
{
    Log(Debug) << "Reconfigure accept " << ((yyvsp[0].ival>0)?"enabled":"disabled") << "." << LogEnd;
    CfgMgr->setReconfigure(yyvsp[0].ival);
;
    break;}
case 139:
#line 673 "ClntParser.y"
{
    if (!strcasecmp(yyvsp[0].strval,"tcp"))
	CfgMgr->setDDNSProtocol(TCfgMgr::DNSUPDATE_TCP);
    else if (!strcasecmp(yyvsp[0].strval,"udp"))
	CfgMgr->setDDNSProtocol(TCfgMgr::DNSUPDATE_UDP);
    else if (!strcasecmp(yyvsp[0].strval,"any"))
	CfgMgr->setDDNSProtocol(TCfgMgr::DNSUPDATE_ANY);
    else {
        Log(Crit) << "Invalid ddns-protocol specifed:" << (yyvsp[0].strval) 
                  << ", supported values are tcp, udp, any." << LogEnd;
        YYABORT;
    }
    Log(Debug) << "DDNS: Setting protocol to " << (yyvsp[0].strval) << LogEnd;
;
    break;}
case 140:
#line 690 "ClntParser.y"
{
    Log(Debug) << "DDNS: Setting timeout to " << yyvsp[0].ival << "ms." << LogEnd;
    CfgMgr->setDDNSTimeout(yyvsp[0].ival);
;
    break;}
case 141:
#line 698 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    ParserOptStack.getLast()->setValid(yyvsp[0].ival);
;
    break;}
<<<<<<< HEAD
case 139:
#line 684 "ClntParser.y"
=======
case 142:
#line 705 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    ParserOptStack.getLast()->setT1(yyvsp[0].ival);
;
    break;}
<<<<<<< HEAD
case 140:
#line 691 "ClntParser.y"
=======
case 143:
#line 712 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    ParserOptStack.getLast()->setT2(yyvsp[0].ival);
;
    break;}
<<<<<<< HEAD
case 141:
#line 698 "ClntParser.y"
=======
case 144:
#line 719 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    Log(Debug) << "Prefix delegation option found." << LogEnd;
    StartPDDeclaration();
    EndPDDeclaration();
;
    break;}
<<<<<<< HEAD
case 142:
#line 704 "ClntParser.y"
=======
case 145:
#line 725 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    Log(Debug) << "Prefix delegation option found." << LogEnd;
    StartPDDeclaration();
    EndPDDeclaration();
;
    break;}
<<<<<<< HEAD
case 143:
#line 710 "ClntParser.y"
=======
case 146:
#line 731 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    StartPDDeclaration();
;
    break;}
<<<<<<< HEAD
case 144:
#line 714 "ClntParser.y"
{
    EndPDDeclaration();
;
    break;}
case 150:
#line 732 "ClntParser.y"
=======
case 147:
#line 735 "ClntParser.y"
{
    EndPDDeclaration();
;
    break;}
case 148:
#line 739 "ClntParser.y"
{
    Log(Debug) << "Prefix delegation option found, setting IAID to" << yyvsp[0].ival << LogEnd;
    StartPDDeclaration();
    EndPDDeclaration();
    ClntCfgPDLst.getLast()->setIAID(yyvsp[0].ival);
;
    break;}
case 149:
#line 746 "ClntParser.y"
{
    StartPDDeclaration();
    this->iaid = yyvsp[-1].ival;
;
    break;}
case 150:
#line 751 "ClntParser.y"
{
    EndPDDeclaration();
    ClntCfgPDLst.getLast()->setIAID(yyvsp[-4].ival);
;
    break;}
case 156:
#line 770 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    SPtr<TIPv6Addr> addr = new TIPv6Addr(yyvsp[-2].addrval);
    SPtr<TClntCfgPrefix> prefix = new TClntCfgPrefix(addr, (yyvsp[0].ival));
    PrefixLst.append(prefix);
    Log(Debug) << "PD: Adding single prefix " << addr->getPlain() << "/" << (yyvsp[0].ival) << "." << LogEnd;
;
    break;}
<<<<<<< HEAD
case 151:
#line 739 "ClntParser.y"
=======
case 157:
#line 777 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    Log(Debug) << "PD: Adding single prefix." << LogEnd;
    SPtr<TClntCfgPrefix> prefix = new TClntCfgPrefix(new TIPv6Addr("::",true), 0);
    PrefixLst.append(prefix);
;
    break;}
<<<<<<< HEAD
case 152:
#line 748 "ClntParser.y"
=======
case 158:
#line 785 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    switch(yyvsp[0].ival) {
    case 0:
	ParserOptStack.getLast()->setUnicast(false);
	break;
    case 1:
	ParserOptStack.getLast()->setUnicast(true);
	break;
    default:
	Log(Error) << "Invalid parameter (" << yyvsp[0].ival << ") passed to unicast in line "
		   << lex->YYText() << "." << LogEnd;
	return 1;
    }
;
    break;}
<<<<<<< HEAD
case 153:
#line 766 "ClntParser.y"
=======
case 159:
#line 803 "ClntParser.y"
{
    switch(yyvsp[0].ival) {
    case 0:
        ClntCfgIfaceLst.getLast()->setRouting(false);
        break;
    case 1:
        ClntCfgIfaceLst.getLast()->setRouting(true);
        break;
    default:
        Log(Error) << "Invalid parameter (" << yyvsp[0].ival << ") passed to routing in line "
                   << lex->YYText() << "." << LogEnd;
        return 1;
    }
;
    break;}
case 160:
#line 820 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    PresentStationLst.append(SPtr<TStationID> (new TStationID(new TIPv6Addr(yyvsp[0].addrval))));
;
    break;}
<<<<<<< HEAD
case 154:
#line 770 "ClntParser.y"
=======
case 161:
#line 824 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    PresentStationLst.append(SPtr<TStationID> (new TStationID(new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length))));
;
    break;}
<<<<<<< HEAD
case 155:
#line 774 "ClntParser.y"
=======
case 162:
#line 828 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    PresentStationLst.append(SPtr<TStationID> (new TStationID(new TIPv6Addr(yyvsp[0].addrval))));
;
    break;}
<<<<<<< HEAD
case 156:
#line 778 "ClntParser.y"
=======
case 163:
#line 832 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    PresentStationLst.append(SPtr<TStationID> (new TStationID( new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length))));
;
    break;}
<<<<<<< HEAD
case 157:
#line 784 "ClntParser.y"
{PresentAddrLst.append(SPtr<TIPv6Addr> (new TIPv6Addr(yyvsp[0].addrval)));;
    break;}
case 158:
#line 785 "ClntParser.y"
{PresentAddrLst.append(SPtr<TIPv6Addr> (new TIPv6Addr(yyvsp[0].addrval)));;
    break;}
case 159:
#line 789 "ClntParser.y"
{ PresentStringLst.append(SPtr<string> (new string(yyvsp[0].strval))); ;
    break;}
case 160:
#line 790 "ClntParser.y"
{ PresentStringLst.append(SPtr<string> (new string(yyvsp[0].strval))); ;
    break;}
case 161:
#line 793 "ClntParser.y"
{yyval.ival=yyvsp[0].ival;;
    break;}
case 162:
#line 794 "ClntParser.y"
{yyval.ival=yyvsp[0].ival;;
    break;}
case 163:
#line 802 "ClntParser.y"
=======
case 164:
#line 838 "ClntParser.y"
{PresentAddrLst.append(SPtr<TIPv6Addr> (new TIPv6Addr(yyvsp[0].addrval)));;
    break;}
case 165:
#line 839 "ClntParser.y"
{PresentAddrLst.append(SPtr<TIPv6Addr> (new TIPv6Addr(yyvsp[0].addrval)));;
    break;}
case 166:
#line 843 "ClntParser.y"
{ PresentStringLst.append(SPtr<string> (new string(yyvsp[0].strval))); ;
    break;}
case 167:
#line 844 "ClntParser.y"
{ PresentStringLst.append(SPtr<string> (new string(yyvsp[0].strval))); ;
    break;}
case 168:
#line 847 "ClntParser.y"
{yyval.ival=yyvsp[0].ival;;
    break;}
case 169:
#line 848 "ClntParser.y"
{yyval.ival=yyvsp[0].ival;;
    break;}
case 170:
#line 856 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    PresentAddrLst.clear();
//    PresentAddrLst.append(SPtr<TIPv6Addr> (new TIPv6Addr()));
    ParserOptStack.getLast()->setDNSServerLst(&PresentAddrLst);
;
    break;}
<<<<<<< HEAD
case 164:
#line 808 "ClntParser.y"
=======
case 171:
#line 862 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    PresentAddrLst.clear();
;
    break;}
<<<<<<< HEAD
case 165:
#line 811 "ClntParser.y"
=======
case 172:
#line 865 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    ParserOptStack.getLast()->setDNSServerLst(&PresentAddrLst);
;
    break;}
<<<<<<< HEAD
case 166:
#line 821 "ClntParser.y"
=======
case 173:
#line 875 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    PresentStringLst.clear();
    ParserOptStack.getLast()->setDomainLst(&PresentStringLst);
;
    break;}
<<<<<<< HEAD
case 167:
#line 825 "ClntParser.y"
=======
case 174:
#line 879 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    PresentStringLst.clear();
;
    break;}
<<<<<<< HEAD
case 168:
#line 828 "ClntParser.y"
=======
case 175:
#line 882 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    ParserOptStack.getLast()->setDomainLst(&PresentStringLst);
;
    break;}
<<<<<<< HEAD
case 169:
#line 838 "ClntParser.y"
=======
case 176:
#line 892 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    PresentAddrLst.clear();
//    PresentAddrLst.append(SPtr<TIPv6Addr> (new TIPv6Addr()));
    ParserOptStack.getLast()->setNTPServerLst(&PresentAddrLst);
;
    break;}
<<<<<<< HEAD
case 170:
#line 843 "ClntParser.y"
=======
case 177:
#line 897 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    PresentAddrLst.clear();
;
    break;}
<<<<<<< HEAD
case 171:
#line 846 "ClntParser.y"
=======
case 178:
#line 900 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    ParserOptStack.getLast()->setNTPServerLst(&PresentAddrLst);
;
    break;}
<<<<<<< HEAD
case 172:
#line 856 "ClntParser.y"
=======
case 179:
#line 910 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    ParserOptStack.getLast()->setTimezone(string(""));
  ;
    break;}
<<<<<<< HEAD
case 173:
#line 860 "ClntParser.y"
=======
case 180:
#line 914 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    ParserOptStack.getLast()->setTimezone(yyvsp[0].strval);
;
    break;}
<<<<<<< HEAD
case 174:
#line 870 "ClntParser.y"
=======
case 181:
#line 924 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    PresentAddrLst.clear();
//    PresentAddrLst.append(SPtr<TIPv6Addr> (new TIPv6Addr()));
    ParserOptStack.getLast()->setSIPServerLst(&PresentAddrLst);
;
    break;}
<<<<<<< HEAD
case 175:
#line 875 "ClntParser.y"
=======
case 182:
#line 929 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    PresentAddrLst.clear();
;
    break;}
<<<<<<< HEAD
case 176:
#line 878 "ClntParser.y"
=======
case 183:
#line 932 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    ParserOptStack.getLast()->setSIPServerLst(&PresentAddrLst);
;
    break;}
<<<<<<< HEAD
case 177:
#line 888 "ClntParser.y"
=======
case 184:
#line 942 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    PresentStringLst.clear();
    ParserOptStack.getLast()->setSIPDomainLst(&PresentStringLst);
;
    break;}
<<<<<<< HEAD
case 178:
#line 892 "ClntParser.y"
=======
case 185:
#line 946 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    PresentStringLst.clear();
;
    break;}
<<<<<<< HEAD
case 179:
#line 895 "ClntParser.y"
=======
case 186:
#line 949 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    ParserOptStack.getLast()->setSIPDomainLst(&PresentStringLst);
;
    break;}
<<<<<<< HEAD
case 180:
#line 905 "ClntParser.y"
=======
case 187:
#line 959 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    ParserOptStack.getLast()->setFQDN(string(""));
;
    break;}
<<<<<<< HEAD
case 181:
#line 909 "ClntParser.y"
=======
case 188:
#line 963 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    ParserOptStack.getLast()->setFQDN(yyvsp[0].strval);
;
    break;}
<<<<<<< HEAD
case 182:
#line 916 "ClntParser.y"
=======
case 189:
#line 970 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    if (yyvsp[0].ival!=0 && yyvsp[0].ival!=1) {
	Log(Crit) << "Invalid FQDN S bit value: " << yyvsp[0].ival << ", expected 0 or 1." << LogEnd;
	YYABORT;
    }

    Log(Info) << "Setting FQDN S bit to " << yyvsp[0].ival << LogEnd;
    ParserOptStack.getLast()->setFQDNFlagS(yyvsp[0].ival);
;
    break;}
<<<<<<< HEAD
case 183:
#line 931 "ClntParser.y"
=======
case 190:
#line 985 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    PresentAddrLst.clear();
//    PresentAddrLst.append(SPtr<TIPv6Addr> (new TIPv6Addr()));
    ParserOptStack.getLast()->setNISServerLst(&PresentAddrLst);
;
    break;}
<<<<<<< HEAD
case 184:
#line 936 "ClntParser.y"
=======
case 191:
#line 990 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    PresentAddrLst.clear();
;
    break;}
<<<<<<< HEAD
case 185:
#line 939 "ClntParser.y"
=======
case 192:
#line 993 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    ParserOptStack.getLast()->setNISServerLst(&PresentAddrLst);
;
    break;}
<<<<<<< HEAD
case 186:
#line 949 "ClntParser.y"
=======
case 193:
#line 1003 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    PresentAddrLst.clear();
//    PresentAddrLst.append(SPtr<TIPv6Addr> (new TIPv6Addr()));
    ParserOptStack.getLast()->setNISPServerLst(&PresentAddrLst);
;
    break;}
<<<<<<< HEAD
case 187:
#line 954 "ClntParser.y"
=======
case 194:
#line 1008 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    PresentAddrLst.clear();
;
    break;}
<<<<<<< HEAD
case 188:
#line 957 "ClntParser.y"
=======
case 195:
#line 1011 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    ParserOptStack.getLast()->setNISPServerLst(&PresentAddrLst);
;
    break;}
<<<<<<< HEAD
case 189:
#line 967 "ClntParser.y"
=======
case 196:
#line 1021 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    ParserOptStack.getLast()->setNISDomain("");
;
    break;}
<<<<<<< HEAD
case 190:
#line 971 "ClntParser.y"
=======
case 197:
#line 1025 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    ParserOptStack.getLast()->setNISDomain(yyvsp[0].strval);
;
    break;}
<<<<<<< HEAD
case 191:
#line 982 "ClntParser.y"
=======
case 198:
#line 1036 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    ParserOptStack.getLast()->setNISPDomain("");
;
    break;}
<<<<<<< HEAD
case 192:
#line 986 "ClntParser.y"
=======
case 199:
#line 1040 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    ParserOptStack.getLast()->setNISPDomain(yyvsp[0].strval);
;
    break;}
<<<<<<< HEAD
case 193:
#line 996 "ClntParser.y"
=======
case 200:
#line 1050 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    ParserOptStack.getLast()->setLifetime();
;
    break;}
<<<<<<< HEAD
case 194:
#line 1003 "ClntParser.y"
=======
case 201:
#line 1057 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    Log(Debug) << "VendorSpec defined (no details)." << LogEnd;
    ParserOptStack.getLast()->setVendorSpec();
;
    break;}
<<<<<<< HEAD
case 195:
#line 1008 "ClntParser.y"
=======
case 202:
#line 1062 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    ParserOptStack.getLast()->setVendorSpec();
    Log(Debug) << "VendorSpec defined (multiple times)." << LogEnd;
;
    break;}
<<<<<<< HEAD
case 196:
#line 1015 "ClntParser.y"
{ VendorSpec.append( new TOptVendorSpecInfo(yyvsp[0].ival,0,0,0,0) ); ;
    break;}
case 197:
#line 1016 "ClntParser.y"
{ VendorSpec.append( new TOptVendorSpecInfo(yyvsp[-2].ival,yyvsp[0].ival,0,0,0) ); ;
    break;}
case 198:
#line 1017 "ClntParser.y"
{ VendorSpec.append( new TOptVendorSpecInfo(yyvsp[0].ival,0,0,0,0) ); ;
    break;}
case 199:
#line 1018 "ClntParser.y"
{ VendorSpec.append( new TOptVendorSpecInfo(yyvsp[-2].ival,yyvsp[0].ival,0,0,0) ); ;
    break;}
case 200:
#line 1023 "ClntParser.y"
=======
case 203:
#line 1069 "ClntParser.y"
{ VendorSpec.append( new TOptVendorSpecInfo(yyvsp[0].ival,0,0,0,0) ); ;
    break;}
case 204:
#line 1070 "ClntParser.y"
{ VendorSpec.append( new TOptVendorSpecInfo(yyvsp[-2].ival,yyvsp[0].ival,0,0,0) ); ;
    break;}
case 205:
#line 1071 "ClntParser.y"
{ VendorSpec.append( new TOptVendorSpecInfo(yyvsp[0].ival,0,0,0,0) ); ;
    break;}
case 206:
#line 1072 "ClntParser.y"
{ VendorSpec.append( new TOptVendorSpecInfo(yyvsp[-2].ival,yyvsp[0].ival,0,0,0) ); ;
    break;}
case 207:
#line 1077 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    ClntCfgIfaceLst.getLast()->addExtraOption(OPTION_AFTR_NAME, TOpt::Layout_String, false);
;
    break;}
<<<<<<< HEAD
case 201:
#line 1030 "ClntParser.y"
=======
case 208:
#line 1084 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    Log(Debug) << "Extra option defined: code=" << yyvsp[-2].ival << ", valuelen=" << yyvsp[0].duidval.length << LogEnd;
    SPtr<TOpt> opt = new TOptGeneric(yyvsp[-2].ival, yyvsp[0].duidval.duid, yyvsp[0].duidval.length, 0);
    ClntCfgIfaceLst.getLast()->addExtraOption(opt, TOpt::Layout_Duid, false);
;
    break;}
<<<<<<< HEAD
case 202:
#line 1036 "ClntParser.y"
=======
case 209:
#line 1090 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    SPtr<TIPv6Addr> addr(new TIPv6Addr(yyvsp[0].addrval));

    SPtr<TOpt> opt = new TOptAddr(yyvsp[-2].ival, addr, 0);
    ClntCfgIfaceLst.getLast()->addExtraOption(opt, TOpt::Layout_Addr, false);
    Log(Debug) << "Extra option defined: code=" << yyvsp[-2].ival << ", address=" << addr->getPlain() << LogEnd;
;
    break;}
<<<<<<< HEAD
case 203:
#line 1044 "ClntParser.y"
=======
case 210:
#line 1098 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    PresentAddrLst.clear();
;
    break;}
<<<<<<< HEAD
case 204:
#line 1047 "ClntParser.y"
=======
case 211:
#line 1101 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    SPtr<TOpt> opt = new TOptAddrLst(yyvsp[-3].ival, PresentAddrLst, 0);
    ClntCfgIfaceLst.getLast()->addExtraOption(opt, TOpt::Layout_AddrLst, false);
    Log(Debug) << "Extra option defined: code=" << yyvsp[-3].ival << ", containing "
	       << PresentAddrLst.count() << " addresses." << LogEnd;
;
    break;}
<<<<<<< HEAD
case 205:
#line 1054 "ClntParser.y"
=======
case 212:
#line 1108 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    SPtr<TOpt> opt = new TOptString(yyvsp[-2].ival, string(yyvsp[0].strval), 0);
    ClntCfgIfaceLst.getLast()->addExtraOption(opt, TOpt::Layout_String, false);
    Log(Debug) << "Extra option defined: code=" << yyvsp[-2].ival << ", string=" << yyvsp[0].strval << LogEnd;
;
    break;}
<<<<<<< HEAD
case 206:
#line 1060 "ClntParser.y"
=======
case 213:
#line 1114 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    // just request this option and expect OptAddr layout
    Log(Debug) << "Extra option requested: code=" << yyvsp[-2].ival << LogEnd;
    ClntCfgIfaceLst.getLast()->addExtraOption(yyvsp[-2].ival, TOpt::Layout_Addr, false);
;
    break;}
<<<<<<< HEAD
case 207:
#line 1066 "ClntParser.y"
=======
case 214:
#line 1120 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    // just request this option and expect OptString layout
    Log(Debug) << "Extra option requested: code=" << yyvsp[-2].ival << LogEnd;
    ClntCfgIfaceLst.getLast()->addExtraOption(yyvsp[-2].ival, TOpt::Layout_String, false);
;
    break;}
<<<<<<< HEAD
case 208:
#line 1072 "ClntParser.y"
=======
case 215:
#line 1126 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d
{
    // just request this option and expect OptAddrLst layout
    Log(Debug) << "Extra option requested: code=" << yyvsp[-1].ival << LogEnd;
    ClntCfgIfaceLst.getLast()->addExtraOption(yyvsp[-1].ival, TOpt::Layout_AddrLst, false);
;
    break;}
}

#line 839 "../bison++/bison.cc"
   /* the action file gets copied in in place of this dollarsign  */
  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YY_ClntParser_LSP_NEEDED
  yylsp -= yylen;
#endif

#if YY_ClntParser_DEBUG != 0
  if (YY_ClntParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YY_ClntParser_LSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = YY_ClntParser_LLOC.first_line;
      yylsp->first_column = YY_ClntParser_LLOC.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  YYGOTO(yynewstate);

YYLABEL(yyerrlab)   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++YY_ClntParser_NERRS;

#ifdef YY_ClntParser_ERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      YY_ClntParser_ERROR(msg);
	      free(msg);
	    }
	  else
	    YY_ClntParser_ERROR ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YY_ClntParser_ERROR_VERBOSE */
        YY_ClntParser_ERROR((char*)"parse error");
    }

  YYGOTO(yyerrlab1);
YYLABEL(yyerrlab1)   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (YY_ClntParser_CHAR == YYEOF)
	YYABORT;

#if YY_ClntParser_DEBUG != 0
      if (YY_ClntParser_DEBUG_FLAG)
	fprintf(stderr, "Discarding token %d (%s).\n", YY_ClntParser_CHAR, yytname[yychar1]);
#endif

      YY_ClntParser_CHAR = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;              /* Each real token shifted decrements this */

  YYGOTO(yyerrhandle);

YYLABEL(yyerrdefault)  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) YYGOTO(yydefault);
#endif

YYLABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YY_ClntParser_LSP_NEEDED
  yylsp--;
#endif

#if YY_ClntParser_DEBUG != 0
  if (YY_ClntParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

YYLABEL(yyerrhandle)

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yyerrdefault);

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    YYGOTO(yyerrdefault);

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrpop);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrpop);

  if (yyn == YYFINAL)
    YYACCEPT;

#if YY_ClntParser_DEBUG != 0
  if (YY_ClntParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = YY_ClntParser_LVAL;
#ifdef YY_ClntParser_LSP_NEEDED
  *++yylsp = YY_ClntParser_LLOC;
#endif

  yystate = yyn;
  YYGOTO(yynewstate);
/* end loop, in which YYGOTO may be used. */
  YYENDGOTO
}

/* END */

 #line 1038 "../bison++/bison.cc"
<<<<<<< HEAD
#line 1078 "ClntParser.y"
=======
#line 1132 "ClntParser.y"
>>>>>>> c851e389da43c1649eff5a1b7971999200e5d44d


/////////////////////////////////////////////////////////////////////////////
// programs section
/////////////////////////////////////////////////////////////////////////////


/**
 * method check whether interface with id=ifaceNr has been
 * already declared.
 *
 * @param ifindex interface index of the checked interface
 *
 * @return true if not declared.
 */
bool ClntParser::IfaceDefined(int ifindex)
{
  SPtr<TClntCfgIface> ptr;
  ClntCfgIfaceLst.first();
  while (ptr=ClntCfgIfaceLst.get())
  {
      if ((ptr->getID())==ifindex) {
	  Log(Crit) << "Interface with ifindex=" << ifindex << " is already defined." << LogEnd;
	  return false;
      }
  }
  return true;
}

//method check whether interface with id=ifaceName has been
//already declared
/**
 * method check whether interface with specified name has been
 * already declared.
 *
 * @param ifaceName name of the checked interface
 *
 * @return true if not declared.
 */
bool ClntParser::IfaceDefined(string ifaceName)
{
  SPtr<TClntCfgIface> ptr;
  ClntCfgIfaceLst.first();
  while (ptr=ClntCfgIfaceLst.get())
  {
      if (ptr->getName()==ifaceName) {
	  Log(Crit) << "Interface " << ifaceName << " is already defined." << LogEnd;
	  return false;
      }
  };
  return true;
}

/**
 * creates new scope appropriately for interface options and declarations
 * clears all lists except the list of interfaces and adds new group
 */
bool ClntParser::StartIfaceDeclaration(string ifaceName)
{
    if (!IfaceDefined(ifaceName))
	return false;

    ClntCfgIfaceLst.append(new TClntCfgIface(ifaceName));

    //Interface scope, so parameters associated with global scope are pushed on stack
    ParserOptStack.append(new TClntParsGlobalOpt(*ParserOptStack.getLast()));
    ClntCfgIALst.clear();
    ClntCfgAddrLst.clear();
    this->VendorSpec.clear();
    return true;
}

/**
 * creates new scope appropriately for interface options and declarations
 * clears all lists except the list of interfaces and adds new group
 */
bool ClntParser::StartIfaceDeclaration(int ifindex)
{
    if (!IfaceDefined(ifindex))
	return false;

    ClntCfgIfaceLst.append(new TClntCfgIface(ifindex));

    //Interface scope, so parameters associated with global scope are pushed on stack
    ParserOptStack.append(new TClntParsGlobalOpt(*ParserOptStack.getLast()));
    ClntCfgIALst.clear();
    ClntCfgAddrLst.clear();
    this->VendorSpec.clear();
    return true;
}

bool ClntParser::EndIfaceDeclaration()
{
    SPtr<TClntCfgIface> iface = ClntCfgIfaceLst.getLast();
    if (!iface) {
	Log(Crit) << "Internal error: Interface not found. Something is wrong. Very wrong." << LogEnd;
	return false;
    }

    // set interface options on the basis of just read information
    // preferred-server and rejected-servers are also copied here
    if (VendorSpec.count())
	ParserOptStack.getLast()->setVendorSpec(VendorSpec);
    iface->setOptions(ParserOptStack.getLast());
    iface->setPrefixLength(ParserOptStack.getLast()->getPrefixLength());

    if ( (iface->stateless()) && (ClntCfgIALst.count()) ) {
	Log(Crit) << "Interface " << iface->getFullName() << " is configured stateless, "
	    " but has " << ClntCfgIALst.count() << " IA(s) defined." << LogEnd;
	return false;
    }

    if ( (iface->stateless()) && (ClntCfgTALst.count()) ) {
	Log(Crit) << "Interface " << iface->getFullName() << " is configured stateless, "
	    " but has TA defined." << LogEnd;
	return false;
    }

    // add all IAs to the interface
    SPtr<TClntCfgIA> ia;
    ClntCfgIALst.first();
    while (ia=ClntCfgIALst.get()) {
	ClntCfgIfaceLst.getLast()->addIA(ia);
    }

    //add all TAs to the interface
    SPtr<TClntCfgTA> ptrTA;
    ClntCfgTALst.first();
    while ( ptrTA = ClntCfgTALst.get() ) {
	iface->addTA(ptrTA);
    }

    //add all PDs to the interface
    SPtr<TClntCfgPD> pd;
    ClntCfgPDLst.first();
    while (pd = ClntCfgPDLst.get() ) {
	iface->addPD(pd);
    }

    //restore global options
    ParserOptStack.delLast();
    ClntCfgIALst.clear();
    return true;
}

void ClntParser::EmptyIface()
{
    //set iface options on the basis of recent information
    ClntCfgIfaceLst.getLast()->setOptions(ParserOptStack.getLast());
    //add one IA with one address to this iface
    EmptyIA();
    ClntCfgIALst.getLast()->setOptions(ParserOptStack.getLast());
    ClntCfgIfaceLst.getLast()->addIA(ClntCfgIALst.getLast());
}

/**
 * method creates new scope appropriately for interface options and declarations
 * clears list of addresses
 *
 * @param aggregation - does this IA contains suboptions ( ia { ... } )
 */
void ClntParser::StartIADeclaration(bool aggregation)
{
  ParserOptStack.append(new TClntParsGlobalOpt(*ParserOptStack.getLast()));
  ParserOptStack.getLast()->setAddrHint(!aggregation);
  ClntCfgAddrLst.clear();
}

/**
 * Inbelivable piece of crap code. If you read this, rewrite this code immediately.
 *
 */
void ClntParser::EndIADeclaration()
{
    if(!ClntCfgAddrLst.count()) {
	EmptyIA();
    } else {
	SPtr<TClntCfgIA> ia = new TClntCfgIA();
	ClntCfgIALst.append(ia);
	SPtr<TClntCfgAddr> ptr;
	ClntCfgAddrLst.first();
	while(ptr=ClntCfgAddrLst.get())
	    ia->addAddr(ptr);
    }

    //set proper options specific for this IA
    ClntCfgIALst.getLast()->setOptions(ParserOptStack.getLast());

    ClntCfgAddrLst.clear();
    ParserOptStack.delLast();

    //this IA matches with previous ones and can be grouped with them
    //so it's should be left on the list and be appended with them to present list
}

void ClntParser::StartPDDeclaration()
{
  ParserOptStack.append(new TClntParsGlobalOpt(*ParserOptStack.getLast()));
  ClntCfgAddrLst.clear();
  PrefixLst.clear();
}

bool ClntParser::EndPDDeclaration()
{
    SPtr<TClntCfgPD> pd = new TClntCfgPD();
    pd->setOptions(ParserOptStack.getLast());

    // copy all defined prefixes
    PrefixLst.first();
    SPtr<TClntCfgPrefix> prefix;
    while (prefix = PrefixLst.get()) {
	pd->addPrefix(prefix);
    }

    PrefixLst.clear();

    ClntCfgPDLst.append(pd);
    ParserOptStack.delLast();
    return true;
}

/**
 * method adds 1 IA object (containing 1 address) to the ClntCfgIA list.
 * Both objects' properties are set to last parsed values
 *
 */
void ClntParser::EmptyIA()
{
    EmptyAddr();
    ClntCfgIALst.append(new TClntCfgIA());
    ClntCfgIALst.getLast()->setOptions(ParserOptStack.getLast());
    //ClntCfgIALst.getLast()->addAddr(ClntCfgAddrLst.getLast());
}

/**
 * method adds empty address to the ClntCfgAddrList list and sets
 * its properties to last parsed values
 *
 */
void ClntParser::EmptyAddr()
{
    ClntCfgAddrLst.append(new TClntCfgAddr());
    ClntCfgAddrLst.getLast()->setOptions(ParserOptStack.getLast());
}


int ClntParser::yylex()
{
    memset(&std::yylval,0, sizeof(std::yylval));
    memset(&this->yylval,0, sizeof(this->yylval));
    int x = this->lex->yylex();
    this->yylval=std::yylval;
    return x;
}

/**
 * This method is called when parsing error is detected.
 *
 * @param m - first invalid character
 */
void ClntParser::yyerror(char *m)
{
    Log(Crit) << "Config parse error: line " << lex->lineno()
	      << ", unexpected [" << lex->YYText() << "] token." << LogEnd;
}

/**
 * Desctructor. Just cleans things up
 *
 */

ClntParser::~ClntParser() {
    this->ClntCfgIfaceLst.clear();
    this->ClntCfgIALst.clear();
    this->ClntCfgTALst.clear();
    this->ClntCfgAddrLst.clear();
}
