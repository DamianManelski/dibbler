#define YY_ClntParser_h_included
#define YY_USE_CLASS

/*  A Bison++ parser, made from ClntParser.y  */

 /* with Bison++ version bison++ Version 1.21.9-1, adapted from GNU bison by coetmeur@icdc.fr
Maintained by Magnus Ekdahl <magnus@debian.org>
  */

#define YY_USE_CLASS

#line 1 "../bison++/bison.cc"
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Bob Corbett and Richard Stallman

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 1, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  

   As a special exception, when this file is copied by Bison++ into a
   Bison++ output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison, and has been in Bison++ since 1.21.9.  

*/

/* HEADER SECTION */
#if defined( _MSDOS ) || defined(MSDOS) || defined(__MSDOS__) 
 #define __MSDOS_AND_ALIKE
#endif

#if defined(_WINDOWS) && defined(_MSC_VER)
 #define __HAVE_NO_ALLOCA
 #define __MSDOS_AND_ALIKE
#endif

#ifndef alloca
 #if defined( __GNUC__)
  #define alloca __builtin_alloca

 #elif (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc)  || defined (__sgi)
  #include <alloca.h>

 #elif defined (__MSDOS_AND_ALIKE)
  #include <malloc.h>
  #ifndef __TURBOC__
   /* MS C runtime lib */
   #define alloca _alloca
  #endif

 #elif defined(_AIX)
  /* pragma must be put before any C/C++ instruction !! */
  #pragma alloca
  #include <malloc.h>

 #elif defined(__hpux)
  #ifdef __cplusplus
   extern "C" {
     void *alloca (unsigned int);
   };
  #else /* not __cplusplus */
   void *alloca ();
  #endif /* not __cplusplus */

 #endif /* not _AIX  not MSDOS, or __TURBOC__ or _AIX, not sparc.  */
#endif /* alloca not defined.  */

#ifdef c_plusplus
 #ifndef __cplusplus
  #define __cplusplus
 #endif
#endif

#ifdef __cplusplus
 #ifndef YY_USE_CLASS
/*#warning "For C++ its recomended to use bison++, otherwise classes won't be generated"*/
 #endif
#else
 #ifndef __STDC__
  #define const
 #endif
 #ifdef YY_USE_CLASS
  #error "This is a C++ header generated by bison++, please use a C++ compiler!"
 #endif
#endif

#include <stdio.h>
#define YYBISON 1  

 #line 88 "../bison++/bison.cc"
#line 3 "ClntParser.y"

#include <iostream>
#include <string>
#include <malloc.h>
#include "DHCPConst.h"
#include "SmartPtr.h"
#include "Container.h"
#include "ClntParser.h"
#include "ClntParsGlobalOpt.h"
#include "ClntCfgIface.h"
#include "ClntCfgAddr.h"
#include "ClntCfgIA.h"
#include "ClntCfgTA.h"
#include "ClntCfgPD.h"
#include "ClntOptVendorSpec.h"
#include "ClntCfgMgr.h"
#include "Logger.h"
#include "OptGeneric.h"
#include "OptAddr.h"
#include "OptAddrLst.h"
#include "OptString.h"

using namespace std;

#define YY_USE_CLASS
#line 30 "ClntParser.y"

#include "FlexLexer.h"
#define YY_ClntParser_MEMBERS  yyFlexLexer * lex;                                          \
/*List of options in scope stack,the most fresh is last in the list*/       \
List(TClntParsGlobalOpt) ParserOptStack;			            \
/*List of parsed interfaces/IAs/Addresses, last */                          \
/*interface/IA/address is just being parsing or have been just parsed*/     \
List(TClntCfgIface) ClntCfgIfaceLst;	                                    \
List(TClntCfgIA)    ClntCfgIALst;		                            \
List(TClntCfgTA)    ClntCfgTALst;                                           \
List(TClntCfgPD)    ClntCfgPDLst;                                           \
List(TClntCfgAddr)  ClntCfgAddrLst;                                         \
List(DigestTypes)   DigestLst;                                              \
/*Pointer to list which should contain either rejected servers or */        \
/*preffered servers*/                                                       \
List(TStationID) PresentStationLst;		                            \
List(TIPv6Addr) PresentAddrLst;			                            \
List(TClntCfgPrefix) PrefixLst;                                             \
List(string) PresentStringLst;	                                            \
List(TOptVendorSpecInfo) VendorSpec;					    \
bool IfaceDefined(int ifaceNr);                                             \
bool IfaceDefined(string ifaceName);                                        \
bool StartIfaceDeclaration(string ifaceName);                               \
bool StartIfaceDeclaration(int ifindex);                                    \
bool EndIfaceDeclaration();                                                 \
void EmptyIface();                                                          \
void StartIADeclaration(bool aggregation);                                  \
void EndIADeclaration();                                                    \
void StartPDDeclaration();                                                  \
bool EndPDDeclaration();                                                    \
void EmptyIA();                                                             \
void EmptyAddr();                                                           \
TClntCfgMgr * CfgMgr;                                                       \
bool iaidSet;                                                               \
unsigned int iaid;                                                          \
virtual ~ClntParser();                                                      \
EDUIDType DUIDType;                                                         \
int DUIDEnterpriseNumber;                                                   \
SPtr<TDUID> DUIDEnterpriseID;
#define YY_ClntParser_CONSTRUCTOR_PARAM  yyFlexLexer * lex
#define YY_ClntParser_CONSTRUCTOR_CODE                                                     \
    this->lex = lex;                                                        \
    ParserOptStack.append(new TClntParsGlobalOpt());                        \
    ParserOptStack.getFirst()->setIAIDCnt(1);                               \
    ParserOptStack.getLast();                                               \
    DUIDType = DUID_TYPE_NOT_DEFINED;                                       \
    DUIDEnterpriseID = 0;

#line 83 "ClntParser.y"
typedef union
{
    int ival;
    char *strval;
    struct SDuid  {
	int length;
	char* duid;
    } duidval;
    char addrval[16];
} yy_ClntParser_stype;
#define YY_ClntParser_STYPE yy_ClntParser_stype
#line 94 "ClntParser.y"

namespace std
{
    extern yy_ClntParser_stype yylval;
}

#line 88 "../bison++/bison.cc"
/* %{ and %header{ and %union, during decl */
#define YY_ClntParser_BISON 1

#ifndef YY_ClntParser_COMPATIBILITY
 #ifndef YY_USE_CLASS
  #define  YY_ClntParser_COMPATIBILITY 1
 #else
  #define  YY_ClntParser_COMPATIBILITY 0
 #endif
#endif

#if YY_ClntParser_COMPATIBILITY != 0
 /* backward compatibility */
 #ifdef YYLTYPE
  #ifndef YY_ClntParser_LTYPE
   #define YY_ClntParser_LTYPE YYLTYPE
  #endif
 #endif
/* Testing alternative bison solution
   /#ifdef YYSTYPE*/
#ifndef YY_ClntParser_STYPE 
   #define YY_ClntParser_STYPE YYSTYPE
#endif
/*#endif*/
 #ifdef YYDEBUG
  #ifndef YY_ClntParser_DEBUG
   #define  YY_ClntParser_DEBUG YYDEBUG
  #endif
 #endif
 
 /* use goto to be compatible */
 #ifndef YY_ClntParser_USE_GOTO
  #define YY_ClntParser_USE_GOTO 1
 #endif
#endif

/* use no goto to be clean in C++ */
#ifndef YY_ClntParser_USE_GOTO
 #define YY_ClntParser_USE_GOTO 0
#endif

#ifndef YY_ClntParser_PURE

 #line 130 "../bison++/bison.cc"

#line 130 "../bison++/bison.cc"
/*  YY_ClntParser_PURE */
#endif

/* section apres lecture def, avant lecture grammaire S2 */

 #line 134 "../bison++/bison.cc"

#line 134 "../bison++/bison.cc"
/* prefix */
#ifndef YY_ClntParser_DEBUG

 #line 136 "../bison++/bison.cc"
#define YY_ClntParser_DEBUG 1

#line 136 "../bison++/bison.cc"
/* YY_ClntParser_DEBUG */
#endif


#ifndef YY_ClntParser_LSP_NEEDED

 #line 141 "../bison++/bison.cc"

#line 141 "../bison++/bison.cc"
 /* YY_ClntParser_LSP_NEEDED*/
#endif



/* DEFAULT LTYPE*/
#ifdef YY_ClntParser_LSP_NEEDED
#ifndef YY_ClntParser_LTYPE
#ifndef BISON_YYLTYPE_ISDECLARED
#define BISON_YYLTYPE_ISDECLARED
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#endif
#define YY_ClntParser_LTYPE yyltype
#endif
#endif
/* DEFAULT STYPE*/
      /* We used to use `unsigned long' as YY_ClntParser_STYPE on MSDOS,
	 but it seems better to be consistent.
	 Most programs should declare their own type anyway.  */

#ifndef YY_ClntParser_STYPE
#define YY_ClntParser_STYPE int
#endif
/* DEFAULT MISCELANEOUS */
#ifndef YY_ClntParser_PARSE
#define YY_ClntParser_PARSE yyparse
#endif
#ifndef YY_ClntParser_LEX
#define YY_ClntParser_LEX yylex
#endif
#ifndef YY_ClntParser_LVAL
#define YY_ClntParser_LVAL yylval
#endif
#ifndef YY_ClntParser_LLOC
#define YY_ClntParser_LLOC yylloc
#endif
#ifndef YY_ClntParser_CHAR
#define YY_ClntParser_CHAR yychar
#endif
#ifndef YY_ClntParser_NERRS
#define YY_ClntParser_NERRS yynerrs
#endif
#ifndef YY_ClntParser_DEBUG_FLAG
#define YY_ClntParser_DEBUG_FLAG yydebug
#endif
#ifndef YY_ClntParser_ERROR
#define YY_ClntParser_ERROR yyerror
#endif

#ifndef YY_ClntParser_PARSE_PARAM
 #ifndef YY_USE_CLASS
  #ifdef YYPARSE_PARAM
   #define YY_ClntParser_PARSE_PARAM void* YYPARSE_PARAM 
  #else
   #ifndef __STDC__
    #ifndef __cplusplus
     #define YY_ClntParser_PARSE_PARAM
    #endif
   #endif
  #endif
 #endif
 #ifndef YY_ClntParser_PARSE_PARAM
  #define YY_ClntParser_PARSE_PARAM void
 #endif
#endif

#if YY_ClntParser_COMPATIBILITY != 0
/* backward compatibility */
#ifdef YY_ClntParser_LTYPE
#ifndef YYLTYPE
#define YYLTYPE YY_ClntParser_LTYPE
#else
/* WARNING obsolete !!! user defined YYLTYPE not reported into generated header */
#endif
#endif

/* Removed due to bison compabilityproblems
/#ifndef YYSTYPE
/#define YYSTYPE YY_ClntParser_STYPE
/#else*/
/* WARNING obsolete !!! user defined YYSTYPE not reported into generated header */
/*#endif*/

#ifdef YY_ClntParser_PURE
#  ifndef YYPURE
#    define YYPURE YY_ClntParser_PURE
#  endif
#endif

#ifdef YY_ClntParser_DEBUG
#  ifndef YYDEBUG
#    define YYDEBUG YY_ClntParser_DEBUG 
#  endif
#endif

#ifndef YY_ClntParser_ERROR_VERBOSE
 #ifdef YYERROR_VERBOSE
  #define YY_ClntParser_ERROR_VERBOSE YYERROR_VERBOSE
 #endif
#endif

#ifndef YY_ClntParser_LSP_NEEDED
#  ifdef YYLSP_NEEDED
#    define YY_ClntParser_LSP_NEEDED YYLSP_NEEDED
#  endif
#endif

#endif

#ifndef YY_USE_CLASS
/* TOKEN C */

 #line 263 "../bison++/bison.cc"
#define	T1_	258
#define	T2_	259
#define	PREF_TIME_	260
#define	DNS_SERVER_	261
#define	VALID_TIME_	262
#define	UNICAST_	263
#define	NTP_SERVER_	264
#define	DOMAIN_	265
#define	TIME_ZONE_	266
#define	SIP_SERVER_	267
#define	SIP_DOMAIN_	268
#define	NIS_SERVER_	269
#define	NISP_SERVER_	270
#define	NIS_DOMAIN_	271
#define	NISP_DOMAIN_	272
#define	FQDN_	273
#define	FQDN_S_	274
#define	LIFETIME_	275
#define	VENDOR_SPEC_	276
#define	IFACE_	277
#define	NO_CONFIG_	278
#define	REJECT_SERVERS_	279
#define	PREFERRED_SERVERS_	280
#define	IA_	281
#define	TA_	282
#define	IAID_	283
#define	ADDRESS_	284
#define	NAME_	285
#define	IPV6ADDR_	286
#define	WORKDIR_	287
#define	RAPID_COMMIT_	288
#define	OPTION_	289
#define	SCRIPT_	290
#define	LOGNAME_	291
#define	LOGLEVEL_	292
#define	LOGMODE_	293
#define	LOGCOLORS_	294
#define	STRING_	295
#define	HEXNUMBER_	296
#define	INTNUMBER_	297
#define	DUID_	298
#define	STRICT_RFC_NO_ROUTING_	299
#define	SKIP_CONFIRM_	300
#define	PD_	301
#define	PREFIX_	302
#define	DUID_TYPE_	303
#define	DUID_TYPE_LLT_	304
#define	DUID_TYPE_LL_	305
#define	DUID_TYPE_EN_	306
#define	AUTH_ENABLED_	307
#define	AUTH_ACCEPT_METHODS_	308
#define	DIGEST_NONE_	309
#define	DIGEST_PLAIN_	310
#define	DIGEST_HMAC_MD5_	311
#define	DIGEST_HMAC_SHA1_	312
#define	DIGEST_HMAC_SHA224_	313
#define	DIGEST_HMAC_SHA256_	314
#define	DIGEST_HMAC_SHA384_	315
#define	DIGEST_HMAC_SHA512_	316
#define	STATELESS_	317
#define	ANON_INF_REQUEST_	318
#define	INSIST_MODE_	319
#define	INACTIVE_MODE_	320
#define	EXPERIMENTAL_	321
#define	ADDR_PARAMS_	322
#define	REMOTE_AUTOCONF_	323
#define	AFTR_	324
#define	ADDRESS_LIST_	325
#define	STRING_KEYWORD_	326
#define	REQUEST_	327
#define	RECONFIGURE_	328


#line 263 "../bison++/bison.cc"
 /* #defines tokens */
#else
/* CLASS */
#ifndef YY_ClntParser_CLASS
#define YY_ClntParser_CLASS ClntParser
#endif
#ifndef YY_ClntParser_INHERIT
#define YY_ClntParser_INHERIT
#endif
#ifndef YY_ClntParser_MEMBERS
#define YY_ClntParser_MEMBERS 
#endif
#ifndef YY_ClntParser_LEX_BODY
#define YY_ClntParser_LEX_BODY  
#endif
#ifndef YY_ClntParser_ERROR_BODY
#define YY_ClntParser_ERROR_BODY  
#endif
#ifndef YY_ClntParser_CONSTRUCTOR_PARAM
#define YY_ClntParser_CONSTRUCTOR_PARAM
#endif
#ifndef YY_ClntParser_CONSTRUCTOR_CODE
#define YY_ClntParser_CONSTRUCTOR_CODE
#endif
#ifndef YY_ClntParser_CONSTRUCTOR_INIT
#define YY_ClntParser_CONSTRUCTOR_INIT
#endif
/* choose between enum and const */
#ifndef YY_ClntParser_USE_CONST_TOKEN
#define YY_ClntParser_USE_CONST_TOKEN 0
/* yes enum is more compatible with flex,  */
/* so by default we use it */ 
#endif
#if YY_ClntParser_USE_CONST_TOKEN != 0
#ifndef YY_ClntParser_ENUM_TOKEN
#define YY_ClntParser_ENUM_TOKEN yy_ClntParser_enum_token
#endif
#endif

class YY_ClntParser_CLASS YY_ClntParser_INHERIT
{
public: 
#if YY_ClntParser_USE_CONST_TOKEN != 0
/* static const int token ... */

 #line 307 "../bison++/bison.cc"
static const int T1_;
static const int T2_;
static const int PREF_TIME_;
static const int DNS_SERVER_;
static const int VALID_TIME_;
static const int UNICAST_;
static const int NTP_SERVER_;
static const int DOMAIN_;
static const int TIME_ZONE_;
static const int SIP_SERVER_;
static const int SIP_DOMAIN_;
static const int NIS_SERVER_;
static const int NISP_SERVER_;
static const int NIS_DOMAIN_;
static const int NISP_DOMAIN_;
static const int FQDN_;
static const int FQDN_S_;
static const int LIFETIME_;
static const int VENDOR_SPEC_;
static const int IFACE_;
static const int NO_CONFIG_;
static const int REJECT_SERVERS_;
static const int PREFERRED_SERVERS_;
static const int IA_;
static const int TA_;
static const int IAID_;
static const int ADDRESS_;
static const int NAME_;
static const int IPV6ADDR_;
static const int WORKDIR_;
static const int RAPID_COMMIT_;
static const int OPTION_;
static const int SCRIPT_;
static const int LOGNAME_;
static const int LOGLEVEL_;
static const int LOGMODE_;
static const int LOGCOLORS_;
static const int STRING_;
static const int HEXNUMBER_;
static const int INTNUMBER_;
static const int DUID_;
static const int STRICT_RFC_NO_ROUTING_;
static const int SKIP_CONFIRM_;
static const int PD_;
static const int PREFIX_;
static const int DUID_TYPE_;
static const int DUID_TYPE_LLT_;
static const int DUID_TYPE_LL_;
static const int DUID_TYPE_EN_;
static const int AUTH_ENABLED_;
static const int AUTH_ACCEPT_METHODS_;
static const int DIGEST_NONE_;
static const int DIGEST_PLAIN_;
static const int DIGEST_HMAC_MD5_;
static const int DIGEST_HMAC_SHA1_;
static const int DIGEST_HMAC_SHA224_;
static const int DIGEST_HMAC_SHA256_;
static const int DIGEST_HMAC_SHA384_;
static const int DIGEST_HMAC_SHA512_;
static const int STATELESS_;
static const int ANON_INF_REQUEST_;
static const int INSIST_MODE_;
static const int INACTIVE_MODE_;
static const int EXPERIMENTAL_;
static const int ADDR_PARAMS_;
static const int REMOTE_AUTOCONF_;
static const int AFTR_;
static const int ADDRESS_LIST_;
static const int STRING_KEYWORD_;
static const int REQUEST_;
static const int RECONFIGURE_;


#line 307 "../bison++/bison.cc"
 /* decl const */
#else
enum YY_ClntParser_ENUM_TOKEN { YY_ClntParser_NULL_TOKEN=0

 #line 310 "../bison++/bison.cc"
	,T1_=258
	,T2_=259
	,PREF_TIME_=260
	,DNS_SERVER_=261
	,VALID_TIME_=262
	,UNICAST_=263
	,NTP_SERVER_=264
	,DOMAIN_=265
	,TIME_ZONE_=266
	,SIP_SERVER_=267
	,SIP_DOMAIN_=268
	,NIS_SERVER_=269
	,NISP_SERVER_=270
	,NIS_DOMAIN_=271
	,NISP_DOMAIN_=272
	,FQDN_=273
	,FQDN_S_=274
	,LIFETIME_=275
	,VENDOR_SPEC_=276
	,IFACE_=277
	,NO_CONFIG_=278
	,REJECT_SERVERS_=279
	,PREFERRED_SERVERS_=280
	,IA_=281
	,TA_=282
	,IAID_=283
	,ADDRESS_=284
	,NAME_=285
	,IPV6ADDR_=286
	,WORKDIR_=287
	,RAPID_COMMIT_=288
	,OPTION_=289
	,SCRIPT_=290
	,LOGNAME_=291
	,LOGLEVEL_=292
	,LOGMODE_=293
	,LOGCOLORS_=294
	,STRING_=295
	,HEXNUMBER_=296
	,INTNUMBER_=297
	,DUID_=298
	,STRICT_RFC_NO_ROUTING_=299
	,SKIP_CONFIRM_=300
	,PD_=301
	,PREFIX_=302
	,DUID_TYPE_=303
	,DUID_TYPE_LLT_=304
	,DUID_TYPE_LL_=305
	,DUID_TYPE_EN_=306
	,AUTH_ENABLED_=307
	,AUTH_ACCEPT_METHODS_=308
	,DIGEST_NONE_=309
	,DIGEST_PLAIN_=310
	,DIGEST_HMAC_MD5_=311
	,DIGEST_HMAC_SHA1_=312
	,DIGEST_HMAC_SHA224_=313
	,DIGEST_HMAC_SHA256_=314
	,DIGEST_HMAC_SHA384_=315
	,DIGEST_HMAC_SHA512_=316
	,STATELESS_=317
	,ANON_INF_REQUEST_=318
	,INSIST_MODE_=319
	,INACTIVE_MODE_=320
	,EXPERIMENTAL_=321
	,ADDR_PARAMS_=322
	,REMOTE_AUTOCONF_=323
	,AFTR_=324
	,ADDRESS_LIST_=325
	,STRING_KEYWORD_=326
	,REQUEST_=327
	,RECONFIGURE_=328


#line 310 "../bison++/bison.cc"
 /* enum token */
     }; /* end of enum declaration */
#endif
public:
 int YY_ClntParser_PARSE (YY_ClntParser_PARSE_PARAM);
 virtual void YY_ClntParser_ERROR(char *msg) YY_ClntParser_ERROR_BODY;
#ifdef YY_ClntParser_PURE
#ifdef YY_ClntParser_LSP_NEEDED
 virtual int  YY_ClntParser_LEX (YY_ClntParser_STYPE *YY_ClntParser_LVAL,YY_ClntParser_LTYPE *YY_ClntParser_LLOC) YY_ClntParser_LEX_BODY;
#else
 virtual int  YY_ClntParser_LEX (YY_ClntParser_STYPE *YY_ClntParser_LVAL) YY_ClntParser_LEX_BODY;
#endif
#else
 virtual int YY_ClntParser_LEX() YY_ClntParser_LEX_BODY;
 YY_ClntParser_STYPE YY_ClntParser_LVAL;
#ifdef YY_ClntParser_LSP_NEEDED
 YY_ClntParser_LTYPE YY_ClntParser_LLOC;
#endif
 int   YY_ClntParser_NERRS;
 int    YY_ClntParser_CHAR;
#endif
#if YY_ClntParser_DEBUG != 0
 int YY_ClntParser_DEBUG_FLAG;   /*  nonzero means print parse trace     */
#endif
public:
 YY_ClntParser_CLASS(YY_ClntParser_CONSTRUCTOR_PARAM);
public:
 YY_ClntParser_MEMBERS 
};
/* other declare folow */
#if YY_ClntParser_USE_CONST_TOKEN != 0

 #line 341 "../bison++/bison.cc"
const int YY_ClntParser_CLASS::T1_=258;
const int YY_ClntParser_CLASS::T2_=259;
const int YY_ClntParser_CLASS::PREF_TIME_=260;
const int YY_ClntParser_CLASS::DNS_SERVER_=261;
const int YY_ClntParser_CLASS::VALID_TIME_=262;
const int YY_ClntParser_CLASS::UNICAST_=263;
const int YY_ClntParser_CLASS::NTP_SERVER_=264;
const int YY_ClntParser_CLASS::DOMAIN_=265;
const int YY_ClntParser_CLASS::TIME_ZONE_=266;
const int YY_ClntParser_CLASS::SIP_SERVER_=267;
const int YY_ClntParser_CLASS::SIP_DOMAIN_=268;
const int YY_ClntParser_CLASS::NIS_SERVER_=269;
const int YY_ClntParser_CLASS::NISP_SERVER_=270;
const int YY_ClntParser_CLASS::NIS_DOMAIN_=271;
const int YY_ClntParser_CLASS::NISP_DOMAIN_=272;
const int YY_ClntParser_CLASS::FQDN_=273;
const int YY_ClntParser_CLASS::FQDN_S_=274;
const int YY_ClntParser_CLASS::LIFETIME_=275;
const int YY_ClntParser_CLASS::VENDOR_SPEC_=276;
const int YY_ClntParser_CLASS::IFACE_=277;
const int YY_ClntParser_CLASS::NO_CONFIG_=278;
const int YY_ClntParser_CLASS::REJECT_SERVERS_=279;
const int YY_ClntParser_CLASS::PREFERRED_SERVERS_=280;
const int YY_ClntParser_CLASS::IA_=281;
const int YY_ClntParser_CLASS::TA_=282;
const int YY_ClntParser_CLASS::IAID_=283;
const int YY_ClntParser_CLASS::ADDRESS_=284;
const int YY_ClntParser_CLASS::NAME_=285;
const int YY_ClntParser_CLASS::IPV6ADDR_=286;
const int YY_ClntParser_CLASS::WORKDIR_=287;
const int YY_ClntParser_CLASS::RAPID_COMMIT_=288;
const int YY_ClntParser_CLASS::OPTION_=289;
const int YY_ClntParser_CLASS::SCRIPT_=290;
const int YY_ClntParser_CLASS::LOGNAME_=291;
const int YY_ClntParser_CLASS::LOGLEVEL_=292;
const int YY_ClntParser_CLASS::LOGMODE_=293;
const int YY_ClntParser_CLASS::LOGCOLORS_=294;
const int YY_ClntParser_CLASS::STRING_=295;
const int YY_ClntParser_CLASS::HEXNUMBER_=296;
const int YY_ClntParser_CLASS::INTNUMBER_=297;
const int YY_ClntParser_CLASS::DUID_=298;
const int YY_ClntParser_CLASS::STRICT_RFC_NO_ROUTING_=299;
const int YY_ClntParser_CLASS::SKIP_CONFIRM_=300;
const int YY_ClntParser_CLASS::PD_=301;
const int YY_ClntParser_CLASS::PREFIX_=302;
const int YY_ClntParser_CLASS::DUID_TYPE_=303;
const int YY_ClntParser_CLASS::DUID_TYPE_LLT_=304;
const int YY_ClntParser_CLASS::DUID_TYPE_LL_=305;
const int YY_ClntParser_CLASS::DUID_TYPE_EN_=306;
const int YY_ClntParser_CLASS::AUTH_ENABLED_=307;
const int YY_ClntParser_CLASS::AUTH_ACCEPT_METHODS_=308;
const int YY_ClntParser_CLASS::DIGEST_NONE_=309;
const int YY_ClntParser_CLASS::DIGEST_PLAIN_=310;
const int YY_ClntParser_CLASS::DIGEST_HMAC_MD5_=311;
const int YY_ClntParser_CLASS::DIGEST_HMAC_SHA1_=312;
const int YY_ClntParser_CLASS::DIGEST_HMAC_SHA224_=313;
const int YY_ClntParser_CLASS::DIGEST_HMAC_SHA256_=314;
const int YY_ClntParser_CLASS::DIGEST_HMAC_SHA384_=315;
const int YY_ClntParser_CLASS::DIGEST_HMAC_SHA512_=316;
const int YY_ClntParser_CLASS::STATELESS_=317;
const int YY_ClntParser_CLASS::ANON_INF_REQUEST_=318;
const int YY_ClntParser_CLASS::INSIST_MODE_=319;
const int YY_ClntParser_CLASS::INACTIVE_MODE_=320;
const int YY_ClntParser_CLASS::EXPERIMENTAL_=321;
const int YY_ClntParser_CLASS::ADDR_PARAMS_=322;
const int YY_ClntParser_CLASS::REMOTE_AUTOCONF_=323;
const int YY_ClntParser_CLASS::AFTR_=324;
const int YY_ClntParser_CLASS::ADDRESS_LIST_=325;
const int YY_ClntParser_CLASS::STRING_KEYWORD_=326;
const int YY_ClntParser_CLASS::REQUEST_=327;
const int YY_ClntParser_CLASS::RECONFIGURE_=328;


#line 341 "../bison++/bison.cc"
 /* const YY_ClntParser_CLASS::token */
#endif
/*apres const  */
YY_ClntParser_CLASS::YY_ClntParser_CLASS(YY_ClntParser_CONSTRUCTOR_PARAM) YY_ClntParser_CONSTRUCTOR_INIT
{
#if YY_ClntParser_DEBUG != 0
YY_ClntParser_DEBUG_FLAG=0;
#endif
YY_ClntParser_CONSTRUCTOR_CODE;
}
#endif

 #line 352 "../bison++/bison.cc"


#define	YYFINAL		265
#define	YYFLAG		-32768
#define	YYNTBASE	79

#define YYTRANSLATE(x) ((unsigned)(x) <= 328 ? yytranslate[x] : 168)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,    76,    78,     2,    77,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    74,     2,    75,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73
};

#if YY_ClntParser_DEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     5,     7,    10,    13,    15,    17,    19,
    21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
    41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
    61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
    81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
   101,   102,   109,   110,   117,   122,   127,   131,   135,   137,
   140,   142,   145,   147,   150,   152,   155,   157,   158,   159,
   166,   170,   173,   175,   178,   179,   185,   186,   193,   197,
   199,   202,   204,   207,   209,   212,   213,   219,   220,   227,
   232,   236,   239,   241,   243,   246,   248,   251,   253,   255,
   258,   261,   264,   267,   270,   273,   278,   280,   283,   285,
   288,   291,   292,   296,   298,   302,   304,   306,   308,   310,
   312,   314,   316,   318,   320,   322,   323,   327,   328,   332,
   335,   338,   340,   342,   344,   347,   350,   353,   356,   358,
   362,   363,   369,   371,   374,   376,   378,   380,   385,   387,
   390,   392,   394,   398,   402,   404,   408,   410,   414,   416,
   418,   421,   422,   427,   430,   431,   436,   439,   440,   445,
   448,   452,   455,   456,   461,   464,   465,   470,   473,   477,
   481,   484,   485,   490,   493,   494,   499,   502,   506,   509,
   513,   516,   519,   523,   525,   529,   533,   539,   542,   547,
   552,   553,   559,   564,   569,   574
};

static const short yyrhs[] = {    80,
     0,     0,    81,     0,    84,     0,    80,    81,     0,    80,
    84,     0,    82,     0,   103,     0,   104,     0,   102,     0,
   105,     0,   108,     0,   106,     0,   109,     0,   110,     0,
   111,     0,   112,     0,   116,     0,   117,     0,   118,     0,
   155,     0,   119,     0,   128,     0,   129,     0,    83,     0,
   107,     0,   138,     0,   143,     0,   145,     0,   147,     0,
   149,     0,   150,     0,   152,     0,   154,     0,   156,     0,
   158,     0,   160,     0,   161,     0,   162,     0,   163,     0,
   165,     0,   120,     0,   122,     0,   166,     0,   127,     0,
   131,     0,   132,     0,   125,     0,   101,     0,   126,     0,
     0,    22,    40,    74,    85,    87,    75,     0,     0,    22,
   142,    74,    86,    87,    75,     0,    22,    40,    74,    75,
     0,    22,   142,    74,    75,     0,    22,    40,    23,     0,
    22,   142,    23,     0,    82,     0,    87,    82,     0,    93,
     0,    87,    93,     0,    88,     0,    87,    88,     0,   133,
     0,    87,   133,     0,    27,     0,     0,     0,    27,    74,
    89,    91,    90,    75,     0,    27,    74,    75,     0,    91,
    92,     0,    92,     0,    28,   142,     0,     0,    26,    74,
    94,    96,    75,     0,     0,    26,   142,    74,    95,    96,
    75,     0,    26,    74,    75,     0,    26,     0,    26,   142,
     0,    83,     0,    96,    83,     0,    97,     0,    96,    97,
     0,     0,    29,    74,    98,   100,    75,     0,     0,    29,
   142,    74,    99,   100,    75,     0,    29,   142,    74,    75,
     0,    29,    74,    75,     0,    29,   142,     0,    29,     0,
   101,     0,   100,   101,     0,    31,     0,   100,    31,     0,
   124,     0,   130,     0,    37,   142,     0,    38,    40,     0,
    36,    40,     0,    39,   142,     0,    48,    49,     0,    48,
    50,     0,    48,    51,   142,    43,     0,    62,     0,    32,
    40,     0,    44,     0,    35,    40,     0,    52,   142,     0,
     0,    53,   113,   114,     0,   115,     0,   114,    76,   115,
     0,    56,     0,    57,     0,    58,     0,    59,     0,    60,
     0,    61,     0,    63,     0,    65,     0,    64,     0,    66,
     0,     0,    24,   121,   139,     0,     0,    25,   123,   139,
     0,     5,   142,     0,    33,   142,     0,    67,     0,    68,
     0,    45,     0,    73,   142,     0,     7,   142,     0,     3,
   142,     0,     4,   142,     0,    46,     0,    46,    74,    75,
     0,     0,    46,    74,   134,   135,    75,     0,   136,     0,
   135,   136,     0,   137,     0,   131,     0,   132,     0,    47,
    31,    77,   142,     0,    47,     0,     8,   142,     0,    31,
     0,    43,     0,   139,    76,    31,     0,   139,    76,    43,
     0,    31,     0,   140,    76,    31,     0,    40,     0,   141,
    76,    40,     0,    41,     0,    42,     0,    34,     6,     0,
     0,    34,     6,   144,   140,     0,    34,    10,     0,     0,
    34,    10,   146,   141,     0,    34,     9,     0,     0,    34,
     9,   148,   140,     0,    34,    11,     0,    34,    11,    40,
     0,    34,    12,     0,     0,    34,    12,   151,   140,     0,
    34,    13,     0,     0,    34,    13,   153,   141,     0,    34,
    18,     0,    34,    18,    40,     0,    34,    19,   142,     0,
    34,    14,     0,     0,    34,    14,   157,   140,     0,    34,
    15,     0,     0,    34,    15,   159,   140,     0,    34,    16,
     0,    34,    16,    40,     0,    34,    17,     0,    34,    17,
    40,     0,    34,    20,     0,    34,    21,     0,    34,    21,
   164,     0,   142,     0,   142,    78,   142,     0,   164,    76,
   142,     0,   164,    76,   142,    78,   142,     0,    34,    69,
     0,    34,   142,    78,    43,     0,    34,   142,    29,    31,
     0,     0,    34,   142,    70,   167,   140,     0,    34,   142,
    71,    40,     0,    34,   142,    29,    72,     0,    34,   142,
    40,    72,     0,    34,   142,    70,     0
};

#endif

#if (YY_ClntParser_DEBUG != 0) || defined(YY_ClntParser_ERROR_VERBOSE) 
static const short yyrline[] = { 0,
   134,   135,   139,   140,   141,   142,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   163,   167,   168,   169,   170,   171,   172,
   173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
   183,   184,   185,   186,   187,   191,   192,   193,   194,   195,
   202,   207,   217,   224,   233,   245,   256,   269,   283,   284,
   285,   286,   287,   288,   289,   290,   297,   302,   309,   315,
   315,   323,   324,   328,   340,   344,   349,   354,   364,   373,
   379,   390,   391,   392,   393,   397,   403,   412,   417,   423,
   428,   433,   438,   445,   446,   447,   457,   470,   471,   475,
   485,   490,   495,   501,   502,   503,   511,   518,   525,   534,
   540,   543,   546,   551,   552,   556,   557,   558,   559,   560,
   561,   565,   571,   577,   583,   590,   595,   601,   604,   611,
   618,   625,   636,   653,   660,   668,   675,   682,   689,   695,
   701,   705,   712,   713,   717,   718,   719,   723,   730,   739,
   757,   761,   765,   769,   776,   777,   781,   782,   785,   786,
   793,   799,   803,   812,   817,   820,   829,   835,   838,   847,
   851,   861,   867,   870,   879,   884,   887,   896,   900,   907,
   922,   928,   931,   940,   946,   949,   958,   962,   973,   977,
   987,   994,   999,  1007,  1008,  1009,  1010,  1014,  1021,  1027,
  1035,  1039,  1045,  1051,  1057,  1063
};

static const char * const yytname[] = {   "$","error","$illegal.","T1_","T2_",
"PREF_TIME_","DNS_SERVER_","VALID_TIME_","UNICAST_","NTP_SERVER_","DOMAIN_",
"TIME_ZONE_","SIP_SERVER_","SIP_DOMAIN_","NIS_SERVER_","NISP_SERVER_","NIS_DOMAIN_",
"NISP_DOMAIN_","FQDN_","FQDN_S_","LIFETIME_","VENDOR_SPEC_","IFACE_","NO_CONFIG_",
"REJECT_SERVERS_","PREFERRED_SERVERS_","IA_","TA_","IAID_","ADDRESS_","NAME_",
"IPV6ADDR_","WORKDIR_","RAPID_COMMIT_","OPTION_","SCRIPT_","LOGNAME_","LOGLEVEL_",
"LOGMODE_","LOGCOLORS_","STRING_","HEXNUMBER_","INTNUMBER_","DUID_","STRICT_RFC_NO_ROUTING_",
"SKIP_CONFIRM_","PD_","PREFIX_","DUID_TYPE_","DUID_TYPE_LLT_","DUID_TYPE_LL_",
"DUID_TYPE_EN_","AUTH_ENABLED_","AUTH_ACCEPT_METHODS_","DIGEST_NONE_","DIGEST_PLAIN_",
"DIGEST_HMAC_MD5_","DIGEST_HMAC_SHA1_","DIGEST_HMAC_SHA224_","DIGEST_HMAC_SHA256_",
"DIGEST_HMAC_SHA384_","DIGEST_HMAC_SHA512_","STATELESS_","ANON_INF_REQUEST_",
"INSIST_MODE_","INACTIVE_MODE_","EXPERIMENTAL_","ADDR_PARAMS_","REMOTE_AUTOCONF_",
"AFTR_","ADDRESS_LIST_","STRING_KEYWORD_","REQUEST_","RECONFIGURE_","'{'","'}'",
"','","'/'","'-'","Grammar","GlobalDeclarationList","GlobalOptionDeclaration",
"InterfaceOptionDeclaration","IAOptionDeclaration","InterfaceDeclaration","@1",
"@2","InterfaceDeclarationsList","TADeclaration","@3","@4","TADeclarationList",
"IAID","IADeclaration","@5","@6","IADeclarationList","ADDRESDeclaration","@7",
"@8","ADDRESDeclarationList","ADDRESOptionDeclaration","LogLevelOption","LogModeOption",
"LogNameOption","LogColors","DuidTypeOption","NoIAsOptions","WorkDirOption",
"StrictRfcNoRoutingOption","ScriptName","AuthEnabledOption","AuthAcceptOption",
"@9","DigestList","Digest","AnonInfRequest","InactiveMode","InsistMode","Experimental",
"RejectServersOption","@10","PreferServersOption","@11","PreferredTimeOption",
"RapidCommitOption","ExperimentalAddrParams","ExperimentalRemoteAutoconf","SkipConfirm",
"ReconfigureAccept","ValidTimeOption","T1Option","T2Option","PDDeclaration",
"@12","PDOptionsList","PDOption","Prefix","UnicastOption","ADDRESDUIDList","ADDRESSList",
"StringList","Number","DNSServerOption","@13","DomainOption","@14","NTPServerOption",
"@15","TimeZoneOption","SIPServerOption","@16","SIPDomainOption","@17","FQDNOption",
"FQDNBits","NISServerOption","@18","NISPServerOption","@19","NISDomainOption",
"NISPDomainOption","LifetimeOption","VendorSpecOption","VendorSpecList","DsLiteTunnelOption",
"ExtraOption","@20",""
};
#endif

static const short yyr1[] = {     0,
    79,    79,    80,    80,    80,    80,    81,    81,    81,    81,
    81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
    81,    81,    81,    81,    82,    82,    82,    82,    82,    82,
    82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
    82,    82,    82,    82,    82,    83,    83,    83,    83,    83,
    85,    84,    86,    84,    84,    84,    84,    84,    87,    87,
    87,    87,    87,    87,    87,    87,    88,    89,    90,    88,
    88,    91,    91,    92,    94,    93,    95,    93,    93,    93,
    93,    96,    96,    96,    96,    98,    97,    99,    97,    97,
    97,    97,    97,   100,   100,   100,   100,   101,   101,   102,
   103,   104,   105,   106,   106,   106,   107,   108,   109,   110,
   111,   113,   112,   114,   114,   115,   115,   115,   115,   115,
   115,   116,   117,   118,   119,   121,   120,   123,   122,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   133,
   134,   133,   135,   135,   136,   136,   136,   137,   137,   138,
   139,   139,   139,   139,   140,   140,   141,   141,   142,   142,
   143,   144,   143,   145,   146,   145,   147,   148,   147,   149,
   149,   150,   151,   150,   152,   153,   152,   154,   154,   155,
   156,   157,   156,   158,   159,   158,   160,   160,   161,   161,
   162,   163,   163,   164,   164,   164,   164,   165,   166,   166,
   167,   166,   166,   166,   166,   166
};

static const short yyr2[] = {     0,
     1,     0,     1,     1,     2,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     0,     6,     0,     6,     4,     4,     3,     3,     1,     2,
     1,     2,     1,     2,     1,     2,     1,     0,     0,     6,
     3,     2,     1,     2,     0,     5,     0,     6,     3,     1,
     2,     1,     2,     1,     2,     0,     5,     0,     6,     4,
     3,     2,     1,     1,     2,     1,     2,     1,     1,     2,
     2,     2,     2,     2,     2,     4,     1,     2,     1,     2,
     2,     0,     3,     1,     3,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     0,     3,     0,     3,     2,
     2,     1,     1,     1,     2,     2,     2,     2,     1,     3,
     0,     5,     1,     2,     1,     1,     1,     4,     1,     2,
     1,     1,     3,     3,     1,     3,     1,     3,     1,     1,
     2,     0,     4,     2,     0,     4,     2,     0,     4,     2,
     3,     2,     0,     4,     2,     0,     4,     2,     3,     3,
     2,     0,     4,     2,     0,     4,     2,     3,     2,     3,
     2,     2,     3,     1,     3,     3,     5,     2,     4,     4,
     0,     5,     4,     4,     4,     3
};

static const short yydefact[] = {     2,
     0,     0,     0,     0,     0,     0,   126,   128,     0,     0,
     0,     0,     0,     0,     0,     0,   109,   134,     0,     0,
   112,   107,   122,   124,   123,   125,   132,   133,     0,     1,
     3,     7,    25,     4,    49,    10,     8,     9,    11,    13,
    26,    12,    14,    15,    16,    17,    18,    19,    20,    22,
    42,    43,    98,    48,    50,    45,    23,    24,    99,    46,
    47,    27,    28,    29,    30,    31,    32,    33,    34,    21,
    35,    36,    37,    38,    39,    40,    41,    44,   159,   160,
   137,   138,   130,   136,   150,     0,     0,     0,     0,   108,
   131,   161,   167,   164,   170,   172,   175,   181,   184,   187,
   189,   178,     0,   191,   192,   198,     0,   110,   102,   100,
   101,   103,   104,   105,     0,   111,     0,   135,     5,     6,
    57,    51,    58,    53,   151,   152,   127,   129,     0,     0,
     0,   171,     0,     0,     0,     0,   188,   190,   179,   180,
   194,   193,     0,     0,   206,     0,     0,     0,   116,   117,
   118,   119,   120,   121,   113,   114,    55,     0,    56,     0,
     0,   155,   163,   169,   157,   166,   174,   177,   183,   186,
     0,     0,   200,   204,   205,     0,   203,   199,   106,     0,
    80,    67,     0,   139,    59,     0,    63,    61,    65,     0,
   153,   154,     0,     0,   195,   196,   202,   115,    75,    81,
    68,   141,    52,    60,    64,    62,    66,    54,   156,   158,
     0,    79,     0,    77,    71,     0,   140,     0,   197,    93,
    82,     0,    84,     0,     0,    69,    73,   149,   146,   147,
     0,   143,   145,    86,    92,    76,    83,    85,     0,    74,
     0,    72,     0,   142,   144,    91,     0,    88,    78,    70,
     0,    96,     0,    94,    90,     0,   148,    97,    87,    95,
     0,    89,     0,     0,     0
};

static const short yydefgoto[] = {   263,
    30,    31,    32,    33,    34,   158,   160,   186,   187,   216,
   241,   226,   227,   188,   213,   224,   222,   223,   247,   256,
   253,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,   117,   155,   156,    47,    48,    49,    50,
    51,    88,    52,    89,    53,    54,    55,    56,    57,    58,
    59,    60,    61,   189,   218,   231,   232,   233,    62,   127,
   163,   166,   107,    63,   129,    64,   131,    65,   130,    66,
    67,   133,    68,   134,    69,    70,    71,   135,    72,   136,
    73,    74,    75,    76,   142,    77,    78,   176
};

static const short yypact[] = {   129,
   -12,   -12,   -12,   -12,   -12,   118,-32768,-32768,   -32,   -12,
   219,   -29,    -6,   -12,     4,   -12,-32768,-32768,   149,   -12,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -12,   129,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   -11,    -9,    48,    48,-32768,
-32768,    42,    45,    44,    47,    63,    84,    95,    96,   102,
   103,   109,   -12,-32768,   -12,-32768,    60,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   -12,-32768,   195,-32768,-32768,-32768,
-32768,    75,-32768,    81,-32768,-32768,    93,    93,   144,   144,
   136,-32768,   144,   136,   144,   144,-32768,-32768,-32768,-32768,
   100,   110,   -21,   117,   159,   161,   165,   168,-32768,-32768,
-32768,-32768,-32768,-32768,   139,-32768,-32768,   180,-32768,   180,
    67,-32768,   140,   140,-32768,   142,   140,   142,   140,   140,
   -12,   -12,-32768,-32768,-32768,   144,-32768,-32768,-32768,   195,
    27,   146,   253,   147,-32768,    13,-32768,-32768,-32768,    28,
-32768,-32768,   191,   183,-32768,   163,   140,-32768,   152,   169,
   170,   171,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   -12,-32768,   112,-32768,-32768,   216,-32768,    23,-32768,    66,
-32768,    38,-32768,   112,   -12,   216,-32768,   218,-32768,-32768,
     3,-32768,-32768,   182,   184,-32768,-32768,-32768,    53,-32768,
   197,-32768,   198,-32768,-32768,-32768,   116,   201,-32768,-32768,
   -12,-32768,    17,-32768,-32768,   116,-32768,-32768,-32768,-32768,
    18,-32768,   277,   278,-32768
};

static const short yypgoto[] = {-32768,
-32768,   249,   -61,   -67,   250,-32768,-32768,   121,   -68,-32768,
-32768,-32768,    56,   -51,-32768,-32768,    59,  -156,-32768,-32768,
    29,   -44,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   104,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -154,  -146,   -42,-32768,-32768,    55,-32768,-32768,   200,
   -24,   153,    -1,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768
};


#define	YYLAST		322


static const short yytable[] = {    81,
    82,    83,    84,    85,    87,     1,     2,    90,    91,   173,
   108,   121,   110,   123,   112,     1,     2,     3,   116,     4,
     5,     3,     3,     4,     4,     1,     2,   118,    79,    80,
     1,     2,     3,   109,     4,     5,     7,     8,   181,   182,
     1,     2,     3,   111,     4,    10,   183,   258,   258,   228,
   174,     7,     8,   181,   182,     1,     2,     3,   184,     4,
    10,   183,   122,   229,   124,   238,   220,    79,    80,   228,
    10,   230,  -162,   184,    22,  -168,   229,   244,   125,    27,
    28,   220,   238,  -165,   230,    10,   132,   203,   143,    22,
   126,   259,   262,  -173,    27,    28,   185,   191,   185,   144,
   199,   140,   208,   141,    27,   164,    79,    80,   167,   192,
   169,   170,   236,   148,     1,     2,     3,   205,     4,    27,
     3,   205,     4,  -176,   204,  -182,  -185,   249,   204,   145,
   146,     1,     2,     3,   206,     4,     5,   147,   206,   234,
   220,   137,   138,   207,    10,   221,   252,   207,   139,   157,
     6,   197,     7,     8,   237,   159,   221,    86,    79,    80,
     9,    10,    11,    12,    13,    14,    15,    16,   161,   195,
   196,   237,    17,    18,   162,   165,    19,   171,    27,   200,
    20,    21,     1,     2,     3,   172,     4,     5,   175,  -201,
    22,    23,    24,    25,    26,    27,    28,   113,   114,   115,
   177,    29,   254,     7,     8,   181,   182,   178,   260,   219,
   179,   254,    10,   183,   180,   193,   260,   194,   235,   201,
   202,   209,   210,   240,    92,   184,   212,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   211,    22,   214,   225,   215,   217,    27,    28,   243,   257,
   149,   150,   151,   152,   153,   154,   246,   248,    92,    79,
    80,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   250,   104,   105,   251,   255,   264,   265,   119,   120,
   190,   242,   239,   198,   261,   245,   168,   106,   128,     0,
     0,     0,     0,    79,    80,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   106
};

static const short yycheck[] = {     1,
     2,     3,     4,     5,     6,     3,     4,    40,    10,    31,
    40,    23,    14,    23,    16,     3,     4,     5,    20,     7,
     8,     5,     5,     7,     7,     3,     4,    29,    41,    42,
     3,     4,     5,    40,     7,     8,    24,    25,    26,    27,
     3,     4,     5,    40,     7,    33,    34,    31,    31,    47,
    72,    24,    25,    26,    27,     3,     4,     5,    46,     7,
    33,    34,    74,   218,    74,   222,    29,    41,    42,    47,
    33,   218,    31,    46,    62,    31,   231,    75,    31,    67,
    68,    29,   239,    40,   231,    33,    40,    75,    29,    62,
    43,    75,    75,    31,    67,    68,   158,    31,   160,    40,
    74,   103,    75,   105,    67,   130,    41,    42,   133,    43,
   135,   136,    75,   115,     3,     4,     5,   186,     7,    67,
     5,   190,     7,    40,   186,    31,    31,    75,   190,    70,
    71,     3,     4,     5,   186,     7,     8,    78,   190,    74,
    29,    40,    40,   186,    33,   213,    31,   190,    40,    75,
    22,   176,    24,    25,   222,    75,   224,    40,    41,    42,
    32,    33,    34,    35,    36,    37,    38,    39,    76,   171,
   172,   239,    44,    45,    31,    40,    48,    78,    67,   181,
    52,    53,     3,     4,     5,    76,     7,     8,    72,    31,
    62,    63,    64,    65,    66,    67,    68,    49,    50,    51,
    40,    73,   247,    24,    25,    26,    27,    43,   253,   211,
    43,   256,    33,    34,    76,    76,   261,    76,   220,    74,
    74,    31,    40,   225,     6,    46,    75,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    78,    62,    74,    28,    75,    75,    67,    68,    31,   251,
    56,    57,    58,    59,    60,    61,    75,    74,     6,    41,
    42,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    75,    20,    21,    77,    75,     0,     0,    30,    30,
   160,   226,   224,   180,   256,   231,   134,    69,    89,    -1,
    -1,    -1,    -1,    41,    42,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    69
};

#line 352 "../bison++/bison.cc"
 /* fattrs + tables */

/* parser code folow  */


/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: dollar marks section change
   the next  is replaced by the list of actions, each action
   as one case of the switch.  */ 

#if YY_ClntParser_USE_GOTO != 0
/* 
 SUPRESSION OF GOTO : on some C++ compiler (sun c++)
  the goto is strictly forbidden if any constructor/destructor
  is used in the whole function (very stupid isn't it ?)
 so goto are to be replaced with a 'while/switch/case construct'
 here are the macro to keep some apparent compatibility
*/
#define YYGOTO(lb) {yy_gotostate=lb;continue;}
#define YYBEGINGOTO  enum yy_labels yy_gotostate=yygotostart; \
                     for(;;) switch(yy_gotostate) { case yygotostart: {
#define YYLABEL(lb) } case lb: {
#define YYENDGOTO } } 
#define YYBEGINDECLARELABEL enum yy_labels {yygotostart
#define YYDECLARELABEL(lb) ,lb
#define YYENDDECLARELABEL  }
#else
/* macro to keep goto */
#define YYGOTO(lb) goto lb
#define YYBEGINGOTO 
#define YYLABEL(lb) lb:
#define YYENDGOTO
#define YYBEGINDECLARELABEL 
#define YYDECLARELABEL(lb)
#define YYENDDECLARELABEL  
#endif
/* LABEL DECLARATION */
YYBEGINDECLARELABEL
  YYDECLARELABEL(yynewstate)
  YYDECLARELABEL(yybackup)
/* YYDECLARELABEL(yyresume) */
  YYDECLARELABEL(yydefault)
  YYDECLARELABEL(yyreduce)
  YYDECLARELABEL(yyerrlab)   /* here on detecting error */
  YYDECLARELABEL(yyerrlab1)   /* here on error raised explicitly by an action */
  YYDECLARELABEL(yyerrdefault)  /* current state does not do anything special for the error token. */
  YYDECLARELABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */
  YYDECLARELABEL(yyerrhandle)  
YYENDDECLARELABEL
/* ALLOCA SIMULATION */
/* __HAVE_NO_ALLOCA */
#ifdef __HAVE_NO_ALLOCA
int __alloca_free_ptr(char *ptr,char *ref)
{if(ptr!=ref) free(ptr);
 return 0;}

#define __ALLOCA_alloca(size) malloc(size)
#define __ALLOCA_free(ptr,ref) __alloca_free_ptr((char *)ptr,(char *)ref)

#ifdef YY_ClntParser_LSP_NEEDED
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		    __ALLOCA_free(yyls,yylsa)+\
		   (num)); } while(0)
#else
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		   (num)); } while(0)
#endif
#else
#define __ALLOCA_return(num) do { return(num); } while(0)
#define __ALLOCA_alloca(size) alloca(size)
#define __ALLOCA_free(ptr,ref) 
#endif

/* ENDALLOCA SIMULATION */

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (YY_ClntParser_CHAR = YYEMPTY)
#define YYEMPTY         -2
#define YYEOF           0
#define YYACCEPT        __ALLOCA_return(0)
#define YYABORT         __ALLOCA_return(1)
#define YYERROR         YYGOTO(yyerrlab1)
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL          YYGOTO(yyerrlab)
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do                                                              \
  if (YY_ClntParser_CHAR == YYEMPTY && yylen == 1)                               \
    { YY_ClntParser_CHAR = (token), YY_ClntParser_LVAL = (value);                 \
      yychar1 = YYTRANSLATE (YY_ClntParser_CHAR);                                \
      YYPOPSTACK;                                               \
      YYGOTO(yybackup);                                            \
    }                                                           \
  else                                                          \
    { YY_ClntParser_ERROR ("syntax error: cannot back up"); YYERROR; }   \
while (0)

#define YYTERROR        1
#define YYERRCODE       256

#ifndef YY_ClntParser_PURE
/* UNPURE */
#define YYLEX           YY_ClntParser_LEX()
#ifndef YY_USE_CLASS
/* If nonreentrant, and not class , generate the variables here */
int     YY_ClntParser_CHAR;                      /*  the lookahead symbol        */
YY_ClntParser_STYPE      YY_ClntParser_LVAL;              /*  the semantic value of the */
				/*  lookahead symbol    */
int YY_ClntParser_NERRS;                 /*  number of parse errors so far */
#ifdef YY_ClntParser_LSP_NEEDED
YY_ClntParser_LTYPE YY_ClntParser_LLOC;   /*  location data for the lookahead     */
			/*  symbol                              */
#endif
#endif


#else
/* PURE */
#ifdef YY_ClntParser_LSP_NEEDED
#define YYLEX           YY_ClntParser_LEX(&YY_ClntParser_LVAL, &YY_ClntParser_LLOC)
#else
#define YYLEX           YY_ClntParser_LEX(&YY_ClntParser_LVAL)
#endif
#endif
#ifndef YY_USE_CLASS
#if YY_ClntParser_DEBUG != 0
int YY_ClntParser_DEBUG_FLAG;                    /*  nonzero means print parse trace     */
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif
#endif



/*  YYINITDEPTH indicates the initial size of the parser's stacks       */

#ifndef YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif


#if __GNUC__ > 1                /* GNU C and GNU C++ define this.  */
#define __yy_bcopy(FROM,TO,COUNT)       __builtin_memcpy(TO,FROM,COUNT)
#else                           /* not GNU C or C++ */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */

#ifdef __cplusplus
static void __yy_bcopy (char *from, char *to, int count)
#else
#ifdef __STDC__
static void __yy_bcopy (char *from, char *to, int count)
#else
static void __yy_bcopy (from, to, count)
     char *from;
     char *to;
     int count;
#endif
#endif
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}
#endif


int
#ifdef YY_USE_CLASS
 YY_ClntParser_CLASS::
#endif
     YY_ClntParser_PARSE(YY_ClntParser_PARSE_PARAM)
#ifndef __STDC__
#ifndef __cplusplus
#ifndef YY_USE_CLASS
/* parameter definition without protypes */
YY_ClntParser_PARSE_PARAM_DEF
#endif
#endif
#endif
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YY_ClntParser_STYPE *yyvsp;
  int yyerrstatus;      /*  number of tokens to shift before error messages enabled */
  int yychar1=0;          /*  lookahead token as an internal (translated) token number */

  short yyssa[YYINITDEPTH];     /*  the state stack                     */
  YY_ClntParser_STYPE yyvsa[YYINITDEPTH];        /*  the semantic value stack            */

  short *yyss = yyssa;          /*  refer to the stacks thru separate pointers */
  YY_ClntParser_STYPE *yyvs = yyvsa;     /*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YY_ClntParser_LSP_NEEDED
  YY_ClntParser_LTYPE yylsa[YYINITDEPTH];        /*  the location stack                  */
  YY_ClntParser_LTYPE *yyls = yylsa;
  YY_ClntParser_LTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YY_ClntParser_PURE
  int YY_ClntParser_CHAR;
  YY_ClntParser_STYPE YY_ClntParser_LVAL;
  int YY_ClntParser_NERRS;
#ifdef YY_ClntParser_LSP_NEEDED
  YY_ClntParser_LTYPE YY_ClntParser_LLOC;
#endif
#endif

  YY_ClntParser_STYPE yyval;             /*  the variable used to return         */
				/*  semantic values from the action     */
				/*  routines                            */

  int yylen;
/* start loop, in which YYGOTO may be used. */
YYBEGINGOTO

#if YY_ClntParser_DEBUG != 0
  if (YY_ClntParser_DEBUG_FLAG)
    fprintf(stderr, "Starting parse\n");
#endif
  yystate = 0;
  yyerrstatus = 0;
  YY_ClntParser_NERRS = 0;
  YY_ClntParser_CHAR = YYEMPTY;          /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YY_ClntParser_LSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
YYLABEL(yynewstate)

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YY_ClntParser_STYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YY_ClntParser_LSP_NEEDED
      YY_ClntParser_LTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YY_ClntParser_LSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YY_ClntParser_LSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	    YY_ClntParser_ERROR(((char*)"parser stack overflow"));
	  __ALLOCA_return(2);
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) __ALLOCA_alloca (yystacksize * sizeof (*yyssp));
      __yy_bcopy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      __ALLOCA_free(yyss1,yyssa);
      yyvs = (YY_ClntParser_STYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yyvsp));
      __yy_bcopy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
      __ALLOCA_free(yyvs1,yyvsa);
#ifdef YY_ClntParser_LSP_NEEDED
      yyls = (YY_ClntParser_LTYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yylsp));
      __yy_bcopy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
      __ALLOCA_free(yyls1,yylsa);
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YY_ClntParser_LSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YY_ClntParser_DEBUG != 0
      if (YY_ClntParser_DEBUG_FLAG)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YY_ClntParser_DEBUG != 0
  if (YY_ClntParser_DEBUG_FLAG)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  YYGOTO(yybackup);
YYLABEL(yybackup)

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* YYLABEL(yyresume) */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yydefault);

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (YY_ClntParser_CHAR == YYEMPTY)
    {
#if YY_ClntParser_DEBUG != 0
      if (YY_ClntParser_DEBUG_FLAG)
	fprintf(stderr, "Reading a token: ");
#endif
      YY_ClntParser_CHAR = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (YY_ClntParser_CHAR <= 0)           /* This means end of input. */
    {
      yychar1 = 0;
      YY_ClntParser_CHAR = YYEOF;                /* Don't call YYLEX any more */

#if YY_ClntParser_DEBUG != 0
      if (YY_ClntParser_DEBUG_FLAG)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(YY_ClntParser_CHAR);

#if YY_ClntParser_DEBUG != 0
      if (YY_ClntParser_DEBUG_FLAG)
	{
	  fprintf (stderr, "Next token is %d (%s", YY_ClntParser_CHAR, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, YY_ClntParser_CHAR, YY_ClntParser_LVAL);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    YYGOTO(yydefault);

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrlab);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrlab);

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YY_ClntParser_DEBUG != 0
  if (YY_ClntParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting token %d (%s), ", YY_ClntParser_CHAR, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (YY_ClntParser_CHAR != YYEOF)
    YY_ClntParser_CHAR = YYEMPTY;

  *++yyvsp = YY_ClntParser_LVAL;
#ifdef YY_ClntParser_LSP_NEEDED
  *++yylsp = YY_ClntParser_LLOC;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  YYGOTO(yynewstate);

/* Do the default action for the current state.  */
YYLABEL(yydefault)

  yyn = yydefact[yystate];
  if (yyn == 0)
    YYGOTO(yyerrlab);

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
YYLABEL(yyreduce)
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YY_ClntParser_DEBUG != 0
  if (YY_ClntParser_DEBUG_FLAG)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


 #line 839 "../bison++/bison.cc"

  switch (yyn) {

case 51:
#line 203 "ClntParser.y"
{
    if (!StartIfaceDeclaration(yyvsp[-1].strval))
	YYABORT;
;
    break;}
case 52:
#line 208 "ClntParser.y"
{
    delete [] yyvsp[-4].strval;
    if (!EndIfaceDeclaration())
	YYABORT;
;
    break;}
case 53:
#line 218 "ClntParser.y"
{
    if (!IfaceDefined(yyvsp[-1].ival))
	YYABORT;
    if (!StartIfaceDeclaration(yyvsp[-1].ival))
	YYABORT;
;
    break;}
case 54:
#line 225 "ClntParser.y"
{
    if (!EndIfaceDeclaration())
	YYABORT;
;
    break;}
case 55:
#line 234 "ClntParser.y"
{
    if (!IfaceDefined(string(yyvsp[-2].strval)))
	YYABORT;
    ClntCfgIfaceLst.append(new TClntCfgIface(yyvsp[-2].strval));
    delete [] yyvsp[-2].strval;
    EmptyIface();
;
    break;}
case 56:
#line 246 "ClntParser.y"
{
    if (!IfaceDefined(yyvsp[-2].ival))
	YYABORT;
    ClntCfgIfaceLst.append(new TClntCfgIface(yyvsp[-2].ival));
    EmptyIface();
;
    break;}
case 57:
#line 257 "ClntParser.y"
{
    if (!IfaceDefined(string(yyvsp[-1].strval)))
	YYABORT;
    ClntCfgIfaceLst.append(new TClntCfgIface(yyvsp[-1].strval));
    ClntCfgIfaceLst.getLast()->setOptions(ParserOptStack.getLast());
    ClntCfgIfaceLst.getLast()->setNoConfig();
    delete yyvsp[-1].strval;
;
    break;}
case 58:
#line 270 "ClntParser.y"
{
    if (!IfaceDefined(yyvsp[-1].ival))
	YYABORT;
    ClntCfgIfaceLst.append(SPtr<TClntCfgIface> (new TClntCfgIface(yyvsp[-1].ival)) );
    ClntCfgIfaceLst.getLast()->setOptions(ParserOptStack.getLast());
    ClntCfgIfaceLst.getLast()->setNoConfig();
;
    break;}
case 67:
#line 298 "ClntParser.y"
{
    //Log(Crit) << "TA without params." << LogEnd;
    this->ClntCfgTALst.append( new TClntCfgTA() ); // append new TA
;
    break;}
case 68:
#line 303 "ClntParser.y"
{
    //Log(Crit) << "TA with params started." << LogEnd;
    this->ClntCfgTALst.append( new TClntCfgTA() ); // append new TA
    this->iaidSet = false;
;
    break;}
case 69:
#line 309 "ClntParser.y"
{
    if (this->iaidSet)
	this->ClntCfgTALst.getLast()->setIAID(this->iaid);
    //Log(Crit) << "TA with params ended." << LogEnd;
;
    break;}
case 71:
#line 316 "ClntParser.y"
{
    //Log(Crit) << "TA without params." << LogEnd;
    this->ClntCfgTALst.append( new TClntCfgTA() ); // append new TA
;
    break;}
case 74:
#line 329 "ClntParser.y"
{
    this->iaidSet = true;
    this->iaid = yyvsp[0].ival;
    Log(Crit) << "IAID=" << this->iaid << " parsed." << LogEnd;
;
    break;}
case 75:
#line 341 "ClntParser.y"
{
    StartIADeclaration(false);
;
    break;}
case 76:
#line 345 "ClntParser.y"
{
    EndIADeclaration();
;
    break;}
case 77:
#line 350 "ClntParser.y"
{
    StartIADeclaration(false);
    this->iaid = yyvsp[-1].ival;
;
    break;}
case 78:
#line 355 "ClntParser.y"
{
    EndIADeclaration();
    Log(Info) << "Setting IAID to " << this->iaid << LogEnd;
    ClntCfgIALst.getLast()->setIAID(this->iaid);
;
    break;}
case 79:
#line 365 "ClntParser.y"
{
    StartIADeclaration(true);
    EndIADeclaration();
;
    break;}
case 80:
#line 374 "ClntParser.y"
{
    StartIADeclaration(true);
    EndIADeclaration();
;
    break;}
case 81:
#line 380 "ClntParser.y"
{
    StartIADeclaration(true);
    EndIADeclaration();
    Log(Info) << "Setting IAID to " << yyvsp[0].ival << LogEnd;
    ClntCfgIALst.getLast()->setIAID(yyvsp[0].ival);
;
    break;}
case 86:
#line 398 "ClntParser.y"
{
    SPtr<TClntParsGlobalOpt> globalOpt = ParserOptStack.getLast();
    SPtr<TClntParsGlobalOpt> newOpt = new TClntParsGlobalOpt(*globalOpt);
    ParserOptStack.append(newOpt);
;
    break;}
case 87:
#line 404 "ClntParser.y"
{
    //ClntCfgAddrLst.append(SPtr<TClntCfgAddr> (new TClntCfgAddr()));
    //set proper options specific for this Address
    //ClntCfgAddrLst.getLast()->setOptions(&(*ParserOptStack.getLast()));
    if (ParserOptStack.count())
	ParserOptStack.delLast();
;
    break;}
case 88:
#line 413 "ClntParser.y"
{
    ParserOptStack.append(new TClntParsGlobalOpt(*ParserOptStack.getLast()));
    ParserOptStack.getLast()->setAddrHint(false);
;
    break;}
case 89:
#line 418 "ClntParser.y"
{
    for (int i=0;i<yyvsp[-4].ival; i++) EmptyAddr();
    ParserOptStack.delLast();
;
    break;}
case 90:
#line 424 "ClntParser.y"
{
    for (int i=0;i<yyvsp[-2].ival; i++) EmptyAddr();
;
    break;}
case 91:
#line 429 "ClntParser.y"
{
    EmptyAddr();
;
    break;}
case 92:
#line 434 "ClntParser.y"
{
    for (int i=0;i<yyvsp[0].ival; i++) EmptyAddr();
;
    break;}
case 93:
#line 439 "ClntParser.y"
{
    EmptyAddr();
;
    break;}
case 96:
#line 448 "ClntParser.y"
{
    if (ParserOptStack.getLast()->getAddrHint())
    {
	ClntCfgAddrLst.append(new TClntCfgAddr(new TIPv6Addr(yyvsp[0].addrval)));
	ClntCfgAddrLst.getLast()->setOptions(ParserOptStack.getLast());
    }
    else
	YYABORT;  //this is aggregated version of IA
;
    break;}
case 97:
#line 458 "ClntParser.y"
{
    if (ParserOptStack.getLast()->getAddrHint())
    {
	ClntCfgAddrLst.append(new TClntCfgAddr(new TIPv6Addr(yyvsp[0].addrval)));
	ClntCfgAddrLst.getLast()->setOptions(ParserOptStack.getLast());
    }
    else
	YYABORT; //here is agregated version of IA
;
    break;}
case 100:
#line 476 "ClntParser.y"
{
    if ( (yyvsp[0].ival<1) || (yyvsp[0].ival>8) ) {
	Log(Crit) << "Invalid loglevel specified: " << yyvsp[0].ival << ". Allowed range: 1-8." << LogEnd;
    }
    logger::setLogLevel(yyvsp[0].ival);
;
    break;}
case 101:
#line 485 "ClntParser.y"
{
    logger::setLogMode(yyvsp[0].strval);
;
    break;}
case 102:
#line 490 "ClntParser.y"
{
    logger::setLogName(yyvsp[0].strval);
;
    break;}
case 103:
#line 496 "ClntParser.y"
{
    logger::setColors(yyvsp[0].ival==1);
;
    break;}
case 104:
#line 501 "ClntParser.y"
{ this->DUIDType  = DUID_TYPE_LLT;;
    break;}
case 105:
#line 502 "ClntParser.y"
{ this->DUIDType  = DUID_TYPE_LL; ;
    break;}
case 106:
#line 503 "ClntParser.y"
{
  this->DUIDType       = DUID_TYPE_EN;
  this->DUIDEnterpriseNumber = yyvsp[-1].ival;
  this->DUIDEnterpriseID     = new TDUID(yyvsp[0].duidval.duid, yyvsp[0].duidval.length);
;
    break;}
case 107:
#line 512 "ClntParser.y"
{
    ParserOptStack.getLast()->setIsIAs(false);
;
    break;}
case 108:
#line 519 "ClntParser.y"
{
    ParserOptStack.getLast()->setWorkDir(yyvsp[0].strval);
;
    break;}
case 109:
#line 526 "ClntParser.y"
{
    Log(Notice) << "Strict-rfc-no-routing directive set: addresses will be added with 128 prefix." << LogEnd;
    ParserOptStack.getLast()->setPrefixLength(128);
    // by default prefix is set to 128
;
    break;}
case 110:
#line 535 "ClntParser.y"
{
    CfgMgr->setScript(yyvsp[0].strval);
;
    break;}
case 111:
#line 540 "ClntParser.y"
{ ParserOptStack.getLast()->setAuthEnabled(yyvsp[0].ival); ;
    break;}
case 112:
#line 544 "ClntParser.y"
{
    DigestLst.clear();
;
    break;}
case 113:
#line 546 "ClntParser.y"
{
    ParserOptStack.getLast()->setAuthAcceptMethods(DigestLst);
;
    break;}
case 116:
#line 556 "ClntParser.y"
{ SPtr<DigestTypes> dt = new DigestTypes; *dt = DIGEST_HMAC_MD5; DigestLst.append(dt); ;
    break;}
case 117:
#line 557 "ClntParser.y"
{ SPtr<DigestTypes> dt = new DigestTypes; *dt = DIGEST_HMAC_SHA1; DigestLst.append(dt); ;
    break;}
case 118:
#line 558 "ClntParser.y"
{ SPtr<DigestTypes> dt = new DigestTypes; *dt = DIGEST_HMAC_SHA224; DigestLst.append(dt); ;
    break;}
case 119:
#line 559 "ClntParser.y"
{ SPtr<DigestTypes> dt = new DigestTypes; *dt = DIGEST_HMAC_SHA256; DigestLst.append(dt); ;
    break;}
case 120:
#line 560 "ClntParser.y"
{ SPtr<DigestTypes> dt = new DigestTypes; *dt = DIGEST_HMAC_SHA384; DigestLst.append(dt); ;
    break;}
case 121:
#line 561 "ClntParser.y"
{ SPtr<DigestTypes> dt = new DigestTypes; *dt = DIGEST_HMAC_SHA512; DigestLst.append(dt); ;
    break;}
case 122:
#line 566 "ClntParser.y"
{
    ParserOptStack.getLast()->setAnonInfRequest(true);
;
    break;}
case 123:
#line 572 "ClntParser.y"
{
    ParserOptStack.getLast()->setInactiveMode(true);
;
    break;}
case 124:
#line 578 "ClntParser.y"
{
    ParserOptStack.getLast()->setInsistMode(true);
;
    break;}
case 125:
#line 584 "ClntParser.y"
{
    Log(Crit) << "Experimental features are allowed." << LogEnd;
    ParserOptStack.getLast()->setExperimental();
;
    break;}
case 126:
#line 591 "ClntParser.y"
{
    //ParserOptStack.getLast()->clearRejedSrv();
    PresentStationLst.clear();
;
    break;}
case 127:
#line 595 "ClntParser.y"
{
    ParserOptStack.getLast()->setRejedSrvLst(&PresentStationLst);
;
    break;}
case 128:
#line 602 "ClntParser.y"
{
    PresentStationLst.clear();
;
    break;}
case 129:
#line 604 "ClntParser.y"
{
    ParserOptStack.getLast()->setPrefSrvLst(&PresentStationLst);
;
    break;}
case 130:
#line 612 "ClntParser.y"
{
    ParserOptStack.getLast()->setPref(yyvsp[0].ival);
;
    break;}
case 131:
#line 619 "ClntParser.y"
{
    ParserOptStack.getLast()->setRapidCommit(yyvsp[0].ival);
;
    break;}
case 132:
#line 626 "ClntParser.y"
{
	if (!ParserOptStack.getLast()->getExperimental()) {
	Log(Crit) << "Experimental 'addr-params' defined, but experimental features are disabled."
		  << "Add 'experimental' in global section of client.conf to enable it." << LogEnd;
	YYABORT;
    }
    ParserOptStack.getLast()->setAddrParams(true);
;
    break;}
case 133:
#line 637 "ClntParser.y"
{
    if (!ParserOptStack.getLast()->getExperimental()) {
	Log(Crit) << "Experimental remote autoconfiguration feature defined, but experimental"
	" features are disabled. Add 'experimental' in global section of client.conf "
	"to enable it." << LogEnd;
	YYABORT;
    }
#ifdef MOD_REMOTE_AUTOCONF
    CfgMgr->setRemoteAutoconf(true);
#else
	Log(Error) << "Remote autoconf support not compiled in." << LogEnd;
#endif
;
    break;}
case 134:
#line 654 "ClntParser.y"
{
    Log(Debug) << "CONFIRM support disabled (skip-confirm in client.conf)." << LogEnd;
    ParserOptStack.getLast()->setConfirm(false);
;
    break;}
case 135:
#line 661 "ClntParser.y"
{
    Log(Debug) << "Reconfigure accept " << ((yyvsp[0].ival>0)?"enabled":"disabled") << "." << LogEnd;
    CfgMgr->setReconfigure(yyvsp[0].ival);
;
    break;}
case 136:
#line 669 "ClntParser.y"
{
    ParserOptStack.getLast()->setValid(yyvsp[0].ival);
;
    break;}
case 137:
#line 676 "ClntParser.y"
{
    ParserOptStack.getLast()->setT1(yyvsp[0].ival);
;
    break;}
case 138:
#line 683 "ClntParser.y"
{
    ParserOptStack.getLast()->setT2(yyvsp[0].ival);
;
    break;}
case 139:
#line 690 "ClntParser.y"
{
    Log(Debug) << "Prefix delegation option found." << LogEnd;
    StartPDDeclaration();
    EndPDDeclaration();
;
    break;}
case 140:
#line 696 "ClntParser.y"
{
    Log(Debug) << "Prefix delegation option found." << LogEnd;
    StartPDDeclaration();
    EndPDDeclaration();
;
    break;}
case 141:
#line 702 "ClntParser.y"
{
    StartPDDeclaration();
;
    break;}
case 142:
#line 706 "ClntParser.y"
{
    EndPDDeclaration();
;
    break;}
case 148:
#line 724 "ClntParser.y"
{
    SPtr<TIPv6Addr> addr = new TIPv6Addr(yyvsp[-2].addrval);
    SPtr<TClntCfgPrefix> prefix = new TClntCfgPrefix(addr, (yyvsp[0].ival));
    PrefixLst.append(prefix);
    Log(Debug) << "PD: Adding single prefix " << addr->getPlain() << "/" << (yyvsp[0].ival) << "." << LogEnd;
;
    break;}
case 149:
#line 731 "ClntParser.y"
{
    Log(Debug) << "PD: Adding single prefix." << LogEnd;
    SPtr<TClntCfgPrefix> prefix = new TClntCfgPrefix(new TIPv6Addr("::",true), 0);
    PrefixLst.append(prefix);
;
    break;}
case 150:
#line 740 "ClntParser.y"
{
    switch(yyvsp[0].ival) {
    case 0:
	ParserOptStack.getLast()->setUnicast(false);
	break;
    case 1:
	ParserOptStack.getLast()->setUnicast(true);
	break;
    default:
	Log(Error) << "Invalid parameter (" << yyvsp[0].ival << ") passed to unicast in line "
		   << lex->YYText() << "." << LogEnd;
	return 1;
    }
;
    break;}
case 151:
#line 758 "ClntParser.y"
{
    PresentStationLst.append(SPtr<TStationID> (new TStationID(new TIPv6Addr(yyvsp[0].addrval))));
;
    break;}
case 152:
#line 762 "ClntParser.y"
{
    PresentStationLst.append(SPtr<TStationID> (new TStationID(new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length))));
;
    break;}
case 153:
#line 766 "ClntParser.y"
{
    PresentStationLst.append(SPtr<TStationID> (new TStationID(new TIPv6Addr(yyvsp[0].addrval))));
;
    break;}
case 154:
#line 770 "ClntParser.y"
{
    PresentStationLst.append(SPtr<TStationID> (new TStationID( new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length))));
;
    break;}
case 155:
#line 776 "ClntParser.y"
{PresentAddrLst.append(SPtr<TIPv6Addr> (new TIPv6Addr(yyvsp[0].addrval)));;
    break;}
case 156:
#line 777 "ClntParser.y"
{PresentAddrLst.append(SPtr<TIPv6Addr> (new TIPv6Addr(yyvsp[0].addrval)));;
    break;}
case 157:
#line 781 "ClntParser.y"
{ PresentStringLst.append(SPtr<string> (new string(yyvsp[0].strval))); ;
    break;}
case 158:
#line 782 "ClntParser.y"
{ PresentStringLst.append(SPtr<string> (new string(yyvsp[0].strval))); ;
    break;}
case 159:
#line 785 "ClntParser.y"
{yyval.ival=yyvsp[0].ival;;
    break;}
case 160:
#line 786 "ClntParser.y"
{yyval.ival=yyvsp[0].ival;;
    break;}
case 161:
#line 794 "ClntParser.y"
{
    PresentAddrLst.clear();
//    PresentAddrLst.append(SPtr<TIPv6Addr> (new TIPv6Addr()));
    ParserOptStack.getLast()->setDNSServerLst(&PresentAddrLst);
;
    break;}
case 162:
#line 800 "ClntParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 163:
#line 803 "ClntParser.y"
{
    ParserOptStack.getLast()->setDNSServerLst(&PresentAddrLst);
;
    break;}
case 164:
#line 813 "ClntParser.y"
{
    PresentStringLst.clear();
    ParserOptStack.getLast()->setDomainLst(&PresentStringLst);
;
    break;}
case 165:
#line 817 "ClntParser.y"
{
    PresentStringLst.clear();
;
    break;}
case 166:
#line 820 "ClntParser.y"
{
    ParserOptStack.getLast()->setDomainLst(&PresentStringLst);
;
    break;}
case 167:
#line 830 "ClntParser.y"
{
    PresentAddrLst.clear();
//    PresentAddrLst.append(SPtr<TIPv6Addr> (new TIPv6Addr()));
    ParserOptStack.getLast()->setNTPServerLst(&PresentAddrLst);
;
    break;}
case 168:
#line 835 "ClntParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 169:
#line 838 "ClntParser.y"
{
    ParserOptStack.getLast()->setNTPServerLst(&PresentAddrLst);
;
    break;}
case 170:
#line 848 "ClntParser.y"
{
    ParserOptStack.getLast()->setTimezone(string(""));
  ;
    break;}
case 171:
#line 852 "ClntParser.y"
{
    ParserOptStack.getLast()->setTimezone(yyvsp[0].strval);
;
    break;}
case 172:
#line 862 "ClntParser.y"
{
    PresentAddrLst.clear();
//    PresentAddrLst.append(SPtr<TIPv6Addr> (new TIPv6Addr()));
    ParserOptStack.getLast()->setSIPServerLst(&PresentAddrLst);
;
    break;}
case 173:
#line 867 "ClntParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 174:
#line 870 "ClntParser.y"
{
    ParserOptStack.getLast()->setSIPServerLst(&PresentAddrLst);
;
    break;}
case 175:
#line 880 "ClntParser.y"
{
    PresentStringLst.clear();
    ParserOptStack.getLast()->setSIPDomainLst(&PresentStringLst);
;
    break;}
case 176:
#line 884 "ClntParser.y"
{
    PresentStringLst.clear();
;
    break;}
case 177:
#line 887 "ClntParser.y"
{
    ParserOptStack.getLast()->setSIPDomainLst(&PresentStringLst);
;
    break;}
case 178:
#line 897 "ClntParser.y"
{
    ParserOptStack.getLast()->setFQDN(string(""));
;
    break;}
case 179:
#line 901 "ClntParser.y"
{
    ParserOptStack.getLast()->setFQDN(yyvsp[0].strval);
;
    break;}
case 180:
#line 908 "ClntParser.y"
{
    if (yyvsp[0].ival!=0 && yyvsp[0].ival!=1) {
	Log(Crit) << "Invalid FQDN S bit value: " << yyvsp[0].ival << ", expected 0 or 1." << LogEnd;
	YYABORT;
    }

    Log(Info) << "Setting FQDN S bit to " << yyvsp[0].ival << LogEnd;
    ParserOptStack.getLast()->setFQDNFlagS(yyvsp[0].ival);
;
    break;}
case 181:
#line 923 "ClntParser.y"
{
    PresentAddrLst.clear();
//    PresentAddrLst.append(SPtr<TIPv6Addr> (new TIPv6Addr()));
    ParserOptStack.getLast()->setNISServerLst(&PresentAddrLst);
;
    break;}
case 182:
#line 928 "ClntParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 183:
#line 931 "ClntParser.y"
{
    ParserOptStack.getLast()->setNISServerLst(&PresentAddrLst);
;
    break;}
case 184:
#line 941 "ClntParser.y"
{
    PresentAddrLst.clear();
//    PresentAddrLst.append(SPtr<TIPv6Addr> (new TIPv6Addr()));
    ParserOptStack.getLast()->setNISPServerLst(&PresentAddrLst);
;
    break;}
case 185:
#line 946 "ClntParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 186:
#line 949 "ClntParser.y"
{
    ParserOptStack.getLast()->setNISPServerLst(&PresentAddrLst);
;
    break;}
case 187:
#line 959 "ClntParser.y"
{
    ParserOptStack.getLast()->setNISDomain("");
;
    break;}
case 188:
#line 963 "ClntParser.y"
{
    ParserOptStack.getLast()->setNISDomain(yyvsp[0].strval);
;
    break;}
case 189:
#line 974 "ClntParser.y"
{
    ParserOptStack.getLast()->setNISPDomain("");
;
    break;}
case 190:
#line 978 "ClntParser.y"
{
    ParserOptStack.getLast()->setNISPDomain(yyvsp[0].strval);
;
    break;}
case 191:
#line 988 "ClntParser.y"
{
    ParserOptStack.getLast()->setLifetime();
;
    break;}
case 192:
#line 995 "ClntParser.y"
{
    Log(Debug) << "VendorSpec defined (no details)." << LogEnd;
    ParserOptStack.getLast()->setVendorSpec();
;
    break;}
case 193:
#line 1000 "ClntParser.y"
{
    ParserOptStack.getLast()->setVendorSpec();
    Log(Debug) << "VendorSpec defined (multiple times)." << LogEnd;
;
    break;}
case 194:
#line 1007 "ClntParser.y"
{ VendorSpec.append( new TOptVendorSpecInfo(yyvsp[0].ival,0,0,0,0) ); ;
    break;}
case 195:
#line 1008 "ClntParser.y"
{ VendorSpec.append( new TOptVendorSpecInfo(yyvsp[-2].ival,yyvsp[0].ival,0,0,0) ); ;
    break;}
case 196:
#line 1009 "ClntParser.y"
{ VendorSpec.append( new TOptVendorSpecInfo(yyvsp[0].ival,0,0,0,0) ); ;
    break;}
case 197:
#line 1010 "ClntParser.y"
{ VendorSpec.append( new TOptVendorSpecInfo(yyvsp[-2].ival,yyvsp[0].ival,0,0,0) ); ;
    break;}
case 198:
#line 1015 "ClntParser.y"
{
    ClntCfgIfaceLst.getLast()->addExtraOption(OPTION_AFTR_NAME, TOpt::Layout_String, false);
;
    break;}
case 199:
#line 1022 "ClntParser.y"
{
    Log(Debug) << "Extra option defined: code=" << yyvsp[-2].ival << ", valuelen=" << yyvsp[0].duidval.length << LogEnd;
    SPtr<TOpt> opt = new TOptGeneric(yyvsp[-2].ival, yyvsp[0].duidval.duid, yyvsp[0].duidval.length, 0);
    ClntCfgIfaceLst.getLast()->addExtraOption(opt, TOpt::Layout_Duid, false);
;
    break;}
case 200:
#line 1028 "ClntParser.y"
{
    SPtr<TIPv6Addr> addr(new TIPv6Addr(yyvsp[0].addrval));

    SPtr<TOpt> opt = new TOptAddr(yyvsp[-2].ival, addr, 0);
    ClntCfgIfaceLst.getLast()->addExtraOption(opt, TOpt::Layout_Addr, false);
    Log(Debug) << "Extra option defined: code=" << yyvsp[-2].ival << ", address=" << addr->getPlain() << LogEnd;
;
    break;}
case 201:
#line 1036 "ClntParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 202:
#line 1039 "ClntParser.y"
{
    SPtr<TOpt> opt = new TOptAddrLst(yyvsp[-3].ival, PresentAddrLst, 0);
    ClntCfgIfaceLst.getLast()->addExtraOption(opt, TOpt::Layout_AddrLst, false);
    Log(Debug) << "Extra option defined: code=" << yyvsp[-3].ival << ", containing "
	       << PresentAddrLst.count() << " addresses." << LogEnd;
;
    break;}
case 203:
#line 1046 "ClntParser.y"
{
    SPtr<TOpt> opt = new TOptString(yyvsp[-2].ival, string(yyvsp[0].strval), 0);
    ClntCfgIfaceLst.getLast()->addExtraOption(opt, TOpt::Layout_String, false);
    Log(Debug) << "Extra option defined: code=" << yyvsp[-2].ival << ", string=" << yyvsp[0].strval << LogEnd;
;
    break;}
case 204:
#line 1052 "ClntParser.y"
{
    // just request this option and expect OptAddr layout
    Log(Debug) << "Extra option requested: code=" << yyvsp[-2].ival << LogEnd;
    ClntCfgIfaceLst.getLast()->addExtraOption(yyvsp[-2].ival, TOpt::Layout_Addr, false);
;
    break;}
case 205:
#line 1058 "ClntParser.y"
{
    // just request this option and expect OptString layout
    Log(Debug) << "Extra option requested: code=" << yyvsp[-2].ival << LogEnd;
    ClntCfgIfaceLst.getLast()->addExtraOption(yyvsp[-2].ival, TOpt::Layout_String, false);
;
    break;}
case 206:
#line 1064 "ClntParser.y"
{
    // just request this option and expect OptAddrLst layout
    Log(Debug) << "Extra option requested: code=" << yyvsp[-1].ival << LogEnd;
    ClntCfgIfaceLst.getLast()->addExtraOption(yyvsp[-1].ival, TOpt::Layout_AddrLst, false);
;
    break;}
}

#line 839 "../bison++/bison.cc"
   /* the action file gets copied in in place of this dollarsign  */
  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YY_ClntParser_LSP_NEEDED
  yylsp -= yylen;
#endif

#if YY_ClntParser_DEBUG != 0
  if (YY_ClntParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YY_ClntParser_LSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = YY_ClntParser_LLOC.first_line;
      yylsp->first_column = YY_ClntParser_LLOC.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  YYGOTO(yynewstate);

YYLABEL(yyerrlab)   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++YY_ClntParser_NERRS;

#ifdef YY_ClntParser_ERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      YY_ClntParser_ERROR(msg);
	      free(msg);
	    }
	  else
	    YY_ClntParser_ERROR ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YY_ClntParser_ERROR_VERBOSE */
        YY_ClntParser_ERROR((char*)"parse error");
    }

  YYGOTO(yyerrlab1);
YYLABEL(yyerrlab1)   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (YY_ClntParser_CHAR == YYEOF)
	YYABORT;

#if YY_ClntParser_DEBUG != 0
      if (YY_ClntParser_DEBUG_FLAG)
	fprintf(stderr, "Discarding token %d (%s).\n", YY_ClntParser_CHAR, yytname[yychar1]);
#endif

      YY_ClntParser_CHAR = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;              /* Each real token shifted decrements this */

  YYGOTO(yyerrhandle);

YYLABEL(yyerrdefault)  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) YYGOTO(yydefault);
#endif

YYLABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YY_ClntParser_LSP_NEEDED
  yylsp--;
#endif

#if YY_ClntParser_DEBUG != 0
  if (YY_ClntParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

YYLABEL(yyerrhandle)

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yyerrdefault);

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    YYGOTO(yyerrdefault);

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrpop);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrpop);

  if (yyn == YYFINAL)
    YYACCEPT;

#if YY_ClntParser_DEBUG != 0
  if (YY_ClntParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = YY_ClntParser_LVAL;
#ifdef YY_ClntParser_LSP_NEEDED
  *++yylsp = YY_ClntParser_LLOC;
#endif

  yystate = yyn;
  YYGOTO(yynewstate);
/* end loop, in which YYGOTO may be used. */
  YYENDGOTO
}

/* END */

 #line 1038 "../bison++/bison.cc"
#line 1070 "ClntParser.y"


/////////////////////////////////////////////////////////////////////////////
// programs section
/////////////////////////////////////////////////////////////////////////////


/**
 * method check whether interface with id=ifaceNr has been
 * already declared.
 *
 * @param ifindex interface index of the checked interface
 *
 * @return true if not declared.
 */
bool ClntParser::IfaceDefined(int ifindex)
{
  SPtr<TClntCfgIface> ptr;
  ClntCfgIfaceLst.first();
  while (ptr=ClntCfgIfaceLst.get())
  {
      if ((ptr->getID())==ifindex) {
	  Log(Crit) << "Interface with ifindex=" << ifindex << " is already defined." << LogEnd;
	  return false;
      }
  }
  return true;
}

//method check whether interface with id=ifaceName has been
//already declared
/**
 * method check whether interface with specified name has been
 * already declared.
 *
 * @param ifaceName name of the checked interface
 *
 * @return true if not declared.
 */
bool ClntParser::IfaceDefined(string ifaceName)
{
  SPtr<TClntCfgIface> ptr;
  ClntCfgIfaceLst.first();
  while (ptr=ClntCfgIfaceLst.get())
  {
      if (ptr->getName()==ifaceName) {
	  Log(Crit) << "Interface " << ifaceName << " is already defined." << LogEnd;
	  return false;
      }
  };
  return true;
}

/**
 * creates new scope appropriately for interface options and declarations
 * clears all lists except the list of interfaces and adds new group
 */
bool ClntParser::StartIfaceDeclaration(string ifaceName)
{
    if (!IfaceDefined(ifaceName))
	return false;

    ClntCfgIfaceLst.append(new TClntCfgIface(ifaceName));

    //Interface scope, so parameters associated with global scope are pushed on stack
    ParserOptStack.append(new TClntParsGlobalOpt(*ParserOptStack.getLast()));
    ClntCfgIALst.clear();
    ClntCfgAddrLst.clear();
    this->VendorSpec.clear();
    return true;
}

/**
 * creates new scope appropriately for interface options and declarations
 * clears all lists except the list of interfaces and adds new group
 */
bool ClntParser::StartIfaceDeclaration(int ifindex)
{
    if (!IfaceDefined(ifindex))
	return false;

    ClntCfgIfaceLst.append(new TClntCfgIface(ifindex));

    //Interface scope, so parameters associated with global scope are pushed on stack
    ParserOptStack.append(new TClntParsGlobalOpt(*ParserOptStack.getLast()));
    ClntCfgIALst.clear();
    ClntCfgAddrLst.clear();
    this->VendorSpec.clear();
    return true;
}

bool ClntParser::EndIfaceDeclaration()
{
    SPtr<TClntCfgIface> iface = ClntCfgIfaceLst.getLast();
    if (!iface) {
	Log(Crit) << "Internal error: Interface not found. Something is wrong. Very wrong." << LogEnd;
	return false;
    }

    // set interface options on the basis of just read information
    // preferred-server and rejected-servers are also copied here
    if (VendorSpec.count())
	ParserOptStack.getLast()->setVendorSpec(VendorSpec);
    iface->setOptions(ParserOptStack.getLast());
    iface->setPrefixLength(ParserOptStack.getLast()->getPrefixLength());

    if ( (iface->stateless()) && (ClntCfgIALst.count()) ) {
	Log(Crit) << "Interface " << iface->getFullName() << " is configured stateless, "
	    " but has " << ClntCfgIALst.count() << " IA(s) defined." << LogEnd;
	return false;
    }

    if ( (iface->stateless()) && (ClntCfgTALst.count()) ) {
	Log(Crit) << "Interface " << iface->getFullName() << " is configured stateless, "
	    " but has TA defined." << LogEnd;
	return false;
    }

    // add all IAs to the interface
    SPtr<TClntCfgIA> ia;
    ClntCfgIALst.first();
    while (ia=ClntCfgIALst.get()) {
	ClntCfgIfaceLst.getLast()->addIA(ia);
    }

    //add all TAs to the interface
    SPtr<TClntCfgTA> ptrTA;
    ClntCfgTALst.first();
    while ( ptrTA = ClntCfgTALst.get() ) {
	iface->addTA(ptrTA);
    }

    //add all PDs to the interface
    SPtr<TClntCfgPD> pd;
    ClntCfgPDLst.first();
    while (pd = ClntCfgPDLst.get() ) {
	iface->addPD(pd);
    }

    //restore global options
    ParserOptStack.delLast();
    ClntCfgIALst.clear();
    return true;
}

void ClntParser::EmptyIface()
{
    //set iface options on the basis of recent information
    ClntCfgIfaceLst.getLast()->setOptions(ParserOptStack.getLast());
    //add one IA with one address to this iface
    EmptyIA();
    ClntCfgIALst.getLast()->setOptions(ParserOptStack.getLast());
    ClntCfgIfaceLst.getLast()->addIA(ClntCfgIALst.getLast());
}

/**
 * method creates new scope appropriately for interface options and declarations
 * clears list of addresses
 *
 * @param aggregation - does this IA contains suboptions ( ia { ... } )
 */
void ClntParser::StartIADeclaration(bool aggregation)
{
  ParserOptStack.append(new TClntParsGlobalOpt(*ParserOptStack.getLast()));
  ParserOptStack.getLast()->setAddrHint(!aggregation);
  ClntCfgAddrLst.clear();
}

/**
 * Inbelivable piece of crap code. If you read this, rewrite this code immediately.
 *
 */
void ClntParser::EndIADeclaration()
{
    if(!ClntCfgAddrLst.count()) {
	EmptyIA();
    } else {
	SPtr<TClntCfgIA> ia = new TClntCfgIA();
	ClntCfgIALst.append(ia);
	SPtr<TClntCfgAddr> ptr;
	ClntCfgAddrLst.first();
	while(ptr=ClntCfgAddrLst.get())
	    ia->addAddr(ptr);
    }

    //set proper options specific for this IA
    ClntCfgIALst.getLast()->setOptions(ParserOptStack.getLast());

    ClntCfgAddrLst.clear();
    ParserOptStack.delLast();

    //this IA matches with previous ones and can be grouped with them
    //so it's should be left on the list and be appended with them to present list
}

void ClntParser::StartPDDeclaration()
{
  ParserOptStack.append(new TClntParsGlobalOpt(*ParserOptStack.getLast()));
  ClntCfgAddrLst.clear();
  PrefixLst.clear();
}

bool ClntParser::EndPDDeclaration()
{
    SPtr<TClntCfgPD> pd = new TClntCfgPD();
    pd->setOptions(ParserOptStack.getLast());

    // copy all defined prefixes
    PrefixLst.first();
    SPtr<TClntCfgPrefix> prefix;
    while (prefix = PrefixLst.get()) {
	pd->addPrefix(prefix);
    }

    PrefixLst.clear();

    ClntCfgPDLst.append(pd);
    ParserOptStack.delLast();
    return true;
}

/**
 * method adds 1 IA object (containing 1 address) to the ClntCfgIA list.
 * Both objects' properties are set to last parsed values
 *
 */
void ClntParser::EmptyIA()
{
    EmptyAddr();
    ClntCfgIALst.append(new TClntCfgIA());
    ClntCfgIALst.getLast()->setOptions(ParserOptStack.getLast());
    //ClntCfgIALst.getLast()->addAddr(ClntCfgAddrLst.getLast());
}

/**
 * method adds empty address to the ClntCfgAddrList list and sets
 * its properties to last parsed values
 *
 */
void ClntParser::EmptyAddr()
{
    ClntCfgAddrLst.append(new TClntCfgAddr());
    ClntCfgAddrLst.getLast()->setOptions(ParserOptStack.getLast());
}


int ClntParser::yylex()
{
    memset(&std::yylval,0, sizeof(std::yylval));
    memset(&this->yylval,0, sizeof(this->yylval));
    int x = this->lex->yylex();
    this->yylval=std::yylval;
    return x;
}

/**
 * This method is called when parsing error is detected.
 *
 * @param m - first invalid character
 */
void ClntParser::yyerror(char *m)
{
    Log(Crit) << "Config parse error: line " << lex->lineno()
	      << ", unexpected [" << lex->YYText() << "] token." << LogEnd;
}

/**
 * Desctructor. Just cleans things up
 *
 */

ClntParser::~ClntParser() {
    this->ClntCfgIfaceLst.clear();
    this->ClntCfgIALst.clear();
    this->ClntCfgTALst.clear();
    this->ClntCfgAddrLst.clear();
}
