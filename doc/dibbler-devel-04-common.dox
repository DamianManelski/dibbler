/**
 *
 * @page generalInfo 4 General information
This section covers several loosely related topics.

@section generalReleases 4.1 Release cycle
Dibbler is being released as a one product, i.e. client, server and
relay are always released together. Each version is being designated
with three numbers, separated by periods, e.g. 0.4.2. Every time a new
significant functionality is added, the middle number is being
increased. When new release contains only fixes and small
improvements, only the minor number is changed. Leftmost number is
currently set to 0 as not all features mentioned in base DHCPv6
document (<a href="http://www.ietf.org/rfc/rfc3315.txt">RFC3315</a>) are implemented. 
When Dibbler implementation will be complete, release number will reach
1.0.0. Since DHCPv6 specification is extensive, don't expect this to
happen anytime soon.

@section generalGIT 4.2 GIT repository

Dibbler currently uses GIT repository available at github.com 
<a href="https://github.com/tomaszmrugalski/dibbler">https://github.com/tomaszmrugalski/dibbler</a>.
Please download latest sources from there. Dibbler previously used SVN
repository. Please DO NOT use it. It is kept around only for students,
who started their theses using SVN, so they can generate diffs easier.
Sources in SVN are old, obsolete, buggy and will eat your hard drive if
if you try to use it.

@section generalDocs 4.3 Documentation
There are two parts of the documentation: User's Guide and Developer's
Guide. User's Guide is written in LaTeX (*.tex files). 
To generate PDF files, you need to have LaTeX
installed. To generate Developer's Guide documentation, 
a tool called <a href"http://www.doxygen.org">Doxygen</a> is required. All
documentation is of course available at
<a href="http://klub.com.pl/dhcpv6">Dibbler's homepage</a>.

To generate all documentation, type (in Dibbler source directory):
@verbatim
make user devel
@endverbatim

Note that versions 0.7.3 and earlier had Developer's Guide and Code 
documentation separated. Those two documents are merged and are Doxygen
based.

@section generalMemoryCpu 4.4 Memory/CPU usage
This section provides basic insight about memory and CPU requirements
for the dibbler components. Folowing paragraphs describe memory and 
CPU usage measurements. They
were taken on a AMD Athlon 2800+ (actual clock speed: 2083MHz),
running under Linux 2.6.17.3. Dibbler was compiled with gcc 4.1.2
(exact version number printed by @c gcc @c --version command:
@verbatim
gcc (GCC) 4.1.2 20060715 (prerelease) (Debian 4.1.1-9)
@endverbatim

Every Dibbler component (client, server or relay) is event driven. It
means that it does nothing unless some data was received or a specific
timeout has been reached. Each component most of the time spends in a
select() system call. This means that (unless lots of traffic
is being received) actual CPU usage is 0. During tests, author was
unable to observe any CPU consumption above 0,0\%. 

In the 0.5.0 release, a compilation options called Modular features
was added (see Section @ref compilationModularFeatures). One of the possible
way of compiling Dibbler is to disable poslib - a library used to
perform DNS Updates. Dibbler binaries compiled without poslib are
designated as -wo-poslib. It is possible to compile Dibbler with
various compilation options. In particular (enabled by default)
@b -g option includes debugging information in the binary file
(this greatly affects binary file size, but does not affect memory
usage), @b -O0 (disably any kind of optimisation) or -Os (produce
smallest possible code). Debugging informations can be removed using
@b strip command (designated below as -stripped). Linux command
line tool called \b top was used to measure memory usage. VIRT is
a virtual memory size, RES denotes size of actual physical memory used
and SHR is a size of a shared memory. See top manual page for details.

<table border="1">
  <tr><td>VIRT</td><td>RES </td><td> SHR </td><td> %CPU </td><td>%MEM</td><td>Optim.</td><td>filesize</td><td>COMMAND</td></tr>
  <tr><td>3416</td><td>1564</td><td>1416 </td><td>  0.0 </td><td> 0.2 </td><td> -O0 </td><td> 7123510 </td><td> dibbler-server</td></tr>
  <tr><td>3416</td><td>1560</td><td>1416 </td><td>  0.0 </td><td> 0.2 </td><td> -O0 </td><td> 751948  </td><td> dibbler-server-stripped</td></tr>
  <tr><td>3328</td><td>1544</td><td>1400 </td><td>  0.0 </td><td> 0.2 </td><td> -O0 </td><td> 6533375 </td><td> dibbler-server-wo-poslib</td></tr>
  <tr><td>3328</td><td>1548</td><td>1400 </td><td>  0.0 </td><td> 0.2 </td><td> -O0 </td><td> 663592  </td><td> dibbler-server-wo-poslib-stripped</td></tr>
  <tr><td>3220</td><td>1436</td><td>1292 </td><td>  0.0 </td><td> 0.2 </td><td> -Os </td><td> 4596760 </td><td> dibbler-server run</td></tr>
  <tr><td>3140</td><td>1424</td><td>1276 </td><td>  0.0 </td><td> 0.2 </td><td> -Os </td><td> 468776  </td><td> dibbler-server-wo-poslib</td></tr>
  <tr><td>3388</td><td>1636</td><td>1496 </td><td>  0.0 </td><td> 0.2 </td><td> -O0 </td><td> 9771605 </td><td> dibbler-client</td></tr>
  <tr><td>3392</td><td>1644</td><td>1496 </td><td>  0.0 </td><td> 0.2 </td><td> -O0 </td><td> 725352  </td><td> dibbler-client-stripped</td></tr>
  <tr><td>3296</td><td>1608</td><td>1472 </td><td>  0.0 </td><td> 0.2 </td><td> -O0 </td><td> 9183726 </td><td> dibbler-client-wo-poslib</td></tr>
  <tr><td>3300</td><td>1612</td><td>1472 </td><td>  0.0 </td><td> 0.2 </td><td> -O0 </td><td> 639240  </td><td> dibbler-client-wo-poslib-stripped</td></tr>
  <tr><td>3212</td><td>1472</td><td>1336 </td><td>  0.0 </td><td> 0.2 </td><td> -Os </td><td> 5901734 </td><td> dibbler-client-wo-poslib</td></tr>
  <tr><td>3120</td><td>1456</td><td>1320 </td><td>  0.0 </td><td> 0.2 </td><td> -Os </td><td> 458984  </td><td> dibbler-client-wo-poslib</td></tr>
</table>

Dibbler stores data internally in lists. This means that server's
memory and CPU usage is a linearly proportional to a number of clients
it currently supports.

@todo: Long/performance tests are required.
*/

/**
 * @page srcOverview 5. Source code information
This section describes various aspects of Dibbler compilation, usage
and internal design.

@section srcOptionValues 5.1 Option values and filenames

DHCPv6 is a relatively new protocol and additional options are in a
specification phase. It means that until standarisation process is
over, they do not have any officially assigned numbers. Once
standarization process is over (and RFC document is released), this
option gets an official number. 

There's pretty good chance that different implementors may choose
diffrent values for those not-yet officialy accepted options. To
change those values in Dibbler, you have to modify file
misc/DHCPConst.h and recompile server or client. Make sure that you
build everything for scratch. Use \b make \b clean in Linux and
\b Clean \b up \b solution in Windows before you start building a new
version.

In default build, Dibbler stores all information in the
@c /var/lib/dibbler directory (Linux) or in the working directory
(Windows). There are multiple files stored in those
directories. However, sometimes there is a need to build Dibbler which uses
different directory or filename. To do so, simply edit
@c misc/Portable.h file and rebuild everything.

@section srcMemoryManagement 5.2 Memory Management using SmartPtr
To effectively fight memory leaks, clever mechanism was
introduced. Smart pointers are used to point to all dynamic
structures, e.g. messages, options or client informations in server
database. Smart pointer will free object by itself, when object is no
longer needed. When this is happening? When last smart pointer stops
pointing at the object. There is a tradeoff: normal pointers (*)
should not be mixed with smart pointers. 

Smart pointers are implemented as C++ class templates. Template is
called @c SPtr<TYPE>. @b Note: It has been renamed. Previous, obsolete
name is SmartPtr<TYPE>. Please, do not use it anymore.

To quickly explain smart pointers usage, here's short code example:
@verbatim
 1 void foo()  {
 2   SmartPtr<TIPv6Addr> addr = new TIPv6Addr("ff02::1:2");
 3   SmartPtr<TIPv6Addr> tmp;
 4   if (!tmp) cout << "Null pointer" << endl;
 5   tmp = addr;
 6   std::cout << addr->getPlain();
 7 }
@endverbatim
What's happened in those lines?
 - [1] -- Function starts.
 - [2] -- New TIPv6Addr object is created. Smart Pointer
  (SmartPtr$<$TIPv6Addr$>$) is also created to point at this object. Using
  normal pointer to achive the same goal would look like this: \\
  TIPv6Addr * addr = new TIPv6Addr("ff02::1:2");
 - [3] -- Another pointer is created. It is equivalent of the
  classical pointer (TIPv6Addr * tmp).
 - [4] -- Simple check if pointer does not point to anything.
 - [5] -- Smart pointers can be coppied in a easy way.
 - [6] -- Using object pointed by smart pointer is simple
 - [7] -- Here magic begins. addr and tmp are local variables, so
  they are destroyed here. But they are the only smart pointers which
  access TIPv6Addr object. So they are destroy that object. 

Object remain in memory as long as there is at least one smart pointer which points to this object. 
Smart pointers can be easily derefernced. Just add * before them:
@verbatim
cout << *addr << endl;
@endverbatim

SmartPtrs are often used to store various objects in a list. Cool part
of this solution is that you can hold objects of various derived
classes on one list in a very comfortable manner. There is an
additional template defined to create and manipulate such lists. It is
called TContainer. There's also useful macro defined to use this
without typing too much. Here are two examples how to define list of
addresses (both mean exactly the same):
@verbatim
TContainer< SPtr<TIPvAddr> > addrLst;
List(TIPv6Addr) addrLst;
@endverbatim

How to use this list? Oh well, another example:
@verbatim
1  List(TIPv6Addr) addrLst;
2  SmartPtr<TIPv6Addr> ptr = ...;
3  SmartPtr<TIPv6Addr> tmp;
4  addrLst.clear();
5  addrLst.append(ptr);
6  addrLst.first();
7  tmp = addrLst.get();
8  cout << "List contains " << addrLst.count() << " elements" << endl;
9  addrLst.first();
10 while (tmp = addrLst.get()) 
11   cout << *tmp << endl;
@endverbatim

And here is description what that code does:

 - [1] -- Address list declaration.
 - [2,3] -- SmartPtrs declarations. Just to show variable types.
 - [4] -- List can be cleared. All pointers will be destroyed. If
  they were only pointers to point to some objects, those objects will
  be destroyed, too.
 - [5] -- Append object pointed by ptr to the list.
 - [6] -- Rewind list to the beginning.
 - [7] -- Get next object from the list. If list is empty or last
  element was already got, NULL is returned.
 - [8] -- An easy way to count elements on the list.
 - [9] -- Rewind list to the beginning.
 - [10,11] -- A cute example how to print all addresses on the list.

@section srcLogger 5.3 Logging
To log various informations, Log(LOGLEVEL) macros are defined. There
are eight levels of logging:

 - \b Emergency -- Used to report system wide emergency. Such
  conditions could not occur in the DHCPv6 client o server, so this
  logging level should not be used. Called with:
  @code Log(Emerg) << "..." << LogEnd @endcode

 - \b Alert -- Used to alert an administrator about system wide
  alerts. This logging level should not be used in DHCPv6. 
  Called with @code Log(Alert) << "..." << LogEnd @endcode

 - \b Critical -- Used in situations critical to the application,
  e.g. application shutdown. Fatal errors should be logged on this
  level. Called with @code Log(Crit) << "..." << LogEnd @endcode

 - \b Error -- Used to report error situations. For example, problems
  with binding sockets. Called with @code Log(Error) << "..." << LogEnd @endcode

 - \b Warning -- Used to report RFC violations, e.g. missing required
  options, invalid parameters and so on. Called with @code Log(Warning) 
  << "..." << LogEnd @endcode

 - \b Notice -- Used to report normal operations, e.g. address
 assignement or informations about received options. Called with
 @code Log(Notice) << "..." << LogEnd @endcode

 - \b Info -- Used to report detailed information. DHCPv6 protocol
  knowledge might be needed to understand those messages.
  Called with @code Log(Info) << "..." << LogEnd @endcode

 - \b Debug -- Used to report internal informations. Knowledge about
  Dibbler source code might be needed to understand those messages.
  Called with @code Log(Debug) << "..." << LogEnd @endcode

@section srcNames 5.4 Naming convention
To avoid confussion, various prefixes are used in class and variable
names. Class types begin with T (e.g. address class would be named
TAddr), enumeration types begin with E (e.g. state enumaterion would
be names EState). Dibbler is divided into 4 large functional blocks
called managers (They are described in the following sections
  of this document): address maganger, interface manager, Configuration
manager, and transmsission manager. Each of them uses different
prefix: Addr, Iface, Cfg or Trans. There are also objects shared among
them: messages (Msg prefix) and options (Opt prefix). Often there are
two derived versions: related to client (Clnt prefix) or related to
server (Clnt). Rel prefix is used to denote Relay related classes. 
Here are examples of some class names:

 - \b TAddrMgr -- Address manager, common version.
 - \b TClntAddrMgr -- Address manager, client version.
 - \b TAddrAddr -- Address representation used in address manager.
 - \b TSrvIfaceMgr -- Interface manager, server version.
 - \b TClntIfaceIface -- Interface representation used in client
  interface manager.
 - \b TClntMsg -- Message represented on the client side.
 - \b TClntOptPreference -- Prefernce option used on the client side.
 - \b TIfaceSocket -- Socket used in the interface manager.
 - \b TClntCfgAddr -- Address used in the client config manager.

Also note that class members start with small letters
(e.g. bool TOpt::isValid() ) and class members start with capital
letters (e.g. bool TOpt::IsValid ).



@section srcParsers 5.5 Configuration file parsers
@b Note: Similar approach is used in server, client and
relay. In following section when reference to a specific file is needed,
client files are used. To find corresponding files related to server and
relay, substitute \b Clnt with \b Srv or \b Rel.

Dibbler uses standard lexer/parser. Lexer is generated using flex. Parser is
generated with bison++ (full source code for bison++ is provided with
Dibbler sources). See ClntCfgMgr/ClntParser.y and
ClntCfgMgr/ClntLexer.l for details. Make sure that you have flex installed
(bison++ is provided with the dibbler source code). To generate parser
and lexer code, type:

@verbatim
make bison (just once, to compile bison++)
make parser (each time you modify *.l or *.y files)
@endverbatim

@section srcParsersParsing 5.5.1 Parsing
Configuration file reading is done using Flex and bison++ tools. Flex
is so called lexer. Its responsibility is to read config file and
translate it into stream of tokens. (To be precise, Flex
  generates lexers, so it should be called lexer generator.) For
example, this config file:
@verbatim
iface eth0 {
  class { pool 2000::1-2000::9 }
}
@endverbatim

would be translated to following stream of tokens: [IFACE]
[STRING:eth0] [{] [CLASS] [{] [POOL] [ADDR:2000::1] [-] [ADDR:2000::9]
[}] [}]. This stream of token is then passed to parser. This parser is
generated by bison++. Parser checks if that particular sequence of
tokens makes sense. In this example, interface object will be created,
which contains one class object, which contains one pool.

Is is sometimes very useful to define some parameter, usually
associated with some level, on higher scope level. For example, if
there are 3 classes, instead of defining the same valid-lifetime value
on each of them, that parameter may be defined on the interface
level or even at the top level. This is important to remember during
parsing. Each subsequent element must inherit its parent properties
(class object must inherit parameter values defined on the interface
level).

To accomplish this feat, simple stack was implemented. For example, in
server parser, following methods are called before and after interface
definitions.

@verbatim
void SrvParser::StartIfaceDeclaration()
{
    // create new option (representing this interface) on the parser stack
    ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
    SrvCfgAddrClassLst.clear();
}

bool SrvParser::EndIfaceDeclaration()
{
    // create and add new interface to SrvCfgMgr
    ...
    // remove last option (representing this interface) from the parser stack
    ParserOptStack.delLast();
    return true;
}   
@endverbatim

@section srcParsersUsingValues 5.5.2 Using parsed values

Lexer and parser are created in the Client Configuration Manager. See
ClntCfgMgr/ClntCfgMgr.cpp. Following code is executed in the ClntCfgMgr
constructor. Actual code is much more complicated, but
unnecessary lines were removed for a clarification reasons.

@verbatim
yyFlexLexer lexer(&f,&clog);
ClntParser parser(&lexer);
result = parser.yyparse();
matchParsedSystemInterfaces(&parser);
validateConfig();
@endverbatim

f and clog are normal C++ ifstream and ofstrem objects, associated with
configuration file or a standard output. Configuration file is passed to
the constructor of the entire TDHCPClient object, which is usually
located in the main() function.

Example mentioned above works as follows:

 - Read all interfaces from the system (using System API). This is done in
       Interface Manager and is not important right now.
 - Create lexer object (it will read configuration file and convert it into stream
       of tokens)
 - create parser, which will interpret stream of tokens.
 - Match interfaces present in system with those specified in the configuration
       file.
 - Validate configuration file to check if there are no logical errors, like T1>T2,
       specified both stateless and request for ia, etc.

@section srcParsersEmbeddedConfiguration 5.5.3 Embedded configuration

@b Note: This feature applies to the client only.

Another way of defining client configuration was introduced in the 0.5.0
release. Instead of reading configuration file, configuration can be
hardcoded in the binary file itself. See \b MOD_CLNT_EMBEDDED_CFG flag
description in Section @ref compilationModularFeatures.

*/
