#define YY_SrvParser_h_included
#define YY_USE_CLASS

/*  A Bison++ parser, made from SrvParser.y  */

 /* with Bison++ version bison++ Version 1.21.9-1, adapted from GNU bison by coetmeur@icdc.fr
Maintained by Magnus Ekdahl <magnus@debian.org>
  */

#define YY_USE_CLASS

#line 1 "../bison++/bison.cc"
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Bob Corbett and Richard Stallman

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 1, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  

   As a special exception, when this file is copied by Bison++ into a
   Bison++ output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison, and has been in Bison++ since 1.21.9.  

*/

/* HEADER SECTION */
#if defined( _MSDOS ) || defined(MSDOS) || defined(__MSDOS__) 
 #define __MSDOS_AND_ALIKE
#endif

#if defined(_WINDOWS) && defined(_MSC_VER)
 #define __HAVE_NO_ALLOCA
 #define __MSDOS_AND_ALIKE
#endif

#ifndef alloca
 #if defined( __GNUC__)
  #define alloca __builtin_alloca

 #elif (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc)  || defined (__sgi)
  #include <alloca.h>

 #elif defined (__MSDOS_AND_ALIKE)
  #include <malloc.h>
  #ifndef __TURBOC__
   /* MS C runtime lib */
   #define alloca _alloca
  #endif

 #elif defined(_AIX)
  /* pragma must be put before any C/C++ instruction !! */
  #pragma alloca
  #include <malloc.h>

 #elif defined(__hpux)
  #ifdef __cplusplus
   extern "C" {
     void *alloca (unsigned int);
   };
  #else /* not __cplusplus */
   void *alloca ();
  #endif /* not __cplusplus */

 #endif /* not _AIX  not MSDOS, or __TURBOC__ or _AIX, not sparc.  */
#endif /* alloca not defined.  */

#ifdef c_plusplus
 #ifndef __cplusplus
  #define __cplusplus
 #endif
#endif

#ifdef __cplusplus
 #ifndef YY_USE_CLASS
/*#warning "For C++ its recomended to use bison++, otherwise classes won't be generated"*/
 #endif
#else
 #ifndef __STDC__
  #define const
 #endif
 #ifdef YY_USE_CLASS
  #error "This is a C++ header generated by bison++, please use a C++ compiler!"
 #endif
#endif

#include <stdio.h>
#define YYBISON 1  

 #line 88 "../bison++/bison.cc"
#line 3 "SrvParser.y"

#include <iostream>
#include <string>
#include <malloc.h>
#include "DHCPConst.h"
#include "SmartPtr.h"
#include "Container.h"
#include "SrvParser.h"
#include "SrvParsGlobalOpt.h"
#include "SrvParsClassOpt.h"
#include "SrvParsIfaceOpt.h"
#include "OptAddr.h"
#include "OptAddrLst.h"
#include "OptString.h"
#include "SrvCfgTA.h"
#include "SrvCfgPD.h"
#include "SrvCfgAddrClass.h"
#include "SrvCfgIface.h"
#include "SrvCfgOptions.h"
#include "DUID.h"
#include "Logger.h"
#include "FQDN.h"
#include "SrvOptVendorSpec.h"
#include "SrvOptAddrParams.h"
#include "Portable.h"
#include "SrvCfgClientClass.h"
#include "Node.h"
#include "NodeConstant.h"
#include "NodeClientSpecific.h"
#include "NodeOperator.h"
#include <sstream>

#define YY_USE_CLASS
#line 38 "SrvParser.y"

#include "FlexLexer.h"
#define YY_SrvParser_MEMBERS  FlexLexer * lex;                                                     \
List(TSrvParsGlobalOpt) ParserOptStack;    /* list of parsed interfaces/IAs/addrs */ \
List(TSrvCfgIface) SrvCfgIfaceLst;         /* list of SrvCfg interfaces */           \
List(TSrvCfgAddrClass) SrvCfgAddrClassLst; /* list of SrvCfg address classes */      \
List(TSrvCfgTA) SrvCfgTALst;               /* list of SrvCfg TA objects */           \
List(TSrvCfgPD) SrvCfgPDLst;		   /* list of SrvCfg PD objects */           \
List(TSrvCfgClientClass) SrvCfgClientClassLst; /* list of SrvCfgClientClass objs */  \
List(TIPv6Addr) PresentAddrLst;            /* address list (used for DNS,NTP,etc.)*/ \
List(string) PresentStringLst;             /* string list */                         \
List(Node) NodeClientClassLst;             /* Node list */                           \
List(TFQDN) PresentFQDNLst;                                                          \
SPtr<TIPv6Addr> addr;                                                                \
List(TStationRange) PresentRangeLst;                                                 \
List(TStationRange) PDLst;                                                           \
List(TSrvOptVendorSpec) VendorSpec;			                             \
List(TSrvCfgOptions) ClientLst;                                                      \
int PDPrefix;                                                                        \
bool IfaceDefined(int ifaceNr);                                                      \
bool IfaceDefined(string ifaceName);                                                 \
bool StartIfaceDeclaration(string iface);                                            \
bool StartIfaceDeclaration(int ifindex);                                             \
bool EndIfaceDeclaration();                                                          \
void StartClassDeclaration();                                                        \
bool EndClassDeclaration();                                                          \
SPtr<TIPv6Addr> getRangeMin(char * addrPacked, int prefix);                          \
SPtr<TIPv6Addr> getRangeMax(char * addrPacked, int prefix);                          \
void StartTAClassDeclaration();                                                      \
bool EndTAClassDeclaration();                                                        \
void StartPDDeclaration();                                                           \
bool EndPDDeclaration();                                                             \
virtual ~SrvParser();
#define YY_SrvParser_CONSTRUCTOR_PARAM  yyFlexLexer * lex
#define YY_SrvParser_CONSTRUCTOR_CODE                                                           \
    ParserOptStack.append(new TSrvParsGlobalOpt());                               \
    this->lex = lex;

#line 81 "SrvParser.y"
typedef union    
{
    unsigned int ival;
    char *strval;
    struct SDuid
    {
        int length;
        char* duid;
    } duidval;
    char addrval[16];
} yy_SrvParser_stype;
#define YY_SrvParser_STYPE yy_SrvParser_stype

#line 88 "../bison++/bison.cc"
/* %{ and %header{ and %union, during decl */
#define YY_SrvParser_BISON 1

#ifndef YY_SrvParser_COMPATIBILITY
 #ifndef YY_USE_CLASS
  #define  YY_SrvParser_COMPATIBILITY 1
 #else
  #define  YY_SrvParser_COMPATIBILITY 0
 #endif
#endif

#if YY_SrvParser_COMPATIBILITY != 0
 /* backward compatibility */
 #ifdef YYLTYPE
  #ifndef YY_SrvParser_LTYPE
   #define YY_SrvParser_LTYPE YYLTYPE
  #endif
 #endif
/* Testing alternative bison solution
   /#ifdef YYSTYPE*/
#ifndef YY_SrvParser_STYPE 
   #define YY_SrvParser_STYPE YYSTYPE
#endif
/*#endif*/
 #ifdef YYDEBUG
  #ifndef YY_SrvParser_DEBUG
   #define  YY_SrvParser_DEBUG YYDEBUG
  #endif
 #endif
 
 /* use goto to be compatible */
 #ifndef YY_SrvParser_USE_GOTO
  #define YY_SrvParser_USE_GOTO 1
 #endif
#endif

/* use no goto to be clean in C++ */
#ifndef YY_SrvParser_USE_GOTO
 #define YY_SrvParser_USE_GOTO 0
#endif

#ifndef YY_SrvParser_PURE

 #line 130 "../bison++/bison.cc"

#line 130 "../bison++/bison.cc"
/*  YY_SrvParser_PURE */
#endif

/* section apres lecture def, avant lecture grammaire S2 */

 #line 134 "../bison++/bison.cc"

#line 134 "../bison++/bison.cc"
/* prefix */
#ifndef YY_SrvParser_DEBUG

 #line 136 "../bison++/bison.cc"
#define YY_SrvParser_DEBUG 1

#line 136 "../bison++/bison.cc"
/* YY_SrvParser_DEBUG */
#endif


#ifndef YY_SrvParser_LSP_NEEDED

 #line 141 "../bison++/bison.cc"

#line 141 "../bison++/bison.cc"
 /* YY_SrvParser_LSP_NEEDED*/
#endif



/* DEFAULT LTYPE*/
#ifdef YY_SrvParser_LSP_NEEDED
#ifndef YY_SrvParser_LTYPE
#ifndef BISON_YYLTYPE_ISDECLARED
#define BISON_YYLTYPE_ISDECLARED
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#endif
#define YY_SrvParser_LTYPE yyltype
#endif
#endif
/* DEFAULT STYPE*/
      /* We used to use `unsigned long' as YY_SrvParser_STYPE on MSDOS,
	 but it seems better to be consistent.
	 Most programs should declare their own type anyway.  */

#ifndef YY_SrvParser_STYPE
#define YY_SrvParser_STYPE int
#endif
/* DEFAULT MISCELANEOUS */
#ifndef YY_SrvParser_PARSE
#define YY_SrvParser_PARSE yyparse
#endif
#ifndef YY_SrvParser_LEX
#define YY_SrvParser_LEX yylex
#endif
#ifndef YY_SrvParser_LVAL
#define YY_SrvParser_LVAL yylval
#endif
#ifndef YY_SrvParser_LLOC
#define YY_SrvParser_LLOC yylloc
#endif
#ifndef YY_SrvParser_CHAR
#define YY_SrvParser_CHAR yychar
#endif
#ifndef YY_SrvParser_NERRS
#define YY_SrvParser_NERRS yynerrs
#endif
#ifndef YY_SrvParser_DEBUG_FLAG
#define YY_SrvParser_DEBUG_FLAG yydebug
#endif
#ifndef YY_SrvParser_ERROR
#define YY_SrvParser_ERROR yyerror
#endif

#ifndef YY_SrvParser_PARSE_PARAM
 #ifndef YY_USE_CLASS
  #ifdef YYPARSE_PARAM
   #define YY_SrvParser_PARSE_PARAM void* YYPARSE_PARAM 
  #else
   #ifndef __STDC__
    #ifndef __cplusplus
     #define YY_SrvParser_PARSE_PARAM
    #endif
   #endif
  #endif
 #endif
 #ifndef YY_SrvParser_PARSE_PARAM
  #define YY_SrvParser_PARSE_PARAM void
 #endif
#endif

#if YY_SrvParser_COMPATIBILITY != 0
/* backward compatibility */
#ifdef YY_SrvParser_LTYPE
#ifndef YYLTYPE
#define YYLTYPE YY_SrvParser_LTYPE
#else
/* WARNING obsolete !!! user defined YYLTYPE not reported into generated header */
#endif
#endif

/* Removed due to bison compabilityproblems
/#ifndef YYSTYPE
/#define YYSTYPE YY_SrvParser_STYPE
/#else*/
/* WARNING obsolete !!! user defined YYSTYPE not reported into generated header */
/*#endif*/

#ifdef YY_SrvParser_PURE
#  ifndef YYPURE
#    define YYPURE YY_SrvParser_PURE
#  endif
#endif

#ifdef YY_SrvParser_DEBUG
#  ifndef YYDEBUG
#    define YYDEBUG YY_SrvParser_DEBUG 
#  endif
#endif

#ifndef YY_SrvParser_ERROR_VERBOSE
 #ifdef YYERROR_VERBOSE
  #define YY_SrvParser_ERROR_VERBOSE YYERROR_VERBOSE
 #endif
#endif

#ifndef YY_SrvParser_LSP_NEEDED
#  ifdef YYLSP_NEEDED
#    define YY_SrvParser_LSP_NEEDED YYLSP_NEEDED
#  endif
#endif

#endif

#ifndef YY_USE_CLASS
/* TOKEN C */

 #line 263 "../bison++/bison.cc"
#define	IFACE_	258
#define	RELAY_	259
#define	IFACE_ID_	260
#define	IFACE_ID_ORDER_	261
#define	CLASS_	262
#define	TACLASS_	263
#define	LOGNAME_	264
#define	LOGLEVEL_	265
#define	LOGMODE_	266
#define	WORKDIR_	267
#define	OPTION_	268
#define	DNS_SERVER_	269
#define	DOMAIN_	270
#define	NTP_SERVER_	271
#define	TIME_ZONE_	272
#define	SIP_SERVER_	273
#define	SIP_DOMAIN_	274
#define	NIS_SERVER_	275
#define	NIS_DOMAIN_	276
#define	NISP_SERVER_	277
#define	NISP_DOMAIN_	278
#define	FQDN_	279
#define	ACCEPT_UNKNOWN_FQDN_	280
#define	LIFETIME_	281
#define	ACCEPT_ONLY_	282
#define	REJECT_CLIENTS_	283
#define	POOL_	284
#define	SHARE_	285
#define	T1_	286
#define	T2_	287
#define	PREF_TIME_	288
#define	VALID_TIME_	289
#define	UNICAST_	290
#define	PREFERENCE_	291
#define	RAPID_COMMIT_	292
#define	IFACE_MAX_LEASE_	293
#define	CLASS_MAX_LEASE_	294
#define	CLNT_MAX_LEASE_	295
#define	STATELESS_	296
#define	CACHE_SIZE_	297
#define	PDCLASS_	298
#define	PD_LENGTH_	299
#define	PD_POOL_	300
#define	VENDOR_SPEC_	301
#define	CLIENT_	302
#define	DUID_KEYWORD_	303
#define	REMOTE_ID_	304
#define	ADDRESS_	305
#define	GUESS_MODE_	306
#define	INACTIVE_MODE_	307
#define	EXPERIMENTAL_	308
#define	ADDR_PARAMS_	309
#define	DS_LITE_TUNNEL_	310
#define	REMOTE_AUTOCONF_NEIGHBORS_	311
#define	AUTH_METHOD_	312
#define	AUTH_LIFETIME_	313
#define	AUTH_KEY_LEN_	314
#define	DIGEST_NONE_	315
#define	DIGEST_PLAIN_	316
#define	DIGEST_HMAC_MD5_	317
#define	DIGEST_HMAC_SHA1_	318
#define	DIGEST_HMAC_SHA224_	319
#define	DIGEST_HMAC_SHA256_	320
#define	DIGEST_HMAC_SHA384_	321
#define	DIGEST_HMAC_SHA512_	322
#define	ACCEPT_LEASEQUERY_	323
#define	CLIENT_CLASS_	324
#define	MATCH_IF_	325
#define	EQ_	326
#define	AND_	327
#define	OR_	328
#define	CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_	329
#define	CLIENT_VENDOR_SPEC_DATA_	330
#define	CLIENT_VENDOR_CLASS_EN_	331
#define	CLIENT_VENDOR_CLASS_DATA_	332
#define	ALLOW_	333
#define	DENY_	334
#define	SUBSTRING_	335
#define	STRING_KEYWORD_	336
#define	ADDRESS_LIST_	337
#define	CONTAIN_	338
#define	STRING_	339
#define	HEXNUMBER_	340
#define	INTNUMBER_	341
#define	IPV6ADDR_	342
#define	DUID_	343


#line 263 "../bison++/bison.cc"
 /* #defines tokens */
#else
/* CLASS */
#ifndef YY_SrvParser_CLASS
#define YY_SrvParser_CLASS SrvParser
#endif
#ifndef YY_SrvParser_INHERIT
#define YY_SrvParser_INHERIT
#endif
#ifndef YY_SrvParser_MEMBERS
#define YY_SrvParser_MEMBERS 
#endif
#ifndef YY_SrvParser_LEX_BODY
#define YY_SrvParser_LEX_BODY  
#endif
#ifndef YY_SrvParser_ERROR_BODY
#define YY_SrvParser_ERROR_BODY  
#endif
#ifndef YY_SrvParser_CONSTRUCTOR_PARAM
#define YY_SrvParser_CONSTRUCTOR_PARAM
#endif
#ifndef YY_SrvParser_CONSTRUCTOR_CODE
#define YY_SrvParser_CONSTRUCTOR_CODE
#endif
#ifndef YY_SrvParser_CONSTRUCTOR_INIT
#define YY_SrvParser_CONSTRUCTOR_INIT
#endif
/* choose between enum and const */
#ifndef YY_SrvParser_USE_CONST_TOKEN
#define YY_SrvParser_USE_CONST_TOKEN 0
/* yes enum is more compatible with flex,  */
/* so by default we use it */ 
#endif
#if YY_SrvParser_USE_CONST_TOKEN != 0
#ifndef YY_SrvParser_ENUM_TOKEN
#define YY_SrvParser_ENUM_TOKEN yy_SrvParser_enum_token
#endif
#endif

class YY_SrvParser_CLASS YY_SrvParser_INHERIT
{
public: 
#if YY_SrvParser_USE_CONST_TOKEN != 0
/* static const int token ... */

 #line 307 "../bison++/bison.cc"
static const int IFACE_;
static const int RELAY_;
static const int IFACE_ID_;
static const int IFACE_ID_ORDER_;
static const int CLASS_;
static const int TACLASS_;
static const int LOGNAME_;
static const int LOGLEVEL_;
static const int LOGMODE_;
static const int WORKDIR_;
static const int OPTION_;
static const int DNS_SERVER_;
static const int DOMAIN_;
static const int NTP_SERVER_;
static const int TIME_ZONE_;
static const int SIP_SERVER_;
static const int SIP_DOMAIN_;
static const int NIS_SERVER_;
static const int NIS_DOMAIN_;
static const int NISP_SERVER_;
static const int NISP_DOMAIN_;
static const int FQDN_;
static const int ACCEPT_UNKNOWN_FQDN_;
static const int LIFETIME_;
static const int ACCEPT_ONLY_;
static const int REJECT_CLIENTS_;
static const int POOL_;
static const int SHARE_;
static const int T1_;
static const int T2_;
static const int PREF_TIME_;
static const int VALID_TIME_;
static const int UNICAST_;
static const int PREFERENCE_;
static const int RAPID_COMMIT_;
static const int IFACE_MAX_LEASE_;
static const int CLASS_MAX_LEASE_;
static const int CLNT_MAX_LEASE_;
static const int STATELESS_;
static const int CACHE_SIZE_;
static const int PDCLASS_;
static const int PD_LENGTH_;
static const int PD_POOL_;
static const int VENDOR_SPEC_;
static const int CLIENT_;
static const int DUID_KEYWORD_;
static const int REMOTE_ID_;
static const int ADDRESS_;
static const int GUESS_MODE_;
static const int INACTIVE_MODE_;
static const int EXPERIMENTAL_;
static const int ADDR_PARAMS_;
static const int DS_LITE_TUNNEL_;
static const int REMOTE_AUTOCONF_NEIGHBORS_;
static const int AUTH_METHOD_;
static const int AUTH_LIFETIME_;
static const int AUTH_KEY_LEN_;
static const int DIGEST_NONE_;
static const int DIGEST_PLAIN_;
static const int DIGEST_HMAC_MD5_;
static const int DIGEST_HMAC_SHA1_;
static const int DIGEST_HMAC_SHA224_;
static const int DIGEST_HMAC_SHA256_;
static const int DIGEST_HMAC_SHA384_;
static const int DIGEST_HMAC_SHA512_;
static const int ACCEPT_LEASEQUERY_;
static const int CLIENT_CLASS_;
static const int MATCH_IF_;
static const int EQ_;
static const int AND_;
static const int OR_;
static const int CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_;
static const int CLIENT_VENDOR_SPEC_DATA_;
static const int CLIENT_VENDOR_CLASS_EN_;
static const int CLIENT_VENDOR_CLASS_DATA_;
static const int ALLOW_;
static const int DENY_;
static const int SUBSTRING_;
static const int STRING_KEYWORD_;
static const int ADDRESS_LIST_;
static const int CONTAIN_;
static const int STRING_;
static const int HEXNUMBER_;
static const int INTNUMBER_;
static const int IPV6ADDR_;
static const int DUID_;


#line 307 "../bison++/bison.cc"
 /* decl const */
#else
enum YY_SrvParser_ENUM_TOKEN { YY_SrvParser_NULL_TOKEN=0

 #line 310 "../bison++/bison.cc"
	,IFACE_=258
	,RELAY_=259
	,IFACE_ID_=260
	,IFACE_ID_ORDER_=261
	,CLASS_=262
	,TACLASS_=263
	,LOGNAME_=264
	,LOGLEVEL_=265
	,LOGMODE_=266
	,WORKDIR_=267
	,OPTION_=268
	,DNS_SERVER_=269
	,DOMAIN_=270
	,NTP_SERVER_=271
	,TIME_ZONE_=272
	,SIP_SERVER_=273
	,SIP_DOMAIN_=274
	,NIS_SERVER_=275
	,NIS_DOMAIN_=276
	,NISP_SERVER_=277
	,NISP_DOMAIN_=278
	,FQDN_=279
	,ACCEPT_UNKNOWN_FQDN_=280
	,LIFETIME_=281
	,ACCEPT_ONLY_=282
	,REJECT_CLIENTS_=283
	,POOL_=284
	,SHARE_=285
	,T1_=286
	,T2_=287
	,PREF_TIME_=288
	,VALID_TIME_=289
	,UNICAST_=290
	,PREFERENCE_=291
	,RAPID_COMMIT_=292
	,IFACE_MAX_LEASE_=293
	,CLASS_MAX_LEASE_=294
	,CLNT_MAX_LEASE_=295
	,STATELESS_=296
	,CACHE_SIZE_=297
	,PDCLASS_=298
	,PD_LENGTH_=299
	,PD_POOL_=300
	,VENDOR_SPEC_=301
	,CLIENT_=302
	,DUID_KEYWORD_=303
	,REMOTE_ID_=304
	,ADDRESS_=305
	,GUESS_MODE_=306
	,INACTIVE_MODE_=307
	,EXPERIMENTAL_=308
	,ADDR_PARAMS_=309
	,DS_LITE_TUNNEL_=310
	,REMOTE_AUTOCONF_NEIGHBORS_=311
	,AUTH_METHOD_=312
	,AUTH_LIFETIME_=313
	,AUTH_KEY_LEN_=314
	,DIGEST_NONE_=315
	,DIGEST_PLAIN_=316
	,DIGEST_HMAC_MD5_=317
	,DIGEST_HMAC_SHA1_=318
	,DIGEST_HMAC_SHA224_=319
	,DIGEST_HMAC_SHA256_=320
	,DIGEST_HMAC_SHA384_=321
	,DIGEST_HMAC_SHA512_=322
	,ACCEPT_LEASEQUERY_=323
	,CLIENT_CLASS_=324
	,MATCH_IF_=325
	,EQ_=326
	,AND_=327
	,OR_=328
	,CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_=329
	,CLIENT_VENDOR_SPEC_DATA_=330
	,CLIENT_VENDOR_CLASS_EN_=331
	,CLIENT_VENDOR_CLASS_DATA_=332
	,ALLOW_=333
	,DENY_=334
	,SUBSTRING_=335
	,STRING_KEYWORD_=336
	,ADDRESS_LIST_=337
	,CONTAIN_=338
	,STRING_=339
	,HEXNUMBER_=340
	,INTNUMBER_=341
	,IPV6ADDR_=342
	,DUID_=343


#line 310 "../bison++/bison.cc"
 /* enum token */
     }; /* end of enum declaration */
#endif
public:
 int YY_SrvParser_PARSE (YY_SrvParser_PARSE_PARAM);
 virtual void YY_SrvParser_ERROR(char *msg) YY_SrvParser_ERROR_BODY;
#ifdef YY_SrvParser_PURE
#ifdef YY_SrvParser_LSP_NEEDED
 virtual int  YY_SrvParser_LEX (YY_SrvParser_STYPE *YY_SrvParser_LVAL,YY_SrvParser_LTYPE *YY_SrvParser_LLOC) YY_SrvParser_LEX_BODY;
#else
 virtual int  YY_SrvParser_LEX (YY_SrvParser_STYPE *YY_SrvParser_LVAL) YY_SrvParser_LEX_BODY;
#endif
#else
 virtual int YY_SrvParser_LEX() YY_SrvParser_LEX_BODY;
 YY_SrvParser_STYPE YY_SrvParser_LVAL;
#ifdef YY_SrvParser_LSP_NEEDED
 YY_SrvParser_LTYPE YY_SrvParser_LLOC;
#endif
 int   YY_SrvParser_NERRS;
 int    YY_SrvParser_CHAR;
#endif
#if YY_SrvParser_DEBUG != 0
 int YY_SrvParser_DEBUG_FLAG;   /*  nonzero means print parse trace     */
#endif
public:
 YY_SrvParser_CLASS(YY_SrvParser_CONSTRUCTOR_PARAM);
public:
 YY_SrvParser_MEMBERS 
};
/* other declare folow */
#if YY_SrvParser_USE_CONST_TOKEN != 0

 #line 341 "../bison++/bison.cc"
const int YY_SrvParser_CLASS::IFACE_=258;
const int YY_SrvParser_CLASS::RELAY_=259;
const int YY_SrvParser_CLASS::IFACE_ID_=260;
const int YY_SrvParser_CLASS::IFACE_ID_ORDER_=261;
const int YY_SrvParser_CLASS::CLASS_=262;
const int YY_SrvParser_CLASS::TACLASS_=263;
const int YY_SrvParser_CLASS::LOGNAME_=264;
const int YY_SrvParser_CLASS::LOGLEVEL_=265;
const int YY_SrvParser_CLASS::LOGMODE_=266;
const int YY_SrvParser_CLASS::WORKDIR_=267;
const int YY_SrvParser_CLASS::OPTION_=268;
const int YY_SrvParser_CLASS::DNS_SERVER_=269;
const int YY_SrvParser_CLASS::DOMAIN_=270;
const int YY_SrvParser_CLASS::NTP_SERVER_=271;
const int YY_SrvParser_CLASS::TIME_ZONE_=272;
const int YY_SrvParser_CLASS::SIP_SERVER_=273;
const int YY_SrvParser_CLASS::SIP_DOMAIN_=274;
const int YY_SrvParser_CLASS::NIS_SERVER_=275;
const int YY_SrvParser_CLASS::NIS_DOMAIN_=276;
const int YY_SrvParser_CLASS::NISP_SERVER_=277;
const int YY_SrvParser_CLASS::NISP_DOMAIN_=278;
const int YY_SrvParser_CLASS::FQDN_=279;
const int YY_SrvParser_CLASS::ACCEPT_UNKNOWN_FQDN_=280;
const int YY_SrvParser_CLASS::LIFETIME_=281;
const int YY_SrvParser_CLASS::ACCEPT_ONLY_=282;
const int YY_SrvParser_CLASS::REJECT_CLIENTS_=283;
const int YY_SrvParser_CLASS::POOL_=284;
const int YY_SrvParser_CLASS::SHARE_=285;
const int YY_SrvParser_CLASS::T1_=286;
const int YY_SrvParser_CLASS::T2_=287;
const int YY_SrvParser_CLASS::PREF_TIME_=288;
const int YY_SrvParser_CLASS::VALID_TIME_=289;
const int YY_SrvParser_CLASS::UNICAST_=290;
const int YY_SrvParser_CLASS::PREFERENCE_=291;
const int YY_SrvParser_CLASS::RAPID_COMMIT_=292;
const int YY_SrvParser_CLASS::IFACE_MAX_LEASE_=293;
const int YY_SrvParser_CLASS::CLASS_MAX_LEASE_=294;
const int YY_SrvParser_CLASS::CLNT_MAX_LEASE_=295;
const int YY_SrvParser_CLASS::STATELESS_=296;
const int YY_SrvParser_CLASS::CACHE_SIZE_=297;
const int YY_SrvParser_CLASS::PDCLASS_=298;
const int YY_SrvParser_CLASS::PD_LENGTH_=299;
const int YY_SrvParser_CLASS::PD_POOL_=300;
const int YY_SrvParser_CLASS::VENDOR_SPEC_=301;
const int YY_SrvParser_CLASS::CLIENT_=302;
const int YY_SrvParser_CLASS::DUID_KEYWORD_=303;
const int YY_SrvParser_CLASS::REMOTE_ID_=304;
const int YY_SrvParser_CLASS::ADDRESS_=305;
const int YY_SrvParser_CLASS::GUESS_MODE_=306;
const int YY_SrvParser_CLASS::INACTIVE_MODE_=307;
const int YY_SrvParser_CLASS::EXPERIMENTAL_=308;
const int YY_SrvParser_CLASS::ADDR_PARAMS_=309;
const int YY_SrvParser_CLASS::DS_LITE_TUNNEL_=310;
const int YY_SrvParser_CLASS::REMOTE_AUTOCONF_NEIGHBORS_=311;
const int YY_SrvParser_CLASS::AUTH_METHOD_=312;
const int YY_SrvParser_CLASS::AUTH_LIFETIME_=313;
const int YY_SrvParser_CLASS::AUTH_KEY_LEN_=314;
const int YY_SrvParser_CLASS::DIGEST_NONE_=315;
const int YY_SrvParser_CLASS::DIGEST_PLAIN_=316;
const int YY_SrvParser_CLASS::DIGEST_HMAC_MD5_=317;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA1_=318;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA224_=319;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA256_=320;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA384_=321;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA512_=322;
const int YY_SrvParser_CLASS::ACCEPT_LEASEQUERY_=323;
const int YY_SrvParser_CLASS::CLIENT_CLASS_=324;
const int YY_SrvParser_CLASS::MATCH_IF_=325;
const int YY_SrvParser_CLASS::EQ_=326;
const int YY_SrvParser_CLASS::AND_=327;
const int YY_SrvParser_CLASS::OR_=328;
const int YY_SrvParser_CLASS::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_=329;
const int YY_SrvParser_CLASS::CLIENT_VENDOR_SPEC_DATA_=330;
const int YY_SrvParser_CLASS::CLIENT_VENDOR_CLASS_EN_=331;
const int YY_SrvParser_CLASS::CLIENT_VENDOR_CLASS_DATA_=332;
const int YY_SrvParser_CLASS::ALLOW_=333;
const int YY_SrvParser_CLASS::DENY_=334;
const int YY_SrvParser_CLASS::SUBSTRING_=335;
const int YY_SrvParser_CLASS::STRING_KEYWORD_=336;
const int YY_SrvParser_CLASS::ADDRESS_LIST_=337;
const int YY_SrvParser_CLASS::CONTAIN_=338;
const int YY_SrvParser_CLASS::STRING_=339;
const int YY_SrvParser_CLASS::HEXNUMBER_=340;
const int YY_SrvParser_CLASS::INTNUMBER_=341;
const int YY_SrvParser_CLASS::IPV6ADDR_=342;
const int YY_SrvParser_CLASS::DUID_=343;


#line 341 "../bison++/bison.cc"
 /* const YY_SrvParser_CLASS::token */
#endif
/*apres const  */
YY_SrvParser_CLASS::YY_SrvParser_CLASS(YY_SrvParser_CONSTRUCTOR_PARAM) YY_SrvParser_CONSTRUCTOR_INIT
{
#if YY_SrvParser_DEBUG != 0
YY_SrvParser_DEBUG_FLAG=0;
#endif
YY_SrvParser_CONSTRUCTOR_CODE;
}
#endif

 #line 352 "../bison++/bison.cc"


#define	YYFINAL		385
#define	YYFLAG		-32768
#define	YYNTBASE	96

#define YYTRANSLATE(x) ((unsigned)(x) <= 343 ? yytranslate[x] : 205)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,    94,
    95,     2,     2,    92,    91,     2,    93,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    89,     2,    90,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88
};

#if YY_SrvParser_DEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     5,     7,    10,    13,    15,    17,    19,
    21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
    41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
    61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
    81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
   101,   102,   109,   110,   117,   119,   122,   124,   126,   129,
   132,   133,   141,   142,   152,   154,   157,   159,   161,   163,
   165,   167,   169,   171,   173,   175,   177,   179,   181,   183,
   185,   187,   189,   192,   193,   199,   201,   204,   205,   211,
   213,   216,   218,   220,   222,   224,   226,   228,   230,   232,
   233,   239,   241,   244,   246,   248,   250,   252,   254,   256,
   258,   260,   263,   266,   269,   272,   275,   278,   281,   284,
   287,   290,   292,   296,   300,   304,   310,   316,   318,   320,
   322,   326,   330,   336,   338,   342,   344,   348,   352,   356,
   362,   366,   368,   372,   376,   382,   384,   388,   392,   398,
   399,   403,   404,   408,   409,   413,   414,   418,   421,   424,
   429,   432,   437,   440,   443,   448,   451,   456,   459,   462,
   465,   469,   473,   478,   483,   484,   490,   495,   496,   501,
   504,   507,   510,   513,   516,   519,   522,   525,   527,   529,
   531,   533,   536,   539,   541,   544,   547,   550,   553,   556,
   559,   561,   563,   565,   567,   569,   571,   573,   575,   577,
   579,   581,   583,   586,   589,   590,   595,   596,   601,   602,
   607,   611,   612,   617,   618,   623,   624,   629,   630,   636,
   637,   644,   646,   647,   652,   653,   658,   662,   666,   670,
   671,   676,   677,   684,   687,   688,   694,   700,   706,   712,
   714,   716,   718,   720
};

static const short yyrhs[] = {    97,
     0,     0,    98,     0,   100,     0,    97,    98,     0,    97,
   100,     0,    99,     0,   160,     0,   159,     0,   161,     0,
   162,     0,   163,     0,   168,     0,   121,     0,   122,     0,
   123,     0,   166,     0,   167,     0,   164,     0,   200,     0,
   172,     0,   170,     0,   171,     0,   169,     0,   156,     0,
   158,     0,   157,     0,   155,     0,   146,     0,   175,     0,
   177,     0,   179,     0,   181,     0,   182,     0,   184,     0,
   186,     0,   190,     0,   191,     0,   195,     0,   193,     0,
   196,     0,   149,     0,   150,     0,   197,     0,   151,     0,
   153,     0,   117,     0,   198,     0,   104,     0,   165,     0,
     0,     3,    84,    89,   101,   103,    90,     0,     0,     3,
   125,    89,   102,   103,    90,     0,    99,     0,   103,    99,
     0,   110,     0,   113,     0,   103,   113,     0,   103,   110,
     0,     0,    47,    48,    88,    89,   105,   107,    90,     0,
     0,    47,    49,   125,    91,    88,    89,   106,   107,    90,
     0,   108,     0,   107,   108,     0,   175,     0,   177,     0,
   179,     0,   181,     0,   182,     0,   184,     0,   191,     0,
   195,     0,   193,     0,   196,     0,   197,     0,   198,     0,
   151,     0,   149,     0,   150,     0,   109,     0,    50,    87,
     0,     0,     7,    89,   111,   112,    90,     0,   172,     0,
   112,   172,     0,     0,     8,    89,   114,   115,    90,     0,
   116,     0,   115,   116,     0,   141,     0,   142,     0,   136,
     0,   147,     0,   132,     0,   134,     0,   173,     0,   174,
     0,     0,    43,    89,   118,   119,    90,     0,   120,     0,
   120,   119,     0,   140,     0,   138,     0,   142,     0,   141,
     0,   144,     0,   145,     0,   173,     0,   174,     0,    57,
    60,     0,    57,    61,     0,    57,    62,     0,    57,    63,
     0,    57,    64,     0,    57,    65,     0,    57,    66,     0,
    57,    67,     0,    58,   125,     0,    59,   125,     0,    84,
     0,    84,    91,    88,     0,    84,    91,    87,     0,   124,
    92,    84,     0,   124,    92,    84,    91,    88,     0,   124,
    92,    84,    91,    87,     0,    85,     0,    86,     0,    87,
     0,   126,    92,    87,     0,   125,    91,    88,     0,   127,
    92,   125,    91,    88,     0,    84,     0,   128,    92,    84,
     0,    87,     0,    87,    91,    87,     0,    87,    93,    86,
     0,   129,    92,    87,     0,   129,    92,    87,    91,    87,
     0,    87,    93,    86,     0,    87,     0,    87,    91,    87,
     0,   131,    92,    87,     0,   131,    92,    87,    91,    87,
     0,    88,     0,    88,    91,    88,     0,   131,    92,    88,
     0,   131,    92,    88,    91,    88,     0,     0,    28,   133,
   131,     0,     0,    27,   135,   131,     0,     0,    29,   137,
   129,     0,     0,    45,   139,   130,     0,    44,   125,     0,
    33,   125,     0,    33,   125,    91,   125,     0,    34,   125,
     0,    34,   125,    91,   125,     0,    30,   125,     0,    31,
   125,     0,    31,   125,    91,   125,     0,    32,   125,     0,
    32,   125,    91,   125,     0,    40,   125,     0,    39,   125,
     0,    54,   125,     0,    13,    55,    87,     0,    13,    55,
    84,     0,    13,   125,    91,    88,     0,    13,   125,    50,
    87,     0,     0,    13,   125,    82,   152,   126,     0,    13,
   125,    81,    84,     0,     0,    13,    56,   154,   126,     0,
    38,   125,     0,    35,    87,     0,    37,   125,     0,    36,
   125,     0,    10,   125,     0,    11,    84,     0,     9,    84,
     0,    12,    84,     0,    41,     0,    51,     0,    52,     0,
    53,     0,     6,    84,     0,    42,   125,     0,    68,     0,
    68,   125,     0,     4,    84,     0,     4,   125,     0,     5,
   125,     0,     5,    88,     0,     5,    84,     0,   141,     0,
   142,     0,   136,     0,   143,     0,   144,     0,   145,     0,
   132,     0,   134,     0,   147,     0,   148,     0,   173,     0,
   174,     0,    78,    84,     0,    79,    84,     0,     0,    13,
    14,   176,   126,     0,     0,    13,    15,   178,   128,     0,
     0,    13,    16,   180,   126,     0,    13,    17,    84,     0,
     0,    13,    18,   183,   126,     0,     0,    13,    19,   185,
   128,     0,     0,    13,    24,   187,   124,     0,     0,    13,
    24,    86,   188,   124,     0,     0,    13,    24,    86,    86,
   189,   124,     0,    25,     0,     0,    13,    20,   192,   126,
     0,     0,    13,    22,   194,   126,     0,    13,    21,    84,
     0,    13,    23,    84,     0,    13,    26,   125,     0,     0,
    13,    46,   199,   127,     0,     0,    69,    84,    89,   201,
   202,    90,     0,    70,   203,     0,     0,    94,   204,    83,
   204,    95,     0,    94,   204,    71,   204,    95,     0,    94,
   203,    72,   203,    95,     0,    94,   203,    73,   203,    95,
     0,    74,     0,    75,     0,    84,     0,   125,     0,    80,
    94,   204,    92,   125,    92,   125,    95,     0
};

#endif

#if (YY_SrvParser_DEBUG != 0) || defined(YY_SrvParser_ERROR_VERBOSE) 
static const short yyrline[] = { 0,
   140,   141,   145,   146,   147,   148,   152,   153,   154,   155,
   156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
   171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
   181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
   191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
   205,   210,   218,   223,   229,   230,   231,   232,   233,   234,
   238,   244,   252,   258,   267,   268,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   290,   299,   304,   312,   313,   318,   321,   329,
   330,   333,   334,   335,   336,   337,   338,   339,   340,   344,
   347,   355,   356,   359,   360,   361,   362,   363,   364,   365,
   366,   374,   375,   376,   377,   378,   379,   380,   381,   385,
   389,   397,   402,   409,   416,   421,   428,   438,   439,   443,
   447,   454,   459,   467,   468,   472,   476,   485,   501,   505,
   517,   540,   544,   553,   557,   566,   571,   581,   586,   600,
   604,   610,   614,   620,   624,   630,   633,   638,   645,   650,
   658,   663,   671,   683,   688,   696,   701,   709,   716,   723,
   736,   745,   753,   759,   767,   771,   776,   784,   795,   804,
   811,   818,   833,   845,   851,   856,   863,   870,   877,   884,
   890,   897,   918,   925,   930,   949,   953,   960,   965,   970,
   978,   979,   980,   981,   982,   983,   984,   985,   986,   987,
   988,   989,   993,  1022,  1055,  1059,  1068,  1071,  1080,  1084,
  1093,  1103,  1106,  1115,  1118,  1128,  1136,  1139,  1147,  1151,
  1159,  1166,  1176,  1179,  1188,  1191,  1200,  1210,  1220,  1227,
  1230,  1237,  1240,  1250,  1256,  1256,  1264,  1273,  1282,  1293,
  1297,  1301,  1306,  1315
};

static const char * const yytname[] = {   "$","error","$illegal.","IFACE_","RELAY_",
"IFACE_ID_","IFACE_ID_ORDER_","CLASS_","TACLASS_","LOGNAME_","LOGLEVEL_","LOGMODE_",
"WORKDIR_","OPTION_","DNS_SERVER_","DOMAIN_","NTP_SERVER_","TIME_ZONE_","SIP_SERVER_",
"SIP_DOMAIN_","NIS_SERVER_","NIS_DOMAIN_","NISP_SERVER_","NISP_DOMAIN_","FQDN_",
"ACCEPT_UNKNOWN_FQDN_","LIFETIME_","ACCEPT_ONLY_","REJECT_CLIENTS_","POOL_",
"SHARE_","T1_","T2_","PREF_TIME_","VALID_TIME_","UNICAST_","PREFERENCE_","RAPID_COMMIT_",
"IFACE_MAX_LEASE_","CLASS_MAX_LEASE_","CLNT_MAX_LEASE_","STATELESS_","CACHE_SIZE_",
"PDCLASS_","PD_LENGTH_","PD_POOL_","VENDOR_SPEC_","CLIENT_","DUID_KEYWORD_",
"REMOTE_ID_","ADDRESS_","GUESS_MODE_","INACTIVE_MODE_","EXPERIMENTAL_","ADDR_PARAMS_",
"DS_LITE_TUNNEL_","REMOTE_AUTOCONF_NEIGHBORS_","AUTH_METHOD_","AUTH_LIFETIME_",
"AUTH_KEY_LEN_","DIGEST_NONE_","DIGEST_PLAIN_","DIGEST_HMAC_MD5_","DIGEST_HMAC_SHA1_",
"DIGEST_HMAC_SHA224_","DIGEST_HMAC_SHA256_","DIGEST_HMAC_SHA384_","DIGEST_HMAC_SHA512_",
"ACCEPT_LEASEQUERY_","CLIENT_CLASS_","MATCH_IF_","EQ_","AND_","OR_","CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_",
"CLIENT_VENDOR_SPEC_DATA_","CLIENT_VENDOR_CLASS_EN_","CLIENT_VENDOR_CLASS_DATA_",
"ALLOW_","DENY_","SUBSTRING_","STRING_KEYWORD_","ADDRESS_LIST_","CONTAIN_","STRING_",
"HEXNUMBER_","INTNUMBER_","IPV6ADDR_","DUID_","'{'","'}'","'-'","','","'/'",
"'('","')'","Grammar","GlobalDeclarationList","GlobalOption","InterfaceOptionDeclaration",
"InterfaceDeclaration","@1","@2","InterfaceDeclarationsList","Client","@3","@4",
"ClientOptions","ClientOption","AddressReservation","ClassDeclaration","@5",
"ClassOptionDeclarationsList","TAClassDeclaration","@6","TAClassOptionsList",
"TAClassOption","PDDeclaration","@7","PDOptionsList","PDOptions","AuthMethod",
"AuthLifetime","AuthKeyGenNonceLen","FQDNList","Number","ADDRESSList","VendorSpecList",
"StringList","ADDRESSRangeList","PDRangeList","ADDRESSDUIDRangeList","RejectClientsOption",
"@8","AcceptOnlyOption","@9","PoolOption","@10","PDPoolOption","@11","PDLength",
"PreferredTimeOption","ValidTimeOption","ShareOption","T1Option","T2Option",
"ClntMaxLeaseOption","ClassMaxLeaseOption","AddrParams","DsLiteTunnelAddr","DsLiteTunnelName",
"ExtraOption","@12","RemoteAutoconfNeighborsOption","@13","IfaceMaxLeaseOption",
"UnicastAddressOption","RapidCommitOption","PreferenceOption","LogLevelOption",
"LogModeOption","LogNameOption","WorkDirOption","StatelessOption","GuessMode",
"InactiveMode","Experimental","IfaceIDOrder","CacheSizeOption","AcceptLeaseQuery",
"RelayOption","InterfaceIDOption","ClassOptionDeclaration","AllowClientClassDeclaration",
"DenyClientClassDeclaration","DNSServerOption","@14","DomainOption","@15","NTPServerOption",
"@16","TimeZoneOption","SIPServerOption","@17","SIPDomainOption","@18","FQDNOption",
"@19","@20","@21","AcceptUnknownFQDN","NISServerOption","@22","NISPServerOption",
"@23","NISDomainOption","NISPDomainOption","LifetimeOption","VendorSpecOption",
"@24","ClientClass","@25","ClientClassDecleration","Condition","Expr",""
};
#endif

static const short yyr1[] = {     0,
    96,    96,    97,    97,    97,    97,    98,    98,    98,    98,
    98,    98,    98,    98,    98,    98,    98,    98,    98,    98,
    99,    99,    99,    99,    99,    99,    99,    99,    99,    99,
    99,    99,    99,    99,    99,    99,    99,    99,    99,    99,
    99,    99,    99,    99,    99,    99,    99,    99,    99,    99,
   101,   100,   102,   100,   103,   103,   103,   103,   103,   103,
   105,   104,   106,   104,   107,   107,   108,   108,   108,   108,
   108,   108,   108,   108,   108,   108,   108,   108,   108,   108,
   108,   108,   109,   111,   110,   112,   112,   114,   113,   115,
   115,   116,   116,   116,   116,   116,   116,   116,   116,   118,
   117,   119,   119,   120,   120,   120,   120,   120,   120,   120,
   120,   121,   121,   121,   121,   121,   121,   121,   121,   122,
   123,   124,   124,   124,   124,   124,   124,   125,   125,   126,
   126,   127,   127,   128,   128,   129,   129,   129,   129,   129,
   130,   131,   131,   131,   131,   131,   131,   131,   131,   133,
   132,   135,   134,   137,   136,   139,   138,   140,   141,   141,
   142,   142,   143,   144,   144,   145,   145,   146,   147,   148,
   149,   150,   151,   151,   152,   151,   151,   154,   153,   155,
   156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
   166,   167,   168,   169,   169,   170,   170,   171,   171,   171,
   172,   172,   172,   172,   172,   172,   172,   172,   172,   172,
   172,   172,   173,   174,   176,   175,   178,   177,   180,   179,
   181,   183,   182,   185,   184,   187,   186,   188,   186,   189,
   186,   190,   192,   191,   194,   193,   195,   196,   197,   199,
   198,   201,   200,   202,   203,   203,   203,   203,   203,   204,
   204,   204,   204,   204
};

static const short yyr2[] = {     0,
     1,     0,     1,     1,     2,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     0,     6,     0,     6,     1,     2,     1,     1,     2,     2,
     0,     7,     0,     9,     1,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     2,     0,     5,     1,     2,     0,     5,     1,
     2,     1,     1,     1,     1,     1,     1,     1,     1,     0,
     5,     1,     2,     1,     1,     1,     1,     1,     1,     1,
     1,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     1,     3,     3,     3,     5,     5,     1,     1,     1,
     3,     3,     5,     1,     3,     1,     3,     3,     3,     5,
     3,     1,     3,     3,     5,     1,     3,     3,     5,     0,
     3,     0,     3,     0,     3,     0,     3,     2,     2,     4,
     2,     4,     2,     2,     4,     2,     4,     2,     2,     2,
     3,     3,     4,     4,     0,     5,     4,     0,     4,     2,
     2,     2,     2,     2,     2,     2,     2,     1,     1,     1,
     1,     2,     2,     1,     2,     2,     2,     2,     2,     2,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     2,     2,     0,     4,     0,     4,     0,     4,
     3,     0,     4,     0,     4,     0,     4,     0,     5,     0,
     6,     1,     0,     4,     0,     4,     3,     3,     3,     0,
     4,     0,     6,     2,     0,     5,     5,     5,     5,     1,
     1,     1,     1,     8
};

static const short yydefact[] = {     2,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   232,
   152,   150,   154,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   188,     0,     0,     0,   189,   190,
   191,     0,     0,     0,     0,   194,     0,     0,     0,     1,
     3,     7,     4,    49,    47,    14,    15,    16,   207,   208,
   203,   201,   202,   204,   205,   206,    29,   209,   210,    42,
    43,    45,    46,    28,    25,    27,    26,     9,     8,    10,
    11,    12,    19,    50,    17,    18,    13,    24,    22,    23,
    21,   211,   212,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    40,    39,    41,    44,    48,    20,     0,   128,
   129,     0,   196,   197,   200,   199,   198,   192,   186,   184,
   185,   187,   215,   217,   219,     0,   222,   224,   233,     0,
   235,     0,   226,     0,   240,     0,   178,     0,     0,     0,
     0,   163,   164,   166,   159,   161,   181,   183,   182,   180,
   169,   168,   193,   100,     0,     0,   170,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   195,     0,   213,
   214,     5,     6,    51,    53,     0,     0,     0,   221,     0,
     0,     0,   237,     0,   238,   228,     0,   239,     0,   172,
   171,     0,     0,     0,   175,     0,   142,   146,   153,   151,
   136,   155,     0,     0,     0,     0,     0,     0,     0,   242,
     0,     0,   130,   216,   134,   218,   220,   223,   225,   234,
   236,   230,     0,   122,   227,     0,   241,   179,   174,   177,
     0,   173,     0,     0,     0,     0,     0,     0,   165,   167,
   160,   162,     0,   156,     0,   102,   105,   104,   107,   106,
   108,   109,   110,   111,    61,     0,     0,     0,     0,    55,
     0,    57,    58,     0,     0,     0,     0,   229,     0,     0,
     0,     0,   176,   143,   147,   144,   148,   137,   138,   139,
   158,     0,   101,   103,     0,     0,   245,     0,    84,    88,
    52,    56,    60,    59,    54,   131,   135,   231,   124,   123,
   125,   132,     0,     0,     0,     0,     0,   157,     0,     0,
     0,    65,    82,    80,    81,    79,    67,    68,    69,    70,
    71,    72,    73,    75,    74,    76,    77,    78,    63,   245,
   244,   243,     0,     0,     0,     0,   145,   149,   140,     0,
    83,    62,    66,     0,   250,   251,     0,   252,   253,     0,
     0,     0,    86,     0,    90,    96,    97,    94,    92,    93,
    95,    98,    99,   127,   126,   133,   141,     0,     0,   245,
   245,     0,     0,    85,    87,    89,    91,    64,     0,     0,
     0,     0,     0,     0,   248,   249,   247,   246,     0,     0,
     0,   254,     0,     0,     0
};

static const short yydefgoto[] = {   383,
    40,    41,    42,    43,   201,   202,   251,    44,   275,   334,
   301,   302,   303,   252,   323,   342,   253,   324,   344,   345,
    45,   197,   235,   236,    46,    47,    48,   215,   339,   204,
   217,   206,   192,   298,   189,    49,   130,    50,   129,    51,
   131,   237,   272,   238,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,   221,    63,   182,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,   166,
    85,   167,    86,   168,    87,    88,   170,    89,   171,    90,
   177,   213,   257,    91,    92,   172,    93,   174,    94,    95,
    96,    97,   179,    98,   247,   278,   321,   341
};

static const short yypact[] = {   253,
   160,   167,   120,   -72,   -66,    32,   -45,   -36,   376,-32768,
-32768,-32768,-32768,    32,    32,    32,    32,    32,    17,    32,
    32,    32,    32,    32,-32768,    32,    21,   170,-32768,-32768,
-32768,    32,   445,    32,    32,    32,    48,    51,    55,   253,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    54,-32768,
-32768,    58,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    68,-32768,-32768,-32768,    75,
-32768,    97,   112,    32,-32768,   -43,-32768,   146,   142,   142,
   115,-32768,   118,   122,   130,   134,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   145,    32,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   149,-32768,
-32768,-32768,-32768,-32768,-32768,   148,   186,   148,-32768,   148,
   186,   148,-32768,   148,-32768,   189,   188,-32768,    32,-32768,
-32768,   148,   190,   192,-32768,   191,   206,   208,   209,   209,
    35,   210,    32,    32,    32,    32,   436,   214,   217,-32768,
   310,   310,-32768,   221,-32768,   224,   221,   221,   224,   221,
   221,-32768,   188,   218,   227,   229,   232,   221,-32768,-32768,
   148,-32768,   238,   239,   154,   241,   240,   242,-32768,-32768,
-32768,-32768,    32,-32768,   243,   436,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   246,   260,   247,   262,-32768,
    46,-32768,-32768,   133,   265,   270,   188,   227,   161,   271,
   268,    32,   221,-32768,-32768,   267,   269,-32768,-32768,   272,
-32768,   274,-32768,-32768,    77,   287,   288,   291,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   227,-32768,-32768,
   292,-32768,   293,   298,   299,   314,   266,-32768,   389,   326,
    13,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   398,
-32768,-32768,   425,   341,   181,   330,-32768,-32768,-32768,   300,
-32768,-32768,-32768,    77,-32768,-32768,   320,-32768,-32768,   182,
    30,   409,-32768,   338,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,    15,   411,   288,
   288,   411,   411,-32768,-32768,-32768,-32768,-32768,   329,   328,
   331,   332,   334,    32,-32768,-32768,-32768,-32768,   333,    32,
   335,-32768,   424,   433,-32768
};

static const short yypgoto[] = {-32768,
-32768,   394,  -145,   405,-32768,-32768,   244,-32768,-32768,-32768,
   113,  -292,-32768,  -152,-32768,-32768,   -54,-32768,-32768,   105,
-32768,-32768,   215,-32768,-32768,-32768,-32768,  -189,    -1,    52,
-32768,   279,-32768,-32768,   336,  -297,-32768,  -284,-32768,  -272,
-32768,-32768,-32768,-32768,  -194,  -193,-32768,  -187,  -167,-32768,
  -195,-32768,  -264,  -246,  -243,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  -231,  -191,  -190,  -239,-32768,
  -237,-32768,  -214,-32768,  -179,  -159,-32768,  -127,-32768,-32768,
-32768,-32768,-32768,-32768,  -119,-32768,  -118,-32768,   -98,   -91,
   -87,   -84,-32768,-32768,-32768,-32768,  -253,  -173
};


#define	YYLAST		515


static const short yytable[] = {   102,
   104,   107,   239,   240,   110,   243,   244,   128,   333,   241,
   304,   108,   132,   133,   134,   135,   136,   109,   138,   139,
   140,   141,   142,   258,   143,   299,   346,   299,   305,   242,
   147,   306,   156,   157,   158,   307,   304,   308,   111,   347,
   180,   239,   240,   181,   243,   244,   346,   112,   241,     2,
     3,   348,   248,   249,   305,   250,   250,   306,     9,   347,
   309,   307,   300,   308,   300,   333,   340,   288,   242,   304,
    10,   348,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,   309,   305,    27,   299,
   306,   343,    28,   304,   307,   310,   308,    30,   283,    32,
   362,   283,   332,   137,   368,   282,   370,   371,   282,   144,
   365,   305,   363,    36,   306,   311,   100,   101,   307,   309,
   308,   310,   178,    38,    39,   226,   300,   227,   351,   349,
   350,   159,   352,   353,   160,   281,     2,     3,   161,   248,
   249,   311,   164,   309,   199,     9,   165,   312,   351,   349,
   350,   169,   352,   353,   310,   313,   314,    10,   173,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,   312,   311,    27,   315,   216,   310,    28,
   175,   313,   314,   316,    30,   369,    32,   317,   372,   373,
   318,   229,   230,   231,   232,   183,   284,   176,   311,   284,
    36,   191,   315,   105,   100,   101,   312,   106,   193,   316,
    38,    39,   194,   317,   313,   314,   318,   145,   146,   207,
   195,   208,   285,   210,   196,   211,   184,   185,   187,   188,
   312,   271,   198,   218,   203,   315,   186,   200,   313,   314,
   266,   267,   316,    99,   100,   101,   317,   289,   290,   318,
   103,   100,   101,   360,   361,     1,     2,     3,     4,   315,
   293,     5,     6,     7,     8,     9,   316,   354,   355,   205,
   317,   214,   263,   318,   212,   220,   219,    10,   222,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,   223,   128,   224,    28,
   225,   228,   245,    29,    30,    31,    32,   246,   259,    33,
    34,    35,   255,     2,     3,   256,   248,   249,   260,   261,
    36,    37,     9,   262,   264,   269,   265,   268,   270,   277,
    38,    39,   273,   276,    10,   279,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
   280,   286,    27,   287,   291,   292,    28,   294,   330,   295,
   297,    30,   296,    32,    11,    12,    13,    11,    12,    13,
    17,    18,   379,    17,    18,   319,    23,    36,   381,    23,
   322,   320,   325,   326,   327,   357,   328,    38,    39,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   329,   124,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   331,   359,   124,    38,    39,   356,    38,    39,
   374,   125,   375,   384,   380,   376,   377,   366,   378,   382,
   126,   127,   385,   162,   125,    11,    12,    13,    14,    15,
    16,    17,    18,   126,   163,   254,   358,    23,   367,   209,
   274,    11,    12,    13,    14,    15,    16,    17,    18,     0,
   100,   101,    32,    23,     0,   190,    15,    16,    17,    18,
     0,   335,   336,   100,   101,     0,     0,   337,    32,   233,
   234,   338,   100,   101,   335,   336,    38,    39,     0,     0,
   337,   320,     0,     0,   338,   100,   101,     0,   364,     0,
     0,     0,    38,    39,   148,   149,   150,   151,   152,   153,
   154,   155,     0,    38,    39
};

static const short yycheck[] = {     1,
     2,     3,   197,   197,     6,   197,   197,     9,   301,   197,
   275,    84,    14,    15,    16,    17,    18,    84,    20,    21,
    22,    23,    24,   213,    26,    13,   324,    13,   275,   197,
    32,   275,    34,    35,    36,   275,   301,   275,    84,   324,
    84,   236,   236,    87,   236,   236,   344,    84,   236,     4,
     5,   324,     7,     8,   301,   201,   202,   301,    13,   344,
   275,   301,    50,   301,    50,   358,   320,   257,   236,   334,
    25,   344,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,   301,   334,    43,    13,
   334,   323,    47,   358,   334,   275,   334,    52,   251,    54,
    71,   254,    90,    87,    90,   251,   360,   361,   254,    89,
   342,   358,    83,    68,   358,   275,    85,    86,   358,   334,
   358,   301,   124,    78,    79,    91,    50,    93,   324,   324,
   324,    84,   324,   324,    84,    90,     4,     5,    84,     7,
     8,   301,    89,   358,   146,    13,    89,   275,   344,   344,
   344,    84,   344,   344,   334,   275,   275,    25,    84,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,   301,   334,    43,   275,   179,   358,    47,
    84,   301,   301,   275,    52,   359,    54,   275,   362,   363,
   275,   193,   194,   195,   196,    50,   251,    86,   358,   254,
    68,    87,   301,    84,    85,    86,   334,    88,    91,   301,
    78,    79,    91,   301,   334,   334,   301,    48,    49,   168,
    91,   170,    90,   172,    91,   174,    81,    82,    87,    88,
   358,   233,    88,   182,    87,   334,    91,    89,   358,   358,
    87,    88,   334,    84,    85,    86,   334,    87,    88,   334,
    84,    85,    86,    72,    73,     3,     4,     5,     6,   358,
   262,     9,    10,    11,    12,    13,   358,    87,    88,    84,
   358,    84,   221,   358,    86,    84,    87,    25,    88,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    91,   299,    91,    47,
    92,    92,    89,    51,    52,    53,    54,    91,    91,    57,
    58,    59,    92,     4,     5,    92,     7,     8,    92,    91,
    68,    69,    13,    92,    87,    86,    88,    87,    87,    70,
    78,    79,    90,    88,    25,    89,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    89,    87,    43,    84,    84,    88,    47,    91,    93,    91,
    87,    52,    91,    54,    27,    28,    29,    27,    28,    29,
    33,    34,   374,    33,    34,    89,    39,    68,   380,    39,
    90,    94,    91,    91,    87,    86,    88,    78,    79,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    87,    26,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    87,    94,    26,    78,    79,    88,    78,    79,
    92,    46,    95,     0,    92,    95,    95,    90,    95,    95,
    55,    56,     0,    40,    46,    27,    28,    29,    30,    31,
    32,    33,    34,    55,    40,   202,   334,    39,   344,   171,
   236,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
    85,    86,    54,    39,    -1,   130,    31,    32,    33,    34,
    -1,    74,    75,    85,    86,    -1,    -1,    80,    54,    44,
    45,    84,    85,    86,    74,    75,    78,    79,    -1,    -1,
    80,    94,    -1,    -1,    84,    85,    86,    -1,    90,    -1,
    -1,    -1,    78,    79,    60,    61,    62,    63,    64,    65,
    66,    67,    -1,    78,    79
};

#line 352 "../bison++/bison.cc"
 /* fattrs + tables */

/* parser code folow  */


/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: dollar marks section change
   the next  is replaced by the list of actions, each action
   as one case of the switch.  */ 

#if YY_SrvParser_USE_GOTO != 0
/* 
 SUPRESSION OF GOTO : on some C++ compiler (sun c++)
  the goto is strictly forbidden if any constructor/destructor
  is used in the whole function (very stupid isn't it ?)
 so goto are to be replaced with a 'while/switch/case construct'
 here are the macro to keep some apparent compatibility
*/
#define YYGOTO(lb) {yy_gotostate=lb;continue;}
#define YYBEGINGOTO  enum yy_labels yy_gotostate=yygotostart; \
                     for(;;) switch(yy_gotostate) { case yygotostart: {
#define YYLABEL(lb) } case lb: {
#define YYENDGOTO } } 
#define YYBEGINDECLARELABEL enum yy_labels {yygotostart
#define YYDECLARELABEL(lb) ,lb
#define YYENDDECLARELABEL  }
#else
/* macro to keep goto */
#define YYGOTO(lb) goto lb
#define YYBEGINGOTO 
#define YYLABEL(lb) lb:
#define YYENDGOTO
#define YYBEGINDECLARELABEL 
#define YYDECLARELABEL(lb)
#define YYENDDECLARELABEL  
#endif
/* LABEL DECLARATION */
YYBEGINDECLARELABEL
  YYDECLARELABEL(yynewstate)
  YYDECLARELABEL(yybackup)
/* YYDECLARELABEL(yyresume) */
  YYDECLARELABEL(yydefault)
  YYDECLARELABEL(yyreduce)
  YYDECLARELABEL(yyerrlab)   /* here on detecting error */
  YYDECLARELABEL(yyerrlab1)   /* here on error raised explicitly by an action */
  YYDECLARELABEL(yyerrdefault)  /* current state does not do anything special for the error token. */
  YYDECLARELABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */
  YYDECLARELABEL(yyerrhandle)  
YYENDDECLARELABEL
/* ALLOCA SIMULATION */
/* __HAVE_NO_ALLOCA */
#ifdef __HAVE_NO_ALLOCA
int __alloca_free_ptr(char *ptr,char *ref)
{if(ptr!=ref) free(ptr);
 return 0;}

#define __ALLOCA_alloca(size) malloc(size)
#define __ALLOCA_free(ptr,ref) __alloca_free_ptr((char *)ptr,(char *)ref)

#ifdef YY_SrvParser_LSP_NEEDED
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		    __ALLOCA_free(yyls,yylsa)+\
		   (num)); } while(0)
#else
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		   (num)); } while(0)
#endif
#else
#define __ALLOCA_return(num) do { return(num); } while(0)
#define __ALLOCA_alloca(size) alloca(size)
#define __ALLOCA_free(ptr,ref) 
#endif

/* ENDALLOCA SIMULATION */

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (YY_SrvParser_CHAR = YYEMPTY)
#define YYEMPTY         -2
#define YYEOF           0
#define YYACCEPT        __ALLOCA_return(0)
#define YYABORT         __ALLOCA_return(1)
#define YYERROR         YYGOTO(yyerrlab1)
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL          YYGOTO(yyerrlab)
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do                                                              \
  if (YY_SrvParser_CHAR == YYEMPTY && yylen == 1)                               \
    { YY_SrvParser_CHAR = (token), YY_SrvParser_LVAL = (value);                 \
      yychar1 = YYTRANSLATE (YY_SrvParser_CHAR);                                \
      YYPOPSTACK;                                               \
      YYGOTO(yybackup);                                            \
    }                                                           \
  else                                                          \
    { YY_SrvParser_ERROR ("syntax error: cannot back up"); YYERROR; }   \
while (0)

#define YYTERROR        1
#define YYERRCODE       256

#ifndef YY_SrvParser_PURE
/* UNPURE */
#define YYLEX           YY_SrvParser_LEX()
#ifndef YY_USE_CLASS
/* If nonreentrant, and not class , generate the variables here */
int     YY_SrvParser_CHAR;                      /*  the lookahead symbol        */
YY_SrvParser_STYPE      YY_SrvParser_LVAL;              /*  the semantic value of the */
				/*  lookahead symbol    */
int YY_SrvParser_NERRS;                 /*  number of parse errors so far */
#ifdef YY_SrvParser_LSP_NEEDED
YY_SrvParser_LTYPE YY_SrvParser_LLOC;   /*  location data for the lookahead     */
			/*  symbol                              */
#endif
#endif


#else
/* PURE */
#ifdef YY_SrvParser_LSP_NEEDED
#define YYLEX           YY_SrvParser_LEX(&YY_SrvParser_LVAL, &YY_SrvParser_LLOC)
#else
#define YYLEX           YY_SrvParser_LEX(&YY_SrvParser_LVAL)
#endif
#endif
#ifndef YY_USE_CLASS
#if YY_SrvParser_DEBUG != 0
int YY_SrvParser_DEBUG_FLAG;                    /*  nonzero means print parse trace     */
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif
#endif



/*  YYINITDEPTH indicates the initial size of the parser's stacks       */

#ifndef YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif


#if __GNUC__ > 1                /* GNU C and GNU C++ define this.  */
#define __yy_bcopy(FROM,TO,COUNT)       __builtin_memcpy(TO,FROM,COUNT)
#else                           /* not GNU C or C++ */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */

#ifdef __cplusplus
static void __yy_bcopy (char *from, char *to, int count)
#else
#ifdef __STDC__
static void __yy_bcopy (char *from, char *to, int count)
#else
static void __yy_bcopy (from, to, count)
     char *from;
     char *to;
     int count;
#endif
#endif
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}
#endif


int
#ifdef YY_USE_CLASS
 YY_SrvParser_CLASS::
#endif
     YY_SrvParser_PARSE(YY_SrvParser_PARSE_PARAM)
#ifndef __STDC__
#ifndef __cplusplus
#ifndef YY_USE_CLASS
/* parameter definition without protypes */
YY_SrvParser_PARSE_PARAM_DEF
#endif
#endif
#endif
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YY_SrvParser_STYPE *yyvsp;
  int yyerrstatus;      /*  number of tokens to shift before error messages enabled */
  int yychar1=0;          /*  lookahead token as an internal (translated) token number */

  short yyssa[YYINITDEPTH];     /*  the state stack                     */
  YY_SrvParser_STYPE yyvsa[YYINITDEPTH];        /*  the semantic value stack            */

  short *yyss = yyssa;          /*  refer to the stacks thru separate pointers */
  YY_SrvParser_STYPE *yyvs = yyvsa;     /*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YY_SrvParser_LSP_NEEDED
  YY_SrvParser_LTYPE yylsa[YYINITDEPTH];        /*  the location stack                  */
  YY_SrvParser_LTYPE *yyls = yylsa;
  YY_SrvParser_LTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YY_SrvParser_PURE
  int YY_SrvParser_CHAR;
  YY_SrvParser_STYPE YY_SrvParser_LVAL;
  int YY_SrvParser_NERRS;
#ifdef YY_SrvParser_LSP_NEEDED
  YY_SrvParser_LTYPE YY_SrvParser_LLOC;
#endif
#endif

  YY_SrvParser_STYPE yyval;             /*  the variable used to return         */
				/*  semantic values from the action     */
				/*  routines                            */

  int yylen;
/* start loop, in which YYGOTO may be used. */
YYBEGINGOTO

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    fprintf(stderr, "Starting parse\n");
#endif
  yystate = 0;
  yyerrstatus = 0;
  YY_SrvParser_NERRS = 0;
  YY_SrvParser_CHAR = YYEMPTY;          /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YY_SrvParser_LSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
YYLABEL(yynewstate)

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YY_SrvParser_STYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YY_SrvParser_LSP_NEEDED
      YY_SrvParser_LTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YY_SrvParser_LSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YY_SrvParser_LSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	    YY_SrvParser_ERROR(((char*)"parser stack overflow"));
	  __ALLOCA_return(2);
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) __ALLOCA_alloca (yystacksize * sizeof (*yyssp));
      __yy_bcopy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      __ALLOCA_free(yyss1,yyssa);
      yyvs = (YY_SrvParser_STYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yyvsp));
      __yy_bcopy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
      __ALLOCA_free(yyvs1,yyvsa);
#ifdef YY_SrvParser_LSP_NEEDED
      yyls = (YY_SrvParser_LTYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yylsp));
      __yy_bcopy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
      __ALLOCA_free(yyls1,yylsa);
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YY_SrvParser_LSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  YYGOTO(yybackup);
YYLABEL(yybackup)

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* YYLABEL(yyresume) */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yydefault);

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (YY_SrvParser_CHAR == YYEMPTY)
    {
#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	fprintf(stderr, "Reading a token: ");
#endif
      YY_SrvParser_CHAR = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (YY_SrvParser_CHAR <= 0)           /* This means end of input. */
    {
      yychar1 = 0;
      YY_SrvParser_CHAR = YYEOF;                /* Don't call YYLEX any more */

#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(YY_SrvParser_CHAR);

#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	{
	  fprintf (stderr, "Next token is %d (%s", YY_SrvParser_CHAR, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, YY_SrvParser_CHAR, YY_SrvParser_LVAL);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    YYGOTO(yydefault);

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrlab);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrlab);

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting token %d (%s), ", YY_SrvParser_CHAR, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (YY_SrvParser_CHAR != YYEOF)
    YY_SrvParser_CHAR = YYEMPTY;

  *++yyvsp = YY_SrvParser_LVAL;
#ifdef YY_SrvParser_LSP_NEEDED
  *++yylsp = YY_SrvParser_LLOC;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  YYGOTO(yynewstate);

/* Do the default action for the current state.  */
YYLABEL(yydefault)

  yyn = yydefact[yystate];
  if (yyn == 0)
    YYGOTO(yyerrlab);

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
YYLABEL(yyreduce)
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


 #line 839 "../bison++/bison.cc"

  switch (yyn) {

case 51:
#line 206 "SrvParser.y"
{
    if (!StartIfaceDeclaration(yyvsp[-1].strval))
	YYABORT;
;
    break;}
case 52:
#line 211 "SrvParser.y"
{
    //Information about new interface has been read
    //Add it to list of read interfaces
    delete [] yyvsp[-4].strval;
    EndIfaceDeclaration();
;
    break;}
case 53:
#line 219 "SrvParser.y"
{
    if (!StartIfaceDeclaration(yyvsp[-1].ival))
	YYABORT;
;
    break;}
case 54:
#line 224 "SrvParser.y"
{
    EndIfaceDeclaration();
;
    break;}
case 61:
#line 239 "SrvParser.y"
{
    ParserOptStack.append(new TSrvParsGlobalOpt());
    SPtr<TDUID> duid = new TDUID(yyvsp[-1].duidval.duid,yyvsp[-1].duidval.length);
    ClientLst.append(new TSrvCfgOptions(duid));
;
    break;}
case 62:
#line 245 "SrvParser.y"
{
    Log(Debug) << "Exception: DUID-based exception specified." << LogEnd;
    // copy all defined options
    ClientLst.getLast()->setOptions(ParserOptStack.getLast());
    ParserOptStack.delLast();
;
    break;}
case 63:
#line 253 "SrvParser.y"
{
    ParserOptStack.append(new TSrvParsGlobalOpt());
    SPtr<TSrvOptRemoteID> remoteid = new TSrvOptRemoteID(yyvsp[-3].ival, yyvsp[-1].duidval.duid, yyvsp[-1].duidval.length, 0);
    ClientLst.append(new TSrvCfgOptions(remoteid));
;
    break;}
case 64:
#line 259 "SrvParser.y"
{
    Log(Debug) << "Exception: RemoteID-based exception specified." << LogEnd;
    // copy all defined options
    ClientLst.getLast()->setOptions(ParserOptStack.getLast());
    ParserOptStack.delLast();
;
    break;}
case 83:
#line 292 "SrvParser.y"
{
    addr = new TIPv6Addr(yyvsp[0].addrval);
    Log(Info) << "Exception: Address " << addr->getPlain() << " reserved." << LogEnd;
    ClientLst.getLast()->setAddr(addr);
;
    break;}
case 84:
#line 301 "SrvParser.y"
{ 
    StartClassDeclaration();
;
    break;}
case 85:
#line 305 "SrvParser.y"
{
    if (!EndClassDeclaration())
	YYABORT;
;
    break;}
case 88:
#line 319 "SrvParser.y"
{
    StartTAClassDeclaration();
;
    break;}
case 89:
#line 322 "SrvParser.y"
{
    if (!EndTAClassDeclaration())
	YYABORT;
;
    break;}
case 100:
#line 345 "SrvParser.y"
{
    StartPDDeclaration();
;
    break;}
case 101:
#line 348 "SrvParser.y"
{
    if (!EndPDDeclaration())
	YYABORT;
;
    break;}
case 112:
#line 374 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_NONE); ;
    break;}
case 113:
#line 375 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_PLAIN); ;
    break;}
case 114:
#line 376 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_HMAC_MD5); ;
    break;}
case 115:
#line 377 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_HMAC_SHA1); ;
    break;}
case 116:
#line 378 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_HMAC_SHA224); ;
    break;}
case 117:
#line 379 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_HMAC_SHA256); ;
    break;}
case 118:
#line 380 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_HMAC_SHA384); ;
    break;}
case 119:
#line 381 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_HMAC_SHA512); ;
    break;}
case 120:
#line 385 "SrvParser.y"
{ ParserOptStack.getLast()->setAuthLifetime(yyvsp[0].ival); ;
    break;}
case 121:
#line 389 "SrvParser.y"
{ ParserOptStack.getLast()->setAuthKeyLen(yyvsp[0].ival); ;
    break;}
case 122:
#line 398 "SrvParser.y"
{
    Log(Notice)<< "FQDN: The client "<<yyvsp[0].strval<<" has no address nor DUID"<<LogEnd;
    PresentFQDNLst.append(new TFQDN(yyvsp[0].strval,false));
;
    break;}
case 123:
#line 403 "SrvParser.y"
{
    TDUID* duidNew = new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length);
    Log(Debug)<< "FQDN:" << yyvsp[-2].strval <<" reserved for DUID " << duidNew->getPlain()<<LogEnd;
    // FIXME: Use SPtr()
    PresentFQDNLst.append(new TFQDN(duidNew, yyvsp[-2].strval,false));
;
    break;}
case 124:
#line 410 "SrvParser.y"
{
    addr = new TIPv6Addr(yyvsp[0].addrval);
    Log(Debug)<< "FQDN:" << yyvsp[-2].strval <<" reserved for address "<<*addr<<LogEnd;
    // FIXME: Use SPtr()
    PresentFQDNLst.append(new TFQDN(new TIPv6Addr(yyvsp[0].addrval), yyvsp[-2].strval,false));
;
    break;}
case 125:
#line 417 "SrvParser.y"
{
	Log(Notice)<< "FQDN:"<<yyvsp[0].strval<<" has no reservations (is available to everyone)."<<LogEnd;
    PresentFQDNLst.append(new TFQDN(yyvsp[0].strval,false));
;
    break;}
case 126:
#line 422 "SrvParser.y"
{
    TDUID* duidNew = new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length);
    Log(Debug)<< "FQDN:" << yyvsp[-2].strval << " reserved for DUID "<< duidNew->getPlain() << LogEnd;
    // FIXME: Use SPtr()
    PresentFQDNLst.append(new TFQDN( duidNew, yyvsp[-2].strval,false));
;
    break;}
case 127:
#line 429 "SrvParser.y"
{
    addr = new TIPv6Addr(yyvsp[0].addrval);
    Log(Debug)<< "FQDN:" << yyvsp[-2].strval<<" reserved for address "<< addr->getPlain() << LogEnd;
    // FIXME: Use SPtr()
    PresentFQDNLst.append(new TFQDN(new TIPv6Addr(yyvsp[0].addrval), yyvsp[-2].strval,false));
;
    break;}
case 128:
#line 438 "SrvParser.y"
{yyval.ival=yyvsp[0].ival;;
    break;}
case 129:
#line 439 "SrvParser.y"
{yyval.ival=yyvsp[0].ival;;
    break;}
case 130:
#line 444 "SrvParser.y"
{
    PresentAddrLst.append(new TIPv6Addr(yyvsp[0].addrval));
;
    break;}
case 131:
#line 448 "SrvParser.y"
{
    PresentAddrLst.append(new TIPv6Addr(yyvsp[0].addrval));
;
    break;}
case 132:
#line 455 "SrvParser.y"
{
    // Log(Debug) << "Vendor-spec defined: Number: " << $1 << ", valuelen=" << $3.length << LogEnd;
    VendorSpec.append(new TSrvOptVendorSpec(yyvsp[-2].ival, yyvsp[0].duidval.duid, yyvsp[0].duidval.length, 0));
;
    break;}
case 133:
#line 460 "SrvParser.y"
{
    // Log(Debug) << "Vendor-spec defined: Number: " << $3 << ", valuelen=" << $5.length << LogEnd;
    VendorSpec.append(new TSrvOptVendorSpec(yyvsp[-2].ival, yyvsp[0].duidval.duid, yyvsp[0].duidval.length, 0));
;
    break;}
case 134:
#line 467 "SrvParser.y"
{ PresentStringLst.append(SPtr<string> (new string(yyvsp[0].strval))); ;
    break;}
case 135:
#line 468 "SrvParser.y"
{ PresentStringLst.append(SPtr<string> (new string(yyvsp[0].strval))); ;
    break;}
case 136:
#line 473 "SrvParser.y"
{
        PresentRangeLst.append(new TStationRange(new TIPv6Addr(yyvsp[0].addrval),new TIPv6Addr(yyvsp[0].addrval)));
    ;
    break;}
case 137:
#line 477 "SrvParser.y"
{
        SPtr<TIPv6Addr> addr1(new TIPv6Addr(yyvsp[-2].addrval));
        SPtr<TIPv6Addr> addr2(new TIPv6Addr(yyvsp[0].addrval));
        if (*addr1<=*addr2)
            PresentRangeLst.append(new TStationRange(addr1,addr2));
        else
            PresentRangeLst.append(new TStationRange(addr2,addr1));
    ;
    break;}
case 138:
#line 486 "SrvParser.y"
{
	SPtr<TIPv6Addr> addr(new TIPv6Addr(yyvsp[-2].addrval));
	int prefix = yyvsp[0].ival;
	if ( (prefix<1) || (prefix>128)) {
	    Log(Crit) << "Invalid prefix defined: " << prefix << " in line " << lex->lineno() 
		      << ". Allowed range: 1..128." << LogEnd;
	    YYABORT;
	}
	SPtr<TIPv6Addr> addr1 = this->getRangeMin(yyvsp[-2].addrval, prefix);
	SPtr<TIPv6Addr> addr2 = this->getRangeMax(yyvsp[-2].addrval, prefix);
        if (*addr1<=*addr2)
            PresentRangeLst.append(new TStationRange(addr1,addr2));
        else
            PresentRangeLst.append(new TStationRange(addr2,addr1));
    ;
    break;}
case 139:
#line 502 "SrvParser.y"
{
        PresentRangeLst.append(new TStationRange(new TIPv6Addr(yyvsp[0].addrval),new TIPv6Addr(yyvsp[0].addrval)));
    ;
    break;}
case 140:
#line 506 "SrvParser.y"
{
        SPtr<TIPv6Addr> addr1(new TIPv6Addr(yyvsp[-2].addrval));
        SPtr<TIPv6Addr> addr2(new TIPv6Addr(yyvsp[0].addrval));
        if (*addr1<=*addr2)
            PresentRangeLst.append(new TStationRange(addr1,addr2));
        else
            PresentRangeLst.append(new TStationRange(addr2,addr1));
    ;
    break;}
case 141:
#line 518 "SrvParser.y"
{
	SPtr<TIPv6Addr> addr(new TIPv6Addr(yyvsp[-2].addrval));
	int prefix = yyvsp[0].ival;
	if ( (prefix<1) || (prefix>128)) {
	    Log(Crit) << "Invalid prefix defined: " << prefix << " in line " << lex->lineno() 
		      << ". Allowed range: 1..128." << LogEnd;
	    YYABORT;
	}
 	
	SPtr<TIPv6Addr> addr1 = this->getRangeMin(yyvsp[-2].addrval, prefix);
	SPtr<TIPv6Addr> addr2 = this->getRangeMax(yyvsp[-2].addrval, prefix);
	SPtr<TStationRange> range = 0;
	if (*addr1<=*addr2)
            range = new TStationRange(addr1,addr2);
        else
            range = new TStationRange(addr2,addr1);
	range->setPrefixLength(prefix);
	PDLst.append(range);
    ;
    break;}
case 142:
#line 541 "SrvParser.y"
{
    PresentRangeLst.append(new TStationRange(new TIPv6Addr(yyvsp[0].addrval),new TIPv6Addr(yyvsp[0].addrval)));
;
    break;}
case 143:
#line 545 "SrvParser.y"
{
    SPtr<TIPv6Addr> addr1(new TIPv6Addr(yyvsp[-2].addrval));
    SPtr<TIPv6Addr> addr2(new TIPv6Addr(yyvsp[0].addrval));
    if (*addr1<=*addr2)
	PresentRangeLst.append(new TStationRange(addr1,addr2));
    else
	PresentRangeLst.append(new TStationRange(addr2,addr1));
;
    break;}
case 144:
#line 554 "SrvParser.y"
{
    PresentRangeLst.append(new TStationRange(new TIPv6Addr(yyvsp[0].addrval),new TIPv6Addr(yyvsp[0].addrval)));
;
    break;}
case 145:
#line 558 "SrvParser.y"
{
    SPtr<TIPv6Addr> addr1(new TIPv6Addr(yyvsp[-2].addrval));
    SPtr<TIPv6Addr> addr2(new TIPv6Addr(yyvsp[0].addrval));
    if (*addr1<=*addr2)
	PresentRangeLst.append(new TStationRange(addr1,addr2));
    else
	PresentRangeLst.append(new TStationRange(addr2,addr1));
;
    break;}
case 146:
#line 567 "SrvParser.y"
{
    PresentRangeLst.append(new TStationRange(new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length)));
    delete yyvsp[0].duidval.duid;
;
    break;}
case 147:
#line 572 "SrvParser.y"
{   
    SPtr<TDUID> duid1(new TDUID(yyvsp[-2].duidval.duid,yyvsp[-2].duidval.length));
    SPtr<TDUID> duid2(new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length));
    
    if (*duid1<=*duid2)
        PresentRangeLst.append(new TStationRange(duid1,duid2));
    else
        PresentRangeLst.append(new TStationRange(duid2,duid1));
;
    break;}
case 148:
#line 582 "SrvParser.y"
{
    PresentRangeLst.append(new TStationRange(new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length)));
    delete yyvsp[0].duidval.duid;
;
    break;}
case 149:
#line 587 "SrvParser.y"
{
    SPtr<TDUID> duid2(new TDUID(yyvsp[-2].duidval.duid,yyvsp[-2].duidval.length));
    SPtr<TDUID> duid1(new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length));
    if (*duid1<=*duid2)
        PresentRangeLst.append(new TStationRange(duid1,duid2));
    else
        PresentRangeLst.append(new TStationRange(duid2,duid1));
    delete yyvsp[-2].duidval.duid;
    delete yyvsp[0].duidval.duid;
;
    break;}
case 150:
#line 601 "SrvParser.y"
{
    PresentRangeLst.clear();    
;
    break;}
case 151:
#line 604 "SrvParser.y"
{
    ParserOptStack.getLast()->setRejedClnt(&PresentRangeLst);
;
    break;}
case 152:
#line 611 "SrvParser.y"
{
    PresentRangeLst.clear();    
;
    break;}
case 153:
#line 614 "SrvParser.y"
{
    ParserOptStack.getLast()->setAcceptClnt(&PresentRangeLst);
;
    break;}
case 154:
#line 621 "SrvParser.y"
{
    PresentRangeLst.clear();    
;
    break;}
case 155:
#line 624 "SrvParser.y"
{
    ParserOptStack.getLast()->setPool(&PresentRangeLst);
;
    break;}
case 156:
#line 631 "SrvParser.y"
{
;
    break;}
case 157:
#line 633 "SrvParser.y"
{
    ParserOptStack.getLast()->setPool(&PresentRangeLst/*PDList*/);
;
    break;}
case 158:
#line 639 "SrvParser.y"
{
   this->PDPrefix = yyvsp[0].ival;
;
    break;}
case 159:
#line 646 "SrvParser.y"
{ 
    ParserOptStack.getLast()->setPrefBeg(yyvsp[0].ival);
    ParserOptStack.getLast()->setPrefEnd(yyvsp[0].ival);
;
    break;}
case 160:
#line 651 "SrvParser.y"
{
    ParserOptStack.getLast()->setPrefBeg(yyvsp[-2].ival);
    ParserOptStack.getLast()->setPrefEnd(yyvsp[0].ival);   
;
    break;}
case 161:
#line 659 "SrvParser.y"
{ 
    ParserOptStack.getLast()->setValidBeg(yyvsp[0].ival);
    ParserOptStack.getLast()->setValidEnd(yyvsp[0].ival);
;
    break;}
case 162:
#line 664 "SrvParser.y"
{
    ParserOptStack.getLast()->setValidBeg(yyvsp[-2].ival);
    ParserOptStack.getLast()->setValidEnd(yyvsp[0].ival);  
;
    break;}
case 163:
#line 672 "SrvParser.y"
{
    int x=yyvsp[0].ival;
    if ( (x<1) || (x>1000)) {
	Log(Crit) << "Invalid share value: " << x << " in line " << lex->lineno() 
		  << ". Allowed range: 1..1000." << LogEnd;
	YYABORT;
    }
    ParserOptStack.getLast()->setShare(x);
;
    break;}
case 164:
#line 684 "SrvParser.y"
{
    ParserOptStack.getLast()->setT1Beg(yyvsp[0].ival); 
    ParserOptStack.getLast()->setT1End(yyvsp[0].ival); 
;
    break;}
case 165:
#line 689 "SrvParser.y"
{
    ParserOptStack.getLast()->setT1Beg(yyvsp[-2].ival); 
    ParserOptStack.getLast()->setT1End(yyvsp[0].ival); 
;
    break;}
case 166:
#line 697 "SrvParser.y"
{ 
    ParserOptStack.getLast()->setT2Beg(yyvsp[0].ival); 
    ParserOptStack.getLast()->setT2End(yyvsp[0].ival); 
;
    break;}
case 167:
#line 702 "SrvParser.y"
{
    ParserOptStack.getLast()->setT2Beg(yyvsp[-2].ival); 
    ParserOptStack.getLast()->setT2End(yyvsp[0].ival); 
;
    break;}
case 168:
#line 710 "SrvParser.y"
{ 
    ParserOptStack.getLast()->setClntMaxLease(yyvsp[0].ival);
;
    break;}
case 169:
#line 717 "SrvParser.y"
{
    ParserOptStack.getLast()->setClassMaxLease(yyvsp[0].ival);
;
    break;}
case 170:
#line 724 "SrvParser.y"
{
    if (!ParserOptStack.getLast()->getExperimental()) {
	Log(Crit) << "Experimental 'addr-params' defined, but experimental features are disabled. Add 'experimental' "
		  << "in global section of server.conf to enable it." << LogEnd;
	YYABORT;
    }
    int bitfield = ADDRPARAMS_MASK_PREFIX;
    Log(Warning) << "Experimental addr-params added (prefix=" << yyvsp[0].ival << ", bitfield=" << bitfield << ")." << LogEnd;
    ParserOptStack.getLast()->setAddrParams(yyvsp[0].ival,bitfield);
;
    break;}
case 171:
#line 737 "SrvParser.y"
{
    SPtr<TIPv6Addr> addr = new TIPv6Addr(yyvsp[0].addrval);
    Log(Info) << "Enabling DS-Lite tunnel option, address=" << addr->getPlain() << LogEnd;
    SPtr<TOpt> tunnelAddr = new TOptAddr(OPTION_DS_LITE_ADDR, addr, 0);
    SrvCfgIfaceLst.getLast()->addExtraOption(tunnelAddr, false);
;
    break;}
case 172:
#line 746 "SrvParser.y"
{
    SPtr<TOpt> tunnelName = new TOptString(OPTION_DS_LITE_NAME, yyvsp[0].strval, 0);
    Log(Info) << "Enabling DS-Lite tunnel option, name=" << yyvsp[0].strval << LogEnd;
    SrvCfgIfaceLst.getLast()->addExtraOption(tunnelName, false);
;
    break;}
case 173:
#line 754 "SrvParser.y"
{
    SPtr<TOpt> opt = new TOptGeneric(yyvsp[-2].ival, yyvsp[0].duidval.duid, yyvsp[0].duidval.length, 0);
    SrvCfgIfaceLst.getLast()->addExtraOption(opt, false);
    Log(Debug) << "Extra option defined: code=" << yyvsp[-2].ival << ", length=" << yyvsp[0].duidval.length << LogEnd;
;
    break;}
case 174:
#line 760 "SrvParser.y"
{
    SPtr<TIPv6Addr> addr(new TIPv6Addr(yyvsp[0].addrval));

    SPtr<TOpt> opt = new TOptAddr(yyvsp[-2].ival, addr, 0);
    SrvCfgIfaceLst.getLast()->addExtraOption(opt, false);
    Log(Debug) << "Extra option defined: code=" << yyvsp[-2].ival << ", address=" << addr->getPlain() << LogEnd;
;
    break;}
case 175:
#line 768 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 176:
#line 771 "SrvParser.y"
{
    SPtr<TOpt> opt = new TOptAddrLst(yyvsp[-3].ival, PresentAddrLst, 0);
    SrvCfgIfaceLst.getLast()->addExtraOption(opt, false);
    Log(Debug) << "Extra option defined: code=" << yyvsp[-3].ival << ", address count=" << PresentAddrLst.count() << LogEnd;
;
    break;}
case 177:
#line 777 "SrvParser.y"
{
    SPtr<TOpt> opt = new TOptString(yyvsp[-2].ival, string(yyvsp[0].strval), 0);
    SrvCfgIfaceLst.getLast()->addExtraOption(opt, false);
    Log(Debug) << "Extra option defined: code=" << yyvsp[-2].ival << ", string=" << yyvsp[0].strval << LogEnd;
;
    break;}
case 178:
#line 785 "SrvParser.y"
{
    if (!ParserOptStack.getLast()->getExperimental()) {
	Log(Crit) << "Experimental 'remote autoconf neighbors' defined, but "
		  << "experimental features are disabled. Add 'experimental' "
		  << "in global section of server.conf to enable it." << LogEnd;
	YYABORT;
    }

    PresentAddrLst.clear();
;
    break;}
case 179:
#line 795 "SrvParser.y"
{
    SPtr<TOpt> opt = new TOptAddrLst(OPTION_NEIGHBORS, PresentAddrLst, 0);
    SrvCfgIfaceLst.getLast()->addExtraOption(opt, false);
    Log(Debug) << "Remote autoconf neighbors enabled (" << PresentAddrLst.count() 
	       << " neighbors defined.)" << LogEnd;
;
    break;}
case 180:
#line 805 "SrvParser.y"
{
    ParserOptStack.getLast()->setIfaceMaxLease(yyvsp[0].ival);
;
    break;}
case 181:
#line 812 "SrvParser.y"
{
    ParserOptStack.getLast()->setUnicast(new TIPv6Addr(yyvsp[0].addrval));
;
    break;}
case 182:
#line 819 "SrvParser.y"
{ 
    if ( (yyvsp[0].ival!=0) && (yyvsp[0].ival!=1)) {
	Log(Crit) << "RAPID-COMMIT  parameter in line " << lex->lineno() << " must have 0 or 1 value." 
               << LogEnd;
	YYABORT;
    }
    if (yyvsp[0].ival==1)
	ParserOptStack.getLast()->setRapidCommit(true); 
    else
	ParserOptStack.getLast()->setRapidCommit(false); 
;
    break;}
case 183:
#line 834 "SrvParser.y"
{ 
    if ((yyvsp[0].ival<0)||(yyvsp[0].ival>255)) {
	Log(Crit) << "Preference value (" << yyvsp[0].ival << ") in line " << lex->lineno() 
		   << " is out of range [0..255]." << LogEnd;
	YYABORT;
    }
    ParserOptStack.getLast()->setPreference(yyvsp[0].ival);    
;
    break;}
case 184:
#line 845 "SrvParser.y"
{
    logger::setLogLevel(yyvsp[0].ival);
;
    break;}
case 185:
#line 851 "SrvParser.y"
{
    logger::setLogMode(yyvsp[0].strval);
;
    break;}
case 186:
#line 857 "SrvParser.y"
{
    logger::setLogName(yyvsp[0].strval);
;
    break;}
case 187:
#line 864 "SrvParser.y"
{
    ParserOptStack.getLast()->setWorkDir(yyvsp[0].strval);
;
    break;}
case 188:
#line 871 "SrvParser.y"
{
    ParserOptStack.getLast()->setStateless(true);
;
    break;}
case 189:
#line 878 "SrvParser.y"
{
    Log(Info) << "Guess-mode enabled: relay interfaces may be loosely defined (matching interface-id is not mandatory)." << LogEnd;
    ParserOptStack.getLast()->setGuessMode(true);
;
    break;}
case 190:
#line 885 "SrvParser.y"
{
    ParserOptStack.getLast()->setInactiveMode(true);
;
    break;}
case 191:
#line 891 "SrvParser.y"
{
    Log(Crit) << "Experimental features are allowed." << LogEnd;
    ParserOptStack.getLast()->setExperimental(true);
;
    break;}
case 192:
#line 898 "SrvParser.y"
{
    if (!strncasecmp(yyvsp[0].strval,"before",6)) 
    {
		ParserOptStack.getLast()->setInterfaceIDOrder(SRV_IFACE_ID_ORDER_BEFORE);
    } else 
    if (!strncasecmp(yyvsp[0].strval,"after",5)) 
    {
		ParserOptStack.getLast()->setInterfaceIDOrder(SRV_IFACE_ID_ORDER_AFTER);
    } else
    if (!strncasecmp(yyvsp[0].strval,"omit",4)) 
    {
		ParserOptStack.getLast()->setInterfaceIDOrder(SRV_IFACE_ID_ORDER_NONE);
    } else 
    {
		Log(Crit) << "Invalid interface-id-order specified. Allowed values: before, after, omit" << LogEnd;
		YYABORT;
    }
;
    break;}
case 193:
#line 919 "SrvParser.y"
{
    ParserOptStack.getLast()->setCacheSize(yyvsp[0].ival);
;
    break;}
case 194:
#line 926 "SrvParser.y"
{
    ParserOptStack.getLast()->setLeaseQuerySupport(true);

;
    break;}
case 195:
#line 931 "SrvParser.y"
{
    switch (yyvsp[0].ival) {
    case 0:
		ParserOptStack.getLast()->setLeaseQuerySupport(false);
		break;
    case 1:
		ParserOptStack.getLast()->setLeaseQuerySupport(true);
		break;
    default:
		Log(Crit) << "Invalid value of accept-leasequery specifed. Allowed values: 0, 1, yes, no, true, false" << LogEnd;
		YYABORT;
    }
;
    break;}
case 196:
#line 950 "SrvParser.y"
{
    ParserOptStack.getLast()->setRelayName(yyvsp[0].strval);
;
    break;}
case 197:
#line 954 "SrvParser.y"
{
    ParserOptStack.getLast()->setRelayID(yyvsp[0].ival);
;
    break;}
case 198:
#line 961 "SrvParser.y"
{
    SPtr<TSrvOptInterfaceID> id = new TSrvOptInterfaceID(yyvsp[0].ival, 0);
    ParserOptStack.getLast()->setRelayInterfaceID(id);
;
    break;}
case 199:
#line 966 "SrvParser.y"
{
    SPtr<TSrvOptInterfaceID> id = new TSrvOptInterfaceID(yyvsp[0].duidval.duid, yyvsp[0].duidval.length, 0);
    ParserOptStack.getLast()->setRelayInterfaceID(id);
;
    break;}
case 200:
#line 971 "SrvParser.y"
{
    SPtr<TSrvOptInterfaceID> id = new TSrvOptInterfaceID(yyvsp[0].strval, strlen(yyvsp[0].strval), 0);
    ParserOptStack.getLast()->setRelayInterfaceID(id);
;
    break;}
case 213:
#line 994 "SrvParser.y"
{	
    SPtr<TSrvCfgClientClass> clntClass;
    bool found = false;
    SrvCfgClientClassLst.first();
    while (clntClass = SrvCfgClientClassLst.get())
    {
	if (clntClass->getClassName() == string(yyvsp[0].strval))
	    found = true;
    }
    if (!found)
    {
	Log(Crit) << "Line " << lex->lineno()
		  << ": Unable to use class " << string(yyvsp[0].strval) << ", no such class defined." << LogEnd;
	YYABORT;
    }
    ParserOptStack.getLast()->setAllowClientClass(string(yyvsp[0].strval));

    int deny = ParserOptStack.getLast()->getDenyClientClassString().count();

    if (deny)
    {
	Log(Crit) << "Line " << lex->lineno() << ": Unable to define both allow and deny lists for this client class." << LogEnd;
	YYABORT;
    }
	
;
    break;}
case 214:
#line 1023 "SrvParser.y"
{	
    SPtr<TSrvCfgClientClass> clntClass;
    bool found = false;
    SrvCfgClientClassLst.first();
    while (clntClass = SrvCfgClientClassLst.get())
    {
	if (clntClass->getClassName() == string(yyvsp[0].strval))
	    found = true;
    }
    if (!found)
    {
	Log(Crit) << "Line " << lex->lineno()
		  << ": Unable to use class " << string(yyvsp[0].strval) << ", no such class defined." << LogEnd;
	YYABORT;
    }
    ParserOptStack.getLast()->setDenyClientClass(string(yyvsp[0].strval));

    int allow = ParserOptStack.getLast()->getAllowClientClassString().count();

    if (allow)
    {
	Log(Crit) << "Line " << lex->lineno() << ": Unable to define both allow and deny lists for this client class." << LogEnd;
	YYABORT;
    }

;
    break;}
case 215:
#line 1056 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 216:
#line 1059 "SrvParser.y"
{
    ParserOptStack.getLast()->setDNSServerLst(&PresentAddrLst);
;
    break;}
case 217:
#line 1068 "SrvParser.y"
{
    PresentStringLst.clear();
;
    break;}
case 218:
#line 1071 "SrvParser.y"
{ 
    ParserOptStack.getLast()->setDomainLst(&PresentStringLst);
;
    break;}
case 219:
#line 1081 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 220:
#line 1084 "SrvParser.y"
{
    ParserOptStack.getLast()->setNTPServerLst(&PresentAddrLst);
;
    break;}
case 221:
#line 1094 "SrvParser.y"
{ 
    ParserOptStack.getLast()->setTimezone(yyvsp[0].strval); 
;
    break;}
case 222:
#line 1103 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 223:
#line 1106 "SrvParser.y"
{
    ParserOptStack.getLast()->setSIPServerLst(&PresentAddrLst);
;
    break;}
case 224:
#line 1115 "SrvParser.y"
{
    PresentStringLst.clear();
;
    break;}
case 225:
#line 1118 "SrvParser.y"
{
    ParserOptStack.getLast()->setSIPDomainLst(&PresentStringLst);
;
    break;}
case 226:
#line 1129 "SrvParser.y"
{
    PresentFQDNLst.clear();
    Log(Debug)   << "No FQDNMode found, setting default mode 2 (all updates executed by server)." << LogEnd;
    Log(Warning) << "revDNS zoneroot lenght not found, dynamic revDNS update will not be possible." << LogEnd;
    ParserOptStack.getLast()->setFQDNMode(2);
    ParserOptStack.getLast()->setRevDNSZoneRootLength(0);
;
    break;}
case 227:
#line 1136 "SrvParser.y"
{
    ParserOptStack.getLast()->setFQDNLst(&PresentFQDNLst);
;
    break;}
case 228:
#line 1140 "SrvParser.y"
{
    PresentFQDNLst.clear();
    Log(Debug)  << "FQDNMode found, setting value"<< yyvsp[0].ival <<LogEnd;
    Log(Warning)<< "revDNS zoneroot lenght not specified, dynamic revDNS update will not be possible." << LogEnd;
    ParserOptStack.getLast()->setFQDNMode(yyvsp[0].ival);
    ParserOptStack.getLast()->setRevDNSZoneRootLength(0);
;
    break;}
case 229:
#line 1147 "SrvParser.y"
{
    ParserOptStack.getLast()->setFQDNLst(&PresentFQDNLst);
  
;
    break;}
case 230:
#line 1152 "SrvParser.y"
{
    PresentFQDNLst.clear();
    Log(Debug) << "FQDNMode found, setting value " << yyvsp[-1].ival <<LogEnd;
    Log(Debug) << "revDNS zoneroot lenght found, setting value " << yyvsp[0].ival <<LogEnd;
    ParserOptStack.getLast()->setFQDNMode(yyvsp[-1].ival);
    ParserOptStack.getLast()->setRevDNSZoneRootLength(yyvsp[0].ival);
;
    break;}
case 231:
#line 1159 "SrvParser.y"
{
    ParserOptStack.getLast()->setFQDNLst(&PresentFQDNLst);
  
;
    break;}
case 232:
#line 1167 "SrvParser.y"
{
    ParserOptStack.getLast()->acceptUnknownFQDN(true);
    Log(Debug) << "FQDN: Unknown fqdn names will be accepted by the server." << LogEnd;
;
    break;}
case 233:
#line 1176 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 234:
#line 1179 "SrvParser.y"
{
    ParserOptStack.getLast()->setNISServerLst(&PresentAddrLst);
;
    break;}
case 235:
#line 1188 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 236:
#line 1191 "SrvParser.y"
{
    ParserOptStack.getLast()->setNISPServerLst(&PresentAddrLst);
;
    break;}
case 237:
#line 1201 "SrvParser.y"
{
    ParserOptStack.getLast()->setNISDomain(yyvsp[0].strval);
;
    break;}
case 238:
#line 1211 "SrvParser.y"
{
    ParserOptStack.getLast()->setNISPDomain(yyvsp[0].strval);
;
    break;}
case 239:
#line 1221 "SrvParser.y"
{
    ParserOptStack.getLast()->setLifetime(yyvsp[0].ival);
;
    break;}
case 240:
#line 1227 "SrvParser.y"
{
    VendorSpec.clear();
;
    break;}
case 241:
#line 1230 "SrvParser.y"
{
    ParserOptStack.getLast()->setVendorSpec(VendorSpec);
    // Log(Debug) << "Vendor-spec parsing finished" << LogEnd;
;
    break;}
case 242:
#line 1238 "SrvParser.y"
{
    Log(Notice) << "ClientClass found, name: " << string(yyvsp[-1].strval) << LogEnd;
;
    break;}
case 243:
#line 1241 "SrvParser.y"
{
    SPtr<Node> cond =  NodeClientClassLst.getLast();
    SrvCfgClientClassLst.append( new TSrvCfgClientClass(string(yyvsp[-4].strval),cond));
    NodeClientClassLst.delLast();
;
    break;}
case 244:
#line 1251 "SrvParser.y"
{
;
    break;}
case 246:
#line 1257 "SrvParser.y"
{
    SPtr<Node> r =  NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    SPtr<Node> l = NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    NodeClientClassLst.append(new NodeOperator(NodeOperator::OPERATOR_CONTAIN,l,r));
;
    break;}
case 247:
#line 1265 "SrvParser.y"
{
    SPtr<Node> l =  NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    SPtr<Node> r = NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    
    NodeClientClassLst.append(new NodeOperator(NodeOperator::OPERATOR_EQUAL,l,r));
;
    break;}
case 248:
#line 1274 "SrvParser.y"
{
    SPtr<Node> l =  NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    SPtr<Node> r = NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    NodeClientClassLst.append(new NodeOperator(NodeOperator::OPERATOR_AND,l,r));
    
;
    break;}
case 249:
#line 1283 "SrvParser.y"
{
    SPtr<Node> l =  NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    SPtr<Node> r = NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    NodeClientClassLst.append(new NodeOperator(NodeOperator::OPERATOR_OR,l,r));
;
    break;}
case 250:
#line 1294 "SrvParser.y"
{
    NodeClientClassLst.append(new NodeClientSpecific(NodeClientSpecific::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM));
;
    break;}
case 251:
#line 1298 "SrvParser.y"
{
    NodeClientClassLst.append(new NodeClientSpecific(NodeClientSpecific::CLIENT_VENDOR_SPEC_DATA));
;
    break;}
case 252:
#line 1302 "SrvParser.y"
{
    // Log(Info) << "Constant expression found:" <<string($1)<<LogEnd;
    NodeClientClassLst.append(new NodeConstant(string(yyvsp[0].strval)));
;
    break;}
case 253:
#line 1307 "SrvParser.y"
{
    //Log(Info) << "Constant expression found:" <<string($1)<<LogEnd;
    stringstream convert;
    string snum;
    convert<<yyvsp[0].ival;
    convert>>snum;
    NodeClientClassLst.append(new NodeConstant(snum));
;
    break;}
case 254:
#line 1316 "SrvParser.y"
{
    SPtr<Node> l =  NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    NodeClientClassLst.append(new NodeOperator(NodeOperator::OPERATOR_SUBSTRING,l, yyvsp[-3].ival,yyvsp[-1].ival));
;
    break;}
}

#line 839 "../bison++/bison.cc"
   /* the action file gets copied in in place of this dollarsign  */
  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YY_SrvParser_LSP_NEEDED
  yylsp -= yylen;
#endif

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YY_SrvParser_LSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = YY_SrvParser_LLOC.first_line;
      yylsp->first_column = YY_SrvParser_LLOC.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  YYGOTO(yynewstate);

YYLABEL(yyerrlab)   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++YY_SrvParser_NERRS;

#ifdef YY_SrvParser_ERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      YY_SrvParser_ERROR(msg);
	      free(msg);
	    }
	  else
	    YY_SrvParser_ERROR ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YY_SrvParser_ERROR_VERBOSE */
        YY_SrvParser_ERROR((char*)"parse error");
    }

  YYGOTO(yyerrlab1);
YYLABEL(yyerrlab1)   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (YY_SrvParser_CHAR == YYEOF)
	YYABORT;

#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	fprintf(stderr, "Discarding token %d (%s).\n", YY_SrvParser_CHAR, yytname[yychar1]);
#endif

      YY_SrvParser_CHAR = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;              /* Each real token shifted decrements this */

  YYGOTO(yyerrhandle);

YYLABEL(yyerrdefault)  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) YYGOTO(yydefault);
#endif

YYLABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YY_SrvParser_LSP_NEEDED
  yylsp--;
#endif

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

YYLABEL(yyerrhandle)

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yyerrdefault);

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    YYGOTO(yyerrdefault);

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrpop);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrpop);

  if (yyn == YYFINAL)
    YYACCEPT;

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = YY_SrvParser_LVAL;
#ifdef YY_SrvParser_LSP_NEEDED
  *++yylsp = YY_SrvParser_LLOC;
#endif

  yystate = yyn;
  YYGOTO(yynewstate);
/* end loop, in which YYGOTO may be used. */
  YYENDGOTO
}

/* END */

 #line 1038 "../bison++/bison.cc"
#line 1322 "SrvParser.y"


/////////////////////////////////////////////////////////////////////////////
// programs section

/** 
 * method check whether interface with id=ifaceNr has been already declared
 * 
 * @param ifaceNr 
 * 
 * @return true if interface was not declared
 */
bool SrvParser::IfaceDefined(int ifaceNr)
{
  SPtr<TSrvCfgIface> ptr;
  SrvCfgIfaceLst.first();
  while (ptr=SrvCfgIfaceLst.get())
    if ((ptr->getID())==ifaceNr) {
	Log(Crit) << "Interface with ID=" << ifaceNr << " is already defined." << LogEnd;
	return false;
    }
  return true;
}
    
/** 
 * check whether interface with id=ifaceName has been already declared
 * 
 * @param ifaceName 
 * 
 * @return true, if defined, false otherwise
 */
bool SrvParser::IfaceDefined(string ifaceName)
{
  SPtr<TSrvCfgIface> ptr;
  SrvCfgIfaceLst.first();
  while (ptr=SrvCfgIfaceLst.get())
  {
    string presName=ptr->getName();
    if (presName==ifaceName) {
	Log(Crit) << "Interface " << ifaceName << " is already defined." << LogEnd;
	return false;
    }
  }
  return true;
}

/** 
 * method creates new option for just started interface scope
 * clears all lists except the list of interfaces and adds new group
 * 
 */
bool SrvParser::StartIfaceDeclaration(string ifaceName)
{
    if (!IfaceDefined(ifaceName)) 
	return false;

    SrvCfgIfaceLst.append(new TSrvCfgIface(ifaceName));

    // create new option (representing this interface) on the parser stack
    ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
    SrvCfgAddrClassLst.clear();
    VendorSpec.clear();
    ClientLst.clear();

    return true;
}

/** 
 * method creates new option for just started interface scope
 * clears all lists except the list of interfaces and adds new group
 * 
 */
bool SrvParser::StartIfaceDeclaration(int ifindex)
{
    if (!IfaceDefined(ifindex)) 
	return false;

    SrvCfgIfaceLst.append(new TSrvCfgIface(ifindex));

    // create new option (representing this interface) on the parser stack
    ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
    SrvCfgAddrClassLst.clear();
    VendorSpec.clear();
    ClientLst.clear();

    return true;
}


/** 
 * this method is called after inteface declaration has ended. It creates
 * new interface representation used in SrvCfgMgr. Also removes corresponding
 * element from the parser stack
 * 
 * @return true if everything is ok
 */
bool SrvParser::EndIfaceDeclaration()
{
    // get this interface object
    SPtr<TSrvCfgIface> iface = SrvCfgIfaceLst.getLast();

    // set its options
    SrvCfgIfaceLst.getLast()->setOptions(ParserOptStack.getLast());

    // copy all IA objects
    SPtr<TSrvCfgAddrClass> ptrAddrClass;
    SrvCfgAddrClassLst.first();
    while (ptrAddrClass=SrvCfgAddrClassLst.get())
        iface->addAddrClass(ptrAddrClass);
    SrvCfgAddrClassLst.clear();

    // copy all TA objects
    SPtr<TSrvCfgTA> ta;
    SrvCfgTALst.first();
    while (ta=SrvCfgTALst.get())
        iface->addTA(ta);
    SrvCfgTALst.clear();

    SPtr<TSrvCfgPD> pd;
    SrvCfgPDLst.first();
    while (pd=SrvCfgPDLst.get())
        iface->addPD(pd);
    SrvCfgPDLst.clear();

    iface->addClientExceptionsLst(ClientLst);

    // remove last option (representing this interface) from the parser stack
    ParserOptStack.delLast();

    return true;
}   

void SrvParser::StartClassDeclaration()
{
    ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
    SrvCfgAddrClassLst.append(new TSrvCfgAddrClass());
}

/** 
 * this method is adds new object representig just parsed IA class.
 * 
 * @return true if everything works ok.
 */
bool SrvParser::EndClassDeclaration()
{
    if (!ParserOptStack.getLast()->countPool()) {
        Log(Crit) << "No pools defined for this class." << LogEnd;
        return false;
    }
    //setting interface options on the basis of just read information
    SrvCfgAddrClassLst.getLast()->setOptions(ParserOptStack.getLast());
    ParserOptStack.delLast();

    return true;
}


/** 
 * Just add global options
 * 
 */
void SrvParser::StartTAClassDeclaration()
{
  ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
}

bool SrvParser::EndTAClassDeclaration()
{
    if (!ParserOptStack.getLast()->countPool()) {
        Log(Crit) << "No pools defined for this ta-class." << LogEnd;
        return false;
    }
    // create new object representing just parsed TA and add it to the list
    SPtr<TSrvCfgTA> ptrTA = new TSrvCfgTA();
    ptrTA->setOptions(ParserOptStack.getLast());
    SrvCfgTALst.append(ptrTA);

    // remove temporary parser object for this (just finished) scope
    ParserOptStack.delLast();
    return true;
}

void SrvParser::StartPDDeclaration()
{
    ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
    this->PDLst.clear();
    this->PDPrefix = 0;
}

bool SrvParser::EndPDDeclaration()
{
    if (!this->PDLst.count()) {
        Log(Crit) << "No PD pools defined ." << LogEnd;
        return false;
    }
    if (!this->PDPrefix) {
	Log(Crit) << "PD prefix length not defined or set to 0." << LogEnd;
	return false;
    }
	
    int len = 0;
    this->PDLst.first();
    while ( SPtr<TStationRange> pool = PDLst.get() ) {
	if (!len)
	    len = pool->getPrefixLength();
	if (len!=pool->getPrefixLength()) {
	    Log(Crit) << "Prefix pools with different lengths are not supported. Make sure that all 'pd-pool' uses the same prefix length." << LogEnd;
	    return false;
	}
    }
    if (len>PDPrefix) {
	Log(Crit) << "Clients are supposed to get /" << this->PDPrefix << " prefixes, but pd-pool(s) are only /" << len << " long." << LogEnd;
	return false;
    }
    if (len==PDPrefix) {
        Log(Warning) << "Prefix pool /" << PDPrefix << " defined and clients are supposed to get /" << len << " prefixes. Only ONE client will get prefix" << LogEnd;
    }

    SPtr<TSrvCfgPD> ptrPD = new TSrvCfgPD();
    ParserOptStack.getLast()->setPool(&this->PDLst);
    if (!ptrPD->setOptions(ParserOptStack.getLast(), this->PDPrefix))
	return false;
    SrvCfgPDLst.append(ptrPD);

    // remove temporary parser object for this (just finished) scope
    ParserOptStack.delLast();
    return true;
}

namespace std {
    extern yy_SrvParser_stype yylval;
}

int SrvParser::yylex()
{
    memset(&std::yylval,0, sizeof(std::yylval));
    memset(&this->yylval,0, sizeof(this->yylval));
    int x = this->lex->yylex();
    this->yylval=std::yylval;
    return x;
}

void SrvParser::yyerror(char *m)
{
    Log(Crit) << "Config parse error: line " << lex->lineno() 
              << ", unexpected [" << lex->YYText() << "] token." << LogEnd;
}

SrvParser::~SrvParser() {
    this->ParserOptStack.clear();
    this->SrvCfgIfaceLst.clear();
    this->SrvCfgAddrClassLst.clear();
    this->SrvCfgTALst.clear();
    this->PresentAddrLst.clear();
    this->PresentStringLst.clear();
    this->PresentRangeLst.clear();
}

static char bitMask[]= { 0, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff };

SPtr<TIPv6Addr> SrvParser::getRangeMin(char * addrPacked, int prefix) {
    char packed[16];
    char mask;
    memcpy(packed, addrPacked,16);
    if (prefix%8!=0) {
	mask = bitMask[prefix%8];
	packed[prefix/8] = packed[prefix/8] & mask;
	prefix = (prefix/8 + 1)*8;
    }
    for (int i=prefix/8;i<16; i++) {
	packed[i]=0;
    }
    return new TIPv6Addr(packed, false);
}

SPtr<TIPv6Addr> SrvParser::getRangeMax(char * addrPacked, int prefix){
    char packed[16];
    char mask;
    memcpy(packed, addrPacked,16);
    if (prefix%8!=0) {
	mask = bitMask[prefix%8];
	packed[prefix/8] = packed[prefix/8] | ~mask;
	prefix = (prefix/8 + 1)*8;
    }
    for (int i=prefix/8;i<16; i++) {
	packed[i]=0xff;
    }

    return new TIPv6Addr(packed, false);
}
