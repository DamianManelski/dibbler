#define YY_SrvParser_h_included
#define YY_USE_CLASS

/*  A Bison++ parser, made from SrvParser.y  */

 /* with Bison++ version bison++ Version 1.21.9-1, adapted from GNU bison by coetmeur@icdc.fr
Maintained by Magnus Ekdahl <magnus@debian.org>
  */

#define YY_USE_CLASS

#line 1 "../bison++/bison.cc"
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Bob Corbett and Richard Stallman

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 1, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  

   As a special exception, when this file is copied by Bison++ into a
   Bison++ output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison, and has been in Bison++ since 1.21.9.  

*/

/* HEADER SECTION */
#if defined( _MSDOS ) || defined(MSDOS) || defined(__MSDOS__) 
 #define __MSDOS_AND_ALIKE
#endif

#if defined(_WINDOWS) && defined(_MSC_VER)
 #define __HAVE_NO_ALLOCA
 #define __MSDOS_AND_ALIKE
#endif

#ifndef alloca
 #if defined( __GNUC__)
  #define alloca __builtin_alloca

 #elif (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc)  || defined (__sgi)
  #include <alloca.h>

 #elif defined (__MSDOS_AND_ALIKE)
  #include <malloc.h>
  #ifndef __TURBOC__
   /* MS C runtime lib */
   #define alloca _alloca
  #endif

 #elif defined(_AIX)
  /* pragma must be put before any C/C++ instruction !! */
  #pragma alloca
  #include <malloc.h>

 #elif defined(__hpux)
  #ifdef __cplusplus
   extern "C" {
     void *alloca (unsigned int);
   };
  #else /* not __cplusplus */
   void *alloca ();
  #endif /* not __cplusplus */

 #endif /* not _AIX  not MSDOS, or __TURBOC__ or _AIX, not sparc.  */
#endif /* alloca not defined.  */

#ifdef c_plusplus
 #ifndef __cplusplus
  #define __cplusplus
 #endif
#endif

#ifdef __cplusplus
 #ifndef YY_USE_CLASS
/*#warning "For C++ its recomended to use bison++, otherwise classes won't be generated"*/
 #endif
#else
 #ifndef __STDC__
  #define const
 #endif
 #ifdef YY_USE_CLASS
  #error "This is a C++ header generated by bison++, please use a C++ compiler!"
 #endif
#endif

#include <stdio.h>
#define YYBISON 1  

 #line 88 "../bison++/bison.cc"
#line 3 "SrvParser.y"

#include <iostream>
#include <string>
#include <malloc.h>
#include "DHCPConst.h"
#include "SmartPtr.h"
#include "Container.h"
#include "SrvParser.h"
#include "SrvParsGlobalOpt.h"
#include "SrvParsClassOpt.h"
#include "SrvParsIfaceOpt.h"
#include "OptAddr.h"
#include "OptAddrLst.h"
#include "OptString.h"
#include "SrvCfgTA.h"
#include "SrvCfgPD.h"
#include "SrvCfgAddrClass.h"
#include "SrvCfgIface.h"
#include "SrvCfgOptions.h"
#include "DUID.h"
#include "Logger.h"
#include "FQDN.h"
#include "SrvOptVendorSpec.h"
#include "SrvOptAddrParams.h"
#include "Portable.h"
#include "SrvCfgClientClass.h"
#include "Node.h"
#include "NodeConstant.h"
#include "NodeClientSpecific.h"
#include "NodeOperator.h"
#include <sstream>

#define YY_USE_CLASS
#line 38 "SrvParser.y"

#include "FlexLexer.h"
#define YY_SrvParser_MEMBERS  FlexLexer * lex;                                                     \
List(TSrvParsGlobalOpt) ParserOptStack;    /* list of parsed interfaces/IAs/addrs */ \
List(TSrvCfgIface) SrvCfgIfaceLst;         /* list of SrvCfg interfaces */           \
List(TSrvCfgAddrClass) SrvCfgAddrClassLst; /* list of SrvCfg address classes */      \
List(TSrvCfgTA) SrvCfgTALst;               /* list of SrvCfg TA objects */           \
List(TSrvCfgPD) SrvCfgPDLst;		   /* list of SrvCfg PD objects */           \
List(TSrvCfgClientClass) SrvCfgClientClassLst; /* list of SrvCfgClientClass objs */  \
List(TIPv6Addr) PresentAddrLst;            /* address list (used for DNS,NTP,etc.)*/ \
List(string) PresentStringLst;             /* string list */                         \
List(Node) NodeClientClassLst;             /* Node list */                           \
List(TFQDN) PresentFQDNLst;                                                          \
SPtr<TIPv6Addr> addr;                                                                \
List(TStationRange) PresentRangeLst;                                                 \
List(TStationRange) PDLst;                                                           \
List(TSrvOptVendorSpec) VendorSpec;			                             \
List(TSrvCfgOptions) ClientLst;                                                      \
int PDPrefix;                                                                        \
bool IfaceDefined(int ifaceNr);                                                      \
bool IfaceDefined(string ifaceName);                                                 \
bool StartIfaceDeclaration(string iface);                                            \
bool StartIfaceDeclaration(int ifindex);                                             \
bool EndIfaceDeclaration();                                                          \
void StartClassDeclaration();                                                        \
bool EndClassDeclaration();                                                          \
SPtr<TIPv6Addr> getRangeMin(char * addrPacked, int prefix);                          \
SPtr<TIPv6Addr> getRangeMax(char * addrPacked, int prefix);                          \
void StartTAClassDeclaration();                                                      \
bool EndTAClassDeclaration();                                                        \
void StartPDDeclaration();                                                           \
bool EndPDDeclaration();                                                             \
virtual ~SrvParser();
#define YY_SrvParser_CONSTRUCTOR_PARAM  yyFlexLexer * lex
#define YY_SrvParser_CONSTRUCTOR_CODE                                                           \
    ParserOptStack.append(new TSrvParsGlobalOpt());                               \
    this->lex = lex;

#line 81 "SrvParser.y"
typedef union    
{
    unsigned int ival;
    char *strval;
    struct SDuid
    {
        int length;
        char* duid;
    } duidval;
    char addrval[16];
} yy_SrvParser_stype;
#define YY_SrvParser_STYPE yy_SrvParser_stype

#line 88 "../bison++/bison.cc"
/* %{ and %header{ and %union, during decl */
#define YY_SrvParser_BISON 1

#ifndef YY_SrvParser_COMPATIBILITY
 #ifndef YY_USE_CLASS
  #define  YY_SrvParser_COMPATIBILITY 1
 #else
  #define  YY_SrvParser_COMPATIBILITY 0
 #endif
#endif

#if YY_SrvParser_COMPATIBILITY != 0
 /* backward compatibility */
 #ifdef YYLTYPE
  #ifndef YY_SrvParser_LTYPE
   #define YY_SrvParser_LTYPE YYLTYPE
  #endif
 #endif
/* Testing alternative bison solution
   /#ifdef YYSTYPE*/
#ifndef YY_SrvParser_STYPE 
   #define YY_SrvParser_STYPE YYSTYPE
#endif
/*#endif*/
 #ifdef YYDEBUG
  #ifndef YY_SrvParser_DEBUG
   #define  YY_SrvParser_DEBUG YYDEBUG
  #endif
 #endif
 
 /* use goto to be compatible */
 #ifndef YY_SrvParser_USE_GOTO
  #define YY_SrvParser_USE_GOTO 1
 #endif
#endif

/* use no goto to be clean in C++ */
#ifndef YY_SrvParser_USE_GOTO
 #define YY_SrvParser_USE_GOTO 0
#endif

#ifndef YY_SrvParser_PURE

 #line 130 "../bison++/bison.cc"

#line 130 "../bison++/bison.cc"
/*  YY_SrvParser_PURE */
#endif

/* section apres lecture def, avant lecture grammaire S2 */

 #line 134 "../bison++/bison.cc"

#line 134 "../bison++/bison.cc"
/* prefix */
#ifndef YY_SrvParser_DEBUG

 #line 136 "../bison++/bison.cc"
#define YY_SrvParser_DEBUG 1

#line 136 "../bison++/bison.cc"
/* YY_SrvParser_DEBUG */
#endif


#ifndef YY_SrvParser_LSP_NEEDED

 #line 141 "../bison++/bison.cc"

#line 141 "../bison++/bison.cc"
 /* YY_SrvParser_LSP_NEEDED*/
#endif



/* DEFAULT LTYPE*/
#ifdef YY_SrvParser_LSP_NEEDED
#ifndef YY_SrvParser_LTYPE
#ifndef BISON_YYLTYPE_ISDECLARED
#define BISON_YYLTYPE_ISDECLARED
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#endif
#define YY_SrvParser_LTYPE yyltype
#endif
#endif
/* DEFAULT STYPE*/
      /* We used to use `unsigned long' as YY_SrvParser_STYPE on MSDOS,
	 but it seems better to be consistent.
	 Most programs should declare their own type anyway.  */

#ifndef YY_SrvParser_STYPE
#define YY_SrvParser_STYPE int
#endif
/* DEFAULT MISCELANEOUS */
#ifndef YY_SrvParser_PARSE
#define YY_SrvParser_PARSE yyparse
#endif
#ifndef YY_SrvParser_LEX
#define YY_SrvParser_LEX yylex
#endif
#ifndef YY_SrvParser_LVAL
#define YY_SrvParser_LVAL yylval
#endif
#ifndef YY_SrvParser_LLOC
#define YY_SrvParser_LLOC yylloc
#endif
#ifndef YY_SrvParser_CHAR
#define YY_SrvParser_CHAR yychar
#endif
#ifndef YY_SrvParser_NERRS
#define YY_SrvParser_NERRS yynerrs
#endif
#ifndef YY_SrvParser_DEBUG_FLAG
#define YY_SrvParser_DEBUG_FLAG yydebug
#endif
#ifndef YY_SrvParser_ERROR
#define YY_SrvParser_ERROR yyerror
#endif

#ifndef YY_SrvParser_PARSE_PARAM
 #ifndef YY_USE_CLASS
  #ifdef YYPARSE_PARAM
   #define YY_SrvParser_PARSE_PARAM void* YYPARSE_PARAM 
  #else
   #ifndef __STDC__
    #ifndef __cplusplus
     #define YY_SrvParser_PARSE_PARAM
    #endif
   #endif
  #endif
 #endif
 #ifndef YY_SrvParser_PARSE_PARAM
  #define YY_SrvParser_PARSE_PARAM void
 #endif
#endif

#if YY_SrvParser_COMPATIBILITY != 0
/* backward compatibility */
#ifdef YY_SrvParser_LTYPE
#ifndef YYLTYPE
#define YYLTYPE YY_SrvParser_LTYPE
#else
/* WARNING obsolete !!! user defined YYLTYPE not reported into generated header */
#endif
#endif

/* Removed due to bison compabilityproblems
/#ifndef YYSTYPE
/#define YYSTYPE YY_SrvParser_STYPE
/#else*/
/* WARNING obsolete !!! user defined YYSTYPE not reported into generated header */
/*#endif*/

#ifdef YY_SrvParser_PURE
#  ifndef YYPURE
#    define YYPURE YY_SrvParser_PURE
#  endif
#endif

#ifdef YY_SrvParser_DEBUG
#  ifndef YYDEBUG
#    define YYDEBUG YY_SrvParser_DEBUG 
#  endif
#endif

#ifndef YY_SrvParser_ERROR_VERBOSE
 #ifdef YYERROR_VERBOSE
  #define YY_SrvParser_ERROR_VERBOSE YYERROR_VERBOSE
 #endif
#endif

#ifndef YY_SrvParser_LSP_NEEDED
#  ifdef YYLSP_NEEDED
#    define YY_SrvParser_LSP_NEEDED YYLSP_NEEDED
#  endif
#endif

#endif

#ifndef YY_USE_CLASS
/* TOKEN C */

 #line 263 "../bison++/bison.cc"
#define	IFACE_	258
#define	RELAY_	259
#define	IFACE_ID_	260
#define	IFACE_ID_ORDER_	261
#define	CLASS_	262
#define	TACLASS_	263
#define	LOGNAME_	264
#define	LOGLEVEL_	265
#define	LOGMODE_	266
#define	LOGCOLORS_	267
#define	WORKDIR_	268
#define	OPTION_	269
#define	DNS_SERVER_	270
#define	DOMAIN_	271
#define	NTP_SERVER_	272
#define	TIME_ZONE_	273
#define	SIP_SERVER_	274
#define	SIP_DOMAIN_	275
#define	NIS_SERVER_	276
#define	NIS_DOMAIN_	277
#define	NISP_SERVER_	278
#define	NISP_DOMAIN_	279
#define	FQDN_	280
#define	ACCEPT_UNKNOWN_FQDN_	281
#define	LIFETIME_	282
#define	ACCEPT_ONLY_	283
#define	REJECT_CLIENTS_	284
#define	POOL_	285
#define	SHARE_	286
#define	T1_	287
#define	T2_	288
#define	PREF_TIME_	289
#define	VALID_TIME_	290
#define	UNICAST_	291
#define	PREFERENCE_	292
#define	RAPID_COMMIT_	293
#define	IFACE_MAX_LEASE_	294
#define	CLASS_MAX_LEASE_	295
#define	CLNT_MAX_LEASE_	296
#define	STATELESS_	297
#define	CACHE_SIZE_	298
#define	PDCLASS_	299
#define	PD_LENGTH_	300
#define	PD_POOL_	301
#define	VENDOR_SPEC_	302
#define	CLIENT_	303
#define	DUID_KEYWORD_	304
#define	REMOTE_ID_	305
#define	ADDRESS_	306
#define	GUESS_MODE_	307
#define	INACTIVE_MODE_	308
#define	EXPERIMENTAL_	309
#define	ADDR_PARAMS_	310
#define	DS_LITE_TUNNEL_	311
#define	REMOTE_AUTOCONF_NEIGHBORS_	312
#define	AUTH_METHOD_	313
#define	AUTH_LIFETIME_	314
#define	AUTH_KEY_LEN_	315
#define	DIGEST_NONE_	316
#define	DIGEST_PLAIN_	317
#define	DIGEST_HMAC_MD5_	318
#define	DIGEST_HMAC_SHA1_	319
#define	DIGEST_HMAC_SHA224_	320
#define	DIGEST_HMAC_SHA256_	321
#define	DIGEST_HMAC_SHA384_	322
#define	DIGEST_HMAC_SHA512_	323
#define	ACCEPT_LEASEQUERY_	324
#define	CLIENT_CLASS_	325
#define	MATCH_IF_	326
#define	EQ_	327
#define	AND_	328
#define	OR_	329
#define	CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_	330
#define	CLIENT_VENDOR_SPEC_DATA_	331
#define	CLIENT_VENDOR_CLASS_EN_	332
#define	CLIENT_VENDOR_CLASS_DATA_	333
#define	ALLOW_	334
#define	DENY_	335
#define	SUBSTRING_	336
#define	STRING_KEYWORD_	337
#define	ADDRESS_LIST_	338
#define	CONTAIN_	339
#define	STRING_	340
#define	HEXNUMBER_	341
#define	INTNUMBER_	342
#define	IPV6ADDR_	343
#define	DUID_	344


#line 263 "../bison++/bison.cc"
 /* #defines tokens */
#else
/* CLASS */
#ifndef YY_SrvParser_CLASS
#define YY_SrvParser_CLASS SrvParser
#endif
#ifndef YY_SrvParser_INHERIT
#define YY_SrvParser_INHERIT
#endif
#ifndef YY_SrvParser_MEMBERS
#define YY_SrvParser_MEMBERS 
#endif
#ifndef YY_SrvParser_LEX_BODY
#define YY_SrvParser_LEX_BODY  
#endif
#ifndef YY_SrvParser_ERROR_BODY
#define YY_SrvParser_ERROR_BODY  
#endif
#ifndef YY_SrvParser_CONSTRUCTOR_PARAM
#define YY_SrvParser_CONSTRUCTOR_PARAM
#endif
#ifndef YY_SrvParser_CONSTRUCTOR_CODE
#define YY_SrvParser_CONSTRUCTOR_CODE
#endif
#ifndef YY_SrvParser_CONSTRUCTOR_INIT
#define YY_SrvParser_CONSTRUCTOR_INIT
#endif
/* choose between enum and const */
#ifndef YY_SrvParser_USE_CONST_TOKEN
#define YY_SrvParser_USE_CONST_TOKEN 0
/* yes enum is more compatible with flex,  */
/* so by default we use it */ 
#endif
#if YY_SrvParser_USE_CONST_TOKEN != 0
#ifndef YY_SrvParser_ENUM_TOKEN
#define YY_SrvParser_ENUM_TOKEN yy_SrvParser_enum_token
#endif
#endif

class YY_SrvParser_CLASS YY_SrvParser_INHERIT
{
public: 
#if YY_SrvParser_USE_CONST_TOKEN != 0
/* static const int token ... */

 #line 307 "../bison++/bison.cc"
static const int IFACE_;
static const int RELAY_;
static const int IFACE_ID_;
static const int IFACE_ID_ORDER_;
static const int CLASS_;
static const int TACLASS_;
static const int LOGNAME_;
static const int LOGLEVEL_;
static const int LOGMODE_;
static const int LOGCOLORS_;
static const int WORKDIR_;
static const int OPTION_;
static const int DNS_SERVER_;
static const int DOMAIN_;
static const int NTP_SERVER_;
static const int TIME_ZONE_;
static const int SIP_SERVER_;
static const int SIP_DOMAIN_;
static const int NIS_SERVER_;
static const int NIS_DOMAIN_;
static const int NISP_SERVER_;
static const int NISP_DOMAIN_;
static const int FQDN_;
static const int ACCEPT_UNKNOWN_FQDN_;
static const int LIFETIME_;
static const int ACCEPT_ONLY_;
static const int REJECT_CLIENTS_;
static const int POOL_;
static const int SHARE_;
static const int T1_;
static const int T2_;
static const int PREF_TIME_;
static const int VALID_TIME_;
static const int UNICAST_;
static const int PREFERENCE_;
static const int RAPID_COMMIT_;
static const int IFACE_MAX_LEASE_;
static const int CLASS_MAX_LEASE_;
static const int CLNT_MAX_LEASE_;
static const int STATELESS_;
static const int CACHE_SIZE_;
static const int PDCLASS_;
static const int PD_LENGTH_;
static const int PD_POOL_;
static const int VENDOR_SPEC_;
static const int CLIENT_;
static const int DUID_KEYWORD_;
static const int REMOTE_ID_;
static const int ADDRESS_;
static const int GUESS_MODE_;
static const int INACTIVE_MODE_;
static const int EXPERIMENTAL_;
static const int ADDR_PARAMS_;
static const int DS_LITE_TUNNEL_;
static const int REMOTE_AUTOCONF_NEIGHBORS_;
static const int AUTH_METHOD_;
static const int AUTH_LIFETIME_;
static const int AUTH_KEY_LEN_;
static const int DIGEST_NONE_;
static const int DIGEST_PLAIN_;
static const int DIGEST_HMAC_MD5_;
static const int DIGEST_HMAC_SHA1_;
static const int DIGEST_HMAC_SHA224_;
static const int DIGEST_HMAC_SHA256_;
static const int DIGEST_HMAC_SHA384_;
static const int DIGEST_HMAC_SHA512_;
static const int ACCEPT_LEASEQUERY_;
static const int CLIENT_CLASS_;
static const int MATCH_IF_;
static const int EQ_;
static const int AND_;
static const int OR_;
static const int CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_;
static const int CLIENT_VENDOR_SPEC_DATA_;
static const int CLIENT_VENDOR_CLASS_EN_;
static const int CLIENT_VENDOR_CLASS_DATA_;
static const int ALLOW_;
static const int DENY_;
static const int SUBSTRING_;
static const int STRING_KEYWORD_;
static const int ADDRESS_LIST_;
static const int CONTAIN_;
static const int STRING_;
static const int HEXNUMBER_;
static const int INTNUMBER_;
static const int IPV6ADDR_;
static const int DUID_;


#line 307 "../bison++/bison.cc"
 /* decl const */
#else
enum YY_SrvParser_ENUM_TOKEN { YY_SrvParser_NULL_TOKEN=0

 #line 310 "../bison++/bison.cc"
	,IFACE_=258
	,RELAY_=259
	,IFACE_ID_=260
	,IFACE_ID_ORDER_=261
	,CLASS_=262
	,TACLASS_=263
	,LOGNAME_=264
	,LOGLEVEL_=265
	,LOGMODE_=266
	,LOGCOLORS_=267
	,WORKDIR_=268
	,OPTION_=269
	,DNS_SERVER_=270
	,DOMAIN_=271
	,NTP_SERVER_=272
	,TIME_ZONE_=273
	,SIP_SERVER_=274
	,SIP_DOMAIN_=275
	,NIS_SERVER_=276
	,NIS_DOMAIN_=277
	,NISP_SERVER_=278
	,NISP_DOMAIN_=279
	,FQDN_=280
	,ACCEPT_UNKNOWN_FQDN_=281
	,LIFETIME_=282
	,ACCEPT_ONLY_=283
	,REJECT_CLIENTS_=284
	,POOL_=285
	,SHARE_=286
	,T1_=287
	,T2_=288
	,PREF_TIME_=289
	,VALID_TIME_=290
	,UNICAST_=291
	,PREFERENCE_=292
	,RAPID_COMMIT_=293
	,IFACE_MAX_LEASE_=294
	,CLASS_MAX_LEASE_=295
	,CLNT_MAX_LEASE_=296
	,STATELESS_=297
	,CACHE_SIZE_=298
	,PDCLASS_=299
	,PD_LENGTH_=300
	,PD_POOL_=301
	,VENDOR_SPEC_=302
	,CLIENT_=303
	,DUID_KEYWORD_=304
	,REMOTE_ID_=305
	,ADDRESS_=306
	,GUESS_MODE_=307
	,INACTIVE_MODE_=308
	,EXPERIMENTAL_=309
	,ADDR_PARAMS_=310
	,DS_LITE_TUNNEL_=311
	,REMOTE_AUTOCONF_NEIGHBORS_=312
	,AUTH_METHOD_=313
	,AUTH_LIFETIME_=314
	,AUTH_KEY_LEN_=315
	,DIGEST_NONE_=316
	,DIGEST_PLAIN_=317
	,DIGEST_HMAC_MD5_=318
	,DIGEST_HMAC_SHA1_=319
	,DIGEST_HMAC_SHA224_=320
	,DIGEST_HMAC_SHA256_=321
	,DIGEST_HMAC_SHA384_=322
	,DIGEST_HMAC_SHA512_=323
	,ACCEPT_LEASEQUERY_=324
	,CLIENT_CLASS_=325
	,MATCH_IF_=326
	,EQ_=327
	,AND_=328
	,OR_=329
	,CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_=330
	,CLIENT_VENDOR_SPEC_DATA_=331
	,CLIENT_VENDOR_CLASS_EN_=332
	,CLIENT_VENDOR_CLASS_DATA_=333
	,ALLOW_=334
	,DENY_=335
	,SUBSTRING_=336
	,STRING_KEYWORD_=337
	,ADDRESS_LIST_=338
	,CONTAIN_=339
	,STRING_=340
	,HEXNUMBER_=341
	,INTNUMBER_=342
	,IPV6ADDR_=343
	,DUID_=344


#line 310 "../bison++/bison.cc"
 /* enum token */
     }; /* end of enum declaration */
#endif
public:
 int YY_SrvParser_PARSE (YY_SrvParser_PARSE_PARAM);
 virtual void YY_SrvParser_ERROR(char *msg) YY_SrvParser_ERROR_BODY;
#ifdef YY_SrvParser_PURE
#ifdef YY_SrvParser_LSP_NEEDED
 virtual int  YY_SrvParser_LEX (YY_SrvParser_STYPE *YY_SrvParser_LVAL,YY_SrvParser_LTYPE *YY_SrvParser_LLOC) YY_SrvParser_LEX_BODY;
#else
 virtual int  YY_SrvParser_LEX (YY_SrvParser_STYPE *YY_SrvParser_LVAL) YY_SrvParser_LEX_BODY;
#endif
#else
 virtual int YY_SrvParser_LEX() YY_SrvParser_LEX_BODY;
 YY_SrvParser_STYPE YY_SrvParser_LVAL;
#ifdef YY_SrvParser_LSP_NEEDED
 YY_SrvParser_LTYPE YY_SrvParser_LLOC;
#endif
 int   YY_SrvParser_NERRS;
 int    YY_SrvParser_CHAR;
#endif
#if YY_SrvParser_DEBUG != 0
 int YY_SrvParser_DEBUG_FLAG;   /*  nonzero means print parse trace     */
#endif
public:
 YY_SrvParser_CLASS(YY_SrvParser_CONSTRUCTOR_PARAM);
public:
 YY_SrvParser_MEMBERS 
};
/* other declare folow */
#if YY_SrvParser_USE_CONST_TOKEN != 0

 #line 341 "../bison++/bison.cc"
const int YY_SrvParser_CLASS::IFACE_=258;
const int YY_SrvParser_CLASS::RELAY_=259;
const int YY_SrvParser_CLASS::IFACE_ID_=260;
const int YY_SrvParser_CLASS::IFACE_ID_ORDER_=261;
const int YY_SrvParser_CLASS::CLASS_=262;
const int YY_SrvParser_CLASS::TACLASS_=263;
const int YY_SrvParser_CLASS::LOGNAME_=264;
const int YY_SrvParser_CLASS::LOGLEVEL_=265;
const int YY_SrvParser_CLASS::LOGMODE_=266;
const int YY_SrvParser_CLASS::LOGCOLORS_=267;
const int YY_SrvParser_CLASS::WORKDIR_=268;
const int YY_SrvParser_CLASS::OPTION_=269;
const int YY_SrvParser_CLASS::DNS_SERVER_=270;
const int YY_SrvParser_CLASS::DOMAIN_=271;
const int YY_SrvParser_CLASS::NTP_SERVER_=272;
const int YY_SrvParser_CLASS::TIME_ZONE_=273;
const int YY_SrvParser_CLASS::SIP_SERVER_=274;
const int YY_SrvParser_CLASS::SIP_DOMAIN_=275;
const int YY_SrvParser_CLASS::NIS_SERVER_=276;
const int YY_SrvParser_CLASS::NIS_DOMAIN_=277;
const int YY_SrvParser_CLASS::NISP_SERVER_=278;
const int YY_SrvParser_CLASS::NISP_DOMAIN_=279;
const int YY_SrvParser_CLASS::FQDN_=280;
const int YY_SrvParser_CLASS::ACCEPT_UNKNOWN_FQDN_=281;
const int YY_SrvParser_CLASS::LIFETIME_=282;
const int YY_SrvParser_CLASS::ACCEPT_ONLY_=283;
const int YY_SrvParser_CLASS::REJECT_CLIENTS_=284;
const int YY_SrvParser_CLASS::POOL_=285;
const int YY_SrvParser_CLASS::SHARE_=286;
const int YY_SrvParser_CLASS::T1_=287;
const int YY_SrvParser_CLASS::T2_=288;
const int YY_SrvParser_CLASS::PREF_TIME_=289;
const int YY_SrvParser_CLASS::VALID_TIME_=290;
const int YY_SrvParser_CLASS::UNICAST_=291;
const int YY_SrvParser_CLASS::PREFERENCE_=292;
const int YY_SrvParser_CLASS::RAPID_COMMIT_=293;
const int YY_SrvParser_CLASS::IFACE_MAX_LEASE_=294;
const int YY_SrvParser_CLASS::CLASS_MAX_LEASE_=295;
const int YY_SrvParser_CLASS::CLNT_MAX_LEASE_=296;
const int YY_SrvParser_CLASS::STATELESS_=297;
const int YY_SrvParser_CLASS::CACHE_SIZE_=298;
const int YY_SrvParser_CLASS::PDCLASS_=299;
const int YY_SrvParser_CLASS::PD_LENGTH_=300;
const int YY_SrvParser_CLASS::PD_POOL_=301;
const int YY_SrvParser_CLASS::VENDOR_SPEC_=302;
const int YY_SrvParser_CLASS::CLIENT_=303;
const int YY_SrvParser_CLASS::DUID_KEYWORD_=304;
const int YY_SrvParser_CLASS::REMOTE_ID_=305;
const int YY_SrvParser_CLASS::ADDRESS_=306;
const int YY_SrvParser_CLASS::GUESS_MODE_=307;
const int YY_SrvParser_CLASS::INACTIVE_MODE_=308;
const int YY_SrvParser_CLASS::EXPERIMENTAL_=309;
const int YY_SrvParser_CLASS::ADDR_PARAMS_=310;
const int YY_SrvParser_CLASS::DS_LITE_TUNNEL_=311;
const int YY_SrvParser_CLASS::REMOTE_AUTOCONF_NEIGHBORS_=312;
const int YY_SrvParser_CLASS::AUTH_METHOD_=313;
const int YY_SrvParser_CLASS::AUTH_LIFETIME_=314;
const int YY_SrvParser_CLASS::AUTH_KEY_LEN_=315;
const int YY_SrvParser_CLASS::DIGEST_NONE_=316;
const int YY_SrvParser_CLASS::DIGEST_PLAIN_=317;
const int YY_SrvParser_CLASS::DIGEST_HMAC_MD5_=318;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA1_=319;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA224_=320;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA256_=321;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA384_=322;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA512_=323;
const int YY_SrvParser_CLASS::ACCEPT_LEASEQUERY_=324;
const int YY_SrvParser_CLASS::CLIENT_CLASS_=325;
const int YY_SrvParser_CLASS::MATCH_IF_=326;
const int YY_SrvParser_CLASS::EQ_=327;
const int YY_SrvParser_CLASS::AND_=328;
const int YY_SrvParser_CLASS::OR_=329;
const int YY_SrvParser_CLASS::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_=330;
const int YY_SrvParser_CLASS::CLIENT_VENDOR_SPEC_DATA_=331;
const int YY_SrvParser_CLASS::CLIENT_VENDOR_CLASS_EN_=332;
const int YY_SrvParser_CLASS::CLIENT_VENDOR_CLASS_DATA_=333;
const int YY_SrvParser_CLASS::ALLOW_=334;
const int YY_SrvParser_CLASS::DENY_=335;
const int YY_SrvParser_CLASS::SUBSTRING_=336;
const int YY_SrvParser_CLASS::STRING_KEYWORD_=337;
const int YY_SrvParser_CLASS::ADDRESS_LIST_=338;
const int YY_SrvParser_CLASS::CONTAIN_=339;
const int YY_SrvParser_CLASS::STRING_=340;
const int YY_SrvParser_CLASS::HEXNUMBER_=341;
const int YY_SrvParser_CLASS::INTNUMBER_=342;
const int YY_SrvParser_CLASS::IPV6ADDR_=343;
const int YY_SrvParser_CLASS::DUID_=344;


#line 341 "../bison++/bison.cc"
 /* const YY_SrvParser_CLASS::token */
#endif
/*apres const  */
YY_SrvParser_CLASS::YY_SrvParser_CLASS(YY_SrvParser_CONSTRUCTOR_PARAM) YY_SrvParser_CONSTRUCTOR_INIT
{
#if YY_SrvParser_DEBUG != 0
YY_SrvParser_DEBUG_FLAG=0;
#endif
YY_SrvParser_CONSTRUCTOR_CODE;
}
#endif

 #line 352 "../bison++/bison.cc"


#define	YYFINAL		388
#define	YYFLAG		-32768
#define	YYNTBASE	97

#define YYTRANSLATE(x) ((unsigned)(x) <= 344 ? yytranslate[x] : 207)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,    95,
    96,     2,     2,    93,    92,     2,    94,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    90,     2,    91,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89
};

#if YY_SrvParser_DEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     5,     7,    10,    13,    15,    17,    19,
    21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
    41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
    61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
    81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
   101,   103,   104,   111,   112,   119,   121,   124,   126,   128,
   131,   134,   135,   143,   144,   154,   156,   159,   161,   163,
   165,   167,   169,   171,   173,   175,   177,   179,   181,   183,
   185,   187,   189,   191,   194,   195,   201,   203,   206,   207,
   213,   215,   218,   220,   222,   224,   226,   228,   230,   232,
   234,   235,   241,   243,   246,   248,   250,   252,   254,   256,
   258,   260,   262,   265,   268,   271,   274,   277,   280,   283,
   286,   289,   292,   294,   298,   302,   306,   312,   318,   320,
   322,   324,   328,   332,   338,   340,   344,   346,   350,   354,
   358,   364,   368,   370,   374,   378,   384,   386,   390,   394,
   400,   401,   405,   406,   410,   411,   415,   416,   420,   423,
   426,   431,   434,   439,   442,   445,   450,   453,   458,   461,
   464,   467,   471,   475,   480,   485,   486,   492,   497,   498,
   503,   506,   509,   512,   515,   518,   521,   524,   527,   530,
   532,   534,   536,   538,   541,   544,   546,   549,   552,   555,
   558,   561,   564,   566,   568,   570,   572,   574,   576,   578,
   580,   582,   584,   586,   588,   591,   594,   595,   600,   601,
   606,   607,   612,   616,   617,   622,   623,   628,   629,   634,
   635,   641,   642,   649,   651,   652,   657,   658,   663,   667,
   671,   675,   676,   681,   682,   689,   692,   693,   699,   705,
   711,   717,   719,   721,   723,   725
};

static const short yyrhs[] = {    98,
     0,     0,    99,     0,   101,     0,    98,    99,     0,    98,
   101,     0,   100,     0,   161,     0,   160,     0,   162,     0,
   163,     0,   164,     0,   165,     0,   170,     0,   122,     0,
   123,     0,   124,     0,   168,     0,   169,     0,   166,     0,
   202,     0,   174,     0,   172,     0,   173,     0,   171,     0,
   157,     0,   159,     0,   158,     0,   156,     0,   147,     0,
   177,     0,   179,     0,   181,     0,   183,     0,   184,     0,
   186,     0,   188,     0,   192,     0,   193,     0,   197,     0,
   195,     0,   198,     0,   150,     0,   151,     0,   199,     0,
   152,     0,   154,     0,   118,     0,   200,     0,   105,     0,
   167,     0,     0,     3,    85,    90,   102,   104,    91,     0,
     0,     3,   126,    90,   103,   104,    91,     0,   100,     0,
   104,   100,     0,   111,     0,   114,     0,   104,   114,     0,
   104,   111,     0,     0,    48,    49,    89,    90,   106,   108,
    91,     0,     0,    48,    50,   126,    92,    89,    90,   107,
   108,    91,     0,   109,     0,   108,   109,     0,   177,     0,
   179,     0,   181,     0,   183,     0,   184,     0,   186,     0,
   193,     0,   197,     0,   195,     0,   198,     0,   199,     0,
   200,     0,   152,     0,   150,     0,   151,     0,   110,     0,
    51,    88,     0,     0,     7,    90,   112,   113,    91,     0,
   174,     0,   113,   174,     0,     0,     8,    90,   115,   116,
    91,     0,   117,     0,   116,   117,     0,   142,     0,   143,
     0,   137,     0,   148,     0,   133,     0,   135,     0,   175,
     0,   176,     0,     0,    44,    90,   119,   120,    91,     0,
   121,     0,   121,   120,     0,   141,     0,   139,     0,   143,
     0,   142,     0,   145,     0,   146,     0,   175,     0,   176,
     0,    58,    61,     0,    58,    62,     0,    58,    63,     0,
    58,    64,     0,    58,    65,     0,    58,    66,     0,    58,
    67,     0,    58,    68,     0,    59,   126,     0,    60,   126,
     0,    85,     0,    85,    92,    89,     0,    85,    92,    88,
     0,   125,    93,    85,     0,   125,    93,    85,    92,    89,
     0,   125,    93,    85,    92,    88,     0,    86,     0,    87,
     0,    88,     0,   127,    93,    88,     0,   126,    92,    89,
     0,   128,    93,   126,    92,    89,     0,    85,     0,   129,
    93,    85,     0,    88,     0,    88,    92,    88,     0,    88,
    94,    87,     0,   130,    93,    88,     0,   130,    93,    88,
    92,    88,     0,    88,    94,    87,     0,    88,     0,    88,
    92,    88,     0,   132,    93,    88,     0,   132,    93,    88,
    92,    88,     0,    89,     0,    89,    92,    89,     0,   132,
    93,    89,     0,   132,    93,    89,    92,    89,     0,     0,
    29,   134,   132,     0,     0,    28,   136,   132,     0,     0,
    30,   138,   130,     0,     0,    46,   140,   131,     0,    45,
   126,     0,    34,   126,     0,    34,   126,    92,   126,     0,
    35,   126,     0,    35,   126,    92,   126,     0,    31,   126,
     0,    32,   126,     0,    32,   126,    92,   126,     0,    33,
   126,     0,    33,   126,    92,   126,     0,    41,   126,     0,
    40,   126,     0,    55,   126,     0,    14,    56,    88,     0,
    14,    56,    85,     0,    14,   126,    92,    89,     0,    14,
   126,    51,    88,     0,     0,    14,   126,    83,   153,   127,
     0,    14,   126,    82,    85,     0,     0,    14,    57,   155,
   127,     0,    39,   126,     0,    36,    88,     0,    38,   126,
     0,    37,   126,     0,    10,   126,     0,    11,    85,     0,
     9,    85,     0,    12,   126,     0,    13,    85,     0,    42,
     0,    52,     0,    53,     0,    54,     0,     6,    85,     0,
    43,   126,     0,    69,     0,    69,   126,     0,     4,    85,
     0,     4,   126,     0,     5,   126,     0,     5,    89,     0,
     5,    85,     0,   142,     0,   143,     0,   137,     0,   144,
     0,   145,     0,   146,     0,   133,     0,   135,     0,   148,
     0,   149,     0,   175,     0,   176,     0,    79,    85,     0,
    80,    85,     0,     0,    14,    15,   178,   127,     0,     0,
    14,    16,   180,   129,     0,     0,    14,    17,   182,   127,
     0,    14,    18,    85,     0,     0,    14,    19,   185,   127,
     0,     0,    14,    20,   187,   129,     0,     0,    14,    25,
   189,   125,     0,     0,    14,    25,    87,   190,   125,     0,
     0,    14,    25,    87,    87,   191,   125,     0,    26,     0,
     0,    14,    21,   194,   127,     0,     0,    14,    23,   196,
   127,     0,    14,    22,    85,     0,    14,    24,    85,     0,
    14,    27,   126,     0,     0,    14,    47,   201,   128,     0,
     0,    70,    85,    90,   203,   204,    91,     0,    71,   205,
     0,     0,    95,   206,    84,   206,    96,     0,    95,   206,
    72,   206,    96,     0,    95,   205,    73,   205,    96,     0,
    95,   205,    74,   205,    96,     0,    75,     0,    76,     0,
    85,     0,   126,     0,    81,    95,   206,    93,   126,    93,
   126,    96,     0
};

#endif

#if (YY_SrvParser_DEBUG != 0) || defined(YY_SrvParser_ERROR_VERBOSE) 
static const short yyrline[] = { 0,
   140,   141,   145,   146,   147,   148,   152,   153,   154,   155,
   156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
   166,   172,   173,   174,   175,   176,   177,   178,   179,   180,
   181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
   191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
   201,   206,   211,   219,   224,   230,   231,   232,   233,   234,
   235,   239,   245,   253,   259,   268,   269,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   291,   300,   305,   313,   314,   319,   322,
   330,   331,   334,   335,   336,   337,   338,   339,   340,   341,
   345,   348,   356,   357,   360,   361,   362,   363,   364,   365,
   366,   367,   375,   376,   377,   378,   379,   380,   381,   382,
   386,   390,   398,   403,   410,   417,   422,   429,   439,   440,
   444,   448,   455,   460,   468,   469,   473,   477,   486,   502,
   506,   518,   541,   545,   554,   558,   567,   572,   582,   587,
   601,   605,   611,   615,   621,   625,   631,   634,   639,   646,
   651,   659,   664,   672,   684,   689,   697,   702,   710,   717,
   724,   737,   746,   754,   760,   768,   772,   777,   785,   796,
   805,   812,   819,   834,   846,   852,   857,   864,   870,   877,
   884,   891,   897,   904,   925,   932,   937,   956,   960,   967,
   972,   977,   985,   986,   987,   988,   989,   990,   991,   992,
   993,   994,   995,   996,  1000,  1029,  1062,  1066,  1075,  1078,
  1087,  1091,  1100,  1110,  1113,  1122,  1125,  1135,  1143,  1146,
  1154,  1158,  1166,  1173,  1183,  1186,  1195,  1198,  1207,  1217,
  1227,  1234,  1237,  1244,  1247,  1257,  1263,  1263,  1271,  1280,
  1289,  1300,  1304,  1308,  1313,  1322
};

static const char * const yytname[] = {   "$","error","$illegal.","IFACE_","RELAY_",
"IFACE_ID_","IFACE_ID_ORDER_","CLASS_","TACLASS_","LOGNAME_","LOGLEVEL_","LOGMODE_",
"LOGCOLORS_","WORKDIR_","OPTION_","DNS_SERVER_","DOMAIN_","NTP_SERVER_","TIME_ZONE_",
"SIP_SERVER_","SIP_DOMAIN_","NIS_SERVER_","NIS_DOMAIN_","NISP_SERVER_","NISP_DOMAIN_",
"FQDN_","ACCEPT_UNKNOWN_FQDN_","LIFETIME_","ACCEPT_ONLY_","REJECT_CLIENTS_",
"POOL_","SHARE_","T1_","T2_","PREF_TIME_","VALID_TIME_","UNICAST_","PREFERENCE_",
"RAPID_COMMIT_","IFACE_MAX_LEASE_","CLASS_MAX_LEASE_","CLNT_MAX_LEASE_","STATELESS_",
"CACHE_SIZE_","PDCLASS_","PD_LENGTH_","PD_POOL_","VENDOR_SPEC_","CLIENT_","DUID_KEYWORD_",
"REMOTE_ID_","ADDRESS_","GUESS_MODE_","INACTIVE_MODE_","EXPERIMENTAL_","ADDR_PARAMS_",
"DS_LITE_TUNNEL_","REMOTE_AUTOCONF_NEIGHBORS_","AUTH_METHOD_","AUTH_LIFETIME_",
"AUTH_KEY_LEN_","DIGEST_NONE_","DIGEST_PLAIN_","DIGEST_HMAC_MD5_","DIGEST_HMAC_SHA1_",
"DIGEST_HMAC_SHA224_","DIGEST_HMAC_SHA256_","DIGEST_HMAC_SHA384_","DIGEST_HMAC_SHA512_",
"ACCEPT_LEASEQUERY_","CLIENT_CLASS_","MATCH_IF_","EQ_","AND_","OR_","CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_",
"CLIENT_VENDOR_SPEC_DATA_","CLIENT_VENDOR_CLASS_EN_","CLIENT_VENDOR_CLASS_DATA_",
"ALLOW_","DENY_","SUBSTRING_","STRING_KEYWORD_","ADDRESS_LIST_","CONTAIN_","STRING_",
"HEXNUMBER_","INTNUMBER_","IPV6ADDR_","DUID_","'{'","'}'","'-'","','","'/'",
"'('","')'","Grammar","GlobalDeclarationList","GlobalOption","InterfaceOptionDeclaration",
"InterfaceDeclaration","@1","@2","InterfaceDeclarationsList","Client","@3","@4",
"ClientOptions","ClientOption","AddressReservation","ClassDeclaration","@5",
"ClassOptionDeclarationsList","TAClassDeclaration","@6","TAClassOptionsList",
"TAClassOption","PDDeclaration","@7","PDOptionsList","PDOptions","AuthMethod",
"AuthLifetime","AuthKeyGenNonceLen","FQDNList","Number","ADDRESSList","VendorSpecList",
"StringList","ADDRESSRangeList","PDRangeList","ADDRESSDUIDRangeList","RejectClientsOption",
"@8","AcceptOnlyOption","@9","PoolOption","@10","PDPoolOption","@11","PDLength",
"PreferredTimeOption","ValidTimeOption","ShareOption","T1Option","T2Option",
"ClntMaxLeaseOption","ClassMaxLeaseOption","AddrParams","DsLiteTunnelAddr","DsLiteTunnelName",
"ExtraOption","@12","RemoteAutoconfNeighborsOption","@13","IfaceMaxLeaseOption",
"UnicastAddressOption","RapidCommitOption","PreferenceOption","LogLevelOption",
"LogModeOption","LogNameOption","LogColors","WorkDirOption","StatelessOption",
"GuessMode","InactiveMode","Experimental","IfaceIDOrder","CacheSizeOption","AcceptLeaseQuery",
"RelayOption","InterfaceIDOption","ClassOptionDeclaration","AllowClientClassDeclaration",
"DenyClientClassDeclaration","DNSServerOption","@14","DomainOption","@15","NTPServerOption",
"@16","TimeZoneOption","SIPServerOption","@17","SIPDomainOption","@18","FQDNOption",
"@19","@20","@21","AcceptUnknownFQDN","NISServerOption","@22","NISPServerOption",
"@23","NISDomainOption","NISPDomainOption","LifetimeOption","VendorSpecOption",
"@24","ClientClass","@25","ClientClassDecleration","Condition","Expr",""
};
#endif

static const short yyr1[] = {     0,
    97,    97,    98,    98,    98,    98,    99,    99,    99,    99,
    99,    99,    99,    99,    99,    99,    99,    99,    99,    99,
    99,   100,   100,   100,   100,   100,   100,   100,   100,   100,
   100,   100,   100,   100,   100,   100,   100,   100,   100,   100,
   100,   100,   100,   100,   100,   100,   100,   100,   100,   100,
   100,   102,   101,   103,   101,   104,   104,   104,   104,   104,
   104,   106,   105,   107,   105,   108,   108,   109,   109,   109,
   109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
   109,   109,   109,   110,   112,   111,   113,   113,   115,   114,
   116,   116,   117,   117,   117,   117,   117,   117,   117,   117,
   119,   118,   120,   120,   121,   121,   121,   121,   121,   121,
   121,   121,   122,   122,   122,   122,   122,   122,   122,   122,
   123,   124,   125,   125,   125,   125,   125,   125,   126,   126,
   127,   127,   128,   128,   129,   129,   130,   130,   130,   130,
   130,   131,   132,   132,   132,   132,   132,   132,   132,   132,
   134,   133,   136,   135,   138,   137,   140,   139,   141,   142,
   142,   143,   143,   144,   145,   145,   146,   146,   147,   148,
   149,   150,   151,   152,   152,   153,   152,   152,   155,   154,
   156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
   166,   167,   168,   169,   170,   171,   171,   172,   172,   173,
   173,   173,   174,   174,   174,   174,   174,   174,   174,   174,
   174,   174,   174,   174,   175,   176,   178,   177,   180,   179,
   182,   181,   183,   185,   184,   187,   186,   189,   188,   190,
   188,   191,   188,   192,   194,   193,   196,   195,   197,   198,
   199,   201,   200,   203,   202,   204,   205,   205,   205,   205,
   205,   206,   206,   206,   206,   206
};

static const short yyr2[] = {     0,
     1,     0,     1,     1,     2,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     0,     6,     0,     6,     1,     2,     1,     1,     2,
     2,     0,     7,     0,     9,     1,     2,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     2,     0,     5,     1,     2,     0,     5,
     1,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     0,     5,     1,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     1,     3,     3,     3,     5,     5,     1,     1,
     1,     3,     3,     5,     1,     3,     1,     3,     3,     3,
     5,     3,     1,     3,     3,     5,     1,     3,     3,     5,
     0,     3,     0,     3,     0,     3,     0,     3,     2,     2,
     4,     2,     4,     2,     2,     4,     2,     4,     2,     2,
     2,     3,     3,     4,     4,     0,     5,     4,     0,     4,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     1,
     1,     1,     1,     2,     2,     1,     2,     2,     2,     2,
     2,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     2,     2,     0,     4,     0,     4,
     0,     4,     3,     0,     4,     0,     4,     0,     4,     0,
     5,     0,     6,     1,     0,     4,     0,     4,     3,     3,
     3,     0,     4,     0,     6,     2,     0,     5,     5,     5,
     5,     1,     1,     1,     1,     8
};

static const short yydefact[] = {     2,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   234,   153,   151,   155,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   190,     0,     0,     0,   191,
   192,   193,     0,     0,     0,     0,   196,     0,     0,     0,
     1,     3,     7,     4,    50,    48,    15,    16,    17,   209,
   210,   205,   203,   204,   206,   207,   208,    30,   211,   212,
    43,    44,    46,    47,    29,    26,    28,    27,     9,     8,
    10,    11,    12,    13,    20,    51,    18,    19,    14,    25,
    23,    24,    22,   213,   214,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    41,    40,    42,    45,    49,    21,
     0,   129,   130,     0,   198,   199,   202,   201,   200,   194,
   187,   185,   186,   188,   189,   217,   219,   221,     0,   224,
   226,   235,     0,   237,     0,   228,     0,   242,     0,   179,
     0,     0,     0,     0,   164,   165,   167,   160,   162,   182,
   184,   183,   181,   170,   169,   195,   101,     0,     0,   171,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   197,     0,   215,   216,     5,     6,    52,    54,     0,     0,
     0,   223,     0,     0,     0,   239,     0,   240,   230,     0,
   241,     0,   173,   172,     0,     0,     0,   176,     0,   143,
   147,   154,   152,   137,   156,     0,     0,     0,     0,     0,
     0,     0,   244,     0,     0,   131,   218,   135,   220,   222,
   225,   227,   236,   238,   232,     0,   123,   229,     0,   243,
   180,   175,   178,     0,   174,     0,     0,     0,     0,     0,
     0,   166,   168,   161,   163,     0,   157,     0,   103,   106,
   105,   108,   107,   109,   110,   111,   112,    62,     0,     0,
     0,     0,    56,     0,    58,    59,     0,     0,     0,     0,
   231,     0,     0,     0,     0,   177,   144,   148,   145,   149,
   138,   139,   140,   159,     0,   102,   104,     0,     0,   247,
     0,    85,    89,    53,    57,    61,    60,    55,   132,   136,
   233,   125,   124,   126,   133,     0,     0,     0,     0,     0,
   158,     0,     0,     0,    66,    83,    81,    82,    80,    68,
    69,    70,    71,    72,    73,    74,    76,    75,    77,    78,
    79,    64,   247,   246,   245,     0,     0,     0,     0,   146,
   150,   141,     0,    84,    63,    67,     0,   252,   253,     0,
   254,   255,     0,     0,     0,    87,     0,    91,    97,    98,
    95,    93,    94,    96,    99,   100,   128,   127,   134,   142,
     0,     0,   247,   247,     0,     0,    86,    88,    90,    92,
    65,     0,     0,     0,     0,     0,     0,   250,   251,   249,
   248,     0,     0,     0,   256,     0,     0,     0
};

static const short yydefgoto[] = {   386,
    41,    42,    43,    44,   204,   205,   254,    45,   278,   337,
   304,   305,   306,   255,   326,   345,   256,   327,   347,   348,
    46,   200,   238,   239,    47,    48,    49,   218,   342,   207,
   220,   209,   195,   301,   192,    50,   133,    51,   132,    52,
   134,   240,   275,   241,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,   224,    64,   185,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
   169,    87,   170,    88,   171,    89,    90,   173,    91,   174,
    92,   180,   216,   260,    93,    94,   175,    95,   177,    96,
    97,    98,    99,   182,   100,   250,   281,   324,   344
};

static const short yypact[] = {   274,
   121,   142,   159,     5,    13,    57,    28,    57,    35,   372,
-32768,-32768,-32768,-32768,    57,    57,    57,    57,    57,    -4,
    57,    57,    57,    57,    57,-32768,    57,    17,   175,-32768,
-32768,-32768,    57,   228,    57,    57,    57,    44,    49,    53,
   274,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    51,-32768,-32768,    59,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    62,-32768,
-32768,-32768,    69,-32768,    74,   107,    57,-32768,   -44,-32768,
    26,   153,   153,   116,-32768,   117,   130,   157,   169,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   124,    57,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   144,-32768,-32768,-32768,-32768,-32768,-32768,   149,   178,
   149,-32768,   149,   178,   149,-32768,   149,-32768,   181,   184,
-32768,    57,-32768,-32768,   149,   182,   187,-32768,   193,   189,
   205,   180,   180,   -82,   206,    57,    57,    57,    57,   449,
   208,   227,-32768,   331,   331,-32768,   230,-32768,   231,   230,
   230,   231,   230,   230,-32768,   184,   229,   232,   238,   244,
   230,-32768,-32768,   149,-32768,   243,   251,   165,   253,   233,
   254,-32768,-32768,-32768,-32768,    57,-32768,   255,   449,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   258,   277,
   259,   260,-32768,    23,-32768,-32768,   132,   263,   267,   184,
   232,   167,   270,   269,    57,   230,-32768,-32768,   264,   281,
-32768,-32768,   282,-32768,   289,-32768,-32768,    54,   288,   285,
   290,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   232,-32768,-32768,   291,-32768,   293,   310,   312,   317,   313,
-32768,   415,   318,    -3,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   428,-32768,-32768,   445,   387,   170,   323,-32768,
-32768,-32768,   326,-32768,-32768,-32768,    54,-32768,-32768,   325,
-32768,-32768,   192,    22,   417,-32768,   374,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    19,   145,   285,   285,   145,   145,-32768,-32768,-32768,-32768,
-32768,   330,   322,   328,   329,   344,    57,-32768,-32768,-32768,
-32768,   333,    57,   345,-32768,   443,   444,-32768
};

static const short yypgoto[] = {-32768,
-32768,   414,  -130,   419,-32768,-32768,   256,-32768,-32768,-32768,
   119,  -279,-32768,  -142,-32768,-32768,  -132,-32768,-32768,   122,
-32768,-32768,   224,-32768,-32768,-32768,-32768,  -187,    -1,   -92,
-32768,   294,-32768,-32768,   337,  -247,-32768,  -236,-32768,  -230,
-32768,-32768,-32768,-32768,  -197,  -196,-32768,  -150,  -135,-32768,
  -226,-32768,  -265,  -238,  -209,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  -307,  -194,  -192,  -162,
-32768,  -159,-32768,  -122,-32768,  -121,  -104,-32768,  -101,-32768,
-32768,-32768,-32768,-32768,-32768,   -99,-32768,   -94,-32768,   -90,
   -87,   -86,   -85,-32768,-32768,-32768,-32768,  -277,  -176
};


#define	YYLAST		529


static const short yytable[] = {   104,
   106,   109,   242,   243,   112,   246,   114,   247,   131,   229,
   302,   230,   307,   135,   136,   137,   138,   139,   346,   141,
   142,   143,   144,   145,   336,   146,     2,     3,   261,   251,
   252,   150,   302,   159,   160,   161,    10,   368,   307,   308,
   183,   242,   243,   184,   246,   343,   247,   303,    11,   244,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,   245,   308,    28,   302,   309,   303,
    29,   307,   291,   253,   253,    31,   186,    33,   210,   349,
   211,   336,   213,   140,   214,   373,   374,   335,   244,   110,
   350,    37,   221,   365,   309,   307,   351,   111,   308,   349,
   354,    39,    40,   245,   303,   366,   147,   187,   188,   371,
   350,   286,   113,   284,   286,   310,   351,   189,   311,   115,
   354,   287,   308,   285,   287,   181,   285,   309,   162,   352,
   353,   266,   355,   163,   356,     2,     3,   164,   251,   252,
   167,   310,   102,   103,   311,    10,   172,   202,   168,   352,
   353,   309,   355,   176,   356,   312,   313,    11,   178,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,   314,   310,    28,   315,   311,   316,    29,
   219,   312,   313,   317,    31,   372,    33,   318,   375,   376,
   319,   320,   321,   179,   232,   233,   234,   235,   310,   314,
    37,   311,   315,   194,   316,   101,   102,   103,   196,   317,
    39,    40,   201,   318,   312,   313,   319,   320,   321,   338,
   339,   197,   288,   148,   149,   340,   105,   102,   103,   341,
   102,   103,   314,   203,   274,   315,   206,   316,   312,   313,
   190,   191,   317,   107,   102,   103,   318,   108,   198,   319,
   320,   321,   269,   270,   292,   293,   314,   357,   358,   315,
   199,   316,   208,   296,   363,   364,   317,   215,   217,   222,
   318,   223,   228,   319,   320,   321,     1,     2,     3,     4,
   226,   225,     5,     6,     7,     8,     9,    10,   151,   152,
   153,   154,   155,   156,   157,   158,   227,   248,   231,    11,
   131,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,   249,   272,
   262,    29,   258,   259,   263,    30,    31,    32,    33,   264,
   267,    34,    35,    36,     2,     3,   265,   251,   252,   268,
   271,   273,    37,    38,    10,   276,   279,   280,   282,   283,
   289,   290,    39,    40,   294,   297,    11,   295,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,   298,   299,    28,   382,   300,   322,    29,   323,
   325,   384,   328,    31,   329,    33,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   330,   127,    37,
   331,    12,    13,    14,   332,   334,   333,    18,    19,    39,
    40,   359,   360,    24,    12,    13,    14,   378,   128,   362,
    18,    19,   377,   379,   380,   383,    24,   129,   130,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   381,
   385,   127,   387,   388,    12,    13,    14,    15,    16,    17,
    18,    19,    39,    40,   165,   361,    24,   102,   103,   166,
   257,   128,   277,     0,   369,    39,    40,   212,   370,   193,
   129,    33,    12,    13,    14,    15,    16,    17,    18,    19,
    16,    17,    18,    19,    24,     0,     0,     0,     0,     0,
     0,     0,     0,   236,   237,    39,    40,     0,     0,    33,
   102,   103,   338,   339,     0,     0,     0,   367,   340,     0,
     0,     0,   341,   102,   103,     0,     0,     0,     0,     0,
     0,     0,   323,    39,    40,     0,     0,    39,    40
};

static const short yycheck[] = {     1,
     2,     3,   200,   200,     6,   200,     8,   200,    10,    92,
    14,    94,   278,    15,    16,    17,    18,    19,   326,    21,
    22,    23,    24,    25,   304,    27,     4,     5,   216,     7,
     8,    33,    14,    35,    36,    37,    14,   345,   304,   278,
    85,   239,   239,    88,   239,   323,   239,    51,    26,   200,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,   200,   304,    44,    14,   278,    51,
    48,   337,   260,   204,   205,    53,    51,    55,   171,   327,
   173,   361,   175,    88,   177,   363,   364,    91,   239,    85,
   327,    69,   185,    72,   304,   361,   327,    85,   337,   347,
   327,    79,    80,   239,    51,    84,    90,    82,    83,    91,
   347,   254,    85,    91,   257,   278,   347,    92,   278,    85,
   347,   254,   361,   254,   257,   127,   257,   337,    85,   327,
   327,   224,   327,    85,   327,     4,     5,    85,     7,     8,
    90,   304,    86,    87,   304,    14,    85,   149,    90,   347,
   347,   361,   347,    85,   347,   278,   278,    26,    85,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,   278,   337,    44,   278,   337,   278,    48,
   182,   304,   304,   278,    53,   362,    55,   278,   365,   366,
   278,   278,   278,    87,   196,   197,   198,   199,   361,   304,
    69,   361,   304,    88,   304,    85,    86,    87,    92,   304,
    79,    80,    89,   304,   337,   337,   304,   304,   304,    75,
    76,    92,    91,    49,    50,    81,    85,    86,    87,    85,
    86,    87,   337,    90,   236,   337,    88,   337,   361,   361,
    88,    89,   337,    85,    86,    87,   337,    89,    92,   337,
   337,   337,    88,    89,    88,    89,   361,    88,    89,   361,
    92,   361,    85,   265,    73,    74,   361,    87,    85,    88,
   361,    85,    93,   361,   361,   361,     3,     4,     5,     6,
    92,    89,     9,    10,    11,    12,    13,    14,    61,    62,
    63,    64,    65,    66,    67,    68,    92,    90,    93,    26,
   302,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    92,    87,
    92,    48,    93,    93,    93,    52,    53,    54,    55,    92,
    88,    58,    59,    60,     4,     5,    93,     7,     8,    89,
    88,    88,    69,    70,    14,    91,    89,    71,    90,    90,
    88,    85,    79,    80,    85,    92,    26,    89,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    92,    92,    44,   377,    88,    90,    48,    95,
    91,   383,    92,    53,    92,    55,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    88,    27,    69,
    89,    28,    29,    30,    88,    88,    94,    34,    35,    79,
    80,    89,    87,    40,    28,    29,    30,    96,    47,    95,
    34,    35,    93,    96,    96,    93,    40,    56,    57,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    96,
    96,    27,     0,     0,    28,    29,    30,    31,    32,    33,
    34,    35,    79,    80,    41,   337,    40,    86,    87,    41,
   205,    47,   239,    -1,    91,    79,    80,   174,   347,   133,
    56,    55,    28,    29,    30,    31,    32,    33,    34,    35,
    32,    33,    34,    35,    40,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    45,    46,    79,    80,    -1,    -1,    55,
    86,    87,    75,    76,    -1,    -1,    -1,    91,    81,    -1,
    -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    95,    79,    80,    -1,    -1,    79,    80
};

#line 352 "../bison++/bison.cc"
 /* fattrs + tables */

/* parser code folow  */


/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: dollar marks section change
   the next  is replaced by the list of actions, each action
   as one case of the switch.  */ 

#if YY_SrvParser_USE_GOTO != 0
/* 
 SUPRESSION OF GOTO : on some C++ compiler (sun c++)
  the goto is strictly forbidden if any constructor/destructor
  is used in the whole function (very stupid isn't it ?)
 so goto are to be replaced with a 'while/switch/case construct'
 here are the macro to keep some apparent compatibility
*/
#define YYGOTO(lb) {yy_gotostate=lb;continue;}
#define YYBEGINGOTO  enum yy_labels yy_gotostate=yygotostart; \
                     for(;;) switch(yy_gotostate) { case yygotostart: {
#define YYLABEL(lb) } case lb: {
#define YYENDGOTO } } 
#define YYBEGINDECLARELABEL enum yy_labels {yygotostart
#define YYDECLARELABEL(lb) ,lb
#define YYENDDECLARELABEL  }
#else
/* macro to keep goto */
#define YYGOTO(lb) goto lb
#define YYBEGINGOTO 
#define YYLABEL(lb) lb:
#define YYENDGOTO
#define YYBEGINDECLARELABEL 
#define YYDECLARELABEL(lb)
#define YYENDDECLARELABEL  
#endif
/* LABEL DECLARATION */
YYBEGINDECLARELABEL
  YYDECLARELABEL(yynewstate)
  YYDECLARELABEL(yybackup)
/* YYDECLARELABEL(yyresume) */
  YYDECLARELABEL(yydefault)
  YYDECLARELABEL(yyreduce)
  YYDECLARELABEL(yyerrlab)   /* here on detecting error */
  YYDECLARELABEL(yyerrlab1)   /* here on error raised explicitly by an action */
  YYDECLARELABEL(yyerrdefault)  /* current state does not do anything special for the error token. */
  YYDECLARELABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */
  YYDECLARELABEL(yyerrhandle)  
YYENDDECLARELABEL
/* ALLOCA SIMULATION */
/* __HAVE_NO_ALLOCA */
#ifdef __HAVE_NO_ALLOCA
int __alloca_free_ptr(char *ptr,char *ref)
{if(ptr!=ref) free(ptr);
 return 0;}

#define __ALLOCA_alloca(size) malloc(size)
#define __ALLOCA_free(ptr,ref) __alloca_free_ptr((char *)ptr,(char *)ref)

#ifdef YY_SrvParser_LSP_NEEDED
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		    __ALLOCA_free(yyls,yylsa)+\
		   (num)); } while(0)
#else
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		   (num)); } while(0)
#endif
#else
#define __ALLOCA_return(num) do { return(num); } while(0)
#define __ALLOCA_alloca(size) alloca(size)
#define __ALLOCA_free(ptr,ref) 
#endif

/* ENDALLOCA SIMULATION */

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (YY_SrvParser_CHAR = YYEMPTY)
#define YYEMPTY         -2
#define YYEOF           0
#define YYACCEPT        __ALLOCA_return(0)
#define YYABORT         __ALLOCA_return(1)
#define YYERROR         YYGOTO(yyerrlab1)
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL          YYGOTO(yyerrlab)
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do                                                              \
  if (YY_SrvParser_CHAR == YYEMPTY && yylen == 1)                               \
    { YY_SrvParser_CHAR = (token), YY_SrvParser_LVAL = (value);                 \
      yychar1 = YYTRANSLATE (YY_SrvParser_CHAR);                                \
      YYPOPSTACK;                                               \
      YYGOTO(yybackup);                                            \
    }                                                           \
  else                                                          \
    { YY_SrvParser_ERROR ("syntax error: cannot back up"); YYERROR; }   \
while (0)

#define YYTERROR        1
#define YYERRCODE       256

#ifndef YY_SrvParser_PURE
/* UNPURE */
#define YYLEX           YY_SrvParser_LEX()
#ifndef YY_USE_CLASS
/* If nonreentrant, and not class , generate the variables here */
int     YY_SrvParser_CHAR;                      /*  the lookahead symbol        */
YY_SrvParser_STYPE      YY_SrvParser_LVAL;              /*  the semantic value of the */
				/*  lookahead symbol    */
int YY_SrvParser_NERRS;                 /*  number of parse errors so far */
#ifdef YY_SrvParser_LSP_NEEDED
YY_SrvParser_LTYPE YY_SrvParser_LLOC;   /*  location data for the lookahead     */
			/*  symbol                              */
#endif
#endif


#else
/* PURE */
#ifdef YY_SrvParser_LSP_NEEDED
#define YYLEX           YY_SrvParser_LEX(&YY_SrvParser_LVAL, &YY_SrvParser_LLOC)
#else
#define YYLEX           YY_SrvParser_LEX(&YY_SrvParser_LVAL)
#endif
#endif
#ifndef YY_USE_CLASS
#if YY_SrvParser_DEBUG != 0
int YY_SrvParser_DEBUG_FLAG;                    /*  nonzero means print parse trace     */
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif
#endif



/*  YYINITDEPTH indicates the initial size of the parser's stacks       */

#ifndef YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif


#if __GNUC__ > 1                /* GNU C and GNU C++ define this.  */
#define __yy_bcopy(FROM,TO,COUNT)       __builtin_memcpy(TO,FROM,COUNT)
#else                           /* not GNU C or C++ */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */

#ifdef __cplusplus
static void __yy_bcopy (char *from, char *to, int count)
#else
#ifdef __STDC__
static void __yy_bcopy (char *from, char *to, int count)
#else
static void __yy_bcopy (from, to, count)
     char *from;
     char *to;
     int count;
#endif
#endif
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}
#endif


int
#ifdef YY_USE_CLASS
 YY_SrvParser_CLASS::
#endif
     YY_SrvParser_PARSE(YY_SrvParser_PARSE_PARAM)
#ifndef __STDC__
#ifndef __cplusplus
#ifndef YY_USE_CLASS
/* parameter definition without protypes */
YY_SrvParser_PARSE_PARAM_DEF
#endif
#endif
#endif
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YY_SrvParser_STYPE *yyvsp;
  int yyerrstatus;      /*  number of tokens to shift before error messages enabled */
  int yychar1=0;          /*  lookahead token as an internal (translated) token number */

  short yyssa[YYINITDEPTH];     /*  the state stack                     */
  YY_SrvParser_STYPE yyvsa[YYINITDEPTH];        /*  the semantic value stack            */

  short *yyss = yyssa;          /*  refer to the stacks thru separate pointers */
  YY_SrvParser_STYPE *yyvs = yyvsa;     /*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YY_SrvParser_LSP_NEEDED
  YY_SrvParser_LTYPE yylsa[YYINITDEPTH];        /*  the location stack                  */
  YY_SrvParser_LTYPE *yyls = yylsa;
  YY_SrvParser_LTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YY_SrvParser_PURE
  int YY_SrvParser_CHAR;
  YY_SrvParser_STYPE YY_SrvParser_LVAL;
  int YY_SrvParser_NERRS;
#ifdef YY_SrvParser_LSP_NEEDED
  YY_SrvParser_LTYPE YY_SrvParser_LLOC;
#endif
#endif

  YY_SrvParser_STYPE yyval;             /*  the variable used to return         */
				/*  semantic values from the action     */
				/*  routines                            */

  int yylen;
/* start loop, in which YYGOTO may be used. */
YYBEGINGOTO

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    fprintf(stderr, "Starting parse\n");
#endif
  yystate = 0;
  yyerrstatus = 0;
  YY_SrvParser_NERRS = 0;
  YY_SrvParser_CHAR = YYEMPTY;          /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YY_SrvParser_LSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
YYLABEL(yynewstate)

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YY_SrvParser_STYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YY_SrvParser_LSP_NEEDED
      YY_SrvParser_LTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YY_SrvParser_LSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YY_SrvParser_LSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	    YY_SrvParser_ERROR(((char*)"parser stack overflow"));
	  __ALLOCA_return(2);
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) __ALLOCA_alloca (yystacksize * sizeof (*yyssp));
      __yy_bcopy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      __ALLOCA_free(yyss1,yyssa);
      yyvs = (YY_SrvParser_STYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yyvsp));
      __yy_bcopy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
      __ALLOCA_free(yyvs1,yyvsa);
#ifdef YY_SrvParser_LSP_NEEDED
      yyls = (YY_SrvParser_LTYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yylsp));
      __yy_bcopy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
      __ALLOCA_free(yyls1,yylsa);
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YY_SrvParser_LSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  YYGOTO(yybackup);
YYLABEL(yybackup)

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* YYLABEL(yyresume) */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yydefault);

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (YY_SrvParser_CHAR == YYEMPTY)
    {
#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	fprintf(stderr, "Reading a token: ");
#endif
      YY_SrvParser_CHAR = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (YY_SrvParser_CHAR <= 0)           /* This means end of input. */
    {
      yychar1 = 0;
      YY_SrvParser_CHAR = YYEOF;                /* Don't call YYLEX any more */

#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(YY_SrvParser_CHAR);

#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	{
	  fprintf (stderr, "Next token is %d (%s", YY_SrvParser_CHAR, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, YY_SrvParser_CHAR, YY_SrvParser_LVAL);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    YYGOTO(yydefault);

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrlab);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrlab);

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting token %d (%s), ", YY_SrvParser_CHAR, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (YY_SrvParser_CHAR != YYEOF)
    YY_SrvParser_CHAR = YYEMPTY;

  *++yyvsp = YY_SrvParser_LVAL;
#ifdef YY_SrvParser_LSP_NEEDED
  *++yylsp = YY_SrvParser_LLOC;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  YYGOTO(yynewstate);

/* Do the default action for the current state.  */
YYLABEL(yydefault)

  yyn = yydefact[yystate];
  if (yyn == 0)
    YYGOTO(yyerrlab);

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
YYLABEL(yyreduce)
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


 #line 839 "../bison++/bison.cc"

  switch (yyn) {

case 52:
#line 207 "SrvParser.y"
{
    if (!StartIfaceDeclaration(yyvsp[-1].strval))
	YYABORT;
;
    break;}
case 53:
#line 212 "SrvParser.y"
{
    //Information about new interface has been read
    //Add it to list of read interfaces
    delete [] yyvsp[-4].strval;
    EndIfaceDeclaration();
;
    break;}
case 54:
#line 220 "SrvParser.y"
{
    if (!StartIfaceDeclaration(yyvsp[-1].ival))
	YYABORT;
;
    break;}
case 55:
#line 225 "SrvParser.y"
{
    EndIfaceDeclaration();
;
    break;}
case 62:
#line 240 "SrvParser.y"
{
    ParserOptStack.append(new TSrvParsGlobalOpt());
    SPtr<TDUID> duid = new TDUID(yyvsp[-1].duidval.duid,yyvsp[-1].duidval.length);
    ClientLst.append(new TSrvCfgOptions(duid));
;
    break;}
case 63:
#line 246 "SrvParser.y"
{
    Log(Debug) << "Exception: DUID-based exception specified." << LogEnd;
    // copy all defined options
    ClientLst.getLast()->setOptions(ParserOptStack.getLast());
    ParserOptStack.delLast();
;
    break;}
case 64:
#line 254 "SrvParser.y"
{
    ParserOptStack.append(new TSrvParsGlobalOpt());
    SPtr<TSrvOptRemoteID> remoteid = new TSrvOptRemoteID(yyvsp[-3].ival, yyvsp[-1].duidval.duid, yyvsp[-1].duidval.length, 0);
    ClientLst.append(new TSrvCfgOptions(remoteid));
;
    break;}
case 65:
#line 260 "SrvParser.y"
{
    Log(Debug) << "Exception: RemoteID-based exception specified." << LogEnd;
    // copy all defined options
    ClientLst.getLast()->setOptions(ParserOptStack.getLast());
    ParserOptStack.delLast();
;
    break;}
case 84:
#line 293 "SrvParser.y"
{
    addr = new TIPv6Addr(yyvsp[0].addrval);
    Log(Info) << "Exception: Address " << addr->getPlain() << " reserved." << LogEnd;
    ClientLst.getLast()->setAddr(addr);
;
    break;}
case 85:
#line 302 "SrvParser.y"
{ 
    StartClassDeclaration();
;
    break;}
case 86:
#line 306 "SrvParser.y"
{
    if (!EndClassDeclaration())
	YYABORT;
;
    break;}
case 89:
#line 320 "SrvParser.y"
{
    StartTAClassDeclaration();
;
    break;}
case 90:
#line 323 "SrvParser.y"
{
    if (!EndTAClassDeclaration())
	YYABORT;
;
    break;}
case 101:
#line 346 "SrvParser.y"
{
    StartPDDeclaration();
;
    break;}
case 102:
#line 349 "SrvParser.y"
{
    if (!EndPDDeclaration())
	YYABORT;
;
    break;}
case 113:
#line 375 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_NONE); ;
    break;}
case 114:
#line 376 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_PLAIN); ;
    break;}
case 115:
#line 377 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_HMAC_MD5); ;
    break;}
case 116:
#line 378 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_HMAC_SHA1); ;
    break;}
case 117:
#line 379 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_HMAC_SHA224); ;
    break;}
case 118:
#line 380 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_HMAC_SHA256); ;
    break;}
case 119:
#line 381 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_HMAC_SHA384); ;
    break;}
case 120:
#line 382 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_HMAC_SHA512); ;
    break;}
case 121:
#line 386 "SrvParser.y"
{ ParserOptStack.getLast()->setAuthLifetime(yyvsp[0].ival); ;
    break;}
case 122:
#line 390 "SrvParser.y"
{ ParserOptStack.getLast()->setAuthKeyLen(yyvsp[0].ival); ;
    break;}
case 123:
#line 399 "SrvParser.y"
{
    Log(Notice)<< "FQDN: The client "<<yyvsp[0].strval<<" has no address nor DUID"<<LogEnd;
    PresentFQDNLst.append(new TFQDN(yyvsp[0].strval,false));
;
    break;}
case 124:
#line 404 "SrvParser.y"
{
    TDUID* duidNew = new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length);
    Log(Debug)<< "FQDN:" << yyvsp[-2].strval <<" reserved for DUID " << duidNew->getPlain()<<LogEnd;
    // FIXME: Use SPtr()
    PresentFQDNLst.append(new TFQDN(duidNew, yyvsp[-2].strval,false));
;
    break;}
case 125:
#line 411 "SrvParser.y"
{
    addr = new TIPv6Addr(yyvsp[0].addrval);
    Log(Debug)<< "FQDN:" << yyvsp[-2].strval <<" reserved for address "<<*addr<<LogEnd;
    // FIXME: Use SPtr()
    PresentFQDNLst.append(new TFQDN(new TIPv6Addr(yyvsp[0].addrval), yyvsp[-2].strval,false));
;
    break;}
case 126:
#line 418 "SrvParser.y"
{
	Log(Notice)<< "FQDN:"<<yyvsp[0].strval<<" has no reservations (is available to everyone)."<<LogEnd;
    PresentFQDNLst.append(new TFQDN(yyvsp[0].strval,false));
;
    break;}
case 127:
#line 423 "SrvParser.y"
{
    TDUID* duidNew = new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length);
    Log(Debug)<< "FQDN:" << yyvsp[-2].strval << " reserved for DUID "<< duidNew->getPlain() << LogEnd;
    // FIXME: Use SPtr()
    PresentFQDNLst.append(new TFQDN( duidNew, yyvsp[-2].strval,false));
;
    break;}
case 128:
#line 430 "SrvParser.y"
{
    addr = new TIPv6Addr(yyvsp[0].addrval);
    Log(Debug)<< "FQDN:" << yyvsp[-2].strval<<" reserved for address "<< addr->getPlain() << LogEnd;
    // FIXME: Use SPtr()
    PresentFQDNLst.append(new TFQDN(new TIPv6Addr(yyvsp[0].addrval), yyvsp[-2].strval,false));
;
    break;}
case 129:
#line 439 "SrvParser.y"
{yyval.ival=yyvsp[0].ival;;
    break;}
case 130:
#line 440 "SrvParser.y"
{yyval.ival=yyvsp[0].ival;;
    break;}
case 131:
#line 445 "SrvParser.y"
{
    PresentAddrLst.append(new TIPv6Addr(yyvsp[0].addrval));
;
    break;}
case 132:
#line 449 "SrvParser.y"
{
    PresentAddrLst.append(new TIPv6Addr(yyvsp[0].addrval));
;
    break;}
case 133:
#line 456 "SrvParser.y"
{
    // Log(Debug) << "Vendor-spec defined: Number: " << $1 << ", valuelen=" << $3.length << LogEnd;
    VendorSpec.append(new TSrvOptVendorSpec(yyvsp[-2].ival, yyvsp[0].duidval.duid, yyvsp[0].duidval.length, 0));
;
    break;}
case 134:
#line 461 "SrvParser.y"
{
    // Log(Debug) << "Vendor-spec defined: Number: " << $3 << ", valuelen=" << $5.length << LogEnd;
    VendorSpec.append(new TSrvOptVendorSpec(yyvsp[-2].ival, yyvsp[0].duidval.duid, yyvsp[0].duidval.length, 0));
;
    break;}
case 135:
#line 468 "SrvParser.y"
{ PresentStringLst.append(SPtr<string> (new string(yyvsp[0].strval))); ;
    break;}
case 136:
#line 469 "SrvParser.y"
{ PresentStringLst.append(SPtr<string> (new string(yyvsp[0].strval))); ;
    break;}
case 137:
#line 474 "SrvParser.y"
{
        PresentRangeLst.append(new TStationRange(new TIPv6Addr(yyvsp[0].addrval),new TIPv6Addr(yyvsp[0].addrval)));
    ;
    break;}
case 138:
#line 478 "SrvParser.y"
{
        SPtr<TIPv6Addr> addr1(new TIPv6Addr(yyvsp[-2].addrval));
        SPtr<TIPv6Addr> addr2(new TIPv6Addr(yyvsp[0].addrval));
        if (*addr1<=*addr2)
            PresentRangeLst.append(new TStationRange(addr1,addr2));
        else
            PresentRangeLst.append(new TStationRange(addr2,addr1));
    ;
    break;}
case 139:
#line 487 "SrvParser.y"
{
	SPtr<TIPv6Addr> addr(new TIPv6Addr(yyvsp[-2].addrval));
	int prefix = yyvsp[0].ival;
	if ( (prefix<1) || (prefix>128)) {
	    Log(Crit) << "Invalid prefix defined: " << prefix << " in line " << lex->lineno() 
		      << ". Allowed range: 1..128." << LogEnd;
	    YYABORT;
	}
	SPtr<TIPv6Addr> addr1 = this->getRangeMin(yyvsp[-2].addrval, prefix);
	SPtr<TIPv6Addr> addr2 = this->getRangeMax(yyvsp[-2].addrval, prefix);
        if (*addr1<=*addr2)
            PresentRangeLst.append(new TStationRange(addr1,addr2));
        else
            PresentRangeLst.append(new TStationRange(addr2,addr1));
    ;
    break;}
case 140:
#line 503 "SrvParser.y"
{
        PresentRangeLst.append(new TStationRange(new TIPv6Addr(yyvsp[0].addrval),new TIPv6Addr(yyvsp[0].addrval)));
    ;
    break;}
case 141:
#line 507 "SrvParser.y"
{
        SPtr<TIPv6Addr> addr1(new TIPv6Addr(yyvsp[-2].addrval));
        SPtr<TIPv6Addr> addr2(new TIPv6Addr(yyvsp[0].addrval));
        if (*addr1<=*addr2)
            PresentRangeLst.append(new TStationRange(addr1,addr2));
        else
            PresentRangeLst.append(new TStationRange(addr2,addr1));
    ;
    break;}
case 142:
#line 519 "SrvParser.y"
{
	SPtr<TIPv6Addr> addr(new TIPv6Addr(yyvsp[-2].addrval));
	int prefix = yyvsp[0].ival;
	if ( (prefix<1) || (prefix>128)) {
	    Log(Crit) << "Invalid prefix defined: " << prefix << " in line " << lex->lineno() 
		      << ". Allowed range: 1..128." << LogEnd;
	    YYABORT;
	}
 	
	SPtr<TIPv6Addr> addr1 = this->getRangeMin(yyvsp[-2].addrval, prefix);
	SPtr<TIPv6Addr> addr2 = this->getRangeMax(yyvsp[-2].addrval, prefix);
	SPtr<TStationRange> range = 0;
	if (*addr1<=*addr2)
            range = new TStationRange(addr1,addr2);
        else
            range = new TStationRange(addr2,addr1);
	range->setPrefixLength(prefix);
	PDLst.append(range);
    ;
    break;}
case 143:
#line 542 "SrvParser.y"
{
    PresentRangeLst.append(new TStationRange(new TIPv6Addr(yyvsp[0].addrval),new TIPv6Addr(yyvsp[0].addrval)));
;
    break;}
case 144:
#line 546 "SrvParser.y"
{
    SPtr<TIPv6Addr> addr1(new TIPv6Addr(yyvsp[-2].addrval));
    SPtr<TIPv6Addr> addr2(new TIPv6Addr(yyvsp[0].addrval));
    if (*addr1<=*addr2)
	PresentRangeLst.append(new TStationRange(addr1,addr2));
    else
	PresentRangeLst.append(new TStationRange(addr2,addr1));
;
    break;}
case 145:
#line 555 "SrvParser.y"
{
    PresentRangeLst.append(new TStationRange(new TIPv6Addr(yyvsp[0].addrval),new TIPv6Addr(yyvsp[0].addrval)));
;
    break;}
case 146:
#line 559 "SrvParser.y"
{
    SPtr<TIPv6Addr> addr1(new TIPv6Addr(yyvsp[-2].addrval));
    SPtr<TIPv6Addr> addr2(new TIPv6Addr(yyvsp[0].addrval));
    if (*addr1<=*addr2)
	PresentRangeLst.append(new TStationRange(addr1,addr2));
    else
	PresentRangeLst.append(new TStationRange(addr2,addr1));
;
    break;}
case 147:
#line 568 "SrvParser.y"
{
    PresentRangeLst.append(new TStationRange(new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length)));
    delete yyvsp[0].duidval.duid;
;
    break;}
case 148:
#line 573 "SrvParser.y"
{   
    SPtr<TDUID> duid1(new TDUID(yyvsp[-2].duidval.duid,yyvsp[-2].duidval.length));
    SPtr<TDUID> duid2(new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length));
    
    if (*duid1<=*duid2)
        PresentRangeLst.append(new TStationRange(duid1,duid2));
    else
        PresentRangeLst.append(new TStationRange(duid2,duid1));
;
    break;}
case 149:
#line 583 "SrvParser.y"
{
    PresentRangeLst.append(new TStationRange(new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length)));
    delete yyvsp[0].duidval.duid;
;
    break;}
case 150:
#line 588 "SrvParser.y"
{
    SPtr<TDUID> duid2(new TDUID(yyvsp[-2].duidval.duid,yyvsp[-2].duidval.length));
    SPtr<TDUID> duid1(new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length));
    if (*duid1<=*duid2)
        PresentRangeLst.append(new TStationRange(duid1,duid2));
    else
        PresentRangeLst.append(new TStationRange(duid2,duid1));
    delete yyvsp[-2].duidval.duid;
    delete yyvsp[0].duidval.duid;
;
    break;}
case 151:
#line 602 "SrvParser.y"
{
    PresentRangeLst.clear();    
;
    break;}
case 152:
#line 605 "SrvParser.y"
{
    ParserOptStack.getLast()->setRejedClnt(&PresentRangeLst);
;
    break;}
case 153:
#line 612 "SrvParser.y"
{
    PresentRangeLst.clear();    
;
    break;}
case 154:
#line 615 "SrvParser.y"
{
    ParserOptStack.getLast()->setAcceptClnt(&PresentRangeLst);
;
    break;}
case 155:
#line 622 "SrvParser.y"
{
    PresentRangeLst.clear();    
;
    break;}
case 156:
#line 625 "SrvParser.y"
{
    ParserOptStack.getLast()->setPool(&PresentRangeLst);
;
    break;}
case 157:
#line 632 "SrvParser.y"
{
;
    break;}
case 158:
#line 634 "SrvParser.y"
{
    ParserOptStack.getLast()->setPool(&PresentRangeLst/*PDList*/);
;
    break;}
case 159:
#line 640 "SrvParser.y"
{
   this->PDPrefix = yyvsp[0].ival;
;
    break;}
case 160:
#line 647 "SrvParser.y"
{ 
    ParserOptStack.getLast()->setPrefBeg(yyvsp[0].ival);
    ParserOptStack.getLast()->setPrefEnd(yyvsp[0].ival);
;
    break;}
case 161:
#line 652 "SrvParser.y"
{
    ParserOptStack.getLast()->setPrefBeg(yyvsp[-2].ival);
    ParserOptStack.getLast()->setPrefEnd(yyvsp[0].ival);   
;
    break;}
case 162:
#line 660 "SrvParser.y"
{ 
    ParserOptStack.getLast()->setValidBeg(yyvsp[0].ival);
    ParserOptStack.getLast()->setValidEnd(yyvsp[0].ival);
;
    break;}
case 163:
#line 665 "SrvParser.y"
{
    ParserOptStack.getLast()->setValidBeg(yyvsp[-2].ival);
    ParserOptStack.getLast()->setValidEnd(yyvsp[0].ival);  
;
    break;}
case 164:
#line 673 "SrvParser.y"
{
    int x=yyvsp[0].ival;
    if ( (x<1) || (x>1000)) {
	Log(Crit) << "Invalid share value: " << x << " in line " << lex->lineno() 
		  << ". Allowed range: 1..1000." << LogEnd;
	YYABORT;
    }
    ParserOptStack.getLast()->setShare(x);
;
    break;}
case 165:
#line 685 "SrvParser.y"
{
    ParserOptStack.getLast()->setT1Beg(yyvsp[0].ival); 
    ParserOptStack.getLast()->setT1End(yyvsp[0].ival); 
;
    break;}
case 166:
#line 690 "SrvParser.y"
{
    ParserOptStack.getLast()->setT1Beg(yyvsp[-2].ival); 
    ParserOptStack.getLast()->setT1End(yyvsp[0].ival); 
;
    break;}
case 167:
#line 698 "SrvParser.y"
{ 
    ParserOptStack.getLast()->setT2Beg(yyvsp[0].ival); 
    ParserOptStack.getLast()->setT2End(yyvsp[0].ival); 
;
    break;}
case 168:
#line 703 "SrvParser.y"
{
    ParserOptStack.getLast()->setT2Beg(yyvsp[-2].ival); 
    ParserOptStack.getLast()->setT2End(yyvsp[0].ival); 
;
    break;}
case 169:
#line 711 "SrvParser.y"
{ 
    ParserOptStack.getLast()->setClntMaxLease(yyvsp[0].ival);
;
    break;}
case 170:
#line 718 "SrvParser.y"
{
    ParserOptStack.getLast()->setClassMaxLease(yyvsp[0].ival);
;
    break;}
case 171:
#line 725 "SrvParser.y"
{
    if (!ParserOptStack.getLast()->getExperimental()) {
	Log(Crit) << "Experimental 'addr-params' defined, but experimental features are disabled. Add 'experimental' "
		  << "in global section of server.conf to enable it." << LogEnd;
	YYABORT;
    }
    int bitfield = ADDRPARAMS_MASK_PREFIX;
    Log(Warning) << "Experimental addr-params added (prefix=" << yyvsp[0].ival << ", bitfield=" << bitfield << ")." << LogEnd;
    ParserOptStack.getLast()->setAddrParams(yyvsp[0].ival,bitfield);
;
    break;}
case 172:
#line 738 "SrvParser.y"
{
    SPtr<TIPv6Addr> addr = new TIPv6Addr(yyvsp[0].addrval);
    Log(Info) << "Enabling DS-Lite tunnel option, address=" << addr->getPlain() << LogEnd;
    SPtr<TOpt> tunnelAddr = new TOptAddr(OPTION_DS_LITE_ADDR, addr, 0);
    SrvCfgIfaceLst.getLast()->addExtraOption(tunnelAddr, false);
;
    break;}
case 173:
#line 747 "SrvParser.y"
{
    SPtr<TOpt> tunnelName = new TOptString(OPTION_DS_LITE_NAME, yyvsp[0].strval, 0);
    Log(Info) << "Enabling DS-Lite tunnel option, name=" << yyvsp[0].strval << LogEnd;
    SrvCfgIfaceLst.getLast()->addExtraOption(tunnelName, false);
;
    break;}
case 174:
#line 755 "SrvParser.y"
{
    SPtr<TOpt> opt = new TOptGeneric(yyvsp[-2].ival, yyvsp[0].duidval.duid, yyvsp[0].duidval.length, 0);
    SrvCfgIfaceLst.getLast()->addExtraOption(opt, false);
    Log(Debug) << "Extra option defined: code=" << yyvsp[-2].ival << ", length=" << yyvsp[0].duidval.length << LogEnd;
;
    break;}
case 175:
#line 761 "SrvParser.y"
{
    SPtr<TIPv6Addr> addr(new TIPv6Addr(yyvsp[0].addrval));

    SPtr<TOpt> opt = new TOptAddr(yyvsp[-2].ival, addr, 0);
    SrvCfgIfaceLst.getLast()->addExtraOption(opt, false);
    Log(Debug) << "Extra option defined: code=" << yyvsp[-2].ival << ", address=" << addr->getPlain() << LogEnd;
;
    break;}
case 176:
#line 769 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 177:
#line 772 "SrvParser.y"
{
    SPtr<TOpt> opt = new TOptAddrLst(yyvsp[-3].ival, PresentAddrLst, 0);
    SrvCfgIfaceLst.getLast()->addExtraOption(opt, false);
    Log(Debug) << "Extra option defined: code=" << yyvsp[-3].ival << ", address count=" << PresentAddrLst.count() << LogEnd;
;
    break;}
case 178:
#line 778 "SrvParser.y"
{
    SPtr<TOpt> opt = new TOptString(yyvsp[-2].ival, string(yyvsp[0].strval), 0);
    SrvCfgIfaceLst.getLast()->addExtraOption(opt, false);
    Log(Debug) << "Extra option defined: code=" << yyvsp[-2].ival << ", string=" << yyvsp[0].strval << LogEnd;
;
    break;}
case 179:
#line 786 "SrvParser.y"
{
    if (!ParserOptStack.getLast()->getExperimental()) {
	Log(Crit) << "Experimental 'remote autoconf neighbors' defined, but "
		  << "experimental features are disabled. Add 'experimental' "
		  << "in global section of server.conf to enable it." << LogEnd;
	YYABORT;
    }

    PresentAddrLst.clear();
;
    break;}
case 180:
#line 796 "SrvParser.y"
{
    SPtr<TOpt> opt = new TOptAddrLst(OPTION_NEIGHBORS, PresentAddrLst, 0);
    SrvCfgIfaceLst.getLast()->addExtraOption(opt, false);
    Log(Debug) << "Remote autoconf neighbors enabled (" << PresentAddrLst.count() 
	       << " neighbors defined.)" << LogEnd;
;
    break;}
case 181:
#line 806 "SrvParser.y"
{
    ParserOptStack.getLast()->setIfaceMaxLease(yyvsp[0].ival);
;
    break;}
case 182:
#line 813 "SrvParser.y"
{
    ParserOptStack.getLast()->setUnicast(new TIPv6Addr(yyvsp[0].addrval));
;
    break;}
case 183:
#line 820 "SrvParser.y"
{ 
    if ( (yyvsp[0].ival!=0) && (yyvsp[0].ival!=1)) {
	Log(Crit) << "RAPID-COMMIT  parameter in line " << lex->lineno() << " must have 0 or 1 value." 
               << LogEnd;
	YYABORT;
    }
    if (yyvsp[0].ival==1)
	ParserOptStack.getLast()->setRapidCommit(true); 
    else
	ParserOptStack.getLast()->setRapidCommit(false); 
;
    break;}
case 184:
#line 835 "SrvParser.y"
{ 
    if ((yyvsp[0].ival<0)||(yyvsp[0].ival>255)) {
	Log(Crit) << "Preference value (" << yyvsp[0].ival << ") in line " << lex->lineno() 
		   << " is out of range [0..255]." << LogEnd;
	YYABORT;
    }
    ParserOptStack.getLast()->setPreference(yyvsp[0].ival);    
;
    break;}
case 185:
#line 846 "SrvParser.y"
{
    logger::setLogLevel(yyvsp[0].ival);
;
    break;}
case 186:
#line 852 "SrvParser.y"
{
    logger::setLogMode(yyvsp[0].strval);
;
    break;}
case 187:
#line 858 "SrvParser.y"
{
    logger::setLogName(yyvsp[0].strval);
;
    break;}
case 188:
#line 865 "SrvParser.y"
{
    logger::setColors(yyvsp[0].ival==1);
;
    break;}
case 189:
#line 871 "SrvParser.y"
{
    ParserOptStack.getLast()->setWorkDir(yyvsp[0].strval);
;
    break;}
case 190:
#line 878 "SrvParser.y"
{
    ParserOptStack.getLast()->setStateless(true);
;
    break;}
case 191:
#line 885 "SrvParser.y"
{
    Log(Info) << "Guess-mode enabled: relay interfaces may be loosely defined (matching interface-id is not mandatory)." << LogEnd;
    ParserOptStack.getLast()->setGuessMode(true);
;
    break;}
case 192:
#line 892 "SrvParser.y"
{
    ParserOptStack.getLast()->setInactiveMode(true);
;
    break;}
case 193:
#line 898 "SrvParser.y"
{
    Log(Crit) << "Experimental features are allowed." << LogEnd;
    ParserOptStack.getLast()->setExperimental(true);
;
    break;}
case 194:
#line 905 "SrvParser.y"
{
    if (!strncasecmp(yyvsp[0].strval,"before",6)) 
    {
		ParserOptStack.getLast()->setInterfaceIDOrder(SRV_IFACE_ID_ORDER_BEFORE);
    } else 
    if (!strncasecmp(yyvsp[0].strval,"after",5)) 
    {
		ParserOptStack.getLast()->setInterfaceIDOrder(SRV_IFACE_ID_ORDER_AFTER);
    } else
    if (!strncasecmp(yyvsp[0].strval,"omit",4)) 
    {
		ParserOptStack.getLast()->setInterfaceIDOrder(SRV_IFACE_ID_ORDER_NONE);
    } else 
    {
		Log(Crit) << "Invalid interface-id-order specified. Allowed values: before, after, omit" << LogEnd;
		YYABORT;
    }
;
    break;}
case 195:
#line 926 "SrvParser.y"
{
    ParserOptStack.getLast()->setCacheSize(yyvsp[0].ival);
;
    break;}
case 196:
#line 933 "SrvParser.y"
{
    ParserOptStack.getLast()->setLeaseQuerySupport(true);

;
    break;}
case 197:
#line 938 "SrvParser.y"
{
    switch (yyvsp[0].ival) {
    case 0:
		ParserOptStack.getLast()->setLeaseQuerySupport(false);
		break;
    case 1:
		ParserOptStack.getLast()->setLeaseQuerySupport(true);
		break;
    default:
		Log(Crit) << "Invalid value of accept-leasequery specifed. Allowed values: 0, 1, yes, no, true, false" << LogEnd;
		YYABORT;
    }
;
    break;}
case 198:
#line 957 "SrvParser.y"
{
    ParserOptStack.getLast()->setRelayName(yyvsp[0].strval);
;
    break;}
case 199:
#line 961 "SrvParser.y"
{
    ParserOptStack.getLast()->setRelayID(yyvsp[0].ival);
;
    break;}
case 200:
#line 968 "SrvParser.y"
{
    SPtr<TSrvOptInterfaceID> id = new TSrvOptInterfaceID(yyvsp[0].ival, 0);
    ParserOptStack.getLast()->setRelayInterfaceID(id);
;
    break;}
case 201:
#line 973 "SrvParser.y"
{
    SPtr<TSrvOptInterfaceID> id = new TSrvOptInterfaceID(yyvsp[0].duidval.duid, yyvsp[0].duidval.length, 0);
    ParserOptStack.getLast()->setRelayInterfaceID(id);
;
    break;}
case 202:
#line 978 "SrvParser.y"
{
    SPtr<TSrvOptInterfaceID> id = new TSrvOptInterfaceID(yyvsp[0].strval, strlen(yyvsp[0].strval), 0);
    ParserOptStack.getLast()->setRelayInterfaceID(id);
;
    break;}
case 215:
#line 1001 "SrvParser.y"
{	
    SPtr<TSrvCfgClientClass> clntClass;
    bool found = false;
    SrvCfgClientClassLst.first();
    while (clntClass = SrvCfgClientClassLst.get())
    {
	if (clntClass->getClassName() == string(yyvsp[0].strval))
	    found = true;
    }
    if (!found)
    {
	Log(Crit) << "Line " << lex->lineno()
		  << ": Unable to use class " << string(yyvsp[0].strval) << ", no such class defined." << LogEnd;
	YYABORT;
    }
    ParserOptStack.getLast()->setAllowClientClass(string(yyvsp[0].strval));

    int deny = ParserOptStack.getLast()->getDenyClientClassString().count();

    if (deny)
    {
	Log(Crit) << "Line " << lex->lineno() << ": Unable to define both allow and deny lists for this client class." << LogEnd;
	YYABORT;
    }
	
;
    break;}
case 216:
#line 1030 "SrvParser.y"
{	
    SPtr<TSrvCfgClientClass> clntClass;
    bool found = false;
    SrvCfgClientClassLst.first();
    while (clntClass = SrvCfgClientClassLst.get())
    {
	if (clntClass->getClassName() == string(yyvsp[0].strval))
	    found = true;
    }
    if (!found)
    {
	Log(Crit) << "Line " << lex->lineno()
		  << ": Unable to use class " << string(yyvsp[0].strval) << ", no such class defined." << LogEnd;
	YYABORT;
    }
    ParserOptStack.getLast()->setDenyClientClass(string(yyvsp[0].strval));

    int allow = ParserOptStack.getLast()->getAllowClientClassString().count();

    if (allow)
    {
	Log(Crit) << "Line " << lex->lineno() << ": Unable to define both allow and deny lists for this client class." << LogEnd;
	YYABORT;
    }

;
    break;}
case 217:
#line 1063 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 218:
#line 1066 "SrvParser.y"
{
    ParserOptStack.getLast()->setDNSServerLst(&PresentAddrLst);
;
    break;}
case 219:
#line 1075 "SrvParser.y"
{
    PresentStringLst.clear();
;
    break;}
case 220:
#line 1078 "SrvParser.y"
{ 
    ParserOptStack.getLast()->setDomainLst(&PresentStringLst);
;
    break;}
case 221:
#line 1088 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 222:
#line 1091 "SrvParser.y"
{
    ParserOptStack.getLast()->setNTPServerLst(&PresentAddrLst);
;
    break;}
case 223:
#line 1101 "SrvParser.y"
{ 
    ParserOptStack.getLast()->setTimezone(yyvsp[0].strval); 
;
    break;}
case 224:
#line 1110 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 225:
#line 1113 "SrvParser.y"
{
    ParserOptStack.getLast()->setSIPServerLst(&PresentAddrLst);
;
    break;}
case 226:
#line 1122 "SrvParser.y"
{
    PresentStringLst.clear();
;
    break;}
case 227:
#line 1125 "SrvParser.y"
{
    ParserOptStack.getLast()->setSIPDomainLst(&PresentStringLst);
;
    break;}
case 228:
#line 1136 "SrvParser.y"
{
    PresentFQDNLst.clear();
    Log(Debug)   << "No FQDNMode found, setting default mode 2 (all updates executed by server)." << LogEnd;
    Log(Warning) << "revDNS zoneroot lenght not found, dynamic revDNS update will not be possible." << LogEnd;
    ParserOptStack.getLast()->setFQDNMode(2);
    ParserOptStack.getLast()->setRevDNSZoneRootLength(0);
;
    break;}
case 229:
#line 1143 "SrvParser.y"
{
    ParserOptStack.getLast()->setFQDNLst(&PresentFQDNLst);
;
    break;}
case 230:
#line 1147 "SrvParser.y"
{
    PresentFQDNLst.clear();
    Log(Debug)  << "FQDNMode found, setting value"<< yyvsp[0].ival <<LogEnd;
    Log(Warning)<< "revDNS zoneroot lenght not specified, dynamic revDNS update will not be possible." << LogEnd;
    ParserOptStack.getLast()->setFQDNMode(yyvsp[0].ival);
    ParserOptStack.getLast()->setRevDNSZoneRootLength(0);
;
    break;}
case 231:
#line 1154 "SrvParser.y"
{
    ParserOptStack.getLast()->setFQDNLst(&PresentFQDNLst);
  
;
    break;}
case 232:
#line 1159 "SrvParser.y"
{
    PresentFQDNLst.clear();
    Log(Debug) << "FQDNMode found, setting value " << yyvsp[-1].ival <<LogEnd;
    Log(Debug) << "revDNS zoneroot lenght found, setting value " << yyvsp[0].ival <<LogEnd;
    ParserOptStack.getLast()->setFQDNMode(yyvsp[-1].ival);
    ParserOptStack.getLast()->setRevDNSZoneRootLength(yyvsp[0].ival);
;
    break;}
case 233:
#line 1166 "SrvParser.y"
{
    ParserOptStack.getLast()->setFQDNLst(&PresentFQDNLst);
  
;
    break;}
case 234:
#line 1174 "SrvParser.y"
{
    ParserOptStack.getLast()->acceptUnknownFQDN(true);
    Log(Debug) << "FQDN: Unknown fqdn names will be accepted by the server." << LogEnd;
;
    break;}
case 235:
#line 1183 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 236:
#line 1186 "SrvParser.y"
{
    ParserOptStack.getLast()->setNISServerLst(&PresentAddrLst);
;
    break;}
case 237:
#line 1195 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 238:
#line 1198 "SrvParser.y"
{
    ParserOptStack.getLast()->setNISPServerLst(&PresentAddrLst);
;
    break;}
case 239:
#line 1208 "SrvParser.y"
{
    ParserOptStack.getLast()->setNISDomain(yyvsp[0].strval);
;
    break;}
case 240:
#line 1218 "SrvParser.y"
{
    ParserOptStack.getLast()->setNISPDomain(yyvsp[0].strval);
;
    break;}
case 241:
#line 1228 "SrvParser.y"
{
    ParserOptStack.getLast()->setLifetime(yyvsp[0].ival);
;
    break;}
case 242:
#line 1234 "SrvParser.y"
{
    VendorSpec.clear();
;
    break;}
case 243:
#line 1237 "SrvParser.y"
{
    ParserOptStack.getLast()->setVendorSpec(VendorSpec);
    // Log(Debug) << "Vendor-spec parsing finished" << LogEnd;
;
    break;}
case 244:
#line 1245 "SrvParser.y"
{
    Log(Notice) << "ClientClass found, name: " << string(yyvsp[-1].strval) << LogEnd;
;
    break;}
case 245:
#line 1248 "SrvParser.y"
{
    SPtr<Node> cond =  NodeClientClassLst.getLast();
    SrvCfgClientClassLst.append( new TSrvCfgClientClass(string(yyvsp[-4].strval),cond));
    NodeClientClassLst.delLast();
;
    break;}
case 246:
#line 1258 "SrvParser.y"
{
;
    break;}
case 248:
#line 1264 "SrvParser.y"
{
    SPtr<Node> r =  NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    SPtr<Node> l = NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    NodeClientClassLst.append(new NodeOperator(NodeOperator::OPERATOR_CONTAIN,l,r));
;
    break;}
case 249:
#line 1272 "SrvParser.y"
{
    SPtr<Node> l =  NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    SPtr<Node> r = NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    
    NodeClientClassLst.append(new NodeOperator(NodeOperator::OPERATOR_EQUAL,l,r));
;
    break;}
case 250:
#line 1281 "SrvParser.y"
{
    SPtr<Node> l =  NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    SPtr<Node> r = NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    NodeClientClassLst.append(new NodeOperator(NodeOperator::OPERATOR_AND,l,r));
    
;
    break;}
case 251:
#line 1290 "SrvParser.y"
{
    SPtr<Node> l =  NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    SPtr<Node> r = NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    NodeClientClassLst.append(new NodeOperator(NodeOperator::OPERATOR_OR,l,r));
;
    break;}
case 252:
#line 1301 "SrvParser.y"
{
    NodeClientClassLst.append(new NodeClientSpecific(NodeClientSpecific::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM));
;
    break;}
case 253:
#line 1305 "SrvParser.y"
{
    NodeClientClassLst.append(new NodeClientSpecific(NodeClientSpecific::CLIENT_VENDOR_SPEC_DATA));
;
    break;}
case 254:
#line 1309 "SrvParser.y"
{
    // Log(Info) << "Constant expression found:" <<string($1)<<LogEnd;
    NodeClientClassLst.append(new NodeConstant(string(yyvsp[0].strval)));
;
    break;}
case 255:
#line 1314 "SrvParser.y"
{
    //Log(Info) << "Constant expression found:" <<string($1)<<LogEnd;
    stringstream convert;
    string snum;
    convert<<yyvsp[0].ival;
    convert>>snum;
    NodeClientClassLst.append(new NodeConstant(snum));
;
    break;}
case 256:
#line 1323 "SrvParser.y"
{
    SPtr<Node> l =  NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    NodeClientClassLst.append(new NodeOperator(NodeOperator::OPERATOR_SUBSTRING,l, yyvsp[-3].ival,yyvsp[-1].ival));
;
    break;}
}

#line 839 "../bison++/bison.cc"
   /* the action file gets copied in in place of this dollarsign  */
  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YY_SrvParser_LSP_NEEDED
  yylsp -= yylen;
#endif

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YY_SrvParser_LSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = YY_SrvParser_LLOC.first_line;
      yylsp->first_column = YY_SrvParser_LLOC.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  YYGOTO(yynewstate);

YYLABEL(yyerrlab)   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++YY_SrvParser_NERRS;

#ifdef YY_SrvParser_ERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      YY_SrvParser_ERROR(msg);
	      free(msg);
	    }
	  else
	    YY_SrvParser_ERROR ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YY_SrvParser_ERROR_VERBOSE */
        YY_SrvParser_ERROR((char*)"parse error");
    }

  YYGOTO(yyerrlab1);
YYLABEL(yyerrlab1)   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (YY_SrvParser_CHAR == YYEOF)
	YYABORT;

#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	fprintf(stderr, "Discarding token %d (%s).\n", YY_SrvParser_CHAR, yytname[yychar1]);
#endif

      YY_SrvParser_CHAR = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;              /* Each real token shifted decrements this */

  YYGOTO(yyerrhandle);

YYLABEL(yyerrdefault)  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) YYGOTO(yydefault);
#endif

YYLABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YY_SrvParser_LSP_NEEDED
  yylsp--;
#endif

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

YYLABEL(yyerrhandle)

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yyerrdefault);

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    YYGOTO(yyerrdefault);

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrpop);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrpop);

  if (yyn == YYFINAL)
    YYACCEPT;

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = YY_SrvParser_LVAL;
#ifdef YY_SrvParser_LSP_NEEDED
  *++yylsp = YY_SrvParser_LLOC;
#endif

  yystate = yyn;
  YYGOTO(yynewstate);
/* end loop, in which YYGOTO may be used. */
  YYENDGOTO
}

/* END */

 #line 1038 "../bison++/bison.cc"
#line 1329 "SrvParser.y"


/////////////////////////////////////////////////////////////////////////////
// programs section

/** 
 * method check whether interface with id=ifaceNr has been already declared
 * 
 * @param ifaceNr 
 * 
 * @return true if interface was not declared
 */
bool SrvParser::IfaceDefined(int ifaceNr)
{
  SPtr<TSrvCfgIface> ptr;
  SrvCfgIfaceLst.first();
  while (ptr=SrvCfgIfaceLst.get())
    if ((ptr->getID())==ifaceNr) {
	Log(Crit) << "Interface with ID=" << ifaceNr << " is already defined." << LogEnd;
	return false;
    }
  return true;
}
    
/** 
 * check whether interface with id=ifaceName has been already declared
 * 
 * @param ifaceName 
 * 
 * @return true, if defined, false otherwise
 */
bool SrvParser::IfaceDefined(string ifaceName)
{
  SPtr<TSrvCfgIface> ptr;
  SrvCfgIfaceLst.first();
  while (ptr=SrvCfgIfaceLst.get())
  {
    string presName=ptr->getName();
    if (presName==ifaceName) {
	Log(Crit) << "Interface " << ifaceName << " is already defined." << LogEnd;
	return false;
    }
  }
  return true;
}

/** 
 * method creates new option for just started interface scope
 * clears all lists except the list of interfaces and adds new group
 * 
 */
bool SrvParser::StartIfaceDeclaration(string ifaceName)
{
    if (!IfaceDefined(ifaceName)) 
	return false;

    SrvCfgIfaceLst.append(new TSrvCfgIface(ifaceName));

    // create new option (representing this interface) on the parser stack
    ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
    SrvCfgAddrClassLst.clear();
    VendorSpec.clear();
    ClientLst.clear();

    return true;
}

/** 
 * method creates new option for just started interface scope
 * clears all lists except the list of interfaces and adds new group
 * 
 */
bool SrvParser::StartIfaceDeclaration(int ifindex)
{
    if (!IfaceDefined(ifindex)) 
	return false;

    SrvCfgIfaceLst.append(new TSrvCfgIface(ifindex));

    // create new option (representing this interface) on the parser stack
    ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
    SrvCfgAddrClassLst.clear();
    VendorSpec.clear();
    ClientLst.clear();

    return true;
}


/** 
 * this method is called after inteface declaration has ended. It creates
 * new interface representation used in SrvCfgMgr. Also removes corresponding
 * element from the parser stack
 * 
 * @return true if everything is ok
 */
bool SrvParser::EndIfaceDeclaration()
{
    // get this interface object
    SPtr<TSrvCfgIface> iface = SrvCfgIfaceLst.getLast();

    // set its options
    SrvCfgIfaceLst.getLast()->setOptions(ParserOptStack.getLast());

    // copy all IA objects
    SPtr<TSrvCfgAddrClass> ptrAddrClass;
    SrvCfgAddrClassLst.first();
    while (ptrAddrClass=SrvCfgAddrClassLst.get())
        iface->addAddrClass(ptrAddrClass);
    SrvCfgAddrClassLst.clear();

    // copy all TA objects
    SPtr<TSrvCfgTA> ta;
    SrvCfgTALst.first();
    while (ta=SrvCfgTALst.get())
        iface->addTA(ta);
    SrvCfgTALst.clear();

    SPtr<TSrvCfgPD> pd;
    SrvCfgPDLst.first();
    while (pd=SrvCfgPDLst.get())
        iface->addPD(pd);
    SrvCfgPDLst.clear();

    iface->addClientExceptionsLst(ClientLst);

    // remove last option (representing this interface) from the parser stack
    ParserOptStack.delLast();

    return true;
}   

void SrvParser::StartClassDeclaration()
{
    ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
    SrvCfgAddrClassLst.append(new TSrvCfgAddrClass());
}

/** 
 * this method is adds new object representig just parsed IA class.
 * 
 * @return true if everything works ok.
 */
bool SrvParser::EndClassDeclaration()
{
    if (!ParserOptStack.getLast()->countPool()) {
        Log(Crit) << "No pools defined for this class." << LogEnd;
        return false;
    }
    //setting interface options on the basis of just read information
    SrvCfgAddrClassLst.getLast()->setOptions(ParserOptStack.getLast());
    ParserOptStack.delLast();

    return true;
}


/** 
 * Just add global options
 * 
 */
void SrvParser::StartTAClassDeclaration()
{
  ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
}

bool SrvParser::EndTAClassDeclaration()
{
    if (!ParserOptStack.getLast()->countPool()) {
        Log(Crit) << "No pools defined for this ta-class." << LogEnd;
        return false;
    }
    // create new object representing just parsed TA and add it to the list
    SPtr<TSrvCfgTA> ptrTA = new TSrvCfgTA();
    ptrTA->setOptions(ParserOptStack.getLast());
    SrvCfgTALst.append(ptrTA);

    // remove temporary parser object for this (just finished) scope
    ParserOptStack.delLast();
    return true;
}

void SrvParser::StartPDDeclaration()
{
    ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
    this->PDLst.clear();
    this->PDPrefix = 0;
}

bool SrvParser::EndPDDeclaration()
{
    if (!this->PDLst.count()) {
        Log(Crit) << "No PD pools defined ." << LogEnd;
        return false;
    }
    if (!this->PDPrefix) {
	Log(Crit) << "PD prefix length not defined or set to 0." << LogEnd;
	return false;
    }
	
    int len = 0;
    this->PDLst.first();
    while ( SPtr<TStationRange> pool = PDLst.get() ) {
	if (!len)
	    len = pool->getPrefixLength();
	if (len!=pool->getPrefixLength()) {
	    Log(Crit) << "Prefix pools with different lengths are not supported. Make sure that all 'pd-pool' uses the same prefix length." << LogEnd;
	    return false;
	}
    }
    if (len>PDPrefix) {
	Log(Crit) << "Clients are supposed to get /" << this->PDPrefix << " prefixes, but pd-pool(s) are only /" << len << " long." << LogEnd;
	return false;
    }
    if (len==PDPrefix) {
        Log(Warning) << "Prefix pool /" << PDPrefix << " defined and clients are supposed to get /" << len << " prefixes. Only ONE client will get prefix" << LogEnd;
    }

    SPtr<TSrvCfgPD> ptrPD = new TSrvCfgPD();
    ParserOptStack.getLast()->setPool(&this->PDLst);
    if (!ptrPD->setOptions(ParserOptStack.getLast(), this->PDPrefix))
	return false;
    SrvCfgPDLst.append(ptrPD);

    // remove temporary parser object for this (just finished) scope
    ParserOptStack.delLast();
    return true;
}

namespace std {
    extern yy_SrvParser_stype yylval;
}

int SrvParser::yylex()
{
    memset(&std::yylval,0, sizeof(std::yylval));
    memset(&this->yylval,0, sizeof(this->yylval));
    int x = this->lex->yylex();
    this->yylval=std::yylval;
    return x;
}

void SrvParser::yyerror(char *m)
{
    Log(Crit) << "Config parse error: line " << lex->lineno() 
              << ", unexpected [" << lex->YYText() << "] token." << LogEnd;
}

SrvParser::~SrvParser() {
    this->ParserOptStack.clear();
    this->SrvCfgIfaceLst.clear();
    this->SrvCfgAddrClassLst.clear();
    this->SrvCfgTALst.clear();
    this->PresentAddrLst.clear();
    this->PresentStringLst.clear();
    this->PresentRangeLst.clear();
}

static char bitMask[]= { 0, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff };

SPtr<TIPv6Addr> SrvParser::getRangeMin(char * addrPacked, int prefix) {
    char packed[16];
    char mask;
    memcpy(packed, addrPacked,16);
    if (prefix%8!=0) {
	mask = bitMask[prefix%8];
	packed[prefix/8] = packed[prefix/8] & mask;
	prefix = (prefix/8 + 1)*8;
    }
    for (int i=prefix/8;i<16; i++) {
	packed[i]=0;
    }
    return new TIPv6Addr(packed, false);
}

SPtr<TIPv6Addr> SrvParser::getRangeMax(char * addrPacked, int prefix){
    char packed[16];
    char mask;
    memcpy(packed, addrPacked,16);
    if (prefix%8!=0) {
	mask = bitMask[prefix%8];
	packed[prefix/8] = packed[prefix/8] | ~mask;
	prefix = (prefix/8 + 1)*8;
    }
    for (int i=prefix/8;i<16; i++) {
	packed[i]=0xff;
    }

    return new TIPv6Addr(packed, false);
}
