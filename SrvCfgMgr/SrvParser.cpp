#define YY_SrvParser_h_included
#define YY_USE_CLASS

/*  A Bison++ parser, made from SrvParser.y  */

 /* with Bison++ version bison++ Version 1.21.9-1, adapted from GNU bison by coetmeur@icdc.fr
Maintained by Magnus Ekdahl <magnus@debian.org>
  */

#define YY_USE_CLASS

#line 1 "../bison++/bison.cc"
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Bob Corbett and Richard Stallman

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 1, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  

   As a special exception, when this file is copied by Bison++ into a
   Bison++ output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison, and has been in Bison++ since 1.21.9.  

*/

/* HEADER SECTION */
#if defined( _MSDOS ) || defined(MSDOS) || defined(__MSDOS__) 
 #define __MSDOS_AND_ALIKE
#endif

#if defined(_WINDOWS) && defined(_MSC_VER)
 #define __HAVE_NO_ALLOCA
 #define __MSDOS_AND_ALIKE
#endif

#ifndef alloca
 #if defined( __GNUC__)
  #define alloca __builtin_alloca

 #elif (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc)  || defined (__sgi)
  #include <alloca.h>

 #elif defined (__MSDOS_AND_ALIKE)
  #include <malloc.h>
  #ifndef __TURBOC__
   /* MS C runtime lib */
   #define alloca _alloca
  #endif

 #elif defined(_AIX)
  /* pragma must be put before any C/C++ instruction !! */
  #pragma alloca
  #include <malloc.h>

 #elif defined(__hpux)
  #ifdef __cplusplus
   extern "C" {
     void *alloca (unsigned int);
   };
  #else /* not __cplusplus */
   void *alloca ();
  #endif /* not __cplusplus */

 #endif /* not _AIX  not MSDOS, or __TURBOC__ or _AIX, not sparc.  */
#endif /* alloca not defined.  */

#ifdef c_plusplus
 #ifndef __cplusplus
  #define __cplusplus
 #endif
#endif

#ifdef __cplusplus
 #ifndef YY_USE_CLASS
/*#warning "For C++ its recomended to use bison++, otherwise classes won't be generated"*/
 #endif
#else
 #ifndef __STDC__
  #define const
 #endif
 #ifdef YY_USE_CLASS
  #error "This is a C++ header generated by bison++, please use a C++ compiler!"
 #endif
#endif

#include <stdio.h>
#define YYBISON 1  

 #line 88 "../bison++/bison.cc"
#line 3 "SrvParser.y"

#include <iostream>
#include <string>
#include <malloc.h>
#include "DHCPConst.h"
#include "SmartPtr.h"
#include "Container.h"
#include "SrvParser.h"
#include "SrvParsGlobalOpt.h"
#include "SrvParsClassOpt.h"
#include "SrvParsIfaceOpt.h"
#include "OptAddr.h"
#include "OptAddrLst.h"
#include "OptString.h"
#include "SrvCfgMgr.h"
#include "SrvCfgTA.h"
#include "SrvCfgPD.h"
#include "SrvCfgAddrClass.h"
#include "SrvCfgIface.h"
#include "SrvCfgOptions.h"
#include "DUID.h"
#include "Logger.h"
#include "FQDN.h"
#include "OptVendorSpecInfo.h"
#include "SrvOptAddrParams.h"
#include "Portable.h"
#include "SrvCfgClientClass.h"
#include "Node.h"
#include "NodeConstant.h"
#include "NodeClientSpecific.h"
#include "NodeOperator.h"
#include <sstream>

#define YY_USE_CLASS
#line 39 "SrvParser.y"

#include "FlexLexer.h"
#define YY_SrvParser_MEMBERS  FlexLexer * lex;                                                     \
List(TSrvParsGlobalOpt) ParserOptStack;    /* list of parsed interfaces/IAs/addrs */ \
List(TSrvCfgIface) SrvCfgIfaceLst;         /* list of SrvCfg interfaces */           \
List(TSrvCfgAddrClass) SrvCfgAddrClassLst; /* list of SrvCfg address classes */      \
List(TSrvCfgTA) SrvCfgTALst;               /* list of SrvCfg TA objects */           \
List(TSrvCfgPD) SrvCfgPDLst;		   /* list of SrvCfg PD objects */           \
List(TSrvCfgClientClass) SrvCfgClientClassLst; /* list of SrvCfgClientClass objs */  \
List(TIPv6Addr) PresentAddrLst;            /* address list (used for DNS,NTP,etc.)*/ \
List(string) PresentStringLst;             /* string list */                         \
List(Node) NodeClientClassLst;             /* Node list */                           \
List(TFQDN) PresentFQDNLst;                                                          \
SPtr<TIPv6Addr> addr;                                                                \
List(TStationRange) PresentRangeLst;                                                 \
List(TStationRange) PDLst;                                                           \
List(TSrvCfgOptions) ClientLst;                                                      \
int PDPrefix;                                                                        \
bool IfaceDefined(int ifaceNr);                                                      \
bool IfaceDefined(string ifaceName);                                                 \
bool StartIfaceDeclaration(string iface);                                            \
bool StartIfaceDeclaration(int ifindex);                                             \
bool EndIfaceDeclaration();                                                          \
void StartClassDeclaration();                                                        \
bool EndClassDeclaration();                                                          \
SPtr<TIPv6Addr> getRangeMin(char * addrPacked, int prefix);                          \
SPtr<TIPv6Addr> getRangeMax(char * addrPacked, int prefix);                          \
void StartTAClassDeclaration();                                                      \
bool EndTAClassDeclaration();                                                        \
void StartPDDeclaration();                                                           \
bool EndPDDeclaration();                                                             \
TSrvCfgMgr * CfgMgr;                                                                 \
virtual ~SrvParser();
#define YY_SrvParser_CONSTRUCTOR_PARAM  yyFlexLexer * lex
#define YY_SrvParser_CONSTRUCTOR_CODE                                                           \
    ParserOptStack.append(new TSrvParsGlobalOpt());                               \
    this->lex = lex;

#line 82 "SrvParser.y"
typedef union
{
    unsigned int ival;
    char *strval;
    struct SDuid
    {
	int length;
	char* duid;
    } duidval;
    char addrval[16];
} yy_SrvParser_stype;
#define YY_SrvParser_STYPE yy_SrvParser_stype

#line 88 "../bison++/bison.cc"
/* %{ and %header{ and %union, during decl */
#define YY_SrvParser_BISON 1

#ifndef YY_SrvParser_COMPATIBILITY
 #ifndef YY_USE_CLASS
  #define  YY_SrvParser_COMPATIBILITY 1
 #else
  #define  YY_SrvParser_COMPATIBILITY 0
 #endif
#endif

#if YY_SrvParser_COMPATIBILITY != 0
 /* backward compatibility */
 #ifdef YYLTYPE
  #ifndef YY_SrvParser_LTYPE
   #define YY_SrvParser_LTYPE YYLTYPE
  #endif
 #endif
/* Testing alternative bison solution
   /#ifdef YYSTYPE*/
#ifndef YY_SrvParser_STYPE 
   #define YY_SrvParser_STYPE YYSTYPE
#endif
/*#endif*/
 #ifdef YYDEBUG
  #ifndef YY_SrvParser_DEBUG
   #define  YY_SrvParser_DEBUG YYDEBUG
  #endif
 #endif
 
 /* use goto to be compatible */
 #ifndef YY_SrvParser_USE_GOTO
  #define YY_SrvParser_USE_GOTO 1
 #endif
#endif

/* use no goto to be clean in C++ */
#ifndef YY_SrvParser_USE_GOTO
 #define YY_SrvParser_USE_GOTO 0
#endif

#ifndef YY_SrvParser_PURE

 #line 130 "../bison++/bison.cc"

#line 130 "../bison++/bison.cc"
/*  YY_SrvParser_PURE */
#endif

/* section apres lecture def, avant lecture grammaire S2 */

 #line 134 "../bison++/bison.cc"

#line 134 "../bison++/bison.cc"
/* prefix */
#ifndef YY_SrvParser_DEBUG

 #line 136 "../bison++/bison.cc"
#define YY_SrvParser_DEBUG 1

#line 136 "../bison++/bison.cc"
/* YY_SrvParser_DEBUG */
#endif


#ifndef YY_SrvParser_LSP_NEEDED

 #line 141 "../bison++/bison.cc"

#line 141 "../bison++/bison.cc"
 /* YY_SrvParser_LSP_NEEDED*/
#endif



/* DEFAULT LTYPE*/
#ifdef YY_SrvParser_LSP_NEEDED
#ifndef YY_SrvParser_LTYPE
#ifndef BISON_YYLTYPE_ISDECLARED
#define BISON_YYLTYPE_ISDECLARED
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#endif
#define YY_SrvParser_LTYPE yyltype
#endif
#endif
/* DEFAULT STYPE*/
      /* We used to use `unsigned long' as YY_SrvParser_STYPE on MSDOS,
	 but it seems better to be consistent.
	 Most programs should declare their own type anyway.  */

#ifndef YY_SrvParser_STYPE
#define YY_SrvParser_STYPE int
#endif
/* DEFAULT MISCELANEOUS */
#ifndef YY_SrvParser_PARSE
#define YY_SrvParser_PARSE yyparse
#endif
#ifndef YY_SrvParser_LEX
#define YY_SrvParser_LEX yylex
#endif
#ifndef YY_SrvParser_LVAL
#define YY_SrvParser_LVAL yylval
#endif
#ifndef YY_SrvParser_LLOC
#define YY_SrvParser_LLOC yylloc
#endif
#ifndef YY_SrvParser_CHAR
#define YY_SrvParser_CHAR yychar
#endif
#ifndef YY_SrvParser_NERRS
#define YY_SrvParser_NERRS yynerrs
#endif
#ifndef YY_SrvParser_DEBUG_FLAG
#define YY_SrvParser_DEBUG_FLAG yydebug
#endif
#ifndef YY_SrvParser_ERROR
#define YY_SrvParser_ERROR yyerror
#endif

#ifndef YY_SrvParser_PARSE_PARAM
 #ifndef YY_USE_CLASS
  #ifdef YYPARSE_PARAM
   #define YY_SrvParser_PARSE_PARAM void* YYPARSE_PARAM 
  #else
   #ifndef __STDC__
    #ifndef __cplusplus
     #define YY_SrvParser_PARSE_PARAM
    #endif
   #endif
  #endif
 #endif
 #ifndef YY_SrvParser_PARSE_PARAM
  #define YY_SrvParser_PARSE_PARAM void
 #endif
#endif

#if YY_SrvParser_COMPATIBILITY != 0
/* backward compatibility */
#ifdef YY_SrvParser_LTYPE
#ifndef YYLTYPE
#define YYLTYPE YY_SrvParser_LTYPE
#else
/* WARNING obsolete !!! user defined YYLTYPE not reported into generated header */
#endif
#endif

/* Removed due to bison compabilityproblems
/#ifndef YYSTYPE
/#define YYSTYPE YY_SrvParser_STYPE
/#else*/
/* WARNING obsolete !!! user defined YYSTYPE not reported into generated header */
/*#endif*/

#ifdef YY_SrvParser_PURE
#  ifndef YYPURE
#    define YYPURE YY_SrvParser_PURE
#  endif
#endif

#ifdef YY_SrvParser_DEBUG
#  ifndef YYDEBUG
#    define YYDEBUG YY_SrvParser_DEBUG 
#  endif
#endif

#ifndef YY_SrvParser_ERROR_VERBOSE
 #ifdef YYERROR_VERBOSE
  #define YY_SrvParser_ERROR_VERBOSE YYERROR_VERBOSE
 #endif
#endif

#ifndef YY_SrvParser_LSP_NEEDED
#  ifdef YYLSP_NEEDED
#    define YY_SrvParser_LSP_NEEDED YYLSP_NEEDED
#  endif
#endif

#endif

#ifndef YY_USE_CLASS
/* TOKEN C */

 #line 263 "../bison++/bison.cc"
#define	IFACE_	258
#define	RELAY_	259
#define	IFACE_ID_	260
#define	IFACE_ID_ORDER_	261
#define	CLASS_	262
#define	TACLASS_	263
#define	LOGNAME_	264
#define	LOGLEVEL_	265
#define	LOGMODE_	266
#define	LOGCOLORS_	267
#define	WORKDIR_	268
#define	OPTION_	269
#define	DNS_SERVER_	270
#define	DOMAIN_	271
#define	NTP_SERVER_	272
#define	TIME_ZONE_	273
#define	SIP_SERVER_	274
#define	SIP_DOMAIN_	275
#define	NIS_SERVER_	276
#define	NIS_DOMAIN_	277
#define	NISP_SERVER_	278
#define	NISP_DOMAIN_	279
#define	LIFETIME_	280
#define	FQDN_	281
#define	ACCEPT_UNKNOWN_FQDN_	282
#define	FQDN_DDNS_ADDRESS_	283
#define	ACCEPT_ONLY_	284
#define	REJECT_CLIENTS_	285
#define	POOL_	286
#define	SHARE_	287
#define	T1_	288
#define	T2_	289
#define	PREF_TIME_	290
#define	VALID_TIME_	291
#define	UNICAST_	292
#define	PREFERENCE_	293
#define	RAPID_COMMIT_	294
#define	IFACE_MAX_LEASE_	295
#define	CLASS_MAX_LEASE_	296
#define	CLNT_MAX_LEASE_	297
#define	STATELESS_	298
#define	CACHE_SIZE_	299
#define	PDCLASS_	300
#define	PD_LENGTH_	301
#define	PD_POOL_	302
#define	VENDOR_SPEC_	303
#define	CLIENT_	304
#define	DUID_KEYWORD_	305
#define	REMOTE_ID_	306
#define	ADDRESS_	307
#define	GUESS_MODE_	308
#define	INACTIVE_MODE_	309
#define	EXPERIMENTAL_	310
#define	ADDR_PARAMS_	311
#define	REMOTE_AUTOCONF_NEIGHBORS_	312
#define	AFTR_	313
#define	AUTH_METHOD_	314
#define	AUTH_LIFETIME_	315
#define	AUTH_KEY_LEN_	316
#define	DIGEST_NONE_	317
#define	DIGEST_PLAIN_	318
#define	DIGEST_HMAC_MD5_	319
#define	DIGEST_HMAC_SHA1_	320
#define	DIGEST_HMAC_SHA224_	321
#define	DIGEST_HMAC_SHA256_	322
#define	DIGEST_HMAC_SHA384_	323
#define	DIGEST_HMAC_SHA512_	324
#define	ACCEPT_LEASEQUERY_	325
#define	BULKLQ_ACCEPT_	326
#define	BULKLQ_TCPPORT_	327
#define	BULKLQ_MAX_CONNS_	328
#define	BULKLQ_TIMEOUT_	329
#define	CLIENT_CLASS_	330
#define	MATCH_IF_	331
#define	EQ_	332
#define	AND_	333
#define	OR_	334
#define	CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_	335
#define	CLIENT_VENDOR_SPEC_DATA_	336
#define	CLIENT_VENDOR_CLASS_EN_	337
#define	CLIENT_VENDOR_CLASS_DATA_	338
#define	ALLOW_	339
#define	DENY_	340
#define	SUBSTRING_	341
#define	STRING_KEYWORD_	342
#define	ADDRESS_LIST_	343
#define	CONTAIN_	344
#define	STRING_	345
#define	HEXNUMBER_	346
#define	INTNUMBER_	347
#define	IPV6ADDR_	348
#define	DUID_	349


#line 263 "../bison++/bison.cc"
 /* #defines tokens */
#else
/* CLASS */
#ifndef YY_SrvParser_CLASS
#define YY_SrvParser_CLASS SrvParser
#endif
#ifndef YY_SrvParser_INHERIT
#define YY_SrvParser_INHERIT
#endif
#ifndef YY_SrvParser_MEMBERS
#define YY_SrvParser_MEMBERS 
#endif
#ifndef YY_SrvParser_LEX_BODY
#define YY_SrvParser_LEX_BODY  
#endif
#ifndef YY_SrvParser_ERROR_BODY
#define YY_SrvParser_ERROR_BODY  
#endif
#ifndef YY_SrvParser_CONSTRUCTOR_PARAM
#define YY_SrvParser_CONSTRUCTOR_PARAM
#endif
#ifndef YY_SrvParser_CONSTRUCTOR_CODE
#define YY_SrvParser_CONSTRUCTOR_CODE
#endif
#ifndef YY_SrvParser_CONSTRUCTOR_INIT
#define YY_SrvParser_CONSTRUCTOR_INIT
#endif
/* choose between enum and const */
#ifndef YY_SrvParser_USE_CONST_TOKEN
#define YY_SrvParser_USE_CONST_TOKEN 0
/* yes enum is more compatible with flex,  */
/* so by default we use it */ 
#endif
#if YY_SrvParser_USE_CONST_TOKEN != 0
#ifndef YY_SrvParser_ENUM_TOKEN
#define YY_SrvParser_ENUM_TOKEN yy_SrvParser_enum_token
#endif
#endif

class YY_SrvParser_CLASS YY_SrvParser_INHERIT
{
public: 
#if YY_SrvParser_USE_CONST_TOKEN != 0
/* static const int token ... */

 #line 307 "../bison++/bison.cc"
static const int IFACE_;
static const int RELAY_;
static const int IFACE_ID_;
static const int IFACE_ID_ORDER_;
static const int CLASS_;
static const int TACLASS_;
static const int LOGNAME_;
static const int LOGLEVEL_;
static const int LOGMODE_;
static const int LOGCOLORS_;
static const int WORKDIR_;
static const int OPTION_;
static const int DNS_SERVER_;
static const int DOMAIN_;
static const int NTP_SERVER_;
static const int TIME_ZONE_;
static const int SIP_SERVER_;
static const int SIP_DOMAIN_;
static const int NIS_SERVER_;
static const int NIS_DOMAIN_;
static const int NISP_SERVER_;
static const int NISP_DOMAIN_;
static const int LIFETIME_;
static const int FQDN_;
static const int ACCEPT_UNKNOWN_FQDN_;
static const int FQDN_DDNS_ADDRESS_;
static const int ACCEPT_ONLY_;
static const int REJECT_CLIENTS_;
static const int POOL_;
static const int SHARE_;
static const int T1_;
static const int T2_;
static const int PREF_TIME_;
static const int VALID_TIME_;
static const int UNICAST_;
static const int PREFERENCE_;
static const int RAPID_COMMIT_;
static const int IFACE_MAX_LEASE_;
static const int CLASS_MAX_LEASE_;
static const int CLNT_MAX_LEASE_;
static const int STATELESS_;
static const int CACHE_SIZE_;
static const int PDCLASS_;
static const int PD_LENGTH_;
static const int PD_POOL_;
static const int VENDOR_SPEC_;
static const int CLIENT_;
static const int DUID_KEYWORD_;
static const int REMOTE_ID_;
static const int ADDRESS_;
static const int GUESS_MODE_;
static const int INACTIVE_MODE_;
static const int EXPERIMENTAL_;
static const int ADDR_PARAMS_;
static const int REMOTE_AUTOCONF_NEIGHBORS_;
static const int AFTR_;
static const int AUTH_METHOD_;
static const int AUTH_LIFETIME_;
static const int AUTH_KEY_LEN_;
static const int DIGEST_NONE_;
static const int DIGEST_PLAIN_;
static const int DIGEST_HMAC_MD5_;
static const int DIGEST_HMAC_SHA1_;
static const int DIGEST_HMAC_SHA224_;
static const int DIGEST_HMAC_SHA256_;
static const int DIGEST_HMAC_SHA384_;
static const int DIGEST_HMAC_SHA512_;
static const int ACCEPT_LEASEQUERY_;
static const int BULKLQ_ACCEPT_;
static const int BULKLQ_TCPPORT_;
static const int BULKLQ_MAX_CONNS_;
static const int BULKLQ_TIMEOUT_;
static const int CLIENT_CLASS_;
static const int MATCH_IF_;
static const int EQ_;
static const int AND_;
static const int OR_;
static const int CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_;
static const int CLIENT_VENDOR_SPEC_DATA_;
static const int CLIENT_VENDOR_CLASS_EN_;
static const int CLIENT_VENDOR_CLASS_DATA_;
static const int ALLOW_;
static const int DENY_;
static const int SUBSTRING_;
static const int STRING_KEYWORD_;
static const int ADDRESS_LIST_;
static const int CONTAIN_;
static const int STRING_;
static const int HEXNUMBER_;
static const int INTNUMBER_;
static const int IPV6ADDR_;
static const int DUID_;


#line 307 "../bison++/bison.cc"
 /* decl const */
#else
enum YY_SrvParser_ENUM_TOKEN { YY_SrvParser_NULL_TOKEN=0

 #line 310 "../bison++/bison.cc"
	,IFACE_=258
	,RELAY_=259
	,IFACE_ID_=260
	,IFACE_ID_ORDER_=261
	,CLASS_=262
	,TACLASS_=263
	,LOGNAME_=264
	,LOGLEVEL_=265
	,LOGMODE_=266
	,LOGCOLORS_=267
	,WORKDIR_=268
	,OPTION_=269
	,DNS_SERVER_=270
	,DOMAIN_=271
	,NTP_SERVER_=272
	,TIME_ZONE_=273
	,SIP_SERVER_=274
	,SIP_DOMAIN_=275
	,NIS_SERVER_=276
	,NIS_DOMAIN_=277
	,NISP_SERVER_=278
	,NISP_DOMAIN_=279
	,LIFETIME_=280
	,FQDN_=281
	,ACCEPT_UNKNOWN_FQDN_=282
	,FQDN_DDNS_ADDRESS_=283
	,ACCEPT_ONLY_=284
	,REJECT_CLIENTS_=285
	,POOL_=286
	,SHARE_=287
	,T1_=288
	,T2_=289
	,PREF_TIME_=290
	,VALID_TIME_=291
	,UNICAST_=292
	,PREFERENCE_=293
	,RAPID_COMMIT_=294
	,IFACE_MAX_LEASE_=295
	,CLASS_MAX_LEASE_=296
	,CLNT_MAX_LEASE_=297
	,STATELESS_=298
	,CACHE_SIZE_=299
	,PDCLASS_=300
	,PD_LENGTH_=301
	,PD_POOL_=302
	,VENDOR_SPEC_=303
	,CLIENT_=304
	,DUID_KEYWORD_=305
	,REMOTE_ID_=306
	,ADDRESS_=307
	,GUESS_MODE_=308
	,INACTIVE_MODE_=309
	,EXPERIMENTAL_=310
	,ADDR_PARAMS_=311
	,REMOTE_AUTOCONF_NEIGHBORS_=312
	,AFTR_=313
	,AUTH_METHOD_=314
	,AUTH_LIFETIME_=315
	,AUTH_KEY_LEN_=316
	,DIGEST_NONE_=317
	,DIGEST_PLAIN_=318
	,DIGEST_HMAC_MD5_=319
	,DIGEST_HMAC_SHA1_=320
	,DIGEST_HMAC_SHA224_=321
	,DIGEST_HMAC_SHA256_=322
	,DIGEST_HMAC_SHA384_=323
	,DIGEST_HMAC_SHA512_=324
	,ACCEPT_LEASEQUERY_=325
	,BULKLQ_ACCEPT_=326
	,BULKLQ_TCPPORT_=327
	,BULKLQ_MAX_CONNS_=328
	,BULKLQ_TIMEOUT_=329
	,CLIENT_CLASS_=330
	,MATCH_IF_=331
	,EQ_=332
	,AND_=333
	,OR_=334
	,CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_=335
	,CLIENT_VENDOR_SPEC_DATA_=336
	,CLIENT_VENDOR_CLASS_EN_=337
	,CLIENT_VENDOR_CLASS_DATA_=338
	,ALLOW_=339
	,DENY_=340
	,SUBSTRING_=341
	,STRING_KEYWORD_=342
	,ADDRESS_LIST_=343
	,CONTAIN_=344
	,STRING_=345
	,HEXNUMBER_=346
	,INTNUMBER_=347
	,IPV6ADDR_=348
	,DUID_=349


#line 310 "../bison++/bison.cc"
 /* enum token */
     }; /* end of enum declaration */
#endif
public:
 int YY_SrvParser_PARSE (YY_SrvParser_PARSE_PARAM);
 virtual void YY_SrvParser_ERROR(char *msg) YY_SrvParser_ERROR_BODY;
#ifdef YY_SrvParser_PURE
#ifdef YY_SrvParser_LSP_NEEDED
 virtual int  YY_SrvParser_LEX (YY_SrvParser_STYPE *YY_SrvParser_LVAL,YY_SrvParser_LTYPE *YY_SrvParser_LLOC) YY_SrvParser_LEX_BODY;
#else
 virtual int  YY_SrvParser_LEX (YY_SrvParser_STYPE *YY_SrvParser_LVAL) YY_SrvParser_LEX_BODY;
#endif
#else
 virtual int YY_SrvParser_LEX() YY_SrvParser_LEX_BODY;
 YY_SrvParser_STYPE YY_SrvParser_LVAL;
#ifdef YY_SrvParser_LSP_NEEDED
 YY_SrvParser_LTYPE YY_SrvParser_LLOC;
#endif
 int   YY_SrvParser_NERRS;
 int    YY_SrvParser_CHAR;
#endif
#if YY_SrvParser_DEBUG != 0
 int YY_SrvParser_DEBUG_FLAG;   /*  nonzero means print parse trace     */
#endif
public:
 YY_SrvParser_CLASS(YY_SrvParser_CONSTRUCTOR_PARAM);
public:
 YY_SrvParser_MEMBERS 
};
/* other declare folow */
#if YY_SrvParser_USE_CONST_TOKEN != 0

 #line 341 "../bison++/bison.cc"
const int YY_SrvParser_CLASS::IFACE_=258;
const int YY_SrvParser_CLASS::RELAY_=259;
const int YY_SrvParser_CLASS::IFACE_ID_=260;
const int YY_SrvParser_CLASS::IFACE_ID_ORDER_=261;
const int YY_SrvParser_CLASS::CLASS_=262;
const int YY_SrvParser_CLASS::TACLASS_=263;
const int YY_SrvParser_CLASS::LOGNAME_=264;
const int YY_SrvParser_CLASS::LOGLEVEL_=265;
const int YY_SrvParser_CLASS::LOGMODE_=266;
const int YY_SrvParser_CLASS::LOGCOLORS_=267;
const int YY_SrvParser_CLASS::WORKDIR_=268;
const int YY_SrvParser_CLASS::OPTION_=269;
const int YY_SrvParser_CLASS::DNS_SERVER_=270;
const int YY_SrvParser_CLASS::DOMAIN_=271;
const int YY_SrvParser_CLASS::NTP_SERVER_=272;
const int YY_SrvParser_CLASS::TIME_ZONE_=273;
const int YY_SrvParser_CLASS::SIP_SERVER_=274;
const int YY_SrvParser_CLASS::SIP_DOMAIN_=275;
const int YY_SrvParser_CLASS::NIS_SERVER_=276;
const int YY_SrvParser_CLASS::NIS_DOMAIN_=277;
const int YY_SrvParser_CLASS::NISP_SERVER_=278;
const int YY_SrvParser_CLASS::NISP_DOMAIN_=279;
const int YY_SrvParser_CLASS::LIFETIME_=280;
const int YY_SrvParser_CLASS::FQDN_=281;
const int YY_SrvParser_CLASS::ACCEPT_UNKNOWN_FQDN_=282;
const int YY_SrvParser_CLASS::FQDN_DDNS_ADDRESS_=283;
const int YY_SrvParser_CLASS::ACCEPT_ONLY_=284;
const int YY_SrvParser_CLASS::REJECT_CLIENTS_=285;
const int YY_SrvParser_CLASS::POOL_=286;
const int YY_SrvParser_CLASS::SHARE_=287;
const int YY_SrvParser_CLASS::T1_=288;
const int YY_SrvParser_CLASS::T2_=289;
const int YY_SrvParser_CLASS::PREF_TIME_=290;
const int YY_SrvParser_CLASS::VALID_TIME_=291;
const int YY_SrvParser_CLASS::UNICAST_=292;
const int YY_SrvParser_CLASS::PREFERENCE_=293;
const int YY_SrvParser_CLASS::RAPID_COMMIT_=294;
const int YY_SrvParser_CLASS::IFACE_MAX_LEASE_=295;
const int YY_SrvParser_CLASS::CLASS_MAX_LEASE_=296;
const int YY_SrvParser_CLASS::CLNT_MAX_LEASE_=297;
const int YY_SrvParser_CLASS::STATELESS_=298;
const int YY_SrvParser_CLASS::CACHE_SIZE_=299;
const int YY_SrvParser_CLASS::PDCLASS_=300;
const int YY_SrvParser_CLASS::PD_LENGTH_=301;
const int YY_SrvParser_CLASS::PD_POOL_=302;
const int YY_SrvParser_CLASS::VENDOR_SPEC_=303;
const int YY_SrvParser_CLASS::CLIENT_=304;
const int YY_SrvParser_CLASS::DUID_KEYWORD_=305;
const int YY_SrvParser_CLASS::REMOTE_ID_=306;
const int YY_SrvParser_CLASS::ADDRESS_=307;
const int YY_SrvParser_CLASS::GUESS_MODE_=308;
const int YY_SrvParser_CLASS::INACTIVE_MODE_=309;
const int YY_SrvParser_CLASS::EXPERIMENTAL_=310;
const int YY_SrvParser_CLASS::ADDR_PARAMS_=311;
const int YY_SrvParser_CLASS::REMOTE_AUTOCONF_NEIGHBORS_=312;
const int YY_SrvParser_CLASS::AFTR_=313;
const int YY_SrvParser_CLASS::AUTH_METHOD_=314;
const int YY_SrvParser_CLASS::AUTH_LIFETIME_=315;
const int YY_SrvParser_CLASS::AUTH_KEY_LEN_=316;
const int YY_SrvParser_CLASS::DIGEST_NONE_=317;
const int YY_SrvParser_CLASS::DIGEST_PLAIN_=318;
const int YY_SrvParser_CLASS::DIGEST_HMAC_MD5_=319;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA1_=320;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA224_=321;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA256_=322;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA384_=323;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA512_=324;
const int YY_SrvParser_CLASS::ACCEPT_LEASEQUERY_=325;
const int YY_SrvParser_CLASS::BULKLQ_ACCEPT_=326;
const int YY_SrvParser_CLASS::BULKLQ_TCPPORT_=327;
const int YY_SrvParser_CLASS::BULKLQ_MAX_CONNS_=328;
const int YY_SrvParser_CLASS::BULKLQ_TIMEOUT_=329;
const int YY_SrvParser_CLASS::CLIENT_CLASS_=330;
const int YY_SrvParser_CLASS::MATCH_IF_=331;
const int YY_SrvParser_CLASS::EQ_=332;
const int YY_SrvParser_CLASS::AND_=333;
const int YY_SrvParser_CLASS::OR_=334;
const int YY_SrvParser_CLASS::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_=335;
const int YY_SrvParser_CLASS::CLIENT_VENDOR_SPEC_DATA_=336;
const int YY_SrvParser_CLASS::CLIENT_VENDOR_CLASS_EN_=337;
const int YY_SrvParser_CLASS::CLIENT_VENDOR_CLASS_DATA_=338;
const int YY_SrvParser_CLASS::ALLOW_=339;
const int YY_SrvParser_CLASS::DENY_=340;
const int YY_SrvParser_CLASS::SUBSTRING_=341;
const int YY_SrvParser_CLASS::STRING_KEYWORD_=342;
const int YY_SrvParser_CLASS::ADDRESS_LIST_=343;
const int YY_SrvParser_CLASS::CONTAIN_=344;
const int YY_SrvParser_CLASS::STRING_=345;
const int YY_SrvParser_CLASS::HEXNUMBER_=346;
const int YY_SrvParser_CLASS::INTNUMBER_=347;
const int YY_SrvParser_CLASS::IPV6ADDR_=348;
const int YY_SrvParser_CLASS::DUID_=349;


#line 341 "../bison++/bison.cc"
 /* const YY_SrvParser_CLASS::token */
#endif
/*apres const  */
YY_SrvParser_CLASS::YY_SrvParser_CLASS(YY_SrvParser_CONSTRUCTOR_PARAM) YY_SrvParser_CONSTRUCTOR_INIT
{
#if YY_SrvParser_DEBUG != 0
YY_SrvParser_DEBUG_FLAG=0;
#endif
YY_SrvParser_CONSTRUCTOR_CODE;
}
#endif

 #line 352 "../bison++/bison.cc"


#define	YYFINAL		406
#define	YYFLAG		-32768
#define	YYNTBASE	102

#define YYTRANSLATE(x) ((unsigned)(x) <= 349 ? yytranslate[x] : 216)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   100,
   101,     2,     2,    98,    97,     2,    99,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    95,     2,    96,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94
};

#if YY_SrvParser_DEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     5,     7,    10,    13,    15,    17,    19,
    21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
    41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
    61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
    81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
   101,   103,   105,   107,   109,   111,   112,   119,   120,   127,
   129,   132,   134,   136,   139,   142,   143,   151,   152,   162,
   164,   167,   169,   171,   173,   175,   177,   179,   181,   183,
   185,   187,   189,   191,   193,   195,   197,   200,   201,   207,
   209,   212,   213,   219,   221,   224,   226,   228,   230,   232,
   234,   236,   238,   240,   241,   247,   249,   252,   254,   256,
   258,   260,   262,   264,   266,   268,   271,   274,   277,   280,
   283,   286,   289,   292,   295,   298,   300,   304,   308,   312,
   318,   324,   326,   328,   330,   334,   340,   348,   350,   354,
   356,   360,   364,   368,   374,   378,   380,   384,   388,   394,
   396,   400,   404,   410,   411,   415,   416,   420,   421,   425,
   426,   430,   433,   436,   441,   444,   449,   452,   455,   460,
   463,   468,   471,   474,   477,   481,   486,   491,   492,   498,
   503,   504,   509,   512,   515,   518,   521,   524,   527,   530,
   533,   536,   538,   540,   542,   544,   547,   550,   552,   555,
   558,   561,   564,   567,   570,   573,   576,   579,   582,   584,
   586,   588,   590,   592,   594,   596,   598,   600,   602,   604,
   606,   609,   612,   613,   618,   619,   624,   625,   630,   634,
   635,   640,   641,   646,   647,   652,   653,   659,   660,   667,
   671,   674,   677,   678,   683,   684,   689,   693,   697,   701,
   702,   707,   708,   715,   718,   719,   725,   731,   737,   743,
   745,   747,   749,   751
};

static const short yyrhs[] = {   103,
     0,     0,   104,     0,   106,     0,   103,   104,     0,   103,
   106,     0,   105,     0,   165,     0,   164,     0,   166,     0,
   167,     0,   168,     0,   169,     0,   174,     0,   127,     0,
   128,     0,   129,     0,   172,     0,   173,     0,   201,     0,
   170,     0,   211,     0,   182,     0,   180,     0,   181,     0,
   175,     0,   176,     0,   177,     0,   178,     0,   179,     0,
   161,     0,   163,     0,   162,     0,   160,     0,   152,     0,
   185,     0,   187,     0,   189,     0,   191,     0,   192,     0,
   194,     0,   196,     0,   200,     0,   202,     0,   206,     0,
   204,     0,   207,     0,   155,     0,   208,     0,   156,     0,
   158,     0,   123,     0,   209,     0,   110,     0,   171,     0,
     0,     3,    90,    95,   107,   109,    96,     0,     0,     3,
   131,    95,   108,   109,    96,     0,   105,     0,   109,   105,
     0,   116,     0,   119,     0,   109,   119,     0,   109,   116,
     0,     0,    49,    50,    94,    95,   111,   113,    96,     0,
     0,    49,    51,   131,    97,    94,    95,   112,   113,    96,
     0,   114,     0,   113,   114,     0,   185,     0,   187,     0,
   189,     0,   191,     0,   192,     0,   194,     0,   202,     0,
   206,     0,   204,     0,   207,     0,   208,     0,   209,     0,
   156,     0,   155,     0,   115,     0,    52,    93,     0,     0,
     7,    95,   117,   118,    96,     0,   182,     0,   118,   182,
     0,     0,     8,    95,   120,   121,    96,     0,   122,     0,
   121,   122,     0,   147,     0,   148,     0,   142,     0,   153,
     0,   138,     0,   140,     0,   183,     0,   184,     0,     0,
    45,    95,   124,   125,    96,     0,   126,     0,   126,   125,
     0,   146,     0,   144,     0,   148,     0,   147,     0,   150,
     0,   151,     0,   183,     0,   184,     0,    59,    62,     0,
    59,    63,     0,    59,    64,     0,    59,    65,     0,    59,
    66,     0,    59,    67,     0,    59,    68,     0,    59,    69,
     0,    60,   131,     0,    61,   131,     0,    90,     0,    90,
    97,    94,     0,    90,    97,    93,     0,   130,    98,    90,
     0,   130,    98,    90,    97,    94,     0,   130,    98,    90,
    97,    93,     0,    91,     0,    92,     0,    93,     0,   132,
    98,    93,     0,   131,    97,   131,    97,    94,     0,   133,
    98,   131,    97,   131,    97,    94,     0,    90,     0,   134,
    98,    90,     0,    93,     0,    93,    97,    93,     0,    93,
    99,    92,     0,   135,    98,    93,     0,   135,    98,    93,
    97,    93,     0,    93,    99,    92,     0,    93,     0,    93,
    97,    93,     0,   137,    98,    93,     0,   137,    98,    93,
    97,    93,     0,    94,     0,    94,    97,    94,     0,   137,
    98,    94,     0,   137,    98,    94,    97,    94,     0,     0,
    30,   139,   137,     0,     0,    29,   141,   137,     0,     0,
    31,   143,   135,     0,     0,    47,   145,   136,     0,    46,
   131,     0,    35,   131,     0,    35,   131,    97,   131,     0,
    36,   131,     0,    36,   131,    97,   131,     0,    32,   131,
     0,    33,   131,     0,    33,   131,    97,   131,     0,    34,
   131,     0,    34,   131,    97,   131,     0,    42,   131,     0,
    41,   131,     0,    56,   131,     0,    14,    58,    90,     0,
    14,   131,    97,    94,     0,    14,   131,    52,    93,     0,
     0,    14,   131,    88,   157,   132,     0,    14,   131,    87,
    90,     0,     0,    14,    57,   159,   132,     0,    40,   131,
     0,    37,    93,     0,    39,   131,     0,    38,   131,     0,
    10,   131,     0,    11,    90,     0,     9,    90,     0,    12,
   131,     0,    13,    90,     0,    43,     0,    53,     0,    54,
     0,    55,     0,     6,    90,     0,    44,   131,     0,    70,
     0,    70,   131,     0,    71,   131,     0,    72,   131,     0,
    73,   131,     0,    74,   131,     0,     4,    90,     0,     4,
   131,     0,     5,   131,     0,     5,    94,     0,     5,    90,
     0,   147,     0,   148,     0,   142,     0,   149,     0,   150,
     0,   151,     0,   138,     0,   140,     0,   153,     0,   154,
     0,   183,     0,   184,     0,    84,    90,     0,    85,    90,
     0,     0,    14,    15,   186,   132,     0,     0,    14,    16,
   188,   134,     0,     0,    14,    17,   190,   132,     0,    14,
    18,    90,     0,     0,    14,    19,   193,   132,     0,     0,
    14,    20,   195,   134,     0,     0,    14,    26,   197,   130,
     0,     0,    14,    26,    92,   198,   130,     0,     0,    14,
    26,    92,    92,   199,   130,     0,    27,   131,    90,     0,
    27,   131,     0,    28,    93,     0,     0,    14,    21,   203,
   132,     0,     0,    14,    23,   205,   132,     0,    14,    22,
    90,     0,    14,    24,    90,     0,    14,    25,   131,     0,
     0,    14,    48,   210,   133,     0,     0,    75,    90,    95,
   212,   213,    96,     0,    76,   214,     0,     0,   100,   215,
    89,   215,   101,     0,   100,   215,    77,   215,   101,     0,
   100,   214,    78,   214,   101,     0,   100,   214,    79,   214,
   101,     0,    80,     0,    81,     0,    90,     0,   131,     0,
    86,   100,   215,    98,   131,    98,   131,   101,     0
};

#endif

#if (YY_SrvParser_DEBUG != 0) || defined(YY_SrvParser_ERROR_VERBOSE) 
static const short yyrline[] = { 0,
   144,   145,   149,   150,   151,   152,   156,   157,   158,   159,
   160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
   170,   171,   177,   178,   179,   180,   181,   182,   183,   184,
   185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
   195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
   205,   206,   207,   208,   209,   214,   219,   227,   232,   238,
   239,   240,   241,   242,   243,   247,   253,   261,   267,   276,
   277,   281,   282,   283,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   298,   307,   312,   320,
   321,   326,   329,   337,   338,   341,   342,   343,   344,   345,
   346,   347,   348,   352,   355,   363,   364,   367,   368,   369,
   370,   371,   372,   373,   374,   382,   383,   384,   385,   386,
   387,   388,   389,   393,   397,   405,   410,   417,   424,   429,
   436,   446,   447,   451,   455,   462,   469,   478,   479,   483,
   487,   496,   512,   516,   528,   551,   555,   564,   568,   577,
   582,   592,   597,   611,   615,   621,   625,   631,   635,   641,
   644,   649,   656,   661,   669,   674,   682,   694,   699,   707,
   712,   720,   727,   734,   747,   755,   761,   769,   773,   778,
   786,   797,   806,   813,   820,   835,   847,   853,   858,   865,
   871,   878,   885,   892,   898,   905,   926,   937,   942,   958,
   969,   975,   981,   990,   994,  1001,  1006,  1011,  1019,  1020,
  1021,  1022,  1023,  1024,  1025,  1026,  1027,  1028,  1029,  1030,
  1034,  1063,  1096,  1100,  1109,  1112,  1121,  1125,  1134,  1144,
  1147,  1156,  1159,  1169,  1177,  1180,  1188,  1192,  1200,  1207,
  1212,  1220,  1231,  1234,  1243,  1246,  1255,  1265,  1275,  1282,
  1284,  1291,  1294,  1304,  1310,  1310,  1318,  1327,  1336,  1347,
  1351,  1355,  1360,  1369
};

static const char * const yytname[] = {   "$","error","$illegal.","IFACE_","RELAY_",
"IFACE_ID_","IFACE_ID_ORDER_","CLASS_","TACLASS_","LOGNAME_","LOGLEVEL_","LOGMODE_",
"LOGCOLORS_","WORKDIR_","OPTION_","DNS_SERVER_","DOMAIN_","NTP_SERVER_","TIME_ZONE_",
"SIP_SERVER_","SIP_DOMAIN_","NIS_SERVER_","NIS_DOMAIN_","NISP_SERVER_","NISP_DOMAIN_",
"LIFETIME_","FQDN_","ACCEPT_UNKNOWN_FQDN_","FQDN_DDNS_ADDRESS_","ACCEPT_ONLY_",
"REJECT_CLIENTS_","POOL_","SHARE_","T1_","T2_","PREF_TIME_","VALID_TIME_","UNICAST_",
"PREFERENCE_","RAPID_COMMIT_","IFACE_MAX_LEASE_","CLASS_MAX_LEASE_","CLNT_MAX_LEASE_",
"STATELESS_","CACHE_SIZE_","PDCLASS_","PD_LENGTH_","PD_POOL_","VENDOR_SPEC_",
"CLIENT_","DUID_KEYWORD_","REMOTE_ID_","ADDRESS_","GUESS_MODE_","INACTIVE_MODE_",
"EXPERIMENTAL_","ADDR_PARAMS_","REMOTE_AUTOCONF_NEIGHBORS_","AFTR_","AUTH_METHOD_",
"AUTH_LIFETIME_","AUTH_KEY_LEN_","DIGEST_NONE_","DIGEST_PLAIN_","DIGEST_HMAC_MD5_",
"DIGEST_HMAC_SHA1_","DIGEST_HMAC_SHA224_","DIGEST_HMAC_SHA256_","DIGEST_HMAC_SHA384_",
"DIGEST_HMAC_SHA512_","ACCEPT_LEASEQUERY_","BULKLQ_ACCEPT_","BULKLQ_TCPPORT_",
"BULKLQ_MAX_CONNS_","BULKLQ_TIMEOUT_","CLIENT_CLASS_","MATCH_IF_","EQ_","AND_",
"OR_","CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_","CLIENT_VENDOR_SPEC_DATA_","CLIENT_VENDOR_CLASS_EN_",
"CLIENT_VENDOR_CLASS_DATA_","ALLOW_","DENY_","SUBSTRING_","STRING_KEYWORD_",
"ADDRESS_LIST_","CONTAIN_","STRING_","HEXNUMBER_","INTNUMBER_","IPV6ADDR_","DUID_",
"'{'","'}'","'-'","','","'/'","'('","')'","Grammar","GlobalDeclarationList",
"GlobalOption","InterfaceOptionDeclaration","InterfaceDeclaration","@1","@2",
"InterfaceDeclarationsList","Client","@3","@4","ClientOptions","ClientOption",
"AddressReservation","ClassDeclaration","@5","ClassOptionDeclarationsList","TAClassDeclaration",
"@6","TAClassOptionsList","TAClassOption","PDDeclaration","@7","PDOptionsList",
"PDOptions","AuthMethod","AuthLifetime","AuthKeyGenNonceLen","FQDNList","Number",
"ADDRESSList","VendorSpecList","StringList","ADDRESSRangeList","PDRangeList",
"ADDRESSDUIDRangeList","RejectClientsOption","@8","AcceptOnlyOption","@9","PoolOption",
"@10","PDPoolOption","@11","PDLength","PreferredTimeOption","ValidTimeOption",
"ShareOption","T1Option","T2Option","ClntMaxLeaseOption","ClassMaxLeaseOption",
"AddrParams","DsLiteAftrName","ExtraOption","@12","RemoteAutoconfNeighborsOption",
"@13","IfaceMaxLeaseOption","UnicastAddressOption","RapidCommitOption","PreferenceOption",
"LogLevelOption","LogModeOption","LogNameOption","LogColors","WorkDirOption",
"StatelessOption","GuessMode","InactiveMode","Experimental","IfaceIDOrder","CacheSizeOption",
"AcceptLeaseQuery","BulkLeaseQueryAccept","BulkLeaseQueryTcpPort","BulkLeaseQueryMaxConns",
"BulkLeaseQueryTimeout","RelayOption","InterfaceIDOption","ClassOptionDeclaration",
"AllowClientClassDeclaration","DenyClientClassDeclaration","DNSServerOption",
"@14","DomainOption","@15","NTPServerOption","@16","TimeZoneOption","SIPServerOption",
"@17","SIPDomainOption","@18","FQDNOption","@19","@20","@21","AcceptUnknownFQDN",
"FqdnDdnsAddress","NISServerOption","@22","NISPServerOption","@23","NISDomainOption",
"NISPDomainOption","LifetimeOption","VendorSpecOption","@24","ClientClass","@25",
"ClientClassDecleration","Condition","Expr",""
};
#endif

static const short yyr1[] = {     0,
   102,   102,   103,   103,   103,   103,   104,   104,   104,   104,
   104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
   104,   104,   105,   105,   105,   105,   105,   105,   105,   105,
   105,   105,   105,   105,   105,   105,   105,   105,   105,   105,
   105,   105,   105,   105,   105,   105,   105,   105,   105,   105,
   105,   105,   105,   105,   105,   107,   106,   108,   106,   109,
   109,   109,   109,   109,   109,   111,   110,   112,   110,   113,
   113,   114,   114,   114,   114,   114,   114,   114,   114,   114,
   114,   114,   114,   114,   114,   114,   115,   117,   116,   118,
   118,   120,   119,   121,   121,   122,   122,   122,   122,   122,
   122,   122,   122,   124,   123,   125,   125,   126,   126,   126,
   126,   126,   126,   126,   126,   127,   127,   127,   127,   127,
   127,   127,   127,   128,   129,   130,   130,   130,   130,   130,
   130,   131,   131,   132,   132,   133,   133,   134,   134,   135,
   135,   135,   135,   135,   136,   137,   137,   137,   137,   137,
   137,   137,   137,   139,   138,   141,   140,   143,   142,   145,
   144,   146,   147,   147,   148,   148,   149,   150,   150,   151,
   151,   152,   153,   154,   155,   156,   156,   157,   156,   156,
   159,   158,   160,   161,   162,   163,   164,   165,   166,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   175,   176,
   177,   178,   179,   180,   180,   181,   181,   181,   182,   182,
   182,   182,   182,   182,   182,   182,   182,   182,   182,   182,
   183,   184,   186,   185,   188,   187,   190,   189,   191,   193,
   192,   195,   194,   197,   196,   198,   196,   199,   196,   200,
   200,   201,   203,   202,   205,   204,   206,   207,   208,   210,
   209,   212,   211,   213,   214,   214,   214,   214,   214,   215,
   215,   215,   215,   215
};

static const short yyr2[] = {     0,
     1,     0,     1,     1,     2,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     0,     6,     0,     6,     1,
     2,     1,     1,     2,     2,     0,     7,     0,     9,     1,
     2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     2,     0,     5,     1,
     2,     0,     5,     1,     2,     1,     1,     1,     1,     1,
     1,     1,     1,     0,     5,     1,     2,     1,     1,     1,
     1,     1,     1,     1,     1,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     3,     3,     5,
     5,     1,     1,     1,     3,     5,     7,     1,     3,     1,
     3,     3,     3,     5,     3,     1,     3,     3,     5,     1,
     3,     3,     5,     0,     3,     0,     3,     0,     3,     0,
     3,     2,     2,     4,     2,     4,     2,     2,     4,     2,
     4,     2,     2,     2,     3,     4,     4,     0,     5,     4,
     0,     4,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     1,     1,     1,     1,     2,     2,     1,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     2,     2,     0,     4,     0,     4,     0,     4,     3,     0,
     4,     0,     4,     0,     4,     0,     5,     0,     6,     3,
     2,     2,     0,     4,     0,     4,     3,     3,     3,     0,
     4,     0,     6,     2,     0,     5,     5,     5,     5,     1,
     1,     1,     1,     8
};

static const short yydefact[] = {     2,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   156,   154,   158,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   192,     0,     0,     0,
   193,   194,   195,     0,     0,     0,     0,   198,     0,     0,
     0,     0,     0,     0,     0,     1,     3,     7,     4,    54,
    52,    15,    16,    17,   215,   216,   211,   209,   210,   212,
   213,   214,    35,   217,   218,    48,    50,    51,    34,    31,
    33,    32,     9,     8,    10,    11,    12,    13,    21,    55,
    18,    19,    14,    26,    27,    28,    29,    30,    24,    25,
    23,   219,   220,    36,    37,    38,    39,    40,    41,    42,
    43,    20,    44,    46,    45,    47,    49,    53,    22,     0,
   132,   133,     0,   204,   205,   208,   207,   206,   196,   189,
   187,   188,   190,   191,   223,   225,   227,     0,   230,   232,
   243,     0,   245,     0,     0,   234,   250,   181,     0,     0,
   241,   242,     0,     0,     0,   167,   168,   170,   163,   165,
   184,   186,   185,   183,   173,   172,   197,   104,     0,     0,
   174,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   199,   200,   201,   202,   203,     0,   221,   222,     5,
     6,    56,    58,     0,     0,     0,   229,     0,     0,     0,
   247,     0,   248,   249,   236,     0,     0,     0,   175,     0,
     0,   178,     0,   240,   146,   150,   157,   155,   140,   159,
     0,     0,     0,     0,     0,     0,     0,   252,     0,     0,
   134,   224,   138,   226,   228,   231,   233,   244,   246,   238,
     0,   126,   235,     0,   251,   182,   177,   180,     0,   176,
     0,     0,     0,     0,     0,     0,   169,   171,   164,   166,
     0,   160,     0,   106,   109,   108,   111,   110,   112,   113,
   114,   115,    66,     0,     0,     0,     0,    60,     0,    62,
    63,     0,     0,     0,     0,   237,     0,     0,     0,     0,
   179,   147,   151,   148,   152,   141,   142,   143,   162,     0,
   105,   107,     0,     0,   255,     0,    88,    92,    57,    61,
    65,    64,    59,   135,   139,   239,   128,   127,   129,     0,
     0,     0,     0,     0,     0,   161,     0,     0,     0,    70,
    86,    85,    84,    72,    73,    74,    75,    76,    77,    78,
    80,    79,    81,    82,    83,    68,   255,   254,   253,     0,
     0,     0,     0,     0,   149,   153,   144,     0,    87,    67,
    71,     0,   260,   261,     0,   262,   263,     0,     0,     0,
    90,     0,    94,   100,   101,    98,    96,    97,    99,   102,
   103,   131,   130,   136,     0,   145,     0,     0,   255,   255,
     0,     0,    89,    91,    93,    95,     0,    69,     0,     0,
     0,     0,     0,   137,     0,   258,   259,   257,   256,     0,
     0,     0,   264,     0,     0,     0
};

static const short yydefgoto[] = {   404,
    46,    47,    48,    49,   219,   220,   269,    50,   293,   352,
   319,   320,   321,   270,   340,   360,   271,   341,   362,   363,
    51,   215,   253,   254,    52,    53,    54,   233,   357,   222,
   235,   224,   210,   316,   207,    55,   144,    56,   143,    57,
   145,   255,   290,   256,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,   239,    68,   198,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,   184,    95,   185,    96,   186,    97,    98,
   188,    99,   189,   100,   196,   231,   275,   101,   102,   103,
   190,   104,   192,   105,   106,   107,   108,   197,   109,   265,
   296,   338,   359
};

static const short yypact[] = {   291,
   -60,   101,   198,   -29,    19,    95,    24,    95,    36,   250,
    95,    47,-32768,-32768,-32768,    95,    95,    95,    95,    95,
    50,    95,    95,    95,    95,    95,-32768,    95,    59,   170,
-32768,-32768,-32768,    95,   430,    95,    95,    95,    95,    95,
    95,    95,    56,    67,    90,   291,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    94,
-32768,-32768,   114,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   127,-32768,-32768,
-32768,   132,-32768,   144,    95,   150,-32768,-32768,   154,    97,
   159,-32768,   135,   135,   184,-32768,   151,   183,   194,   196,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   205,    95,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   211,-32768,-32768,-32768,
-32768,-32768,-32768,   216,   220,   216,-32768,   216,   220,   216,
-32768,   216,-32768,-32768,   219,   222,    95,   216,-32768,   221,
   223,-32768,   243,-32768,   218,   241,   255,   255,    63,   257,
    95,    95,    95,    95,   454,   244,   259,-32768,   374,   374,
-32768,   269,-32768,   271,   269,   269,   271,   269,   269,-32768,
   222,   260,   273,   276,   279,   269,-32768,-32768,   216,-32768,
   224,   289,   158,   292,   294,   296,-32768,-32768,-32768,-32768,
    95,-32768,   288,   454,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   293,   314,   297,   298,-32768,    51,-32768,
-32768,   134,   302,   301,   222,   273,   160,   306,    95,    95,
   269,-32768,-32768,   300,   305,-32768,-32768,   320,-32768,   325,
-32768,-32768,    12,   303,   299,   324,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   273,-32768,-32768,   327,   328,
   329,   334,   335,   349,   323,-32768,   416,   350,    14,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   155,-32768,-32768,   450,
   202,   168,   363,    95,-32768,-32768,-32768,   368,-32768,-32768,
-32768,    12,-32768,-32768,   362,-32768,-32768,   185,   -17,   420,
-32768,   436,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   366,-32768,    15,   268,   299,   299,
   268,   268,-32768,-32768,-32768,-32768,   375,-32768,   370,   369,
   372,   377,   401,-32768,    95,-32768,-32768,-32768,-32768,   405,
    95,   408,-32768,   475,   510,-32768
};

static const short yypgoto[] = {-32768,
-32768,   465,  -157,   466,-32768,-32768,   295,-32768,-32768,-32768,
   161,  -306,-32768,  -215,-32768,-32768,  -156,-32768,-32768,   152,
-32768,-32768,   263,-32768,-32768,-32768,-32768,  -223,    -1,   182,
-32768,   330,-32768,-32768,   378,  -293,-32768,  -267,-32768,  -242,
-32768,-32768,-32768,-32768,  -212,  -211,-32768,  -203,  -201,-32768,
  -146,-32768,  -273,  -249,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -243,
  -209,  -204,  -246,-32768,  -244,-32768,  -225,-32768,  -175,  -174,
-32768,  -138,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -137,
-32768,   -96,-32768,   -95,   -94,   -93,   -92,-32768,-32768,-32768,
-32768,  -303,  -280
};


#define	YYLAST		539


static const short yytable[] = {   113,
   115,   118,   257,   258,   121,   261,   123,   276,   140,   141,
   262,   259,   351,   260,   146,   147,   148,   149,   150,   322,
   152,   153,   154,   155,   156,   317,   157,   317,   317,   110,
   111,   112,   161,   358,   170,   171,   172,   173,   174,   175,
   176,   257,   258,   323,   261,   322,   324,   364,   325,   262,
   259,   306,   260,   301,     2,     3,   301,   266,   267,   381,
   119,   268,   268,   318,    10,   318,   318,   326,   364,   323,
   351,   382,   324,   365,   325,   390,   391,    11,   322,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,   326,   365,    29,   361,   389,   366,    30,
   392,   393,   323,   322,    32,   324,    34,   325,   120,   350,
   388,   300,   302,   122,   300,   302,   384,   327,   328,   366,
    38,    39,    40,    41,    42,   124,   326,   323,   367,   368,
   324,   370,   325,   194,    44,    45,   371,     2,     3,   142,
   266,   267,   151,   327,   328,   177,   299,    10,   200,   367,
   368,   326,   370,   158,   329,   330,   178,   371,   217,   244,
    11,   245,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,   327,   328,    29,   179,
   329,   330,    30,   201,   202,   111,   112,    32,   182,    34,
   114,   111,   112,   203,   369,   234,   331,   332,   333,   334,
   335,   327,   328,    38,    39,    40,    41,    42,   183,   247,
   248,   249,   250,   329,   330,   369,   187,    44,    45,   159,
   160,   191,   331,   332,   333,   334,   335,   205,   206,   303,
    13,    14,    15,   193,   353,   354,    19,    20,   329,   330,
   355,   195,    25,   199,   356,   111,   112,   211,   204,   289,
   284,   285,   307,   308,   337,   331,   332,   333,   334,   335,
   372,   373,   379,   380,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   209,   310,   311,   212,
   331,   332,   333,   334,   335,    44,    45,   116,   111,   112,
   213,   117,   214,     1,     2,     3,     4,   137,   216,     5,
     6,     7,     8,     9,    10,   218,   138,   139,   221,   223,
   230,   232,   238,   237,   241,   140,   282,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,   240,   242,   263,    30,
   111,   112,   375,    31,    32,    33,    34,   353,   354,    35,
    36,    37,   243,   355,   246,   264,   277,   356,   111,   112,
    38,    39,    40,    41,    42,    43,   273,   225,   274,   226,
   278,   228,   279,   229,    44,    45,   280,     2,     3,   236,
   266,   267,   283,   291,   286,   287,   294,    10,   288,   295,
   305,   297,   298,   400,   304,   309,   312,   336,   337,   402,
    11,   313,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,   314,   315,    29,   339,
   281,   348,    30,   342,   343,   344,   345,    32,   346,    34,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   347,   349,    38,    39,    40,    41,    42,    13,    14,
    15,    16,    17,    18,    19,    20,   374,    44,    45,   376,
    25,   378,   387,   137,    13,    14,    15,   395,   394,   396,
    19,    20,   397,   139,   405,    34,    25,   398,    13,    14,
    15,    16,    17,    18,    19,    20,    17,    18,    19,    20,
    25,   162,   163,   164,   165,   166,   167,   168,   169,   251,
   252,   399,   401,    44,    45,    34,   111,   112,   403,   406,
   180,   181,   377,   386,   272,   383,   292,     0,   227,    44,
    45,   208,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   385,     0,    44,    45,     0,     0,    44,    45
};

static const short yycheck[] = {     1,
     2,     3,   215,   215,     6,   215,     8,   231,    10,    11,
   215,   215,   319,   215,    16,    17,    18,    19,    20,   293,
    22,    23,    24,    25,    26,    14,    28,    14,    14,    90,
    91,    92,    34,   337,    36,    37,    38,    39,    40,    41,
    42,   254,   254,   293,   254,   319,   293,   341,   293,   254,
   254,   275,   254,   269,     4,     5,   272,     7,     8,    77,
    90,   219,   220,    52,    14,    52,    52,   293,   362,   319,
   377,    89,   319,   341,   319,   379,   380,    27,   352,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,   319,   362,    45,   340,   378,   341,    49,
   381,   382,   352,   377,    54,   352,    56,   352,    90,    96,
    96,   269,   269,    90,   272,   272,   360,   293,   293,   362,
    70,    71,    72,    73,    74,    90,   352,   377,   341,   341,
   377,   341,   377,   135,    84,    85,   341,     4,     5,    93,
     7,     8,    93,   319,   319,    90,    96,    14,    52,   362,
   362,   377,   362,    95,   293,   293,    90,   362,   160,    97,
    27,    99,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,   352,   352,    45,    90,
   319,   319,    49,    87,    88,    91,    92,    54,    95,    56,
    90,    91,    92,    97,   341,   197,   293,   293,   293,   293,
   293,   377,   377,    70,    71,    72,    73,    74,    95,   211,
   212,   213,   214,   352,   352,   362,    90,    84,    85,    50,
    51,    90,   319,   319,   319,   319,   319,    93,    94,    96,
    29,    30,    31,    90,    80,    81,    35,    36,   377,   377,
    86,    92,    41,    90,    90,    91,    92,    97,    90,   251,
    93,    94,    93,    94,   100,   352,   352,   352,   352,   352,
    93,    94,    78,    79,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    93,   279,   280,    97,
   377,   377,   377,   377,   377,    84,    85,    90,    91,    92,
    97,    94,    97,     3,     4,     5,     6,    48,    94,     9,
    10,    11,    12,    13,    14,    95,    57,    58,    93,    90,
    92,    90,    90,    93,    97,   317,    93,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    94,    97,    95,    49,
    91,    92,   344,    53,    54,    55,    56,    80,    81,    59,
    60,    61,    98,    86,    98,    97,    97,    90,    91,    92,
    70,    71,    72,    73,    74,    75,    98,   186,    98,   188,
    98,   190,    97,   192,    84,    85,    98,     4,     5,   198,
     7,     8,    94,    96,    93,    92,    94,    14,    93,    76,
    90,    95,    95,   395,    93,    90,    97,    95,   100,   401,
    27,    97,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    97,    93,    45,    96,
   239,    99,    49,    97,    97,    97,    93,    54,    94,    56,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    93,    93,    70,    71,    72,    73,    74,    29,    30,
    31,    32,    33,    34,    35,    36,    94,    84,    85,    92,
    41,   100,    97,    48,    29,    30,    31,    98,    94,   101,
    35,    36,   101,    58,     0,    56,    41,   101,    29,    30,
    31,    32,    33,    34,    35,    36,    33,    34,    35,    36,
    41,    62,    63,    64,    65,    66,    67,    68,    69,    46,
    47,   101,    98,    84,    85,    56,    91,    92,   101,     0,
    46,    46,   352,   362,   220,    96,   254,    -1,   189,    84,
    85,   144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    96,    -1,    84,    85,    -1,    -1,    84,    85
};

#line 352 "../bison++/bison.cc"
 /* fattrs + tables */

/* parser code folow  */


/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: dollar marks section change
   the next  is replaced by the list of actions, each action
   as one case of the switch.  */ 

#if YY_SrvParser_USE_GOTO != 0
/* 
 SUPRESSION OF GOTO : on some C++ compiler (sun c++)
  the goto is strictly forbidden if any constructor/destructor
  is used in the whole function (very stupid isn't it ?)
 so goto are to be replaced with a 'while/switch/case construct'
 here are the macro to keep some apparent compatibility
*/
#define YYGOTO(lb) {yy_gotostate=lb;continue;}
#define YYBEGINGOTO  enum yy_labels yy_gotostate=yygotostart; \
                     for(;;) switch(yy_gotostate) { case yygotostart: {
#define YYLABEL(lb) } case lb: {
#define YYENDGOTO } } 
#define YYBEGINDECLARELABEL enum yy_labels {yygotostart
#define YYDECLARELABEL(lb) ,lb
#define YYENDDECLARELABEL  }
#else
/* macro to keep goto */
#define YYGOTO(lb) goto lb
#define YYBEGINGOTO 
#define YYLABEL(lb) lb:
#define YYENDGOTO
#define YYBEGINDECLARELABEL 
#define YYDECLARELABEL(lb)
#define YYENDDECLARELABEL  
#endif
/* LABEL DECLARATION */
YYBEGINDECLARELABEL
  YYDECLARELABEL(yynewstate)
  YYDECLARELABEL(yybackup)
/* YYDECLARELABEL(yyresume) */
  YYDECLARELABEL(yydefault)
  YYDECLARELABEL(yyreduce)
  YYDECLARELABEL(yyerrlab)   /* here on detecting error */
  YYDECLARELABEL(yyerrlab1)   /* here on error raised explicitly by an action */
  YYDECLARELABEL(yyerrdefault)  /* current state does not do anything special for the error token. */
  YYDECLARELABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */
  YYDECLARELABEL(yyerrhandle)  
YYENDDECLARELABEL
/* ALLOCA SIMULATION */
/* __HAVE_NO_ALLOCA */
#ifdef __HAVE_NO_ALLOCA
int __alloca_free_ptr(char *ptr,char *ref)
{if(ptr!=ref) free(ptr);
 return 0;}

#define __ALLOCA_alloca(size) malloc(size)
#define __ALLOCA_free(ptr,ref) __alloca_free_ptr((char *)ptr,(char *)ref)

#ifdef YY_SrvParser_LSP_NEEDED
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		    __ALLOCA_free(yyls,yylsa)+\
		   (num)); } while(0)
#else
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		   (num)); } while(0)
#endif
#else
#define __ALLOCA_return(num) do { return(num); } while(0)
#define __ALLOCA_alloca(size) alloca(size)
#define __ALLOCA_free(ptr,ref) 
#endif

/* ENDALLOCA SIMULATION */

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (YY_SrvParser_CHAR = YYEMPTY)
#define YYEMPTY         -2
#define YYEOF           0
#define YYACCEPT        __ALLOCA_return(0)
#define YYABORT         __ALLOCA_return(1)
#define YYERROR         YYGOTO(yyerrlab1)
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL          YYGOTO(yyerrlab)
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do                                                              \
  if (YY_SrvParser_CHAR == YYEMPTY && yylen == 1)                               \
    { YY_SrvParser_CHAR = (token), YY_SrvParser_LVAL = (value);                 \
      yychar1 = YYTRANSLATE (YY_SrvParser_CHAR);                                \
      YYPOPSTACK;                                               \
      YYGOTO(yybackup);                                            \
    }                                                           \
  else                                                          \
    { YY_SrvParser_ERROR ("syntax error: cannot back up"); YYERROR; }   \
while (0)

#define YYTERROR        1
#define YYERRCODE       256

#ifndef YY_SrvParser_PURE
/* UNPURE */
#define YYLEX           YY_SrvParser_LEX()
#ifndef YY_USE_CLASS
/* If nonreentrant, and not class , generate the variables here */
int     YY_SrvParser_CHAR;                      /*  the lookahead symbol        */
YY_SrvParser_STYPE      YY_SrvParser_LVAL;              /*  the semantic value of the */
				/*  lookahead symbol    */
int YY_SrvParser_NERRS;                 /*  number of parse errors so far */
#ifdef YY_SrvParser_LSP_NEEDED
YY_SrvParser_LTYPE YY_SrvParser_LLOC;   /*  location data for the lookahead     */
			/*  symbol                              */
#endif
#endif


#else
/* PURE */
#ifdef YY_SrvParser_LSP_NEEDED
#define YYLEX           YY_SrvParser_LEX(&YY_SrvParser_LVAL, &YY_SrvParser_LLOC)
#else
#define YYLEX           YY_SrvParser_LEX(&YY_SrvParser_LVAL)
#endif
#endif
#ifndef YY_USE_CLASS
#if YY_SrvParser_DEBUG != 0
int YY_SrvParser_DEBUG_FLAG;                    /*  nonzero means print parse trace     */
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif
#endif



/*  YYINITDEPTH indicates the initial size of the parser's stacks       */

#ifndef YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif


#if __GNUC__ > 1                /* GNU C and GNU C++ define this.  */
#define __yy_bcopy(FROM,TO,COUNT)       __builtin_memcpy(TO,FROM,COUNT)
#else                           /* not GNU C or C++ */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */

#ifdef __cplusplus
static void __yy_bcopy (char *from, char *to, int count)
#else
#ifdef __STDC__
static void __yy_bcopy (char *from, char *to, int count)
#else
static void __yy_bcopy (from, to, count)
     char *from;
     char *to;
     int count;
#endif
#endif
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}
#endif


int
#ifdef YY_USE_CLASS
 YY_SrvParser_CLASS::
#endif
     YY_SrvParser_PARSE(YY_SrvParser_PARSE_PARAM)
#ifndef __STDC__
#ifndef __cplusplus
#ifndef YY_USE_CLASS
/* parameter definition without protypes */
YY_SrvParser_PARSE_PARAM_DEF
#endif
#endif
#endif
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YY_SrvParser_STYPE *yyvsp;
  int yyerrstatus;      /*  number of tokens to shift before error messages enabled */
  int yychar1=0;          /*  lookahead token as an internal (translated) token number */

  short yyssa[YYINITDEPTH];     /*  the state stack                     */
  YY_SrvParser_STYPE yyvsa[YYINITDEPTH];        /*  the semantic value stack            */

  short *yyss = yyssa;          /*  refer to the stacks thru separate pointers */
  YY_SrvParser_STYPE *yyvs = yyvsa;     /*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YY_SrvParser_LSP_NEEDED
  YY_SrvParser_LTYPE yylsa[YYINITDEPTH];        /*  the location stack                  */
  YY_SrvParser_LTYPE *yyls = yylsa;
  YY_SrvParser_LTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YY_SrvParser_PURE
  int YY_SrvParser_CHAR;
  YY_SrvParser_STYPE YY_SrvParser_LVAL;
  int YY_SrvParser_NERRS;
#ifdef YY_SrvParser_LSP_NEEDED
  YY_SrvParser_LTYPE YY_SrvParser_LLOC;
#endif
#endif

  YY_SrvParser_STYPE yyval;             /*  the variable used to return         */
				/*  semantic values from the action     */
				/*  routines                            */

  int yylen;
/* start loop, in which YYGOTO may be used. */
YYBEGINGOTO

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    fprintf(stderr, "Starting parse\n");
#endif
  yystate = 0;
  yyerrstatus = 0;
  YY_SrvParser_NERRS = 0;
  YY_SrvParser_CHAR = YYEMPTY;          /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YY_SrvParser_LSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
YYLABEL(yynewstate)

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YY_SrvParser_STYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YY_SrvParser_LSP_NEEDED
      YY_SrvParser_LTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YY_SrvParser_LSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YY_SrvParser_LSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	    YY_SrvParser_ERROR(((char*)"parser stack overflow"));
	  __ALLOCA_return(2);
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) __ALLOCA_alloca (yystacksize * sizeof (*yyssp));
      __yy_bcopy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      __ALLOCA_free(yyss1,yyssa);
      yyvs = (YY_SrvParser_STYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yyvsp));
      __yy_bcopy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
      __ALLOCA_free(yyvs1,yyvsa);
#ifdef YY_SrvParser_LSP_NEEDED
      yyls = (YY_SrvParser_LTYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yylsp));
      __yy_bcopy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
      __ALLOCA_free(yyls1,yylsa);
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YY_SrvParser_LSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  YYGOTO(yybackup);
YYLABEL(yybackup)

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* YYLABEL(yyresume) */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yydefault);

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (YY_SrvParser_CHAR == YYEMPTY)
    {
#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	fprintf(stderr, "Reading a token: ");
#endif
      YY_SrvParser_CHAR = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (YY_SrvParser_CHAR <= 0)           /* This means end of input. */
    {
      yychar1 = 0;
      YY_SrvParser_CHAR = YYEOF;                /* Don't call YYLEX any more */

#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(YY_SrvParser_CHAR);

#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	{
	  fprintf (stderr, "Next token is %d (%s", YY_SrvParser_CHAR, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, YY_SrvParser_CHAR, YY_SrvParser_LVAL);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    YYGOTO(yydefault);

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrlab);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrlab);

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting token %d (%s), ", YY_SrvParser_CHAR, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (YY_SrvParser_CHAR != YYEOF)
    YY_SrvParser_CHAR = YYEMPTY;

  *++yyvsp = YY_SrvParser_LVAL;
#ifdef YY_SrvParser_LSP_NEEDED
  *++yylsp = YY_SrvParser_LLOC;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  YYGOTO(yynewstate);

/* Do the default action for the current state.  */
YYLABEL(yydefault)

  yyn = yydefact[yystate];
  if (yyn == 0)
    YYGOTO(yyerrlab);

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
YYLABEL(yyreduce)
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


 #line 839 "../bison++/bison.cc"

  switch (yyn) {

case 56:
#line 215 "SrvParser.y"
{
    if (!StartIfaceDeclaration(yyvsp[-1].strval))
	YYABORT;
;
    break;}
case 57:
#line 220 "SrvParser.y"
{
    //Information about new interface has been read
    //Add it to list of read interfaces
    delete [] yyvsp[-4].strval;
    EndIfaceDeclaration();
;
    break;}
case 58:
#line 228 "SrvParser.y"
{
    if (!StartIfaceDeclaration(yyvsp[-1].ival))
	YYABORT;
;
    break;}
case 59:
#line 233 "SrvParser.y"
{
    EndIfaceDeclaration();
;
    break;}
case 66:
#line 248 "SrvParser.y"
{
    ParserOptStack.append(new TSrvParsGlobalOpt());
    SPtr<TDUID> duid = new TDUID(yyvsp[-1].duidval.duid,yyvsp[-1].duidval.length);
    ClientLst.append(new TSrvCfgOptions(duid));
;
    break;}
case 67:
#line 254 "SrvParser.y"
{
    Log(Debug) << "Exception: DUID-based exception specified." << LogEnd;
    // copy all defined options
    ClientLst.getLast()->setOptions(ParserOptStack.getLast());
    ParserOptStack.delLast();
;
    break;}
case 68:
#line 262 "SrvParser.y"
{
    ParserOptStack.append(new TSrvParsGlobalOpt());
    SPtr<TOptVendorData> remoteid = new TOptVendorData(yyvsp[-3].ival, yyvsp[-1].duidval.duid, yyvsp[-1].duidval.length, 0);
    ClientLst.append(new TSrvCfgOptions(remoteid));
;
    break;}
case 69:
#line 268 "SrvParser.y"
{
    Log(Debug) << "Exception: RemoteID-based exception specified." << LogEnd;
    // copy all defined options
    ClientLst.getLast()->setOptions(ParserOptStack.getLast());
    ParserOptStack.delLast();
;
    break;}
case 87:
#line 300 "SrvParser.y"
{
    addr = new TIPv6Addr(yyvsp[0].addrval);
    Log(Info) << "Exception: Address " << addr->getPlain() << " reserved." << LogEnd;
    ClientLst.getLast()->setAddr(addr);
;
    break;}
case 88:
#line 309 "SrvParser.y"
{
    StartClassDeclaration();
;
    break;}
case 89:
#line 313 "SrvParser.y"
{
    if (!EndClassDeclaration())
	YYABORT;
;
    break;}
case 92:
#line 327 "SrvParser.y"
{
    StartTAClassDeclaration();
;
    break;}
case 93:
#line 330 "SrvParser.y"
{
    if (!EndTAClassDeclaration())
	YYABORT;
;
    break;}
case 104:
#line 353 "SrvParser.y"
{
    StartPDDeclaration();
;
    break;}
case 105:
#line 356 "SrvParser.y"
{
    if (!EndPDDeclaration())
	YYABORT;
;
    break;}
case 116:
#line 382 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_NONE); ;
    break;}
case 117:
#line 383 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_PLAIN); ;
    break;}
case 118:
#line 384 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_HMAC_MD5); ;
    break;}
case 119:
#line 385 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_HMAC_SHA1); ;
    break;}
case 120:
#line 386 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_HMAC_SHA224); ;
    break;}
case 121:
#line 387 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_HMAC_SHA256); ;
    break;}
case 122:
#line 388 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_HMAC_SHA384); ;
    break;}
case 123:
#line 389 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_HMAC_SHA512); ;
    break;}
case 124:
#line 393 "SrvParser.y"
{ ParserOptStack.getLast()->setAuthLifetime(yyvsp[0].ival); ;
    break;}
case 125:
#line 397 "SrvParser.y"
{ ParserOptStack.getLast()->setAuthKeyLen(yyvsp[0].ival); ;
    break;}
case 126:
#line 406 "SrvParser.y"
{
    Log(Notice)<< "FQDN: The client "<<yyvsp[0].strval<<" has no address nor DUID"<<LogEnd;
    PresentFQDNLst.append(new TFQDN(yyvsp[0].strval,false));
;
    break;}
case 127:
#line 411 "SrvParser.y"
{
    TDUID* duidNew = new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length);
    Log(Debug)<< "FQDN:" << yyvsp[-2].strval <<" reserved for DUID " << duidNew->getPlain()<<LogEnd;
    // FIXME: Use SPtr()
    PresentFQDNLst.append(new TFQDN(duidNew, yyvsp[-2].strval,false));
;
    break;}
case 128:
#line 418 "SrvParser.y"
{
    addr = new TIPv6Addr(yyvsp[0].addrval);
    Log(Debug)<< "FQDN:" << yyvsp[-2].strval <<" reserved for address "<<*addr<<LogEnd;
    // FIXME: Use SPtr()
    PresentFQDNLst.append(new TFQDN(new TIPv6Addr(yyvsp[0].addrval), yyvsp[-2].strval,false));
;
    break;}
case 129:
#line 425 "SrvParser.y"
{
	Log(Debug) << "FQDN:"<<yyvsp[0].strval<<" has no reservations (is available to everyone)."<<LogEnd;
    PresentFQDNLst.append(new TFQDN(yyvsp[0].strval,false));
;
    break;}
case 130:
#line 430 "SrvParser.y"
{
    TDUID* duidNew = new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length);
    Log(Debug)<< "FQDN:" << yyvsp[-2].strval << " reserved for DUID "<< duidNew->getPlain() << LogEnd;
    // FIXME: Use SPtr()
    PresentFQDNLst.append(new TFQDN( duidNew, yyvsp[-2].strval,false));
;
    break;}
case 131:
#line 437 "SrvParser.y"
{
    addr = new TIPv6Addr(yyvsp[0].addrval);
    Log(Debug)<< "FQDN:" << yyvsp[-2].strval<<" reserved for address "<< addr->getPlain() << LogEnd;
    // FIXME: Use SPtr()
    PresentFQDNLst.append(new TFQDN(new TIPv6Addr(yyvsp[0].addrval), yyvsp[-2].strval,false));
;
    break;}
case 132:
#line 446 "SrvParser.y"
{yyval.ival=yyvsp[0].ival;;
    break;}
case 133:
#line 447 "SrvParser.y"
{yyval.ival=yyvsp[0].ival;;
    break;}
case 134:
#line 452 "SrvParser.y"
{
    PresentAddrLst.append(new TIPv6Addr(yyvsp[0].addrval));
;
    break;}
case 135:
#line 456 "SrvParser.y"
{
    PresentAddrLst.append(new TIPv6Addr(yyvsp[0].addrval));
;
    break;}
case 136:
#line 463 "SrvParser.y"
{
    Log(Debug) << "Vendor-spec defined: Enterprise: " << yyvsp[-4].ival << ", optionCode: "
	       << yyvsp[-2].ival << ", valuelen=" << yyvsp[0].duidval.length << LogEnd;

    SrvCfgIfaceLst.getLast()->addExtraOption(new TOptVendorSpecInfo(yyvsp[-4].ival, yyvsp[-2].ival, yyvsp[0].duidval.duid, yyvsp[0].duidval.length, 0), false);
;
    break;}
case 137:
#line 470 "SrvParser.y"
{
    Log(Debug) << "Vendor-spec defined: Enterprise: " << yyvsp[-4].ival << ", optionCode: "
	       << yyvsp[-2].ival << ", valuelen=" << yyvsp[0].duidval.length << LogEnd;
    SrvCfgIfaceLst.getLast()->addExtraOption(new TOptVendorSpecInfo(yyvsp[-4].ival, yyvsp[-2].ival, yyvsp[0].duidval.duid, yyvsp[0].duidval.length, 0), false);
;
    break;}
case 138:
#line 478 "SrvParser.y"
{ PresentStringLst.append(SPtr<string> (new string(yyvsp[0].strval))); ;
    break;}
case 139:
#line 479 "SrvParser.y"
{ PresentStringLst.append(SPtr<string> (new string(yyvsp[0].strval))); ;
    break;}
case 140:
#line 484 "SrvParser.y"
{
	PresentRangeLst.append(new TStationRange(new TIPv6Addr(yyvsp[0].addrval),new TIPv6Addr(yyvsp[0].addrval)));
    ;
    break;}
case 141:
#line 488 "SrvParser.y"
{
	SPtr<TIPv6Addr> addr1(new TIPv6Addr(yyvsp[-2].addrval));
	SPtr<TIPv6Addr> addr2(new TIPv6Addr(yyvsp[0].addrval));
	if (*addr1<=*addr2)
	    PresentRangeLst.append(new TStationRange(addr1,addr2));
	else
	    PresentRangeLst.append(new TStationRange(addr2,addr1));
    ;
    break;}
case 142:
#line 497 "SrvParser.y"
{
	SPtr<TIPv6Addr> addr(new TIPv6Addr(yyvsp[-2].addrval));
	int prefix = yyvsp[0].ival;
	if ( (prefix<1) || (prefix>128)) {
	    Log(Crit) << "Invalid prefix defined: " << prefix << " in line " << lex->lineno()
		      << ". Allowed range: 1..128." << LogEnd;
	    YYABORT;
	}
	SPtr<TIPv6Addr> addr1 = this->getRangeMin(yyvsp[-2].addrval, prefix);
	SPtr<TIPv6Addr> addr2 = this->getRangeMax(yyvsp[-2].addrval, prefix);
	if (*addr1<=*addr2)
	    PresentRangeLst.append(new TStationRange(addr1,addr2));
	else
	    PresentRangeLst.append(new TStationRange(addr2,addr1));
    ;
    break;}
case 143:
#line 513 "SrvParser.y"
{
	PresentRangeLst.append(new TStationRange(new TIPv6Addr(yyvsp[0].addrval),new TIPv6Addr(yyvsp[0].addrval)));
    ;
    break;}
case 144:
#line 517 "SrvParser.y"
{
	SPtr<TIPv6Addr> addr1(new TIPv6Addr(yyvsp[-2].addrval));
	SPtr<TIPv6Addr> addr2(new TIPv6Addr(yyvsp[0].addrval));
	if (*addr1<=*addr2)
	    PresentRangeLst.append(new TStationRange(addr1,addr2));
	else
	    PresentRangeLst.append(new TStationRange(addr2,addr1));
    ;
    break;}
case 145:
#line 529 "SrvParser.y"
{
	SPtr<TIPv6Addr> addr(new TIPv6Addr(yyvsp[-2].addrval));
	int prefix = yyvsp[0].ival;
	if ( (prefix<1) || (prefix>128)) {
	    Log(Crit) << "Invalid prefix defined: " << prefix << " in line " << lex->lineno()
		      << ". Allowed range: 1..128." << LogEnd;
	    YYABORT;
	}

	SPtr<TIPv6Addr> addr1 = this->getRangeMin(yyvsp[-2].addrval, prefix);
	SPtr<TIPv6Addr> addr2 = this->getRangeMax(yyvsp[-2].addrval, prefix);
	SPtr<TStationRange> range = 0;
	if (*addr1<=*addr2)
	    range = new TStationRange(addr1,addr2);
	else
	    range = new TStationRange(addr2,addr1);
	range->setPrefixLength(prefix);
	PDLst.append(range);
    ;
    break;}
case 146:
#line 552 "SrvParser.y"
{
    PresentRangeLst.append(new TStationRange(new TIPv6Addr(yyvsp[0].addrval),new TIPv6Addr(yyvsp[0].addrval)));
;
    break;}
case 147:
#line 556 "SrvParser.y"
{
    SPtr<TIPv6Addr> addr1(new TIPv6Addr(yyvsp[-2].addrval));
    SPtr<TIPv6Addr> addr2(new TIPv6Addr(yyvsp[0].addrval));
    if (*addr1<=*addr2)
	PresentRangeLst.append(new TStationRange(addr1,addr2));
    else
	PresentRangeLst.append(new TStationRange(addr2,addr1));
;
    break;}
case 148:
#line 565 "SrvParser.y"
{
    PresentRangeLst.append(new TStationRange(new TIPv6Addr(yyvsp[0].addrval),new TIPv6Addr(yyvsp[0].addrval)));
;
    break;}
case 149:
#line 569 "SrvParser.y"
{
    SPtr<TIPv6Addr> addr1(new TIPv6Addr(yyvsp[-2].addrval));
    SPtr<TIPv6Addr> addr2(new TIPv6Addr(yyvsp[0].addrval));
    if (*addr1<=*addr2)
	PresentRangeLst.append(new TStationRange(addr1,addr2));
    else
	PresentRangeLst.append(new TStationRange(addr2,addr1));
;
    break;}
case 150:
#line 578 "SrvParser.y"
{
    PresentRangeLst.append(new TStationRange(new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length)));
    delete yyvsp[0].duidval.duid;
;
    break;}
case 151:
#line 583 "SrvParser.y"
{
    SPtr<TDUID> duid1(new TDUID(yyvsp[-2].duidval.duid,yyvsp[-2].duidval.length));
    SPtr<TDUID> duid2(new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length));

    if (*duid1<=*duid2)
	PresentRangeLst.append(new TStationRange(duid1,duid2));
    else
	PresentRangeLst.append(new TStationRange(duid2,duid1));
;
    break;}
case 152:
#line 593 "SrvParser.y"
{
    PresentRangeLst.append(new TStationRange(new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length)));
    delete yyvsp[0].duidval.duid;
;
    break;}
case 153:
#line 598 "SrvParser.y"
{
    SPtr<TDUID> duid2(new TDUID(yyvsp[-2].duidval.duid,yyvsp[-2].duidval.length));
    SPtr<TDUID> duid1(new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length));
    if (*duid1<=*duid2)
	PresentRangeLst.append(new TStationRange(duid1,duid2));
    else
	PresentRangeLst.append(new TStationRange(duid2,duid1));
    delete yyvsp[-2].duidval.duid;
    delete yyvsp[0].duidval.duid;
;
    break;}
case 154:
#line 612 "SrvParser.y"
{
    PresentRangeLst.clear();
;
    break;}
case 155:
#line 615 "SrvParser.y"
{
    ParserOptStack.getLast()->setRejedClnt(&PresentRangeLst);
;
    break;}
case 156:
#line 622 "SrvParser.y"
{
    PresentRangeLst.clear();
;
    break;}
case 157:
#line 625 "SrvParser.y"
{
    ParserOptStack.getLast()->setAcceptClnt(&PresentRangeLst);
;
    break;}
case 158:
#line 632 "SrvParser.y"
{
    PresentRangeLst.clear();
;
    break;}
case 159:
#line 635 "SrvParser.y"
{
    ParserOptStack.getLast()->setPool(&PresentRangeLst);
;
    break;}
case 160:
#line 642 "SrvParser.y"
{
;
    break;}
case 161:
#line 644 "SrvParser.y"
{
    ParserOptStack.getLast()->setPool(&PresentRangeLst/*PDList*/);
;
    break;}
case 162:
#line 650 "SrvParser.y"
{
   this->PDPrefix = yyvsp[0].ival;
;
    break;}
case 163:
#line 657 "SrvParser.y"
{
    ParserOptStack.getLast()->setPrefBeg(yyvsp[0].ival);
    ParserOptStack.getLast()->setPrefEnd(yyvsp[0].ival);
;
    break;}
case 164:
#line 662 "SrvParser.y"
{
    ParserOptStack.getLast()->setPrefBeg(yyvsp[-2].ival);
    ParserOptStack.getLast()->setPrefEnd(yyvsp[0].ival);
;
    break;}
case 165:
#line 670 "SrvParser.y"
{
    ParserOptStack.getLast()->setValidBeg(yyvsp[0].ival);
    ParserOptStack.getLast()->setValidEnd(yyvsp[0].ival);
;
    break;}
case 166:
#line 675 "SrvParser.y"
{
    ParserOptStack.getLast()->setValidBeg(yyvsp[-2].ival);
    ParserOptStack.getLast()->setValidEnd(yyvsp[0].ival);
;
    break;}
case 167:
#line 683 "SrvParser.y"
{
    int x=yyvsp[0].ival;
    if ( (x<1) || (x>1000)) {
	Log(Crit) << "Invalid share value: " << x << " in line " << lex->lineno()
		  << ". Allowed range: 1..1000." << LogEnd;
	YYABORT;
    }
    ParserOptStack.getLast()->setShare(x);
;
    break;}
case 168:
#line 695 "SrvParser.y"
{
    ParserOptStack.getLast()->setT1Beg(yyvsp[0].ival);
    ParserOptStack.getLast()->setT1End(yyvsp[0].ival);
;
    break;}
case 169:
#line 700 "SrvParser.y"
{
    ParserOptStack.getLast()->setT1Beg(yyvsp[-2].ival);
    ParserOptStack.getLast()->setT1End(yyvsp[0].ival);
;
    break;}
case 170:
#line 708 "SrvParser.y"
{
    ParserOptStack.getLast()->setT2Beg(yyvsp[0].ival);
    ParserOptStack.getLast()->setT2End(yyvsp[0].ival);
;
    break;}
case 171:
#line 713 "SrvParser.y"
{
    ParserOptStack.getLast()->setT2Beg(yyvsp[-2].ival);
    ParserOptStack.getLast()->setT2End(yyvsp[0].ival);
;
    break;}
case 172:
#line 721 "SrvParser.y"
{
    ParserOptStack.getLast()->setClntMaxLease(yyvsp[0].ival);
;
    break;}
case 173:
#line 728 "SrvParser.y"
{
    ParserOptStack.getLast()->setClassMaxLease(yyvsp[0].ival);
;
    break;}
case 174:
#line 735 "SrvParser.y"
{
    if (!ParserOptStack.getLast()->getExperimental()) {
	Log(Crit) << "Experimental 'addr-params' defined, but experimental features are disabled. Add 'experimental' "
		  << "in global section of server.conf to enable it." << LogEnd;
	YYABORT;
    }
    int bitfield = ADDRPARAMS_MASK_PREFIX;
    Log(Warning) << "Experimental addr-params added (prefix=" << yyvsp[0].ival << ", bitfield=" << bitfield << ")." << LogEnd;
    ParserOptStack.getLast()->setAddrParams(yyvsp[0].ival,bitfield);
;
    break;}
case 175:
#line 748 "SrvParser.y"
{
    SPtr<TOpt> tunnelName = new TOptString(OPTION_AFTR_NAME, yyvsp[0].strval, 0);
    Log(Debug) << "Enabling DS-Lite tunnel option, AFTR name=" << yyvsp[0].strval << LogEnd;
    SrvCfgIfaceLst.getLast()->addExtraOption(tunnelName, false);
;
    break;}
case 176:
#line 756 "SrvParser.y"
{
    SPtr<TOpt> opt = new TOptGeneric(yyvsp[-2].ival, yyvsp[0].duidval.duid, yyvsp[0].duidval.length, 0);
    SrvCfgIfaceLst.getLast()->addExtraOption(opt, false);
    Log(Debug) << "Extra option defined: code=" << yyvsp[-2].ival << ", length=" << yyvsp[0].duidval.length << LogEnd;
;
    break;}
case 177:
#line 762 "SrvParser.y"
{
    SPtr<TIPv6Addr> addr(new TIPv6Addr(yyvsp[0].addrval));

    SPtr<TOpt> opt = new TOptAddr(yyvsp[-2].ival, addr, 0);
    SrvCfgIfaceLst.getLast()->addExtraOption(opt, false);
    Log(Debug) << "Extra option defined: code=" << yyvsp[-2].ival << ", address=" << addr->getPlain() << LogEnd;
;
    break;}
case 178:
#line 770 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 179:
#line 773 "SrvParser.y"
{
    SPtr<TOpt> opt = new TOptAddrLst(yyvsp[-3].ival, PresentAddrLst, 0);
    SrvCfgIfaceLst.getLast()->addExtraOption(opt, false);
    Log(Debug) << "Extra option defined: code=" << yyvsp[-3].ival << ", address count=" << PresentAddrLst.count() << LogEnd;
;
    break;}
case 180:
#line 779 "SrvParser.y"
{
    SPtr<TOpt> opt = new TOptString(yyvsp[-2].ival, string(yyvsp[0].strval), 0);
    SrvCfgIfaceLst.getLast()->addExtraOption(opt, false);
    Log(Debug) << "Extra option defined: code=" << yyvsp[-2].ival << ", string=" << yyvsp[0].strval << LogEnd;
;
    break;}
case 181:
#line 787 "SrvParser.y"
{
    if (!ParserOptStack.getLast()->getExperimental()) {
	Log(Crit) << "Experimental 'remote autoconf neighbors' defined, but "
		  << "experimental features are disabled. Add 'experimental' "
		  << "in global section of server.conf to enable it." << LogEnd;
	YYABORT;
    }

    PresentAddrLst.clear();
;
    break;}
case 182:
#line 797 "SrvParser.y"
{
    SPtr<TOpt> opt = new TOptAddrLst(OPTION_NEIGHBORS, PresentAddrLst, 0);
    SrvCfgIfaceLst.getLast()->addExtraOption(opt, false);
    Log(Debug) << "Remote autoconf neighbors enabled (" << PresentAddrLst.count()
	       << " neighbors defined.)" << LogEnd;
;
    break;}
case 183:
#line 807 "SrvParser.y"
{
    ParserOptStack.getLast()->setIfaceMaxLease(yyvsp[0].ival);
;
    break;}
case 184:
#line 814 "SrvParser.y"
{
    ParserOptStack.getLast()->setUnicast(new TIPv6Addr(yyvsp[0].addrval));
;
    break;}
case 185:
#line 821 "SrvParser.y"
{
    if ( (yyvsp[0].ival!=0) && (yyvsp[0].ival!=1)) {
	Log(Crit) << "RAPID-COMMIT  parameter in line " << lex->lineno() << " must have 0 or 1 value."
	       << LogEnd;
	YYABORT;
    }
    if (yyvsp[0].ival==1)
	ParserOptStack.getLast()->setRapidCommit(true);
    else
	ParserOptStack.getLast()->setRapidCommit(false);
;
    break;}
case 186:
#line 836 "SrvParser.y"
{
    if ((yyvsp[0].ival<0)||(yyvsp[0].ival>255)) {
	Log(Crit) << "Preference value (" << yyvsp[0].ival << ") in line " << lex->lineno()
		   << " is out of range [0..255]." << LogEnd;
	YYABORT;
    }
    ParserOptStack.getLast()->setPreference(yyvsp[0].ival);
;
    break;}
case 187:
#line 847 "SrvParser.y"
{
    logger::setLogLevel(yyvsp[0].ival);
;
    break;}
case 188:
#line 853 "SrvParser.y"
{
    logger::setLogMode(yyvsp[0].strval);
;
    break;}
case 189:
#line 859 "SrvParser.y"
{
    logger::setLogName(yyvsp[0].strval);
;
    break;}
case 190:
#line 866 "SrvParser.y"
{
    logger::setColors(yyvsp[0].ival==1);
;
    break;}
case 191:
#line 872 "SrvParser.y"
{
    ParserOptStack.getLast()->setWorkDir(yyvsp[0].strval);
;
    break;}
case 192:
#line 879 "SrvParser.y"
{
    ParserOptStack.getLast()->setStateless(true);
;
    break;}
case 193:
#line 886 "SrvParser.y"
{
    Log(Info) << "Guess-mode enabled: relay interfaces may be loosely defined (matching interface-id is not mandatory)." << LogEnd;
    ParserOptStack.getLast()->setGuessMode(true);
;
    break;}
case 194:
#line 893 "SrvParser.y"
{
    ParserOptStack.getLast()->setInactiveMode(true);
;
    break;}
case 195:
#line 899 "SrvParser.y"
{
    Log(Crit) << "Experimental features are allowed." << LogEnd;
    ParserOptStack.getLast()->setExperimental(true);
;
    break;}
case 196:
#line 906 "SrvParser.y"
{
    if (!strncasecmp(yyvsp[0].strval,"before",6))
    {
		ParserOptStack.getLast()->setInterfaceIDOrder(SRV_IFACE_ID_ORDER_BEFORE);
    } else
    if (!strncasecmp(yyvsp[0].strval,"after",5))
    {
		ParserOptStack.getLast()->setInterfaceIDOrder(SRV_IFACE_ID_ORDER_AFTER);
    } else
    if (!strncasecmp(yyvsp[0].strval,"omit",4))
    {
		ParserOptStack.getLast()->setInterfaceIDOrder(SRV_IFACE_ID_ORDER_NONE);
    } else
    {
		Log(Crit) << "Invalid interface-id-order specified. Allowed values: before, after, omit" << LogEnd;
		YYABORT;
    }
;
    break;}
case 197:
#line 927 "SrvParser.y"
{
    ParserOptStack.getLast()->setCacheSize(yyvsp[0].ival);
;
    break;}
case 198:
#line 938 "SrvParser.y"
{
    ParserOptStack.getLast()->setLeaseQuerySupport(true);

;
    break;}
case 199:
#line 943 "SrvParser.y"
{
    switch (yyvsp[0].ival) {
    case 0:
		ParserOptStack.getLast()->setLeaseQuerySupport(false);
		break;
    case 1:
		ParserOptStack.getLast()->setLeaseQuerySupport(true);
		break;
    default:
		Log(Crit) << "Invalid value of accept-leasequery specifed. Allowed values: 0, 1, yes, no, true, false" << LogEnd;
		YYABORT;
    }
;
    break;}
case 200:
#line 959 "SrvParser.y"
{
    if (yyvsp[0].ival!=0 && yyvsp[0].ival!=1) {
	Log(Error) << "Invalid bulk-leasequery-accept value: " << (yyvsp[0].ival)
		   << ", 0 or 1 expected." << LogEnd;
	YYABORT;
    }
    CfgMgr->bulkLQAccept( (bool) yyvsp[0].ival);
;
    break;}
case 201:
#line 970 "SrvParser.y"
{
    CfgMgr->bulkLQTcpPort( yyvsp[0].ival );
;
    break;}
case 202:
#line 976 "SrvParser.y"
{
    CfgMgr->bulkLQMaxConns( yyvsp[0].ival );
;
    break;}
case 203:
#line 982 "SrvParser.y"
{
    CfgMgr->bulkLQTimeout( yyvsp[0].ival );
;
    break;}
case 204:
#line 991 "SrvParser.y"
{
    ParserOptStack.getLast()->setRelayName(yyvsp[0].strval);
;
    break;}
case 205:
#line 995 "SrvParser.y"
{
    ParserOptStack.getLast()->setRelayID(yyvsp[0].ival);
;
    break;}
case 206:
#line 1002 "SrvParser.y"
{
    SPtr<TSrvOptInterfaceID> id = new TSrvOptInterfaceID(yyvsp[0].ival, 0);
    ParserOptStack.getLast()->setRelayInterfaceID(id);
;
    break;}
case 207:
#line 1007 "SrvParser.y"
{
    SPtr<TSrvOptInterfaceID> id = new TSrvOptInterfaceID(yyvsp[0].duidval.duid, yyvsp[0].duidval.length, 0);
    ParserOptStack.getLast()->setRelayInterfaceID(id);
;
    break;}
case 208:
#line 1012 "SrvParser.y"
{
    SPtr<TSrvOptInterfaceID> id = new TSrvOptInterfaceID(yyvsp[0].strval, strlen(yyvsp[0].strval), 0);
    ParserOptStack.getLast()->setRelayInterfaceID(id);
;
    break;}
case 221:
#line 1035 "SrvParser.y"
{
    SPtr<TSrvCfgClientClass> clntClass;
    bool found = false;
    SrvCfgClientClassLst.first();
    while (clntClass = SrvCfgClientClassLst.get())
    {
	if (clntClass->getClassName() == string(yyvsp[0].strval))
	    found = true;
    }
    if (!found)
    {
	Log(Crit) << "Line " << lex->lineno()
		  << ": Unable to use class " << string(yyvsp[0].strval) << ", no such class defined." << LogEnd;
	YYABORT;
    }
    ParserOptStack.getLast()->setAllowClientClass(string(yyvsp[0].strval));

    int deny = ParserOptStack.getLast()->getDenyClientClassString().count();

    if (deny)
    {
	Log(Crit) << "Line " << lex->lineno() << ": Unable to define both allow and deny lists for this client class." << LogEnd;
	YYABORT;
    }

;
    break;}
case 222:
#line 1064 "SrvParser.y"
{
    SPtr<TSrvCfgClientClass> clntClass;
    bool found = false;
    SrvCfgClientClassLst.first();
    while (clntClass = SrvCfgClientClassLst.get())
    {
	if (clntClass->getClassName() == string(yyvsp[0].strval))
	    found = true;
    }
    if (!found)
    {
	Log(Crit) << "Line " << lex->lineno()
		  << ": Unable to use class " << string(yyvsp[0].strval) << ", no such class defined." << LogEnd;
	YYABORT;
    }
    ParserOptStack.getLast()->setDenyClientClass(string(yyvsp[0].strval));

    int allow = ParserOptStack.getLast()->getAllowClientClassString().count();

    if (allow)
    {
	Log(Crit) << "Line " << lex->lineno() << ": Unable to define both allow and deny lists for this client class." << LogEnd;
	YYABORT;
    }

;
    break;}
case 223:
#line 1097 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 224:
#line 1100 "SrvParser.y"
{
    ParserOptStack.getLast()->setDNSServerLst(&PresentAddrLst);
;
    break;}
case 225:
#line 1109 "SrvParser.y"
{
    PresentStringLst.clear();
;
    break;}
case 226:
#line 1112 "SrvParser.y"
{
    ParserOptStack.getLast()->setDomainLst(&PresentStringLst);
;
    break;}
case 227:
#line 1122 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 228:
#line 1125 "SrvParser.y"
{
    ParserOptStack.getLast()->setNTPServerLst(&PresentAddrLst);
;
    break;}
case 229:
#line 1135 "SrvParser.y"
{
    ParserOptStack.getLast()->setTimezone(yyvsp[0].strval);
;
    break;}
case 230:
#line 1144 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 231:
#line 1147 "SrvParser.y"
{
    ParserOptStack.getLast()->setSIPServerLst(&PresentAddrLst);
;
    break;}
case 232:
#line 1156 "SrvParser.y"
{
    PresentStringLst.clear();
;
    break;}
case 233:
#line 1159 "SrvParser.y"
{
    ParserOptStack.getLast()->setSIPDomainLst(&PresentStringLst);
;
    break;}
case 234:
#line 1170 "SrvParser.y"
{
    PresentFQDNLst.clear();
    Log(Debug)   << "No FQDNMode found, setting default mode 2 (all updates executed by server)." << LogEnd;
    Log(Warning) << "revDNS zoneroot lenght not found, dynamic revDNS update will not be possible." << LogEnd;
    ParserOptStack.getLast()->setFQDNMode(2);
    ParserOptStack.getLast()->setRevDNSZoneRootLength(0);
;
    break;}
case 235:
#line 1177 "SrvParser.y"
{
    ParserOptStack.getLast()->setFQDNLst(&PresentFQDNLst);
;
    break;}
case 236:
#line 1181 "SrvParser.y"
{
    PresentFQDNLst.clear();
    Log(Debug)  << "FQDNMode found, setting value"<< yyvsp[0].ival <<LogEnd;
    Log(Warning)<< "revDNS zoneroot lenght not specified, dynamic revDNS update will not be possible." << LogEnd;
    ParserOptStack.getLast()->setFQDNMode(yyvsp[0].ival);
    ParserOptStack.getLast()->setRevDNSZoneRootLength(0);
;
    break;}
case 237:
#line 1188 "SrvParser.y"
{
    ParserOptStack.getLast()->setFQDNLst(&PresentFQDNLst);

;
    break;}
case 238:
#line 1193 "SrvParser.y"
{
    PresentFQDNLst.clear();
    Log(Debug) << "FQDNMode found, setting value " << yyvsp[-1].ival <<LogEnd;
    Log(Debug) << "revDNS zoneroot lenght found, setting value " << yyvsp[0].ival <<LogEnd;
    ParserOptStack.getLast()->setFQDNMode(yyvsp[-1].ival);
    ParserOptStack.getLast()->setRevDNSZoneRootLength(yyvsp[0].ival);
;
    break;}
case 239:
#line 1200 "SrvParser.y"
{
    ParserOptStack.getLast()->setFQDNLst(&PresentFQDNLst);

;
    break;}
case 240:
#line 1208 "SrvParser.y"
{
    ParserOptStack.getLast()->setUnknownFQDN(EUnknownFQDNMode(yyvsp[-1].ival), string(yyvsp[0].strval) );
    Log(Debug) << "FQDN: Unknown fqdn names processing set to " << yyvsp[-1].ival << ", domain=" << yyvsp[0].strval << "." << LogEnd;
;
    break;}
case 241:
#line 1213 "SrvParser.y"
{
    ParserOptStack.getLast()->setUnknownFQDN(EUnknownFQDNMode(yyvsp[0].ival), string("") );
    Log(Debug) << "FQDN: Unknown fqdn names processing set to " << yyvsp[0].ival << ", no domain." << LogEnd;
;
    break;}
case 242:
#line 1221 "SrvParser.y"
{
    addr = new TIPv6Addr(yyvsp[0].addrval);
    CfgMgr->fqdnDdnsAddress( addr );
    Log(Info) << "FQDN: DDNS updates will be performed to " << addr->getPlain() << "." << LogEnd;
;
    break;}
case 243:
#line 1231 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 244:
#line 1234 "SrvParser.y"
{
    ParserOptStack.getLast()->setNISServerLst(&PresentAddrLst);
;
    break;}
case 245:
#line 1243 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 246:
#line 1246 "SrvParser.y"
{
    ParserOptStack.getLast()->setNISPServerLst(&PresentAddrLst);
;
    break;}
case 247:
#line 1256 "SrvParser.y"
{
    ParserOptStack.getLast()->setNISDomain(yyvsp[0].strval);
;
    break;}
case 248:
#line 1266 "SrvParser.y"
{
    ParserOptStack.getLast()->setNISPDomain(yyvsp[0].strval);
;
    break;}
case 249:
#line 1276 "SrvParser.y"
{
    ParserOptStack.getLast()->setLifetime(yyvsp[0].ival);
;
    break;}
case 250:
#line 1282 "SrvParser.y"
{
;
    break;}
case 251:
#line 1284 "SrvParser.y"
{
    // ParserOptStack.getLast()->setVendorSpec(VendorSpec);
    // Log(Debug) << "Vendor-spec parsing finished" << LogEnd;
;
    break;}
case 252:
#line 1292 "SrvParser.y"
{
    Log(Notice) << "ClientClass found, name: " << string(yyvsp[-1].strval) << LogEnd;
;
    break;}
case 253:
#line 1295 "SrvParser.y"
{
    SPtr<Node> cond =  NodeClientClassLst.getLast();
    SrvCfgClientClassLst.append( new TSrvCfgClientClass(string(yyvsp[-4].strval),cond));
    NodeClientClassLst.delLast();
;
    break;}
case 254:
#line 1305 "SrvParser.y"
{
;
    break;}
case 256:
#line 1311 "SrvParser.y"
{
    SPtr<Node> r =  NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    SPtr<Node> l = NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    NodeClientClassLst.append(new NodeOperator(NodeOperator::OPERATOR_CONTAIN,l,r));
;
    break;}
case 257:
#line 1319 "SrvParser.y"
{
    SPtr<Node> l =  NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    SPtr<Node> r = NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();

    NodeClientClassLst.append(new NodeOperator(NodeOperator::OPERATOR_EQUAL,l,r));
;
    break;}
case 258:
#line 1328 "SrvParser.y"
{
    SPtr<Node> l =  NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    SPtr<Node> r = NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    NodeClientClassLst.append(new NodeOperator(NodeOperator::OPERATOR_AND,l,r));

;
    break;}
case 259:
#line 1337 "SrvParser.y"
{
    SPtr<Node> l =  NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    SPtr<Node> r = NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    NodeClientClassLst.append(new NodeOperator(NodeOperator::OPERATOR_OR,l,r));
;
    break;}
case 260:
#line 1348 "SrvParser.y"
{
    NodeClientClassLst.append(new NodeClientSpecific(NodeClientSpecific::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM));
;
    break;}
case 261:
#line 1352 "SrvParser.y"
{
    NodeClientClassLst.append(new NodeClientSpecific(NodeClientSpecific::CLIENT_VENDOR_SPEC_DATA));
;
    break;}
case 262:
#line 1356 "SrvParser.y"
{
    // Log(Info) << "Constant expression found:" <<string($1)<<LogEnd;
    NodeClientClassLst.append(new NodeConstant(string(yyvsp[0].strval)));
;
    break;}
case 263:
#line 1361 "SrvParser.y"
{
    //Log(Info) << "Constant expression found:" <<string($1)<<LogEnd;
    stringstream convert;
    string snum;
    convert<<yyvsp[0].ival;
    convert>>snum;
    NodeClientClassLst.append(new NodeConstant(snum));
;
    break;}
case 264:
#line 1370 "SrvParser.y"
{
    SPtr<Node> l =  NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    NodeClientClassLst.append(new NodeOperator(NodeOperator::OPERATOR_SUBSTRING,l, yyvsp[-3].ival,yyvsp[-1].ival));
;
    break;}
}

#line 839 "../bison++/bison.cc"
   /* the action file gets copied in in place of this dollarsign  */
  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YY_SrvParser_LSP_NEEDED
  yylsp -= yylen;
#endif

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YY_SrvParser_LSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = YY_SrvParser_LLOC.first_line;
      yylsp->first_column = YY_SrvParser_LLOC.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  YYGOTO(yynewstate);

YYLABEL(yyerrlab)   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++YY_SrvParser_NERRS;

#ifdef YY_SrvParser_ERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      YY_SrvParser_ERROR(msg);
	      free(msg);
	    }
	  else
	    YY_SrvParser_ERROR ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YY_SrvParser_ERROR_VERBOSE */
        YY_SrvParser_ERROR((char*)"parse error");
    }

  YYGOTO(yyerrlab1);
YYLABEL(yyerrlab1)   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (YY_SrvParser_CHAR == YYEOF)
	YYABORT;

#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	fprintf(stderr, "Discarding token %d (%s).\n", YY_SrvParser_CHAR, yytname[yychar1]);
#endif

      YY_SrvParser_CHAR = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;              /* Each real token shifted decrements this */

  YYGOTO(yyerrhandle);

YYLABEL(yyerrdefault)  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) YYGOTO(yydefault);
#endif

YYLABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YY_SrvParser_LSP_NEEDED
  yylsp--;
#endif

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

YYLABEL(yyerrhandle)

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yyerrdefault);

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    YYGOTO(yyerrdefault);

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrpop);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrpop);

  if (yyn == YYFINAL)
    YYACCEPT;

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = YY_SrvParser_LVAL;
#ifdef YY_SrvParser_LSP_NEEDED
  *++yylsp = YY_SrvParser_LLOC;
#endif

  yystate = yyn;
  YYGOTO(yynewstate);
/* end loop, in which YYGOTO may be used. */
  YYENDGOTO
}

/* END */

 #line 1038 "../bison++/bison.cc"
#line 1376 "SrvParser.y"


/////////////////////////////////////////////////////////////////////////////
// programs section

/**
 * method check whether interface with id=ifaceNr has been already declared
 *
 * @param ifaceNr
 *
 * @return true if interface was not declared
 */
bool SrvParser::IfaceDefined(int ifaceNr)
{
  SPtr<TSrvCfgIface> ptr;
  SrvCfgIfaceLst.first();
  while (ptr=SrvCfgIfaceLst.get())
    if ((ptr->getID())==ifaceNr) {
	Log(Crit) << "Interface with ID=" << ifaceNr << " is already defined." << LogEnd;
	return false;
    }
  return true;
}

/**
 * check whether interface with id=ifaceName has been already declared
 *
 * @param ifaceName
 *
 * @return true, if defined, false otherwise
 */
bool SrvParser::IfaceDefined(string ifaceName)
{
  SPtr<TSrvCfgIface> ptr;
  SrvCfgIfaceLst.first();
  while (ptr=SrvCfgIfaceLst.get())
  {
    string presName=ptr->getName();
    if (presName==ifaceName) {
	Log(Crit) << "Interface " << ifaceName << " is already defined." << LogEnd;
	return false;
    }
  }
  return true;
}

/**
 * method creates new option for just started interface scope
 * clears all lists except the list of interfaces and adds new group
 *
 */
bool SrvParser::StartIfaceDeclaration(string ifaceName)
{
    if (!IfaceDefined(ifaceName))
	return false;

    SrvCfgIfaceLst.append(new TSrvCfgIface(ifaceName));

    // create new option (representing this interface) on the parser stack
    ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
    SrvCfgAddrClassLst.clear();
    ClientLst.clear();

    return true;
}

/**
 * method creates new option for just started interface scope
 * clears all lists except the list of interfaces and adds new group
 *
 */
bool SrvParser::StartIfaceDeclaration(int ifindex)
{
    if (!IfaceDefined(ifindex))
	return false;

    SrvCfgIfaceLst.append(new TSrvCfgIface(ifindex));

    // create new option (representing this interface) on the parser stack
    ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
    SrvCfgAddrClassLst.clear();
    ClientLst.clear();

    return true;
}


/**
 * this method is called after inteface declaration has ended. It creates
 * new interface representation used in SrvCfgMgr. Also removes corresponding
 * element from the parser stack
 *
 * @return true if everything is ok
 */
bool SrvParser::EndIfaceDeclaration()
{
    // get this interface object
    SPtr<TSrvCfgIface> iface = SrvCfgIfaceLst.getLast();

    // set its options
    SrvCfgIfaceLst.getLast()->setOptions(ParserOptStack.getLast());

    // copy all IA objects
    SPtr<TSrvCfgAddrClass> ptrAddrClass;
    SrvCfgAddrClassLst.first();
    while (ptrAddrClass=SrvCfgAddrClassLst.get())
	iface->addAddrClass(ptrAddrClass);
    SrvCfgAddrClassLst.clear();

    // copy all TA objects
    SPtr<TSrvCfgTA> ta;
    SrvCfgTALst.first();
    while (ta=SrvCfgTALst.get())
	iface->addTA(ta);
    SrvCfgTALst.clear();

    SPtr<TSrvCfgPD> pd;
    SrvCfgPDLst.first();
    while (pd=SrvCfgPDLst.get())
	iface->addPD(pd);
    SrvCfgPDLst.clear();

    iface->addClientExceptionsLst(ClientLst);

    // remove last option (representing this interface) from the parser stack
    ParserOptStack.delLast();

    return true;
}

void SrvParser::StartClassDeclaration()
{
    ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
    SrvCfgAddrClassLst.append(new TSrvCfgAddrClass());
}

/**
 * this method is adds new object representig just parsed IA class.
 *
 * @return true if everything works ok.
 */
bool SrvParser::EndClassDeclaration()
{
    if (!ParserOptStack.getLast()->countPool()) {
	Log(Crit) << "No pools defined for this class." << LogEnd;
	return false;
    }
    //setting interface options on the basis of just read information
    SrvCfgAddrClassLst.getLast()->setOptions(ParserOptStack.getLast());
    ParserOptStack.delLast();

    return true;
}


/**
 * Just add global options
 *
 */
void SrvParser::StartTAClassDeclaration()
{
  ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
}

bool SrvParser::EndTAClassDeclaration()
{
    if (!ParserOptStack.getLast()->countPool()) {
	Log(Crit) << "No pools defined for this ta-class." << LogEnd;
	return false;
    }
    // create new object representing just parsed TA and add it to the list
    SPtr<TSrvCfgTA> ptrTA = new TSrvCfgTA();
    ptrTA->setOptions(ParserOptStack.getLast());
    SrvCfgTALst.append(ptrTA);

    // remove temporary parser object for this (just finished) scope
    ParserOptStack.delLast();
    return true;
}

void SrvParser::StartPDDeclaration()
{
    ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
    this->PDLst.clear();
    this->PDPrefix = 0;
}

bool SrvParser::EndPDDeclaration()
{
    if (!this->PDLst.count()) {
	Log(Crit) << "No PD pools defined ." << LogEnd;
	return false;
    }
    if (!this->PDPrefix) {
	Log(Crit) << "PD prefix length not defined or set to 0." << LogEnd;
	return false;
    }

    int len = 0;
    this->PDLst.first();
    while ( SPtr<TStationRange> pool = PDLst.get() ) {
	if (!len)
	    len = pool->getPrefixLength();
	if (len!=pool->getPrefixLength()) {
	    Log(Crit) << "Prefix pools with different lengths are not supported. Make sure that all 'pd-pool' uses the same prefix length." << LogEnd;
	    return false;
	}
    }
    if (len>PDPrefix) {
	Log(Crit) << "Clients are supposed to get /" << this->PDPrefix << " prefixes, but pd-pool(s) are only /" << len << " long." << LogEnd;
	return false;
    }
    if (len==PDPrefix) {
	Log(Warning) << "Prefix pool /" << PDPrefix << " defined and clients are supposed to get /" << len << " prefixes. Only ONE client will get prefix" << LogEnd;
    }

    SPtr<TSrvCfgPD> ptrPD = new TSrvCfgPD();
    ParserOptStack.getLast()->setPool(&this->PDLst);
    if (!ptrPD->setOptions(ParserOptStack.getLast(), this->PDPrefix))
	return false;
    SrvCfgPDLst.append(ptrPD);

    // remove temporary parser object for this (just finished) scope
    ParserOptStack.delLast();
    return true;
}

namespace std {
    extern yy_SrvParser_stype yylval;
}

int SrvParser::yylex()
{
    memset(&std::yylval,0, sizeof(std::yylval));
    memset(&this->yylval,0, sizeof(this->yylval));
    int x = this->lex->yylex();
    this->yylval=std::yylval;
    return x;
}

void SrvParser::yyerror(char *m)
{
    Log(Crit) << "Config parse error: line " << lex->lineno()
	      << ", unexpected [" << lex->YYText() << "] token." << LogEnd;
}

SrvParser::~SrvParser() {
    this->ParserOptStack.clear();
    this->SrvCfgIfaceLst.clear();
    this->SrvCfgAddrClassLst.clear();
    this->SrvCfgTALst.clear();
    this->PresentAddrLst.clear();
    this->PresentStringLst.clear();
    this->PresentRangeLst.clear();
}

static char bitMask[]= { 0, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff };

SPtr<TIPv6Addr> SrvParser::getRangeMin(char * addrPacked, int prefix) {
    char packed[16];
    char mask;
    memcpy(packed, addrPacked,16);
    if (prefix%8!=0) {
	mask = bitMask[prefix%8];
	packed[prefix/8] = packed[prefix/8] & mask;
	prefix = (prefix/8 + 1)*8;
    }
    for (int i=prefix/8;i<16; i++) {
	packed[i]=0;
    }
    return new TIPv6Addr(packed, false);
}

SPtr<TIPv6Addr> SrvParser::getRangeMax(char * addrPacked, int prefix){
    char packed[16];
    char mask;
    memcpy(packed, addrPacked,16);
    if (prefix%8!=0) {
	mask = bitMask[prefix%8];
	packed[prefix/8] = packed[prefix/8] | ~mask;
	prefix = (prefix/8 + 1)*8;
    }
    for (int i=prefix/8;i<16; i++) {
	packed[i]=0xff;
    }

    return new TIPv6Addr(packed, false);
}
