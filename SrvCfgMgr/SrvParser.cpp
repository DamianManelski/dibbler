#define YY_SrvParser_h_included
#define YY_USE_CLASS

/*  A Bison++ parser, made from SrvParser.y  */

 /* with Bison++ version bison++ Version 1.21.9-1, adapted from GNU bison by coetmeur@icdc.fr
Maintained by Magnus Ekdahl <magnus@debian.org>
  */

#define YY_USE_CLASS

#line 1 "../bison++/bison.cc"
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Bob Corbett and Richard Stallman

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 1, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  

   As a special exception, when this file is copied by Bison++ into a
   Bison++ output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison, and has been in Bison++ since 1.21.9.  

*/

/* HEADER SECTION */
#if defined( _MSDOS ) || defined(MSDOS) || defined(__MSDOS__) 
 #define __MSDOS_AND_ALIKE
#endif

#if defined(_WINDOWS) && defined(_MSC_VER)
 #define __HAVE_NO_ALLOCA
 #define __MSDOS_AND_ALIKE
#endif

#ifndef alloca
 #if defined( __GNUC__)
  #define alloca __builtin_alloca

 #elif (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc)  || defined (__sgi)
  #include <alloca.h>

 #elif defined (__MSDOS_AND_ALIKE)
  #include <malloc.h>
  #ifndef __TURBOC__
   /* MS C runtime lib */
   #define alloca _alloca
  #endif

 #elif defined(_AIX)
  /* pragma must be put before any C/C++ instruction !! */
  #pragma alloca
  #include <malloc.h>

 #elif defined(__hpux)
  #ifdef __cplusplus
   extern "C" {
     void *alloca (unsigned int);
   };
  #else /* not __cplusplus */
   void *alloca ();
  #endif /* not __cplusplus */

 #endif /* not _AIX  not MSDOS, or __TURBOC__ or _AIX, not sparc.  */
#endif /* alloca not defined.  */

#ifdef c_plusplus
 #ifndef __cplusplus
  #define __cplusplus
 #endif
#endif

#ifdef __cplusplus
 #ifndef YY_USE_CLASS
/*#warning "For C++ its recomended to use bison++, otherwise classes won't be generated"*/
 #endif
#else
 #ifndef __STDC__
  #define const
 #endif
 #ifdef YY_USE_CLASS
  #error "This is a C++ header generated by bison++, please use a C++ compiler!"
 #endif
#endif

#include <stdio.h>
#define YYBISON 1  

 #line 88 "../bison++/bison.cc"
#line 3 "SrvParser.y"

#include <iostream>
#include <string>
#include <malloc.h>
#include "DHCPConst.h"
#include "SmartPtr.h"
#include "Container.h"
#include "SrvParser.h"
#include "SrvParsGlobalOpt.h"
#include "SrvParsClassOpt.h"
#include "SrvParsIfaceOpt.h"
#include "SrvCfgTA.h"
#include "SrvCfgPD.h"
#include "SrvCfgAddrClass.h"
#include "SrvCfgIface.h"
#include "SrvCfgOptions.h"
#include "DUID.h"
#include "Logger.h"
#include "FQDN.h"
#include "SrvOptVendorSpec.h"
#include "SrvOptAddrParams.h"
#include "Portable.h"
#define YY_USE_CLASS
#line 28 "SrvParser.y"

#include "FlexLexer.h"
#define YY_SrvParser_MEMBERS  FlexLexer * lex;                                                     \
List(TSrvParsGlobalOpt) ParserOptStack;    /* list of parsed interfaces/IAs/addrs */ \
List(TSrvCfgIface) SrvCfgIfaceLst;         /* list of SrvCfg interfaces */           \
List(TSrvCfgAddrClass) SrvCfgAddrClassLst; /* list of SrvCfg address classes */      \
List(TSrvCfgTA) SrvCfgTALst;               /* list of SrvCfg TA objects */           \
List(TSrvCfgPD) SrvCfgPDLst;		   /* list of SrvCfg PD objects */           \
List(TIPv6Addr) PresentAddrLst;            /* address list (used for DNS,NTP,etc.)*/ \
List(string) PresentStringLst;             /* string list */                         \
List(TFQDN) PresentFQDNLst;                                                          \
SmartPtr<TDUID> duidNew;                                                             \
SmartPtr<TIPv6Addr> addr;                                                            \
List(TStationRange) PresentRangeLst;                                                 \
List(TStationRange) PDLst;                                                           \
int VendorEnterpriseNumber;                                                          \
List(TSrvOptGeneric) ExtraOpts;                                                      \
List(TSrvOptVendorSpec) VendorSpec;			                             \
List(TSrvCfgOptions) ClientLst;                                                      \
int PDPrefix;                                                                        \
/*method check whether interface with id=ifaceNr has been already declared */        \
bool CheckIsIface(int ifaceNr);                                                      \
/*method check whether interface with id=ifaceName has been already declared*/       \
bool CheckIsIface(string ifaceName);                                                 \
void StartIfaceDeclaration();                                                        \
bool EndIfaceDeclaration();                                                          \
void StartClassDeclaration();                                                        \
bool EndClassDeclaration();                                                          \
SmartPtr<TIPv6Addr> getRangeMin(char * addrPacked, int prefix);                      \
SmartPtr<TIPv6Addr> getRangeMax(char * addrPacked, int prefix);                      \
void StartTAClassDeclaration();                                                      \
bool EndTAClassDeclaration();                                                        \
void StartPDDeclaration();                                                           \
bool EndPDDeclaration();                                                             \
virtual ~SrvParser();
#define YY_SrvParser_CONSTRUCTOR_PARAM  yyFlexLexer * lex
#define YY_SrvParser_CONSTRUCTOR_CODE                                                           \
    ParserOptStack.append(new TSrvParsGlobalOpt());                               \
    ParserOptStack.getLast()->setUnicast(false);                                  \
    this->lex = lex;

#line 74 "SrvParser.y"
typedef union    
{
    unsigned int ival;
    char *strval;
    struct SDuid
    {
        int length;
        char* duid;
    } duidval;
    char addrval[16];
} yy_SrvParser_stype;
#define YY_SrvParser_STYPE yy_SrvParser_stype

#line 88 "../bison++/bison.cc"
/* %{ and %header{ and %union, during decl */
#define YY_SrvParser_BISON 1

#ifndef YY_SrvParser_COMPATIBILITY
 #ifndef YY_USE_CLASS
  #define  YY_SrvParser_COMPATIBILITY 1
 #else
  #define  YY_SrvParser_COMPATIBILITY 0
 #endif
#endif

#if YY_SrvParser_COMPATIBILITY != 0
 /* backward compatibility */
 #ifdef YYLTYPE
  #ifndef YY_SrvParser_LTYPE
   #define YY_SrvParser_LTYPE YYLTYPE
  #endif
 #endif
/* Testing alternative bison solution
   /#ifdef YYSTYPE*/
#ifndef YY_SrvParser_STYPE 
   #define YY_SrvParser_STYPE YYSTYPE
#endif
/*#endif*/
 #ifdef YYDEBUG
  #ifndef YY_SrvParser_DEBUG
   #define  YY_SrvParser_DEBUG YYDEBUG
  #endif
 #endif
 
 /* use goto to be compatible */
 #ifndef YY_SrvParser_USE_GOTO
  #define YY_SrvParser_USE_GOTO 1
 #endif
#endif

/* use no goto to be clean in C++ */
#ifndef YY_SrvParser_USE_GOTO
 #define YY_SrvParser_USE_GOTO 0
#endif

#ifndef YY_SrvParser_PURE

 #line 130 "../bison++/bison.cc"

#line 130 "../bison++/bison.cc"
/*  YY_SrvParser_PURE */
#endif

/* section apres lecture def, avant lecture grammaire S2 */

 #line 134 "../bison++/bison.cc"

#line 134 "../bison++/bison.cc"
/* prefix */
#ifndef YY_SrvParser_DEBUG

 #line 136 "../bison++/bison.cc"
#define YY_SrvParser_DEBUG 1

#line 136 "../bison++/bison.cc"
/* YY_SrvParser_DEBUG */
#endif


#ifndef YY_SrvParser_LSP_NEEDED

 #line 141 "../bison++/bison.cc"

#line 141 "../bison++/bison.cc"
 /* YY_SrvParser_LSP_NEEDED*/
#endif



/* DEFAULT LTYPE*/
#ifdef YY_SrvParser_LSP_NEEDED
#ifndef YY_SrvParser_LTYPE
#ifndef BISON_YYLTYPE_ISDECLARED
#define BISON_YYLTYPE_ISDECLARED
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#endif
#define YY_SrvParser_LTYPE yyltype
#endif
#endif
/* DEFAULT STYPE*/
      /* We used to use `unsigned long' as YY_SrvParser_STYPE on MSDOS,
	 but it seems better to be consistent.
	 Most programs should declare their own type anyway.  */

#ifndef YY_SrvParser_STYPE
#define YY_SrvParser_STYPE int
#endif
/* DEFAULT MISCELANEOUS */
#ifndef YY_SrvParser_PARSE
#define YY_SrvParser_PARSE yyparse
#endif
#ifndef YY_SrvParser_LEX
#define YY_SrvParser_LEX yylex
#endif
#ifndef YY_SrvParser_LVAL
#define YY_SrvParser_LVAL yylval
#endif
#ifndef YY_SrvParser_LLOC
#define YY_SrvParser_LLOC yylloc
#endif
#ifndef YY_SrvParser_CHAR
#define YY_SrvParser_CHAR yychar
#endif
#ifndef YY_SrvParser_NERRS
#define YY_SrvParser_NERRS yynerrs
#endif
#ifndef YY_SrvParser_DEBUG_FLAG
#define YY_SrvParser_DEBUG_FLAG yydebug
#endif
#ifndef YY_SrvParser_ERROR
#define YY_SrvParser_ERROR yyerror
#endif

#ifndef YY_SrvParser_PARSE_PARAM
 #ifndef YY_USE_CLASS
  #ifdef YYPARSE_PARAM
   #define YY_SrvParser_PARSE_PARAM void* YYPARSE_PARAM 
  #else
   #ifndef __STDC__
    #ifndef __cplusplus
     #define YY_SrvParser_PARSE_PARAM
    #endif
   #endif
  #endif
 #endif
 #ifndef YY_SrvParser_PARSE_PARAM
  #define YY_SrvParser_PARSE_PARAM void
 #endif
#endif

#if YY_SrvParser_COMPATIBILITY != 0
/* backward compatibility */
#ifdef YY_SrvParser_LTYPE
#ifndef YYLTYPE
#define YYLTYPE YY_SrvParser_LTYPE
#else
/* WARNING obsolete !!! user defined YYLTYPE not reported into generated header */
#endif
#endif

/* Removed due to bison compabilityproblems
/#ifndef YYSTYPE
/#define YYSTYPE YY_SrvParser_STYPE
/#else*/
/* WARNING obsolete !!! user defined YYSTYPE not reported into generated header */
/*#endif*/

#ifdef YY_SrvParser_PURE
#  ifndef YYPURE
#    define YYPURE YY_SrvParser_PURE
#  endif
#endif

#ifdef YY_SrvParser_DEBUG
#  ifndef YYDEBUG
#    define YYDEBUG YY_SrvParser_DEBUG 
#  endif
#endif

#ifndef YY_SrvParser_ERROR_VERBOSE
 #ifdef YYERROR_VERBOSE
  #define YY_SrvParser_ERROR_VERBOSE YYERROR_VERBOSE
 #endif
#endif

#ifndef YY_SrvParser_LSP_NEEDED
#  ifdef YYLSP_NEEDED
#    define YY_SrvParser_LSP_NEEDED YYLSP_NEEDED
#  endif
#endif

#endif

#ifndef YY_USE_CLASS
/* TOKEN C */

 #line 263 "../bison++/bison.cc"
#define	IFACE_	258
#define	RELAY_	259
#define	IFACE_ID_	260
#define	IFACE_ID_ORDER_	261
#define	CLASS_	262
#define	TACLASS_	263
#define	LOGNAME_	264
#define	LOGLEVEL_	265
#define	LOGMODE_	266
#define	WORKDIR_	267
#define	OPTION_	268
#define	DNS_SERVER_	269
#define	DOMAIN_	270
#define	NTP_SERVER_	271
#define	TIME_ZONE_	272
#define	SIP_SERVER_	273
#define	SIP_DOMAIN_	274
#define	NIS_SERVER_	275
#define	NIS_DOMAIN_	276
#define	NISP_SERVER_	277
#define	NISP_DOMAIN_	278
#define	FQDN_	279
#define	LIFETIME_	280
#define	ACCEPT_ONLY_	281
#define	REJECT_CLIENTS_	282
#define	POOL_	283
#define	SHARE_	284
#define	T1_	285
#define	T2_	286
#define	PREF_TIME_	287
#define	VALID_TIME_	288
#define	UNICAST_	289
#define	PREFERENCE_	290
#define	RAPID_COMMIT_	291
#define	IFACE_MAX_LEASE_	292
#define	CLASS_MAX_LEASE_	293
#define	CLNT_MAX_LEASE_	294
#define	STATELESS_	295
#define	CACHE_SIZE_	296
#define	PDCLASS_	297
#define	PD_LENGTH_	298
#define	PD_POOL_	299
#define	VENDOR_SPEC_	300
#define	CLIENT_	301
#define	DUID_KEYWORD_	302
#define	REMOTE_ID_	303
#define	ADDRESS_	304
#define	GUESS_MODE_	305
#define	INACTIVE_MODE_	306
#define	EXPERIMENTAL_	307
#define	ADDR_PARAMS_	308
#define	TUNNEL_MODE_	309
#define	EXTRA_	310
#define	AUTH_METHOD_	311
#define	AUTH_LIFETIME_	312
#define	AUTH_KEY_LEN_	313
#define	DIGEST_NONE_	314
#define	DIGEST_PLAIN_	315
#define	DIGEST_HMAC_MD5_	316
#define	DIGEST_HMAC_SHA1_	317
#define	DIGEST_HMAC_SHA224_	318
#define	DIGEST_HMAC_SHA256_	319
#define	DIGEST_HMAC_SHA384_	320
#define	DIGEST_HMAC_SHA512_	321
#define	ACCEPT_LEASEQUERY_	322
#define	STRING_	323
#define	HEXNUMBER_	324
#define	INTNUMBER_	325
#define	IPV6ADDR_	326
#define	DUID_	327


#line 263 "../bison++/bison.cc"
 /* #defines tokens */
#else
/* CLASS */
#ifndef YY_SrvParser_CLASS
#define YY_SrvParser_CLASS SrvParser
#endif
#ifndef YY_SrvParser_INHERIT
#define YY_SrvParser_INHERIT
#endif
#ifndef YY_SrvParser_MEMBERS
#define YY_SrvParser_MEMBERS 
#endif
#ifndef YY_SrvParser_LEX_BODY
#define YY_SrvParser_LEX_BODY  
#endif
#ifndef YY_SrvParser_ERROR_BODY
#define YY_SrvParser_ERROR_BODY  
#endif
#ifndef YY_SrvParser_CONSTRUCTOR_PARAM
#define YY_SrvParser_CONSTRUCTOR_PARAM
#endif
#ifndef YY_SrvParser_CONSTRUCTOR_CODE
#define YY_SrvParser_CONSTRUCTOR_CODE
#endif
#ifndef YY_SrvParser_CONSTRUCTOR_INIT
#define YY_SrvParser_CONSTRUCTOR_INIT
#endif
/* choose between enum and const */
#ifndef YY_SrvParser_USE_CONST_TOKEN
#define YY_SrvParser_USE_CONST_TOKEN 0
/* yes enum is more compatible with flex,  */
/* so by default we use it */ 
#endif
#if YY_SrvParser_USE_CONST_TOKEN != 0
#ifndef YY_SrvParser_ENUM_TOKEN
#define YY_SrvParser_ENUM_TOKEN yy_SrvParser_enum_token
#endif
#endif

class YY_SrvParser_CLASS YY_SrvParser_INHERIT
{
public: 
#if YY_SrvParser_USE_CONST_TOKEN != 0
/* static const int token ... */

 #line 307 "../bison++/bison.cc"
static const int IFACE_;
static const int RELAY_;
static const int IFACE_ID_;
static const int IFACE_ID_ORDER_;
static const int CLASS_;
static const int TACLASS_;
static const int LOGNAME_;
static const int LOGLEVEL_;
static const int LOGMODE_;
static const int WORKDIR_;
static const int OPTION_;
static const int DNS_SERVER_;
static const int DOMAIN_;
static const int NTP_SERVER_;
static const int TIME_ZONE_;
static const int SIP_SERVER_;
static const int SIP_DOMAIN_;
static const int NIS_SERVER_;
static const int NIS_DOMAIN_;
static const int NISP_SERVER_;
static const int NISP_DOMAIN_;
static const int FQDN_;
static const int LIFETIME_;
static const int ACCEPT_ONLY_;
static const int REJECT_CLIENTS_;
static const int POOL_;
static const int SHARE_;
static const int T1_;
static const int T2_;
static const int PREF_TIME_;
static const int VALID_TIME_;
static const int UNICAST_;
static const int PREFERENCE_;
static const int RAPID_COMMIT_;
static const int IFACE_MAX_LEASE_;
static const int CLASS_MAX_LEASE_;
static const int CLNT_MAX_LEASE_;
static const int STATELESS_;
static const int CACHE_SIZE_;
static const int PDCLASS_;
static const int PD_LENGTH_;
static const int PD_POOL_;
static const int VENDOR_SPEC_;
static const int CLIENT_;
static const int DUID_KEYWORD_;
static const int REMOTE_ID_;
static const int ADDRESS_;
static const int GUESS_MODE_;
static const int INACTIVE_MODE_;
static const int EXPERIMENTAL_;
static const int ADDR_PARAMS_;
static const int TUNNEL_MODE_;
static const int EXTRA_;
static const int AUTH_METHOD_;
static const int AUTH_LIFETIME_;
static const int AUTH_KEY_LEN_;
static const int DIGEST_NONE_;
static const int DIGEST_PLAIN_;
static const int DIGEST_HMAC_MD5_;
static const int DIGEST_HMAC_SHA1_;
static const int DIGEST_HMAC_SHA224_;
static const int DIGEST_HMAC_SHA256_;
static const int DIGEST_HMAC_SHA384_;
static const int DIGEST_HMAC_SHA512_;
static const int ACCEPT_LEASEQUERY_;
static const int STRING_;
static const int HEXNUMBER_;
static const int INTNUMBER_;
static const int IPV6ADDR_;
static const int DUID_;


#line 307 "../bison++/bison.cc"
 /* decl const */
#else
enum YY_SrvParser_ENUM_TOKEN { YY_SrvParser_NULL_TOKEN=0

 #line 310 "../bison++/bison.cc"
	,IFACE_=258
	,RELAY_=259
	,IFACE_ID_=260
	,IFACE_ID_ORDER_=261
	,CLASS_=262
	,TACLASS_=263
	,LOGNAME_=264
	,LOGLEVEL_=265
	,LOGMODE_=266
	,WORKDIR_=267
	,OPTION_=268
	,DNS_SERVER_=269
	,DOMAIN_=270
	,NTP_SERVER_=271
	,TIME_ZONE_=272
	,SIP_SERVER_=273
	,SIP_DOMAIN_=274
	,NIS_SERVER_=275
	,NIS_DOMAIN_=276
	,NISP_SERVER_=277
	,NISP_DOMAIN_=278
	,FQDN_=279
	,LIFETIME_=280
	,ACCEPT_ONLY_=281
	,REJECT_CLIENTS_=282
	,POOL_=283
	,SHARE_=284
	,T1_=285
	,T2_=286
	,PREF_TIME_=287
	,VALID_TIME_=288
	,UNICAST_=289
	,PREFERENCE_=290
	,RAPID_COMMIT_=291
	,IFACE_MAX_LEASE_=292
	,CLASS_MAX_LEASE_=293
	,CLNT_MAX_LEASE_=294
	,STATELESS_=295
	,CACHE_SIZE_=296
	,PDCLASS_=297
	,PD_LENGTH_=298
	,PD_POOL_=299
	,VENDOR_SPEC_=300
	,CLIENT_=301
	,DUID_KEYWORD_=302
	,REMOTE_ID_=303
	,ADDRESS_=304
	,GUESS_MODE_=305
	,INACTIVE_MODE_=306
	,EXPERIMENTAL_=307
	,ADDR_PARAMS_=308
	,TUNNEL_MODE_=309
	,EXTRA_=310
	,AUTH_METHOD_=311
	,AUTH_LIFETIME_=312
	,AUTH_KEY_LEN_=313
	,DIGEST_NONE_=314
	,DIGEST_PLAIN_=315
	,DIGEST_HMAC_MD5_=316
	,DIGEST_HMAC_SHA1_=317
	,DIGEST_HMAC_SHA224_=318
	,DIGEST_HMAC_SHA256_=319
	,DIGEST_HMAC_SHA384_=320
	,DIGEST_HMAC_SHA512_=321
	,ACCEPT_LEASEQUERY_=322
	,STRING_=323
	,HEXNUMBER_=324
	,INTNUMBER_=325
	,IPV6ADDR_=326
	,DUID_=327


#line 310 "../bison++/bison.cc"
 /* enum token */
     }; /* end of enum declaration */
#endif
public:
 int YY_SrvParser_PARSE (YY_SrvParser_PARSE_PARAM);
 virtual void YY_SrvParser_ERROR(char *msg) YY_SrvParser_ERROR_BODY;
#ifdef YY_SrvParser_PURE
#ifdef YY_SrvParser_LSP_NEEDED
 virtual int  YY_SrvParser_LEX (YY_SrvParser_STYPE *YY_SrvParser_LVAL,YY_SrvParser_LTYPE *YY_SrvParser_LLOC) YY_SrvParser_LEX_BODY;
#else
 virtual int  YY_SrvParser_LEX (YY_SrvParser_STYPE *YY_SrvParser_LVAL) YY_SrvParser_LEX_BODY;
#endif
#else
 virtual int YY_SrvParser_LEX() YY_SrvParser_LEX_BODY;
 YY_SrvParser_STYPE YY_SrvParser_LVAL;
#ifdef YY_SrvParser_LSP_NEEDED
 YY_SrvParser_LTYPE YY_SrvParser_LLOC;
#endif
 int   YY_SrvParser_NERRS;
 int    YY_SrvParser_CHAR;
#endif
#if YY_SrvParser_DEBUG != 0
 int YY_SrvParser_DEBUG_FLAG;   /*  nonzero means print parse trace     */
#endif
public:
 YY_SrvParser_CLASS(YY_SrvParser_CONSTRUCTOR_PARAM);
public:
 YY_SrvParser_MEMBERS 
};
/* other declare folow */
#if YY_SrvParser_USE_CONST_TOKEN != 0

 #line 341 "../bison++/bison.cc"
const int YY_SrvParser_CLASS::IFACE_=258;
const int YY_SrvParser_CLASS::RELAY_=259;
const int YY_SrvParser_CLASS::IFACE_ID_=260;
const int YY_SrvParser_CLASS::IFACE_ID_ORDER_=261;
const int YY_SrvParser_CLASS::CLASS_=262;
const int YY_SrvParser_CLASS::TACLASS_=263;
const int YY_SrvParser_CLASS::LOGNAME_=264;
const int YY_SrvParser_CLASS::LOGLEVEL_=265;
const int YY_SrvParser_CLASS::LOGMODE_=266;
const int YY_SrvParser_CLASS::WORKDIR_=267;
const int YY_SrvParser_CLASS::OPTION_=268;
const int YY_SrvParser_CLASS::DNS_SERVER_=269;
const int YY_SrvParser_CLASS::DOMAIN_=270;
const int YY_SrvParser_CLASS::NTP_SERVER_=271;
const int YY_SrvParser_CLASS::TIME_ZONE_=272;
const int YY_SrvParser_CLASS::SIP_SERVER_=273;
const int YY_SrvParser_CLASS::SIP_DOMAIN_=274;
const int YY_SrvParser_CLASS::NIS_SERVER_=275;
const int YY_SrvParser_CLASS::NIS_DOMAIN_=276;
const int YY_SrvParser_CLASS::NISP_SERVER_=277;
const int YY_SrvParser_CLASS::NISP_DOMAIN_=278;
const int YY_SrvParser_CLASS::FQDN_=279;
const int YY_SrvParser_CLASS::LIFETIME_=280;
const int YY_SrvParser_CLASS::ACCEPT_ONLY_=281;
const int YY_SrvParser_CLASS::REJECT_CLIENTS_=282;
const int YY_SrvParser_CLASS::POOL_=283;
const int YY_SrvParser_CLASS::SHARE_=284;
const int YY_SrvParser_CLASS::T1_=285;
const int YY_SrvParser_CLASS::T2_=286;
const int YY_SrvParser_CLASS::PREF_TIME_=287;
const int YY_SrvParser_CLASS::VALID_TIME_=288;
const int YY_SrvParser_CLASS::UNICAST_=289;
const int YY_SrvParser_CLASS::PREFERENCE_=290;
const int YY_SrvParser_CLASS::RAPID_COMMIT_=291;
const int YY_SrvParser_CLASS::IFACE_MAX_LEASE_=292;
const int YY_SrvParser_CLASS::CLASS_MAX_LEASE_=293;
const int YY_SrvParser_CLASS::CLNT_MAX_LEASE_=294;
const int YY_SrvParser_CLASS::STATELESS_=295;
const int YY_SrvParser_CLASS::CACHE_SIZE_=296;
const int YY_SrvParser_CLASS::PDCLASS_=297;
const int YY_SrvParser_CLASS::PD_LENGTH_=298;
const int YY_SrvParser_CLASS::PD_POOL_=299;
const int YY_SrvParser_CLASS::VENDOR_SPEC_=300;
const int YY_SrvParser_CLASS::CLIENT_=301;
const int YY_SrvParser_CLASS::DUID_KEYWORD_=302;
const int YY_SrvParser_CLASS::REMOTE_ID_=303;
const int YY_SrvParser_CLASS::ADDRESS_=304;
const int YY_SrvParser_CLASS::GUESS_MODE_=305;
const int YY_SrvParser_CLASS::INACTIVE_MODE_=306;
const int YY_SrvParser_CLASS::EXPERIMENTAL_=307;
const int YY_SrvParser_CLASS::ADDR_PARAMS_=308;
const int YY_SrvParser_CLASS::TUNNEL_MODE_=309;
const int YY_SrvParser_CLASS::EXTRA_=310;
const int YY_SrvParser_CLASS::AUTH_METHOD_=311;
const int YY_SrvParser_CLASS::AUTH_LIFETIME_=312;
const int YY_SrvParser_CLASS::AUTH_KEY_LEN_=313;
const int YY_SrvParser_CLASS::DIGEST_NONE_=314;
const int YY_SrvParser_CLASS::DIGEST_PLAIN_=315;
const int YY_SrvParser_CLASS::DIGEST_HMAC_MD5_=316;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA1_=317;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA224_=318;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA256_=319;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA384_=320;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA512_=321;
const int YY_SrvParser_CLASS::ACCEPT_LEASEQUERY_=322;
const int YY_SrvParser_CLASS::STRING_=323;
const int YY_SrvParser_CLASS::HEXNUMBER_=324;
const int YY_SrvParser_CLASS::INTNUMBER_=325;
const int YY_SrvParser_CLASS::IPV6ADDR_=326;
const int YY_SrvParser_CLASS::DUID_=327;


#line 341 "../bison++/bison.cc"
 /* const YY_SrvParser_CLASS::token */
#endif
/*apres const  */
YY_SrvParser_CLASS::YY_SrvParser_CLASS(YY_SrvParser_CONSTRUCTOR_PARAM) YY_SrvParser_CONSTRUCTOR_INIT
{
#if YY_SrvParser_DEBUG != 0
YY_SrvParser_DEBUG_FLAG=0;
#endif
YY_SrvParser_CONSTRUCTOR_CODE;
}
#endif

 #line 352 "../bison++/bison.cc"


#define	YYFINAL		331
#define	YYFLAG		-32768
#define	YYNTBASE	78

#define YYTRANSLATE(x) ((unsigned)(x) <= 327 ? yytranslate[x] : 177)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,    76,    75,     2,    77,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    73,     2,    74,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72
};

#if YY_SrvParser_DEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     5,     7,    10,    13,    15,    17,    19,
    21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
    41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
    61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
    81,    83,    85,    87,    89,    91,    93,    94,   101,   102,
   109,   111,   114,   116,   118,   121,   124,   125,   133,   134,
   144,   146,   149,   151,   153,   155,   157,   159,   161,   163,
   165,   167,   169,   171,   173,   175,   177,   179,   182,   183,
   189,   191,   194,   195,   201,   203,   206,   208,   210,   212,
   214,   216,   218,   219,   225,   227,   230,   232,   234,   236,
   238,   240,   242,   245,   248,   251,   254,   257,   260,   263,
   266,   269,   272,   274,   278,   282,   286,   292,   298,   300,
   302,   304,   308,   312,   318,   320,   324,   326,   330,   334,
   338,   344,   348,   350,   354,   358,   364,   366,   370,   374,
   380,   381,   385,   386,   390,   391,   395,   396,   400,   403,
   406,   411,   414,   419,   422,   425,   430,   433,   438,   441,
   444,   447,   452,   453,   458,   462,   466,   472,   475,   478,
   481,   484,   487,   490,   493,   496,   498,   500,   502,   504,
   507,   510,   512,   515,   518,   521,   524,   526,   528,   530,
   532,   534,   536,   538,   540,   542,   544,   545,   550,   551,
   556,   557,   562,   566,   567,   572,   573,   578,   579,   584,
   585,   591,   592,   599,   600,   605,   606,   611,   615,   619,
   623,   624
};

static const short yyrhs[] = {    79,
     0,     0,    80,     0,    82,     0,    79,    80,     0,    79,
    82,     0,    81,     0,   140,     0,   139,     0,   141,     0,
   142,     0,   143,     0,   148,     0,   103,     0,   104,     0,
   105,     0,   146,     0,   147,     0,   144,     0,   131,     0,
   152,     0,   150,     0,   151,     0,   149,     0,   136,     0,
   138,     0,   137,     0,   135,     0,   128,     0,   153,     0,
   155,     0,   157,     0,   159,     0,   160,     0,   162,     0,
   164,     0,   168,     0,   172,     0,   170,     0,   173,     0,
   174,     0,   132,     0,    99,     0,   175,     0,    86,     0,
   145,     0,     0,     3,    68,    73,    83,    85,    74,     0,
     0,     3,   107,    73,    84,    85,    74,     0,    81,     0,
    85,    81,     0,    92,     0,    95,     0,    85,    95,     0,
    85,    92,     0,     0,    46,    47,    72,    73,    87,    89,
    74,     0,     0,    46,    48,   107,    75,    72,    73,    88,
    89,    74,     0,    90,     0,    89,    90,     0,   153,     0,
   155,     0,   157,     0,   159,     0,   160,     0,   162,     0,
   168,     0,   172,     0,   170,     0,   173,     0,   174,     0,
   175,     0,   132,     0,   131,     0,    91,     0,    49,    71,
     0,     0,     7,    73,    93,    94,    74,     0,   152,     0,
    94,   152,     0,     0,     8,    73,    96,    97,    74,     0,
    98,     0,    97,    98,     0,   123,     0,   124,     0,   118,
     0,   129,     0,   114,     0,   116,     0,     0,    42,    73,
   100,   101,    74,     0,   102,     0,   102,   101,     0,   122,
     0,   120,     0,   124,     0,   123,     0,   126,     0,   127,
     0,    56,    59,     0,    56,    60,     0,    56,    61,     0,
    56,    62,     0,    56,    63,     0,    56,    64,     0,    56,
    65,     0,    56,    66,     0,    57,   107,     0,    58,   107,
     0,    68,     0,    68,    75,    72,     0,    68,    75,    71,
     0,   106,    76,    68,     0,   106,    76,    68,    75,    72,
     0,   106,    76,    68,    75,    71,     0,    69,     0,    70,
     0,    71,     0,   108,    76,    71,     0,   107,    75,    72,
     0,   109,    76,   107,    75,    72,     0,    68,     0,   110,
    76,    68,     0,    71,     0,    71,    75,    71,     0,    71,
    77,    70,     0,   111,    76,    71,     0,   111,    76,    71,
    75,    71,     0,    71,    77,    70,     0,    71,     0,    71,
    75,    71,     0,   113,    76,    71,     0,   113,    76,    71,
    75,    71,     0,    72,     0,    72,    75,    72,     0,   113,
    76,    72,     0,   113,    76,    72,    75,    72,     0,     0,
    27,   115,   113,     0,     0,    26,   117,   113,     0,     0,
    28,   119,   111,     0,     0,    44,   121,   112,     0,    43,
   107,     0,    32,   107,     0,    32,   107,    75,   107,     0,
    33,   107,     0,    33,   107,    75,   107,     0,    29,   107,
     0,    30,   107,     0,    30,   107,    75,   107,     0,    31,
   107,     0,    31,   107,    75,   107,     0,    39,   107,     0,
    38,   107,     0,    53,   107,     0,    54,   107,   107,    71,
     0,     0,    13,    55,   133,   134,     0,   107,    75,    72,
     0,   107,    75,    75,     0,   134,    76,   107,    75,    72,
     0,    37,   107,     0,    34,    71,     0,    36,   107,     0,
    35,   107,     0,    10,   107,     0,    11,    68,     0,     9,
    68,     0,    12,    68,     0,    40,     0,    50,     0,    51,
     0,    52,     0,     6,    68,     0,    41,   107,     0,    67,
     0,    67,   107,     0,     4,    68,     0,     4,   107,     0,
     5,   107,     0,   123,     0,   124,     0,   118,     0,   125,
     0,   126,     0,   127,     0,   114,     0,   116,     0,   129,
     0,   130,     0,     0,    13,    14,   154,   108,     0,     0,
    13,    15,   156,   110,     0,     0,    13,    16,   158,   108,
     0,    13,    17,    68,     0,     0,    13,    18,   161,   108,
     0,     0,    13,    19,   163,   110,     0,     0,    13,    24,
   165,   106,     0,     0,    13,    24,    70,   166,   106,     0,
     0,    13,    24,    70,    70,   167,   106,     0,     0,    13,
    20,   169,   108,     0,     0,    13,    22,   171,   108,     0,
    13,    21,    68,     0,    13,    23,    68,     0,    13,    25,
   107,     0,     0,    13,    45,   176,   109,     0
};

#endif

#if (YY_SrvParser_DEBUG != 0) || defined(YY_SrvParser_ERROR_VERBOSE) 
static const short yyrline[] = { 0,
   121,   122,   126,   127,   128,   129,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   180,   185,   194,   200,
   207,   208,   209,   210,   211,   212,   216,   222,   230,   236,
   245,   246,   250,   251,   252,   253,   254,   255,   256,   257,
   258,   259,   260,   261,   262,   263,   264,   267,   276,   281,
   289,   290,   295,   298,   306,   307,   310,   311,   312,   313,
   314,   315,   319,   322,   330,   331,   334,   335,   336,   337,
   338,   339,   347,   348,   349,   350,   351,   352,   353,   354,
   358,   362,   370,   375,   382,   389,   394,   401,   411,   412,
   416,   420,   427,   432,   440,   441,   445,   449,   458,   474,
   478,   490,   513,   517,   526,   530,   539,   544,   554,   559,
   573,   577,   583,   587,   593,   597,   603,   606,   611,   618,
   623,   631,   636,   644,   656,   661,   669,   674,   682,   689,
   696,   709,   742,   751,   756,   761,   766,   774,   781,   788,
   803,   815,   821,   826,   833,   840,   847,   854,   860,   867,
   888,   895,   900,   920,   924,   931,   938,   939,   940,   941,
   942,   943,   944,   945,   946,   947,   955,   959,   968,   971,
   980,   984,   993,  1003,  1006,  1015,  1018,  1028,  1036,  1039,
  1047,  1051,  1059,  1069,  1072,  1081,  1084,  1093,  1103,  1113,
  1120,  1123
};

static const char * const yytname[] = {   "$","error","$illegal.","IFACE_","RELAY_",
"IFACE_ID_","IFACE_ID_ORDER_","CLASS_","TACLASS_","LOGNAME_","LOGLEVEL_","LOGMODE_",
"WORKDIR_","OPTION_","DNS_SERVER_","DOMAIN_","NTP_SERVER_","TIME_ZONE_","SIP_SERVER_",
"SIP_DOMAIN_","NIS_SERVER_","NIS_DOMAIN_","NISP_SERVER_","NISP_DOMAIN_","FQDN_",
"LIFETIME_","ACCEPT_ONLY_","REJECT_CLIENTS_","POOL_","SHARE_","T1_","T2_","PREF_TIME_",
"VALID_TIME_","UNICAST_","PREFERENCE_","RAPID_COMMIT_","IFACE_MAX_LEASE_","CLASS_MAX_LEASE_",
"CLNT_MAX_LEASE_","STATELESS_","CACHE_SIZE_","PDCLASS_","PD_LENGTH_","PD_POOL_",
"VENDOR_SPEC_","CLIENT_","DUID_KEYWORD_","REMOTE_ID_","ADDRESS_","GUESS_MODE_",
"INACTIVE_MODE_","EXPERIMENTAL_","ADDR_PARAMS_","TUNNEL_MODE_","EXTRA_","AUTH_METHOD_",
"AUTH_LIFETIME_","AUTH_KEY_LEN_","DIGEST_NONE_","DIGEST_PLAIN_","DIGEST_HMAC_MD5_",
"DIGEST_HMAC_SHA1_","DIGEST_HMAC_SHA224_","DIGEST_HMAC_SHA256_","DIGEST_HMAC_SHA384_",
"DIGEST_HMAC_SHA512_","ACCEPT_LEASEQUERY_","STRING_","HEXNUMBER_","INTNUMBER_",
"IPV6ADDR_","DUID_","'{'","'}'","'-'","','","'/'","Grammar","GlobalDeclarationList",
"GlobalOption","InterfaceOptionDeclaration","InterfaceDeclaration","@1","@2",
"InterfaceDeclarationsList","Client","@3","@4","ClientOptions","ClientOption",
"AddressReservation","ClassDeclaration","@5","ClassOptionDeclarationsList","TAClassDeclaration",
"@6","TAClassOptionsList","TAClassOption","PDDeclaration","@7","PDOptionsList",
"PDOptions","AuthMethod","AuthLifetime","AuthKeyGenNonceLen","FQDNList","Number",
"ADDRESSList","VendorSpecList","StringList","ADDRESSRangeList","PDRangeList",
"ADDRESSDUIDRangeList","RejectClientsOption","@8","AcceptOnlyOption","@9","PoolOption",
"@10","PDPoolOption","@11","PDLength","PreferredTimeOption","ValidTimeOption",
"ShareOption","T1Option","T2Option","ClntMaxLeaseOption","ClassMaxLeaseOption",
"AddrParams","TunnelMode","ExtraOptions","@12","ExtraOptsList","IfaceMaxLeaseOption",
"UnicastAddressOption","RapidCommitOption","PreferenceOption","LogLevelOption",
"LogModeOption","LogNameOption","WorkDirOption","StatelessOption","GuessMode",
"InactiveMode","Experimental","IfaceIDOrder","CacheSizeOption","AcceptLeaseQuery",
"RelayOption","InterfaceIDOption","ClassOptionDeclaration","DNSServerOption",
"@13","DomainOption","@14","NTPServerOption","@15","TimeZoneOption","SIPServerOption",
"@16","SIPDomainOption","@17","FQDNOption","@18","@19","@20","NISServerOption",
"@21","NISPServerOption","@22","NISDomainOption","NISPDomainOption","LifetimeOption",
"VendorSpecOption","@23",""
};
#endif

static const short yyr1[] = {     0,
    78,    78,    79,    79,    79,    79,    80,    80,    80,    80,
    80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
    81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
    81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
    81,    81,    81,    81,    81,    81,    83,    82,    84,    82,
    85,    85,    85,    85,    85,    85,    87,    86,    88,    86,
    89,    89,    90,    90,    90,    90,    90,    90,    90,    90,
    90,    90,    90,    90,    90,    90,    90,    91,    93,    92,
    94,    94,    96,    95,    97,    97,    98,    98,    98,    98,
    98,    98,   100,    99,   101,   101,   102,   102,   102,   102,
   102,   102,   103,   103,   103,   103,   103,   103,   103,   103,
   104,   105,   106,   106,   106,   106,   106,   106,   107,   107,
   108,   108,   109,   109,   110,   110,   111,   111,   111,   111,
   111,   112,   113,   113,   113,   113,   113,   113,   113,   113,
   115,   114,   117,   116,   119,   118,   121,   120,   122,   123,
   123,   124,   124,   125,   126,   126,   127,   127,   128,   129,
   130,   131,   133,   132,   134,   134,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   149,   150,   150,   151,   152,   152,   152,   152,
   152,   152,   152,   152,   152,   152,   154,   153,   156,   155,
   158,   157,   159,   161,   160,   163,   162,   165,   164,   166,
   164,   167,   164,   169,   168,   171,   170,   172,   173,   174,
   176,   175
};

static const short yyr2[] = {     0,
     1,     0,     1,     1,     2,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     0,     6,     0,     6,
     1,     2,     1,     1,     2,     2,     0,     7,     0,     9,
     1,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     2,     0,     5,
     1,     2,     0,     5,     1,     2,     1,     1,     1,     1,
     1,     1,     0,     5,     1,     2,     1,     1,     1,     1,
     1,     1,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     1,     3,     3,     3,     5,     5,     1,     1,
     1,     3,     3,     5,     1,     3,     1,     3,     3,     3,
     5,     3,     1,     3,     3,     5,     1,     3,     3,     5,
     0,     3,     0,     3,     0,     3,     0,     3,     2,     2,
     4,     2,     4,     2,     2,     4,     2,     4,     2,     2,
     2,     4,     0,     4,     3,     3,     5,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     1,     1,     1,     2,
     2,     1,     2,     2,     2,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     0,     4,     0,     4,
     0,     4,     3,     0,     4,     0,     4,     0,     4,     0,
     5,     0,     6,     0,     4,     0,     4,     3,     3,     3,
     0,     4
};

static const short yydefact[] = {     2,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   143,
   141,   145,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   176,     0,     0,     0,   177,   178,   179,
     0,     0,     0,     0,     0,   182,     1,     3,     7,     4,
    45,    43,    14,    15,    16,   193,   194,   189,   187,   188,
   190,   191,   192,    29,   195,   196,    20,    42,    28,    25,
    27,    26,     9,     8,    10,    11,    12,    19,    46,    17,
    18,    13,    24,    22,    23,    21,    30,    31,    32,    33,
    34,    35,    36,    37,    39,    38,    40,    41,    44,     0,
   119,   120,     0,   184,   185,   186,   180,   174,   172,   173,
   175,   197,   199,   201,     0,   204,   206,   214,     0,   216,
     0,   208,     0,   221,   163,     0,     0,     0,   154,   155,
   157,   150,   152,   169,   171,   170,   168,   160,   159,   181,
    93,     0,     0,   161,     0,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   183,     5,     6,    47,    49,
     0,     0,     0,   203,     0,     0,     0,   218,     0,   219,
   210,     0,   220,     0,     0,   133,   137,   144,   142,   127,
   146,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   121,   198,   125,   200,   202,   205,   207,   215,   217,
   212,     0,   113,   209,     0,   222,     0,   164,     0,     0,
     0,     0,     0,     0,   156,   158,   151,   153,     0,   147,
     0,    95,    98,    97,   100,    99,   101,   102,    57,     0,
   162,     0,     0,    51,     0,    53,    54,     0,     0,     0,
     0,   211,     0,     0,     0,     0,     0,     0,   134,   138,
   135,   139,   128,   129,   130,   149,     0,    94,    96,     0,
     0,    79,    83,    48,    52,    56,    55,    50,   122,   126,
   213,   115,   114,   116,   123,     0,   165,   166,     0,     0,
     0,     0,     0,   148,     0,     0,     0,    61,    77,    76,
    75,    63,    64,    65,    66,    67,    68,    69,    71,    70,
    72,    73,    74,    59,     0,     0,     0,     0,     0,   136,
   140,   131,     0,    78,    58,    62,     0,     0,    81,     0,
    85,    91,    92,    89,    87,    88,    90,   118,   117,   124,
   167,   132,     0,    80,    82,    84,    86,    60,     0,     0,
     0
};

static const short yydefgoto[] = {   329,
    37,    38,    39,    40,   180,   181,   225,    41,   250,   307,
   277,   278,   279,   226,   295,   308,   227,   296,   310,   311,
    42,   176,   211,   212,    43,    44,    45,   194,    93,   183,
   196,   185,   171,   274,   168,    46,   117,    47,   116,    48,
   118,   213,   247,   214,    49,    50,    51,    52,    53,    54,
    55,    56,   280,    58,   165,   198,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,   151,    78,   152,    79,   153,
    80,    81,   155,    82,   156,    83,   162,   192,   231,    84,
   157,    85,   159,    86,    87,    88,    89,   164
};

static const short yypact[] = {   263,
    57,    98,    50,   -42,   -16,    50,    -4,    18,   386,-32768,
-32768,-32768,    50,    50,    50,    50,    50,    42,    50,    50,
    50,    50,    50,-32768,    50,    55,   110,-32768,-32768,-32768,
    50,    50,   167,    50,    50,    50,   263,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    62,
-32768,-32768,    78,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    86,-32768,-32768,-32768,    96,-32768,
   101,    60,    50,-32768,-32768,   117,   117,   134,-32768,   138,
   143,   146,   149,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   140,    50,-32768,    50,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   152,   169,   152,-32768,   152,   169,   152,-32768,   152,-32768,
   144,   184,-32768,    50,    50,   160,   178,   179,   179,   -18,
   180,    50,    50,    50,    50,   116,   186,   182,   189,   318,
   318,-32768,   185,-32768,   188,   185,   185,   188,   185,   185,
-32768,   184,   187,   194,   196,   201,   203,   204,   210,   211,
   124,   213,   215,   216,-32768,-32768,-32768,-32768,    50,-32768,
   208,   116,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   234,
-32768,   235,   237,-32768,   148,-32768,-32768,   212,   217,   239,
   184,   194,   137,   243,   240,    50,    15,    50,-32768,-32768,
   249,   252,-32768,-32768,   253,-32768,   247,-32768,-32768,    80,
   256,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   194,-32768,-32768,   257,-32768,   258,-32768,-32768,   259,   264,
   265,   267,   262,-32768,   428,   269,    43,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   112,   165,   139,   270,   271,-32768,
-32768,-32768,   266,-32768,-32768,-32768,    80,   346,-32768,   354,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    58,-32768,-32768,-32768,-32768,-32768,   341,   358,
-32768
};

static const short yypgoto[] = {-32768,
-32768,   322,  -175,   324,-32768,-32768,   181,-32768,-32768,-32768,
    56,  -253,-32768,  -134,-32768,-32768,  -119,-32768,-32768,    73,
-32768,-32768,   153,-32768,-32768,-32768,-32768,  -185,    -2,    47,
-32768,   214,-32768,-32768,   250,  -249,-32768,  -236,-32768,  -233,
-32768,-32768,-32768,-32768,  -174,  -173,-32768,  -136,  -132,-32768,
  -200,-32768,    25,  -242,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  -192,  -241,-32768,  -240,-32768,  -234,-32768,
  -228,  -223,-32768,  -222,-32768,-32768,-32768,-32768,-32768,  -219,
-32768,  -209,-32768,  -208,  -205,  -202,  -199,-32768
};


#define	YYLAST		483


static const short yytable[] = {    95,
    96,   215,   216,    99,   224,   224,   232,   281,   282,   283,
   119,   120,   121,   122,   123,   284,   125,   126,   127,   128,
   129,   285,   130,   306,    57,    97,   286,   287,   134,   135,
   288,   144,   145,   146,   281,   282,   283,   215,   216,   217,
   289,   290,   284,   218,   291,   261,   312,   292,   285,   255,
   293,    98,   255,   286,   287,   275,   202,   288,   203,   313,
   312,    57,   314,   100,   281,   282,   283,   289,   290,   306,
   275,   291,   284,   313,   292,   217,   314,   293,   285,   218,
   281,   282,   283,   286,   287,   101,   267,   288,   284,   268,
   256,   276,   275,   256,   285,   317,    32,   289,   290,   286,
   287,   291,   309,   288,   292,   257,   276,   293,   257,   317,
   163,    32,   124,   289,   290,   325,   305,   291,    91,    92,
   292,   315,   316,   293,    90,    91,    92,   131,   276,   161,
   178,   328,   179,    32,   149,   315,   316,    10,    11,    12,
    13,    14,    15,    16,    17,    14,    15,    16,    17,    22,
   150,     2,     3,   154,   222,   223,   132,   133,   209,   210,
     9,   195,   197,   158,    31,    94,    91,    92,   160,   205,
   206,   207,   208,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,   166,   167,    26,
    10,    11,    12,    27,   241,   242,    16,    17,    29,   186,
    31,   187,    22,   189,   170,   190,   246,   262,   263,   318,
   319,   177,   172,   191,    36,     2,     3,   173,   222,   223,
   174,   254,   182,   175,     9,   136,   137,   138,   139,   140,
   141,   142,   143,   266,   199,   269,   184,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,   193,   200,    26,   201,   204,   220,    27,   219,   221,
   229,   233,    29,   230,    31,     1,     2,     3,     4,   234,
   235,     5,     6,     7,     8,     9,   236,   237,    36,   238,
   239,   248,   240,   243,   244,   258,   245,   259,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,   251,   260,   252,    27,   253,
   264,   265,    28,    29,    30,    31,    32,   273,    33,    34,
    35,     2,     3,   270,   222,   223,   271,   272,   294,    36,
     9,   297,   298,   299,   300,   322,   301,   302,   303,   304,
   330,   320,   321,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,   331,   147,    26,
   148,   228,   323,    27,   249,     0,   169,     0,    29,   188,
    31,    10,    11,    12,    13,    14,    15,    16,    17,    10,
    11,    12,   327,    22,    36,    16,    17,     0,     0,     0,
     0,    22,     0,     0,     0,     0,     0,     0,    31,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,     0,     0,     0,     0,     0,     0,     0,     0,   324,
     0,     0,     0,     0,     0,     0,     0,   326,     0,     0,
   114,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   115,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,     0,   113,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   114,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   115
};

static const short yycheck[] = {     2,
     3,   176,   176,     6,   180,   181,   192,   250,   250,   250,
    13,    14,    15,    16,    17,   250,    19,    20,    21,    22,
    23,   250,    25,   277,     0,    68,   250,   250,    31,    32,
   250,    34,    35,    36,   277,   277,   277,   212,   212,   176,
   250,   250,   277,   176,   250,   231,   296,   250,   277,   225,
   250,    68,   228,   277,   277,    13,    75,   277,    77,   296,
   310,    37,   296,    68,   307,   307,   307,   277,   277,   323,
    13,   277,   307,   310,   277,   212,   310,   277,   307,   212,
   323,   323,   323,   307,   307,    68,    72,   307,   323,    75,
   225,    49,    13,   228,   323,   296,    54,   307,   307,   323,
   323,   307,   295,   323,   307,   225,    49,   307,   228,   310,
   113,    54,    71,   323,   323,   308,    74,   323,    69,    70,
   323,   296,   296,   323,    68,    69,    70,    73,    49,    70,
   133,    74,   135,    54,    73,   310,   310,    26,    27,    28,
    29,    30,    31,    32,    33,    30,    31,    32,    33,    38,
    73,     4,     5,    68,     7,     8,    47,    48,    43,    44,
    13,   164,   165,    68,    53,    68,    69,    70,    68,   172,
   173,   174,   175,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    71,    72,    42,
    26,    27,    28,    46,    71,    72,    32,    33,    51,   153,
    53,   155,    38,   157,    71,   159,   209,    71,    72,    71,
    72,    72,    75,    70,    67,     4,     5,    75,     7,     8,
    75,    74,    71,    75,    13,    59,    60,    61,    62,    63,
    64,    65,    66,   236,    75,   238,    68,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    68,    75,    42,    76,    76,    75,    46,    73,    71,
    76,    75,    51,    76,    53,     3,     4,     5,     6,    76,
    75,     9,    10,    11,    12,    13,    76,    75,    67,    76,
    71,    74,    72,    71,    70,    74,    71,    71,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    72,    68,    73,    46,    73,
    68,    72,    50,    51,    52,    53,    54,    71,    56,    57,
    58,     4,     5,    75,     7,     8,    75,    75,    73,    67,
    13,    75,    75,    75,    71,    70,    72,    71,    77,    71,
     0,    72,    72,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,     0,    37,    42,
    37,   181,   307,    46,   212,    -1,   117,    -1,    51,   156,
    53,    26,    27,    28,    29,    30,    31,    32,    33,    26,
    27,    28,   310,    38,    67,    32,    33,    -1,    -1,    -1,
    -1,    38,    -1,    -1,    -1,    -1,    -1,    -1,    53,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    -1,    -1,
    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    55,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    -1,    25,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    55
};

#line 352 "../bison++/bison.cc"
 /* fattrs + tables */

/* parser code folow  */


/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: dollar marks section change
   the next  is replaced by the list of actions, each action
   as one case of the switch.  */ 

#if YY_SrvParser_USE_GOTO != 0
/* 
 SUPRESSION OF GOTO : on some C++ compiler (sun c++)
  the goto is strictly forbidden if any constructor/destructor
  is used in the whole function (very stupid isn't it ?)
 so goto are to be replaced with a 'while/switch/case construct'
 here are the macro to keep some apparent compatibility
*/
#define YYGOTO(lb) {yy_gotostate=lb;continue;}
#define YYBEGINGOTO  enum yy_labels yy_gotostate=yygotostart; \
                     for(;;) switch(yy_gotostate) { case yygotostart: {
#define YYLABEL(lb) } case lb: {
#define YYENDGOTO } } 
#define YYBEGINDECLARELABEL enum yy_labels {yygotostart
#define YYDECLARELABEL(lb) ,lb
#define YYENDDECLARELABEL  }
#else
/* macro to keep goto */
#define YYGOTO(lb) goto lb
#define YYBEGINGOTO 
#define YYLABEL(lb) lb:
#define YYENDGOTO
#define YYBEGINDECLARELABEL 
#define YYDECLARELABEL(lb)
#define YYENDDECLARELABEL  
#endif
/* LABEL DECLARATION */
YYBEGINDECLARELABEL
  YYDECLARELABEL(yynewstate)
  YYDECLARELABEL(yybackup)
/* YYDECLARELABEL(yyresume) */
  YYDECLARELABEL(yydefault)
  YYDECLARELABEL(yyreduce)
  YYDECLARELABEL(yyerrlab)   /* here on detecting error */
  YYDECLARELABEL(yyerrlab1)   /* here on error raised explicitly by an action */
  YYDECLARELABEL(yyerrdefault)  /* current state does not do anything special for the error token. */
  YYDECLARELABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */
  YYDECLARELABEL(yyerrhandle)  
YYENDDECLARELABEL
/* ALLOCA SIMULATION */
/* __HAVE_NO_ALLOCA */
#ifdef __HAVE_NO_ALLOCA
int __alloca_free_ptr(char *ptr,char *ref)
{if(ptr!=ref) free(ptr);
 return 0;}

#define __ALLOCA_alloca(size) malloc(size)
#define __ALLOCA_free(ptr,ref) __alloca_free_ptr((char *)ptr,(char *)ref)

#ifdef YY_SrvParser_LSP_NEEDED
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		    __ALLOCA_free(yyls,yylsa)+\
		   (num)); } while(0)
#else
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		   (num)); } while(0)
#endif
#else
#define __ALLOCA_return(num) do { return(num); } while(0)
#define __ALLOCA_alloca(size) alloca(size)
#define __ALLOCA_free(ptr,ref) 
#endif

/* ENDALLOCA SIMULATION */

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (YY_SrvParser_CHAR = YYEMPTY)
#define YYEMPTY         -2
#define YYEOF           0
#define YYACCEPT        __ALLOCA_return(0)
#define YYABORT         __ALLOCA_return(1)
#define YYERROR         YYGOTO(yyerrlab1)
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL          YYGOTO(yyerrlab)
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do                                                              \
  if (YY_SrvParser_CHAR == YYEMPTY && yylen == 1)                               \
    { YY_SrvParser_CHAR = (token), YY_SrvParser_LVAL = (value);                 \
      yychar1 = YYTRANSLATE (YY_SrvParser_CHAR);                                \
      YYPOPSTACK;                                               \
      YYGOTO(yybackup);                                            \
    }                                                           \
  else                                                          \
    { YY_SrvParser_ERROR ("syntax error: cannot back up"); YYERROR; }   \
while (0)

#define YYTERROR        1
#define YYERRCODE       256

#ifndef YY_SrvParser_PURE
/* UNPURE */
#define YYLEX           YY_SrvParser_LEX()
#ifndef YY_USE_CLASS
/* If nonreentrant, and not class , generate the variables here */
int     YY_SrvParser_CHAR;                      /*  the lookahead symbol        */
YY_SrvParser_STYPE      YY_SrvParser_LVAL;              /*  the semantic value of the */
				/*  lookahead symbol    */
int YY_SrvParser_NERRS;                 /*  number of parse errors so far */
#ifdef YY_SrvParser_LSP_NEEDED
YY_SrvParser_LTYPE YY_SrvParser_LLOC;   /*  location data for the lookahead     */
			/*  symbol                              */
#endif
#endif


#else
/* PURE */
#ifdef YY_SrvParser_LSP_NEEDED
#define YYLEX           YY_SrvParser_LEX(&YY_SrvParser_LVAL, &YY_SrvParser_LLOC)
#else
#define YYLEX           YY_SrvParser_LEX(&YY_SrvParser_LVAL)
#endif
#endif
#ifndef YY_USE_CLASS
#if YY_SrvParser_DEBUG != 0
int YY_SrvParser_DEBUG_FLAG;                    /*  nonzero means print parse trace     */
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif
#endif



/*  YYINITDEPTH indicates the initial size of the parser's stacks       */

#ifndef YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif


#if __GNUC__ > 1                /* GNU C and GNU C++ define this.  */
#define __yy_bcopy(FROM,TO,COUNT)       __builtin_memcpy(TO,FROM,COUNT)
#else                           /* not GNU C or C++ */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */

#ifdef __cplusplus
static void __yy_bcopy (char *from, char *to, int count)
#else
#ifdef __STDC__
static void __yy_bcopy (char *from, char *to, int count)
#else
static void __yy_bcopy (from, to, count)
     char *from;
     char *to;
     int count;
#endif
#endif
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}
#endif


int
#ifdef YY_USE_CLASS
 YY_SrvParser_CLASS::
#endif
     YY_SrvParser_PARSE(YY_SrvParser_PARSE_PARAM)
#ifndef __STDC__
#ifndef __cplusplus
#ifndef YY_USE_CLASS
/* parameter definition without protypes */
YY_SrvParser_PARSE_PARAM_DEF
#endif
#endif
#endif
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YY_SrvParser_STYPE *yyvsp;
  int yyerrstatus;      /*  number of tokens to shift before error messages enabled */
  int yychar1=0;          /*  lookahead token as an internal (translated) token number */

  short yyssa[YYINITDEPTH];     /*  the state stack                     */
  YY_SrvParser_STYPE yyvsa[YYINITDEPTH];        /*  the semantic value stack            */

  short *yyss = yyssa;          /*  refer to the stacks thru separate pointers */
  YY_SrvParser_STYPE *yyvs = yyvsa;     /*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YY_SrvParser_LSP_NEEDED
  YY_SrvParser_LTYPE yylsa[YYINITDEPTH];        /*  the location stack                  */
  YY_SrvParser_LTYPE *yyls = yylsa;
  YY_SrvParser_LTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YY_SrvParser_PURE
  int YY_SrvParser_CHAR;
  YY_SrvParser_STYPE YY_SrvParser_LVAL;
  int YY_SrvParser_NERRS;
#ifdef YY_SrvParser_LSP_NEEDED
  YY_SrvParser_LTYPE YY_SrvParser_LLOC;
#endif
#endif

  YY_SrvParser_STYPE yyval;             /*  the variable used to return         */
				/*  semantic values from the action     */
				/*  routines                            */

  int yylen;
/* start loop, in which YYGOTO may be used. */
YYBEGINGOTO

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    fprintf(stderr, "Starting parse\n");
#endif
  yystate = 0;
  yyerrstatus = 0;
  YY_SrvParser_NERRS = 0;
  YY_SrvParser_CHAR = YYEMPTY;          /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YY_SrvParser_LSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
YYLABEL(yynewstate)

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YY_SrvParser_STYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YY_SrvParser_LSP_NEEDED
      YY_SrvParser_LTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YY_SrvParser_LSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YY_SrvParser_LSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	    YY_SrvParser_ERROR(((char*)"parser stack overflow"));
	  __ALLOCA_return(2);
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) __ALLOCA_alloca (yystacksize * sizeof (*yyssp));
      __yy_bcopy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      __ALLOCA_free(yyss1,yyssa);
      yyvs = (YY_SrvParser_STYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yyvsp));
      __yy_bcopy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
      __ALLOCA_free(yyvs1,yyvsa);
#ifdef YY_SrvParser_LSP_NEEDED
      yyls = (YY_SrvParser_LTYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yylsp));
      __yy_bcopy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
      __ALLOCA_free(yyls1,yylsa);
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YY_SrvParser_LSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  YYGOTO(yybackup);
YYLABEL(yybackup)

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* YYLABEL(yyresume) */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yydefault);

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (YY_SrvParser_CHAR == YYEMPTY)
    {
#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	fprintf(stderr, "Reading a token: ");
#endif
      YY_SrvParser_CHAR = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (YY_SrvParser_CHAR <= 0)           /* This means end of input. */
    {
      yychar1 = 0;
      YY_SrvParser_CHAR = YYEOF;                /* Don't call YYLEX any more */

#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(YY_SrvParser_CHAR);

#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	{
	  fprintf (stderr, "Next token is %d (%s", YY_SrvParser_CHAR, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, YY_SrvParser_CHAR, YY_SrvParser_LVAL);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    YYGOTO(yydefault);

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrlab);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrlab);

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting token %d (%s), ", YY_SrvParser_CHAR, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (YY_SrvParser_CHAR != YYEOF)
    YY_SrvParser_CHAR = YYEMPTY;

  *++yyvsp = YY_SrvParser_LVAL;
#ifdef YY_SrvParser_LSP_NEEDED
  *++yylsp = YY_SrvParser_LLOC;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  YYGOTO(yynewstate);

/* Do the default action for the current state.  */
YYLABEL(yydefault)

  yyn = yydefact[yystate];
  if (yyn == 0)
    YYGOTO(yyerrlab);

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
YYLABEL(yyreduce)
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


 #line 839 "../bison++/bison.cc"

  switch (yyn) {

case 47:
#line 181 "SrvParser.y"
{
    CheckIsIface(string(yyvsp[-1].strval)); //If no - everything is ok
    StartIfaceDeclaration();
;
    break;}
case 48:
#line 186 "SrvParser.y"
{
    //Information about new interface has been read
    //Add it to list of read interfaces
    SrvCfgIfaceLst.append(new TSrvCfgIface(yyvsp[-4].strval));
    delete [] yyvsp[-4].strval;
    EndIfaceDeclaration();
;
    break;}
case 49:
#line 195 "SrvParser.y"
{
    if (!CheckIsIface(yyvsp[-1].ival))
	YYABORT;
    StartIfaceDeclaration();
;
    break;}
case 50:
#line 201 "SrvParser.y"
{
    SrvCfgIfaceLst.append(new TSrvCfgIface(yyvsp[-4].ival));
    EndIfaceDeclaration();
;
    break;}
case 57:
#line 217 "SrvParser.y"
{
    ParserOptStack.append(new TSrvParsGlobalOpt());
    SPtr<TDUID> duid = new TDUID(yyvsp[-1].duidval.duid,yyvsp[-1].duidval.length);
    ClientLst.append(new TSrvCfgOptions(duid));
;
    break;}
case 58:
#line 223 "SrvParser.y"
{
    Log(Debug) << "Exception: DUID-based exception specified." << LogEnd;
    // copy all defined options
    ClientLst.getLast()->setOptions(ParserOptStack.getLast());
    ParserOptStack.delLast();
;
    break;}
case 59:
#line 231 "SrvParser.y"
{
    ParserOptStack.append(new TSrvParsGlobalOpt());
    SPtr<TSrvOptRemoteID> remoteid = new TSrvOptRemoteID(yyvsp[-3].ival, yyvsp[-1].duidval.duid, yyvsp[-1].duidval.length, 0);
    ClientLst.append(new TSrvCfgOptions(remoteid));
;
    break;}
case 60:
#line 237 "SrvParser.y"
{
    Log(Debug) << "Exception: RemoteID-based exception specified." << LogEnd;
    // copy all defined options
    ClientLst.getLast()->setOptions(ParserOptStack.getLast());
    ParserOptStack.delLast();
;
    break;}
case 78:
#line 269 "SrvParser.y"
{
    addr = new TIPv6Addr(yyvsp[0].addrval);
    Log(Info) << "Exception: Address " << addr->getPlain() << " reserved." << LogEnd;
    ClientLst.getLast()->setAddr(addr);
;
    break;}
case 79:
#line 278 "SrvParser.y"
{ 
    StartClassDeclaration();
;
    break;}
case 80:
#line 282 "SrvParser.y"
{
    if (!EndClassDeclaration())
	YYABORT;
;
    break;}
case 83:
#line 296 "SrvParser.y"
{
    StartTAClassDeclaration();
;
    break;}
case 84:
#line 299 "SrvParser.y"
{
    if (!EndTAClassDeclaration())
	YYABORT;
;
    break;}
case 93:
#line 320 "SrvParser.y"
{
    StartPDDeclaration();
;
    break;}
case 94:
#line 323 "SrvParser.y"
{
    if (!EndPDDeclaration())
	YYABORT;
;
    break;}
case 103:
#line 347 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_NONE); ;
    break;}
case 104:
#line 348 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_PLAIN); ;
    break;}
case 105:
#line 349 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_HMAC_MD5); ;
    break;}
case 106:
#line 350 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_HMAC_SHA1); ;
    break;}
case 107:
#line 351 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_HMAC_SHA224); ;
    break;}
case 108:
#line 352 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_HMAC_SHA256); ;
    break;}
case 109:
#line 353 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_HMAC_SHA384); ;
    break;}
case 110:
#line 354 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_HMAC_SHA512); ;
    break;}
case 111:
#line 358 "SrvParser.y"
{ ParserOptStack.getLast()->setAuthLifetime(yyvsp[0].ival); ;
    break;}
case 112:
#line 362 "SrvParser.y"
{ ParserOptStack.getLast()->setAuthKeyLen(yyvsp[0].ival); ;
    break;}
case 113:
#line 371 "SrvParser.y"
{
    Log(Notice)<< "FQDN: The client "<<yyvsp[0].strval<<" has no address nor DUID"<<LogEnd;
    PresentFQDNLst.append(new TFQDN(yyvsp[0].strval,false));
;
    break;}
case 114:
#line 376 "SrvParser.y"
{
    duidNew = new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length);
    Log(Debug)<< "FQDN:" << yyvsp[-2].strval <<" reserved for DUID "<<duidNew->getPlain()<<LogEnd;
    // FIXME: Use SmartPtr()
    PresentFQDNLst.append(new TFQDN(new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length), yyvsp[-2].strval,false));
;
    break;}
case 115:
#line 383 "SrvParser.y"
{
    addr = new TIPv6Addr(yyvsp[0].addrval);
    Log(Debug)<< "FQDN:" << yyvsp[-2].strval <<" reserved for address "<<*addr<<LogEnd;
    // FIXME: Use SmartPtr()
    PresentFQDNLst.append(new TFQDN(new TIPv6Addr(yyvsp[0].addrval), yyvsp[-2].strval,false));
;
    break;}
case 116:
#line 390 "SrvParser.y"
{
	Log(Notice)<< "FQDN:"<<yyvsp[0].strval<<" has no reservations (is available to everyone)."<<LogEnd;
    PresentFQDNLst.append(new TFQDN(yyvsp[0].strval,false));
;
    break;}
case 117:
#line 395 "SrvParser.y"
{
    duidNew = new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length);
    Log(Debug)<< "FQDN:" << yyvsp[-2].strval << " reserved for DUID "<< duidNew->getPlain() << LogEnd;
    // FIXME: Use SmartPtr()
    PresentFQDNLst.append(new TFQDN(new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length), yyvsp[-2].strval,false));
;
    break;}
case 118:
#line 402 "SrvParser.y"
{
    addr = new TIPv6Addr(yyvsp[0].addrval);
    Log(Debug)<< "FQDN:" << yyvsp[-2].strval<<" reserved for address "<< addr->getPlain() << LogEnd;
    // FIXME: Use SmartPtr()
    PresentFQDNLst.append(new TFQDN(new TIPv6Addr(yyvsp[0].addrval), yyvsp[-2].strval,false));
;
    break;}
case 119:
#line 411 "SrvParser.y"
{yyval.ival=yyvsp[0].ival;;
    break;}
case 120:
#line 412 "SrvParser.y"
{yyval.ival=yyvsp[0].ival;;
    break;}
case 121:
#line 417 "SrvParser.y"
{
    PresentAddrLst.append(new TIPv6Addr(yyvsp[0].addrval));
;
    break;}
case 122:
#line 421 "SrvParser.y"
{
    PresentAddrLst.append(new TIPv6Addr(yyvsp[0].addrval));
;
    break;}
case 123:
#line 428 "SrvParser.y"
{
    // Log(Debug) << "Vendor-spec defined: Number: " << $1 << ", valuelen=" << $3.length << LogEnd;
    VendorSpec.append(new TSrvOptVendorSpec(yyvsp[-2].ival, yyvsp[0].duidval.duid, yyvsp[0].duidval.length, 0));
;
    break;}
case 124:
#line 433 "SrvParser.y"
{
    // Log(Debug) << "Vendor-spec defined: Number: " << $3 << ", valuelen=" << $5.length << LogEnd;
    VendorSpec.append(new TSrvOptVendorSpec(yyvsp[-2].ival, yyvsp[0].duidval.duid, yyvsp[0].duidval.length, 0));
;
    break;}
case 125:
#line 440 "SrvParser.y"
{ PresentStringLst.append(SmartPtr<string> (new string(yyvsp[0].strval))); ;
    break;}
case 126:
#line 441 "SrvParser.y"
{ PresentStringLst.append(SmartPtr<string> (new string(yyvsp[0].strval))); ;
    break;}
case 127:
#line 446 "SrvParser.y"
{
        PresentRangeLst.append(new TStationRange(new TIPv6Addr(yyvsp[0].addrval),new TIPv6Addr(yyvsp[0].addrval)));
    ;
    break;}
case 128:
#line 450 "SrvParser.y"
{
        SmartPtr<TIPv6Addr> addr1(new TIPv6Addr(yyvsp[-2].addrval));
        SmartPtr<TIPv6Addr> addr2(new TIPv6Addr(yyvsp[0].addrval));
        if (*addr1<=*addr2)
            PresentRangeLst.append(new TStationRange(addr1,addr2));
        else
            PresentRangeLst.append(new TStationRange(addr2,addr1));
    ;
    break;}
case 129:
#line 459 "SrvParser.y"
{
	SmartPtr<TIPv6Addr> addr(new TIPv6Addr(yyvsp[-2].addrval));
	int prefix = yyvsp[0].ival;
	if ( (prefix<1) || (prefix>128)) {
	    Log(Crit) << "Invalid prefix defined: " << prefix << " in line " << lex->lineno() 
		      << ". Allowed range: 1..128." << LogEnd;
	    YYABORT;
	}
	SmartPtr<TIPv6Addr> addr1 = this->getRangeMin(yyvsp[-2].addrval, prefix);
	SmartPtr<TIPv6Addr> addr2 = this->getRangeMax(yyvsp[-2].addrval, prefix);
        if (*addr1<=*addr2)
            PresentRangeLst.append(new TStationRange(addr1,addr2));
        else
            PresentRangeLst.append(new TStationRange(addr2,addr1));
    ;
    break;}
case 130:
#line 475 "SrvParser.y"
{
        PresentRangeLst.append(new TStationRange(new TIPv6Addr(yyvsp[0].addrval),new TIPv6Addr(yyvsp[0].addrval)));
    ;
    break;}
case 131:
#line 479 "SrvParser.y"
{
        SmartPtr<TIPv6Addr> addr1(new TIPv6Addr(yyvsp[-2].addrval));
        SmartPtr<TIPv6Addr> addr2(new TIPv6Addr(yyvsp[0].addrval));
        if (*addr1<=*addr2)
            PresentRangeLst.append(new TStationRange(addr1,addr2));
        else
            PresentRangeLst.append(new TStationRange(addr2,addr1));
    ;
    break;}
case 132:
#line 491 "SrvParser.y"
{
	SmartPtr<TIPv6Addr> addr(new TIPv6Addr(yyvsp[-2].addrval));
	int prefix = yyvsp[0].ival;
	if ( (prefix<1) || (prefix>128)) {
	    Log(Crit) << "Invalid prefix defined: " << prefix << " in line " << lex->lineno() 
		      << ". Allowed range: 1..128." << LogEnd;
	    YYABORT;
	}
 	
	SmartPtr<TIPv6Addr> addr1 = this->getRangeMin(yyvsp[-2].addrval, prefix);
	SmartPtr<TIPv6Addr> addr2 = this->getRangeMax(yyvsp[-2].addrval, prefix);
	SPtr<TStationRange> range = 0;
	if (*addr1<=*addr2)
            range = new TStationRange(addr1,addr2);
        else
            range = new TStationRange(addr2,addr1);
	range->setPrefixLength(prefix);
	PDLst.append(range);
    ;
    break;}
case 133:
#line 514 "SrvParser.y"
{
    PresentRangeLst.append(new TStationRange(new TIPv6Addr(yyvsp[0].addrval),new TIPv6Addr(yyvsp[0].addrval)));
;
    break;}
case 134:
#line 518 "SrvParser.y"
{
    SmartPtr<TIPv6Addr> addr1(new TIPv6Addr(yyvsp[-2].addrval));
    SmartPtr<TIPv6Addr> addr2(new TIPv6Addr(yyvsp[0].addrval));
    if (*addr1<=*addr2)
	PresentRangeLst.append(new TStationRange(addr1,addr2));
    else
	PresentRangeLst.append(new TStationRange(addr2,addr1));
;
    break;}
case 135:
#line 527 "SrvParser.y"
{
    PresentRangeLst.append(new TStationRange(new TIPv6Addr(yyvsp[0].addrval),new TIPv6Addr(yyvsp[0].addrval)));
;
    break;}
case 136:
#line 531 "SrvParser.y"
{
    SmartPtr<TIPv6Addr> addr1(new TIPv6Addr(yyvsp[-2].addrval));
    SmartPtr<TIPv6Addr> addr2(new TIPv6Addr(yyvsp[0].addrval));
    if (*addr1<=*addr2)
	PresentRangeLst.append(new TStationRange(addr1,addr2));
    else
	PresentRangeLst.append(new TStationRange(addr2,addr1));
;
    break;}
case 137:
#line 540 "SrvParser.y"
{
    PresentRangeLst.append(new TStationRange(new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length)));
    delete yyvsp[0].duidval.duid;
;
    break;}
case 138:
#line 545 "SrvParser.y"
{   
    SmartPtr<TDUID> duid1(new TDUID(yyvsp[-2].duidval.duid,yyvsp[-2].duidval.length));
    SmartPtr<TDUID> duid2(new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length));
    
    if (*duid1<=*duid2)
        PresentRangeLst.append(new TStationRange(duid1,duid2));
    else
        PresentRangeLst.append(new TStationRange(duid2,duid1));
;
    break;}
case 139:
#line 555 "SrvParser.y"
{
    PresentRangeLst.append(new TStationRange(new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length)));
    delete yyvsp[0].duidval.duid;
;
    break;}
case 140:
#line 560 "SrvParser.y"
{
    SmartPtr<TDUID> duid2(new TDUID(yyvsp[-2].duidval.duid,yyvsp[-2].duidval.length));
    SmartPtr<TDUID> duid1(new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length));
    if (*duid1<=*duid2)
        PresentRangeLst.append(new TStationRange(duid1,duid2));
    else
        PresentRangeLst.append(new TStationRange(duid2,duid1));
    delete yyvsp[-2].duidval.duid;
    delete yyvsp[0].duidval.duid;
;
    break;}
case 141:
#line 574 "SrvParser.y"
{
    PresentRangeLst.clear();    
;
    break;}
case 142:
#line 577 "SrvParser.y"
{
    ParserOptStack.getLast()->setRejedClnt(&PresentRangeLst);
;
    break;}
case 143:
#line 584 "SrvParser.y"
{
    PresentRangeLst.clear();    
;
    break;}
case 144:
#line 587 "SrvParser.y"
{
    ParserOptStack.getLast()->setAcceptClnt(&PresentRangeLst);
;
    break;}
case 145:
#line 594 "SrvParser.y"
{
    PresentRangeLst.clear();    
;
    break;}
case 146:
#line 597 "SrvParser.y"
{
    ParserOptStack.getLast()->setPool(&PresentRangeLst);
;
    break;}
case 147:
#line 604 "SrvParser.y"
{
;
    break;}
case 148:
#line 606 "SrvParser.y"
{
    ParserOptStack.getLast()->setPool(&PresentRangeLst/*PDList*/);
;
    break;}
case 149:
#line 612 "SrvParser.y"
{
   this->PDPrefix = yyvsp[0].ival;
;
    break;}
case 150:
#line 619 "SrvParser.y"
{ 
    ParserOptStack.getLast()->setPrefBeg(yyvsp[0].ival);
    ParserOptStack.getLast()->setPrefEnd(yyvsp[0].ival);
;
    break;}
case 151:
#line 624 "SrvParser.y"
{
    ParserOptStack.getLast()->setPrefBeg(yyvsp[-2].ival);
    ParserOptStack.getLast()->setPrefEnd(yyvsp[0].ival);   
;
    break;}
case 152:
#line 632 "SrvParser.y"
{ 
    ParserOptStack.getLast()->setValidBeg(yyvsp[0].ival);
    ParserOptStack.getLast()->setValidEnd(yyvsp[0].ival);
;
    break;}
case 153:
#line 637 "SrvParser.y"
{
    ParserOptStack.getLast()->setValidBeg(yyvsp[-2].ival);
    ParserOptStack.getLast()->setValidEnd(yyvsp[0].ival);  
;
    break;}
case 154:
#line 645 "SrvParser.y"
{
    int x=yyvsp[0].ival;
    if ( (x<1) || (x>1000)) {
	Log(Crit) << "Invalid share value: " << x << " in line " << lex->lineno() 
		  << ". Allowed range: 1..1000." << LogEnd;
	YYABORT;
    }
    ParserOptStack.getLast()->setShare(x);
;
    break;}
case 155:
#line 657 "SrvParser.y"
{
    ParserOptStack.getLast()->setT1Beg(yyvsp[0].ival); 
    ParserOptStack.getLast()->setT1End(yyvsp[0].ival); 
;
    break;}
case 156:
#line 662 "SrvParser.y"
{
    ParserOptStack.getLast()->setT1Beg(yyvsp[-2].ival); 
    ParserOptStack.getLast()->setT1End(yyvsp[0].ival); 
;
    break;}
case 157:
#line 670 "SrvParser.y"
{ 
    ParserOptStack.getLast()->setT2Beg(yyvsp[0].ival); 
    ParserOptStack.getLast()->setT2End(yyvsp[0].ival); 
;
    break;}
case 158:
#line 675 "SrvParser.y"
{
    ParserOptStack.getLast()->setT2Beg(yyvsp[-2].ival); 
    ParserOptStack.getLast()->setT2End(yyvsp[0].ival); 
;
    break;}
case 159:
#line 683 "SrvParser.y"
{ 
    ParserOptStack.getLast()->setClntMaxLease(yyvsp[0].ival);
;
    break;}
case 160:
#line 690 "SrvParser.y"
{
    ParserOptStack.getLast()->setClassMaxLease(yyvsp[0].ival);
;
    break;}
case 161:
#line 697 "SrvParser.y"
{
    if (!ParserOptStack.getLast()->getExperimental()) {
	Log(Crit) << "Experimental 'addr-params' defined, but experimental features are disabled. Add 'experimental' "
		  << "in global section of server.conf to enable it." << LogEnd;
	YYABORT;
    }
    int bitfield = ADDRPARAMS_MASK_PREFIX;
    Log(Warning) << "Experimental addr-params added (prefix=" << yyvsp[0].ival << ", bitfield=" << bitfield << ")." << LogEnd;
    ParserOptStack.getLast()->setAddrParams(yyvsp[0].ival,bitfield);
;
    break;}
case 162:
#line 710 "SrvParser.y"
{
    if (!ParserOptStack.getFirst()->getExperimental()) {
	Log(Crit) << "Experimental 'tunnel-mode' defined, but experimental features are disabled. Add 'experimental' "
		  << "in global section of server.conf to enable it." << LogEnd;
	YYABORT;
    }

    std::string mode;
    switch (yyvsp[-1].ival)
    {
    case 0:
	mode = "none";
	break;
    case 1:
	mode = "IPv4-to-IPv6 NAT";
	break;
    case 2:
	mode = "IPv4-over-IPv6 tunnel";
	break;
    default:
	Log(Crit) << "Invalid mode specified: " << yyvsp[-1].ival << ", allowed: 0(none), 1(IPv4-to-IPv6 NAT) and 2(IPv4-over-IPv6 tunnel)"
		  << LogEnd;
    };

    SPtr<TIPv6Addr> addr = new TIPv6Addr(yyvsp[0].addrval);

    Log(Notice) << "Experimental tunnel-mode configured: mode=" << yyvsp[-1].ival << "(" << mode << "), address "
		<< addr->getPlain() << "." << LogEnd;
    ParserOptStack.getLast()->setTunnelMode(yyvsp[-2].ival, yyvsp[-1].ival, addr);
;
    break;}
case 163:
#line 742 "SrvParser.y"
{
    if (!ParserOptStack.getFirst()->getExperimental()) {
	Log(Crit) << "Experimental 'option extra' defined, but experimental features are disabled. Add 'experimental' "
		  << "in global section of server.conf to enable it." << LogEnd;
	YYABORT;
    }

    ExtraOpts.clear();
;
    break;}
case 164:
#line 751 "SrvParser.y"
{
    ParserOptStack.getLast()->setExtraOptions(ExtraOpts);
;
    break;}
case 165:
#line 757 "SrvParser.y"
{
    Log(Debug) << "Extra option defined: code=" << yyvsp[-2].ival << ", valuelen=" << yyvsp[0].duidval.length << LogEnd;
    ExtraOpts.append(new TSrvOptGeneric(yyvsp[-2].ival, yyvsp[0].duidval.duid, yyvsp[0].duidval.length, 0));
;
    break;}
case 166:
#line 762 "SrvParser.y"
{
    Log(Debug) << "Extra option defined: code=" << yyvsp[-2].ival << ", no length." << LogEnd;
    ExtraOpts.append(new TSrvOptGeneric(yyvsp[-2].ival, 0,0,0));
;
    break;}
case 167:
#line 767 "SrvParser.y"
{
    Log(Debug) << "Extra option defined: code=" << yyvsp[-2].ival << ", valuelen=" << yyvsp[0].duidval.length << LogEnd;
    ExtraOpts.append(new TSrvOptGeneric(yyvsp[-2].ival, yyvsp[0].duidval.duid, yyvsp[0].duidval.length, 0));
;
    break;}
case 168:
#line 775 "SrvParser.y"
{
    ParserOptStack.getLast()->setIfaceMaxLease(yyvsp[0].ival);
;
    break;}
case 169:
#line 782 "SrvParser.y"
{
    ParserOptStack.getLast()->setUnicast(new TIPv6Addr(yyvsp[0].addrval));
;
    break;}
case 170:
#line 789 "SrvParser.y"
{ 
    if ( (yyvsp[0].ival!=0) && (yyvsp[0].ival!=1)) {
	Log(Crit) << "RAPID-COMMIT  parameter in line " << lex->lineno() << " must have 0 or 1 value." 
               << LogEnd;
	YYABORT;
    }
    if (yyvsp[0].ival==1)
	ParserOptStack.getLast()->setRapidCommit(true); 
    else
	ParserOptStack.getLast()->setRapidCommit(false); 
;
    break;}
case 171:
#line 804 "SrvParser.y"
{ 
    if ((yyvsp[0].ival<0)||(yyvsp[0].ival>255)) {
	Log(Crit) << "Preference value (" << yyvsp[0].ival << ") in line " << lex->lineno() 
		   << " is out of range [0..255]." << LogEnd;
	YYABORT;
    }
    ParserOptStack.getLast()->setPreference(yyvsp[0].ival);    
;
    break;}
case 172:
#line 815 "SrvParser.y"
{
    logger::setLogLevel(yyvsp[0].ival);
;
    break;}
case 173:
#line 821 "SrvParser.y"
{
    logger::setLogMode(yyvsp[0].strval);
;
    break;}
case 174:
#line 827 "SrvParser.y"
{
    logger::setLogName(yyvsp[0].strval);
;
    break;}
case 175:
#line 834 "SrvParser.y"
{
    ParserOptStack.getLast()->setWorkDir(yyvsp[0].strval);
;
    break;}
case 176:
#line 841 "SrvParser.y"
{
    ParserOptStack.getLast()->setStateless(true);
;
    break;}
case 177:
#line 848 "SrvParser.y"
{
    Log(Info) << "Guess-mode enabled: relay interfaces may be loosely defined (matching interface-id is not mandatory)." << LogEnd;
    ParserOptStack.getLast()->setGuessMode(true);
;
    break;}
case 178:
#line 855 "SrvParser.y"
{
    ParserOptStack.getLast()->setInactiveMode(true);
;
    break;}
case 179:
#line 861 "SrvParser.y"
{
    Log(Crit) << "Experimental features are allowed." << LogEnd;
    ParserOptStack.getLast()->setExperimental(true);
;
    break;}
case 180:
#line 868 "SrvParser.y"
{
    if (!strncasecmp(yyvsp[0].strval,"before",6)) 
    {
	ParserOptStack.getLast()->setInterfaceIDOrder(SRV_IFACE_ID_ORDER_BEFORE);
    } else 
    if (!strncasecmp(yyvsp[0].strval,"after",5)) 
    {
	ParserOptStack.getLast()->setInterfaceIDOrder(SRV_IFACE_ID_ORDER_AFTER);
    } else
    if (!strncasecmp(yyvsp[0].strval,"omit",4)) 
    {
	ParserOptStack.getLast()->setInterfaceIDOrder(SRV_IFACE_ID_ORDER_NONE);
    } else 
    {
	Log(Crit) << "Invalid interface-id-order specified. Allowed values: before, after, omit" << LogEnd;
	YYABORT;
    }
;
    break;}
case 181:
#line 889 "SrvParser.y"
{
    ParserOptStack.getLast()->setCacheSize(yyvsp[0].ival);
;
    break;}
case 182:
#line 896 "SrvParser.y"
{
    ParserOptStack.getLast()->setLeaseQuerySupport(true);

;
    break;}
case 183:
#line 901 "SrvParser.y"
{
    switch (yyvsp[0].ival) {
    case 0:
	ParserOptStack.getLast()->setLeaseQuerySupport(false);
	break;
    case 1:
	ParserOptStack.getLast()->setLeaseQuerySupport(true);
	break;
    default:
	Log(Crit) << "Invalid value of accept-leasequery specifed. Allowed values: 0, 1, yes, no, true, false" << LogEnd;
	YYABORT;
    }

;
    break;}
case 184:
#line 921 "SrvParser.y"
{
    ParserOptStack.getLast()->setRelayName(yyvsp[0].strval);
;
    break;}
case 185:
#line 925 "SrvParser.y"
{
    ParserOptStack.getLast()->setRelayID(yyvsp[0].ival);
;
    break;}
case 186:
#line 932 "SrvParser.y"
{
    ParserOptStack.getLast()->setRelayInterfaceID(yyvsp[0].ival);
;
    break;}
case 197:
#line 956 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 198:
#line 959 "SrvParser.y"
{
    ParserOptStack.getLast()->setDNSServerLst(&PresentAddrLst);
;
    break;}
case 199:
#line 968 "SrvParser.y"
{
    PresentStringLst.clear();
;
    break;}
case 200:
#line 971 "SrvParser.y"
{ 
    ParserOptStack.getLast()->setDomainLst(&PresentStringLst);
;
    break;}
case 201:
#line 981 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 202:
#line 984 "SrvParser.y"
{
    ParserOptStack.getLast()->setNTPServerLst(&PresentAddrLst);
;
    break;}
case 203:
#line 994 "SrvParser.y"
{ 
    ParserOptStack.getLast()->setTimezone(yyvsp[0].strval); 
;
    break;}
case 204:
#line 1003 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 205:
#line 1006 "SrvParser.y"
{
    ParserOptStack.getLast()->setSIPServerLst(&PresentAddrLst);
;
    break;}
case 206:
#line 1015 "SrvParser.y"
{
    PresentStringLst.clear();
;
    break;}
case 207:
#line 1018 "SrvParser.y"
{
    ParserOptStack.getLast()->setSIPDomainLst(&PresentStringLst);
;
    break;}
case 208:
#line 1029 "SrvParser.y"
{
    PresentFQDNLst.clear();
    Log(Debug)   << "No FQDNMode found, setting default mode 2 (all updates executed by server)." << LogEnd;
    Log(Warning) << "revDNS zoneroot lenght not found, dynamic revDNS update will not be possible." << LogEnd;
    ParserOptStack.getLast()->setFQDNMode(2);
    ParserOptStack.getLast()->setRevDNSZoneRootLength(0);
;
    break;}
case 209:
#line 1036 "SrvParser.y"
{
    ParserOptStack.getLast()->setFQDNLst(&PresentFQDNLst);
;
    break;}
case 210:
#line 1040 "SrvParser.y"
{
    PresentFQDNLst.clear();
    Log(Debug)  << "FQDNMode found, setting value"<< yyvsp[0].ival <<LogEnd;
    Log(Warning)<< "revDNS zoneroot lenght not specified, dynamic revDNS update will not be possible." << LogEnd;
    ParserOptStack.getLast()->setFQDNMode(yyvsp[0].ival);
    ParserOptStack.getLast()->setRevDNSZoneRootLength(0);
;
    break;}
case 211:
#line 1047 "SrvParser.y"
{
    ParserOptStack.getLast()->setFQDNLst(&PresentFQDNLst);
  
;
    break;}
case 212:
#line 1052 "SrvParser.y"
{
    PresentFQDNLst.clear();
    Log(Debug) << "FQDNMode found, setting value " << yyvsp[-1].ival <<LogEnd;
    Log(Debug) << "revDNS zoneroot lenght found, setting value " << yyvsp[0].ival <<LogEnd;
    ParserOptStack.getLast()->setFQDNMode(yyvsp[-1].ival);
    ParserOptStack.getLast()->setRevDNSZoneRootLength(yyvsp[0].ival);
;
    break;}
case 213:
#line 1059 "SrvParser.y"
{
    ParserOptStack.getLast()->setFQDNLst(&PresentFQDNLst);
  
;
    break;}
case 214:
#line 1069 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 215:
#line 1072 "SrvParser.y"
{
    ParserOptStack.getLast()->setNISServerLst(&PresentAddrLst);
;
    break;}
case 216:
#line 1081 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 217:
#line 1084 "SrvParser.y"
{
    ParserOptStack.getLast()->setNISPServerLst(&PresentAddrLst);
;
    break;}
case 218:
#line 1094 "SrvParser.y"
{
    ParserOptStack.getLast()->setNISDomain(yyvsp[0].strval);
;
    break;}
case 219:
#line 1104 "SrvParser.y"
{
    ParserOptStack.getLast()->setNISPDomain(yyvsp[0].strval);
;
    break;}
case 220:
#line 1114 "SrvParser.y"
{
    ParserOptStack.getLast()->setLifetime(yyvsp[0].ival);
;
    break;}
case 221:
#line 1120 "SrvParser.y"
{
    VendorSpec.clear();
;
    break;}
case 222:
#line 1123 "SrvParser.y"
{
    ParserOptStack.getLast()->setVendorSpec(VendorSpec);
    // Log(Debug) << "Vendor-spec parsing finished" << LogEnd;
;
    break;}
}

#line 839 "../bison++/bison.cc"
   /* the action file gets copied in in place of this dollarsign  */
  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YY_SrvParser_LSP_NEEDED
  yylsp -= yylen;
#endif

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YY_SrvParser_LSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = YY_SrvParser_LLOC.first_line;
      yylsp->first_column = YY_SrvParser_LLOC.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  YYGOTO(yynewstate);

YYLABEL(yyerrlab)   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++YY_SrvParser_NERRS;

#ifdef YY_SrvParser_ERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      YY_SrvParser_ERROR(msg);
	      free(msg);
	    }
	  else
	    YY_SrvParser_ERROR ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YY_SrvParser_ERROR_VERBOSE */
        YY_SrvParser_ERROR((char*)"parse error");
    }

  YYGOTO(yyerrlab1);
YYLABEL(yyerrlab1)   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (YY_SrvParser_CHAR == YYEOF)
	YYABORT;

#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	fprintf(stderr, "Discarding token %d (%s).\n", YY_SrvParser_CHAR, yytname[yychar1]);
#endif

      YY_SrvParser_CHAR = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;              /* Each real token shifted decrements this */

  YYGOTO(yyerrhandle);

YYLABEL(yyerrdefault)  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) YYGOTO(yydefault);
#endif

YYLABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YY_SrvParser_LSP_NEEDED
  yylsp--;
#endif

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

YYLABEL(yyerrhandle)

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yyerrdefault);

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    YYGOTO(yyerrdefault);

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrpop);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrpop);

  if (yyn == YYFINAL)
    YYACCEPT;

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = YY_SrvParser_LVAL;
#ifdef YY_SrvParser_LSP_NEEDED
  *++yylsp = YY_SrvParser_LLOC;
#endif

  yystate = yyn;
  YYGOTO(yynewstate);
/* end loop, in which YYGOTO may be used. */
  YYENDGOTO
}

/* END */

 #line 1038 "../bison++/bison.cc"
#line 1128 "SrvParser.y"


/////////////////////////////////////////////////////////////////////////////
// programs section

/** 
 * method check whether interface with id=ifaceNr has been already declared
 * 
 * @param ifaceNr 
 * 
 * @return true if interface was not declared
 */
bool SrvParser::CheckIsIface(int ifaceNr)
{
  SmartPtr<TSrvCfgIface> ptr;
  SrvCfgIfaceLst.first();
  while (ptr=SrvCfgIfaceLst.get())
    if ((ptr->getID())==ifaceNr) {
	Log(Crit) << "Interface with ID=" << ifaceNr << " is already defined." << LogEnd;
	return false;
    }
  return true;
}
    
//method check whether interface with id=ifaceName has been
//already declared 
bool SrvParser::CheckIsIface(string ifaceName)
{
  SmartPtr<TSrvCfgIface> ptr;
  SrvCfgIfaceLst.first();
  while (ptr=SrvCfgIfaceLst.get())
  {
    string presName=ptr->getName();
    if (presName==ifaceName) {
	Log(Crit) << "Interface " << ifaceName << " is already defined." << LogEnd;
	return false;
    }
  }
  return true;
}

/** 
 * method creates new option for just started interface scope
 * clears all lists except the list of interfaces and adds new group
 * 
 */
void SrvParser::StartIfaceDeclaration()
{
    // create new option (representing this interface) on the parser stack
    ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
    SrvCfgAddrClassLst.clear();
    VendorSpec.clear();
    ExtraOpts.clear();
    ClientLst.clear();
}

/** 
 * this method is called after inteface declaration has ended. It creates
 * new interface representation used in SrvCfgMgr. Also removes corresponding
 * element from the parser stack
 * 
 * @return true if everything is ok
 */
bool SrvParser::EndIfaceDeclaration()
{
    // get this interface object
    SmartPtr<TSrvCfgIface> iface = SrvCfgIfaceLst.getLast();

    // set its options
    SrvCfgIfaceLst.getLast()->setOptions(ParserOptStack.getLast());

    // copy all IA objects
    SmartPtr<TSrvCfgAddrClass> ptrAddrClass;
    SrvCfgAddrClassLst.first();
    while (ptrAddrClass=SrvCfgAddrClassLst.get())
        iface->addAddrClass(ptrAddrClass);
    SrvCfgAddrClassLst.clear();

    // copy all TA objects
    SmartPtr<TSrvCfgTA> ta;
    SrvCfgTALst.first();
    while (ta=SrvCfgTALst.get())
        iface->addTA(ta);
    SrvCfgTALst.clear();

    SmartPtr<TSrvCfgPD> pd;
    SrvCfgPDLst.first();
    while (pd=SrvCfgPDLst.get())
        iface->addPD(pd);
    SrvCfgPDLst.clear();

    iface->addClientExceptionsLst(ClientLst);

    // remove last option (representing this interface) from the parser stack
    ParserOptStack.delLast();

    return true;
}   

void SrvParser::StartClassDeclaration()
{
  ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
}

/** 
 * this method is adds new object representig just parsed IA class.
 * 
 * @return true if everything works ok.
 */bool SrvParser::EndClassDeclaration()
{
    if (!ParserOptStack.getLast()->countPool()) {
        Log(Crit) << "No pools defined for this class." << LogEnd;
        return false;
    }
    SrvCfgAddrClassLst.append(new TSrvCfgAddrClass());
    //setting interface options on the basis of just read information
    SrvCfgAddrClassLst.getLast()->setOptions(ParserOptStack.getLast());
    ParserOptStack.delLast();

    return true;
}


/** 
 * Just add 
 * 
 */
void SrvParser::StartTAClassDeclaration()
{
  ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
}

bool SrvParser::EndTAClassDeclaration()
{
    if (!ParserOptStack.getLast()->countPool()) {
        Log(Crit) << "No pools defined for this ta-class." << LogEnd;
        return false;
    }
    // create new object representing just parsed TA and add it to the list
    SmartPtr<TSrvCfgTA> ptrTA = new TSrvCfgTA();
    ptrTA->setOptions(ParserOptStack.getLast());
    SrvCfgTALst.append(ptrTA);

    // remove temporary parser object for this (just finished) scope
    ParserOptStack.delLast();
    return true;
}

void SrvParser::StartPDDeclaration()
{
    ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
    this->PDLst.clear();
    this->PDPrefix = 0;
}

bool SrvParser::EndPDDeclaration()
{
    if (!this->PDLst.count()) {
        Log(Crit) << "No PD pools defined ." << LogEnd;
        return false;
    }
    if (!this->PDPrefix) {
	Log(Crit) << "PD prefix length not defined or set to 0." << LogEnd;
	return false;
    }
	
    int len = 0;
    this->PDLst.first();
    while ( SPtr<TStationRange> pool = PDLst.get() ) {
	if (!len)
	    len = pool->getPrefixLength();
	if (len!=pool->getPrefixLength()) {
	    Log(Crit) << "Prefix pools with different lengths are not supported. Make sure that all 'pd-pool' uses the same prefix length." << LogEnd;
	    return false;
	}
    }
    if (len>PDPrefix) {
	Log(Crit) << "Clients are supposed to get /" << this->PDPrefix << " prefixes, but pd-pool(s) are only /" << len << " long." << LogEnd;
	return false;
    }
    if (len==PDPrefix) {
        Log(Warning) << "Prefix pool /" << PDPrefix << " defined and clients are supposed to get /" << len << " prefixes. Only ONE client will get prefix" << LogEnd;
    }

    SmartPtr<TSrvCfgPD> ptrPD = new TSrvCfgPD();
    ParserOptStack.getLast()->setPool(&this->PDLst);
    if (!ptrPD->setOptions(ParserOptStack.getLast(), this->PDPrefix))
	return false;
    SrvCfgPDLst.append(ptrPD);

    // remove temporary parser object for this (just finished) scope
    ParserOptStack.delLast();
    return true;
}

namespace std {
    extern yy_SrvParser_stype yylval;
}

int SrvParser::yylex()
{
    memset(&std::yylval,0, sizeof(std::yylval));
    memset(&this->yylval,0, sizeof(this->yylval));
    int x = this->lex->yylex();
    this->yylval=std::yylval;
    return x;
}

void SrvParser::yyerror(char *m)
{
    Log(Crit) << "Config parse error: line " << lex->lineno() 
              << ", unexpected [" << lex->YYText() << "] token." << LogEnd;
}

SrvParser::~SrvParser() {
    this->ParserOptStack.clear();
    this->SrvCfgIfaceLst.clear();
    this->SrvCfgAddrClassLst.clear();
    this->SrvCfgTALst.clear();
    this->PresentAddrLst.clear();
    this->PresentStringLst.clear();
    this->PresentRangeLst.clear();
}

static char bitMask[]= { 0, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff };

SmartPtr<TIPv6Addr> SrvParser::getRangeMin(char * addrPacked, int prefix) {
    char packed[16];
    char mask;
    memcpy(packed, addrPacked,16);
    if (prefix%8!=0) {
	mask = bitMask[prefix%8];
	packed[prefix/8] = packed[prefix/8] & mask;
	prefix = (prefix/8 + 1)*8;
    }
    for (int i=prefix/8;i<16; i++) {
	packed[i]=0;
    }
    return new TIPv6Addr(packed, false);
}

SmartPtr<TIPv6Addr> SrvParser::getRangeMax(char * addrPacked, int prefix){
    char packed[16];
    char mask;
    memcpy(packed, addrPacked,16);
    if (prefix%8!=0) {
	mask = bitMask[prefix%8];
	packed[prefix/8] = packed[prefix/8] | ~mask;
	prefix = (prefix/8 + 1)*8;
    }
    for (int i=prefix/8;i<16; i++) {
	packed[i]=0xff;
    }

    return new TIPv6Addr(packed, false);
}
