#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 78
#define YY_END_OF_BUFFER 79
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[680] =
    {   0,
        1,    1,    0,    0,    0,    0,   79,   77,    2,    1,
        1,   77,   60,   77,   77,   76,   76,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   64,   64,   78,
        1,    1,    1,    0,   72,   60,    0,   72,   62,   61,
       76,    0,    0,   75,    0,   69,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   57,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   16,   17,   73,   73,
       73,   73,   73,   73,   73,   73,   63,   61,   76,    0,

        0,   68,   74,   67,   67,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   56,   76,    0,    0,    0,   66,   66,    0,
       67,    0,   67,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   36,   73,   73,   73,   73,
       73,    0,   73,   73,   73,   73,   73,   73,   22,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   58,   73,
       73,   73,   73,   76,    0,    0,    0,    0,   66,    0,

       66,    0,   67,   67,   67,   67,   73,   73,   73,   73,
       73,    4,   73,   73,   73,   73,   73,   59,    3,   73,
       73,   73,   73,   73,   73,    0,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,    7,   23,   73,   73,
       73,   73,   73,   73,   73,   73,   73,    0,    0,    0,
        0,   66,   66,   66,   66,    0,   67,   67,   67,    0,
       67,   73,   73,   73,   73,   73,   73,   73,   28,   73,
       73,   31,   73,   73,   73,   73,   73,   73,   73,   73,
        0,    0,   73,   73,   73,   29,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,

       73,    0,    0,    0,   66,   66,   66,    0,   66,    0,
        0,   67,   67,   67,   67,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,    0,    0,   73,   73,   73,   73,   73,
       45,   73,   73,   73,   73,   73,   73,   73,   73,   20,
       73,   73,   73,    0,    0,    0,    0,    0,   66,   66,
       66,   66,    0,   67,   67,   67,    0,   67,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   41,   73,   12,   10,    0,    0,   73,
       73,   73,   43,   73,   73,   73,   73,   73,   73,   73,

       73,    5,   73,   73,   73,   13,    0,    0,    0,   66,
       66,   66,    0,   66,   71,   67,   67,   67,   67,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   11,    0,    0,   73,   73,   73,
       44,   73,   73,   73,   73,   73,   73,    6,   33,   73,
       73,    0,    0,    0,   70,   66,   66,   66,   66,   67,
       67,   67,    0,   67,   73,   73,   73,   73,   73,   42,
       73,   73,   73,   73,   30,   73,   73,   73,   73,    0,
        0,   38,   37,   32,   73,   21,   73,   73,   35,   34,
       73,   73,    0,    0,   66,   66,   66,    0,   66,   67,

       67,   67,   67,   14,   47,   73,   73,   50,   73,   73,
       73,   53,   73,   73,   73,   73,   40,   39,   73,   73,
       73,   73,   46,    0,    0,    0,   66,   66,   66,   66,
       67,   67,   67,    0,   67,   52,   73,   73,   73,   73,
       48,   73,   73,    8,   73,   24,   73,   73,    0,    0,
       66,   66,   66,    0,   66,   67,   67,   67,   67,   51,
       73,   73,   73,   73,   73,   49,   73,   73,   73,   73,
        0,    0,    0,   66,   66,   66,   66,   67,   67,   67,
        0,   67,   73,   73,   73,   73,   73,   73,   73,   15,
       19,    0,   65,   68,   66,   66,   66,    0,   66,   67,

       67,   67,   67,   26,   73,   54,   73,   25,   73,   73,
        0,   65,    0,   66,   66,   66,   66,   66,   67,   67,
       67,    0,   67,   27,   55,   73,   73,   65,   68,   66,
        0,   66,   66,   66,   66,   67,   67,   67,   73,   18,
       65,   66,   66,   66,   66,   67,   67,   67,    9,   66,
       66,    0,   66,   66,   67,   66,   66,   67,   66,   66,
        0,   66,   66,   66,   66,    0,   66,   66,   66,   66,
        0,   66,   66,   66,   66,    0,   66,   66,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   16,   17,   16,   16,   16,   16,   18,    1,    1,
        1,    1,    1,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
        1,    1,    1,    1,    1,    1,   19,   20,   21,   22,

       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[45] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        3,    1,    4,    4,    4,    4,    4,    5,    6,    6,
        6,    6,    6,    6,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[749] =
    {   0,
        0,    0, 1931, 1930,    0,    0, 1937, 1940, 1940,   42,
       44, 1931,    0, 1928,   41,   41, 1892, 1915,   74,   29,
      100,  102,  104,  123,  150,   42,   42,   43, 1898,  114,
       54,  111,  163, 1899,   59, 1897, 1906, 1940, 1916, 1940,
       68,   76,  124, 1922, 1940,    0, 1919, 1918, 1940,    0,
      187, 1906,  138, 1940,    0,  201,    0,  213, 1902, 1900,
        0, 1883, 1899,  113, 1894, 1881, 1886, 1882, 1885, 1892,
     1894,  137, 1888, 1886, 1873,    0, 1875, 1870, 1897, 1873,
     1882, 1870,  103, 1884, 1868, 1882,    0,    0, 1890, 1868,
     1859, 1870, 1866, 1863, 1858, 1856, 1940,    0,  240,  170,

     1874,  254,    0,  268,  180,  280, 1868, 1854, 1863, 1862,
     1850, 1863, 1862, 1874, 1864, 1859, 1844, 1848, 1858, 1857,
     1854, 1853, 1865,  150, 1864, 1846,  127, 1842, 1847, 1843,
     1846, 1849, 1831, 1856, 1827, 1843, 1840, 1839, 1840, 1833,
     1837, 1829,    0,  292,  225, 1839, 1838,  308,  232,  320,
      327,  339,  353,  358, 1821, 1844, 1843, 1829, 1814, 1818,
     1812, 1811, 1820, 1810, 1822,    0, 1821, 1805, 1806, 1803,
      149, 1830,  228, 1802, 1805, 1807, 1813, 1802,    0, 1811,
     1811, 1811, 1788, 1807,  354, 1806, 1798, 1817,    0, 1807,
     1803, 1791, 1813, 1804, 1803, 1802, 1801,  370,  381,  393,

      407,  414,  421,  435,  442,  456, 1800, 1779, 1782,  359,
     1805, 1804, 1775, 1774, 1788, 1778, 1782,    0, 1798, 1780,
     1782, 1778, 1781, 1770, 1783,  389, 1768, 1777, 1776, 1766,
     1778, 1764, 1762, 1758, 1783, 1754,    0,    0, 1758, 1767,
     1759, 1769, 1743, 1749, 1775, 1748, 1761, 1764, 1763, 1762,
      463,  470,  484,  491,  505,  510,  201, 1761,  517,  529,
      543, 1768, 1758, 1753, 1748, 1751, 1736, 1741, 1761, 1760,
     1733,    0, 1737, 1736, 1726, 1746, 1733, 1723, 1740, 1730,
     1727, 1736, 1727, 1721, 1720,    0, 1718, 1729, 1723, 1729,
     1730, 1740, 1718, 1712, 1724, 1709, 1712, 1706, 1713, 1732,

     1714, 1722, 1721,  548,  233, 1720,  555,  567,  581,  588,
      595,  602,  616,  623,  637, 1704, 1700, 1692, 1710, 1695,
     1705, 1712, 1699,  166, 1689, 1705, 1708, 1703, 1704, 1701,
     1700, 1699, 1698, 1689, 1683, 1699, 1677, 1676, 1678, 1676,
        0,  627, 1680, 1691, 1692, 1670, 1672, 1671, 1675,    0,
     1679, 1668, 1668, 1685, 1684, 1683,  647,  654,  661,  675,
      682,  696,  701,  436, 1682,  708,  720,  734, 1667, 1679,
     1687, 1673, 1669, 1650, 1651, 1673, 1660, 1657, 1666, 1656,
     1645, 1676, 1662,    0, 1654,    0,    0, 1664, 1642, 1654,
     1657, 1656,    0, 1652, 1667, 1655, 1644, 1644, 1646, 1649,

     1634,    0, 1647, 1645, 1634,    0, 1649, 1648,  739,  457,
     1647,  746,  758,  772,  777,  784,  798,  805,  819, 1634,
     1632, 1632, 1623, 1627, 1636, 1648, 1615, 1637, 1623, 1618,
     1615, 1642, 1620, 1640,    0, 1622, 1625, 1615, 1610, 1609,
        0, 1614, 1620, 1611, 1614, 1608, 1603,    0,    0, 1615,
     1614, 1618, 1617, 1616,  824,  831,  845,  852,  866, 1615,
     1614,  873,  885,  899, 1588, 1593, 1602, 1586, 1579,    0,
     1559, 1567, 1553, 1545,    0, 1546, 1526, 1520, 1523, 1509,
     1502,    0,    0,    0, 1502,    0, 1418, 1413,    0,    0,
     1386, 1378, 1373, 1367, 1360, 1346,  906,  918,  932,  939,

      953,  960,  974,    0,    0, 1324, 1319,    0, 1320, 1299,
     1311,    0, 1285, 1285, 1272, 1265, 1940, 1940, 1249, 1228,
     1220, 1218,    0, 1219, 1201, 1194,  981,  995, 1002, 1016,
     1186, 1168, 1023, 1035, 1049,    0, 1156, 1146, 1135, 1030,
        0, 1125, 1114, 1113, 1093,    0, 1064, 1064, 1069, 1051,
     1035, 1017, 1057, 1069, 1083, 1090, 1104, 1111, 1125,    0,
      991,  995,  985,  967,  949,    0,  939,  927,  914,  921,
      918,  900,  893, 1132, 1146, 1153, 1167,  885,  867, 1174,
     1186, 1200,  855,  827,  840,  824,  808,  781,  783,    0,
        0,  778,  766,    0,  758,  740, 1207, 1219, 1233, 1240,

     1254, 1261, 1275,    0,  723,    0,  724,    0,  698,  677,
      676,  669,  655,  648, 1282, 1296, 1303,    0,  639,  638,
     1317,    0, 1331,    0,    0,  632,  612,  610, 1940,  596,
        0,  589,  582, 1338,    0, 1352, 1366,    0,  557,    0,
      567,  549,  537, 1373,    0,  529,  511,    0,    0,  499,
      485,    0, 1387, 1940,    0,  478,  464, 1940,  415,  401,
        0,  375,  347,  339,  321,    0,  302,  299,  280,  262,
        0,  254,  213,  170,  102,    0,   68,   34, 1940, 1404,
     1410, 1416, 1422, 1428, 1434, 1437, 1440, 1443, 1446, 1449,
     1452, 1455, 1458, 1461, 1465, 1467, 1470, 1474, 1476, 1479,

     1482, 1485, 1488, 1491, 1494, 1497, 1500, 1503, 1506, 1509,
     1512, 1515, 1518, 1521, 1524, 1527, 1530, 1533, 1536, 1539,
     1542, 1545, 1548, 1551, 1554, 1557, 1560, 1563, 1566, 1569,
     1572, 1575, 1578, 1581, 1584, 1587, 1590, 1593, 1596, 1599,
     1602, 1605, 1608, 1611, 1614, 1617, 1620, 1623
    } ;

static yyconst flex_int16_t yy_def[749] =
    {   0,
      679,    1,  680,  680,  681,  681,  679,  679,  679,  679,
      679,  682,  683,  684,  679,  679,   16,  679,  679,   19,
       19,   19,   19,   19,   19,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,  679,  679,  679,
      679,  679,  679,  682,  679,  683,  684,  679,  679,  685,
      679,  686,   51,  679,  687,  679,   25,   19,   58,   58,
       25,   25,   58,   25,   25,   25,   25,   25,   58,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,  679,  685,  679,   99,

      688,  679,  687,  679,  104,   58,  106,  106,   25,  106,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,  679,  144,  689,  690,  679,  148,  679,
      679,  679,  151,  106,  154,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,  679,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,  144,  145,  691,  692,  679,  679,  679,

      199,  679,  679,  203,  679,  205,  154,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,  679,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,  679,  693,  694,
      679,  679,  252,  679,  254,  679,  695,  679,  679,  679,
      259,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
      679,  679,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,  696,  697,  679,  698,  679,  679,  679,  307,  679,
      679,  679,  312,  679,  314,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,  679,  679,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,  679,  699,  700,  679,  679,  679,  359,
      679,  361,  679,  695,  679,  679,  679,  366,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,  679,  679,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,  701,  702,  679,  698,
      679,  679,  679,  412,  679,  679,  416,  679,  418,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,  679,  679,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,  679,  703,  704,  679,  679,  456,  679,  458,  364,
      679,  679,  679,  462,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,  679,
      679,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,  705,  706,  410,  679,  679,  679,  497,  679,

      500,  679,  502,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,  679,  679,   25,   25,
       25,   25,   25,  679,  707,  708,  679,  527,  679,  529,
      364,  679,  679,  679,  533,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,  709,  710,
      410,  679,  679,  679,  553,  679,  556,  679,  558,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
      679,  711,  712,  679,  574,  679,  576,  364,  679,  679,
      679,  580,   25,   25,   25,   25,   25,   25,   25,   25,
       25,  713,  714,  715,  410,  679,  679,  679,  597,  679,

      600,  679,  602,   25,   25,   25,   25,   25,   25,   25,
      679,  716,  679,  717,  679,  615,  679,  718,  364,  679,
      679,  719,  621,   25,   25,   25,   25,  720,  679,  721,
      722,  410,  679,  679,  723,  679,  636,  724,   25,   25,
      679,  725,  726,  679,  727,  364,  679,  728,   25,  679,
      729,  730,  679,  679,  731,  732,  733,  679,  679,  734,
      735,  736,  737,  679,  738,  739,  740,  741,  679,  742,
      743,  744,  745,  679,  746,  747,  748,  679,    0,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,

      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679
    } ;

static yyconst flex_int16_t yy_nxt[1985] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   25,   26,   25,   25,   27,
       25,   28,   29,   30,   25,   31,   32,   33,   34,   35,
       36,   25,   37,   25,   41,   42,   43,   42,   49,   58,
       58,  676,   50,   51,   51,   51,   51,   51,   52,   53,
       53,   53,   53,   53,   53,   71,   54,   57,   73,   75,
       41,   42,   82,   72,   74,   76,   83,   93,   43,   42,
       77,   94,   55,   57,   57,  676,   58,   58,   58,   58,
       58,   52,   58,   58,   59,   60,   58,   58,   57,   61,

       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   62,   57,   57,   57,   57,   57,   63,  676,
       58,   58,   58,   58,   58,   58,   41,   42,   65,   64,
      131,  111,  132,   66,   67,   79,   84,   85,   57,  112,
       57,   69,   57,   58,   58,   68,   80,  176,   86,   81,
      100,  100,  100,  100,  100,  120,  177,   70,  172,  173,
      178,   57,   57,   57,   57,   57,   57,  679,   57,   57,
       57,   57,   57,   57,  121,   57,   87,   88,  223,  224,
      225,   89,  145,  145,  145,  145,  145,  671,   57,   90,
      679,  377,  153,  153,  153,  153,  153,  378,   91,   99,

       99,   99,   99,   99,   52,  100,  100,  100,  100,  100,
      100,  150,   54,  104,  104,  104,  104,  104,  152,  105,
      105,  105,  105,  105,  105,  106,  106,  106,  106,  106,
      676,  106,  106,  106,  106,  106,  106,  195,  195,  195,
      195,  195,  679,  198,  201,  201,  201,  201,  201,  227,
      200,   57,  144,  144,  144,  144,  144,   52,  145,  145,
      145,  145,  145,  145,  228,   54,  148,  148,  148,  148,
      148,  671,  149,  149,  149,  149,  149,  149,  150,  671,
      151,  151,  151,  151,  151,  152,  153,  153,  153,  153,
      153,  153,  154,  154,  154,  154,  154,  666,  154,  154,

      154,  154,  154,  154,  194,  194,  194,  194,  194,   52,
      195,  195,  195,  195,  195,  195,  671,   54,  198,  666,
      199,  199,  199,  199,  199,  200,  201,  201,  201,  201,
      201,  201,  202,  202,  202,  202,  202,  150,  666,  203,
      203,  203,  203,  203,  152,  204,  204,  204,  204,  204,
      204,  205,  205,  205,  205,  205,  661,  206,  206,  206,
      206,  206,  206,  679,  666,  204,  204,  204,  204,  204,
      207,  207,  207,  207,  207,  239,  207,  207,  207,  207,
      207,  207,  251,  251,  251,  251,  251,  264,  265,  266,
      240,  198,  661,  252,  252,  252,  252,  252,  200,  253,

      253,  253,  253,  253,  253,  254,  254,  254,  254,  254,
      281,  255,  255,  255,  255,  255,  255,  679,  661,  253,
      253,  253,  253,  253,  256,  282,  202,  202,  202,  202,
      202,  150,  652,  257,  257,  257,  257,  257,  152,  258,
      258,  258,  258,  258,  258,  679,  150,  258,  258,  258,
      258,  258,  150,  260,  259,  259,  259,  259,  259,  260,
      261,  261,  261,  261,  261,  261,  679,  198,  261,  261,
      261,  261,  261,  304,  308,  251,  251,  251,  251,  251,
      198,  661,  305,  305,  305,  305,  305,  200,  306,  306,
      306,  306,  306,  306,  679,  652,  306,  306,  306,  306,

      306,  198,  652,  307,  307,  307,  307,  307,  308,  309,
      309,  309,  309,  309,  309,  679,  631,  309,  309,  309,
      309,  309,  310,  310,  310,  310,  310,  150,  622,  312,
      312,  312,  312,  312,  260,  313,  313,  313,  313,  313,
      313,  314,  314,  314,  314,  314,  622,  315,  315,  315,
      315,  315,  315,  679,  652,  313,  313,  313,  313,  313,
      357,  357,  357,  357,  357,  198,  631,  359,  359,  359,
      359,  359,  308,  360,  360,  360,  360,  360,  360,  361,
      361,  361,  361,  361,  613,  362,  362,  362,  362,  362,
      362,  679,  649,  360,  360,  360,  360,  360,  363,  598,

      310,  310,  310,  310,  310,  150,  598,  311,  311,  311,
      311,  311,  150,  631,  364,  364,  364,  364,  364,  260,
      365,  365,  365,  365,  365,  365,  679,  613,  365,  365,
      365,  365,  365,  150,  640,  366,  366,  366,  366,  366,
      367,  368,  368,  368,  368,  368,  368,  679,  395,  368,
      368,  368,  368,  368,  639,  581,  581,  409,  396,  357,
      357,  357,  357,  357,  198,  631,  358,  358,  358,  358,
      358,  198,  629,  410,  410,  410,  410,  410,  308,  411,
      411,  411,  411,  411,  411,  679,  613,  411,  411,  411,
      411,  411,  198,  573,  412,  412,  412,  412,  412,  413,

      414,  414,  414,  414,  414,  414,  679,  627,  414,  414,
      414,  414,  414,  415,  415,  415,  415,  415,  150,  626,
      416,  416,  416,  416,  416,  367,  417,  417,  417,  417,
      417,  417,  418,  418,  418,  418,  418,  625,  419,  419,
      419,  419,  419,  419,  679,  624,  417,  417,  417,  417,
      417,  455,  455,  455,  455,  455,  198,  554,  456,  456,
      456,  456,  456,  413,  457,  457,  457,  457,  457,  457,
      458,  458,  458,  458,  458,  554,  459,  459,  459,  459,
      459,  459,  679,  613,  457,  457,  457,  457,  457,  415,
      415,  415,  415,  415,  150,  573,  460,  460,  460,  460,

      460,  367,  461,  461,  461,  461,  461,  461,  679,  610,
      461,  461,  461,  461,  461,  150,  609,  462,  462,  462,
      462,  462,  463,  464,  464,  464,  464,  464,  464,  679,
      608,  464,  464,  464,  464,  464,  455,  455,  455,  455,
      455,  198,  607,  495,  495,  495,  495,  495,  413,  496,
      496,  496,  496,  496,  496,  679,  606,  496,  496,  496,
      496,  496,  198,  605,  497,  497,  497,  497,  497,  498,
      499,  499,  499,  499,  499,  499,  679,  604,  499,  499,
      499,  499,  499,  150,  534,  500,  500,  500,  500,  500,
      463,  501,  501,  501,  501,  501,  501,  502,  502,  502,

      502,  502,  534,  503,  503,  503,  503,  503,  503,  679,
      594,  501,  501,  501,  501,  501,  198,  573,  527,  527,
      527,  527,  527,  498,  528,  528,  528,  528,  528,  528,
      529,  529,  529,  529,  529,  526,  530,  530,  530,  530,
      530,  530,  679,  591,  528,  528,  528,  528,  528,  150,
      590,  531,  531,  531,  531,  531,  463,  532,  532,  532,
      532,  532,  532,  679,  589,  532,  532,  532,  532,  532,
      150,  588,  533,  533,  533,  533,  533,  534,  535,  535,
      535,  535,  535,  535,  679,  587,  535,  535,  535,  535,
      535,  198,  586,  551,  551,  551,  551,  551,  498,  552,

      552,  552,  552,  552,  552,  679,  585,  552,  552,  552,
      552,  552,  198,  584,  553,  553,  553,  553,  553,  554,
      555,  555,  555,  555,  555,  555,  679,  583,  555,  555,
      555,  555,  555,  150,  498,  556,  556,  556,  556,  556,
      534,  557,  557,  557,  557,  557,  557,  558,  558,  558,
      558,  558,  498,  559,  559,  559,  559,  559,  559,  679,
      563,  557,  557,  557,  557,  557,  564,  198,  573,  574,
      574,  574,  574,  574,  554,  575,  575,  575,  575,  575,
      575,  576,  576,  576,  576,  576,  526,  577,  577,  577,
      577,  577,  577,  679,  570,  575,  575,  575,  575,  575,

      150,  569,  578,  578,  578,  578,  578,  534,  579,  579,
      579,  579,  579,  579,  679,  568,  579,  579,  579,  579,
      579,  150,  567,  580,  580,  580,  580,  580,  581,  582,
      582,  582,  582,  582,  582,  679,  566,  582,  582,  582,
      582,  582,  198,  565,  595,  595,  595,  595,  595,  554,
      596,  596,  596,  596,  596,  596,  679,  562,  596,  596,
      596,  596,  596,  198,  561,  597,  597,  597,  597,  597,
      598,  599,  599,  599,  599,  599,  599,  679,  560,  599,
      599,  599,  599,  599,  150,  463,  600,  600,  600,  600,
      600,  581,  601,  601,  601,  601,  601,  601,  602,  602,

      602,  602,  602,  463,  603,  603,  603,  603,  603,  603,
      679,  102,  601,  601,  601,  601,  601,  198,  526,  615,
      615,  615,  615,  615,  598,  616,  616,  616,  616,  616,
      616,  617,  617,  617,  617,  617,  454,  618,  618,  618,
      618,  618,  618,  679,  548,  616,  616,  616,  616,  616,
      150,  547,  619,  619,  619,  619,  619,  581,  620,  620,
      620,  620,  620,  620,  679,  546,  620,  620,  620,  620,
      620,  150,  545,  621,  621,  621,  621,  621,  622,  623,
      623,  623,  623,  623,  623,  679,  544,  623,  623,  623,
      623,  623,  198,  543,  632,  632,  632,  632,  632,  598,

      633,  633,  633,  633,  633,  633,  679,  542,  633,  633,
      633,  633,  633,  198,  541,  634,  634,  634,  634,  634,
      540,  635,  635,  635,  635,  635,  635,  150,  539,  636,
      636,  636,  636,  636,  622,  637,  637,  637,  637,  637,
      637,  679,  538,  637,  637,  637,  637,  637,  198,  537,
      644,  644,  644,  644,  644,  536,  645,  645,  645,  645,
      645,  645,  150,  413,  646,  646,  646,  646,  646,  622,
      647,  647,  647,  647,  647,  647,  679,  413,  647,  647,
      647,  647,  647,  198,  526,  653,  653,  653,  653,  653,
      454,  654,  654,  654,  654,  654,  654,  198,  523,  358,

      358,  358,  358,  358,   38,   38,   38,   38,   38,   38,
       40,   40,   40,   40,   40,   40,   44,   44,   44,   44,
       44,   44,   46,  522,   46,   46,   46,   46,   47,   47,
       47,   47,   47,   47,   98,  521,   98,   98,   98,   98,
      101,  101,  101,  103,  520,  103,  146,  146,  146,  196,
      196,  196,  197,  197,  197,  248,  248,  248,  249,  249,
      249,  302,  302,  302,  303,  303,  303,  311,  311,  311,
      354,  354,  354,  355,  355,  355,  358,  358,  358,  407,
      407,  407,  408,  408,  408,  452,  452,  452,  453,  453,
      453,  493,  493,  493,  494,  494,  494,  524,  524,  524,

      525,  525,  525,  549,  549,  549,  550,  550,  550,  571,
      571,  571,  572,  572,  572,  592,  592,  592,  593,  593,
      593,  611,  611,  611,  612,  612,  612,  614,  519,  614,
      628,  628,  628,  630,  630,  630,  635,  518,  635,  638,
      517,  638,  641,  641,  641,  642,  642,  642,  643,  516,
      643,  645,  515,  645,  648,  514,  648,  650,  650,  650,
      651,  651,  651,  654,  513,  654,  655,  512,  655,  656,
      656,  656,  657,  511,  657,  658,  510,  658,  659,  659,
      659,  660,  660,  660,  662,  662,  662,  663,  509,  663,
      664,  664,  664,  665,  665,  665,  667,  667,  667,  668,

      508,  668,  669,  669,  669,  670,  670,  670,  672,  672,
      672,  673,  507,  673,  674,  674,  674,  675,  675,  675,
      677,  677,  677,  618,  506,  618,  678,  678,  678,  505,
      504,  367,  367,  102,  454,  356,  492,  491,  490,  489,
      488,  487,  486,  485,  484,  483,  482,  481,  480,  479,
      478,  477,  476,  475,  474,  473,  472,  471,  470,  469,
      468,  467,  466,  465,  308,  454,  356,  451,  450,  449,
      448,  447,  446,  445,  444,  443,  442,  441,  440,  439,
      438,  437,  436,  435,  434,  433,  432,  431,  430,  429,
      428,  427,  426,  425,  424,  423,  422,  421,  420,  260,

      102,  356,  250,  406,  405,  404,  403,  402,  401,  400,
      399,  398,  397,  394,  393,  392,  391,  390,  389,  388,
      387,  386,  385,  384,  383,  382,  381,  380,  379,  376,
      375,  374,  373,  372,  371,  370,  369,  200,  356,  250,
      353,  352,  351,  350,  349,  348,  347,  346,  345,  344,
      343,  342,  341,  340,  339,  338,  337,  336,  335,  334,
      333,  332,  331,  330,  329,  328,  327,  326,  325,  324,
      323,  322,  321,  320,  319,  318,  317,  316,  152,  102,
      250,  147,  301,  300,  299,  298,  297,  296,  295,  294,
      293,  292,  291,  290,  289,  288,  287,  286,  285,  284,

      283,  280,  279,  278,  277,  276,  275,  274,  273,  272,
      271,  270,  269,  268,  267,  263,  262,  679,  250,  147,
      679,  679,  247,  246,  245,  244,  243,  242,  241,  238,
      237,  236,  235,  234,  233,  232,  231,  230,  229,  226,
      222,  221,  220,  219,  218,  217,  216,  215,  214,  213,
      212,  211,  210,  209,  208,  102,  147,  193,  192,  191,
      190,  189,  188,  187,  186,  185,  184,  183,  182,  181,
      180,  179,  175,  174,  171,  170,  169,  168,  167,  166,
      165,  164,  163,  162,  161,  160,  159,  158,  157,  156,
      155,  147,  143,  142,  141,  140,  139,  138,  137,  136,

      135,  134,  133,  130,  129,  128,  127,  126,  125,  124,
      123,  122,  119,  118,  117,  116,  115,  114,  113,  110,
      109,  108,  107,  102,   47,   48,   45,   97,   96,   95,
       92,   78,   56,  679,   48,   45,  679,   39,   39,    7,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679
    } ;

static yyconst flex_int16_t yy_chk[1985] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   10,   10,   11,   11,   15,   20,
       20,  678,   15,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   26,   16,   20,   27,   28,
       41,   41,   31,   26,   27,   28,   31,   35,   42,   42,
       28,   35,   16,   19,   19,  677,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   21,  675,
       21,   21,   22,   22,   23,   23,   43,   43,   22,   21,
       83,   64,   83,   22,   22,   30,   32,   32,   21,   64,
       22,   24,   23,   24,   24,   23,   30,  127,   32,   30,
       53,   53,   53,   53,   53,   72,  127,   24,  124,  124,
      127,   24,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   72,   25,   33,   33,  171,  171,
      171,   33,  100,  100,  100,  100,  100,  674,   25,   33,
      105,  324,  105,  105,  105,  105,  105,  324,   33,   51,

       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,  257,   51,   56,   56,   56,   56,   56,  257,   56,
       56,   56,   56,   56,   56,   58,   58,   58,   58,   58,
      673,   58,   58,   58,   58,   58,   58,  145,  145,  145,
      145,  145,  149,  305,  149,  149,  149,  149,  149,  173,
      305,   58,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,  173,   99,  102,  102,  102,  102,
      102,  672,  102,  102,  102,  102,  102,  102,  104,  670,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  106,  106,  106,  106,  106,  669,  106,  106,

      106,  106,  106,  106,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  668,  144,  148,  667,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  150,  150,  150,  150,  150,  151,  665,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  152,  152,  152,  152,  152,  664,  152,  152,  152,
      152,  152,  152,  153,  663,  153,  153,  153,  153,  153,
      154,  154,  154,  154,  154,  185,  154,  154,  154,  154,
      154,  154,  198,  198,  198,  198,  198,  210,  210,  210,
      185,  199,  662,  199,  199,  199,  199,  199,  199,  199,

      199,  199,  199,  199,  199,  200,  200,  200,  200,  200,
      226,  200,  200,  200,  200,  200,  200,  201,  660,  201,
      201,  201,  201,  201,  202,  226,  202,  202,  202,  202,
      202,  203,  659,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  204,  364,  204,  204,  204,
      204,  204,  205,  364,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  206,  410,  206,  206,
      206,  206,  206,  251,  410,  251,  251,  251,  251,  251,
      252,  657,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  253,  656,  253,  253,  253,  253,

      253,  254,  651,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  255,  650,  255,  255,  255,
      255,  255,  256,  256,  256,  256,  256,  259,  647,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  260,  260,  260,  260,  260,  646,  260,  260,  260,
      260,  260,  260,  261,  643,  261,  261,  261,  261,  261,
      304,  304,  304,  304,  304,  307,  642,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  308,
      308,  308,  308,  308,  641,  308,  308,  308,  308,  308,
      308,  309,  639,  309,  309,  309,  309,  309,  310,  633,

      310,  310,  310,  310,  310,  311,  632,  311,  311,  311,
      311,  311,  312,  630,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  313,  628,  313,  313,
      313,  313,  313,  314,  627,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  315,  342,  315,
      315,  315,  315,  315,  626,  620,  619,  357,  342,  357,
      357,  357,  357,  357,  358,  614,  358,  358,  358,  358,
      358,  359,  613,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  360,  612,  360,  360,  360,
      360,  360,  361,  611,  361,  361,  361,  361,  361,  361,

      361,  361,  361,  361,  361,  361,  362,  610,  362,  362,
      362,  362,  362,  363,  363,  363,  363,  363,  366,  609,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  367,  367,  367,  367,  367,  607,  367,  367,
      367,  367,  367,  367,  368,  605,  368,  368,  368,  368,
      368,  409,  409,  409,  409,  409,  412,  596,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      413,  413,  413,  413,  413,  595,  413,  413,  413,  413,
      413,  413,  414,  593,  414,  414,  414,  414,  414,  415,
      415,  415,  415,  415,  416,  592,  416,  416,  416,  416,

      416,  416,  416,  416,  416,  416,  416,  416,  417,  589,
      417,  417,  417,  417,  417,  418,  588,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  419,
      587,  419,  419,  419,  419,  419,  455,  455,  455,  455,
      455,  456,  586,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  457,  585,  457,  457,  457,
      457,  457,  458,  584,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  459,  583,  459,  459,
      459,  459,  459,  462,  579,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  463,  463,  463,

      463,  463,  578,  463,  463,  463,  463,  463,  463,  464,
      573,  464,  464,  464,  464,  464,  497,  572,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      498,  498,  498,  498,  498,  571,  498,  498,  498,  498,
      498,  498,  499,  570,  499,  499,  499,  499,  499,  500,
      569,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  501,  568,  501,  501,  501,  501,  501,
      502,  567,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  503,  565,  503,  503,  503,  503,
      503,  527,  564,  527,  527,  527,  527,  527,  527,  527,

      527,  527,  527,  527,  527,  528,  563,  528,  528,  528,
      528,  528,  529,  562,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  530,  561,  530,  530,
      530,  530,  530,  533,  552,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  534,  534,  534,
      534,  534,  551,  534,  534,  534,  534,  534,  534,  535,
      540,  535,  535,  535,  535,  535,  540,  553,  550,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  554,  554,  554,  554,  554,  549,  554,  554,  554,
      554,  554,  554,  555,  548,  555,  555,  555,  555,  555,

      556,  547,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  557,  545,  557,  557,  557,  557,
      557,  558,  544,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  559,  543,  559,  559,  559,
      559,  559,  574,  542,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  575,  539,  575,  575,
      575,  575,  575,  576,  538,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  576,  577,  537,  577,
      577,  577,  577,  577,  580,  532,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  581,  581,

      581,  581,  581,  531,  581,  581,  581,  581,  581,  581,
      582,  526,  582,  582,  582,  582,  582,  597,  525,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      597,  598,  598,  598,  598,  598,  524,  598,  598,  598,
      598,  598,  598,  599,  522,  599,  599,  599,  599,  599,
      600,  521,  600,  600,  600,  600,  600,  600,  600,  600,
      600,  600,  600,  600,  601,  520,  601,  601,  601,  601,
      601,  602,  519,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  603,  516,  603,  603,  603,
      603,  603,  615,  515,  615,  615,  615,  615,  615,  615,

      615,  615,  615,  615,  615,  615,  616,  514,  616,  616,
      616,  616,  616,  617,  513,  617,  617,  617,  617,  617,
      511,  617,  617,  617,  617,  617,  617,  621,  510,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  623,  509,  623,  623,  623,  623,  623,  634,  507,
      634,  634,  634,  634,  634,  506,  634,  634,  634,  634,
      634,  634,  636,  496,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  637,  495,  637,  637,
      637,  637,  637,  644,  494,  644,  644,  644,  644,  644,
      493,  644,  644,  644,  644,  644,  644,  653,  492,  653,

      653,  653,  653,  653,  680,  680,  680,  680,  680,  680,
      681,  681,  681,  681,  681,  681,  682,  682,  682,  682,
      682,  682,  683,  491,  683,  683,  683,  683,  684,  684,
      684,  684,  684,  684,  685,  488,  685,  685,  685,  685,
      686,  686,  686,  687,  487,  687,  688,  688,  688,  689,
      689,  689,  690,  690,  690,  691,  691,  691,  692,  692,
      692,  693,  693,  693,  694,  694,  694,  695,  695,  695,
      696,  696,  696,  697,  697,  697,  698,  698,  698,  699,
      699,  699,  700,  700,  700,  701,  701,  701,  702,  702,
      702,  703,  703,  703,  704,  704,  704,  705,  705,  705,

      706,  706,  706,  707,  707,  707,  708,  708,  708,  709,
      709,  709,  710,  710,  710,  711,  711,  711,  712,  712,
      712,  713,  713,  713,  714,  714,  714,  715,  485,  715,
      716,  716,  716,  717,  717,  717,  718,  481,  718,  719,
      480,  719,  720,  720,  720,  721,  721,  721,  722,  479,
      722,  723,  478,  723,  724,  477,  724,  725,  725,  725,
      726,  726,  726,  727,  476,  727,  728,  474,  728,  729,
      729,  729,  730,  473,  730,  731,  472,  731,  732,  732,
      732,  733,  733,  733,  734,  734,  734,  735,  471,  735,
      736,  736,  736,  737,  737,  737,  738,  738,  738,  739,

      469,  739,  740,  740,  740,  741,  741,  741,  742,  742,
      742,  743,  468,  743,  744,  744,  744,  745,  745,  745,
      746,  746,  746,  747,  467,  747,  748,  748,  748,  466,
      465,  461,  460,  454,  453,  452,  451,  450,  447,  446,
      445,  444,  443,  442,  440,  439,  438,  437,  436,  434,
      433,  432,  431,  430,  429,  428,  427,  426,  425,  424,
      423,  422,  421,  420,  411,  408,  407,  405,  404,  403,
      401,  400,  399,  398,  397,  396,  395,  394,  392,  391,
      390,  389,  388,  385,  383,  382,  381,  380,  379,  378,
      377,  376,  375,  374,  373,  372,  371,  370,  369,  365,

      356,  355,  354,  353,  352,  351,  349,  348,  347,  346,
      345,  344,  343,  340,  339,  338,  337,  336,  335,  334,
      333,  332,  331,  330,  329,  328,  327,  326,  325,  323,
      322,  321,  320,  319,  318,  317,  316,  306,  303,  302,
      301,  300,  299,  298,  297,  296,  295,  294,  293,  292,
      291,  290,  289,  288,  287,  285,  284,  283,  282,  281,
      280,  279,  278,  277,  276,  275,  274,  273,  271,  270,
      269,  268,  267,  266,  265,  264,  263,  262,  258,  250,
      249,  248,  247,  246,  245,  244,  243,  242,  241,  240,
      239,  236,  235,  234,  233,  232,  231,  230,  229,  228,

      227,  225,  224,  223,  222,  221,  220,  219,  217,  216,
      215,  214,  213,  212,  211,  209,  208,  207,  197,  196,
      195,  194,  193,  192,  191,  190,  188,  187,  186,  184,
      183,  182,  181,  180,  178,  177,  176,  175,  174,  172,
      170,  169,  168,  167,  165,  164,  163,  162,  161,  160,
      159,  158,  157,  156,  155,  147,  146,  142,  141,  140,
      139,  138,  137,  136,  135,  134,  133,  132,  131,  130,
      129,  128,  126,  125,  123,  122,  121,  120,  119,  118,
      117,  116,  115,  114,  113,  112,  111,  110,  109,  108,
      107,  101,   96,   95,   94,   93,   92,   91,   90,   89,

       86,   85,   84,   82,   81,   80,   79,   78,   77,   75,
       74,   73,   71,   70,   69,   68,   67,   66,   65,   63,
       62,   60,   59,   52,   48,   47,   44,   39,   37,   36,
       34,   29,   18,   17,   14,   12,    7,    4,    3,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[79] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 1127 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 1232 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 680 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1940 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 60 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 62 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 108 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno; 
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 122 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 123 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 124 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 65:
YY_RULE_SETUP
#line 131 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 140 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 149 "SrvLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 158 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 167 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 176 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 185 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 197 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 204 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 225 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd then no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 257 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd; 
      YYABORT; 
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 267 "SrvLexer.l"
{ 
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) { 
        Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd; 
        YYABORT; 
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 276 "SrvLexer.l"
{ return yytext[0]; } 
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 279 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 1850 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 680 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 680 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 679);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

yyFlexLexer::~yyFlexLexer()
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

	delete [] (yy_state_buf);
	yyfree((yy_start_stack)  );

}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 279 "SrvLexer.l"




