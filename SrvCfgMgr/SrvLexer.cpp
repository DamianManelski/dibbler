#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 119
#define YY_END_OF_BUFFER 120
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[990] =
    {   0,
        1,    1,    0,    0,    0,    0,  120,  118,    2,    1,
        1,  118,  100,  118,  118,  117,  117,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      104,  104,  119,    1,    1,    1,    0,  112,  100,    0,
      112,  102,  101,  117,    0,    0,  116,    0,  109,   83,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
       97,  113,  113,   85,  113,  113,  113,  113,  113,  113,

      113,  113,  113,  113,  113,   17,   18,  113,  113,  113,
      113,  113,  113,  113,  113,  103,  101,  117,    0,    0,
        0,  108,  114,  107,  107,  113,  113,  113,  113,  113,
       84,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
       96,  117,    0,    0,    0,    0,  106,  106,    0,  107,
        0,  107,  113,  113,  113,   63,  113,  113,  113,  113,

      113,  113,  113,  113,   91,  113,  113,  113,   30,  113,
      113,   43,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,    0,  113,  113,  113,  113,  113,  113,   23,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,   98,  113,  113,  113,  113,  117,
        0,  115,    0,    0,    0,  106,    0,  106,    0,  107,
      107,  107,  107,  113,  113,  113,  113,   90,  113,  113,
      113,    4,  113,  113,  113,  113,  113,  113,  113,   99,
      113,  113,    3,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,    0,  113,  113,  113,  113,  113,

      113,  113,  113,  113,  113,    7,  113,   42,  113,   24,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,    0,    0,    0,    0,    0,  106,  106,  106,  106,
        0,  107,  107,  107,    0,  107,  113,  113,  113,  113,
      113,  113,  113,  113,  113,   29,  113,  113,  113,  113,
      113,   36,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,    0,    0,  113,
      113,  113,   34,  113,  113,  113,  113,  113,  113,  113,
       59,  113,  113,  113,   94,  113,  113,  113,  113,  113,
      113,  113,    0,    0,    0,    0,  106,  106,  106,    0,

      106,    0,    0,  107,  107,  107,  107,  113,  113,   32,
      113,  113,  113,  113,  113,  113,    0,  113,  113,   93,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,    0,
        0,  113,  113,  113,  113,  113,   57,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,   21,  113,  113,
      113,  115,    0,    0,    0,    0,    0,  106,  106,  106,
      106,    0,  107,  107,  107,    0,  107,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,    0,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,

      113,  113,  113,   44,  113,   53,  113,  113,   12,   10,
       82,  113,   41,    0,    0,  113,  113,  113,   55,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,    5,
      113,  113,  113,   14,    0,    0,    0,    0,  106,  106,
      106,    0,  106,  111,  107,  107,  107,  107,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,    0,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,   11,   62,    0,    0,
      113,  113,  113,   56,  113,  113,  113,  113,   31,  113,
      113,    6,   92,   38,  113,  113,    0,    0,    0,    0,

      110,  106,  106,  106,  106,  107,  107,  107,    0,  107,
      113,  113,  113,  113,  113,  113,  113,  113,  113,   54,
      113,    0,  113,  113,  113,  113,  113,  113,  113,  113,
       35,  113,  113,   33,  113,  113,  113,   13,    0,    0,
       50,   49,   37,  113,   22,  113,  113,   40,   39,  113,
      113,  115,    0,    0,  106,  106,  106,    0,  106,  107,
      107,  107,  107,  113,   15,  113,   61,  113,  113,  113,
       70,  113,  113,    0,  113,  113,  113,  113,  113,  113,
       73,  113,  113,  113,  113,  113,  113,   52,   51,  113,
      113,  113,  113,   58,    0,    0,    0,    0,  106,  106,

      106,  106,  107,  107,  107,    0,  107,  113,  113,   95,
       72,  113,  113,  113,    0,   81,  113,  113,  113,   48,
      113,   74,   60,  113,  113,  113,    8,  113,   25,  113,
      113,    0,    0,    0,  106,  106,  106,    0,  106,  107,
      107,  107,  107,  113,  113,   71,  113,  113,    0,  113,
      113,   47,  113,  113,  113,  113,   64,  113,  113,  113,
      113,  115,    0,    0,    0,  106,  106,  106,  106,  107,
      107,  107,    0,  107,  113,  113,  113,  113,    0,  113,
      113,  113,  113,  113,  113,  113,  113,   16,   20,    0,
        0,  105,  108,  106,  106,  106,    0,  106,  107,  107,

      107,  107,  113,  113,  113,   27,    0,    0,  113,  113,
      113,   75,  113,  113,   26,  113,  113,    0,    0,  105,
        0,  106,  106,  106,  106,  106,  107,  107,  107,    0,
      107,  113,  113,  113,    0,    0,   28,  113,  113,   76,
      113,  113,  113,  113,  113,  113,  115,  105,  108,  106,
        0,  106,  106,  106,  106,  107,  107,  107,   65,  113,
      113,  113,  113,    0,    0,  113,  113,  113,  113,  113,
      113,   46,  113,   19,    0,  105,  106,  106,  106,  106,
      107,  107,  107,  113,  113,  113,  113,  113,    0,    0,
      113,  113,   77,   78,   79,   80,    9,    0,  106,  106,

        0,  106,  106,  107,   45,  113,  113,  113,  113,    0,
        0,  113,  113,  115,  106,  106,  107,  113,  113,  113,
      113,    0,    0,    0,  113,  113,  113,    0,  106,  106,
        0,  113,  113,  113,  113,    0,    0,    0,   86,  113,
      113,  113,   86,  105,  106,  106,   66,  113,  113,  113,
        0,   88,    0,  113,   88,  113,  105,  106,  106,    0,
      113,  113,   69,    0,   87,  113,   87,    0,  106,  106,
      113,   67,   89,   89,    0,  106,  106,    0,   68,  115,
      106,  106,    0,  106,  106,    0,  106,  106,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
       23,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        1,    1,    1,    1,    1,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    1,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1080] =
    {   0,
        0,    0, 1132, 1131,    0,    0, 1138, 5733, 5733,   73,
       75, 1132,    0, 1129,   72,   72,   34, 1112, 1110,  136,
      186,  233,  280,   71,  208,  338,   38,   73,  223,   89,
      267,  175,  275,  356,  372,  399,   67,  357,  180,  209,
     5733, 1120, 5733,  111,  137,  222, 1095, 5733,    0, 1089,
     1088, 5733,    0,  457, 1069,  476, 5733,    0,  502, 5733,
       61,  545,   86,   89,  185,  208,  231,  279,  221,  265,
      288,  559,  342,  283,  285,  388,  377,  389,  339,  395,
      326,  410,  394,  544,  561,  469,  557,  392,  574,  507,
      326,  542,  576,  455,  538,  584,  582,  594,  606,  462,

      593,  599,  596,  629,  630,  581,  612,  614,  636,  613,
      643,  627,  641,  645,  648, 5733,    0,  706, 1068,  725,
     1067,  751,    0,  796,  770,  839,  649,  650,  828,  832,
      666,  831,  837,  698,  835,  855,  704,  836,  838,  856,
      875,  887,  886,  888,  873,  756,  876,  896,  903,  891,
      906,  908,  923,  925,  924,  920,  961,  928,  921,  948,
      940,  952,  953,  958,  964,  977,  960,  988,  975,  989,
      981,  994,  993, 1010,  999, 1011, 1022, 1012, 1033, 1023,
      738, 1091,  814, 1065, 1063, 1062, 1138, 1110,  823, 1183,
     1226, 1157, 1269, 1010, 1204, 1024, 1027, 1091, 1205, 1044,

     1257, 1143, 1267, 1256, 1032, 1260, 1261, 1274, 1125, 1266,
     1306, 1298, 1270, 1307, 1187, 1302, 1304, 1309, 1347, 1310,
     1318, 1299, 1069, 1343, 1322, 1351, 1358, 1353, 1356, 1342,
     1370, 1374, 1378, 1381, 1362, 1405, 1395, 1408, 1414, 1409,
     1398, 1402, 1403, 1406, 1399, 1430, 1439, 1443, 1447, 1203,
     1056, 1018,  995,  984, 1505, 1516, 1559, 1535, 1578, 1604,
     1623, 1649, 1668,  960, 1442, 1651, 1446, 1426, 1662, 1546,
     1495, 1591, 1648, 1445, 1666, 1650, 1683, 1670, 1681, 1458,
     1685, 1698, 1705, 1702, 1712, 1697, 1713, 1710, 1715, 1720,
     1737, 1718, 1602, 1719, 1750, 1735, 1750, 1758, 1754, 1769,

     1764, 1762, 1770, 1785, 1753, 1538, 1781, 1766, 1772, 1777,
     1800, 1802, 1808, 1801, 1809, 1824, 1805, 1816, 1823, 1818,
     1838,  937,  906,  905,  902, 1884, 1898, 1917, 1943, 1962,
     1926, 1988,  899, 2000, 2043, 2019, 1979, 1837, 2031, 2037,
     1942, 2038, 2046, 2034, 2041, 2116, 2042, 1822, 2083, 2036,
     2043, 1885, 2093, 2087, 2098, 2099, 2088, 2101, 2106, 2110,
     2129, 2104, 2135, 2141, 2134, 2143, 2145, 1928, 2055, 2150,
     2152, 2154, 2121, 2140, 2170, 2162, 2173, 2190, 2192, 2208,
     2181, 2193, 2187, 2202, 2189, 2203, 2197, 2200, 2205, 2233,
     2235, 2237,  892,  865,  852, 2269, 2295,  851, 2307, 2350,

     2326, 2369, 2395, 2406, 2425, 2451, 2470, 2472, 2451, 2286,
     2449, 2465, 2329, 2484, 2467, 2488, 2205, 2503, 2470, 2222,
     2486, 2393, 2520, 2482, 2516, 2524, 2505, 2522, 2534, 2535,
     2554, 2553, 2538, 2556, 2565, 2567, 2570, 2571, 2552, 2235,
     2252, 2589, 2583, 2585, 2574, 2588, 2311, 2623, 2605, 2619,
     2604, 2622, 2607, 2626, 2636, 2637, 2646, 2348, 2653, 2640,
     2647,  823,  777,  776,  775, 2711, 2722, 2733, 2752, 2778,
     2797, 2761, 2823,  774, 2835, 2878, 2854, 2856, 2864, 2872,
     2777, 2876, 2651, 2894, 2892, 2871, 2870, 2874, 2420, 2908,
     2926, 2923, 2910, 2927, 2921, 2922, 2924, 2928, 2951, 2919,

     2931, 2955, 2963, 2452, 2946, 2501, 2962, 2969, 2643, 2675,
     2720, 2966, 2765, 2981, 2964, 2979, 2994, 2996, 2971, 3011,
     3002, 3000, 2983, 3012, 3016, 3019, 3030, 3015, 3031, 3010,
     3034, 3047, 3051, 3023,  773,  772,  770, 3092, 3109,  740,
     3121, 3164, 3140, 3149, 3209, 3183, 3254, 3228, 3162, 3242,
     3250, 3151, 3253, 3252, 3245, 3254, 3272, 3273, 3281, 3034,
     3295, 3284, 3292, 3294, 3296, 3297, 3293, 3309, 3305, 3325,
     3334, 3333, 3338, 3337, 3340, 3332, 3048, 3196, 3338, 3343,
     3346, 3344, 3345, 3336, 3357, 3377, 3381, 3388, 3349, 3385,
     3382, 3354, 3369, 3384, 3406, 3409,  732,  731,  730,  729,

     3237, 3469, 3451, 3514, 3488, 3533,  728, 3559, 3602, 3578,
     3391, 3588, 3596, 3593, 3597, 3580, 3616, 3598, 3603, 3386,
     3635, 3447, 3633, 3467, 3637, 3645, 3448, 3650, 3644, 3648,
     3501, 3660, 3667, 3512, 3664, 3649, 3651, 3656, 3675, 3675,
     3678, 3679, 3680, 3695, 3684, 3697, 3703, 3688, 3689, 3692,
     3719,  727,  692,  687, 3761,  686, 3779, 3822, 3798, 3867,
     3841, 3912, 3886, 3716, 3696, 3904, 3699, 3801, 3906, 3854,
     3740, 3758, 3907, 3789, 3902, 3910, 3909, 3911, 3913, 3942,
     3914, 3941, 3952, 3961, 3962, 3964, 3965, 5733, 5733, 3966,
     3950, 3963, 3957, 3953,  685,  683,  680,  673, 4026, 4045,

     4071, 4090, 4116,  672, 4128, 4171, 4147, 3958, 4131, 3955,
     3959, 4165, 4166, 4070, 4008, 4013, 4174, 4163, 4170, 4058,
     4201, 4162, 4164, 4185, 4203, 4213, 4205, 4214, 4169, 4207,
     4210,  671,  571,  570, 4274,  562, 4286, 4329, 4305, 4374,
     4348, 4419, 4393, 4204, 4379, 4208, 4409, 4410,  570, 4327,
     4407, 4212, 4431, 4424, 4415, 4418, 4216, 4419, 4421, 4451,
     4459,  557,  556,  528,  525, 4519, 4491, 4564, 4538, 4583,
      524, 4609, 4652, 4628, 4472, 4517, 4448, 4630, 4649, 4455,
     4666, 4316, 4665, 4667, 4668, 4646, 4682, 4265, 4308,  523,
      522,  521,    0, 4728,  520, 4742, 4785, 4761, 4830, 4804,

     4875, 4849, 4653, 4843, 4721, 4361, 4463, 4511, 4877, 4772,
     4654, 4551, 4892, 4867, 4562, 4888, 4876,  519,  518,  516,
      515,  514, 4952, 4971, 4997, 5016, 5042,  513, 5054,    0,
     5073, 4870, 4879, 5074, 4632, 4629, 4655, 4996, 4889, 4684,
     4939, 4764, 4984, 4880, 5057, 5068,  512,  511, 5733,  483,
        0, 5134,  482, 5146, 5165, 5191, 5210,    0, 4783, 5070,
     4890, 5071, 5206, 4933, 4967, 5058, 5196, 5125, 5195, 5216,
     5088, 5055, 5208, 5069,  481,  480,  479,  478, 5276, 5295,
     5321,  465,    0, 5210, 5209, 5212, 5218, 5263, 5078,    0,
     5276, 5346, 5124, 5133, 5193, 5207, 5211,  446,  445,  434,

        0, 5346, 5733,    0, 5228, 5328, 5335, 5339, 5342,    0,
     5346, 5409, 5349,  433,  431,  430, 5733, 5336, 5378, 5381,
     5385, 5380, 5347, 5387, 5399, 5412, 5391,  428,  424,  406,
        0, 5394, 5401, 5403, 5396, 5418, 5407, 5414, 5733, 5434,
     5435, 5416, 5430,  395,  356,  355, 5431, 5443, 5447, 5433,
     5438, 5733, 5465, 5449, 5446, 5484,  353,  352,  350,    0,
     5483, 5452, 5453, 5475, 5733, 5485, 5466,  346,  325,  307,
     5482, 5467, 5733, 5468,    0,  305,  276,    0, 5486,  267,
      262,  260,  258,  254,  251,    0,  229,  214, 5733, 5556,
     5560, 5564, 5568, 5572, 5576, 5578,  232, 5580, 5582, 5584,

     5586, 5588, 5590, 5592, 5594, 5596, 5598, 5602, 5604, 5606,
     5608, 5610, 5612, 5614, 5616, 5618, 5620, 5622, 5624, 5626,
     5628, 5630, 5632, 5634, 5636, 5638, 5640, 5642, 5644, 5646,
     5648, 5650, 5652, 5654,  231, 5656, 5658, 5660,  230, 5662,
     5664, 5666,  228,  226, 5668, 5670, 5672,  224, 5676, 5680,
     5682, 5684,  219,  217, 5688, 5692, 5694, 5696, 5698, 5700,
     5702,  214, 5704, 5706, 5708, 5710, 5712,  145, 5714, 5716,
     5718,  131, 5720,  117, 5722, 5724, 5726,   80, 5728
    } ;

static yyconst flex_int16_t yy_def[1080] =
    {   0,
      989,    1,  990,  990,  991,  991,  989,  989,  989,  989,
      989,  992,  993,  994,  989,  989,   16,  989,  989,  989,
       20,   20,   22,   22,   22,   22,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      989,  989,  989,  989,  989,  989,  992,  989,  993,  994,
      989,  989,  995,  989,  996,   54,  989,  997,  989,  989,
       26,   26,   62,   62,   62,   26,   26,   26,   26,   26,
       62,   26,   26,   62,   62,   26,   26,   26,   26,   26,
       62,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  989,  995,  989,  998,  118,
      999,  989,  997,  989,  124,   62,  126,  126,   26,   26,
       26,   26,   26,  126,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  989,  182, 1000, 1001, 1002,  989,  187,  989,  989,
      989,  190,  126,  193,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  989,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,  183,
      183, 1001, 1003, 1004,  989,  989,  989,  256,  989,  989,
      260,  989,  262,  193,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  989,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1005,  989, 1006, 1007,  989,  989,  327,  989,  329,
      989,  989,  989,  989,  989,  334,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1008,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  989,  989,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1009, 1010, 1011,  989,  989,  989,  989,  989,

      399,  989,  989,  989,  404,  989,  406,   26,   26,   26,
       26,   26,   26,   26,   26,   26,  989,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,  989,
      989,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1006,  989, 1012, 1013,  989,  989,  989,  468,  989,
      470,  989,  989,  989,  989,  989,  475,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  989,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  989,  989,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1014, 1015, 1016,  989,  989,  989,
      989,  989,  541,  989,  989,  545,  989,  547,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,  989,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  989,  989,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1017,  989, 1018, 1019,

      989,  989,  602,  989,  604,  989,  989,  989,  989,  608,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  989,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  989,  989,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1020, 1021, 1022,  989,  989,  989,  989,  657,  989,
      660,  989,  662,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  989,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  989,  989,   26,
       26,   26,   26,   26, 1023,  989, 1024, 1025,  989,  699,

      989,  701,  989,  989,  989,  989,  705,   26,   26,   26,
       26,   26,   26,   26,  989,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1026, 1027, 1028,  989,  989,  989,  989,  737,  989,
      740,  989,  742,   26,   26,   26,   26,   26,  989,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1029,  989, 1030, 1031,  989,  766,  989,  768,  989,
      989,  989,  989,  772,   26,   26,   26,   26,  989,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1032,
     1033, 1034, 1035,  989,  989,  989,  989,  796,  989,  799,

      989,  801,   26,   26,   26,   26,  989,  989,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1036,  989, 1037,
      989, 1038,  989,  823,  989,  825,  989,  989,  989, 1039,
      829,   26,   26,   26,  989,  989,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1040, 1041,  989, 1042,
     1043,  989,  989,  989,  854,  989,  856, 1044,   26,   26,
       26,   26,   26,  989,  989,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1045,  989, 1046, 1047,  989,  879,
      989,  989, 1048,   26,   26,   26,   26,   26,  989, 1049,
       26, 1050,   26,   26,   26,   26,   26, 1051,  989, 1052,

     1053,  989,  989, 1054,   26,   26,   26,   26,   26, 1055,
      989, 1056,   26, 1057, 1058, 1059,  989,   26,   26,   26,
       26,  989,  989,  989,   26,   26,   26, 1060,  989, 1061,
     1062,   26,   26,   26,   26,  989,  989,  989,  989,   26,
       26,   26,   26, 1063, 1064, 1065,   26,   26,   26,   26,
      989,  989,  989,   26,   26,   26, 1066,  989, 1067, 1068,
       26,   26,   26,  989,  989,   26,   26, 1069, 1070, 1071,
       26,   26,  989,   26, 1072,  989, 1073, 1074,   26,  989,
     1075, 1076, 1069,  989, 1077, 1078, 1079,  989,    0,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,

      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989
    } ;

static yyconst flex_int16_t yy_nxt[5809] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   27,   27,   29,   30,   31,   32,   33,   27,
       34,   35,   36,   37,   38,   39,   27,   40,   27,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   27,   27,
       29,   30,   31,   32,   33,   27,   34,   35,   36,   37,
       38,   39,   27,   40,   27,   44,   45,   46,   45,   52,
      989,   61,  826,   53,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   55,   62,   56,   56,   56,   56,   56,

       56,   84,   57,  111,   61,   61,  989,   61,   61,   85,
       61,  127,   88,   44,   45,  128,   61,   80,   58,  982,
       62,   56,   56,   56,   56,   56,   56,   84,   57,  111,
       61,   61,   61,  980,   61,   85,   61,  127,   88,   46,
       45,  128,   61,   80,   58,   61,   61,  970,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   55,   61,   62,
       62,   63,   64,   62,   65,   61,   66,   61,   61,   61,
       67,   61,   68,   61,   61,   61,   61,   61,   61,   69,
       61,   61,   61,   61,   61,   62,   62,   63,   64,   62,
       65,   61,   66,   61,   61,   61,   67,   61,   68,   61,

       61,   61,   61,   61,   61,   69,   61,   61,   61,   61,
       61,   62,   62,   93,   62,   94,  946,  114,   61,  917,
       61,  916,   61,   61,   44,   45,  904,  129,  883,   70,
      878,   81,  858,  822,  123,  986,  115,   62,   62,   93,
       62,   94,   61,  114,   61,   61,   61,   82,   61,   61,
      986,   61,   61,  129,   86,   70,   71,   81,   62,   62,
       87,   62,  115,  132,   61,  130,   61,   72,   61,   61,
       73,   61,  986,   82,   61,  978,   61,   61,   61,  989,
       86,  986,   71,  978,   62,   62,   87,   62,  983,  132,
       61,  130,   61,   72,   89,   61,   73,  978,   90,  133,

       61,   95,   61,   62,   91,  131,   74,   75,   61,   92,
       61,   76,   96,  134,   61,   97,   77,   78,   61,  138,
       89,  139,   61,   79,   90,  133,  960,   95,  978,   62,
       91,  131,   74,   75,   61,   92,   61,   76,   96,  134,
       61,   97,   77,   78,   61,  138,  960,  139,   61,   79,
       61,   61,   61,   61,   61,   61,   61,   61,   61,  989,
      145,   61,   61,   61,   61,   61,   61,  849,   61,   61,
      143,  960,   61,  931,  968,   61,  960,  931,  137,   98,
      112,   83,   61,   99,  113,   61,  145,   61,   61,   61,
       61,   61,   61,  100,   61,   61,  143,  101,   61,   61,

       61,   61,  102,  103,  137,   98,  112,   83,   61,   99,
      113,   61,  106,  107,  104,  105,  821,  140,  141,  100,
       61,  147,  108,  101,  142,   61,   61,  931,  102,  103,
      109,   61,   61,  144,  154,   61,  146,   61,   61,  110,
      104,  105,   61,  140,  141,  901,   61,  147,  108,  793,
      142,  931,  901,   61,  928,  901,  109,   61,   61,  144,
      154,   61,  146,   61,   61,  110,  851,  765,   61,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  119,   61,
      120,  120,  120,  120,  120,  120,  830,   57,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  152,   61,  901,

      851,  821,  122,  797,  851,  167,  120,  120,  120,  120,
      120,  120,   61,   57,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  152,   61,  125,  125,  125,  125,  125,
      125,  167,  821,  875,  773,  851,  849,  821,   61,  765,
      698,  738,  821,  765,  122,  706,  793,  160,  157,  765,
       61,  125,  125,  125,  125,  125,  125,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  119,  148,  126,  126,
      126,  126,  126,  126,  157,   66,   61,  698,  790,  779,
      158,   61,  135,  658,  149,   61,  153,   61,   61,  150,
      136,  765,  698,  148,  126,  126,  126,  126,  126,  126,

       61,   66,   61,  151,   61,  155,  158,   61,  135,  162,
      149,   61,  153,   61,   61,  150,  136,   61,  159,   61,
      156,  161,  169,  174,   61,   61,   61,   61,   61,  151,
       61,  155,  163,  168,  170,  162,   61,   61,  164,   61,
      165,  166,   61,   61,  159,   61,  156,  161,  169,   61,
       61,   61,  171,   61,  173,   61,  176,   61,  163,  168,
      170,  178,   61,   61,  164,   61,  165,  166,   61,  172,
       61,  175,   61,   61,  177,   61,  194,  179,  171,   61,
      173,   61,  176,   61,   61,  180,   61,  178,   61,  181,
      195,   61,  600,  609,  122,  172,   61,  175,   61,   61,

      177,  698,  194,  179,  600,   61,  122,  542,  698,   61,
       61,  180,   61,  600,   61,  181,  195,   61,  182,  182,
      182,  182,  182,  182,  182,  182,  182,   55,  200,  183,
      183,  183,  183,  183,  183,   61,   57,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  203,   61,  695,  476,
      122,  600,  465,  465,  200,  183,  183,  183,  183,  183,
      183,  400,   57,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  203,   61,  188,  188,  188,  188,  188,  188,
      989,   61,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  600,  212,  465,  122,  335,  122,  465,  325,   61,

      188,  188,  188,  188,  188,  188,  189,   61,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  191,  212,  192,
      192,  192,  192,  192,  192,   61,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  535,  192,  192,  192,  192,  192,
      192,  193,  193,  193,  193,  193,  193,  193,  193,  193,
       55,  198,  193,  193,  193,  193,  193,  193,  196,  197,
      199,   61,  257,  465,   61,   61,  201,  204,   61,   61,
       61,   61,  202,  206,  207,  205,  325,  198,  193,  193,
      193,  193,  193,  193,  196,  197,  199,   61,   61,   61,

       61,   61,  201,  204,   61,   61,   61,   61,  202,  206,
      208,  205,  209,  325,  211,  210,   61,  213,   61,   61,
      191,  214,  216,  122,   61,   61,  325,  186,  215,   61,
       61,   61,  219,  217,   61,  218,  208,  225,  209,   61,
      211,  210,   61,  213,   61,   61,   61,  214,  216,   61,
      220,   61,  226,  221,  215,   61,   61,   61,  122,  217,
       61,  218,  222,   61,   61,   61,   61,   61,   61,  223,
      224,   61,   61,  227,  230,   61,  220,   61,  226,  221,
      231,  989,  228,   61,  232,  233,  229,  234,  222,   61,
       61,   61,   61,   61,   61,   61,   61,   61,  239,  227,

      230,   61,  236,   61,   61,  325,  231,   61,  228,   61,
      232,  233,  229,  234,  235,  238,  186,   61,   61,  237,
       61,   61,   61,  240,   61,  241,  244,   61,  236,   61,
       61,   61,   61,   61,  242,  243,   61,   61,  245,  322,
      235,  238,   61,  247,   61,  237,   61,  246,  265,  240,
       61,  241,  244,   61,   61,   61,  249,   61,   61,  248,
      242,  243,   61,   61,  245,   61,   61,   61,   61,  247,
       61,  271,  268,  246,  265,   61,   61,  989,  295,   61,
       61,   61,  249,  122,  186,  248,  186,   61,  186,  122,
      122,   61,   61,   61,   50,   51,   61,  271,  268,   48,

      269,   61,   61,  250,  250,  250,  250,  250,  250,  250,
      250,  250,   55,   61,  251,  251,  251,  251,  251,  251,
      989,   57,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  116,   60,   59,   61,   51,   48,  989,   42,   42,
      251,  251,  251,  251,  251,  251,  989,   57,  255,  989,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  257,
       61,  258,  258,  258,  258,  258,  258,  989,   61,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  989,  273,
      989,  989,  989,  989,  989,  989,   61,  258,  258,  258,
      258,  258,  258,  189,   61,  260,  260,  260,  260,  260,

      260,  260,  260,  260,  191,  273,  261,  261,  261,  261,
      261,  261,   61,  266,  270,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  989,  989,  989,  989,  989,  284,
       61,  267,  261,  261,  261,  261,  261,  261,  262,  262,
      262,  262,  262,  262,  262,  262,  262,   61,   61,  263,
      263,  263,  263,  263,  263,  284,   61,  267,  989,  989,
      989,  989,  989,  989,  989,  275,  989,  989,  989,  989,
      989,  989,  989,   61,   61,  263,  263,  263,  263,  263,
      263,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      274,  989,  264,  264,  264,  264,  264,  264,  272,   61,

       61,  276,  277,   61,   61,  278,  279,  281,  294,   61,
       61,  282,  989,   61,  989,  989,  274,   61,  264,  264,
      264,  264,  264,  264,  272,   61,   61,  276,  277,   61,
       61,  278,  279,  280,  283,   61,   61,  282,  285,   61,
      292,   61,   61,   61,  286,   61,  989,   61,  293,   61,
       61,  287,   61,   61,  989,  989,  989,  989,  989,  280,
      283,   61,  989,  298,  285,   61,  292,   61,   61,  296,
      286,   61,  288,   61,  293,   61,   61,  287,   61,   61,
      301,  289,  290,  291,  297,   61,   61,   61,  299,  298,
       61,   61,  300,  302,   61,  296,   61,  303,  288,   61,

      304,   61,  989,  305,  307,   61,  301,  289,  290,  291,
      297,   61,   61,   61,  299,  317,   61,   61,  300,  302,
       61,   61,   61,  303,   61,   61,  304,   61,  306,  305,
      307,   61,  308,  309,  314,  310,  313,  316,   61,   61,
      311,   61,   61,   61,  315,   61,   61,   61,   61,   61,
       61,   61,   61,  318,  306,  312,  321,   61,  308,  309,
      314,  310,  313,  316,   61,  319,  311,   61,   61,   61,
      315,   61,   61,   61,   61,   61,  347,   61,   61,  318,
      320,  312,   61,   61,  337,   61,   61,  339,   61,   61,
       61,  319,  989,  989,  989,   61,  989,  989,  989,   61,

      989,   61,  347,  989,  344,  989,  320,  989,   61,  989,
      337,   61,   61,  339,   61,   61,   61,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  255,   61,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  257,   61,  328,
      328,  328,  328,  328,  328,  989,  989,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  989,  989,  989,  989,
      989,  989,  989,  989,   61,  328,  328,  328,  328,  328,
      328,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      343,   61,  330,  330,  330,  330,  330,  330,  331,   61,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  989,

      345,  989,  989,  989,  989,  989,  343,   61,  330,  330,
      330,  330,  330,  330,  189,   61,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  191,  366,  333,  333,  333,
      333,  333,  333,  989,   61,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  989,   61,  989,  989,  989,  989,
      989,  989,  366,  333,  333,  333,  333,  333,  333,  189,
       61,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      335,   61,  336,  336,  336,  336,  336,  336,  989,  989,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  338,
      346,   61,  350,   61,   61,  340,  341,  342,  336,  336,

      336,  336,  336,  336,  348,   61,  352,  355,  349,   61,
      351,  354,  353,   61,  356,  338,  346,   61,  350,   61,
       61,  340,  341,  342,   61,  359,   61,  365,   61,  989,
      348,   61,  352,  357,  349,   61,  351,  354,  353,   61,
       61,   61,  362,  358,  360,   61,  989,  361,   61,  367,
       61,  359,   61,   61,   61,   61,   61,  363,   61,  357,
      364,   61,   61,   61,  989,  989,   61,   61,  362,  358,
      360,   61,  370,  361,   61,  367,  368,  371,   61,   61,
       61,   61,   61,  363,   61,  372,  364,   61,   61,   61,
      373,  369,  374,   61,  378,  379,   61,   61,  370,  376,

      375,   61,  368,  371,   61,   61,   61,   61,  380,   61,
      377,  372,   61,   61,  381,   61,  373,  369,  374,   61,
       61,  379,   61,   61,   61,  376,  375,   61,   61,  383,
      385,   61,  390,   61,  380,   61,  377,  382,   61,   61,
      381,   61,  384,   61,   61,   61,   61,  387,   61,  386,
       61,   61,   61,  388,   61,  383,  385,  389,  391,   61,
      409,   61,  421,  382,  392,   61,   61,   61,  384,   61,
       61,   61,  989,  387,   61,  386,  989,   61,   61,  388,
       61,   61,  989,  389,  391,   61,  409,   61,  421,  989,
      392,   61,   61,   61,  396,  989,  326,  326,  326,  326,

      326,  326,  326,  326,  326,  989,   61,   61,  255,  989,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  257,
      989,  398,  398,  398,  398,  398,  398,  989,   61,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  398,  398,  398,
      398,  398,  398,  255,   61,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  400,  440,  401,  401,  401,  401,
      401,  401,  989,  412,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  989,  989,   61,  989,  989,  408,  989,
      989,  440,  401,  401,  401,  401,  401,  401,  189,  412,

      403,  403,  403,  403,  403,  403,  403,  403,  403,  191,
      189,   61,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  335,   61,  405,  405,  405,  405,  405,  405,  989,
      989,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      989,  989,  989,  989,  989,  423,  989,  989,   61,  405,
      405,  405,  405,  405,  405,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  411,  413,  407,  407,  407,  407,
      407,  407,  410,  414,   61,  415,  416,   61,  420,   61,
       61,   61,  441,  424,   61,   61,   61,  989,  989,   61,
      411,  413,  407,  407,  407,  407,  407,  407,  410,  414,

       61,  415,  416,   61,  420,   61,   61,   61,  441,  424,
       61,   61,   61,  426,  422,   61,  417,  417,  989,  417,
      417,  417,  417,  417,  417,  418,   61,  417,  425,  431,
       61,   61,  429,  427,  428,  989,   61,  417,  417,  426,
      422,   61,   61,  430,   61,  432,  989,   61,  434,   61,
      989,  989,   61,   61,  425,  431,   61,   61,  429,  427,
      428,  435,   61,  433,   61,  437,  989,   61,   61,  430,
       61,  432,   61,   61,  434,   61,  436,   61,   61,   61,
      438,  445,  439,   61,   61,  442,   61,  435,   61,  433,
       61,  437,  443,   61,  444,   61,  447,   61,   61,  446,

      448,  450,  436,   61,   61,   61,  438,  445,  439,   61,
       61,  442,   61,   61,   61,  449,   61,  451,  443,   61,
      444,   61,  447,   61,   61,  446,  448,  453,  452,  454,
       61,   61,   61,   61,  455,   61,   61,  457,  456,   61,
       61,  449,   61,   61,  460,   61,   61,  458,   61,  489,
       61,   61,  989,  453,  452,  454,   61,  989,   61,   61,
      455,   61,   61,  457,  456,   61,   61,  459,  461,   61,
      514,   61,   61,  458,   61,  489,   61,   61,   61,  989,
       61,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      989,   61,  515,  459,  461,  482,  514,  989,  989,  989,

      989,  989,   61,  989,   61,  255,   61,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  257,  255,  515,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  400,   61,
      469,  469,  469,  469,  469,  469,  989,  989,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  989,  989,  989,
      989,  989,  989,  989,   61,   61,  469,  469,  469,  469,
      469,  469,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  485,   61,  471,  471,  471,  471,  471,  471,  472,
       61,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      989,   61,  989,  989,  989,  989,  989,  485,   61,  471,

      471,  471,  471,  471,  471,  189,  989,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  189,   61,  473,  473,
      473,  473,  473,  473,  473,  473,  473,  335,  494,  474,
      474,  474,  474,  474,  474,  989,   61,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  989,  560,  989,  989,
      989,  989,  989,  989,  494,  474,  474,  474,  474,  474,
      474,  189,   61,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  476,  560,  477,  477,  477,  477,  477,  477,
      989,  989,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  481,   61,  484,   61,   61,  483,  989,  487,  989,

      477,  477,  477,  477,  477,  477,  478,  486,   61,  479,
       61,  488,  989,   61,  492,  480,  989,  481,   61,  484,
       61,   61,  483,  493,  487,   61,  498,   61,  490,   61,
      989,   61,  478,  486,   61,  479,   61,  488,  491,   61,
      492,  480,  501,  499,   61,  502,   61,  492,   61,  493,
      495,   61,  498,   61,  490,   61,  496,   61,  497,   61,
      500,  503,  504,   61,  491,   61,  989,   61,  501,  499,
       61,  502,   61,  492,   61,  507,  495,   61,   61,  505,
      506,   61,  496,  508,  497,   61,  500,  503,  504,   61,
      513,   61,  509,   61,  510,   61,   61,   61,  511,   61,

      989,  507,  989,   61,   61,  505,  506,   61,   61,  508,
       61,  512,  516,   61,   61,  519,  513,   61,  509,  989,
      510,   61,   61,   61,  511,   61,   61,  517,   61,  518,
      520,   61,   61,  989,   61,  525,   61,  512,  516,   61,
       61,  519,  523,   61,  524,  526,  989,   61,   61,  521,
       61,  527,   61,  517,   61,  518,  520,   61,   61,  522,
      554,  525,   61,  989,  989,   61,   61,  528,  523,   61,
      524,  526,  529,   61,   61,  521,   61,  527,  530,   61,
       61,  533,  531,   61,  532,  522,   61,  534,   61,   61,
       61,   61,   61,  528,   61,   61,   61,  989,  529,  989,

      989,  989,  989,  989,  530,   61,   61,  533,  531,   61,
      532,  989,   61,  534,  989,   61,   61,  989,   61,  989,
       61,  538,   61,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  255,  989,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  255,   61,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  400,  989,  540,  540,  540,  540,
      540,  540,  989,   61,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  540,  540,  540,  540,  540,  540,  255,   61,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  542,

      552,  543,  543,  543,  543,  543,  543,  989,   61,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  989,  989,
       61,  989,  989,  989,  989,  989,  552,  543,  543,  543,
      543,  543,  543,  189,   61,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  335,  189,   61,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  476,  989,  546,  546,
      546,  546,  546,  546,  989,  989,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  989,  989,  989,  989,  989,
      989,  989,  989,  549,  546,  546,  546,  546,  546,  546,
      547,  547,  547,  547,  547,  547,  547,  547,  547,   61,

      550,  548,  548,  548,  548,  548,  548,   61,  551,  549,
      553,  989,  557,   61,   61,   61,  989,   61,  558,   61,
      559,  555,  556,  989,  989,   61,  550,  548,  548,  548,
      548,  548,  548,   61,  551,   61,  553,   61,  557,   61,
       61,   61,  561,   61,  558,   61,  559,  555,  556,  562,
      563,   61,  564,   61,  565,  569,  566,  572,  568,  567,
      571,   61,   61,   61,   61,   61,   61,   61,  561,   61,
       61,   61,  574,  575,   61,  562,  563,   61,  564,   61,
      565,  569,  566,  572,  568,  567,  571,  570,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,  575,

       61,  573,  576,  577,  579,   61,   61,  578,  580,   61,
      581,  585,   61,  570,   61,   61,  989,  989,  587,  989,
       61,  582,   61,  583,   61,  586,   61,  573,  576,  577,
      579,   61,   61,  578,  580,   61,  581,   61,   61,   61,
       61,  584,  589,   61,  587,   61,  588,  582,   61,  583,
      590,  586,   61,   61,   61,   61,  592,  591,   61,   61,
      593,  594,   61,   61,  989,   61,   61,  584,  589,   61,
      622,   61,  588,   61,   61,  595,  590,   61,  989,   61,
       61,   61,  592,  591,   61,   61,  593,  594,   61,  596,
       61,   61,   61,  989,   61,  989,  622,  989,  989,   61,

       61,  595,  989,   61,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  989,  989,  596,   61,   61,  989,  255,
       61,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      400,  255,  989,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  542,  989,  603,  603,  603,  603,  603,  603,
      989,  989,  603,  603,  603,  603,  603,  603,  603,  603,
      603,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      603,  603,  603,  603,  603,  603,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  611,  614,  605,  605,  605,
      605,  605,  605,  989,   61,  607,  607,  607,  607,  607,

      607,  607,  607,  607,  989,   61,  989,  989,  989,  989,
      989,  611,  614,  605,  605,  605,  605,  605,  605,  189,
       61,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      476,   61,  607,  607,  607,  607,  607,  607,  989,   61,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  607,  607,
      607,  607,  607,  607,  189,   61,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  609,  612,  610,  610,  610,
      610,  610,  610,  613,  615,   61,  616,  617,   61,  989,
      621,  618,  989,   61,  989,   61,   61,   61,  989,  619,

      620,  989,  612,  610,  610,  610,  610,  610,  610,  613,
      615,   61,  616,  617,   61,   61,   61,  618,  623,   61,
      628,   61,   61,   61,   61,  619,  620,   61,  625,  629,
      624,  626,  630,  627,  989,   61,   61,   61,   61,   61,
       61,   61,   61,  633,  623,  631,  628,  635,   61,  637,
       61,  989,   61,   61,  625,  629,  624,  626,  630,  627,
      634,   61,   61,   61,   61,   61,   61,  632,   61,  639,
      640,  631,  636,  638,   61,   61,   61,   61,   61,   61,
       61,   61,  641,   61,  642,  643,  634,   61,   61,   61,
      989,  644,   61,  632,   61,  639,  640,   61,  636,  638,

       61,   61,   61,   61,  645,   61,   61,   61,  641,   61,
      642,  643,   61,   61,   61,   61,  646,  644,   61,  647,
       61,  648,  649,   61,   61,   61,   61,   61,   61,   61,
      645,   61,  664,  650,   61,  989,  651,  989,   61,  989,
      989,  989,  646,  989,  989,  647,   61,  648,  649,   61,
       61,   61,   61,   61,   61,   61,  989,   61,  664,  650,
       61,  989,  651,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  989,  674,  989,   61,  676,  989,   61,  255,
      989,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      542,  679,  656,  656,  656,  656,  656,  656,  989,  674,

      659,  659,  659,  659,  659,  659,  659,  659,  659,  989,
       61,  989,  989,  989,  989,  989,  989,  679,  656,  656,
      656,  656,  656,  656,  255,  989,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  658,   61,  659,  659,  659,
      659,  659,  659,  189,   61,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  476,   61,  989,  989,  989,  989,
      989,  989,  989,  659,  659,  659,  659,  659,  659,  189,
       61,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      609,   61,  661,  661,  661,  661,  661,  661,  989,  989,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  989,

      989,  989,  989,  989,  989,  989,  989,  669,  661,  661,
      661,  661,  661,  661,  662,  662,  662,  662,  662,  662,
      662,  662,  662,   61,  671,  663,  663,  663,  663,  663,
      663,   61,  666,  669,  667,  665,   61,  989,  668,   61,
       61,   61,  672,  989,  989,  989,   61,  670,  989,   61,
      671,  663,  663,  663,  663,  663,  663,   61,  666,   61,
      667,  665,   61,  677,  668,   61,   61,   61,  672,  673,
      678,  681,   61,  670,  675,  680,   61,  989,   61,  682,
       61,  989,  687,  683,  989,   61,  686,   61,   61,  677,
      684,   61,   61,   61,   61,  673,  678,  681,  685,   61,

      675,  680,   61,   61,   61,  682,   61,   61,  687,  683,
       61,  688,  686,   61,   61,  689,  684,   61,   61,   61,
       61,   61,   61,   61,  685,   61,  690,   61,  691,   61,
      692,   61,   61,   61,  693,   61,   61,  688,   61,   61,
       61,  689,   61,  708,  694,  989,   61,   61,   61,   61,
      989,  989,  690,   61,  691,  989,  692,   61,   61,   61,
      693,   61,   61,  989,   61,   61,   61,  989,   61,  708,
      694,  255,   61,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  542,   61,  989,   61,  989,  989,   61,  255,
      989,  699,  699,  699,  699,  699,  699,  699,  699,  699,

      658,  713,  700,  700,  700,  700,  700,  700,  989,   61,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  989,
      989,  989,  989,  989,  989,  989,  715,  713,  700,  700,
      700,  700,  700,  700,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  710,   61,  702,  702,  702,  702,  702,
      702,  989,  715,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  989,  989,  989,  989,  989,  989,  989,  710,
       61,  702,  702,  702,  702,  702,  702,  189,  989,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  609,  712,
      704,  704,  704,  704,  704,  704,  989,   61,  707,  707,

      707,  707,  707,  707,  707,  707,  707,  989,  989,  989,
      989,  989,  989,  989,  989,  712,  704,  704,  704,  704,
      704,  704,  189,   61,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  706,  714,  707,  707,  707,  707,  707,
      707,  709,  711,  716,  717,   61,  718,   61,  719,   61,
       61,  721,   61,   61,   61,  720,   61,   61,  989,  989,
      714,  707,  707,  707,  707,  707,  707,  709,  711,  716,
      717,   61,  718,   61,  719,   61,   61,  722,   61,   61,
       61,  720,   61,   61,   61,   61,  723,  724,  731,  725,
      726,  727,  729,   61,  728,   61,   61,  744,   61,  730,

       61,   61,   61,  722,   61,   61,   61,   61,   61,   61,
       61,   61,  723,  724,  731,  725,  726,  727,  729,   61,
      728,   61,   61,  744,   61,  730,   61,   61,   61,  989,
       61,   61,   61,   61,   61,   61,  255,  989,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  658,  749,  736,
      736,  736,  736,  736,  736,  989,   61,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  989,  989,  989,  989,
      989,  989,  989,  989,  749,  736,  736,  736,  736,  736,
      736,  255,   61,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  738,  748,  739,  739,  739,  739,  739,  739,

      989,   61,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  989,  989,   61,  989,  989,  989,  989,  989,  748,
      739,  739,  739,  739,  739,  739,  189,   61,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  609,  189,   61,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  706,
      989,  741,  741,  741,  741,  741,  741,  989,  989,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  989,  989,
      989,  989,  989,  989,   61,  989,  745,  741,  741,  741,
      741,  741,  741,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  746,  747,  743,  743,  743,  743,  743,  743,

       61,  750,  745,  751,  752,   61,   61,   61,   61,   61,
      989,  755,   61,   61,  758,  989,  989,   61,  746,  747,
      743,  743,  743,  743,  743,  743,  756,  750,   61,  751,
      752,   61,   61,   61,   61,   61,  753,  755,   61,   61,
      757,  759,  754,   61,   61,  761,   61,  775,   61,  760,
       61,   61,  756,   61,   61,   61,   61,   61,  989,   61,
      989,  989,  753,  989,  989,  989,  757,  759,  754,  989,
       61,  761,   61,  775,   61,  760,   61,   61,  989,   61,
      989,   61,   61,   61,  255,   61,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  658,  255,  989,  766,  766,

      766,  766,  766,  766,  766,  766,  766,  738,   61,  767,
      767,  767,  767,  767,  767,  989,  989,  767,  767,  767,
      767,  767,  767,  767,  767,  767,  989,  989,  989,  989,
      989,  989,  989,  812,   61,  767,  767,  767,  767,  767,
      767,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      780,   61,  769,  769,  769,  769,  769,  769,  989,   61,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  989,
       61,  989,  989,  989,  989,  989,  780,   61,  769,  769,
      769,  769,  769,  769,  189,   61,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  706,   61,  771,  771,  771,

      771,  771,  771,  989,   61,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  989,  776,  781,  989,  989,  989,
      989,  989,   61,  771,  771,  771,  771,  771,  771,  189,
       61,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      773,  776,  774,  774,  774,  774,  774,  774,   61,  777,
       61,  778,   61,   61,  783,  784,  786,  782,   61,  785,
      989,   61,   61,  787,   61,  989,  989,   61,  774,  774,
      774,  774,  774,  774,   61,  777,   61,  778,   61,   61,
      783,  784,  786,  782,   61,  785,  789,   61,   61,  787,
       61,   61,  788,   61,   61,  805,  809,  835,   61,  803,

       61,  989,   61,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  789,  989,  989,   61,  989,   61,  788,  989,
       61,  805,  809,  835,   61,  803,  804,  989,   61,  255,
      989,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      738,   61,  795,  795,  795,  795,  795,  795,  989,  836,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  989,
       61,  989,  989,  989,  989,  989,  989,  989,  795,  795,
      795,  795,  795,  795,  255,  836,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  797,   61,  798,  798,  798,
      798,  798,  798,  189,   61,  403,  403,  403,  403,  403,

      403,  403,  403,  403,  706,   61,  989,  989,  989,  989,
      989,  989,  989,  798,  798,  798,  798,  798,  798,  189,
       61,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      773,   61,  800,  800,  800,  800,  800,  800,  989,  989,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  989,
      989,  989,  989,  989,  989,  864,  865,  806,  800,  800,
      800,  800,  800,  800,  801,  801,  801,  801,  801,  801,
      801,  801,  801,   61,  807,  802,  802,  802,  802,  802,
      802,  864,  865,  806,  989,  989,  816,  989,  813,   61,
      808,  810,  839,  832,  814,  815,   61,   61,   61,   61,

      807,  802,  802,  802,  802,  802,  802,  811,   61,   61,
       61,   61,  816,  817,  813,   61,  808,  810,  839,  832,
      814,  815,   61,   61,   61,   61,  989,   61,  989,  989,
      834,  989,  989,  811,   61,   61,   61,   61,  255,  817,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  738,
      989,   61,  255,   61,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  797,   61,  824,  824,  824,  824,  824,
      824,  989,  989,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  989,  989,  870,  989,  989,  989,  989,  989,
       61,  824,  824,  824,  824,  824,  824,  825,  825,  825,

      825,  825,  825,  825,  825,  825,  838,   61,  826,  826,
      826,  826,  826,  826,  989,   61,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  989,   61,  989,  989,  989,
      989,  989,  838,   61,  826,  826,  826,  826,  826,  826,
      189,   61,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  773,   61,  828,  828,  828,  828,  828,  828,  989,
      989,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      989,  833,  989,  989,  989,  989,  989,  989,  989,  828,
      828,  828,  828,  828,  828,  189,   61,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  830,  833,  831,  831,

      831,  831,  831,  831,  837,  840,  841,  842,  844,  843,
       61,  846,   61,   61,  845,  885,  867,  859,  860,   61,
       61,  872,   61,   61,  831,  831,  831,  831,  831,  831,
      837,   61,   61,   61,  844,   61,   61,  846,  989,   61,
      845,  885,  867,  859,  860,   61,   61,  872,   61,   61,
      989,  989,  989,  868,  989,  989,  869,   61,   61,   61,
      989,   61,  255,  989,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  797,  889,  853,  853,  853,  853,  853,
      853,  989,   61,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  890,  989,  989,  989,  989,  871,  989,  989,

      889,  853,  853,  853,  853,  853,  853,  255,   61,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  890,  866,
      855,  855,  855,  855,  855,  855,  989,   61,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  989,  989,   61,
      989,  989,  989,  989,  989,  866,  855,  855,  855,  855,
      855,  855,  189,   61,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  773,  189,   61,  856,  856,  856,  856,
      856,  856,  856,  856,  856,  830,  989,  857,  857,  857,
      857,  857,  857,  989,  873,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  886,  874,  884,  861,   61,  891,

       61,   61,  896,  857,  857,  857,  857,  857,  857,  862,
      873,   61,   61,   61,   61,  989,  863,   61,  989,  910,
      886,  874,  884,  861,   61,  891,   61,   61,  989,  989,
      989,   61,  989,  989,  989,  862,  989,   61,   61,   61,
       61,  893,  863,   61,  255,  910,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  797,  255,   61,  879,  879,
      879,  879,  879,  879,  879,  879,  879,   61,   61,  880,
      880,  880,  880,  880,  880,  989,   61,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  989,  989,  989,  989,
      989,  989,  989,   61,   61,  880,  880,  880,  880,  880,

      880,  189,   61,  881,  881,  881,  881,  881,  881,  881,
      881,  881,  830,  894,  882,  882,  882,  882,  882,  882,
      989,  892,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  887,  895,  989,  906,  989,   61,  888,   61,   61,
      882,  882,  882,  882,  882,  882,  905,  892,  897,   61,
       61,   61,   61,   61,   61,   61,  908,  887,  907,   61,
      906,   61,   61,  888,   61,   61,  989,  989,  989,  989,
      989,   61,  905,  989,  897,   61,   61,   61,   61,   61,
       61,   61,  908,  989,  907,   61,  255,   61,  902,  902,
      902,  902,  902,  902,  902,  902,  902,   61,  909,  903,

      903,  903,  903,  903,  903,  989,   61,  903,  903,  903,
      903,  903,  903,  903,  903,  903,  989,  912,  989,   61,
      989,  989,  989,  989,  909,  903,  903,  903,  903,  903,
      903,  189,   61,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  830,  912,  919,   61,  911,  911,  920,  911,
      911,  911,  911,  911,  911,  918,  255,  911,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  911,  911,  921,
      938,   61,  923,  924,  932,  926,  927,  989,   61,   61,
      989,  918,   61,  989,  989,   61,  989,  989,  989,  989,
      989,  989,   61,  989,  989,  921,  938,   61,  923,  924,

      932,  926,  927,  933,   61,   61,  936,  937,   61,  922,
      922,   61,  922,  922,  922,  922,  922,  922,   61,  934,
      922,   61,  935,  939,   61,  940,  941,  943,   61,  933,
      922,  922,  936,  937,   61,  942,  947,   61,  948,  950,
      949,  951,   61,  952,   61,  934,   61,   61,  935,  939,
       61,  940,  941,  943,   61,   61,  953,  954,  956,   61,
       61,  942,  947,   61,  948,  950,  949,  951,   61,  952,
       61,  955,   61,   61,   61,  963,   61,   61,   61,  961,
      964,   61,  953,  954,  956,   61,   61,  962,  965,   61,
       61,  966,   61,  989,  972,   61,   61,  955,  973,   61,

       61,  963,   61,   61,   61,  961,  964,  967,  974,   61,
       61,   61,   61,  962,  965,   61,   61,  966,   61,  971,
      972,   61,   61,  979,  973,   61,   61,   61,   61,   61,
      989,  989,  989,  967,  974,   61,   61,   61,  989,  989,
      989,  989,  989,  989,  989,  971,  989,  989,  989,  979,
      989,   61,   61,   61,   61,   61,   41,   41,   41,   41,
       43,   43,   43,   43,   47,   47,   47,   47,   49,  989,
       49,   49,   50,   50,   50,   50,  117,  989,  117,  117,
      121,  121,  184,  184,  185,  185,  252,  252,  253,  253,
      254,  254,  323,  323,  324,  324,  393,  393,  394,  394,

      395,  395,  419,  989,  419,  419,  462,  462,  463,  463,
      464,  464,  536,  536,  537,  537,  597,  597,  598,  598,
      599,  599,  652,  652,  653,  653,  654,  654,  536,  536,
      696,  696,  697,  697,  732,  732,  733,  733,  734,  734,
      762,  762,  763,  763,  764,  764,  653,  653,  791,  791,
      792,  792,  818,  818,  819,  819,  820,  820,  847,  847,
      848,  848,  850,  850,  733,  733,  876,  876,  877,  877,
      898,  898,  899,  899,  900,  900,  911,  989,  911,  911,
      913,  989,  913,  913,  914,  914,  915,  915,  922,  989,
      922,  922,  925,  989,  925,  925,  791,  791,  929,  929,

      930,  930,  944,  944,  945,  945,  957,  957,  958,  958,
      959,  959,  848,  848,  969,  969,  975,  975,  976,  976,
      977,  977,  981,  981,  984,  984,  985,  985,  987,  987,
      988,  988,    7,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,

      989,  989,  989,  989,  989,  989,  989,  989
    } ;

static yyconst flex_int16_t yy_chk[5809] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   10,   10,   11,   11,   15,
       17,   27, 1078,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   24,   16,   16,   16,   16,   16,

       16,   28,   16,   37,   61,   24,   17,   27,   24,   28,
       37,   63,   30,   44,   44,   64,   28,   24,   16, 1074,
       24,   16,   16,   16,   16,   16,   16,   28,   16,   37,
       61,   24,   30, 1072,   24,   28,   37,   63,   30,   45,
       45,   64,   28,   24,   16,   20,   20, 1068,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   30,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   21,   21,   32,   21,   32, 1062,   39,   32, 1054,
       21, 1053,   21,   39,   46,   46, 1048,   65, 1044,   21,
     1043,   25, 1039, 1035,  997,  988,   40,   21,   21,   32,
       21,   32,   25,   39,   32,   25,   21,   25,   21,   39,
      987,   66,   40,   65,   29,   21,   22,   25,   22,   22,
       29,   22,   40,   69,   69,   67,   29,   22,   25,   22,
       22,   25,  985,   25,   67,  984,   22,   66,   40,  983,
       29,  982,   22,  981,   22,   22,   29,   22,  980,   69,
       69,   67,   29,   22,   31,   22,   22,  977,   31,   70,

       67,   33,   22,   23,   31,   68,   23,   23,   70,   31,
       31,   23,   33,   71,   23,   33,   23,   23,   33,   74,
       31,   75,   68,   23,   31,   70,  976,   33,  970,   23,
       31,   68,   23,   23,   70,   31,   31,   23,   33,   71,
       23,   33,   23,   23,   33,   74,  969,   75,   68,   23,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       81,   26,   26,   26,   26,   26,   26,  968,   26,   91,
       79,  959,   26,  958,  957,   26,  946,  945,   73,   34,
       38,   26,   79,   34,   38,   73,   81,   26,   26,   26,
       26,   26,   26,   34,   26,   91,   79,   35,   26,   34,

       38,   26,   35,   35,   73,   34,   38,   26,   79,   34,
       38,   73,   36,   36,   35,   35,  944,   76,   77,   34,
       77,   83,   36,   35,   78,   34,   38,  930,   35,   35,
       36,   76,   78,   80,   88,   88,   82,   83,   80,   36,
       35,   35,   36,   76,   77,  929,   77,   83,   36,  928,
       78,  916,  915,   82,  914,  900,   36,   76,   78,   80,
       88,   88,   82,   83,   80,   36,  899,  898,   36,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   82,
       54,   54,   54,   54,   54,   54,  882,   54,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   86,   94,  878,

      877,  876,  875,  853,  850,  100,   54,   54,   54,   54,
       54,   54,   86,   54,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   86,   94,   59,   59,   59,   59,   59,
       59,  100,  848,  847,  828,  822,  821,  820,   86,  819,
      818,  795,  792,  791,  790,  771,  765,   95,   90,  764,
       90,   59,   59,   59,   59,   59,   59,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   84,   62,   62,
       62,   62,   62,   62,   90,   62,   90,  763,  762,  749,
       92,   95,   72,  736,   85,   92,   87,   84,   62,   85,
       72,  734,  733,   84,   62,   62,   62,   62,   62,   62,

       87,   62,   72,   85,   85,   89,   92,   95,   72,   97,
       85,   92,   87,   84,   62,   85,   72,   89,   93,   93,
       89,   96,  102,  108,  106,   97,   87,   96,   72,   85,
       85,   89,   98,  101,  103,   97,  101,   98,   99,  103,
       99,   99,  102,   89,   93,   93,   89,   96,  102,   99,
      106,   97,  104,   96,  105,  107,  110,  108,   98,  101,
      103,  112,  101,   98,   99,  103,   99,   99,  102,  104,
      112,  109,  104,  105,  111,   99,  127,  113,  104,  109,
      105,  107,  110,  108,  113,  114,  111,  112,  114,  115,
      128,  115,  732,  704,  698,  104,  112,  109,  104,  105,

      111,  697,  127,  113,  696,  109,  695,  656,  654,  131,
      113,  114,  111,  653,  114,  115,  128,  115,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  134,  118,
      118,  118,  118,  118,  118,  131,  118,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  137,  137,  652,  607,
      600,  599,  598,  597,  134,  118,  118,  118,  118,  118,
      118,  540,  118,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  137,  137,  122,  122,  122,  122,  122,  122,
      125,  181,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  537,  146,  536,  535,  474,  465,  464,  463,  146,

      122,  122,  122,  122,  122,  122,  124,  181,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  146,  124,
      124,  124,  124,  124,  124,  146,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  462,  124,  124,  124,  124,  124,
      124,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  132,  126,  126,  126,  126,  126,  126,  129,  130,
      133,  129,  398,  395,  132,  130,  135,  138,  135,  138,
      133,  139,  136,  140,  141,  139,  394,  132,  126,  126,
      126,  126,  126,  126,  129,  130,  133,  129,  136,  140,

      132,  130,  135,  138,  135,  138,  133,  139,  136,  140,
      142,  139,  143,  393,  145,  144,  145,  147,  141,  147,
      333,  148,  150,  325,  136,  140,  324,  323,  149,  143,
      142,  144,  153,  151,  150,  152,  142,  158,  143,  148,
      145,  144,  145,  147,  141,  147,  149,  148,  150,  151,
      154,  152,  159,  155,  149,  143,  142,  144,  322,  151,
      150,  152,  156,  156,  159,  148,  153,  155,  154,  157,
      157,  158,  149,  160,  161,  151,  154,  152,  159,  155,
      162,  264,  160,  161,  163,  164,  160,  165,  156,  156,
      159,  160,  153,  155,  154,  162,  163,  158,  170,  160,

      161,  164,  167,  167,  157,  254,  162,  165,  160,  161,
      163,  164,  160,  165,  166,  169,  253,  160,  169,  168,
      166,  162,  163,  171,  171,  172,  175,  164,  167,  167,
      157,  168,  170,  165,  173,  174,  173,  172,  176,  252,
      166,  169,  175,  178,  169,  168,  166,  177,  194,  171,
      171,  172,  175,  174,  176,  178,  180,  168,  170,  179,
      173,  174,  173,  172,  176,  177,  180,  196,  175,  178,
      197,  200,  197,  177,  194,  205,  179,  251,  223,  174,
      176,  178,  180,  186,  185,  179,  184,  200,  121,  119,
       55,  177,  180,  196,   51,   50,  197,  200,  197,   47,

      198,  205,  179,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  200,  182,  182,  182,  182,  182,  182,
      188,  182,  188,  188,  188,  188,  188,  188,  188,  188,
      188,   42,   19,   18,  198,   14,   12,    7,    4,    3,
      182,  182,  182,  182,  182,  182,    0,  182,  187,    0,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      198,  187,  187,  187,  187,  187,  187,  192,  209,  192,
      192,  192,  192,  192,  192,  192,  192,  192,    0,  202,
        0,    0,    0,    0,    0,    0,  202,  187,  187,  187,
      187,  187,  187,  190,  209,  190,  190,  190,  190,  190,

      190,  190,  190,  190,  190,  202,  190,  190,  190,  190,
      190,  190,  202,  195,  199,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,    0,    0,    0,    0,  215,
      215,  195,  190,  190,  190,  190,  190,  190,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  195,  199,  191,
      191,  191,  191,  191,  191,  215,  215,  195,    0,    0,
        0,    0,    0,    0,    0,  204,    0,    0,    0,    0,
        0,    0,    0,  195,  199,  191,  191,  191,  191,  191,
      191,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      203,    0,  193,  193,  193,  193,  193,  193,  201,  204,

      201,  206,  207,  206,  207,  208,  210,  212,  222,  210,
      203,  213,    0,  213,    0,    0,  203,  208,  193,  193,
      193,  193,  193,  193,  201,  204,  201,  206,  207,  206,
      207,  208,  210,  211,  214,  210,  203,  213,  216,  213,
      220,  212,  222,  208,  217,  216,    0,  217,  221,  211,
      214,  218,  218,  220,    0,    0,    0,    0,    0,  211,
      214,  221,    0,  225,  216,  225,  220,  212,  222,  224,
      217,  216,  219,  217,  221,  211,  214,  218,  218,  220,
      228,  219,  219,  219,  224,  230,  224,  221,  226,  225,
      219,  225,  227,  229,  226,  224,  228,  231,  219,  229,

      232,  227,    0,  233,  235,  235,  228,  219,  219,  219,
      224,  230,  224,  231,  226,  244,  219,  232,  227,  229,
      226,  233,  228,  231,  234,  229,  232,  227,  234,  233,
      235,  235,  236,  237,  241,  238,  240,  243,  237,  231,
      239,  241,  245,  232,  242,  242,  243,  233,  236,  244,
      234,  238,  240,  246,  234,  239,  249,  239,  236,  237,
      241,  238,  240,  243,  237,  247,  239,  241,  245,  268,
      242,  242,  243,  246,  236,  244,  274,  238,  240,  246,
      248,  239,  247,  239,  265,  265,  248,  267,  274,  267,
      249,  247,    0,    0,    0,  268,    0,    0,    0,  246,

        0,  280,  274,    0,  271,    0,  248,    0,  247,    0,
      265,  265,  248,  267,  274,  267,  249,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  256,  280,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  271,  256,
      256,  256,  256,  256,  256,  258,    0,  258,  258,  258,
      258,  258,  258,  258,  258,  258,    0,    0,    0,    0,
        0,    0,    0,    0,  271,  256,  256,  256,  256,  256,
      256,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      270,  306,  257,  257,  257,  257,  257,  257,  259,  270,
      259,  259,  259,  259,  259,  259,  259,  259,  259,    0,

      272,    0,    0,    0,    0,    0,  270,  306,  257,  257,
      257,  257,  257,  257,  260,  270,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  293,  260,  260,  260,
      260,  260,  260,  261,  272,  261,  261,  261,  261,  261,
      261,  261,  261,  261,    0,  293,    0,    0,    0,    0,
        0,    0,  293,  260,  260,  260,  260,  260,  260,  262,
      272,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  293,  262,  262,  262,  262,  262,  262,  263,    0,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  266,
      273,  273,  276,  276,  266,  269,  269,  269,  262,  262,

      262,  262,  262,  262,  275,  269,  278,  282,  275,  275,
      277,  281,  279,  278,  283,  266,  273,  273,  276,  276,
      266,  269,  269,  269,  279,  286,  277,  292,  281,    0,
      275,  269,  278,  284,  275,  275,  277,  281,  279,  278,
      286,  282,  289,  285,  287,  284,    0,  288,  283,  294,
      279,  286,  277,  288,  281,  285,  287,  290,  289,  284,
      291,  292,  294,  290,    0,    0,  286,  282,  289,  285,
      287,  284,  296,  288,  283,  294,  295,  297,  296,  288,
      291,  285,  287,  290,  289,  298,  291,  292,  294,  290,
      299,  295,  300,  297,  304,  305,  305,  299,  296,  302,

      301,  298,  295,  297,  296,  302,  291,  301,  307,  308,
      303,  298,  300,  303,  309,  309,  299,  295,  300,  297,
      310,  305,  305,  299,  307,  302,  301,  298,  304,  312,
      314,  302,  319,  301,  307,  308,  303,  311,  300,  303,
      309,  309,  313,  311,  314,  312,  310,  316,  317,  315,
      307,  313,  315,  317,  304,  312,  314,  318,  320,  318,
      338,  320,  348,  311,  321,  348,  319,  316,  313,  311,
      314,  312,    0,  316,  317,  315,    0,  313,  315,  317,
      338,  321,    0,  318,  320,  318,  338,  320,  348,    0,
      321,  348,  319,  316,  326,    0,  326,  326,  326,  326,

      326,  326,  326,  326,  326,    0,  338,  321,  327,    0,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
        0,  327,  327,  327,  327,  327,  327,  328,  352,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  327,  327,  327,
      327,  327,  327,  329,  352,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  368,  329,  329,  329,  329,
      329,  329,  330,  341,  330,  330,  330,  330,  330,  330,
      330,  330,  330,    0,    0,  341,    0,    0,  337,    0,
        0,  368,  329,  329,  329,  329,  329,  329,  332,  341,

      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      334,  341,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  337,  334,  334,  334,  334,  334,  334,  336,
        0,  336,  336,  336,  336,  336,  336,  336,  336,  336,
        0,    0,    0,    0,    0,  350,    0,    0,  337,  334,
      334,  334,  334,  334,  334,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  340,  342,  335,  335,  335,  335,
      335,  335,  339,  343,  339,  344,  345,  344,  347,  350,
      340,  342,  369,  351,  345,  347,  351,    0,    0,  343,
      340,  342,  335,  335,  335,  335,  335,  335,  339,  343,

      339,  344,  345,  344,  347,  350,  340,  342,  369,  351,
      345,  347,  351,  354,  349,  343,  346,  346,    0,  346,
      346,  346,  346,  346,  346,  346,  349,  346,  353,  359,
      354,  357,  357,  355,  356,    0,  353,  346,  346,  354,
      349,  355,  356,  358,  358,  360,    0,  362,  362,  359,
        0,    0,  349,  360,  353,  359,  354,  357,  357,  355,
      356,  363,  353,  361,  373,  365,    0,  355,  356,  358,
      358,  360,  361,  362,  362,  359,  364,  365,  363,  360,
      366,  374,  367,  374,  364,  370,  366,  363,  367,  361,
      373,  365,  371,  370,  372,  371,  376,  372,  361,  375,

      377,  379,  364,  365,  363,  376,  366,  374,  367,  374,
      364,  370,  366,  375,  367,  378,  377,  380,  371,  370,
      372,  371,  376,  372,  381,  375,  377,  383,  382,  384,
      383,  376,  385,  378,  386,  379,  382,  388,  387,  375,
      387,  378,  377,  388,  391,  384,  386,  389,  389,  417,
      381,  380,    0,  383,  382,  384,  383,    0,  385,  378,
      386,  379,  382,  388,  387,  420,  387,  390,  392,  388,
      440,  384,  386,  389,  389,  417,  390,  380,  391,    0,
      392,  396,  396,  396,  396,  396,  396,  396,  396,  396,
        0,  420,  441,  390,  392,  410,  440,    0,    0,    0,

        0,    0,  390,    0,  391,  397,  392,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  399,  441,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  410,
      399,  399,  399,  399,  399,  399,  401,    0,  401,  401,
      401,  401,  401,  401,  401,  401,  401,    0,    0,    0,
        0,    0,    0,    0,  447,  410,  399,  399,  399,  399,
      399,  399,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  413,  413,  400,  400,  400,  400,  400,  400,  402,
      447,  402,  402,  402,  402,  402,  402,  402,  402,  402,
        0,  458,    0,    0,    0,    0,    0,  413,  413,  400,

      400,  400,  400,  400,  400,  403,    0,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  404,  458,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  422,  404,
      404,  404,  404,  404,  404,  405,  422,  405,  405,  405,
      405,  405,  405,  405,  405,  405,    0,  489,    0,    0,
        0,    0,    0,    0,  422,  404,  404,  404,  404,  404,
      404,  406,  422,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  489,  406,  406,  406,  406,  406,  406,
      407,    0,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  409,  411,  412,  409,  504,  411,    0,  415,    0,

      406,  406,  406,  406,  406,  406,  408,  414,  412,  408,
      415,  416,    0,  419,  419,  408,    0,  409,  411,  412,
      409,  504,  411,  421,  415,  424,  424,  414,  418,  421,
        0,  416,  408,  414,  412,  408,  415,  416,  418,  419,
      419,  408,  427,  425,  506,  428,  418,  418,  427,  421,
      423,  424,  424,  414,  418,  421,  423,  416,  423,  425,
      426,  429,  430,  423,  418,  428,    0,  426,  427,  425,
      506,  428,  418,  418,  427,  433,  423,  429,  430,  431,
      432,  433,  423,  434,  423,  425,  426,  429,  430,  423,
      439,  428,  435,  426,  436,  439,  432,  431,  437,  434,

        0,  433,    0,  429,  430,  431,  432,  433,  435,  434,
      436,  438,  442,  437,  438,  445,  439,  445,  435,    0,
      436,  439,  432,  431,  437,  434,  443,  443,  444,  444,
      446,  446,  442,    0,  435,  451,  436,  438,  442,  437,
      438,  445,  449,  445,  450,  452,    0,  451,  449,  448,
      453,  453,  443,  443,  444,  444,  446,  446,  442,  448,
      483,  451,  450,    0,    0,  452,  448,  454,  449,  454,
      450,  452,  455,  451,  449,  448,  453,  453,  456,  455,
      456,  460,  457,  460,  459,  448,  509,  461,  450,  457,
      461,  452,  448,  454,  483,  454,  459,    0,  455,    0,

        0,    0,    0,    0,  456,  455,  456,  460,  457,  460,
      459,    0,  509,  461,    0,  457,  461,    0,  510,    0,
      483,  466,  459,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  467,    0,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  468,  510,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,    0,  468,  468,  468,  468,
      468,  468,  469,  511,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  468,  468,  468,  468,  468,  468,  470,  511,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,

      481,  470,  470,  470,  470,  470,  470,  471,  513,  471,
      471,  471,  471,  471,  471,  471,  471,  471,    0,    0,
      481,    0,    0,    0,    0,    0,  481,  470,  470,  470,
      470,  470,  470,  473,  513,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  473,  475,  481,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,    0,  475,  475,
      475,  475,  475,  475,  477,    0,  477,  477,  477,  477,
      477,  477,  477,  477,  477,    0,    0,    0,    0,    0,
        0,    0,    0,  478,  475,  475,  475,  475,  475,  475,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  478,

      479,  476,  476,  476,  476,  476,  476,  479,  480,  478,
      482,    0,  486,  487,  486,  480,    0,  488,  487,  482,
      488,  484,  485,    0,    0,  478,  479,  476,  476,  476,
      476,  476,  476,  479,  480,  485,  482,  484,  486,  487,
      486,  480,  490,  488,  487,  482,  488,  484,  485,  491,
      492,  490,  493,  493,  494,  498,  495,  501,  497,  496,
      500,  485,  500,  484,  495,  496,  492,  497,  490,  491,
      494,  498,  503,  505,  501,  491,  492,  490,  493,  493,
      494,  498,  495,  501,  497,  496,  500,  499,  500,  505,
      495,  496,  492,  497,  499,  491,  494,  498,  502,  505,

      501,  502,  507,  508,  514,  507,  503,  512,  515,  512,
      516,  521,  508,  499,  519,  505,    0,    0,  523,    0,
      499,  517,  516,  518,  502,  522,  523,  502,  507,  508,
      514,  507,  503,  512,  515,  512,  516,  517,  508,  518,
      519,  520,  525,  522,  523,  521,  524,  517,  516,  518,
      526,  522,  523,  530,  520,  524,  528,  527,  528,  525,
      529,  531,  526,  517,    0,  518,  534,  520,  525,  522,
      560,  521,  524,  527,  529,  532,  526,  531,    0,  530,
      520,  524,  528,  527,  528,  525,  529,  531,  526,  533,
      532,  577,  534,    0,  533,    0,  560,    0,    0,  527,

      529,  532,    0,  531,  538,  538,  538,  538,  538,  538,
      538,  538,  538,    0,    0,  533,  532,  577,    0,  539,
      533,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  541,    0,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,    0,  541,  541,  541,  541,  541,  541,
      543,    0,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      541,  541,  541,  541,  541,  541,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  549,  552,  542,  542,  542,
      542,  542,  542,  546,  552,  546,  546,  546,  546,  546,

      546,  546,  546,  546,    0,  549,    0,    0,    0,    0,
        0,  549,  552,  542,  542,  542,  542,  542,  542,  545,
      552,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  549,  545,  545,  545,  545,  545,  545,  548,  578,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  545,  545,
      545,  545,  545,  545,  547,  578,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  550,  547,  547,  547,
      547,  547,  547,  551,  553,  550,  554,  555,  555,    0,
      559,  556,    0,  551,    0,  554,  553,  556,    0,  557,

      558,    0,  550,  547,  547,  547,  547,  547,  547,  551,
      553,  550,  554,  555,  555,  557,  558,  556,  561,  551,
      566,  554,  553,  556,  559,  557,  558,  562,  563,  567,
      562,  564,  568,  565,    0,  563,  567,  564,  561,  565,
      566,  557,  558,  571,  561,  569,  566,  573,  569,  575,
      559,    0,  568,  562,  563,  567,  562,  564,  568,  565,
      572,  563,  567,  564,  561,  565,  566,  570,  570,  579,
      580,  569,  574,  576,  569,  576,  572,  571,  568,  584,
      574,  573,  581,  575,  582,  583,  572,  582,  583,  581,
        0,  585,  589,  570,  570,  579,  580,  592,  574,  576,

      585,  576,  572,  571,  586,  584,  574,  573,  581,  575,
      582,  583,  593,  582,  583,  581,  587,  585,  589,  588,
      586,  590,  591,  592,  587,  591,  585,  594,  590,  620,
      586,  588,  611,  595,  611,    0,  596,    0,  593,    0,
        0,    0,  587,    0,    0,  588,  586,  590,  591,  595,
      587,  591,  596,  594,  590,  620,    0,  588,  611,  595,
      611,  603,  596,  603,  603,  603,  603,  603,  603,  603,
      603,  603,    0,  622,    0,  595,  624,    0,  596,  602,
        0,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  627,  602,  602,  602,  602,  602,  602,  605,  622,

      605,  605,  605,  605,  605,  605,  605,  605,  605,    0,
      624,    0,    0,    0,    0,    0,    0,  627,  602,  602,
      602,  602,  602,  602,  604,    0,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  624,  604,  604,  604,
      604,  604,  604,  606,  631,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  634,    0,    0,    0,    0,
        0,    0,    0,  604,  604,  604,  604,  604,  604,  608,
      631,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  634,  608,  608,  608,  608,  608,  608,  610,    0,
      610,  610,  610,  610,  610,  610,  610,  610,  610,    0,

        0,    0,    0,    0,    0,    0,    0,  616,  608,  608,
      608,  608,  608,  608,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  616,  618,  609,  609,  609,  609,  609,
      609,  612,  613,  616,  614,  612,  614,    0,  615,  613,
      615,  618,  619,    0,    0,    0,  619,  617,    0,  616,
      618,  609,  609,  609,  609,  609,  609,  612,  613,  617,
      614,  612,  614,  625,  615,  613,  615,  618,  619,  621,
      626,  629,  619,  617,  623,  628,  623,    0,  621,  630,
      625,    0,  637,  632,    0,  617,  636,  629,  626,  625,
      633,  630,  636,  628,  637,  621,  626,  629,  635,  638,

      623,  628,  623,  632,  621,  630,  625,  635,  637,  632,
      633,  639,  636,  629,  626,  640,  633,  630,  636,  628,
      637,  641,  642,  643,  635,  638,  644,  645,  646,  632,
      647,  648,  649,  635,  650,  650,  633,  639,  644,  665,
      646,  640,  667,  664,  651,    0,  647,  641,  642,  643,
        0,    0,  644,  645,  646,    0,  647,  648,  649,  664,
      650,  650,  651,    0,  644,  665,  646,    0,  667,  664,
      651,  655,  647,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  671,    0,  664,    0,    0,  651,  657,
        0,  657,  657,  657,  657,  657,  657,  657,  657,  657,

      657,  672,  657,  657,  657,  657,  657,  657,  659,  671,
      659,  659,  659,  659,  659,  659,  659,  659,  659,    0,
        0,    0,    0,    0,    0,    0,  674,  672,  657,  657,
      657,  657,  657,  657,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  668,  668,  658,  658,  658,  658,  658,
      658,  661,  674,  661,  661,  661,  661,  661,  661,  661,
      661,  661,    0,    0,    0,    0,    0,    0,    0,  668,
      668,  658,  658,  658,  658,  658,  658,  660,    0,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  670,
      660,  660,  660,  660,  660,  660,  663,  670,  663,  663,

      663,  663,  663,  663,  663,  663,  663,    0,    0,    0,
        0,    0,    0,    0,    0,  670,  660,  660,  660,  660,
      660,  660,  662,  670,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  673,  662,  662,  662,  662,  662,
      662,  666,  669,  675,  676,  675,  677,  666,  678,  669,
      673,  680,  677,  676,  678,  679,  679,  681,    0,    0,
      673,  662,  662,  662,  662,  662,  662,  666,  669,  675,
      676,  675,  677,  666,  678,  669,  673,  682,  677,  676,
      678,  679,  679,  681,  682,  680,  683,  684,  693,  685,
      686,  687,  691,  691,  690,  683,  694,  708,  710,  692,

      693,  708,  711,  682,  684,  685,  692,  686,  687,  690,
      682,  680,  683,  684,  693,  685,  686,  687,  691,  691,
      690,  683,  694,  708,  710,  692,  693,  708,  711,    0,
      684,  685,  692,  686,  687,  690,  699,    0,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  715,  699,
      699,  699,  699,  699,  699,  700,  716,  700,  700,  700,
      700,  700,  700,  700,  700,  700,    0,    0,    0,    0,
        0,    0,    0,    0,  715,  699,  699,  699,  699,  699,
      699,  701,  716,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  714,  701,  701,  701,  701,  701,  701,

      702,  720,  702,  702,  702,  702,  702,  702,  702,  702,
      702,    0,    0,  714,    0,    0,    0,    0,    0,  714,
      701,  701,  701,  701,  701,  701,  703,  720,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  705,  714,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
        0,  705,  705,  705,  705,  705,  705,  707,    0,  707,
      707,  707,  707,  707,  707,  707,  707,  707,    0,    0,
        0,    0,    0,    0,  709,    0,  709,  705,  705,  705,
      705,  705,  705,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  712,  713,  706,  706,  706,  706,  706,  706,

      709,  717,  709,  718,  719,  722,  718,  723,  712,  713,
        0,  724,  729,  719,  727,    0,    0,  717,  712,  713,
      706,  706,  706,  706,  706,  706,  725,  717,  724,  718,
      719,  722,  718,  723,  712,  713,  721,  724,  729,  719,
      726,  728,  721,  717,  721,  731,  725,  744,  727,  730,
      730,  746,  725,  731,  724,  752,  726,  728,    0,  757,
        0,    0,  721,    0,    0,    0,  726,  728,  721,    0,
      721,  731,  725,  744,  727,  730,  730,  746,    0,  731,
        0,  752,  726,  728,  735,  757,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  737,    0,  737,  737,

      737,  737,  737,  737,  737,  737,  737,  737,  788,  737,
      737,  737,  737,  737,  737,  739,    0,  739,  739,  739,
      739,  739,  739,  739,  739,  739,    0,    0,    0,    0,
        0,    0,    0,  782,  788,  737,  737,  737,  737,  737,
      737,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      750,  789,  738,  738,  738,  738,  738,  738,  741,  782,
      741,  741,  741,  741,  741,  741,  741,  741,  741,    0,
      750,    0,    0,    0,    0,    0,  750,  789,  738,  738,
      738,  738,  738,  738,  740,  782,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  750,  740,  740,  740,

      740,  740,  740,  743,  806,  743,  743,  743,  743,  743,
      743,  743,  743,  743,    0,  745,  751,    0,    0,    0,
        0,    0,  745,  740,  740,  740,  740,  740,  740,  742,
      806,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  745,  742,  742,  742,  742,  742,  742,  745,  747,
      751,  748,  747,  748,  754,  755,  758,  753,  755,  756,
        0,  756,  758,  759,  759,    0,    0,  754,  742,  742,
      742,  742,  742,  742,  753,  747,  751,  748,  747,  748,
      754,  755,  758,  753,  755,  756,  761,  756,  758,  759,
      759,  777,  760,  754,  760,  777,  780,  807,  780,  775,

      753,  767,  761,  767,  767,  767,  767,  767,  767,  767,
      767,  767,  761,    0,    0,  775,    0,  777,  760,    0,
      760,  777,  780,  807,  780,  775,  776,    0,  761,  766,
        0,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  775,  766,  766,  766,  766,  766,  766,  769,  808,
      769,  769,  769,  769,  769,  769,  769,  769,  769,    0,
      776,    0,    0,    0,    0,    0,    0,    0,  766,  766,
      766,  766,  766,  766,  768,  808,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  776,  768,  768,  768,
      768,  768,  768,  770,  812,  770,  770,  770,  770,  770,

      770,  770,  770,  770,  770,  815,    0,    0,    0,    0,
        0,    0,    0,  768,  768,  768,  768,  768,  768,  772,
      812,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  815,  772,  772,  772,  772,  772,  772,  774,    0,
      774,  774,  774,  774,  774,  774,  774,  774,  774,    0,
        0,    0,    0,    0,    0,  835,  836,  778,  772,  772,
      772,  772,  772,  772,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  778,  779,  773,  773,  773,  773,  773,
      773,  835,  836,  778,    0,    0,  786,    0,  783,  786,
      779,  781,  811,  803,  784,  785,  803,  811,  837,  778,

      779,  773,  773,  773,  773,  773,  773,  781,  783,  781,
      784,  785,  786,  787,  783,  786,  779,  781,  811,  803,
      784,  785,  803,  811,  837,  787,    0,  840,    0,    0,
      805,    0,    0,  781,  783,  781,  784,  785,  794,  787,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
        0,  787,  796,  840,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  805,  796,  796,  796,  796,  796,
      796,  798,    0,  798,  798,  798,  798,  798,  798,  798,
      798,  798,    0,    0,  842,    0,    0,    0,    0,    0,
      805,  796,  796,  796,  796,  796,  796,  797,  797,  797,

      797,  797,  797,  797,  797,  797,  810,  842,  797,  797,
      797,  797,  797,  797,  800,  810,  800,  800,  800,  800,
      800,  800,  800,  800,  800,    0,  859,    0,    0,    0,
        0,    0,  810,  842,  797,  797,  797,  797,  797,  797,
      799,  810,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  859,  799,  799,  799,  799,  799,  799,  802,
        0,  802,  802,  802,  802,  802,  802,  802,  802,  802,
        0,  804,    0,    0,    0,    0,    0,    0,    0,  799,
      799,  799,  799,  799,  799,  801,  804,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  804,  801,  801,

      801,  801,  801,  801,  809,  813,  813,  813,  814,  813,
      814,  817,  804,  832,  816,  861,  839,  832,  833,  817,
      809,  844,  833,  844,  801,  801,  801,  801,  801,  801,
      809,  816,  839,  861,  814,  813,  814,  817,    0,  832,
      816,  861,  839,  832,  833,  817,  809,  844,  833,  844,
        0,    0,    0,  841,    0,    0,  841,  816,  839,  861,
        0,  813,  823,    0,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  864,  823,  823,  823,  823,  823,
      823,  824,  841,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  865,    0,    0,    0,    0,  843,    0,    0,

      864,  823,  823,  823,  823,  823,  823,  825,  841,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  865,  838,
      825,  825,  825,  825,  825,  825,  826,  843,  826,  826,
      826,  826,  826,  826,  826,  826,  826,    0,    0,  838,
        0,    0,    0,    0,    0,  838,  825,  825,  825,  825,
      825,  825,  827,  843,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  829,  838,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,    0,  829,  829,  829,
      829,  829,  829,  831,  845,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  862,  846,  860,  834,  872,  866,

      845,  866,  871,  829,  829,  829,  829,  829,  829,  834,
      845,  846,  874,  860,  862,    0,  834,  834,    0,  889,
      862,  846,  860,  834,  872,  866,  845,  866,    0,    0,
        0,  871,    0,    0,    0,  834,    0,  846,  874,  860,
      862,  868,  834,  834,  852,  889,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  854,  871,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  893,  868,  854,
      854,  854,  854,  854,  854,  855,  894,  855,  855,  855,
      855,  855,  855,  855,  855,  855,    0,    0,    0,    0,
        0,    0,    0,  893,  868,  854,  854,  854,  854,  854,

      854,  856,  894,  856,  856,  856,  856,  856,  856,  856,
      856,  856,  856,  869,  856,  856,  856,  856,  856,  856,
      857,  867,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  863,  870,    0,  885,    0,  895,  863,  869,  867,
      856,  856,  856,  856,  856,  856,  884,  867,  873,  863,
      896,  873,  885,  884,  897,  886,  887,  863,  886,  870,
      885,  887,  895,  863,  869,  867,    0,    0,    0,    0,
        0,  905,  884,    0,  873,  863,  896,  873,  885,  884,
      897,  886,  887,    0,  886,  870,  879,  887,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  905,  888,  879,

      879,  879,  879,  879,  879,  880,  888,  880,  880,  880,
      880,  880,  880,  880,  880,  880,    0,  891,    0,  891,
        0,    0,    0,    0,  888,  879,  879,  879,  879,  879,
      879,  881,  888,  881,  881,  881,  881,  881,  881,  881,
      881,  881,  881,  891,  907,  891,  892,  892,  908,  892,
      892,  892,  892,  892,  892,  906,  902,  892,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  892,  892,  909,
      923,  906,  911,  911,  918,  913,  913,    0,  907,  918,
        0,  906,  908,    0,    0,  909,    0,    0,    0,    0,
        0,    0,  913,    0,    0,  909,  923,  906,  911,  911,

      918,  913,  913,  919,  907,  918,  922,  922,  908,  912,
      912,  909,  912,  912,  912,  912,  912,  912,  913,  920,
      912,  919,  921,  924,  920,  925,  925,  927,  921,  919,
      912,  912,  922,  922,  927,  926,  932,  932,  933,  935,
      934,  936,  925,  937,  933,  920,  934,  919,  921,  924,
      920,  925,  925,  927,  921,  926,  938,  940,  942,  942,
      927,  926,  932,  932,  933,  935,  934,  936,  925,  937,
      933,  941,  934,  943,  947,  950,  950,  940,  941,  948,
      951,  926,  938,  940,  942,  942,  948,  949,  953,  955,
      949,  954,  954,    0,  962,  962,  963,  941,  964,  943,

      947,  950,  950,  940,  941,  948,  951,  956,  966,  967,
      972,  974,  948,  949,  953,  955,  949,  954,  954,  961,
      962,  962,  963,  971,  964,  971,  961,  956,  966,  979,
        0,    0,    0,  956,  966,  967,  972,  974,    0,    0,
        0,    0,    0,    0,    0,  961,    0,    0,    0,  971,
        0,  971,  961,  956,  966,  979,  990,  990,  990,  990,
      991,  991,  991,  991,  992,  992,  992,  992,  993,    0,
      993,  993,  994,  994,  994,  994,  995,    0,  995,  995,
      996,  996,  998,  998,  999,  999, 1000, 1000, 1001, 1001,
     1002, 1002, 1003, 1003, 1004, 1004, 1005, 1005, 1006, 1006,

     1007, 1007, 1008,    0, 1008, 1008, 1009, 1009, 1010, 1010,
     1011, 1011, 1012, 1012, 1013, 1013, 1014, 1014, 1015, 1015,
     1016, 1016, 1017, 1017, 1018, 1018, 1019, 1019, 1020, 1020,
     1021, 1021, 1022, 1022, 1023, 1023, 1024, 1024, 1025, 1025,
     1026, 1026, 1027, 1027, 1028, 1028, 1029, 1029, 1030, 1030,
     1031, 1031, 1032, 1032, 1033, 1033, 1034, 1034, 1036, 1036,
     1037, 1037, 1038, 1038, 1040, 1040, 1041, 1041, 1042, 1042,
     1045, 1045, 1046, 1046, 1047, 1047, 1049,    0, 1049, 1049,
     1050,    0, 1050, 1050, 1051, 1051, 1052, 1052, 1055,    0,
     1055, 1055, 1056,    0, 1056, 1056, 1057, 1057, 1058, 1058,

     1059, 1059, 1060, 1060, 1061, 1061, 1063, 1063, 1064, 1064,
     1065, 1065, 1066, 1066, 1067, 1067, 1069, 1069, 1070, 1070,
     1071, 1071, 1073, 1073, 1075, 1075, 1076, 1076, 1077, 1077,
     1079, 1079,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,

      989,  989,  989,  989,  989,  989,  989,  989
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[120] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
        };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 2087 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 2197 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 990 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5733 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 59 "SrvLexer.l"
{ return SrvParser::LOGCOLORS_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 61 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 64 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 69 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::NEXT_HOP_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::ROUTE_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::INFINITE_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::ACCEPT_UNKNOWN_FQDN_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::FQDN_DDNS_ADDRESS_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::DDNS_PROTOCOL_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::DDNS_TIMEOUT_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 108 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::SCRIPT_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::REMOTE_AUTOCONF_NEIGHBORS_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::AFTR_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ return SrvParser::BULKLQ_ACCEPT_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ return SrvParser::BULKLQ_TCPPORT_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ return SrvParser::BULKLQ_MAX_CONNS_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 122 "SrvLexer.l"
{ return SrvParser::BULKLQ_TIMEOUT_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 125 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 126 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 130 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 131 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 134 "SrvLexer.l"
{ return SrvParser::CLIENT_CLASS_; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 135 "SrvLexer.l"
{ return SrvParser::MATCH_IF_; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 136 "SrvLexer.l"
{ return SrvParser::EQ_; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 137 "SrvLexer.l"
{ return SrvParser::AND_; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 138 "SrvLexer.l"
{ return SrvParser::OR_; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 139 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 140 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_DATA_; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 141 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_EN_; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 142 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_DATA_; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 143 "SrvLexer.l"
{ return SrvParser::ALLOW_; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 144 "SrvLexer.l"
{ return SrvParser::DENY_; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 145 "SrvLexer.l"
{ return SrvParser::SUBSTRING_; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 146 "SrvLexer.l"
{ return SrvParser::CONTAIN_; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 147 "SrvLexer.l"
{ return SrvParser::STRING_KEYWORD_; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 148 "SrvLexer.l"
{ return SrvParser::ADDRESS_LIST_; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 151 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 152 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 153 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 154 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 156 "SrvLexer.l"
;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 158 "SrvLexer.l"
;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 160 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 165 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 166 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 167 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 105:
YY_RULE_SETUP
#line 174 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 183 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 192 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 201 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 210 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 219 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 228 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 240 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 247 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
	 ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
	 ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 268 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
	yytext[1]='0'; //if odd then no-meaning zero at the beginning
	len = strlen(yytext)-1;
	ptr = yytext+1;
    } else {
	len = strlen(yytext)-2;
	ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
	yylval.duidval.duid[i>>1]<<=4;
	if (!isxdigit(ptr[i])) {
	     Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
	     YYABORT;
	}
	if (isalpha(ptr[i])) {
	    yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
	} else {
	    yylval.duidval.duid[i>>1]|=ptr[i]-'0';
	}
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 300 "SrvLexer.l"
{
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   // Log(Crit) << "#### Detected [" << yytext << "] as DUID [len=" << len << "]" << LogEnd;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
	x = (toupper(*pos)-'A' + 10);
      else
	x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))
	x += (toupper(*(pos+1))-'A' + 10);
      else
	x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }

   return SrvParser::DUID_;
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 328 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd;
      YYABORT;
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 338 "SrvLexer.l"
{
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) {
	Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd;
	YYABORT;
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 347 "SrvLexer.l"
{ return yytext[0]; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 350 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 3046 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 990 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 990 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 989);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 350 "SrvLexer.l"



