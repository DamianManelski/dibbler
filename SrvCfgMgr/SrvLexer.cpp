#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 66
#define YY_END_OF_BUFFER 67
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[584] =
    {   0,
        1,    1,    0,    0,    0,    0,   67,   65,    2,    1,
        1,   65,   48,   65,   65,   64,   64,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   52,   52,   66,    1,
        1,    1,    0,   60,   48,    0,   60,   50,   49,   64,
        0,    0,   63,    0,   57,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       45,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   15,   16,   61,   61,   61,   61,   61,   61,   61,
       51,   49,   64,    0,    0,   56,   62,   55,   55,   61,

       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       44,   64,    0,    0,    0,   54,   54,    0,   55,    0,
       55,   61,   61,   61,   61,   61,   61,   61,   61,   34,
       61,   61,   61,   61,    0,   61,   61,   61,   61,   61,
       61,   21,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   46,   61,   61,   61,   64,    0,    0,    0,    0,
       54,    0,   54,    0,   55,   55,   55,   55,   61,   61,
       61,    4,   61,   61,   61,   47,    3,   61,   61,   61,

       61,   61,    0,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,    7,   22,   61,   61,   61,   61,   61,
       61,   61,   61,    0,    0,    0,    0,   54,   54,   54,
       54,    0,   55,   55,   55,    0,   55,   61,   61,   61,
       61,   61,   29,   61,   61,   61,   61,   61,   61,    0,
        0,   61,   61,   61,   27,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,    0,
        0,    0,   54,   54,   54,    0,   54,    0,    0,   55,
       55,   55,   55,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,    0,    0,   61,   61,   61,   61,

       61,   43,   61,   61,   61,   61,   61,   61,   61,   61,
       19,   61,   61,    0,    0,    0,    0,    0,   54,   54,
       54,   54,    0,   55,   55,   55,    0,   55,   61,   61,
       61,   61,   61,   61,   61,   39,   61,   11,    9,    0,
        0,   61,   61,   61,   41,   61,   61,   61,   61,   61,
       61,   61,   61,    5,   61,   61,   12,    0,    0,    0,
       54,   54,   54,    0,   54,   59,   55,   55,   55,   55,
       61,   61,   61,   61,   61,   61,   61,   10,    0,    0,
       61,   61,   61,   42,   61,   61,   61,   61,   61,   61,
        6,   31,   61,    0,    0,    0,   58,   54,   54,   54,

       54,   55,   55,   55,    0,   55,   61,   40,   61,   61,
       28,   61,   61,    0,    0,   36,   35,   30,   61,   20,
       61,   61,   33,   32,   61,    0,    0,   54,   54,   54,
        0,   54,   55,   55,   55,   55,   13,   61,   61,   61,
       61,   38,   37,   61,   61,   61,   61,    0,    0,    0,
       54,   54,   54,   54,   55,   55,   55,    0,   55,   61,
       61,   61,    8,   61,   23,   61,   61,    0,    0,   54,
       54,   54,    0,   54,   55,   55,   55,   55,   61,   61,
       61,   61,   61,   61,    0,    0,    0,   54,   54,   54,
       54,   55,   55,   55,    0,   55,   61,   61,   61,   61,

       14,   18,    0,   53,   56,   54,   54,   54,    0,   54,
       55,   55,   55,   55,   25,   61,   24,   61,    0,   53,
        0,   54,   54,   54,   54,   54,   55,   55,   55,    0,
       55,   26,   61,   53,   56,   54,    0,   54,   54,   54,
       54,   55,   55,   55,   17,   53,   54,   54,   54,   54,
       55,   55,   55,   54,   54,    0,   54,   54,   55,   54,
       54,   55,   54,   54,    0,   54,   54,   54,   54,    0,
       54,   54,   54,   54,    0,   54,   54,   54,   54,    0,
       54,   54,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   16,   16,   16,   16,   16,   16,   17,    1,    1,
        1,    1,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
        1,    1,    1,    1,    1,    1,   18,   19,   20,   21,

       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[44] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        3,    1,    4,    4,    4,    4,    5,    4,    4,    4,
        4,    4,    4,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[663] =
    {   0,
        0,    0, 1910, 1909,    0,    0, 1916, 1919, 1919,   41,
       43, 1910,    0, 1907,   40,   40, 1872, 1895,   69,   82,
       46,   18,   33, 1894,   49,   89,   91,   60,   92,   51,
       93,  117,   94,   53,   97,   57, 1919, 1898, 1919,  133,
      135,  137, 1904, 1919,    0, 1901, 1900, 1919,    0,  140,
     1889,  131, 1919,    0,  135, 1888,  153, 1884, 1886, 1882,
      160,  147,  103, 1872,   95,  162,  105,  164,  165,  167,
     1883,  168,  153,  178,  174,  175,  176,  181,  182,  179,
      187, 1882, 1881,  197,  185,  194,  196,  199,  200,  201,
     1919,    0,  225,  210, 1880,  238,    0,  244,  257,  261,

     1874, 1870,  213,  212,  210,  268,  252,  202,  270,  214,
      272,  281,  283,  285,  279,  284,  280,  289,  282,  293,
      301,  286,  297,  294,  303,  305,  307,  308,  309,  313,
     1877,  329,  323, 1876, 1875,  344,  357,  361,  367,  378,
      384,  388, 1858,  395,  317,  388,  379,  396,  399, 1873,
      401,  397,  403,  407, 1879,  408,  409,  410,  414,  411,
      417, 1871,  413,  429,  431,  422,  430,  436,  437,  438,
      323, 1870,  443,  441,  446,  460, 1869, 1868, 1867,  455,
      467,  478,  484,  490,  496,  509,  515,  528, 1866,  510,
      535,  536,  523,  532,  448, 1865,  538,  479,  533,  534,

      540,  544,  537,  546,  547,  548,  549,  550,  554,  557,
      558,  566,  560, 1864, 1863,  562,  564,  567,  570,  565,
      573,  581,  578, 1862, 1861, 1860,  589,  599,  612,  618,
      631,  635,  641, 1859,  648,  659,  665,  643,  575,  339,
      667,  589, 1858,  491,  665,  613,  239,  668,  669, 1842,
     1851,  670,  671,  673, 1855,  674,  677,  675,  676,  685,
      686,  690,  678,  692,  680,  694,  695,  698,  702, 1854,
     1853,  708,  720, 1852,  727,  738,  744,  750,  756,  762,
      775,  781,  794,  789,  713,  700,  757,  776,  794,  796,
      797,  800,  801,  803, 1838, 1832,  809,  807,  811,  812,

      814, 1849,  813,  815,  816,  820,  818,  822,  823,  824,
     1848,  826,  825, 1847, 1846, 1845,  850,  856,  862,  875,
      881,  894,  898,  904, 1844,  911,  922,  928,  837,  906,
      899,  928,  930,  931,  933, 1843,  739, 1842, 1841, 1839,
     1817,  836,  934,  936, 1838,  937,  839,  940,  857,  942,
      944,  946,  947, 1837,  952,  584, 1836, 1835, 1834,  962,
      971, 1833,  978,  989,  995,  999, 1005, 1018, 1024, 1037,
      950, 1032,  956, 1019, 1038, 1046, 1047, 1832, 1822, 1825,
     1041, 1042, 1044, 1829, 1045, 1048,  876,  964, 1049, 1050,
     1828, 1827, 1054, 1826, 1825, 1824, 1068, 1075, 1088, 1094,

     1107, 1113, 1823, 1120, 1131, 1137,  424, 1822, 1058, 1115,
     1821, 1132, 1052, 1806, 1801, 1818, 1817, 1816, 1137, 1815,
     1138, 1140, 1814, 1813, 1139, 1812, 1811, 1154, 1810, 1166,
     1159, 1179, 1185, 1198, 1204, 1217, 1809, 1212, 1149, 1218,
      708, 1919, 1919, 1083, 1199, 1220, 1221, 1808, 1807, 1806,
     1241, 1228, 1254, 1267, 1273, 1805, 1280, 1291, 1297, 1141,
     1228, 1231, 1804, 1292, 1803, 1229, 1000, 1802, 1801, 1304,
     1800, 1311, 1322, 1328, 1334, 1347, 1353, 1366, 1174, 1366,
     1323, 1348, 1361, 1369, 1799, 1798, 1797, 1387, 1379, 1400,
     1413, 1419, 1796, 1426, 1437, 1443, 1438, 1395, 1444, 1370,

     1795, 1794, 1793, 1792,    0, 1454, 1791, 1461, 1472, 1478,
     1484, 1497, 1503, 1516, 1790, 1511, 1789, 1262, 1788, 1787,
     1786, 1785, 1523, 1536, 1542, 1555, 1561, 1784, 1568,    0,
     1581, 1783, 1537, 1687, 1919, 1674,    0, 1587, 1653, 1594,
     1607, 1613, 1626,    0, 1646, 1640, 1632, 1627, 1632, 1645,
     1651, 1621,    0, 1608, 1602,    0, 1658, 1919,    0, 1594,
     1589, 1919, 1582, 1576,    0, 1563, 1556, 1550, 1531,    0,
     1518, 1498, 1492, 1479,    0, 1473, 1456, 1447, 1446,    0,
     1445, 1421, 1919, 1674, 1679, 1684, 1689, 1694, 1697, 1702,
     1704, 1421, 1395, 1706, 1385, 1708, 1710, 1384, 1712, 1714,

     1342, 1716, 1718, 1319, 1720, 1722, 1312, 1724, 1726, 1281,
     1728, 1730, 1249, 1732, 1734, 1193, 1736, 1738, 1156, 1740,
     1742, 1115, 1744, 1746, 1064, 1748, 1750, 1003, 1752, 1754,
      976,  961, 1756, 1758,  841, 1760, 1762,  758,  375, 1764,
     1766,  328, 1768,  312,  217, 1770, 1772, 1774,  190, 1776,
     1778, 1780,  122, 1782, 1784, 1786,   74, 1788, 1790, 1792,
       72, 1794
    } ;

static yyconst flex_int16_t yy_def[663] =
    {   0,
      583,    1,  584,  584,  585,  585,  583,  583,  583,  583,
      583,  586,  587,  588,  583,  583,   16,  583,  589,  589,
       20,   20,   20,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  583,  583,  583,  583,
      583,  583,  586,  583,  587,  588,  583,  583,  590,  583,
      591,   50,  583,  592,  593,  589,   20,   57,  589,   57,
      589,  589,  589,   57,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      583,  590,  583,   93,  594,  595,  592,  583,   98,   57,

      100,  100,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  583,  132,  596,  597,  583,  136,  583,  583,  598,
      139,  100,  142,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  583,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  133,  133,  599,  600,  583,
      583,  601,  181,  583,  583,  185,  583,  187,  142,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,

      589,  589,  583,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  583,  602,  603,  583,  583,  228,  583,
      230,  583,  583,  583,  583,  604,  235,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  583,
      583,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  605,
      606,  583,  583,  583,  583,  607,  275,  583,  583,  583,
      280,  583,  282,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  583,  583,  589,  589,  589,  589,

      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  583,  608,  609,  583,  583,  583,  319,
      583,  321,  583,  583,  583,  583,  610,  326,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  583,
      583,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  611,  612,  583,
      583,  583,  583,  613,  363,  583,  583,  367,  583,  369,
      589,  589,  589,  589,  589,  589,  589,  589,  583,  583,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  583,  614,  615,  583,  583,  398,  583,

      400,  583,  583,  583,  616,  404,  589,  589,  589,  589,
      589,  589,  589,  583,  583,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  617,  618,  583,  583,  583,
      619,  430,  583,  433,  583,  435,  589,  589,  589,  589,
      589,  583,  583,  589,  589,  589,  589,  583,  620,  621,
      583,  451,  583,  453,  583,  583,  583,  622,  457,  589,
      589,  589,  589,  589,  589,  589,  589,  623,  624,  583,
      583,  583,  625,  472,  583,  475,  583,  477,  589,  589,
      589,  589,  589,  589,  583,  626,  627,  583,  488,  583,
      490,  583,  583,  583,  628,  494,  589,  589,  589,  589,

      589,  589,  629,  630,  631,  583,  583,  583,  632,  508,
      583,  511,  583,  513,  589,  589,  589,  589,  583,  633,
      583,  634,  583,  523,  583,  525,  583,  583,  583,  635,
      529,  589,  589,  636,  583,  637,  638,  583,  583,  583,
      540,  583,  542,  639,  589,  583,  640,  641,  583,  549,
      583,  583,  642,  583,  643,  644,  583,  583,  645,  646,
      647,  583,  583,  648,  649,  650,  651,  583,  652,  653,
      654,  655,  583,  656,  657,  658,  659,  583,  660,  661,
      662,  583,    0,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,

      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583
    } ;

static yyconst flex_int16_t yy_nxt[1963] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   18,   19,   20,   21,
       22,   20,   23,   24,   24,   25,   24,   24,   26,   24,
       27,   28,   29,   24,   30,   31,   32,   33,   34,   35,
       24,   36,   24,   40,   41,   42,   41,   48,   62,   63,
       64,   49,   50,   50,   50,   50,   51,   52,   52,   52,
       52,   52,   52,   60,   53,  583,   65,  583,   77,  583,
       88,   66,   78,  583,   61,  526,  583,  577,   90,   67,
       54,   57,   57,   57,   57,   51,   57,   57,   58,   57,
       57,   57,   73,   59,   57,   57,   57,   57,   51,   57,

       57,   57,   57,   57,   57,  583,   59,  583,  583,  583,
      583,  583,   74,  583,   68,  108,   70,   79,   80,  583,
       69,  583,   71,   75,   87,  572,   76,   72,   89,   81,
       82,   83,  106,  583,   84,   40,   41,   42,   41,   40,
       41,  110,   85,   94,   94,   94,   94,   98,   98,   98,
       98,   86,   93,   93,   93,   93,   51,   94,   94,   94,
       94,   94,   94,  583,   53,  100,  100,  100,  100,  583,
      100,  100,  100,  100,  100,  100,  583,  103,  583,  109,
      583,  583,  105,  583,  583,  104,  111,  116,  112,  115,
      583,  583,  583,  567,  583,  583,  118,  583,  583,  122,

      114,  583,  113,  583,  124,  117,  125,  120,  119,  121,
      583,  123,  583,  583,  126,  583,  583,  583,  583,  147,
      562,  128,  133,  133,  133,  133,  583,  129,  583,  583,
      583,  127,  150,  146,  130,  152,  131,  132,  132,  132,
      132,   51,  133,  133,  133,  133,  133,  133,  145,   53,
      136,  136,  136,  136,  138,  583,  139,  139,  139,  139,
      140,  141,  141,  141,  141,  141,  141,  583,  583,  141,
      141,  141,  141,  142,  142,  142,  142,  292,  142,  142,
      142,  142,  142,  142,  583,  148,  583,  149,  583,  151,
      154,  155,  156,  153,  157,  583,  583,  583,  583,  583,

      583,  583,  583,  159,  158,  583,  168,  164,  162,  583,
      583,  163,  160,  583,  165,  561,  161,  583,  166,  583,
      167,  583,  170,  583,  583,  583,  171,  173,  172,  583,
      169,  559,  220,  583,  174,  177,  177,  177,  177,  583,
      175,  176,  176,  176,  176,   51,  177,  177,  177,  177,
      177,  177,  192,   53,  180,  583,  181,  181,  181,  181,
      182,  183,  183,  183,  183,  183,  183,  583,  286,  183,
      183,  183,  183,  184,  184,  184,  184,  138,  553,  185,
      185,  185,  185,  140,  186,  186,  186,  186,  186,  186,
      187,  187,  187,  187,  583,  583,  186,  186,  186,  186,

      189,  189,  189,  189,  583,  189,  189,  189,  189,  189,
      189,  583,  583,  583,  194,  583,  191,  583,  193,  583,
      196,  195,  197,  583,  583,  583,  583,  583,  204,  583,
      583,  198,  209,  583,  211,  200,  201,  202,  583,  199,
      583,  207,  208,  205,  206,  583,  583,  583,  210,  212,
      213,  215,  583,  583,  583,  223,  216,  583,  218,  583,
      221,  222,  583,  214,  583,  437,  219,  227,  227,  227,
      227,  217,  176,  176,  176,  176,  583,  180,  243,  228,
      228,  228,  228,  182,  229,  229,  229,  229,  229,  229,
      230,  230,  230,  230,  583,  583,  229,  229,  229,  229,

      232,  245,  184,  184,  184,  184,  138,  583,  233,  233,
      233,  233,  140,  234,  234,  234,  234,  234,  234,  583,
      289,  234,  234,  234,  234,  138,  583,  235,  235,  235,
      235,  236,  237,  237,  237,  237,  237,  237,  583,  583,
      237,  237,  237,  237,  239,  240,  238,  244,  583,  583,
      583,  583,  583,  242,  583,  247,  583,  250,  246,  241,
      583,  249,  583,  583,  583,  583,  583,  256,  253,  254,
      583,  248,  251,  583,  583,  260,  583,  252,  583,  255,
      583,  583,  583,  583,  257,  263,  583,  265,  258,  583,
      268,  583,  259,  262,  583,  264,  261,  583,  269,  272,

      583,  227,  227,  227,  227,  583,  393,  266,  267,  180,
      285,  273,  273,  273,  273,  182,  274,  274,  274,  274,
      274,  274,  583,  288,  274,  274,  274,  274,  180,  583,
      275,  275,  275,  275,  276,  277,  277,  277,  277,  277,
      277,  583,  291,  277,  277,  277,  277,  278,  278,  278,
      278,  138,  284,  279,  279,  279,  279,  140,  138,  583,
      280,  280,  280,  280,  236,  281,  281,  281,  281,  281,
      281,  282,  282,  282,  282,  583,  287,  281,  281,  281,
      281,  583,  290,  583,  583,  583,  583,  583,  293,  583,
      583,  583,  583,  583,  583,  305,  583,  303,  294,  297,

      301,  583,  583,  302,  304,  298,  583,  299,  583,  300,
      583,  583,  307,  308,  583,  309,  583,  331,  583,  306,
      317,  317,  317,  317,  583,  310,  312,  313,  463,  583,
      180,  311,  318,  318,  318,  318,  182,  180,  330,  319,
      319,  319,  319,  276,  320,  320,  320,  320,  320,  320,
      321,  321,  321,  321,  583,  583,  320,  320,  320,  320,
      323,  548,  278,  278,  278,  278,  138,  378,  279,  279,
      279,  279,  138,  583,  324,  324,  324,  324,  236,  325,
      325,  325,  325,  325,  325,  583,  332,  325,  325,  325,
      325,  138,  583,  326,  326,  326,  326,  327,  328,  328,

      328,  328,  328,  328,  583,  583,  328,  328,  328,  328,
      583,  334,  583,  583,  333,  335,  583,  583,  336,  583,
      329,  337,  338,  583,  339,  583,  342,  583,  583,  583,
      583,  583,  583,  347,  583,  350,  583,  351,  583,  583,
      583,  583,  583,  348,  544,  343,  349,  345,  385,  344,
      346,  356,  583,  583,  355,  583,  352,  353,  354,  357,
      360,  381,  317,  317,  317,  317,  180,  371,  318,  318,
      318,  318,  180,  583,  361,  361,  361,  361,  276,  362,
      362,  362,  362,  362,  362,  583,  387,  362,  362,  362,
      362,  180,  583,  363,  363,  363,  363,  364,  365,  365,

      365,  365,  365,  365,  583,  421,  365,  365,  365,  365,
      366,  366,  366,  366,  138,  583,  279,  279,  279,  279,
      236,  138,  583,  367,  367,  367,  367,  327,  368,  368,
      368,  368,  368,  368,  369,  369,  369,  369,  583,  373,
      368,  368,  368,  368,  583,  374,  583,  583,  372,  583,
      583,  375,  583,  583,  377,  382,  583,  383,  583,  386,
      583,  384,  583,  583,  526,  409,  583,  390,  583,  389,
      388,  376,  583,  392,  397,  397,  397,  397,  407,  522,
      583,  180,  391,  318,  318,  318,  318,  276,  180,  422,
      398,  398,  398,  398,  364,  399,  399,  399,  399,  399,

      399,  400,  400,  400,  400,  583,  514,  399,  399,  399,
      399,  366,  366,  366,  366,  138,  583,  402,  402,  402,
      402,  327,  403,  403,  403,  403,  403,  403,  583,  484,
      403,  403,  403,  403,  138,  583,  404,  404,  404,  404,
      405,  406,  406,  406,  406,  406,  406,  583,  583,  406,
      406,  406,  406,  408,  583,  412,  413,  583,  583,  410,
      583,  583,  583,  583,  583,  583,  583,  491,  583,  420,
      583,  416,  411,  419,  583,  425,  417,  441,  418,  423,
      397,  397,  397,  397,  424,  180,  438,  428,  428,  428,
      428,  364,  429,  429,  429,  429,  429,  429,  583,  583,

      429,  429,  429,  429,  180,  464,  430,  430,  430,  430,
      431,  432,  432,  432,  432,  432,  432,  583,  478,  432,
      432,  432,  432,  138,  439,  279,  279,  279,  279,  327,
      138,  583,  433,  433,  433,  433,  405,  434,  434,  434,
      434,  434,  434,  435,  435,  435,  435,  583,  583,  434,
      434,  434,  434,  583,  583,  583,  583,  583,  479,  454,
      440,  446,  444,  445,  180,  583,  318,  318,  318,  318,
      364,  453,  453,  453,  453,  447,  180,  461,  451,  451,
      451,  451,  431,  452,  452,  452,  452,  452,  452,  583,
      583,  452,  452,  452,  452,  138,  436,  455,  455,  455,

      455,  405,  456,  456,  456,  456,  456,  456,  583,  497,
      456,  456,  456,  456,  138,  583,  457,  457,  457,  457,
      458,  459,  459,  459,  459,  459,  459,  583,  583,  459,
      459,  459,  459,  460,  583,  465,  583,  583,  583,  462,
      471,  471,  471,  471,  583,  583,  467,  583,  481,  480,
      466,  180,  401,  470,  470,  470,  470,  431,  471,  471,
      471,  471,  471,  471,  180,  483,  472,  472,  472,  472,
      473,  474,  474,  474,  474,  474,  474,  583,  583,  474,
      474,  474,  474,  138,  370,  279,  279,  279,  279,  405,
      138,  533,  475,  475,  475,  475,  458,  476,  476,  476,

      476,  476,  476,  477,  477,  477,  477,  583,  583,  476,
      476,  476,  476,  482,  180,  322,  318,  318,  318,  318,
      431,  180,  283,  488,  488,  488,  488,  473,  489,  489,
      489,  489,  489,  489,  490,  490,  490,  490,  583,  583,
      489,  489,  489,  489,  138,  231,  492,  492,  492,  492,
      458,  493,  493,  493,  493,  493,  493,  583,  499,  493,
      493,  493,  493,  138,  583,  494,  494,  494,  494,  495,
      496,  496,  496,  496,  496,  496,  583,  583,  496,  496,
      496,  496,  583,  498,  500,  583,  583,  188,  137,  583,
      502,  507,  507,  507,  507,  518,  501,  180,   99,  506,

      506,  506,  506,  473,  507,  507,  507,  507,  507,  507,
      180,  583,  508,  508,  508,  508,  509,  510,  510,  510,
      510,  510,  510,  583,   97,  510,  510,  510,  510,  138,
      516,  279,  279,  279,  279,  458,  138,  580,  511,  511,
      511,  511,  495,  512,  512,  512,  512,  512,  512,  513,
      513,  513,  513,  583,  583,  512,  512,  512,  512,  515,
      583,  580,  580,  575,  180,  517,  318,  318,  318,  318,
      473,  180,  580,  523,  523,  523,  523,  509,  524,  524,
      524,  524,  524,  524,  525,  525,  525,  525,  583,  575,
      524,  524,  524,  524,  138,  575,  527,  527,  527,  527,

      495,  528,  528,  528,  528,  528,  528,  583,  570,  528,
      528,  528,  528,  138,  575,  529,  529,  529,  529,  530,
      531,  531,  531,  531,  531,  531,  583,  583,  531,  531,
      531,  531,  532,  180,  570,  538,  538,  538,  538,  509,
      539,  539,  539,  539,  539,  539,  583,  570,  539,  539,
      539,  539,  180,  583,  540,  540,  540,  540,  545,  541,
      541,  541,  541,  541,  541,  583,  565,  541,  541,  541,
      541,  138,  570,  279,  279,  279,  279,  495,  138,  565,
      542,  542,  542,  542,  530,  543,  543,  543,  543,  543,
      543,  583,  565,  543,  543,  543,  543,  180,  556,  318,

      318,  318,  318,  509,  180,  565,  549,  549,  549,  549,
      556,  550,  550,  550,  550,  550,  550,  583,  556,  550,
      550,  550,  550,  138,  537,  551,  551,  551,  551,  530,
      552,  552,  552,  552,  552,  552,  583,  530,  552,  552,
      552,  552,  180,  556,  557,  557,  557,  557,  537,  558,
      558,  558,  558,  558,  558,  583,  521,  558,  558,  558,
      558,  138,  583,  279,  279,  279,  279,  530,  180,  509,
      318,  318,  318,  318,   37,   37,   37,   37,   37,   39,
       39,   39,   39,   39,   43,   43,   43,   43,   43,   45,
      537,   45,   45,   45,   46,   46,   46,   46,   46,   56,

       56,   56,   92,  521,   92,   92,   92,   95,   95,  134,
      134,  178,  178,  179,  179,  224,  224,  225,  225,  270,
      270,  271,  271,  314,  314,  315,  315,  358,  358,  359,
      359,  394,  394,  395,  395,  426,  426,  427,  427,  448,
      448,  449,  449,  468,  468,  469,  469,  485,  485,  486,
      486,  503,  503,  504,  504,  519,  519,  520,  520,  534,
      534,  536,  536,  546,  546,  547,  547,  554,  554,  555,
      555,  560,  560,  563,  563,  564,  564,  566,  566,  568,
      568,  569,  569,  571,  571,  573,  573,  574,  574,  576,
      576,  578,  578,  579,  579,  581,  581,  582,  582,  583,

      495,  537,  535,  521,  487,  583,  583,  473,  521,  487,
      583,  583,  458,  505,  487,  450,  431,  487,  450,  583,
      583,  405,   96,  450,  396,  583,  364,  450,  396,  583,
      583,  583,  583,  583,  583,  443,  442,  583,  583,  327,
       96,  396,  316,  583,  583,  583,  415,  414,  583,  276,
      396,  316,  583,  583,  583,  380,  379,  583,  583,  583,
      236,   96,  316,  226,  583,  583,  341,  340,  182,  316,
      226,  583,  296,  295,  583,  140,   96,  226,  135,  583,
      583,  583,  583,  226,  135,  583,  583,  583,  203,  583,
      190,   96,  135,  583,  144,  143,  135,  583,  583,  583,

      107,  102,  583,  101,  583,   96,   46,   47,   44,   91,
      583,   55,  583,   47,   44,  583,   38,   38,    7,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583
    } ;

static yyconst flex_int16_t yy_chk[1963] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   10,   10,   11,   11,   15,   22,   22,
       23,   15,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   21,   16,   25,   23,   30,   30,   34,
       34,   25,   30,   36,   21,  661,   28,  657,   36,   25,
       16,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   28,   19,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   26,   20,   27,   29,   31,
       33,   65,   29,   35,   26,   65,   27,   31,   31,   63,
       26,   67,   27,   29,   33,  653,   29,   27,   35,   31,
       32,   32,   63,   32,   32,   40,   40,   41,   41,   42,
       42,   67,   32,   52,   52,   52,   52,   55,   55,   55,
       55,   32,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   62,   50,   57,   57,   57,   57,   73,
       57,   57,   57,   57,   57,   57,   61,   61,   66,   66,
       68,   69,   62,   70,   72,   61,   68,   74,   69,   73,
       75,   76,   77,  649,   74,   80,   76,   78,   79,   79,

       72,   85,   70,   81,   81,   75,   84,   78,   77,   78,
       86,   80,   87,   84,   85,   88,   89,   90,  108,  105,
      645,   87,   94,   94,   94,   94,  105,   88,  104,  103,
      110,   86,  108,  104,   89,  110,   90,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,  103,   93,
       96,   96,   96,   96,   98,  247,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   99,  107,   99,
       99,   99,   99,  100,  100,  100,  100,  247,  100,  100,
      100,  100,  100,  100,  106,  106,  109,  107,  111,  109,
      112,  113,  113,  111,  114,  115,  117,  112,  119,  113,

      116,  114,  122,  116,  115,  118,  123,  119,  117,  120,
      124,  118,  116,  123,  120,  644,  116,  121,  121,  125,
      122,  126,  125,  127,  128,  129,  126,  128,  127,  130,
      124,  642,  171,  145,  129,  133,  133,  133,  133,  171,
      130,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  145,  132,  136,  240,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  137,  240,  137,
      137,  137,  137,  138,  138,  138,  138,  139,  639,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      140,  140,  140,  140,  141,  147,  141,  141,  141,  141,

      142,  142,  142,  142,  146,  142,  142,  142,  142,  142,
      142,  144,  148,  152,  147,  149,  144,  151,  146,  153,
      149,  148,  151,  154,  156,  157,  158,  160,  156,  163,
      159,  152,  160,  161,  163,  154,  154,  154,  166,  153,
      407,  158,  159,  156,  157,  164,  167,  165,  161,  164,
      165,  167,  168,  169,  170,  175,  168,  174,  169,  173,
      173,  174,  175,  166,  195,  407,  170,  180,  180,  180,
      180,  168,  176,  176,  176,  176,  176,  181,  195,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      182,  182,  182,  182,  183,  198,  183,  183,  183,  183,

      184,  198,  184,  184,  184,  184,  185,  244,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  186,
      244,  186,  186,  186,  186,  187,  190,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  188,  193,
      188,  188,  188,  188,  191,  192,  190,  197,  194,  199,
      200,  191,  192,  194,  197,  200,  201,  203,  199,  193,
      202,  202,  204,  205,  206,  207,  208,  208,  205,  206,
      209,  201,  203,  210,  211,  212,  213,  204,  216,  207,
      217,  220,  212,  218,  209,  217,  219,  219,  210,  221,
      222,  239,  211,  216,  223,  218,  213,  222,  223,  227,

      356,  227,  227,  227,  227,  242,  356,  220,  221,  228,
      239,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  229,  242,  229,  229,  229,  229,  230,  246,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  231,  246,  231,  231,  231,  231,  232,  232,  232,
      232,  233,  238,  233,  233,  233,  233,  233,  235,  238,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  236,  236,  236,  236,  237,  241,  237,  237,  237,
      237,  245,  245,  241,  248,  249,  252,  253,  248,  254,
      256,  258,  259,  257,  263,  261,  265,  259,  249,  252,

      257,  260,  261,  258,  260,  253,  262,  254,  264,  256,
      266,  267,  263,  264,  268,  265,  286,  286,  269,  262,
      272,  272,  272,  272,  441,  266,  268,  269,  441,  285,
      273,  267,  273,  273,  273,  273,  273,  275,  285,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      276,  276,  276,  276,  277,  337,  277,  277,  277,  277,
      278,  638,  278,  278,  278,  278,  279,  337,  279,  279,
      279,  279,  280,  287,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  281,  287,  281,  281,  281,
      281,  282,  288,  282,  282,  282,  282,  282,  282,  282,

      282,  282,  282,  282,  283,  284,  283,  283,  283,  283,
      289,  289,  290,  291,  288,  290,  292,  293,  291,  294,
      284,  292,  293,  298,  294,  297,  297,  299,  300,  303,
      301,  304,  305,  303,  307,  305,  306,  306,  308,  309,
      310,  313,  312,  303,  635,  298,  304,  300,  347,  299,
      301,  312,  342,  329,  310,  347,  307,  308,  309,  313,
      317,  342,  317,  317,  317,  317,  318,  329,  318,  318,
      318,  318,  319,  349,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  320,  349,  320,  320,  320,
      320,  321,  387,  321,  321,  321,  321,  321,  321,  321,

      321,  321,  321,  321,  322,  387,  322,  322,  322,  322,
      323,  323,  323,  323,  324,  331,  324,  324,  324,  324,
      324,  326,  330,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  327,  327,  327,  327,  328,  331,
      328,  328,  328,  328,  332,  332,  333,  334,  330,  335,
      343,  333,  344,  346,  335,  343,  348,  344,  350,  348,
      351,  346,  352,  353,  632,  373,  371,  352,  355,  351,
      350,  334,  373,  355,  360,  360,  360,  360,  371,  631,
      388,  361,  353,  361,  361,  361,  361,  361,  363,  388,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,

      363,  364,  364,  364,  364,  365,  628,  365,  365,  365,
      365,  366,  366,  366,  366,  367,  467,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  368,  467,
      368,  368,  368,  368,  369,  374,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  370,  372,  370,
      370,  370,  370,  372,  375,  376,  377,  381,  382,  374,
      383,  385,  376,  377,  386,  389,  390,  625,  413,  386,
      393,  381,  375,  385,  409,  393,  382,  413,  383,  389,
      397,  397,  397,  397,  390,  398,  409,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  399,  444,

      399,  399,  399,  399,  400,  444,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  401,  622,  401,
      401,  401,  401,  402,  410,  402,  402,  402,  402,  402,
      404,  410,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  405,  405,  405,  405,  406,  412,  406,
      406,  406,  406,  419,  421,  425,  422,  460,  460,  619,
      412,  422,  419,  421,  428,  439,  428,  428,  428,  428,
      428,  431,  431,  431,  431,  425,  430,  439,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  432,
      479,  432,  432,  432,  432,  433,  616,  433,  433,  433,

      433,  433,  433,  433,  433,  433,  433,  433,  434,  479,
      434,  434,  434,  434,  435,  445,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  436,  438,  436,
      436,  436,  436,  438,  440,  445,  446,  447,  452,  440,
      452,  452,  452,  452,  461,  466,  447,  462,  462,  461,
      446,  451,  613,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  453,  466,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  454,  518,  454,
      454,  454,  454,  455,  610,  455,  455,  455,  455,  455,
      457,  518,  457,  457,  457,  457,  457,  457,  457,  457,

      457,  457,  457,  458,  458,  458,  458,  459,  464,  459,
      459,  459,  459,  464,  470,  607,  470,  470,  470,  470,
      470,  472,  604,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  473,  473,  473,  473,  474,  481,
      474,  474,  474,  474,  475,  601,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  476,  481,  476,
      476,  476,  476,  477,  482,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  478,  483,  478,  478,
      478,  478,  480,  480,  482,  484,  500,  598,  595,  489,
      484,  489,  489,  489,  489,  500,  483,  488,  593,  488,

      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      490,  498,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  491,  592,  491,  491,  491,  491,  492,
      498,  492,  492,  492,  492,  492,  494,  582,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  495,
      495,  495,  495,  496,  497,  496,  496,  496,  496,  497,
      499,  581,  579,  578,  506,  499,  506,  506,  506,  506,
      506,  508,  577,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  509,  509,  509,  509,  510,  576,
      510,  510,  510,  510,  511,  574,  511,  511,  511,  511,

      511,  511,  511,  511,  511,  511,  511,  512,  573,  512,
      512,  512,  512,  513,  572,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  514,  516,  514,  514,
      514,  514,  516,  523,  571,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  524,  569,  524,  524,
      524,  524,  525,  533,  525,  525,  525,  525,  533,  525,
      525,  525,  525,  525,  525,  526,  568,  526,  526,  526,
      526,  527,  567,  527,  527,  527,  527,  527,  529,  566,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  531,  564,  531,  531,  531,  531,  538,  563,  538,

      538,  538,  538,  538,  540,  561,  540,  540,  540,  540,
      560,  540,  540,  540,  540,  540,  540,  541,  555,  541,
      541,  541,  541,  542,  554,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  543,  552,  543,  543,
      543,  543,  549,  548,  549,  549,  549,  549,  547,  549,
      549,  549,  549,  549,  549,  550,  546,  550,  550,  550,
      550,  551,  545,  551,  551,  551,  551,  551,  557,  539,
      557,  557,  557,  557,  584,  584,  584,  584,  584,  585,
      585,  585,  585,  585,  586,  586,  586,  586,  586,  587,
      536,  587,  587,  587,  588,  588,  588,  588,  588,  589,

      589,  589,  590,  534,  590,  590,  590,  591,  591,  594,
      594,  596,  596,  597,  597,  599,  599,  600,  600,  602,
      602,  603,  603,  605,  605,  606,  606,  608,  608,  609,
      609,  611,  611,  612,  612,  614,  614,  615,  615,  617,
      617,  618,  618,  620,  620,  621,  621,  623,  623,  624,
      624,  626,  626,  627,  627,  629,  629,  630,  630,  633,
      633,  634,  634,  636,  636,  637,  637,  640,  640,  641,
      641,  643,  643,  646,  646,  647,  647,  648,  648,  650,
      650,  651,  651,  652,  652,  654,  654,  655,  655,  656,
      656,  658,  658,  659,  659,  660,  660,  662,  662,  532,

      528,  522,  521,  520,  519,  517,  515,  507,  504,  503,
      502,  501,  493,  487,  486,  485,  471,  469,  468,  465,
      463,  456,  450,  449,  448,  437,  429,  427,  426,  424,
      423,  420,  418,  417,  416,  415,  414,  411,  408,  403,
      396,  395,  394,  392,  391,  384,  380,  379,  378,  362,
      359,  358,  357,  354,  345,  341,  340,  339,  338,  336,
      325,  316,  315,  314,  311,  302,  296,  295,  274,  271,
      270,  255,  251,  250,  243,  234,  226,  225,  224,  215,
      214,  196,  189,  179,  178,  177,  172,  162,  155,  150,
      143,  135,  134,  131,  102,  101,   95,   83,   82,   71,

       64,   60,   59,   58,   56,   51,   47,   46,   43,   38,
       24,   18,   17,   14,   12,    7,    4,    3,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[67] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
    1, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 1095 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 1200 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 584 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1919 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 55 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 59 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 61 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 62 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 64 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 69 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno; 
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 111 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 112 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 53:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 137 "SrvLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 146 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 155 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 164 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 173 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 185 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 192 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 213 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd then no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 245 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd; 
      YYABORT; 
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 255 "SrvLexer.l"
{ 
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) { 
        Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd; 
        YYABORT; 
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 264 "SrvLexer.l"
{ return yytext[0]; } 
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 267 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 1758 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 584 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 584 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 583);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

yyFlexLexer::~yyFlexLexer()
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

	delete [] (yy_state_buf);
	yyfree((yy_start_stack)  );

}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 267 "SrvLexer.l"




