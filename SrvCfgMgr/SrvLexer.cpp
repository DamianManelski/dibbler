#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 87
#define YY_END_OF_BUFFER 88
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[719] =
    {   0,
        1,    1,    0,    0,    0,    0,   88,   86,    2,    1,
        1,   86,   69,   86,   86,   85,   85,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   73,   73,   87,
        1,    1,    1,    0,   81,   69,    0,   81,   71,   70,
       85,    0,    0,   84,    0,   78,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   66,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   16,   17,   82,
       82,   82,   82,   82,   82,   82,   82,   72,   70,   85,

        0,    0,   77,   83,   76,   76,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   65,   85,    0,    0,    0,
       75,   75,    0,   76,    0,   76,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   29,   82,   82,   39,
       82,   82,   82,   82,   82,    0,   82,   82,   82,   82,
       82,   82,   22,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   67,   82,   82,   82,   82,   85,    0,

        0,    0,    0,   75,    0,   75,    0,   76,   76,   76,
       76,   82,   82,   82,   82,   82,   82,    4,   82,   82,
       82,   82,   82,   68,    3,   82,   82,   82,   82,   82,
       82,    0,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,    7,   82,   23,   82,   82,   82,   82,   82,
       82,   82,   82,   82,    0,    0,    0,    0,   75,   75,
       75,   75,    0,   76,   76,   76,    0,   76,   82,   82,
       82,   82,   82,   82,   82,   82,   28,   82,   82,   34,
       82,   82,   82,   82,   82,   82,   82,   82,    0,    0,
       82,   82,   82,   32,   82,   82,   82,   82,   82,   82,

       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
        0,    0,    0,   75,   75,   75,    0,   75,    0,    0,
       76,   76,   76,   76,   82,   82,   31,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,    0,    0,   82,   82,   82,   82,   82,
       48,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       20,   82,   82,   82,    0,    0,    0,    0,    0,   75,
       75,   75,   75,    0,   76,   76,   76,    0,   76,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   44,   82,   12,   10,

        0,    0,   82,   82,   82,   46,   82,   82,   82,   82,
       82,   82,   82,   82,   82,    5,   82,   82,   82,   13,
        0,    0,    0,   75,   75,   75,    0,   75,   80,   76,
       76,   76,   76,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       11,    0,    0,   82,   82,   82,   47,   82,   82,   82,
       82,   30,   82,   82,    6,   36,   82,   82,    0,    0,
        0,   79,   75,   75,   75,   75,   76,   76,   76,    0,
       76,   82,   82,   82,   82,   82,   82,   45,   82,   82,
       82,   82,   82,   33,   82,   82,   82,   82,    0,    0,

       41,   40,   35,   82,   21,   82,   82,   38,   37,   82,
       82,    0,    0,   75,   75,   75,    0,   75,   76,   76,
       76,   76,   82,   14,   50,   82,   82,   54,   82,   82,
       82,   57,   82,   82,   82,   82,   82,   43,   42,   82,
       82,   82,   82,   49,    0,    0,    0,   75,   75,   75,
       75,   76,   76,   76,    0,   76,   82,   56,   82,   82,
       82,   82,   58,   51,   82,   82,    8,   82,   24,   82,
       82,    0,    0,   75,   75,   75,    0,   75,   76,   76,
       76,   76,   82,   55,   82,   82,   82,   82,   82,   52,
       82,   82,   82,   82,    0,    0,    0,   75,   75,   75,

       75,   76,   76,   76,    0,   76,   82,   82,   82,   82,
       82,   82,   82,   82,   15,   19,    0,   74,   77,   75,
       75,   75,    0,   75,   76,   76,   76,   76,   82,   26,
       82,   59,   82,   25,   82,   82,    0,   74,    0,   75,
       75,   75,   75,   75,   76,   76,   76,    0,   76,   82,
       27,   60,   82,   82,   82,   82,   82,   74,   77,   75,
        0,   75,   75,   75,   75,   76,   76,   76,   53,   82,
       82,   82,   82,   82,   18,   74,   75,   75,   75,   75,
       76,   76,   76,   61,   62,   63,   64,    9,   75,   75,
        0,   75,   75,   76,   75,   75,   76,   75,   75,    0,

       75,   75,   75,   75,    0,   75,   75,   75,   75,    0,
       75,   75,   75,   75,    0,   75,   75,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
        1,    1,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,    1,    1,    1,    1,    1,   23,   24,   25,   26,

       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[49] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        3,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    5,    6,    6,    6,    6,    6,    6,    1,    7,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[850] =
    {   0,
        0,    0, 1997, 1996,    0,    0, 2003, 2006, 2006,   46,
       48, 1997,    0, 1994,   45,   45, 1954, 1977,   82,   51,
      108,  110,  112,  131,  162,   46,   47,   48, 1960,  122,
       60,  119,  129, 1961,  140, 1959, 1968, 2006, 1982, 2006,
       51,   77,   85, 1988, 2006,    0, 1985, 1984, 2006,    0,
      193, 1968,  110, 2006,    0,  170,    0,  211, 1964, 1962,
        0, 1945, 1961,  141, 1956, 1943, 1948, 1951, 1943, 1946,
     1953, 1955,  180, 1949, 1947, 1934,    0, 1936, 1931, 1962,
     1934, 1943, 1931,  167, 1945, 1929, 1943,    0,    0, 1955,
     1929, 1920, 1931, 1927, 1924, 1919, 1917, 2006,    0,  242,

      143, 1935,  217,    0,  262, 1934,  278, 1928, 1914, 1923,
     1922, 1910, 1923, 1922, 1938, 1924, 1920, 1918, 1903, 1907,
     1917, 1916, 1913, 1912, 1928,  237, 1927, 1905,  166, 1901,
     1906, 1902, 1905, 1908, 1893, 1889, 1918, 1885, 1901, 1898,
     1897, 1898, 1891, 1895, 1887,    0,  294,  301, 1897, 1896,
      321, 1895,    0,  339,  225, 1894,  355, 1877,  367, 1904,
     1886, 1871, 1875, 1869, 1868, 1877,    0, 1867, 1879,    0,
     1878, 1862, 1863, 1860,  291, 1891,  358, 1859, 1862, 1864,
     1870, 1859,    0, 1868, 1868, 1868, 1845, 1849, 1863,  359,
     1862, 1854, 1877,    0, 1863, 1859, 1847, 1873, 1860,  365,

     1859, 1858,    0,  390,  365, 1857, 1867,  408, 1855,  426,
     1854, 1853, 1832, 1835, 1831,  295, 1861, 1860, 1827, 1826,
     1840, 1830, 1834,    0, 1854, 1832, 1834, 1830, 1833, 1822,
     1835,  429, 1820, 1829, 1828, 1818, 1830, 1816, 1814, 1810,
     1839, 1806,    0, 1820,    0, 1809, 1818, 1810, 1820, 1794,
     1800, 1830, 1799, 1812, 1815, 1814, 1813, 1823,  460, 1811,
      478, 1810,    0,  375, 1809,  496,  433, 1808, 1819, 1805,
     1786, 1799, 1794, 1797, 1782, 1787, 1811, 1810, 1779,    0,
     1783, 1782, 1772, 1792, 1779, 1769, 1786, 1776, 1773, 1782,
     1773, 1767, 1766,    0, 1764, 1775, 1769, 1775, 1776, 1790,

     1789, 1763, 1757, 1769, 1754, 1757, 1751, 1758, 1781, 1759,
     1767, 1766,    0,  514, 1765,  526,  439, 1764, 1774,  516,
      544, 1762,  562, 1761,  134, 1742,    0, 1734, 1752, 1737,
     1747, 1754, 1741,  496, 1731, 1747, 1750, 1745, 1746, 1743,
     1742, 1741, 1740, 1731, 1725, 1741, 1719, 1718, 1720, 1718,
        0,  565, 1722, 1733, 1726, 1733, 1711, 1713, 1712, 1716,
        0, 1720, 1709, 1709, 1726, 1725, 1724, 1734,  581,  593,
     1722,  611, 1721,    0, 1720, 1719,  629,  570, 1718, 1712,
     1702, 1714, 1726, 1708, 1704, 1685, 1686, 1708, 1695, 1692,
     1694, 1700, 1690, 1679, 1714, 1696,    0, 1688,    0,    0,

     1698, 1676, 1688, 1691, 1690,    0, 1686, 1705, 1689, 1678,
     1678, 1685, 1679, 1682, 1667,    0, 1680, 1678, 1667,    0,
     1682, 1681,    0, 1680, 1679,  647,  653, 1678,    0,  671,
     1677,  689, 1676, 1674, 1662, 1660, 1660, 1651, 1655, 1664,
     1680, 1643, 1665, 1651, 1663, 1645, 1642, 1673, 1647, 1671,
        0, 1649, 1652, 1642, 1637, 1636,    0, 1641, 1647, 1638,
     1641,    0, 1635, 1630,    0,    0, 1642, 1641, 1645, 1644,
     1643,    0,  707, 1642,  725, 1641, 1640, 1639,  743,  749,
     1638, 1618, 1611, 1616, 1629, 1624, 1628,    0, 1619, 1642,
     1626, 1623, 1618,    0, 1625, 1613, 1609, 1614, 1608, 1603,

        0,    0,    0, 1611,    0, 1610, 1613,    0,    0, 1597,
     1613, 1615, 1614, 1613, 1612,  767,  773, 1611,  791, 1610,
      809, 1609, 1603,    0,    0, 1593, 1593,    0, 1600, 1592,
     1615,    0, 1588, 1589, 1595, 1595, 1594, 2006, 2006, 1591,
     1576, 1581, 1585,    0, 1593, 1592, 1591,  827, 1590,  845,
     1589, 1588, 1587,  863,  869, 1586, 1568,    0, 1579, 1582,
     1577,  104,    0,    0, 1580, 1575, 1591, 1573,    0, 1557,
     1563, 1575, 1574, 1573, 1572,  887,  893, 1571,  911, 1570,
      929, 1569, 1547,    0, 1548, 1565, 1557, 1541, 1518,    0,
     1510, 1493, 1491, 1499, 1501, 1492, 1486,  947, 1483,  965,

     1471, 1468, 1447,  983,  989, 1444, 1427, 1403, 1377, 1376,
     1359, 1331, 1306, 1291,    0,    0, 1285, 1258,    0, 1246,
     1227, 1007, 1013, 1217, 1031, 1214, 1049, 1200, 1168,    0,
     1152,    0,  515,    0, 1143, 1116, 1121, 1111, 1093, 1085,
     1067, 1075, 1085,    0, 1057, 1039, 1103,    0, 1021,  972,
        0,    0,  256,  974,  963,  932,  914,  901, 2006,  877,
        0,  853,  835, 1121,    0, 1139,  817,    0,    0,  804,
      784,  762,  740,  697,    0,  697,  679,  661, 1157,    0,
      637,  619,    0,    0,    0,    0,    0,    0,  601,  583,
        0,    0, 2006,    0,  580,  578, 2006,  577,  552,    0,

      534,  513,  506,  486,    0,  468,  450,  447,  446,    0,
      416,  398,  380,  376,    0,  374,   34, 2006, 1185, 1192,
     1199, 1206, 1213, 1220, 1224, 1227, 1231, 1234, 1237, 1241,
     1244, 1247, 1250, 1254, 1257, 1260,   82, 1263, 1266, 1269,
     1272,  162, 1275, 1278, 1281, 1284, 1287, 1290, 1293, 1296,
      229, 1300, 1302, 1305, 1308, 1311,  296, 1315, 1317, 1320,
     1323, 1326, 1329, 1332, 1335, 1338,  329, 1341, 1344, 1347,
     1350,  347, 1353, 1356, 1359, 1362, 1365, 1368, 1371, 1374,
     1377, 1380, 1383, 1386, 1389, 1392, 1395, 1398, 1401, 1404,
     1407, 1410, 1413, 1416, 1419, 1422, 1425, 1428, 1431, 1434,

     1437, 1440, 1443, 1446, 1449, 1452, 1455, 1458, 1461, 1464,
     1467, 1470, 1473, 1476, 1479, 1482, 1485, 1488, 1491, 1494,
     1497, 1500, 1503, 1506, 1509, 1512, 1515, 1518, 1521, 1524,
     1527, 1530, 1533, 1536, 1539, 1542, 1545, 1548, 1551, 1554,
     1557, 1560, 1563, 1566, 1569, 1572, 1575, 1578, 1581
    } ;

static yyconst flex_int16_t yy_def[850] =
    {   0,
      718,    1,  719,  719,  720,  720,  718,  718,  718,  718,
      718,  721,  722,  723,  718,  718,   16,  718,  718,   19,
       19,   19,   19,   19,   19,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,  718,  718,  718,
      718,  718,  718,  721,  718,  722,  723,  718,  718,  724,
      718,  725,  726,  718,  727,  728,   25,   19,   58,   58,
       25,   25,   58,   25,   25,   25,   25,   25,   25,   58,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,  718,  724,  718,

      729,  730,  731,  727,  718,  732,   58,  107,  107,   25,
      107,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,  718,  733,  734,  735,
      718,  736,  737,  718,  738,  739,  107,  157,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,  718,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,  147,  733,

      740,  741,  742,  718,  743,  744,  737,  718,  745,  718,
      746,  157,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,  718,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,  718,  747,  748,  742,  718,  749,
      718,  750,  751,  752,  718,  718,  753,  754,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,  718,  718,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
      755,  756,  757,  758,  718,  718,  759,  760,  751,  752,
      718,  761,  718,  762,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,  718,  718,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,  718,  763,  764,  757,  758,  718,
      765,  718,  766,  767,  320,  718,  718,  768,  769,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

      718,  718,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
      770,  771,  772,  369,  718,  718,  773,  774,  767,  718,
      775,  718,  776,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,  718,  718,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,  718,  777,
      778,  772,  718,  779,  718,  780,  320,  718,  718,  781,
      782,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,  718,  718,

       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,  783,  784,  369,  718,  718,  785,  786,  718,  787,
      718,  788,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,  718,  718,   25,
       25,   25,   25,   25,  718,  789,  790,  718,  791,  718,
      792,  320,  718,  718,  793,  794,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,  795,  796,  369,  718,  718,  797,  798,  718,  799,
      718,  800,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,  718,  801,  802,  718,  803,  718,

      804,  320,  718,  718,  805,  806,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,  807,  808,  809,  369,
      718,  718,  810,  811,  718,  812,  718,  813,   25,   25,
       25,   25,   25,   25,   25,   25,  718,  814,  718,  815,
      718,  816,  718,  817,  320,  718,  718,  818,  819,   25,
       25,   25,   25,   25,   25,   25,   25,  820,  718,  821,
      822,  369,  718,  718,  823,  718,  824,  825,   25,   25,
       25,   25,   25,   25,   25,  718,  826,  827,  718,  828,
      320,  718,  829,   25,   25,   25,   25,   25,  718,  830,
      831,  369,  718,  832,  833,  834,  718,  718,  835,  836,

      837,  838,  718,  839,  840,  841,  842,  718,  843,  844,
      845,  846,  718,  847,  848,  849,  718,    0,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,

      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718
    } ;

static yyconst flex_int16_t yy_nxt[2055] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   25,
       26,   25,   25,   27,   25,   28,   29,   30,   25,   31,
       32,   33,   34,   35,   36,   25,   37,   25,   41,   42,
       43,   42,   49,   41,   42,  715,   50,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   52,   53,   53,   53,
       53,   53,   53,   72,   54,   58,   58,   74,   76,   43,
       42,   73,   83,   75,   77,  207,   84,   41,   42,   78,
       55,   57,   57,   57,   58,   58,   58,   58,   58,   58,

       58,   58,   58,   52,   58,   58,   59,   60,   58,   58,
       57,   61,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   62,   57,   57,   57,   57,   57,
       63,   52,   58,   58,   58,   58,   58,   58,  587,   54,
       65,   64,   88,   89,  588,   66,   67,   80,   85,   86,
       57,   90,   68,   70,   57,   58,   58,   69,   81,   91,
       87,   82,   94,  112,   52,  258,   95,  380,   92,   71,
      381,  113,   54,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,  718,   57,   57,   57,   57,   57,   57,
      180,   57,  106,  106,  106,  106,  106,  106,  133,  181,

      134,  135,  122,  182,   57,  100,  100,  100,  100,  100,
      100,  100,  100,  100,   52,  101,  101,  101,  101,  101,
      101,  123,   54,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  319,  107,  107,  107,  107,  107,  107,  152,
      152,  152,  152,  152,  152,  176,  177,  211,  211,  211,
      211,  211,  211,   57,  147,  147,  147,  147,  147,  147,
      147,  147,  147,   52,  148,  148,  148,  148,  148,  148,
      670,   54,  153,  671,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  155,  156,  156,  156,  156,  156,  156,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  368,

      157,  157,  157,  157,  157,  157,  199,  199,  199,  199,
      199,  199,  199,  199,  199,   52,  200,  200,  200,  200,
      200,  200,   52,   54,  229,  230,  231,  272,  273,  274,
       54,  203,  429,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  205,  206,  206,  206,  206,  206,  206,  153,
      472,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      155,  209,  209,  209,  209,  209,  209,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  214,  212,  212,  212,
      212,  212,  212,  233,  246,  153,  718,  262,  262,  262,
      262,  262,  262,  215,   54,  715,  155,  715,  234,  247,

      203,  710,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  205,  260,  260,  260,  260,  260,  260,  153,  715,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  155,
      265,  265,  265,  265,  265,  265,  153,  710,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  267,  268,  268,
      268,  268,  268,  268,  289,  324,  324,  324,  324,  324,
      324,  373,  373,  373,  373,  373,  373,  710,  705,  290,
      203,  710,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  205,  315,  315,  315,  315,  315,  315,  203,  705,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  317,

      318,  318,  318,  318,  318,  318,  153,  705,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  267,  322,  322,
      322,  322,  322,  322,  203,  389,  153,  700,  652,  653,
      654,  390,  655,  391,  705,  205,  203,  718,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  317,  371,  371,
      371,  371,  371,  371,  153,  700,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  267,  376,  376,  376,  376,
      376,  376,  153,  700,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  378,  379,  379,  379,  379,  379,  379,
      408,  203,  433,  433,  433,  433,  433,  433,  691,  700,

      409,  691,  718,  203,  691,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  317,  425,  425,  425,  425,  425,
      425,  203,  661,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  427,  428,  428,  428,  428,  428,  428,  153,
      648,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      378,  431,  431,  431,  431,  431,  431,  203,  648,  473,
      473,  473,  473,  473,  473,  473,  473,  473,  427,  474,
      474,  474,  474,  474,  474,  476,  476,  476,  476,  476,
      476,  153,  691,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  378,  478,  478,  478,  478,  478,  478,  153,

      661,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      480,  481,  481,  481,  481,  481,  481,  203,  639,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  427,  515,
      515,  515,  515,  515,  515,  203,  688,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  517,  518,  518,  518,
      518,  518,  518,  153,  687,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  480,  520,  520,  520,  520,  520,
      520,  522,  522,  522,  522,  522,  522,  203,  686,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  517,  549,
      549,  549,  549,  549,  549,  551,  551,  551,  551,  551,

      551,  153,  685,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  480,  553,  553,  553,  553,  553,  553,  153,
      684,  554,  554,  554,  554,  554,  554,  554,  554,  554,
      555,  556,  556,  556,  556,  556,  556,  203,  648,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  517,  575,
      575,  575,  575,  575,  575,  203,  623,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  577,  578,  578,  578,
      578,  578,  578,  153,  623,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  555,  580,  580,  580,  580,  580,
      580,  582,  582,  582,  582,  582,  582,  203,  661,  598,

      598,  598,  598,  598,  598,  598,  598,  598,  577,  599,
      599,  599,  599,  599,  599,  601,  601,  601,  601,  601,
      601,  153,  639,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  555,  603,  603,  603,  603,  603,  603,  153,
      675,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      605,  606,  606,  606,  606,  606,  606,  203,  674,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  577,  621,
      621,  621,  621,  621,  621,  203,  673,  622,  622,  622,
      622,  622,  622,  622,  622,  622,  623,  624,  624,  624,
      624,  624,  624,  153,  672,  625,  625,  625,  625,  625,

      625,  625,  625,  625,  605,  626,  626,  626,  626,  626,
      626,  628,  628,  628,  628,  628,  628,  203,  669,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  623,  642,
      642,  642,  642,  642,  642,  644,  644,  644,  644,  644,
      644,  153,  648,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  605,  646,  646,  646,  646,  646,  646,  153,
      605,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      648,  649,  649,  649,  649,  649,  649,  203,  605,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  623,  663,
      663,  663,  663,  663,  663,  203,  623,  664,  664,  664,

      664,  664,  664,  664,  664,  664,  661,  665,  665,  665,
      665,  665,  665,  153,  659,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  648,  667,  667,  667,  667,  667,
      667,  203,  639,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  597,  680,  680,  680,  680,  680,  680,  153,
      657,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      648,  682,  682,  682,  682,  682,  682,  203,  656,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  651,  693,
      693,  693,  693,  693,  693,   38,   38,   38,   38,   38,
       38,   38,   40,   40,   40,   40,   40,   40,   40,   44,

       44,   44,   44,   44,   44,   44,   46,  650,   46,   46,
       46,   46,   46,   47,   47,   47,   47,   47,   47,   47,
       99,  648,   99,   99,   99,   99,   99,  102,  102,  102,
      101,  101,  101,  101,  104,  605,  104,  105,  623,  105,
      148,  148,  148,  148,  149,  149,  149,  151,  577,  151,
      156,  156,  156,  200,  200,  200,  200,  201,  201,  201,
      202,  202,  202,  206,  206,  206,  210,  577,  210,  209,
      209,  209,  255,  255,  255,  256,  256,  256,  261,  639,
      261,  260,  260,  260,  265,  265,  265,  268,  268,  268,
      311,  311,  311,  312,  312,  312,  315,  315,  315,  318,

      318,  318,  320,  320,  320,  323,  597,  323,  322,  322,
      322,  365,  365,  365,  366,  366,  366,  369,  369,  369,
      372,  636,  372,  371,  371,  371,  376,  376,  376,  379,
      379,  379,  421,  421,  421,  422,  422,  422,  425,  425,
      425,  428,  428,  428,  432,  635,  432,  431,  431,  431,
      469,  469,  469,  470,  470,  470,  475,  634,  475,  474,
      474,  474,  478,  478,  478,  481,  481,  481,  512,  512,
      512,  513,  513,  513,  515,  515,  515,  518,  518,  518,
      521,  633,  521,  520,  520,  520,  545,  545,  545,  546,
      546,  546,  550,  632,  550,  549,  549,  549,  553,  553,

      553,  556,  556,  556,  572,  572,  572,  573,  573,  573,
      575,  575,  575,  578,  578,  578,  581,  631,  581,  580,
      580,  580,  595,  595,  595,  596,  596,  596,  600,  630,
      600,  599,  599,  599,  603,  603,  603,  606,  606,  606,
      617,  617,  617,  618,  618,  618,  621,  621,  621,  624,
      624,  624,  627,  629,  627,  626,  626,  626,  637,  637,
      637,  638,  638,  638,  640,  605,  640,  643,  555,  643,
      642,  642,  642,  646,  646,  646,  649,  649,  649,  658,
      658,  658,  660,  660,  660,  663,  663,  663,  665,  555,
      665,  668,  623,  668,  667,  667,  667,  676,  676,  676,

      677,  677,  677,  678,  577,  678,  680,  619,  680,  682,
      682,  682,  683,  597,  683,  689,  689,  689,  690,  690,
      690,  693,  547,  693,  694,  616,  694,  695,  695,  695,
      696,  615,  696,  697,  614,  697,  698,  698,  698,  699,
      699,  699,  701,  701,  701,  702,  613,  702,  703,  703,
      703,  704,  704,  704,  706,  706,  706,  707,  612,  707,
      708,  708,  708,  709,  709,  709,  711,  711,  711,  712,
      611,  712,  713,  713,  713,  714,  714,  714,  716,  716,
      716,  644,  610,  644,  717,  717,  717,  609,  608,  607,
      605,  555,  577,  517,  517,  597,  547,  594,  593,  592,

      591,  590,  589,  586,  585,  584,  583,  555,  480,  480,
      577,  517,  103,  547,  471,  571,  570,  569,  568,  567,
      566,  565,  564,  563,  562,  561,  560,  559,  558,  557,
      555,  480,  517,  427,  427,  547,  471,  544,  543,  542,
      541,  540,  539,  538,  537,  536,  535,  534,  533,  532,
      531,  530,  529,  528,  527,  526,  525,  524,  523,  480,
      378,  378,  517,  427,  103,  471,  367,  511,  510,  509,
      508,  507,  506,  505,  504,  503,  502,  501,  500,  499,
      498,  497,  496,  495,  494,  493,  492,  491,  490,  489,
      488,  487,  486,  485,  484,  483,  482,  480,  378,  427,

      317,  317,  471,  367,  468,  467,  466,  465,  464,  463,
      462,  461,  460,  459,  458,  457,  456,  455,  454,  453,
      452,  451,  450,  449,  448,  447,  446,  445,  444,  443,
      442,  441,  440,  439,  438,  437,  436,  435,  434,  378,
      267,  267,  427,  317,  423,  103,  367,  257,  420,  419,
      418,  417,  416,  415,  414,  413,  412,  411,  410,  407,
      406,  405,  404,  403,  402,  401,  400,  399,  398,  397,
      396,  395,  394,  393,  392,  388,  387,  386,  385,  384,
      383,  382,  378,  267,  374,  317,  205,  367,  257,  364,
      363,  362,  361,  360,  359,  358,  357,  356,  355,  354,

      353,  352,  351,  350,  349,  348,  347,  346,  345,  344,
      343,  342,  341,  340,  339,  338,  337,  336,  335,  334,
      333,  332,  331,  330,  329,  328,  327,  326,  325,  267,
      155,  317,  205,  313,  103,  257,  150,  310,  309,  308,
      307,  306,  305,  304,  303,  302,  301,  300,  299,  298,
      297,  296,  295,  294,  293,  292,  291,  288,  287,  286,
      285,  284,  283,  282,  281,  280,  279,  278,  277,  276,
      275,  271,  270,  269,  718,  267,  155,  263,  205,  257,
      150,  718,  254,  253,  252,  251,  250,  249,  248,  245,
      244,  243,  242,  241,  240,  239,  238,  237,  236,  235,

      232,  228,  227,  226,  225,  224,  223,  222,  221,  220,
      219,  218,  217,  216,  213,  155,  205,  103,  150,  198,
      197,  196,  195,  194,  193,  192,  191,  190,  189,  188,
      187,  186,  185,  184,  183,  179,  178,  175,  174,  173,
      172,  171,  170,  169,  168,  167,  166,  165,  164,  163,
      162,  161,  160,  159,  158,  155,  150,  146,  145,  144,
      143,  142,  141,  140,  139,  138,  137,  136,  132,  131,
      130,  129,  128,  127,  126,  125,  124,  121,  120,  119,
      118,  117,  116,  115,  114,  111,  110,  109,  108,  103,
       47,   48,   45,   98,   97,   96,   93,   79,   56,  718,

       48,   45,  718,   39,   39,    7,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718
    } ;

static yyconst flex_int16_t yy_chk[2055] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   10,   10,
       11,   11,   15,   41,   41,  717,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   26,   16,   20,   20,   27,   28,   42,
       42,   26,   31,   27,   28,  737,   31,   43,   43,   28,
       16,   19,   19,   20,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       21,   53,   21,   21,   22,   22,   23,   23,  562,   53,
       22,   21,   33,   33,  562,   22,   22,   30,   32,   32,
       21,   33,   22,   24,   23,   24,   24,   23,   30,   33,
       32,   30,   35,   64,  101,  742,   35,  325,   33,   24,
      325,   64,  101,   24,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
      129,   25,   56,   56,   56,   56,   56,   56,   84,  129,

       84,   84,   73,  129,   25,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   73,   51,   58,   58,   58,   58,   58,   58,   58,
       58,   58,  751,   58,   58,   58,   58,   58,   58,  103,
      103,  103,  103,  103,  103,  126,  126,  155,  155,  155,
      155,  155,  155,   58,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      653,  100,  105,  653,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  757,

      107,  107,  107,  107,  107,  107,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  148,  147,  175,  175,  175,  216,  216,  216,
      148,  151,  767,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  154,
      772,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  159,  157,  157,  157,
      157,  157,  157,  177,  190,  264,  200,  205,  205,  205,
      205,  205,  205,  159,  200,  716,  264,  714,  177,  190,

      204,  713,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  208,  712,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  210,  711,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  232,  267,  267,  267,  267,  267,
      267,  317,  317,  317,  317,  317,  317,  709,  708,  232,
      259,  707,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  261,  706,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,

      261,  261,  261,  261,  261,  261,  266,  704,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  314,  334,  320,  703,  633,  633,
      633,  334,  633,  334,  702,  314,  316,  320,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  321,  701,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  323,  699,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      352,  369,  378,  378,  378,  378,  378,  378,  698,  696,

      352,  695,  369,  370,  690,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  372,  689,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  377,
      682,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  426,  681,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  427,  427,  427,  427,  427,
      427,  430,  678,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  432,

      677,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  473,  676,  473,
      473,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  473,  475,  674,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  479,  673,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  480,  480,  480,  480,  480,  480,  516,  672,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  517,  517,  517,  517,  517,

      517,  519,  671,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  521,
      670,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  548,  667,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  550,  663,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  554,  662,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  555,  555,  555,  555,  555,  555,  576,  660,  576,

      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  577,  577,  577,  577,  577,
      577,  579,  658,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  581,
      657,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  598,  656,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  600,  655,  600,  600,  600,
      600,  600,  600,  600,  600,  600,  600,  600,  600,  600,
      600,  600,  600,  604,  654,  604,  604,  604,  604,  604,

      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  605,  605,  605,  605,  605,  605,  622,  650,  622,
      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
      622,  622,  622,  622,  622,  623,  623,  623,  623,  623,
      623,  625,  649,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  627,
      646,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  641,  645,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  643,  642,  643,  643,  643,

      643,  643,  643,  643,  643,  643,  640,  643,  643,  643,
      643,  643,  643,  647,  639,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  664,  638,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  637,  664,  664,  664,  664,  664,  664,  666,
      636,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  679,  635,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  631,  679,
      679,  679,  679,  679,  679,  719,  719,  719,  719,  719,
      719,  719,  720,  720,  720,  720,  720,  720,  720,  721,

      721,  721,  721,  721,  721,  721,  722,  629,  722,  722,
      722,  722,  722,  723,  723,  723,  723,  723,  723,  723,
      724,  628,  724,  724,  724,  724,  724,  725,  725,  725,
      726,  726,  726,  726,  727,  626,  727,  728,  624,  728,
      729,  729,  729,  729,  730,  730,  730,  731,  621,  731,
      732,  732,  732,  733,  733,  733,  733,  734,  734,  734,
      735,  735,  735,  736,  736,  736,  738,  620,  738,  739,
      739,  739,  740,  740,  740,  741,  741,  741,  743,  618,
      743,  744,  744,  744,  745,  745,  745,  746,  746,  746,
      747,  747,  747,  748,  748,  748,  749,  749,  749,  750,

      750,  750,  752,  752,  752,  753,  617,  753,  754,  754,
      754,  755,  755,  755,  756,  756,  756,  758,  758,  758,
      759,  614,  759,  760,  760,  760,  761,  761,  761,  762,
      762,  762,  763,  763,  763,  764,  764,  764,  765,  765,
      765,  766,  766,  766,  768,  613,  768,  769,  769,  769,
      770,  770,  770,  771,  771,  771,  773,  612,  773,  774,
      774,  774,  775,  775,  775,  776,  776,  776,  777,  777,
      777,  778,  778,  778,  779,  779,  779,  780,  780,  780,
      781,  611,  781,  782,  782,  782,  783,  783,  783,  784,
      784,  784,  785,  610,  785,  786,  786,  786,  787,  787,

      787,  788,  788,  788,  789,  789,  789,  790,  790,  790,
      791,  791,  791,  792,  792,  792,  793,  609,  793,  794,
      794,  794,  795,  795,  795,  796,  796,  796,  797,  608,
      797,  798,  798,  798,  799,  799,  799,  800,  800,  800,
      801,  801,  801,  802,  802,  802,  803,  803,  803,  804,
      804,  804,  805,  607,  805,  806,  806,  806,  807,  807,
      807,  808,  808,  808,  809,  606,  809,  810,  603,  810,
      811,  811,  811,  812,  812,  812,  813,  813,  813,  814,
      814,  814,  815,  815,  815,  816,  816,  816,  817,  602,
      817,  818,  601,  818,  819,  819,  819,  820,  820,  820,

      821,  821,  821,  822,  599,  822,  823,  597,  823,  824,
      824,  824,  825,  596,  825,  826,  826,  826,  827,  827,
      827,  828,  595,  828,  829,  594,  829,  830,  830,  830,
      831,  593,  831,  832,  592,  832,  833,  833,  833,  834,
      834,  834,  835,  835,  835,  836,  591,  836,  837,  837,
      837,  838,  838,  838,  839,  839,  839,  840,  589,  840,
      841,  841,  841,  842,  842,  842,  843,  843,  843,  844,
      588,  844,  845,  845,  845,  846,  846,  846,  847,  847,
      847,  848,  587,  848,  849,  849,  849,  586,  585,  583,
      582,  580,  578,  575,  574,  573,  572,  571,  570,  568,

      567,  566,  565,  561,  560,  559,  557,  556,  553,  552,
      551,  549,  547,  546,  545,  543,  542,  541,  540,  537,
      536,  535,  534,  533,  531,  530,  529,  527,  526,  523,
      522,  520,  518,  515,  514,  513,  512,  511,  510,  507,
      506,  504,  500,  499,  498,  497,  496,  495,  493,  492,
      491,  490,  489,  487,  486,  485,  484,  483,  482,  481,
      478,  477,  476,  474,  471,  470,  469,  468,  467,  464,
      463,  461,  460,  459,  458,  456,  455,  454,  453,  452,
      450,  449,  448,  447,  446,  445,  444,  443,  442,  441,
      440,  439,  438,  437,  436,  435,  434,  433,  431,  428,

      425,  424,  422,  421,  419,  418,  417,  415,  414,  413,
      412,  411,  410,  409,  408,  407,  405,  404,  403,  402,
      401,  398,  396,  395,  394,  393,  392,  391,  390,  389,
      388,  387,  386,  385,  384,  383,  382,  381,  380,  379,
      376,  375,  373,  371,  368,  367,  366,  365,  364,  363,
      362,  360,  359,  358,  357,  356,  355,  354,  353,  350,
      349,  348,  347,  346,  345,  344,  343,  342,  341,  340,
      339,  338,  337,  336,  335,  333,  332,  331,  330,  329,
      328,  326,  324,  322,  319,  318,  315,  312,  311,  310,
      309,  308,  307,  306,  305,  304,  303,  302,  301,  300,

      299,  298,  297,  296,  295,  293,  292,  291,  290,  289,
      288,  287,  286,  285,  284,  283,  282,  281,  279,  278,
      277,  276,  275,  274,  273,  272,  271,  270,  269,  268,
      265,  262,  260,  258,  257,  256,  255,  254,  253,  252,
      251,  250,  249,  248,  247,  246,  244,  242,  241,  240,
      239,  238,  237,  236,  235,  234,  233,  231,  230,  229,
      228,  227,  226,  225,  223,  222,  221,  220,  219,  218,
      217,  215,  214,  213,  212,  211,  209,  207,  206,  202,
      201,  199,  198,  197,  196,  195,  193,  192,  191,  189,
      188,  187,  186,  185,  184,  182,  181,  180,  179,  178,

      176,  174,  173,  172,  171,  169,  168,  166,  165,  164,
      163,  162,  161,  160,  158,  156,  152,  150,  149,  145,
      144,  143,  142,  141,  140,  139,  138,  137,  136,  135,
      134,  133,  132,  131,  130,  128,  127,  125,  124,  123,
      122,  121,  120,  119,  118,  117,  116,  115,  114,  113,
      112,  111,  110,  109,  108,  106,  102,   97,   96,   95,
       94,   93,   92,   91,   90,   87,   86,   85,   83,   82,
       81,   80,   79,   78,   76,   75,   74,   72,   71,   70,
       69,   68,   67,   66,   65,   63,   62,   60,   59,   52,
       48,   47,   44,   39,   37,   36,   34,   29,   18,   17,

       14,   12,    7,    4,    3,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[88] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 1171 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 1276 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 719 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2006 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 60 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 62 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 108 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 125 "SrvLexer.l"
;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno; 
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 133 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 134 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 74:
YY_RULE_SETUP
#line 141 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 150 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 159 "SrvLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 168 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 177 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 186 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 195 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 207 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 214 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 235 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd then no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 267 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd; 
      YYABORT; 
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 277 "SrvLexer.l"
{ 
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) { 
        Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd; 
        YYABORT; 
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 286 "SrvLexer.l"
{ return yytext[0]; } 
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 289 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 1939 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 719 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 719 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 718);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

yyFlexLexer::~yyFlexLexer()
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

	delete [] (yy_state_buf);
	yyfree((yy_start_stack)  );

}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 289 "SrvLexer.l"




