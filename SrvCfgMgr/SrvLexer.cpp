#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 108
#define YY_END_OF_BUFFER 109
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[896] =
    {   0,
        1,    1,    0,    0,    0,    0,  109,  107,    2,    1,
        1,  107,   89,  107,  107,  106,  106,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
       93,   93,  108,    1,    1,    1,    0,  101,   89,    0,
      101,   91,   90,  106,    0,    0,  105,    0,   98,   72,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,   86,  102,
      102,   74,  102,  102,  102,  102,  102,  102,  102,  102,

      102,   17,   18,  102,  102,  102,  102,  102,  102,  102,
      102,   92,   90,  106,    0,    0,    0,   97,  103,   96,
       96,  102,  102,  102,  102,   73,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
       85,  106,    0,    0,    0,    0,   95,   95,    0,   96,
        0,   96,  102,  102,  102,  102,  102,  102,  102,  102,
      102,   80,  102,  102,  102,  102,   30,  102,  102,   41,

      102,  102,  102,  102,  102,  102,  102,  102,    0,  102,
      102,  102,  102,  102,  102,   23,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,   87,  102,
      102,  102,  102,  106,    0,  104,    0,    0,    0,   95,
        0,   95,    0,   96,   96,   96,   96,  102,  102,  102,
      102,   79,  102,  102,    4,  102,  102,  102,  102,  102,
      102,  102,   88,  102,    3,  102,  102,  102,  102,  102,
      102,  102,  102,  102,    0,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,    7,  102,   24,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,    0,

        0,    0,    0,    0,   95,   95,   95,   95,    0,   96,
       96,   96,    0,   96,  102,  102,  102,  102,  102,  102,
      102,  102,   29,  102,  102,  102,   36,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
        0,    0,  102,  102,  102,   34,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,   83,  102,  102,  102,
      102,  102,  102,  102,    0,    0,    0,    0,   95,   95,
       95,    0,   95,    0,    0,   96,   96,   96,   96,  102,
      102,   32,  102,  102,  102,  102,  102,    0,  102,  102,
       82,  102,  102,   56,  102,  102,  102,  102,  102,  102,

      102,  102,  102,  102,  102,  102,    0,    0,  102,  102,
      102,  102,  102,   51,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,   21,  102,  102,  102,  104,    0,
        0,    0,    0,    0,   95,   95,   95,   95,    0,   96,
       96,   96,    0,   96,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,    0,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,   47,  102,  102,
       12,   10,   71,  102,    0,    0,  102,  102,  102,   49,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
        5,  102,  102,  102,   14,    0,    0,    0,    0,   95,

       95,   95,    0,   95,  100,   96,   96,   96,   96,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,    0,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,   11,   55,    0,    0,  102,  102,  102,
       50,  102,  102,  102,  102,   31,  102,  102,    6,   81,
       38,  102,  102,    0,    0,    0,    0,   99,   95,   95,
       95,   95,   96,   96,   96,    0,   96,  102,  102,  102,
      102,  102,  102,  102,  102,   48,  102,    0,  102,  102,
      102,  102,  102,  102,   35,  102,   33,  102,  102,  102,
       13,    0,    0,   44,   43,   37,  102,   22,  102,  102,

       40,   39,  102,  102,  104,    0,    0,   95,   95,   95,
        0,   95,   96,   96,   96,   96,  102,   15,  102,   54,
      102,  102,  102,   59,  102,    0,  102,  102,  102,  102,
       62,  102,  102,  102,  102,  102,   46,   45,  102,  102,
      102,  102,   52,    0,    0,    0,    0,   95,   95,   95,
       95,   96,   96,   96,    0,   96,  102,  102,   84,   61,
      102,  102,    0,   70,  102,  102,  102,   63,   53,  102,
      102,    8,  102,   25,  102,  102,    0,    0,    0,   95,
       95,   95,    0,   95,   96,   96,   96,   96,  102,  102,
       60,  102,    0,  102,  102,  102,  102,  102,   57,  102,

      102,  102,  102,  104,    0,    0,    0,   95,   95,   95,
       95,   96,   96,   96,    0,   96,  102,  102,  102,    0,
      102,  102,  102,  102,  102,  102,  102,   16,   20,    0,
        0,   94,   97,   95,   95,   95,    0,   95,   96,   96,
       96,   96,  102,  102,   27,    0,    0,  102,  102,  102,
       64,  102,   26,  102,  102,    0,    0,   94,    0,   95,
       95,   95,   95,   95,   96,   96,   96,    0,   96,  102,
      102,    0,    0,   28,  102,  102,   65,  102,  102,  102,
      102,  102,  104,   94,   97,   95,    0,   95,   95,   95,
       95,   96,   96,   96,   58,  102,    0,    0,  102,  102,

      102,  102,  102,  102,  102,   19,    0,   94,   95,   95,
       95,   95,   96,   96,   96,  102,    0,    0,  102,  102,
       66,   67,   68,   69,    9,    0,   95,   95,    0,   95,
       95,   96,   42,    0,    0,  102,  102,  104,   95,   95,
       96,    0,    0,    0,  102,  102,  102,    0,   95,   95,
        0,    0,    0,    0,   75,  102,  102,  102,   75,   94,
       95,   95,    0,   77,    0,  102,   77,  102,   94,   95,
       95,    0,    0,   76,  102,   76,    0,   95,   95,   78,
       78,    0,   95,   95,    0,  104,   95,   95,    0,   95,
       95,    0,   95,   95,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
       23,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        1,    1,    1,    1,    1,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    1,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[986] =
    {   0,
        0,    0, 1121, 1120,    0,    0, 1127, 5419, 5419,   73,
       75, 1121,    0, 1118,   72,   72,   34, 1101, 1071,  136,
      186,  233,  280,   71,  208,  338,   38,   73,  197,   89,
      267,  175,  249,  350,  193,  382,   67,  357,  237,  317,
     5419, 1071, 5419,  111,  137,  214, 1077, 5419,    0, 1074,
     1073, 5419,    0,  440, 1056,  459, 5419,    0,  485, 5419,
       61,  528,   86,   89,  182,  265,  279,  184,  239,  381,
      340,  229,  342,  373,  380,  270,  377,  519,  285,  481,
      532,  543,  547,  393,  544,  375,  560,  526,  298,  562,
      564,  426,  551,  561,  575,  571,  576,  598,  584,  615,

      599,  437,  445,  616,  608,  596,  619,  618,  620,  614,
      629, 5419,    0,  687, 1055,  503, 1054,  732,    0,  777,
      706,  820,  633,  626,  812,  628,  820,  679,  810,  815,
      685,  809,  837,  756,  719,  823,  859,  860,  819,  855,
      852,  869,  871,  872,  873,  858,  880,  875,  900,  923,
      902,  912,  905,  908,  904,  925,  911,  921,  913,  948,
      943,  944,  952,  945,  956,  962,  973,  975,  977,  964,
      737, 1035,  757, 1024, 1022, 1020, 1082,  797, 1054, 1127,
     1170, 1101, 1213,  962, 1148,  959, 1069, 1165,  967, 1021,
     1212, 1061, 1201, 1202, 1215, 1216, 1080, 1208, 1233, 1130,

     1211, 1248, 1214, 1247, 1246, 1269, 1263, 1265, 1031, 1266,
     1255, 1299, 1294, 1296, 1303, 1131, 1298, 1300, 1302, 1301,
     1313, 1330, 1334, 1337, 1342, 1345, 1350, 1349, 1210, 1353,
     1365, 1352, 1385, 1146, 1018, 1017, 1016, 1014, 1423, 1445,
     1488, 1464, 1507, 1533, 1552, 1578, 1597, 1006, 1355, 1362,
     1384, 1364, 1590, 1466, 1520, 1576, 1577, 1579, 1599, 1600,
     1595, 1610, 1377, 1630, 1631, 1623, 1627, 1629, 1628, 1634,
     1639, 1635, 1647, 1531, 1668, 1652, 1658, 1679, 1669, 1670,
     1671, 1680, 1685, 1701, 1687, 1387, 1699, 1424, 1704, 1707,
     1702, 1729, 1721, 1714, 1726, 1734, 1737, 1738, 1739, 1001,

      946,  889,  886, 1799, 1810, 1829, 1855, 1874, 1838, 1900,
      876, 1912, 1955, 1931, 1891, 1736, 1943, 1949, 1854, 1950,
     1944, 1475, 2020, 1953, 1945, 1990, 1614, 2005, 2000, 2001,
     2002, 1947, 2011, 2003, 2006, 2007, 2039, 2012, 2036, 2041,
     1729, 1813, 2051, 2045, 2047, 1834, 2054, 2060, 2049, 2074,
     2081, 2059, 2087, 2064, 2079, 2099, 2088, 2103, 2094, 2101,
     2097, 2115, 2138, 2110,  844,  840,  838, 2173, 2184,  833,
     2198, 2241, 2217, 2260, 2286, 2297, 2316, 2342, 2361, 2363,
     2111, 2219, 2339, 2344, 2341, 2358, 2362, 2092, 2393, 2360,
     2126, 2403, 2373, 2140, 2392, 2397, 2415, 2425, 2220, 2426,

     2412, 2430, 2443, 2444, 2446, 2381, 2185, 2242, 2433, 2447,
     2449, 2460, 2462, 2276, 2485, 2471, 2455, 2479, 2500, 2482,
     2466, 2496, 2501, 2502, 2284, 2510, 2514, 2382,  803,  802,
      801,  800, 2572, 2583, 2594, 2613, 2639, 2658, 2622, 2684,
      799, 2696, 2739, 2715, 2717, 2725, 2733, 2638, 2737, 2729,
     2756, 2770, 2734, 2732, 2311, 2762, 2784, 2785, 2775, 2774,
     2780, 2789, 2798, 2803, 2778, 2776, 2808, 2345, 2816, 2814,
     2477, 2507, 2581, 2821, 2646, 2808, 2832, 2838, 2841, 2823,
     2843, 2860, 2854, 2852, 2859, 2872, 2865, 2873, 2863, 2882,
     2866, 2890, 2903, 2901, 2871,  798,  797,  787, 2961, 2972,

      758, 2984, 3027, 3003, 3012, 3072, 3046, 3117, 3091, 3025,
     2893, 3106, 3014, 3115, 3113, 3108, 3111, 3135, 3110, 2902,
     3138, 3114, 3149, 3166, 3154, 3170, 3151, 3153, 3171, 3190,
     3165, 3193, 3160, 2902, 2926, 3071, 3178, 3189, 3198, 3202,
     3185, 3203, 3217, 3212, 3218, 3187, 3207, 3234, 3209, 3210,
     3214, 3239, 3253,  757,  746,  745,  743, 3297, 3313, 3332,
     3358, 3377, 3403,  742, 3415, 3458, 3434, 3252, 3251, 3444,
     3447, 3448, 3452, 3357, 3475, 3222, 3459, 3309, 3453, 3394,
     3497, 3499, 3498, 3495, 3300, 3510, 3311, 3496, 3492, 3500,
     3489, 3498, 3496, 3494, 3502, 3503, 3539, 3504, 3543, 3548,

     3511, 3533, 3535, 3556,  740,  713,  712, 3614,  711, 3626,
     3669, 3645, 3714, 3688, 3759, 3733, 3568, 3540, 3547, 3544,
     3546, 3719, 3656, 3549, 3762, 3556, 3749, 3757, 3756, 3647,
     3551, 3758, 3761, 3771, 3780, 3796, 5419, 5419, 3800, 3791,
     3793, 3804, 3554,  710,  709,  708,  674, 3864, 3883, 3909,
     3928, 3954,  673, 3966, 4009, 3985, 3798, 3799, 3579, 3667,
     3987, 3908, 3704, 3795, 4004, 3998, 4007, 3802, 3803, 4022,
     4026, 3843, 4027, 3851, 4009, 4040,  672,  670,  669, 4098,
      658, 4110, 4153, 4129, 4198, 4172, 4243, 4217, 3896, 4203,
     3970, 4232,  666, 4023, 4089, 4131, 4244, 4235, 4012, 4240,

     4237, 4241, 4264,  653,  652,  625,  555, 4324, 4306, 4369,
     4343, 4388,  553, 4414, 4457, 4433, 4435, 4185, 4452, 4461,
     4245, 4472, 4311, 4471, 4473, 4453, 4460, 4132, 4242,  551,
      547,  544,    0, 4533,  543, 4545, 4588, 4564, 4633, 4607,
     4678, 4652, 4458, 4646, 4246, 4312, 4327, 4680, 4575, 4670,
     4356, 4697, 4367, 4683, 4681,  542,  540,  511,  510,  509,
     4757, 4741, 4802, 4776, 4821,  508, 4847,    0, 4866, 4674,
     4679, 4438, 4465, 4456, 4800, 4693, 4487, 4873, 4524, 4755,
     4850, 4861,  507,  506, 5419,  505,    0, 4908,  504, 4933,
     4921, 4978, 4952,    0, 4567, 4863, 4588, 4694, 4966, 4975,

     4789, 4971, 4965, 4996, 4972, 4694,  466,  465,  464,  463,
     5056, 5033, 5075,  462,    0, 5061, 4697,    0, 5057, 5056,
     4744, 4848, 4911, 4968, 4973,  461,  460,  424,    0, 5101,
     5419,    0, 5043,    0, 5075, 5131, 5114,  416,  414,  412,
     5419, 5117, 5076, 5067, 5119, 5125, 5111,  411,  408,  407,
        0, 5110, 5113, 5108, 5419, 5135, 5120, 5118, 5108,  406,
      361,  358, 5113, 5419, 5141, 5149, 5136, 5170,  357,  353,
      348,    0, 5162, 5419, 5172, 5153,  325,  317,  311, 5419,
     5154,    0,  307,  306,    0,  305,  276,  267,  266,  262,
      260,    0,  257,  256, 5419, 5242, 5246, 5250, 5254, 5258,

     5262, 5264,  270, 5266, 5268, 5270, 5272, 5274, 5276, 5278,
     5280, 5282, 5284, 5288, 5290, 5292, 5294, 5296, 5298, 5300,
     5302, 5304, 5306, 5308, 5310, 5312, 5314, 5316, 5318, 5320,
     5322, 5324, 5326, 5328, 5330, 5332, 5334, 5336, 5338, 5340,
      261, 5342, 5344, 5346,  241, 5348, 5350, 5352,  231,  230,
     5354, 5356, 5358,  228, 5362, 5366, 5368, 5370,  219,  217,
     5374, 5378, 5380, 5382, 5384, 5386, 5388,  212, 5390, 5392,
     5394, 5396, 5398,  145, 5400, 5402, 5404,  131, 5406,  117,
     5408, 5410, 5412,   80, 5414
    } ;

static yyconst flex_int16_t yy_def[986] =
    {   0,
      895,    1,  896,  896,  897,  897,  895,  895,  895,  895,
      895,  898,  899,  900,  895,  895,   16,  895,  895,  895,
       20,   20,   22,   22,   22,   22,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      895,  895,  895,  895,  895,  895,  898,  895,  899,  900,
      895,  895,  901,  895,  902,   54,  895,  903,  895,  895,
       26,   26,   62,   62,   26,   26,   26,   26,   62,   26,
       26,   62,   26,   26,   26,   26,   26,   26,   62,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  895,  901,  895,  904,  114,  905,  895,  903,  895,
      120,   62,  122,  122,   26,   26,   26,  122,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  895,  172,  906,  907,  908,  895,  177,  895,  895,
      895,  180,  122,  183,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,  895,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  173,  173,  907,  909,  910,  895,  895,
      895,  240,  895,  895,  244,  895,  246,  183,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  895,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,  911,

      895,  912,  913,  895,  895,  305,  895,  307,  895,  895,
      895,  895,  895,  312,   26,   26,   26,   26,   26,   26,
       26,   26,  914,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      895,  895,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  915,  916,  917,  895,  895,  895,
      895,  895,  371,  895,  895,  895,  376,  895,  378,   26,
       26,   26,   26,   26,   26,   26,   26,  895,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,  895,  895,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  912,  895,
      918,  919,  895,  895,  895,  435,  895,  437,  895,  895,
      895,  895,  895,  442,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  895,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  895,  895,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  920,  921,  922,  895,  895,

      895,  895,  895,  502,  895,  895,  506,  895,  508,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,  895,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  895,  895,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  923,  895,  924,  925,  895,  895,  559,
      895,  561,  895,  895,  895,  895,  565,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  895,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  895,  895,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,  926,  927,  928,  895,  895,  895,
      895,  610,  895,  613,  895,  615,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  895,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,  895,  895,   26,   26,
       26,   26,   26,  929,  895,  930,  931,  895,  648,  895,
      650,  895,  895,  895,  895,  654,   26,   26,   26,   26,
       26,   26,  895,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,  932,  933,  934,  895,
      895,  895,  895,  682,  895,  685,  895,  687,   26,   26,
       26,   26,  895,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,  935,  895,  936,  937,  895,  708,  895,
      710,  895,  895,  895,  895,  714,   26,   26,   26,  895,
       26,   26,   26,   26,   26,   26,   26,   26,   26,  938,
      939,  940,  941,  895,  895,  895,  895,  736,  895,  739,
      895,  741,   26,   26,   26,  895,  895,   26,   26,   26,
       26,   26,   26,   26,   26,  942,  895,  943,  895,  944,
      895,  761,  895,  763,  895,  895,  895,  945,  767,   26,
       26,  895,  895,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  946,  947,  895,  948,  949,  895,  895,  895,
      790,  895,  792,  950,   26,   26,  895,  895,   26,   26,

       26,   26,   26,   26,   26,   26,  951,  895,  952,  953,
      895,  811,  895,  895,  954,   26,  895,  955,   26,  956,
       26,   26,   26,   26,   26,  957,  895,  958,  959,  895,
      895,  960,   26,  961,  895,  962,   26,  963,  964,  965,
      895,  895,  895,  895,   26,   26,   26,  966,  895,  967,
      968,  895,  895,  895,  895,   26,   26,   26,   26,  969,
      970,  971,  895,  895,  895,   26,   26,   26,  972,  895,
      973,  974,  895,  895,   26,   26,  975,  976,  977,  895,
       26,  978,  895,  979,  980,  895,  981,  982,  975,  895,
      983,  984,  985,  895,    0,  895,  895,  895,  895,  895,

      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895
    } ;

static yyconst flex_int16_t yy_nxt[5495] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   27,   27,   29,   30,   31,   32,   33,   27,
       34,   35,   36,   37,   38,   39,   27,   40,   27,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   27,   27,
       29,   30,   31,   32,   33,   27,   34,   35,   36,   37,
       38,   39,   27,   40,   27,   44,   45,   46,   45,   52,
      895,   61,  764,   53,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   55,   62,   56,   56,   56,   56,   56,

       56,   82,   57,  107,   61,   61,  895,   61,   61,   83,
       61,  123,   86,   44,   45,  124,   61,   78,   58,  888,
       62,   56,   56,   56,   56,   56,   56,   82,   57,  107,
       61,   61,   61,  886,   61,   83,   61,  123,   86,   46,
       45,  124,   61,   78,   58,   61,   61,  879,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   55,   61,   62,
       62,   63,   64,   62,   62,   61,   65,   61,   61,   61,
       66,   61,   67,   61,   61,   61,   61,   61,   61,   68,
       61,   61,   61,   61,   61,   62,   62,   63,   64,   62,
       62,   61,   65,   61,   61,   61,   66,   61,   67,   61,

       61,   61,   61,   61,   61,   68,   61,   61,   61,   61,
       61,   62,   62,   91,  862,   92,   44,   45,   61,  841,
       61,  840,   61,   98,   99,   61,  127,   61,   84,   61,
      832,   79,  815,  810,   85,  100,  101,   62,   62,   91,
       61,   92,   61,  794,   61,   61,   61,   80,   61,   98,
       99,   61,  127,   61,   84,   61,   69,   79,   62,   62,
       85,  100,  101,  760,  128,  132,   61,   70,   61,   61,
       71,   61,  119,   80,  110,   93,   61,  892,  892,  136,
       61,  892,   69,  885,   62,   62,   94,  895,  892,   95,
      128,  132,   61,   70,   87,   61,   71,  885,   88,  125,

      110,   93,   61,   62,   89,  126,   61,   72,   61,   90,
       61,   73,   94,   61,   61,   95,   74,   75,   61,  139,
       87,   76,   61,   77,   88,  125,  889,  885,  872,   62,
       89,  126,  885,   72,   61,   90,   61,   73,  872,   61,
       61,   61,   74,   75,  111,  139,  785,   76,   61,   77,
       61,   61,   61,   61,   61,   61,   61,   61,   61,  895,
       61,   61,   61,   61,   61,   61,   61,   61,   61,  872,
      111,  133,   61,   96,  851,   61,  131,   97,  877,  872,
      108,   81,  851,   61,  109,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,  102,  103,  133,   61,   96,

       61,   61,  131,   97,  129,  104,  108,   81,  137,   61,
      109,   61,  130,  105,  134,  135,   61,  147,   61,   61,
       61,  145,  106,   61,   61,   61,   61,  759,  851,  829,
      129,  104,  733,  851,  137,  829,   61,  848,  130,  105,
      134,  135,   61,  147,   61,  829,   61,  145,  106,   61,
       61,   61,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  115,   61,  116,  116,  116,  116,  116,  116,   61,
       57,  116,  116,  116,  116,  116,  116,  116,  116,  116,
       61,  787,  707,  768,  829,  787,  759,  118,   61,  116,
      116,  116,  116,  116,  116,   61,   57,  120,  120,  120,

      120,  120,  120,  120,  120,  120,   61,  140,  121,  121,
      121,  121,  121,  121,   61,  173,  173,  173,  173,  173,
      173,  173,  173,  173,   61,  737,  787,  759,  807,  715,
      787,  785,  759,  140,  121,  121,  121,  121,  121,  121,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  115,
       61,  122,  122,  122,  122,  122,  122,  138,   65,  141,
      152,  707,   61,  647,  683,  759,  142,  149,  707,   61,
      143,   61,  118,  146,  655,   61,  733,  122,  122,  122,
      122,  122,  122,  138,   65,  141,   61,   61,   61,  144,
       61,  148,  142,  149,   61,   61,  143,   61,  153,  146,

      150,   61,  154,   61,   61,   61,  151,   61,  156,  155,
      157,  158,   61,   61,   61,  144,   61,  148,   61,   61,
       61,  159,  160,  163,  153,  164,  150,   61,  154,   61,
       61,   61,  151,   61,  156,  155,  157,  158,  161,  166,
       61,   61,   61,  165,   61,   61,  707,  159,  160,  163,
      167,   61,  168,   61,  170,  162,  169,   61,   61,   61,
      184,   61,   61,   61,  161,  166,  185,   61,   61,  165,
      171,   61,   61,  647,  730,  720,  167,   61,  168,  611,
      170,  162,  169,   61,   61,   61,  184,   61,   61,   61,
      707,  647,  185,  557,  566,  118,  171,   61,   61,  172,

      172,  172,  172,  172,  172,  172,  172,  172,   55,  188,
      173,  173,  173,  173,  173,  173,  895,   57,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  191,   61,  647,
      557,  118,  503,  647,  557,  188,  173,  173,  173,  173,
      173,  173,  195,   57,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  191,   61,  178,  178,  178,  178,  178,
      178,  644,   61,  443,  118,  194,  557,  432,  195,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  432,  372,
       61,  178,  178,  178,  178,  178,  178,  179,   61,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  181,   61,

      182,  182,  182,  182,  182,  182,   61,  895,  557,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  432,  118,
      313,  118,  432,  303,  496,   61,  182,  182,  182,  182,
      182,  182,  183,  183,  183,  183,  183,  183,  183,  183,
      183,   55,  190,  183,  183,  183,  183,  183,  183,  186,
      187,  189,   61,   61,  241,   61,  192,  196,   61,  432,
      199,  303,   61,   61,  193,  303,   61,  206,  190,  183,
      183,  183,  183,  183,  183,  186,  187,  189,   61,   61,
       61,   61,  192,  196,   61,  197,  199,  198,   61,   61,
      193,  200,   61,  201,  202,   61,  203,  181,   61,  204,

      205,   61,   61,   61,  208,  207,   61,  118,  209,  210,
      303,  197,   61,  198,   61,   61,   61,  200,   61,  201,
      202,   61,  203,   61,   61,  204,  205,   61,   61,   61,
      208,  207,  211,  212,  220,  218,  217,  213,   61,  216,
       61,   61,   61,   61,   61,   61,  214,   61,   61,   61,
      215,   61,  219,  222,   61,   61,   61,  223,  221,  212,
      220,  218,  217,  213,   61,  216,   61,  176,   61,   61,
      227,   61,  214,   61,   61,  225,  215,   61,  219,  222,
       61,   61,   61,  228,  221,  224,   61,   61,   61,  229,
       61,   61,   61,  226,   61,   61,  227,  233,  230,   61,

      249,  225,   61,  232,  252,   61,  231,   61,  255,  228,
       61,  224,   61,   61,   61,  229,   61,   61,   61,  226,
       61,   61,  118,  233,  230,   61,  249,  895,   61,  232,
      252,   61,  231,   61,  255,  303,   61,  176,  300,  895,
      275,  118,   61,  176,   61,  176,   61,  234,  234,  234,
      234,  234,  234,  234,  234,  234,   55,  256,  235,  235,
      235,  235,  235,  235,   61,   57,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  176,  118,  118,  253,   50,
       51,   48,  112,  256,  235,  235,  235,  235,  235,  235,
       61,   57,  239,   60,  240,  240,  240,  240,  240,  240,

      240,  240,  240,  241,   61,  242,  242,  242,  242,  242,
      242,  895,   61,  245,  245,  245,  245,  245,  245,  245,
      245,  245,   59,   61,   51,   48,  895,   42,   42,  895,
       61,  242,  242,  242,  242,  242,  242,  179,   61,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  181,   61,
      245,  245,  245,  245,  245,  245,  895,  250,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  895,  895,  895,
      895,  895,  895,   61,   61,  251,  245,  245,  245,  245,
      245,  245,  246,  246,  246,  246,  246,  246,  246,  246,
      246,   61,  254,  247,  247,  247,  247,  247,  247,   61,

       61,  251,  895,  895,  895,  895,  895,  895,   61,  895,
      895,  895,  895,  895,  895,  895,  895,   61,  254,  247,
      247,  247,  247,  247,  247,  248,  248,  248,  248,  248,
      248,  248,  248,  248,   61,  257,  248,  248,  248,  248,
      248,  248,  258,  259,   61,   61,  260,  261,  262,  895,
      895,   61,  264,   61,   61,   61,  266,   61,   61,   61,
      263,  257,  248,  248,  248,  248,  248,  248,  258,  259,
       61,   61,  260,  261,  262,  265,   61,   61,  264,   61,
       61,   61,  266,   61,   61,   61,  263,  267,  268,   61,
       61,   61,  276,  273,  269,  274,  278,  895,   61,  895,

      895,  265,   61,  270,  271,  272,   61,  277,   61,   61,
      895,  895,   61,  267,  268,   61,   61,   61,  276,  273,
      269,  274,  278,  281,   61,  283,  284,  285,  280,  270,
      271,  272,   61,  277,   61,   61,  279,   61,   61,   61,
      282,   61,   61,   61,   61,   61,   61,  895,  286,  281,
      895,  283,  284,  285,  280,  287,   61,  288,  295,  895,
      289,  895,  279,   61,  291,   61,  282,   61,   61,   61,
       61,   61,   61,   61,  286,  290,  296,   61,  292,  895,
       61,  287,   61,  288,  294,   61,  289,  293,   61,  298,
      291,  297,   61,   61,  299,   61,   61,  315,   61,   61,

      316,  290,  296,   61,  292,   61,   61,   61,   61,  895,
      294,   61,  895,  293,   61,  298,  895,  297,   61,   61,
       61,   61,   61,  315,   61,  317,  316,   61,   61,  895,
       61,   61,  895,   61,   61,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  895,  895,   61,  895,  895,  895,
      895,  317,  895,   61,   61,  239,   61,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  241,   61,  306,  306,
      306,  306,  306,  306,  895,  321,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  895,  895,  895,  895,  895,
      895,  895,  895,   61,  306,  306,  306,  306,  306,  306,

      307,  307,  307,  307,  307,  307,  307,  307,  307,   61,
      387,  308,  308,  308,  308,  308,  308,  309,   61,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  895,  322,
      895,  895,  895,  895,  895,   61,  387,  308,  308,  308,
      308,  308,  308,  179,   61,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  181,  340,  311,  311,  311,  311,
      311,  311,  895,   61,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  895,   61,  895,  895,  895,  895,  895,
      895,  340,  311,  311,  311,  311,  311,  311,  179,   61,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  313,

       61,  314,  314,  314,  314,  314,  314,  895,  324,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  323,   61,
       61,  325,   61,  318,  319,  320,  326,  314,  314,  314,
      314,  314,  314,   61,  324,  895,  327,  328,   61,  330,
      331,  329,   61,   61,  323,   61,   61,  325,   61,  318,
      319,  320,  326,   61,  332,  333,  339,   61,  338,   61,
      334,  336,  327,  328,   61,  335,   61,  329,   61,   61,
       61,   61,   61,   61,   61,  895,  337,   61,   61,   61,
      332,  333,   61,   61,  338,  344,  334,  336,  895,  343,
       61,  335,   61,  347,  341,   61,   61,   61,   61,   61,

       61,   61,  337,   61,   61,  346,  345,  348,   61,  342,
      351,  344,   61,   61,   61,  343,   61,  349,  895,  347,
      341,   61,   61,   61,  895,  350,  353,   61,   61,  352,
       61,  346,  345,  348,  355,  342,  356,  359,   61,   61,
       61,  354,   61,  349,   61,   61,  362,   61,   61,   61,
       61,  350,  353,  895,   61,  352,   61,   61,  357,  381,
      355,  358,  356,  359,   61,  364,  407,  354,   61,   61,
       61,   61,   61,   61,  360,  361,   61,   61,  363,   61,
       61,   61,   61,   61,  357,  381,  895,  358,  895,  895,
       61,  364,  407,  895,  895,   61,  895,  895,   61,  895,

      360,  361,  895,   61,  363,   61,   61,   61,   61,  368,
      895,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      239,  895,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  241,  895,  370,  370,  370,  370,  370,  370,  895,
      408,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  370,
      370,  370,  370,  370,  370,  239,  408,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  372,   61,  373,  373,
      373,  373,  373,  373,  895,  384,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  895,  895,   61,  895,  895,

      380,  895,  895,   61,  373,  373,  373,  373,  373,  373,
      179,  384,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  181,  179,   61,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  313,   61,  377,  377,  377,  377,  377,
      377,  895,  895,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  895,  895,  392,  895,  895,  895,  895,  895,
       61,  377,  377,  377,  377,  377,  377,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  383,  385,  379,  379,
      379,  379,  379,  379,  382,  386,   61,   61,   61,  391,
       61,  398,   61,   61,  895,  895,   61,  895,  895,  895,

      895,  895,  383,  385,  379,  379,  379,  379,  379,  379,
      382,  386,   61,   61,   61,  391,   61,  398,   61,   61,
      388,  388,   61,  388,  388,  388,  388,  388,  388,  389,
      393,  388,  394,   61,  399,  395,  396,  397,  400,  895,
      401,  388,  388,   61,   61,   61,   61,  404,   61,   61,
       61,  402,  895,  895,   61,   61,  393,  895,  394,   61,
      399,  395,  396,  397,  400,  403,  401,  405,  417,   61,
       61,   61,   61,  404,   61,   61,   61,  402,  406,   61,
       61,   61,   61,  414,   61,  410,  409,  411,   61,  413,
       61,  403,   61,  405,   61,  412,  418,   61,  895,  419,

      895,  415,   61,   61,  406,   61,  416,   61,   61,  414,
       61,  410,  409,  411,   61,  413,   61,   61,   61,  420,
       61,  412,   61,   61,   61,  419,  421,  415,   61,   61,
       61,   61,  416,   61,  422,  423,  455,   61,  424,  425,
       61,  428,   61,   61,   61,  420,   61,  427,   61,  426,
       61,  448,  421,   61,   61,  895,   61,   61,   61,  895,
      422,  423,  455,   61,  424,  425,   61,  428,   61,   61,
       61,  895,   61,  895,  895,  426,  895,  448,  895,   61,
       61,   61,  895,   61,   61,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  239,   61,  434,  434,  434,  434,

      434,  434,  434,  434,  434,  241,  895,   61,  239,   61,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  372,
      475,  436,  436,  436,  436,  436,  436,  895,  449,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  895,  895,
      895,  895,  895,  895,  895,  467,  475,  436,  436,  436,
      436,  436,  436,  437,  437,  437,  437,  437,  437,  437,
      437,  437,   61,   61,  438,  438,  438,  438,  438,  438,
      439,  467,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  895,  476,  895,  895,  895,  895,  895,   61,   61,
      438,  438,  438,  438,  438,  438,  179,  895,  375,  375,

      375,  375,  375,  375,  375,  375,  375,  179,  476,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  313,   61,
      441,  441,  441,  441,  441,  441,  895,   61,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  895,  520,  895,
      895,  895,  895,  895,  895,   61,  441,  441,  441,  441,
      441,  441,  179,   61,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  443,  520,  444,  444,  444,  444,  444,
      444,  895,  451,  444,  444,  444,  444,  444,  444,  444,
      444,  444,   61,  452,   61,  454,  450,   61,   61,  453,
      895,  444,  444,  444,  444,  444,  444,  445,  451,  895,

      446,   61,  895,   61,  458,   61,  447,  895,   61,  452,
       61,  454,  450,   61,   61,  453,   61,  462,  456,  463,
      895,  474,  495,  445,   61,   61,  446,   61,  457,   61,
      458,   61,  447,  459,  464,   61,   61,  458,  465,  460,
       61,  461,   61,  462,  456,  463,   61,  474,  495,  469,
       61,   61,  466,  468,  457,   61,  477,  470,   61,  459,
      464,   61,   61,  458,  465,  460,   61,  461,   61,   61,
      471,  472,   61,   61,  473,  469,   61,  895,  466,  468,
      485,   61,  477,  470,   61,  895,   61,   61,  895,   61,
       61,  478,   61,  479,   61,   61,  471,  472,   61,   61,

      473,  480,   61,   61,  481,   61,  485,  489,  484,   61,
      486,  482,   61,   61,   61,   61,   61,  478,   61,  479,
       61,  483,   61,  487,   61,   61,  488,  480,   61,   61,
      481,   61,  490,  489,  484,   61,  486,  482,  492,   61,
       61,  493,  491,   61,   61,   61,   61,  483,   61,  487,
       61,   61,  488,   61,   61,  494,  895,   61,  490,  895,
      895,  895,  895,  895,  492,   61,  895,  493,  491,   61,
       61,   61,  895,  895,  895,  895,   61,  895,  895,   61,
      895,  494,  499,   61,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  239,  895,  434,  434,  434,  434,  434,

      434,  434,  434,  434,  239,  895,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  372,  895,  501,  501,  501,
      501,  501,  501,  895,   61,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  501,  501,  501,  501,  501,  501,  239,
       61,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      503,  513,  504,  504,  504,  504,  504,  504,  895,  536,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  895,
      895,   61,  895,  895,  895,  895,  895,  513,  504,  504,
      504,  504,  504,  504,  179,  536,  375,  375,  375,  375,

      375,  375,  375,  375,  375,  313,  179,   61,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  443,  895,  507,
      507,  507,  507,  507,  507,  895,  895,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  895,  895,  515,  895,
      895,  895,  895,  895,  510,  507,  507,  507,  507,  507,
      507,  508,  508,  508,  508,  508,  508,  508,  508,  508,
       61,  511,  509,  509,  509,  509,  509,  509,   61,  512,
      510,  514,   61,  895,  895,   61,   61,   61,  519,  895,
       61,  895,  518,  516,  895,  531,   61,  511,  509,  509,
      509,  509,  509,  509,   61,  512,  521,  514,   61,   61,

      517,   61,   61,   61,  519,   61,   61,  522,  518,  516,
      524,  525,  523,   61,  526,  895,  527,   61,   61,   61,
      895,   61,  521,   61,  530,   61,  517,   61,   61,  529,
      895,   61,   61,  522,  528,  532,  524,  525,  523,   61,
      526,   61,  527,   61,   61,   61,   61,   61,  534,   61,
      530,   61,  537,   61,   61,  529,  533,   61,   61,   61,
      528,  532,  535,  538,   61,  539,   61,   61,  540,  542,
      895,  895,   61,  541,  534,   61,  895,   61,  537,  543,
      895,   61,  533,   61,   61,   61,   61,  544,  535,  538,
       61,  539,   61,  545,  540,   61,  547,   61,  546,  541,

      548,   61,   61,   61,  549,  543,   61,   61,   61,   61,
       61,  550,   61,  544,   61,   61,   61,  551,  895,  545,
      895,   61,  547,   61,  546,   61,  548,  569,   61,   61,
      549,  552,   61,   61,   61,   61,   61,  550,  578,  553,
       61,   61,   61,  551,   61,   61,   61,  895,  895,  895,
      895,   61,  895,  569,  895,  895,  895,  552,  895,   61,
      895,  895,   61,  895,  578,  553,  895,  895,  895,   61,
       61,   61,   61,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  239,  895,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  372,  239,   61,  559,  559,  559,  559,

      559,  559,  559,  559,  559,  503,  895,  560,  560,  560,
      560,  560,  560,  895,  895,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  560,  560,  560,  560,  560,  560,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  568,  571,
      562,  562,  562,  562,  562,  562,  895,   61,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  895,   61,  895,
      895,  895,  895,  895,  568,  571,  562,  562,  562,  562,
      562,  562,  179,   61,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  443,   61,  564,  564,  564,  564,  564,

      564,  895,  592,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  895,  895,  895,  895,  895,  895,  895,  577,
      895,  564,  564,  564,  564,  564,  564,  179,  592,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  566,  570,
      567,  567,  567,  567,  567,  567,  572,  573,  575,   61,
      574,   61,  895,   61,   61,  895,   61,   61,   61,  895,
      580,  579,  576,  895,  895,  570,  567,  567,  567,  567,
      567,  567,  572,  573,  575,   61,  574,   61,   61,   61,
       61,   61,   61,   61,   61,  581,  580,  579,  576,  582,
      583,  585,   61,  584,   61,  586,   61,   61,  587,  588,

      589,  591,  590,   61,   61,  593,  895,   61,   61,   61,
      895,  581,  895,   61,   61,  582,  583,  585,   61,  584,
       61,  586,   61,   61,  587,  594,  589,  591,   61,   61,
       61,  593,   61,   61,   61,   61,   61,  597,  595,   61,
       61,   61,  596,  601,  598,   61,   61,  599,  895,  600,
       61,  594,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,  597,  595,   61,  603,   61,  596,  601,
      598,   61,   61,  599,  602,  600,   61,   61,   61,   61,
      604,   61,   61,   61,  895,  895,   61,   61,  895,  895,
      895,   61,  603,  617,   61,   61,   61,  895,  618,  895,

      602,  895,  895,   61,  895,  895,  604,  895,   61,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  895,  617,
       61,   61,   61,  239,  618,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  503,  626,  609,  609,  609,  609,
      609,  609,  895,   61,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  895,   61,  895,  895,  895,  895,  895,
      895,  626,  609,  609,  609,  609,  609,  609,  239,   61,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  611,
       61,  612,  612,  612,  612,  612,  612,  895,  623,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  895,  895,

       61,  895,  895,  628,  895,  895,  895,  612,  612,  612,
      612,  612,  612,  179,  623,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  443,  179,   61,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  566,   61,  614,  614,
      614,  614,  614,  614,  895,  895,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  895,  895,  895,  895,  895,
      895,  895,  895,   61,  614,  614,  614,  614,  614,  614,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  622,
      619,  616,  616,  616,  616,  616,  616,   61,  620,  621,
       61,   61,  895,  625,  627,   61,   61,  895,  895,  895,

      895,  624,   61,  895,  895,  622,  619,  616,  616,  616,
      616,  616,  616,   61,  620,  621,   61,   61,   61,  625,
      627,   61,   61,  629,  630,  631,  632,  624,   61,  635,
      634,  636,   61,  633,  637,   61,  638,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,  895,  629,
      630,  631,  632,   61,   61,  635,  634,  636,   61,  633,
      637,   61,  638,   61,   61,   61,   61,   61,   61,   61,
      639,   61,   61,   61,  640,  641,   61,  642,   61,   61,
       61,  643,   61,   61,  658,  895,   61,   61,  659,   61,
       61,   61,   61,  663,   61,  657,  639,   61,  895,   61,

      640,  641,   61,  642,   61,  895,  895,  643,   61,   61,
      658,   61,   61,   61,  659,   61,   61,   61,   61,  663,
       61,  657,   61,   61,  239,   61,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  503,  239,   61,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  611,   61,  649,
      649,  649,  649,  649,  649,  895,  667,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  649,  649,  649,  649,  649,
      649,  650,  650,  650,  650,  650,  650,  650,  650,  650,
       61,  661,  651,  651,  651,  651,  651,  651,  895,   61,

      653,  653,  653,  653,  653,  653,  653,  653,  653,  895,
       61,  895,  895,  895,  895,  895,   61,  661,  651,  651,
      651,  651,  651,  651,  179,   61,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  566,   61,  653,  653,  653,
      653,  653,  653,  895,  693,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  895,  660,  895,  895,  895,  895,
      895,  895,   61,  653,  653,  653,  653,  653,  653,  179,
      693,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      655,  660,  656,  656,  656,  656,  656,  656,   61,  662,
      664,  665,   61,  666,  668,  669,  895,  895,  670,   61,

       61,   61,  895,  895,   61,   61,  671,  895,  656,  656,
      656,  656,  656,  656,   61,  662,  664,  665,   61,  666,
      668,  669,  672,   61,  670,   61,   61,   61,  673,  675,
       61,   61,  671,  674,   61,  676,   61,  689,   61,   61,
       61,   61,   61,   61,  690,   61,   61,   61,  672,   61,
      895,  895,  700,  895,  673,  675,  895,  895,  895,  674,
       61,  676,   61,  689,   61,   61,  895,   61,   61,   61,
      690,   61,   61,   61,  239,  895,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  611,   61,  681,  681,  681,
      681,  681,  681,  895,   61,  681,  681,  681,  681,  681,

      681,  681,  681,  681,  895,  895,  895,  895,  895,  895,
      895,  895,   61,  681,  681,  681,  681,  681,  681,  239,
       61,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      683,  692,  684,  684,  684,  684,  684,  684,  895,  717,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  895,
      895,   61,  895,  895,  895,  895,  895,  692,  684,  684,
      684,  684,  684,  684,  179,  717,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  566,  179,   61,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  655,  895,  686,
      686,  686,  686,  686,  686,  895,  895,  686,  686,  686,

      686,  686,  686,  686,  686,  686,  895,  895,  895,  895,
      895,  895,  895,   61,  691,  686,  686,  686,  686,  686,
      686,  687,  687,  687,  687,  687,  687,  687,  687,  687,
       61,  694,  688,  688,  688,  688,  688,  688,  695,   61,
      691,   61,  696,  895,  895,  698,  721,   61,  697,  895,
       61,  702,   61,  699,  701,   61,   61,  694,  688,  688,
      688,  688,  688,  688,  695,   61,   61,   61,  696,   61,
       61,  698,  721,   61,  697,  703,   61,  702,   61,  699,
      701,   61,  895,   61,  895,  895,  895,  895,  895,  895,
      895,   61,   61,  895,  895,   61,   61,  895,  722,  895,

      895,  703,  895,  895,  895,  895,  895,  895,  239,   61,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  611,
      239,  895,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  683,   61,  709,  709,  709,  709,  709,  709,  895,
      895,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      895,  895,  895,  895,  895,  895,  895,  723,   61,  709,
      709,  709,  709,  709,  709,  710,  710,  710,  710,  710,
      710,  710,  710,  710,   61,   61,  711,  711,  711,  711,
      711,  711,  895,  723,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  895,  744,  895,  895,  895,  895,  895,

       61,   61,  711,  711,  711,  711,  711,  711,  179,  895,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  655,
      895,  713,  713,  713,  713,  713,  713,  895,   61,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  895,  718,
      895,  895,  895,  895,  895,  895,   61,  713,  713,  713,
      713,  713,  713,  179,   61,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  715,  718,  716,  716,  716,  716,
      716,  716,   61,  719,  724,   61,  725,  726,   61,  727,
       61,  895,  728,   61,   61,   61,  748,   61,   61,   61,
      895,  729,  716,  716,  716,  716,  716,  716,  895,  719,

      724,   61,  725,  726,   61,  727,   61,   61,  728,   61,
       61,   61,  748,   61,   61,   61,  895,  729,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  895,  751,  895,
      895,  895,  895,   61,  239,  895,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  683,  772,  735,  735,  735,
      735,  735,  735,  895,   61,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  895,  773,  895,  895,  895,  895,
      895,  895,  772,  735,  735,  735,  735,  735,  735,  239,
       61,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      737,  773,  738,  738,  738,  738,  738,  738,  179,   61,

      375,  375,  375,  375,  375,  375,  375,  375,  375,  655,
       61,  895,  895,  895,  895,  895,  895,  895,  738,  738,
      738,  738,  738,  738,  179,   61,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  715,   61,  740,  740,  740,
      740,  740,  740,  895,  895,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  895,  895,  895,  895,  895,  895,
      895,  797,  743,  740,  740,  740,  740,  740,  740,  741,
      741,  741,  741,  741,  741,  741,  741,  741,   61,  745,
      742,  742,  742,  742,  742,  742,  746,  797,  743,  895,
      895,  755,  798,  754,  752,   61,   61,  749,  770,   61,

      753,   61,  747,   61,   61,  745,  742,  742,  742,  742,
      742,  742,  746,  750,   61,   61,   61,  755,  798,  754,
      752,   61,   61,  749,  770,   61,  753,   61,  747,   61,
       61,  895,  895,  895,  895,  895,  895,  895,  895,  750,
       61,   61,   61,  239,  803,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  683,  239,   61,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  737,   61,  762,  762,
      762,  762,  762,  762,  895,  895,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  895,  895,  895,  895,  895,
      895,  895,  895,   61,  762,  762,  762,  762,  762,  762,

      763,  763,  763,  763,  763,  763,  763,  763,  763,  775,
       61,  764,  764,  764,  764,  764,  764,  895,   61,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  895,  817,
      895,  895,  895,  895,  895,  775,   61,  764,  764,  764,
      764,  764,  764,  179,   61,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  715,  817,  766,  766,  766,  766,
      766,  766,  895,  895,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  895,  771,  895,  895,  895,  895,  895,
      895,  895,  766,  766,  766,  766,  766,  766,  179,   61,
      767,  767,  767,  767,  767,  767,  767,  767,  767,  768,

      771,  769,  769,  769,  769,  769,  769,  774,  776,  781,
      777,  778,  779,   61,  780,   61,  782,   61,  796,  818,
      800,  795,   61,   61,   61,  895,   61,  769,  769,  769,
      769,  769,  769,  774,  776,  781,   61,   61,  834,   61,
       61,  895,  782,   61,  796,  818,  800,  795,   61,   61,
       61,  895,   61,  789,  789,  789,  789,  789,  789,  789,
      789,  789,   61,   61,  834,  895,   61,  239,  804,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  737,  895,
      789,  789,  789,  789,  789,  789,  895,   61,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  895,   61,  895,

      895,  895,  895,  895,  895,  821,  789,  789,  789,  789,
      789,  789,  239,   61,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  799,   61,  791,  791,  791,  791,  791,
      791,  179,   61,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  715,   61,  895,  895,  895,  895,  895,  799,
      895,  791,  791,  791,  791,  791,  791,  179,   61,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  768,   61,
      793,  793,  793,  793,  793,  793,  895,  805,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  801,  806,  816,
      802,   61,  895,   61,  895,  895,  793,  793,  793,  793,

      793,  793,  895,  805,   61,  895,   61,  895,  895,  895,
      895,  895,  895,  895,  806,  816,   61,   61,  239,   61,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  737,
       61,  895,   61,  812,  812,  812,  812,  812,  812,  812,
      812,  812,   61,  239,  895,  811,  811,  811,  811,  811,
      811,  811,  811,  811,   61,  895,  812,  812,  812,  812,
      812,  812,  895,  895,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  895,  895,  895,  895,  895,  895,  895,
       61,  823,  812,  812,  812,  812,  812,  812,  179,  822,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  768,

      820,  814,  814,  814,  814,  814,  814,  819,   61,   61,
      824,   61,  825,  895,   61,   61,   61,  895,   61,  895,
      895,  895,  895,  895,  895,  895,  820,  814,  814,  814,
      814,  814,  814,  819,   61,   61,  895,   61,  825,   61,
       61,   61,   61,  895,   61,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  895,  895,  835,  835,  895,  835,
      835,  835,  835,  835,  835,   61,  239,  835,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  835,  835,  831,
      831,  831,  831,  831,  831,  179,   61,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  768,  833,  836,  854,

       61,  843,  844,  855,   61,  831,  831,  831,  831,  831,
      831,  239,   61,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  895,  833,  836,  854,   61,  843,  844,  855,
       61,  842,  842,  863,  842,  842,  842,  842,  842,  842,
      846,  847,  842,  852,  853,  856,  857,  859,  858,  864,
      865,   61,  842,  842,   61,  873,  867,   61,  866,  863,
      868,   61,   61,   61,  874,  895,  846,  847,   61,  852,
      853,  856,  857,  859,  858,  864,  865,   61,   61,   61,
       61,  873,  867,   61,  866,  880,  868,   61,   61,   61,
      874,  875,   61,  876,   61,  881,   61,   61,  895,  895,

      895,  895,  895,  895,   61,   61,  895,  895,  895,  895,
      895,  880,  895,   61,  895,   61,  895,  875,   61,  876,
      895,  881,   61,   61,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,   61,
      895,   61,   41,   41,   41,   41,   43,   43,   43,   43,
       47,   47,   47,   47,   49,  895,   49,   49,   50,   50,
       50,   50,  113,  895,  113,  113,  117,  117,  174,  174,
      175,  175,  236,  236,  237,  237,  238,  238,  301,  301,
      302,  302,  365,  365,  366,  366,  367,  367,  390,  895,
      390,  390,  429,  429,  430,  430,  431,  431,  497,  497,

      498,  498,  554,  554,  555,  555,  556,  556,  605,  605,
      606,  606,  607,  607,  497,  497,  645,  645,  646,  646,
      677,  677,  678,  678,  679,  679,  704,  704,  705,  705,
      706,  706,  606,  606,  731,  731,  732,  732,  756,  756,
      757,  757,  758,  758,  783,  783,  784,  784,  786,  786,
      678,  678,  808,  808,  809,  809,  826,  826,  827,  827,
      828,  828,  835,  895,  835,  835,  837,  895,  837,  837,
      838,  838,  839,  839,  842,  895,  842,  842,  845,  895,
      845,  845,  731,  731,  849,  849,  850,  850,  860,  860,
      861,  861,  869,  869,  870,  870,  871,  871,  784,  784,

      878,  878,  882,  882,  883,  883,  884,  884,  887,  887,
      890,  890,  891,  891,  893,  893,  894,  894,    7,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895

    } ;

static yyconst flex_int16_t yy_chk[5495] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   10,   10,   11,   11,   15,
       17,   27,  984,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   24,   16,   16,   16,   16,   16,

       16,   28,   16,   37,   61,   24,   17,   27,   24,   28,
       37,   63,   30,   44,   44,   64,   28,   24,   16,  980,
       24,   16,   16,   16,   16,   16,   16,   28,   16,   37,
       61,   24,   30,  978,   24,   28,   37,   63,   30,   45,
       45,   64,   28,   24,   16,   20,   20,  974,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   30,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   21,   21,   32,  968,   32,   46,   46,   32,  960,
       21,  959,   21,   35,   35,   65,   68,   68,   29,   21,
      954,   25,  950,  949,   29,   35,   35,   21,   21,   32,
       29,   32,   25,  945,   32,   25,   21,   25,   21,   35,
       35,   65,   68,   68,   29,   21,   22,   25,   22,   22,
       29,   35,   35,  941,   69,   72,   29,   22,   25,   22,
       22,   25,  903,   25,   39,   33,   22,  894,  893,   76,
       39,  891,   22,  890,   22,   22,   33,  889,  888,   33,
       69,   72,   33,   22,   31,   22,   22,  887,   31,   66,

       39,   33,   22,   23,   31,   67,   39,   23,   66,   31,
       31,   23,   33,   76,   23,   33,   23,   23,   33,   79,
       31,   23,   67,   23,   31,   66,  886,  884,  883,   23,
       31,   67,  879,   23,   66,   31,   31,   23,  878,   76,
       23,   89,   23,   23,   40,   79,  877,   23,   67,   23,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       40,   26,   26,   26,   26,   26,   26,   89,   26,  871,
       40,   73,   26,   34,  870,   26,   71,   34,  869,  862,
       38,   26,  861,   71,   38,   73,   40,   26,   26,   26,
       26,   26,   26,   34,   26,   36,   36,   73,   26,   34,

       38,   26,   71,   34,   70,   36,   38,   26,   77,   71,
       38,   73,   70,   36,   74,   75,   74,   86,   86,   34,
       77,   84,   36,   75,   70,   36,   38,  860,  850,  849,
       70,   36,  848,  840,   77,  839,   84,  838,   70,   36,
       74,   75,   74,   86,   86,  828,   77,   84,   36,   75,
       70,   36,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   84,   54,   54,   54,   54,   54,   54,   92,
       54,   56,   56,   56,   56,   56,   56,   56,   56,   56,
      102,  827,  826,  814,  810,  809,  808,  807,  103,   54,
       54,   54,   54,   54,   54,   92,   54,   59,   59,   59,

       59,   59,   59,   59,   59,   59,  102,   80,   59,   59,
       59,   59,   59,   59,  103,  116,  116,  116,  116,  116,
      116,  116,  116,  116,   80,  789,  786,  784,  783,  766,
      760,  759,  758,   80,   59,   59,   59,   59,   59,   59,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       80,   62,   62,   62,   62,   62,   62,   78,   62,   81,
       93,  757,   78,  756,  735,  732,   82,   88,  731,   88,
       83,   62,  730,   85,  713,   81,  707,   62,   62,   62,
       62,   62,   62,   78,   62,   81,   82,   85,   78,   83,
       83,   87,   82,   88,   93,   88,   83,   62,   94,   85,

       90,   81,   95,   87,   94,   90,   91,   91,   97,   96,
       97,   97,   82,   85,   96,   83,   83,   87,   95,   97,
       93,   98,   99,  101,   94,  104,   90,   99,   95,   87,
       94,   90,   91,   91,   97,   96,   97,   97,  100,  106,
       96,   98,  101,  105,   95,   97,  706,   98,   99,  101,
      107,  105,  108,   99,  110,  100,  109,  110,  100,  104,
      123,  108,  107,  109,  100,  106,  124,   98,  101,  105,
      111,  126,  111,  705,  704,  693,  107,  105,  108,  681,
      110,  100,  109,  110,  100,  104,  123,  108,  107,  109,
      679,  678,  124,  677,  653,  647,  111,  126,  111,  114,

      114,  114,  114,  114,  114,  114,  114,  114,  114,  128,
      114,  114,  114,  114,  114,  114,  121,  114,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  131,  131,  646,
      645,  644,  609,  607,  606,  128,  114,  114,  114,  114,
      114,  114,  135,  114,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  131,  131,  118,  118,  118,  118,  118,
      118,  605,  135,  564,  557,  134,  556,  555,  135,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  554,  501,
      171,  118,  118,  118,  118,  118,  118,  120,  135,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  134,

      120,  120,  120,  120,  120,  120,  171,  178,  498,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  497,  496,
      441,  432,  431,  430,  429,  134,  120,  120,  120,  120,
      120,  120,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  130,  122,  122,  122,  122,  122,  122,  125,
      127,  129,  132,  129,  370,  125,  132,  136,  130,  367,
      139,  366,  139,  127,  133,  365,  136,  146,  130,  122,
      122,  122,  122,  122,  122,  125,  127,  129,  132,  129,
      133,  125,  132,  136,  130,  137,  139,  138,  139,  127,
      133,  140,  136,  141,  142,  141,  143,  311,  140,  144,

      145,  146,  137,  138,  148,  147,  133,  303,  149,  149,
      302,  137,  142,  138,  143,  144,  145,  140,  148,  141,
      142,  141,  143,  147,  140,  144,  145,  146,  137,  138,
      148,  147,  150,  151,  157,  155,  154,  152,  142,  153,
      143,  144,  145,  149,  148,  151,  152,  155,  153,  147,
      152,  154,  156,  159,  157,  152,  159,  160,  158,  151,
      157,  155,  154,  152,  158,  153,  150,  301,  156,  149,
      164,  151,  152,  155,  153,  162,  152,  154,  156,  159,
      157,  152,  159,  165,  158,  161,  161,  162,  164,  166,
      158,  160,  150,  163,  156,  163,  164,  170,  167,  165,

      184,  162,  186,  169,  186,  166,  168,  170,  189,  165,
      189,  161,  161,  162,  164,  166,  167,  160,  168,  163,
      169,  163,  300,  170,  167,  165,  184,  248,  186,  169,
      186,  166,  168,  170,  189,  238,  189,  237,  236,  235,
      209,  176,  167,  175,  168,  174,  169,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  190,  172,  172,
      172,  172,  172,  172,  190,  172,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  117,  115,   55,  187,   51,
       50,   47,   42,  190,  172,  172,  172,  172,  172,  172,
      190,  172,  177,   19,  177,  177,  177,  177,  177,  177,

      177,  177,  177,  177,  192,  177,  177,  177,  177,  177,
      177,  182,  187,  182,  182,  182,  182,  182,  182,  182,
      182,  182,   18,  197,   14,   12,    7,    4,    3,    0,
      192,  177,  177,  177,  177,  177,  177,  180,  187,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  197,
      180,  180,  180,  180,  180,  180,    0,  185,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,    0,    0,
        0,    0,    0,  200,  216,  185,  180,  180,  180,  180,
      180,  180,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  185,  188,  181,  181,  181,  181,  181,  181,  200,

      216,  185,    0,    0,    0,    0,    0,    0,  188,    0,
        0,    0,    0,    0,    0,    0,    0,  185,  188,  181,
      181,  181,  181,  181,  181,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  188,  191,  183,  183,  183,  183,
      183,  183,  193,  194,  193,  194,  195,  196,  198,    0,
        0,  198,  201,  229,  201,  191,  203,  203,  195,  196,
      199,  191,  183,  183,  183,  183,  183,  183,  193,  194,
      193,  194,  195,  196,  198,  202,  199,  198,  201,  229,
      201,  191,  203,  203,  195,  196,  199,  204,  205,  205,
      204,  202,  210,  207,  206,  208,  211,    0,  211,    0,

        0,  202,  199,  206,  206,  206,  207,  210,  208,  210,
        0,    0,  206,  204,  205,  205,  204,  202,  210,  207,
      206,  208,  211,  214,  211,  217,  218,  219,  213,  206,
      206,  206,  207,  210,  208,  210,  212,  213,  206,  214,
      215,  217,  212,  218,  220,  219,  215,    0,  220,  214,
        0,  217,  218,  219,  213,  221,  221,  222,  228,    0,
      223,    0,  212,  213,  224,  214,  215,  217,  212,  218,
      220,  219,  215,  222,  220,  223,  230,  223,  225,    0,
      224,  221,  221,  222,  227,  225,  223,  226,  226,  232,
      224,  231,  228,  227,  233,  232,  230,  249,  249,  222,

      250,  223,  230,  223,  225,  250,  224,  252,  231,    0,
      227,  225,    0,  226,  226,  232,    0,  231,  228,  227,
      263,  232,  230,  249,  249,  251,  250,  251,  233,    0,
      286,  250,    0,  252,  231,  239,  239,  239,  239,  239,
      239,  239,  239,  239,    0,    0,  263,    0,    0,    0,
        0,  251,    0,  251,  233,  240,  286,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  288,  240,  240,
      240,  240,  240,  240,  242,  254,  242,  242,  242,  242,
      242,  242,  242,  242,  242,    0,    0,    0,    0,    0,
        0,    0,    0,  288,  240,  240,  240,  240,  240,  240,

      241,  241,  241,  241,  241,  241,  241,  241,  241,  254,
      322,  241,  241,  241,  241,  241,  241,  243,  322,  243,
      243,  243,  243,  243,  243,  243,  243,  243,    0,  255,
        0,    0,    0,    0,    0,  254,  322,  241,  241,  241,
      241,  241,  241,  244,  322,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  274,  244,  244,  244,  244,
      244,  244,  245,  255,  245,  245,  245,  245,  245,  245,
      245,  245,  245,    0,  274,    0,    0,    0,    0,    0,
        0,  274,  244,  244,  244,  244,  244,  244,  246,  255,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,

      274,  246,  246,  246,  246,  246,  246,  247,  257,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  256,  256,
      257,  258,  258,  253,  253,  253,  259,  246,  246,  246,
      246,  246,  246,  253,  257,    0,  260,  261,  261,  264,
      265,  262,  259,  260,  256,  256,  257,  258,  258,  253,
      253,  253,  259,  262,  266,  267,  273,  327,  272,  253,
      268,  270,  260,  261,  261,  269,  266,  262,  259,  260,
      267,  269,  268,  264,  265,    0,  271,  270,  272,  262,
      266,  267,  271,  327,  272,  277,  268,  270,    0,  276,
      273,  269,  266,  280,  275,  276,  267,  269,  268,  264,

      265,  277,  271,  270,  272,  279,  278,  281,  271,  275,
      284,  277,  279,  280,  281,  276,  273,  282,    0,  280,
      275,  276,  278,  282,    0,  283,  287,  277,  283,  285,
      285,  279,  278,  281,  290,  275,  291,  294,  279,  280,
      281,  289,  287,  282,  284,  291,  297,  289,  278,  282,
      290,  283,  287,    0,  283,  285,  285,  294,  292,  316,
      290,  293,  291,  294,  293,  299,  341,  289,  287,  295,
      284,  291,  292,  289,  295,  296,  290,  296,  298,  316,
      297,  298,  299,  294,  292,  316,    0,  293,    0,    0,
      293,  299,  341,    0,    0,  295,    0,    0,  292,    0,

      295,  296,    0,  296,  298,  316,  297,  298,  299,  304,
        0,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      305,    0,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,    0,  305,  305,  305,  305,  305,  305,  306,
      342,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  305,
      305,  305,  305,  305,  305,  307,  342,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  346,  307,  307,
      307,  307,  307,  307,  308,  319,  308,  308,  308,  308,
      308,  308,  308,  308,  308,    0,    0,  319,    0,    0,

      315,    0,    0,  346,  307,  307,  307,  307,  307,  307,
      310,  319,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  312,  319,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  315,  312,  312,  312,  312,  312,
      312,  314,    0,  314,  314,  314,  314,  314,  314,  314,
      314,  314,    0,    0,  325,    0,    0,    0,    0,    0,
      315,  312,  312,  312,  312,  312,  312,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  318,  320,  313,  313,
      313,  313,  313,  313,  317,  321,  317,  321,  325,  324,
      332,  332,  318,  320,    0,    0,  324,    0,    0,    0,

        0,    0,  318,  320,  313,  313,  313,  313,  313,  313,
      317,  321,  317,  321,  325,  324,  332,  332,  318,  320,
      323,  323,  324,  323,  323,  323,  323,  323,  323,  323,
      326,  323,  328,  326,  333,  329,  330,  331,  334,    0,
      335,  323,  323,  329,  330,  331,  334,  338,  328,  335,
      336,  336,    0,    0,  333,  338,  326,    0,  328,  326,
      333,  329,  330,  331,  334,  337,  335,  339,  352,  329,
      330,  331,  334,  338,  328,  335,  336,  336,  340,  339,
      333,  338,  337,  349,  340,  344,  343,  345,  344,  348,
      345,  337,  349,  339,  343,  347,  353,  347,    0,  354,

        0,  350,  352,  348,  340,  339,  351,  354,  337,  349,
      340,  344,  343,  345,  344,  348,  345,  350,  349,  355,
      343,  347,  355,  347,  351,  354,  356,  350,  352,  348,
      353,  357,  351,  354,  358,  359,  388,  359,  360,  361,
      361,  364,  356,  350,  360,  355,  358,  363,  355,  362,
      351,  381,  356,  364,  381,    0,  353,  357,  362,    0,
      358,  359,  388,  359,  360,  361,  361,  364,  356,  391,
      360,    0,  358,    0,    0,  362,    0,  381,    0,  364,
      381,  363,    0,  394,  362,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  369,  391,  369,  369,  369,  369,

      369,  369,  369,  369,  369,  369,    0,  363,  371,  394,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      407,  371,  371,  371,  371,  371,  371,  373,  382,  373,
      373,  373,  373,  373,  373,  373,  373,  373,    0,    0,
        0,    0,    0,    0,    0,  399,  407,  371,  371,  371,
      371,  371,  371,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  382,  399,  372,  372,  372,  372,  372,  372,
      374,  399,  374,  374,  374,  374,  374,  374,  374,  374,
      374,    0,  408,    0,    0,    0,    0,    0,  382,  399,
      372,  372,  372,  372,  372,  372,  375,    0,  375,  375,

      375,  375,  375,  375,  375,  375,  375,  376,  408,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  414,
      376,  376,  376,  376,  376,  376,  377,  425,  377,  377,
      377,  377,  377,  377,  377,  377,  377,    0,  455,    0,
        0,    0,    0,    0,    0,  414,  376,  376,  376,  376,
      376,  376,  378,  425,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  455,  378,  378,  378,  378,  378,
      378,  379,  384,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  383,  385,  385,  387,  383,  384,  468,  386,
        0,  378,  378,  378,  378,  378,  378,  380,  384,    0,

      380,  386,    0,  390,  390,  387,  380,    0,  383,  385,
      385,  387,  383,  384,  468,  386,  393,  393,  389,  395,
        0,  406,  428,  380,  406,  428,  380,  386,  389,  390,
      390,  387,  380,  392,  396,  395,  389,  389,  397,  392,
      396,  392,  393,  393,  389,  395,  392,  406,  428,  401,
      406,  428,  398,  400,  389,  401,  409,  402,  397,  392,
      396,  395,  389,  389,  397,  392,  396,  392,  398,  400,
      403,  404,  392,  402,  405,  401,  409,    0,  398,  400,
      417,  401,  409,  402,  397,    0,  403,  404,    0,  405,
      410,  410,  411,  411,  398,  400,  403,  404,  417,  402,

      405,  412,  409,  412,  413,  413,  417,  421,  416,  421,
      418,  415,  403,  404,  416,  405,  410,  410,  411,  411,
      471,  415,  418,  419,  417,  420,  420,  412,  415,  412,
      413,  413,  422,  421,  416,  421,  418,  415,  424,  422,
      416,  426,  423,  419,  423,  424,  471,  415,  418,  419,
      472,  420,  420,  426,  415,  427,    0,  427,  422,    0,
        0,    0,    0,    0,  424,  422,    0,  426,  423,  419,
      423,  424,    0,    0,    0,    0,  472,    0,    0,  426,
        0,  427,  433,  427,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  434,    0,  434,  434,  434,  434,  434,

      434,  434,  434,  434,  435,    0,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,    0,  435,  435,  435,
      435,  435,  435,  436,  473,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  435,  435,  435,  435,  435,  435,  437,
      473,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  448,  437,  437,  437,  437,  437,  437,  438,  475,
      438,  438,  438,  438,  438,  438,  438,  438,  438,    0,
        0,  448,    0,    0,    0,    0,    0,  448,  437,  437,
      437,  437,  437,  437,  440,  475,  440,  440,  440,  440,

      440,  440,  440,  440,  440,  440,  442,  448,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,    0,  442,
      442,  442,  442,  442,  442,  444,    0,  444,  444,  444,
      444,  444,  444,  444,  444,  444,    0,    0,  450,    0,
        0,    0,    0,    0,  445,  442,  442,  442,  442,  442,
      442,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      445,  446,  443,  443,  443,  443,  443,  443,  446,  447,
      445,  449,  450,    0,    0,  454,  447,  453,  454,    0,
      449,    0,  453,  451,    0,  466,  445,  446,  443,  443,
      443,  443,  443,  443,  446,  447,  456,  449,  450,  451,

      452,  454,  447,  453,  454,  456,  449,  457,  453,  451,
      459,  460,  458,  452,  461,    0,  462,  460,  459,  466,
        0,  465,  456,  461,  465,  451,  452,  457,  458,  464,
        0,  456,  462,  457,  463,  467,  459,  460,  458,  452,
      461,  463,  462,  460,  459,  466,  464,  465,  470,  461,
      465,  467,  476,  457,  458,  464,  469,  470,  462,  469,
      463,  467,  474,  477,  474,  478,  480,  463,  479,  482,
        0,    0,  464,  481,  470,  477,    0,  467,  476,  483,
        0,  478,  469,  470,  479,  469,  481,  484,  474,  477,
      474,  478,  480,  485,  479,  484,  487,  483,  486,  481,

      488,  477,  485,  482,  489,  483,  489,  478,  487,  491,
      479,  490,  481,  484,  495,  486,  488,  492,    0,  485,
        0,  484,  487,  483,  486,  490,  488,  511,  485,  482,
      489,  493,  489,  492,  487,  491,  511,  490,  520,  494,
      495,  486,  488,  492,  494,  534,  493,    0,    0,    0,
        0,  490,    0,  511,    0,    0,    0,  493,    0,  492,
        0,    0,  511,    0,  520,  494,    0,    0,    0,  535,
      494,  534,  493,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  500,    0,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  502,  535,  502,  502,  502,  502,

      502,  502,  502,  502,  502,  502,    0,  502,  502,  502,
      502,  502,  502,  504,    0,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  502,  502,  502,  502,  502,  502,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  510,  513,
      503,  503,  503,  503,  503,  503,  507,  513,  507,  507,
      507,  507,  507,  507,  507,  507,  507,    0,  510,    0,
        0,    0,    0,    0,  510,  513,  503,  503,  503,  503,
      503,  503,  506,  513,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  510,  506,  506,  506,  506,  506,

      506,  509,  536,  509,  509,  509,  509,  509,  509,  509,
      509,  509,    0,    0,    0,    0,    0,    0,    0,  519,
        0,  506,  506,  506,  506,  506,  506,  508,  536,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  512,
      508,  508,  508,  508,  508,  508,  514,  515,  517,  512,
      516,  516,    0,  519,  517,    0,  515,  522,  514,    0,
      522,  521,  518,    0,    0,  512,  508,  508,  508,  508,
      508,  508,  514,  515,  517,  512,  516,  516,  518,  519,
      517,  521,  515,  522,  514,  523,  522,  521,  518,  524,
      525,  527,  523,  526,  527,  528,  528,  525,  529,  530,

      531,  533,  532,  533,  518,  537,    0,  521,  531,  524,
        0,  523,    0,  526,  529,  524,  525,  527,  523,  526,
      527,  528,  528,  525,  529,  538,  531,  533,  541,  533,
      546,  537,  538,  530,  531,  524,  532,  542,  539,  526,
      529,  539,  540,  547,  543,  540,  542,  544,    0,  545,
      547,  538,  549,  550,  541,  544,  546,  551,  538,  530,
      543,  545,  532,  542,  539,  576,  552,  539,  540,  547,
      543,  540,  542,  544,  548,  545,  547,  548,  549,  550,
      553,  544,  552,  551,    0,    0,  543,  545,    0,    0,
        0,  576,  552,  568,  569,  568,  553,    0,  569,    0,

      548,    0,    0,  548,    0,    0,  553,    0,  552,  558,
      558,  558,  558,  558,  558,  558,  558,  558,    0,  568,
      569,  568,  553,  559,  569,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  578,  559,  559,  559,  559,
      559,  559,  560,  585,  560,  560,  560,  560,  560,  560,
      560,  560,  560,    0,  587,    0,    0,    0,    0,    0,
        0,  578,  559,  559,  559,  559,  559,  559,  561,  585,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      587,  561,  561,  561,  561,  561,  561,  562,  574,  562,
      562,  562,  562,  562,  562,  562,  562,  562,    0,    0,

      574,    0,    0,  580,    0,    0,    0,  561,  561,  561,
      561,  561,  561,  563,  574,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  565,  574,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  580,  565,  565,
      565,  565,  565,  565,  567,    0,  567,  567,  567,  567,
      567,  567,  567,  567,  567,    0,    0,    0,    0,    0,
        0,    0,    0,  580,  565,  565,  565,  565,  565,  565,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  573,
      570,  566,  566,  566,  566,  566,  566,  570,  571,  572,
      571,  572,    0,  577,  579,  573,  579,    0,    0,    0,

        0,  575,  577,    0,    0,  573,  570,  566,  566,  566,
      566,  566,  566,  570,  571,  572,  571,  572,  575,  577,
      579,  573,  579,  581,  582,  583,  584,  575,  577,  589,
      588,  590,  591,  586,  592,  589,  593,  594,  584,  588,
      581,  583,  582,  590,  575,  595,  596,  598,    0,  581,
      582,  583,  584,  586,  601,  589,  588,  590,  591,  586,
      592,  589,  593,  594,  584,  588,  581,  583,  582,  590,
      597,  595,  596,  598,  599,  600,  602,  603,  603,  586,
      601,  604,  597,  618,  619,    0,  599,  620,  621,  621,
      619,  600,  624,  626,  631,  617,  597,  643,    0,  604,

      599,  600,  602,  603,  603,    0,    0,  604,  597,  618,
      619,  617,  599,  620,  621,  621,  619,  600,  624,  626,
      631,  617,  659,  643,  608,  604,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  610,  617,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  659,  610,
      610,  610,  610,  610,  610,  612,  630,  612,  612,  612,
      612,  612,  612,  612,  612,  612,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  610,  610,  610,  610,  610,
      610,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      630,  623,  611,  611,  611,  611,  611,  611,  614,  623,

      614,  614,  614,  614,  614,  614,  614,  614,  614,    0,
      660,    0,    0,    0,    0,    0,  630,  623,  611,  611,
      611,  611,  611,  611,  613,  623,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  660,  613,  613,  613,
      613,  613,  613,  616,  663,  616,  616,  616,  616,  616,
      616,  616,  616,  616,    0,  622,    0,    0,    0,    0,
        0,    0,  622,  613,  613,  613,  613,  613,  613,  615,
      663,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  622,  615,  615,  615,  615,  615,  615,  622,  625,
      627,  628,  627,  629,  632,  633,    0,    0,  634,  629,

      628,  632,    0,    0,  633,  625,  635,    0,  615,  615,
      615,  615,  615,  615,  634,  625,  627,  628,  627,  629,
      632,  633,  636,  635,  634,  629,  628,  632,  639,  641,
      633,  625,  635,  640,  640,  642,  641,  657,  664,  636,
      634,  657,  658,  639,  658,  668,  669,  642,  636,  635,
        0,    0,  672,    0,  639,  641,    0,    0,    0,  640,
      640,  642,  641,  657,  664,  636,    0,  657,  658,  639,
      658,  668,  669,  642,  648,    0,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  672,  648,  648,  648,
      648,  648,  648,  649,  674,  649,  649,  649,  649,  649,

      649,  649,  649,  649,    0,    0,    0,    0,    0,    0,
        0,    0,  672,  648,  648,  648,  648,  648,  648,  650,
      674,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  662,  650,  650,  650,  650,  650,  650,  651,  689,
      651,  651,  651,  651,  651,  651,  651,  651,  651,    0,
        0,  662,    0,    0,    0,    0,    0,  662,  650,  650,
      650,  650,  650,  650,  652,  689,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  654,  662,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,    0,  654,
      654,  654,  654,  654,  654,  656,    0,  656,  656,  656,

      656,  656,  656,  656,  656,  656,    0,    0,    0,    0,
        0,    0,    0,  691,  661,  654,  654,  654,  654,  654,
      654,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      661,  665,  655,  655,  655,  655,  655,  655,  666,  691,
      661,  666,  667,    0,    0,  670,  694,  665,  667,    0,
      667,  675,  675,  671,  673,  699,  661,  665,  655,  655,
      655,  655,  655,  655,  666,  670,  694,  666,  667,  671,
      673,  670,  694,  665,  667,  676,  667,  675,  675,  671,
      673,  699,    0,  676,    0,    0,    0,    0,    0,    0,
        0,  670,  694,    0,    0,  671,  673,    0,  695,    0,

        0,  676,    0,    0,    0,    0,    0,    0,  680,  676,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      682,    0,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  695,  682,  682,  682,  682,  682,  682,  684,
        0,  684,  684,  684,  684,  684,  684,  684,  684,  684,
        0,    0,    0,    0,    0,    0,    0,  696,  695,  682,
      682,  682,  682,  682,  682,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  696,  728,  683,  683,  683,  683,
      683,  683,  686,  696,  686,  686,  686,  686,  686,  686,
      686,  686,  686,    0,  718,    0,    0,    0,    0,    0,

      696,  728,  683,  683,  683,  683,  683,  683,  685,    0,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
        0,  685,  685,  685,  685,  685,  685,  688,  718,  688,
      688,  688,  688,  688,  688,  688,  688,  688,    0,  690,
        0,    0,    0,    0,    0,    0,  690,  685,  685,  685,
      685,  685,  685,  687,  718,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  690,  687,  687,  687,  687,
      687,  687,  690,  692,  697,  692,  698,  700,  698,  701,
      701,    0,  702,  700,  702,  729,  721,  697,  721,  745,
        0,  703,  687,  687,  687,  687,  687,  687,    0,  692,

      697,  692,  698,  700,  698,  701,  701,  703,  702,  700,
      702,  729,  721,  697,  721,  745,  709,  703,  709,  709,
      709,  709,  709,  709,  709,  709,  709,    0,  723,    0,
        0,    0,    0,  703,  708,    0,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  746,  708,  708,  708,
      708,  708,  708,  711,  723,  711,  711,  711,  711,  711,
      711,  711,  711,  711,    0,  747,    0,    0,    0,    0,
        0,    0,  746,  708,  708,  708,  708,  708,  708,  710,
      723,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  747,  710,  710,  710,  710,  710,  710,  712,  751,

      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      753,    0,    0,    0,    0,    0,    0,    0,  710,  710,
      710,  710,  710,  710,  714,  751,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  753,  714,  714,  714,
      714,  714,  714,  716,    0,  716,  716,  716,  716,  716,
      716,  716,  716,  716,    0,    0,    0,    0,    0,    0,
        0,  772,  717,  714,  714,  714,  714,  714,  714,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  717,  719,
      715,  715,  715,  715,  715,  715,  720,  772,  717,    0,
        0,  727,  773,  726,  724,  719,  726,  722,  743,  774,

      725,  743,  720,  727,  717,  719,  715,  715,  715,  715,
      715,  715,  720,  722,  724,  722,  725,  727,  773,  726,
      724,  719,  726,  722,  743,  774,  725,  743,  720,  727,
      777,    0,    0,    0,    0,    0,    0,    0,    0,  722,
      724,  722,  725,  734,  779,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  736,  777,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  779,  736,  736,
      736,  736,  736,  736,  738,    0,  738,  738,  738,  738,
      738,  738,  738,  738,  738,    0,    0,    0,    0,    0,
        0,    0,    0,  779,  736,  736,  736,  736,  736,  736,

      737,  737,  737,  737,  737,  737,  737,  737,  737,  749,
      795,  737,  737,  737,  737,  737,  737,  740,  749,  740,
      740,  740,  740,  740,  740,  740,  740,  740,    0,  797,
        0,    0,    0,    0,    0,  749,  795,  737,  737,  737,
      737,  737,  737,  739,  749,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  797,  739,  739,  739,  739,
      739,  739,  742,    0,  742,  742,  742,  742,  742,  742,
      742,  742,  742,    0,  744,    0,    0,    0,    0,    0,
        0,    0,  739,  739,  739,  739,  739,  739,  741,  744,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,

      744,  741,  741,  741,  741,  741,  741,  748,  750,  754,
      752,  752,  752,  750,  752,  744,  755,  770,  771,  798,
      776,  770,  771,  748,  755,    0,  754,  741,  741,  741,
      741,  741,  741,  748,  750,  754,  776,  806,  817,  750,
      752,    0,  755,  770,  771,  798,  776,  770,  771,  748,
      755,  762,  754,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  776,  806,  817,    0,  752,  761,  780,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,    0,
      761,  761,  761,  761,  761,  761,  764,  821,  764,  764,
      764,  764,  764,  764,  764,  764,  764,    0,  780,    0,

        0,    0,    0,    0,    0,  801,  761,  761,  761,  761,
      761,  761,  763,  821,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  775,  780,  763,  763,  763,  763,  763,
      763,  765,  801,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  775,    0,    0,    0,    0,    0,  775,
        0,  763,  763,  763,  763,  763,  763,  767,  801,  767,
      767,  767,  767,  767,  767,  767,  767,  767,  767,  775,
      767,  767,  767,  767,  767,  767,  769,  781,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  778,  782,  796,
      778,  822,    0,  781,    0,    0,  767,  767,  767,  767,

      767,  767,    0,  781,  782,    0,  796,    0,    0,    0,
        0,    0,    0,    0,  782,  796,  778,  822,  788,  781,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      782,  791,  796,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  778,  790,    0,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  823,    0,  790,  790,  790,  790,
      790,  790,  793,    0,  793,  793,  793,  793,  793,  793,
      793,  793,  793,    0,    0,    0,    0,    0,    0,    0,
      823,  803,  790,  790,  790,  790,  790,  790,  792,  802,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,

      800,  792,  792,  792,  792,  792,  792,  799,  803,  799,
      804,  824,  805,    0,  802,  805,  825,    0,  800,    0,
        0,    0,    0,    0,    0,    0,  800,  792,  792,  792,
      792,  792,  792,  799,  803,  799,    0,  824,  805,  804,
      802,  805,  825,  812,  800,  812,  812,  812,  812,  812,
      812,  812,  812,  812,    0,    0,  820,  820,    0,  820,
      820,  820,  820,  820,  820,  804,  811,  820,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  820,  820,  811,
      811,  811,  811,  811,  811,  813,  833,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  816,  819,  843,

      819,  835,  835,  844,  816,  811,  811,  811,  811,  811,
      811,  830,  833,  830,  830,  830,  830,  830,  830,  830,
      830,  830,    0,  816,  819,  843,  819,  835,  835,  844,
      816,  836,  836,  852,  836,  836,  836,  836,  836,  836,
      837,  837,  836,  842,  842,  845,  845,  847,  846,  853,
      854,  859,  836,  836,  847,  863,  857,  837,  856,  852,
      858,  858,  845,  857,  865,    0,  837,  837,  846,  842,
      842,  845,  845,  847,  846,  853,  854,  859,  856,  867,
      847,  863,  857,  837,  856,  873,  858,  858,  845,  857,
      865,  866,  866,  868,  846,  875,  876,  881,    0,    0,

        0,    0,    0,    0,  856,  867,    0,    0,    0,    0,
        0,  873,    0,  868,    0,  875,    0,  866,  866,  868,
        0,  875,  876,  881,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  868,
        0,  875,  896,  896,  896,  896,  897,  897,  897,  897,
      898,  898,  898,  898,  899,    0,  899,  899,  900,  900,
      900,  900,  901,    0,  901,  901,  902,  902,  904,  904,
      905,  905,  906,  906,  907,  907,  908,  908,  909,  909,
      910,  910,  911,  911,  912,  912,  913,  913,  914,    0,
      914,  914,  915,  915,  916,  916,  917,  917,  918,  918,

      919,  919,  920,  920,  921,  921,  922,  922,  923,  923,
      924,  924,  925,  925,  926,  926,  927,  927,  928,  928,
      929,  929,  930,  930,  931,  931,  932,  932,  933,  933,
      934,  934,  935,  935,  936,  936,  937,  937,  938,  938,
      939,  939,  940,  940,  942,  942,  943,  943,  944,  944,
      946,  946,  947,  947,  948,  948,  951,  951,  952,  952,
      953,  953,  955,    0,  955,  955,  956,    0,  956,  956,
      957,  957,  958,  958,  961,    0,  961,  961,  962,    0,
      962,  962,  963,  963,  964,  964,  965,  965,  966,  966,
      967,  967,  969,  969,  970,  970,  971,  971,  972,  972,

      973,  973,  975,  975,  976,  976,  977,  977,  979,  979,
      981,  981,  982,  982,  983,  983,  985,  985,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895

    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[109] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 1989 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 2099 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 896 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5419 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 59 "SrvLexer.l"
{ return SrvParser::LOGCOLORS_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 61 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 64 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 69 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::ACCEPT_UNKNOWN_FQDN_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::REMOTE_AUTOCONF_NEIGHBORS_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ return SrvParser::DS_LITE_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 122 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{ return SrvParser::CLIENT_CLASS_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
{ return SrvParser::MATCH_IF_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 125 "SrvLexer.l"
{ return SrvParser::EQ_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 126 "SrvLexer.l"
{ return SrvParser::AND_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
{ return SrvParser::OR_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_DATA_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 130 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_EN_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 131 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_DATA_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
{ return SrvParser::ALLOW_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
{ return SrvParser::DENY_; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 134 "SrvLexer.l"
{ return SrvParser::SUBSTRING_; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 135 "SrvLexer.l"
{ return SrvParser::CONTAIN_; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 136 "SrvLexer.l"
{ return SrvParser::STRING_KEYWORD_; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 137 "SrvLexer.l"
{ return SrvParser::ADDRESS_LIST_; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 140 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 141 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 142 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 143 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 145 "SrvLexer.l"
;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 147 "SrvLexer.l"
;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 149 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno; 
}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 154 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 155 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 156 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 94:
YY_RULE_SETUP
#line 163 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 172 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 181 "SrvLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 190 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 199 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 208 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 217 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 229 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 236 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 257 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd then no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 289 "SrvLexer.l"
{
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   // Log(Crit) << "#### Detected [" << yytext << "] as DUID [len=" << len << "]" << LogEnd;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
        x = (toupper(*pos)-'A' + 10);
      else
        x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))	
        x += (toupper(*(pos+1))-'A' + 10);
      else
        x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }
   
   return SrvParser::DUID_;
}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 317 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd; 
      YYABORT; 
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 327 "SrvLexer.l"
{ 
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) { 
        Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd; 
        YYABORT; 
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 336 "SrvLexer.l"
{ return yytext[0]; } 
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 339 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 2893 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 896 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 896 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 895);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 339 "SrvLexer.l"




