#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 74
#define YY_END_OF_BUFFER 75
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[644] =
    {   0,
        1,    1,    0,    0,    0,    0,   75,   73,    2,    1,
        1,   73,   56,   73,   73,   72,   72,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   60,   60,   74,
        1,    1,    1,    0,   68,   56,    0,   68,   58,   57,
       72,    0,    0,   71,    0,   65,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   53,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   16,   17,   69,   69,
       69,   69,   69,   69,   69,   69,   59,   57,   72,    0,

        0,   64,   70,   63,   63,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   52,   72,    0,    0,    0,   62,   62,    0,   63,
        0,   63,   69,   69,   69,   47,   69,   69,   69,   69,
       69,   69,   69,   69,   36,   69,   69,   69,   69,    0,
       69,   69,   69,   69,   69,   69,   22,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   54,   69,   69,   69,
       69,   72,    0,    0,    0,    0,   62,    0,   62,    0,

       63,   63,   63,   63,   69,   69,   69,   69,    4,   69,
       69,   69,   69,   69,   55,    3,   69,   69,   69,   69,
       69,    0,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,    7,   23,   69,   69,   69,   69,   69,   69,
       69,   69,   69,    0,    0,    0,    0,   62,   62,   62,
       62,    0,   63,   63,   63,    0,   63,   69,   69,   69,
       69,   28,   69,   69,   31,   69,   69,   69,   69,   69,
       69,   69,    0,    0,   69,   69,   69,   29,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,    0,    0,    0,   62,   62,   62,    0,

       62,    0,    0,   63,   63,   63,   63,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,    0,    0,   69,   69,   69,   69,   69,   45,   69,
       69,   69,   69,   69,   69,   69,   69,   20,   69,   69,
       69,    0,    0,    0,    0,    0,   62,   62,   62,   62,
        0,   63,   63,   63,    0,   63,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   41,   69,   12,
       10,    0,    0,   69,   69,   69,   43,   69,   69,   69,
       69,   69,   69,   69,   69,    5,   69,   69,   69,   13,
        0,    0,    0,   62,   62,   62,    0,   62,   67,   63,

       63,   63,   63,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   11,    0,    0,   69,   69,   69,
       44,   69,   69,   69,   69,   69,   69,    6,   33,   69,
       69,    0,    0,    0,   66,   62,   62,   62,   62,   63,
       63,   63,    0,   63,   69,   69,   42,   69,   69,   69,
       69,   30,   69,   69,   69,    0,    0,   38,   37,   32,
       69,   21,   69,   69,   35,   34,   69,   69,    0,    0,
       62,   62,   62,    0,   62,   63,   63,   63,   63,   14,
       50,   69,   69,   69,   48,   69,   69,   69,   40,   39,
       69,   69,   69,   69,   46,    0,    0,    0,   62,   62,

       62,   62,   63,   63,   63,    0,   63,   69,   69,   69,
       51,   69,    8,   69,   24,   69,   69,    0,    0,   62,
       62,   62,    0,   62,   63,   63,   63,   63,   69,   69,
       69,   69,   69,   69,   69,   69,    0,    0,    0,   62,
       62,   62,   62,   63,   63,   63,    0,   63,   69,   69,
       69,   69,   69,   69,   15,   19,    0,   61,   64,   62,
       62,   62,    0,   62,   63,   63,   63,   63,   26,   69,
       69,   25,   69,   69,    0,   61,    0,   62,   62,   62,
       62,   62,   63,   63,   63,    0,   63,   27,   49,   69,
       69,   61,   64,   62,    0,   62,   62,   62,   62,   63,

       63,   63,   69,   18,   61,   62,   62,   62,   62,   63,
       63,   63,    9,   62,   62,    0,   62,   62,   63,   62,
       62,   63,   62,   62,    0,   62,   62,   62,   62,    0,
       62,   62,   62,   62,    0,   62,   62,   62,   62,    0,
       62,   62,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   16,   16,   16,   16,   16,   16,   17,    1,    1,
        1,    1,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
        1,    1,    1,    1,    1,    1,   18,   19,   20,   21,

       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[44] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        3,    1,    4,    4,    4,    4,    5,    4,    4,    4,
        4,    4,    4,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[723] =
    {   0,
        0,    0, 2025, 2024,    0,    0, 2031, 2034, 2034,   41,
       43, 2025,    0, 2022,   40,   40, 1987, 2010,   69,   95,
       46,   40, 1985,   33, 2008,  102,  104,  105,   60,  106,
       51,  109,  130,  112,   78,  107,   57, 2034, 2012, 2034,
       46,   94,   98, 2018, 2034,    0, 2015, 2014, 2034,    0,
      153, 2003,   90, 2034,    0,  136, 2002,  166, 1998, 1996,
     1999,  123, 1995,  136,  140,   63,  160,  166, 1985,  111,
      141,  174,   53,  176,  177, 1996,  175,  178,  186,  180,
      184,  181,  190,  187,  185,  192, 1995, 1994,  206,  203,
      204,  205,  207,  208,  209,  210, 2034,    0,  234,  247,

     1993,  251,    0,  257,  270,  274, 1987, 1973,  138, 1982,
      265,  212,  213,  228,  223,  215,  274,  281,  282,  283,
      286,  294,  297,  299,  296,  298,  300,  302,  304,  306,
      315,  303,  324,  307,  319,  318,  320,  326,  328,  330,
      241, 1989,  342,  355, 1988, 1987,  361,  374,  378,  384,
      395,  401,  405, 1970,  356, 1985,  331,  396,  405,  412,
      413,  414,  416,  417, 1984,  420,  418,  421,  426, 1990,
      424,  427,  211,  430,  444,  433, 1982,  445,  447,  332,
      429,  452,  455,  453,  456,  467, 1981,  461,  465,  463,
      471,  483, 1980, 1979, 1978,  488,  494,  505,  511,  517,

      523,  536,  542,  555, 1977,  537,  473,  477,  562,  550,
      556,  558,  559,  466, 1976,  567,  506,  565,  561,  564,
      568,  567,  572,  575,  577,  578,  583,  581,  585,  588,
      596,  590, 1975, 1974,  593,  594,  591,  597,  601,  602,
      611,  605,  472, 1973, 1972, 1971,  618,  634,  647,  653,
      666,  670,  676, 1970,  683,  694,  700,  620,  618,  607,
      518,  629,  678,  624, 1969,  648,  695,  700,  702,  703,
      705,  704, 1953, 1962,  706,  710,  711, 1966,  707,  713,
      712,  716,  727,  738,  722,  714,  718,  733,  734,  736,
      739,  744,  741, 1965, 1964,  749,  761, 1963,  768,  779,

      785,  791,  797,  803,  816,  822,  835,  830,  780,  754,
      742,  740,  835,  817,  836,  837,  844,  846,  848,  850,
      852, 1949, 1943,  858,  840,  842,  792,  854, 1960,  856,
      861,  863,  867,  865,  869,  871,  872, 1959,  873,  875,
      877, 1958, 1957, 1956,  902,  908,  914,  927,  933,  946,
      882,  952, 1955,  959,  970,  976,  883,  884,  928,  309,
      891,  909,  971,  976,  889,  977,  978, 1954,  979, 1953,
     1952, 1950, 1928,  980,  982,  985, 1949,  984,  995,  993,
      994,  997,  999,  998, 1000, 1948, 1005,  941,  609, 1947,
     1946, 1945, 1015, 1024, 1944, 1031, 1042, 1048, 1052, 1058,

     1071, 1077, 1090, 1004, 1002, 1085, 1098, 1072, 1092, 1094,
     1095, 1006, 1104, 1106, 1943, 1933, 1936, 1100, 1101, 1102,
     1940, 1103, 1105, 1053, 1107, 1109, 1111, 1939, 1938, 1112,
     1121, 1937, 1936, 1935, 1134, 1140, 1153, 1159, 1172, 1178,
     1934, 1185, 1196, 1202, 1148, 1135, 1933, 1197, 1125, 1124,
     1202, 1932, 1203, 1205, 1206, 1917, 1912, 1929, 1928, 1927,
     1210, 1926, 1211, 1208, 1925, 1924, 1212, 1218, 1923, 1922,
     1228, 1921, 1239, 1250, 1256, 1262, 1275, 1281, 1294, 1920,
     1919, 1229, 1289, 1223, 1918, 1294, 1295, 1298, 2034, 2034,
     1122, 1231, 1296, 1299, 1917, 1916, 1915, 1914, 1317, 1330,

     1336, 1349, 1355, 1913, 1362, 1373, 1379, 1303, 1307, 1257,
     1912, 1379, 1357, 1381, 1911, 1305, 1167, 1910, 1909, 1391,
     1908, 1398, 1409, 1415, 1421, 1434, 1440, 1453, 1374, 1382,
     1448, 1410, 1453, 1435, 1454, 1457, 1907, 1906, 1905, 1480,
     1467, 1493, 1473, 1506, 1904, 1513, 1524, 1530, 1525, 1531,
     1458, 1532, 1533, 1534, 1903, 1902, 1901, 1900,    0, 1542,
     1899, 1558, 1548, 1571, 1577, 1590, 1596, 1609, 1898, 1548,
     1612, 1897, 1610, 1331, 1896, 1895, 1894, 1893, 1621, 1634,
     1640, 1653, 1659, 1892, 1666,    0, 1679, 1891, 1890, 1611,
     1635, 1889, 2034, 1888,    0, 1685, 1887, 1692, 1705, 1711,

     1724,    0, 1674, 1886, 1885, 1884, 1883, 1730, 1743, 1749,
     1882,    0, 1881, 1785, 1772,    0, 1756, 2034,    0, 1751,
     1744, 2034, 1738, 1730,    0, 1725, 1719, 1706, 1700,    0,
     1687, 1680, 1661, 1654,    0, 1648, 1629, 1613, 1604,    0,
     1591, 1585, 2034, 1772, 1777, 1782, 1787, 1792, 1795, 1800,
     1802, 1585, 1579, 1804, 1562, 1806, 1808, 1548, 1810, 1812,
     1521, 1814, 1816, 1514, 1818, 1820, 1501, 1822, 1824, 1488,
     1826, 1828, 1473, 1830, 1832, 1429, 1834, 1836, 1397, 1838,
     1840, 1322, 1842, 1844, 1310, 1846, 1848, 1283, 1850, 1852,
     1243, 1227, 1854, 1856, 1056, 1858, 1860, 1030,  906, 1862,

     1864,  799, 1866,  450,  448, 1868, 1870, 1872,  392, 1874,
     1876, 1878,  382, 1880, 1882, 1884,  157, 1886, 1888, 1890,
       74, 1892
    } ;

static yyconst flex_int16_t yy_def[723] =
    {   0,
      643,    1,  644,  644,  645,  645,  643,  643,  643,  643,
      643,  646,  647,  648,  643,  643,   16,  643,  649,  649,
       20,   20,   20,   20,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  643,  643,  643,
      643,  643,  643,  646,  643,  647,  648,  643,  643,  650,
      643,  651,   51,  643,  652,  653,  649,   20,   58,   58,
      649,  649,   58,  649,  649,  649,  649,  649,   58,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  643,  650,  643,   99,

      654,  655,  652,  643,  104,   58,  106,  106,  649,  106,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  643,  143,  656,  657,  643,  147,  643,  643,
      658,  150,  106,  153,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  643,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  144,  144,  659,  660,  643,  643,  661,  197,  643,

      643,  201,  643,  203,  153,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  643,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  643,  662,  663,  643,  643,  248,  643,
      250,  643,  643,  643,  643,  664,  255,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  643,  643,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  665,  666,  643,  643,  643,  643,  667,

      299,  643,  643,  643,  304,  643,  306,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  643,  643,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  643,  668,  669,  643,  643,  643,  347,  643,  349,
      643,  643,  643,  643,  670,  354,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  643,  643,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      671,  672,  643,  643,  643,  643,  673,  396,  643,  643,

      400,  643,  402,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  643,  643,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  643,  674,  675,  643,  643,  436,  643,  438,  643,
      643,  643,  676,  442,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  643,  643,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  677,  678,
      643,  643,  643,  679,  473,  643,  476,  643,  478,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  643,  643,
      649,  649,  649,  649,  649,  643,  680,  681,  643,  499,

      643,  501,  643,  643,  643,  682,  505,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  683,  684,  643,
      643,  643,  685,  522,  643,  525,  643,  527,  649,  649,
      649,  649,  649,  649,  649,  649,  643,  686,  687,  643,
      540,  643,  542,  643,  643,  643,  688,  546,  649,  649,
      649,  649,  649,  649,  649,  649,  689,  690,  691,  643,
      643,  643,  692,  562,  643,  565,  643,  567,  649,  649,
      649,  649,  649,  649,  643,  693,  643,  694,  643,  579,
      643,  581,  643,  643,  643,  695,  585,  649,  649,  649,
      649,  696,  643,  697,  698,  643,  643,  643,  598,  643,

      600,  699,  649,  649,  643,  700,  701,  643,  608,  643,
      643,  702,  649,  643,  703,  704,  643,  643,  705,  706,
      707,  643,  643,  708,  709,  710,  711,  643,  712,  713,
      714,  715,  643,  716,  717,  718,  719,  643,  720,  721,
      722,  643,    0,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,

      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643
    } ;

static yyconst flex_int16_t yy_nxt[2078] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   25,   26,   25,   25,   27,   25,
       28,   29,   30,   25,   31,   32,   33,   34,   35,   36,
       25,   37,   25,   41,   42,   43,   42,   49,   41,   42,
       69,   50,   51,   51,   51,   51,   52,   53,   53,   53,
       53,   53,   53,   63,   54,   65,   70,  643,   82,  643,
       66,   67,   83,  643,   64,  121,  643,  582,   96,  643,
       55,   58,   58,   58,   58,   52,   58,   58,   59,   60,
       58,   58,   78,   61,  643,   93,   43,   42,  114,   94,

       41,   42,  100,  100,  100,  100,   62,   58,   58,   58,
       58,   52,   58,   58,   58,   58,   58,   58,  643,   61,
      643,  643,  643,  643,   71,  643,   79,  643,  643,   73,
       75,  118,   72,   84,   85,   74,   76,   80,   95,  643,
       81,   77,   92,   87,   88,   86,  643,   89,  104,  104,
      104,  104,  643,  111,  643,   90,  643,  643,  119,  109,
      637,  112,  156,  113,   91,   99,   99,   99,   99,   52,
      100,  100,  100,  100,  100,  100,  643,   54,  106,  106,
      106,  106,  643,  106,  106,  106,  106,  106,  106,  115,
      643,  643,  643,  643,  643,  126,  643,  643,  116,  122,

      643,  643,  643,  643,  132,  128,  643,  124,  643,  134,
      120,  127,  123,  129,  125,  135,  130,  133,  131,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      138,  643,  136,  159,  160,  139,  163,  161,  140,  643,
      162,  137,  226,  141,  643,  142,  143,  143,  143,  143,
       52,  144,  144,  144,  144,  144,  144,  643,   54,  144,
      144,  144,  144,  147,  147,  147,  147,  149,  191,  150,
      150,  150,  150,  151,  152,  152,  152,  152,  152,  152,
      643,  643,  152,  152,  152,  152,  153,  153,  153,  153,
      643,  153,  153,  153,  153,  153,  153,  643,  643,  643,

      158,  166,  643,  169,  167,  170,  171,  168,  172,  164,
      643,  165,  643,  643,  643,  643,  643,  174,  643,  643,
      643,  173,  643,  643,  178,  643,  175,  180,  177,  179,
      176,  643,  181,  183,  643,  643,  643,  182,  185,  186,
      643,  187,  643,  184,  643,  188,  643,  643,  643,  407,
      190,  232,  208,  189,  192,  192,  192,  192,   52,  193,
      193,  193,  193,  193,  193,  207,   54,  193,  193,  193,
      193,  196,  643,  197,  197,  197,  197,  198,  199,  199,
      199,  199,  199,  199,  643,  632,  199,  199,  199,  199,
      200,  200,  200,  200,  149,  627,  201,  201,  201,  201,

      151,  202,  202,  202,  202,  202,  202,  203,  203,  203,
      203,  643,  643,  202,  202,  202,  202,  205,  205,  205,
      205,  643,  205,  205,  205,  205,  205,  205,  643,  643,
      643,  209,  643,  643,  643,  210,  643,  643,  215,  213,
      643,  216,  643,  643,  223,  643,  643,  211,  212,  643,
      214,  622,  217,  621,  219,  220,  221,  218,  227,  224,
      643,  643,  225,  643,  229,  228,  230,  231,  643,  643,
      233,  643,  643,  234,  237,  235,  239,  643,  240,  643,
      243,  643,  643,  643,  238,  241,  260,  643,  643,  643,
      236,  266,  293,  643,  242,  192,  192,  192,  192,  643,

      247,  247,  247,  247,  196,  259,  248,  248,  248,  248,
      198,  249,  249,  249,  249,  249,  249,  250,  250,  250,
      250,  643,  643,  249,  249,  249,  249,  252,  268,  200,
      200,  200,  200,  149,  643,  253,  253,  253,  253,  151,
      254,  254,  254,  254,  254,  254,  643,  311,  254,  254,
      254,  254,  149,  643,  255,  255,  255,  255,  256,  257,
      257,  257,  257,  257,  257,  643,  643,  257,  257,  257,
      257,  261,  643,  258,  643,  643,  267,  643,  643,  264,
      643,  643,  270,  643,  643,  272,  262,  273,  643,  265,
      269,  643,  263,  643,  643,  271,  276,  643,  277,  643,

      279,  643,  274,  275,  643,  283,  643,  643,  278,  643,
      643,  280,  643,  643,  288,  286,  281,  643,  643,  287,
      291,  643,  282,  643,  285,  643,  284,  643,  296,  308,
      247,  247,  247,  247,  643,  309,  643,  290,  312,  292,
      643,  431,  310,  289,  196,  643,  297,  297,  297,  297,
      198,  298,  298,  298,  298,  298,  298,  643,  314,  298,
      298,  298,  298,  196,  643,  299,  299,  299,  299,  300,
      301,  301,  301,  301,  301,  301,  643,  315,  301,  301,
      301,  301,  302,  302,  302,  302,  149,  313,  303,  303,
      303,  303,  151,  149,  643,  304,  304,  304,  304,  256,

      305,  305,  305,  305,  305,  305,  306,  306,  306,  306,
      643,  643,  305,  305,  305,  305,  643,  317,  643,  643,
      643,  643,  643,  643,  316,  320,  643,  643,  643,  643,
      643,  318,  643,  321,  643,  324,  328,  330,  643,  335,
      329,  319,  327,  643,  325,  326,  331,  332,  334,  643,
      643,  333,  643,  340,  643,  643,  643,  643,  643,  360,
      643,  345,  345,  345,  345,  337,  341,  339,  336,  361,
      643,  196,  338,  346,  346,  346,  346,  198,  196,  359,
      347,  347,  347,  347,  300,  348,  348,  348,  348,  348,
      348,  349,  349,  349,  349,  643,  643,  348,  348,  348,

      348,  351,  619,  302,  302,  302,  302,  149,  643,  303,
      303,  303,  303,  149,  358,  352,  352,  352,  352,  256,
      353,  353,  353,  353,  353,  353,  643,  377,  353,  353,
      353,  353,  149,  643,  354,  354,  354,  354,  355,  356,
      356,  356,  356,  356,  356,  643,  643,  356,  356,  356,
      356,  643,  643,  643,  366,  364,  643,  365,  643,  362,
      643,  357,  643,  367,  643,  363,  643,  368,  643,  369,
      643,  370,  643,  371,  643,  374,  379,  643,  375,  643,
      376,  643,  382,  643,  383,  643,  380,  643,  643,  643,
      378,  643,  381,  643,  399,  399,  399,  399,  388,  643,

      643,  405,  387,  384,  385,  643,  386,  643,  408,  612,
      389,  390,  393,  404,  345,  345,  345,  345,  196,  412,
      346,  346,  346,  346,  196,  643,  394,  394,  394,  394,
      300,  395,  395,  395,  395,  395,  395,  643,  409,  395,
      395,  395,  395,  196,  643,  396,  396,  396,  396,  397,
      398,  398,  398,  398,  398,  398,  643,  643,  398,  398,
      398,  398,  149,  430,  303,  303,  303,  303,  256,  149,
      406,  400,  400,  400,  400,  355,  401,  401,  401,  401,
      401,  401,  402,  402,  402,  402,  643,  643,  401,  401,
      401,  401,  643,  643,  643,  643,  643,  411,  643,  414,

      643,  643,  410,  419,  422,  418,  420,  415,  421,  643,
      643,  643,  423,  643,  643,  643,  643,  413,  643,  427,
      643,  643,  643,  424,  426,  425,  429,  435,  435,  435,
      435,  446,  445,  607,  196,  428,  346,  346,  346,  346,
      300,  196,  453,  436,  436,  436,  436,  397,  437,  437,
      437,  437,  437,  437,  438,  438,  438,  438,  643,  602,
      437,  437,  437,  437,  399,  399,  399,  399,  149,  643,
      440,  440,  440,  440,  355,  441,  441,  441,  441,  441,
      441,  643,  463,  441,  441,  441,  441,  149,  643,  442,
      442,  442,  442,  443,  444,  444,  444,  444,  444,  444,

      643,  643,  444,  444,  444,  444,  447,  448,  643,  450,
      643,  643,  449,  454,  643,  455,  643,  643,  643,  643,
      643,  643,  643,  643,  451,  643,  462,  643,  643,  452,
      458,  461,  464,  467,  483,  459,  460,  643,  643,  465,
      643,  643,  468,  484,  514,  466,  435,  435,  435,  435,
      196,  643,  471,  471,  471,  471,  397,  472,  472,  472,
      472,  472,  472,  643,  643,  472,  472,  472,  472,  196,
      481,  473,  473,  473,  473,  474,  475,  475,  475,  475,
      475,  475,  643,  643,  475,  475,  475,  475,  149,  480,
      303,  303,  303,  303,  355,  149,  536,  476,  476,  476,

      476,  443,  477,  477,  477,  477,  477,  477,  478,  478,
      478,  478,  643,  643,  477,  477,  477,  477,  643,  643,
      486,  643,  643,  485,  643,  482,  643,  643,  643,  493,
      582,  488,  510,  487,  643,  491,  492,  495,  196,  643,
      346,  346,  346,  346,  397,  643,  578,  643,  494,  196,
      508,  499,  499,  499,  499,  474,  500,  500,  500,  500,
      500,  500,  501,  501,  501,  501,  643,  515,  500,  500,
      500,  500,  149,  643,  503,  503,  503,  503,  443,  504,
      504,  504,  504,  504,  504,  643,  568,  504,  504,  504,
      504,  149,  531,  505,  505,  505,  505,  506,  507,  507,

      507,  507,  507,  507,  643,  643,  507,  507,  507,  507,
      643,  643,  643,  543,  643,  643,  512,  509,  513,  643,
      529,  643,  511,  643,  517,  528,  516,  196,  530,  520,
      520,  520,  520,  474,  521,  521,  521,  521,  521,  521,
      643,  535,  521,  521,  521,  521,  196,  643,  522,  522,
      522,  522,  523,  524,  524,  524,  524,  524,  524,  643,
      591,  524,  524,  524,  524,  149,  533,  303,  303,  303,
      303,  443,  149,  643,  525,  525,  525,  525,  506,  526,
      526,  526,  526,  526,  526,  527,  527,  527,  527,  643,
      643,  526,  526,  526,  526,  643,  532,  643,  643,  550,

      502,  196,  534,  346,  346,  346,  346,  474,  196,  549,
      540,  540,  540,  540,  523,  541,  541,  541,  541,  541,
      541,  542,  542,  542,  542,  643,  643,  541,  541,  541,
      541,  149,  479,  544,  544,  544,  544,  506,  545,  545,
      545,  545,  545,  545,  643,  552,  545,  545,  545,  545,
      149,  643,  546,  546,  546,  546,  547,  548,  548,  548,
      548,  548,  548,  643,  643,  548,  548,  548,  548,  643,
      643,  554,  551,  643,  643,  571,  439,  643,  556,  561,
      561,  561,  561,  643,  553,  564,  564,  564,  564,  555,
      196,  403,  560,  560,  560,  560,  523,  561,  561,  561,

      561,  561,  561,  196,  350,  562,  562,  562,  562,  563,
      564,  564,  564,  564,  564,  564,  149,  307,  303,  303,
      303,  303,  506,  149,  251,  565,  565,  565,  565,  547,
      566,  566,  566,  566,  566,  566,  567,  567,  567,  567,
      643,  643,  566,  566,  566,  566,  569,  643,  643,  643,
      643,  204,  196,  572,  346,  346,  346,  346,  523,  574,
      581,  581,  581,  581,  643,  148,  570,  573,  196,  588,
      579,  579,  579,  579,  563,  580,  580,  580,  580,  580,
      580,  643,  105,  580,  580,  580,  580,  149,  103,  583,
      583,  583,  583,  547,  584,  584,  584,  584,  584,  584,

      643,  640,  584,  584,  584,  584,  149,  640,  585,  585,
      585,  585,  586,  587,  587,  587,  587,  587,  587,  643,
      640,  587,  587,  587,  587,  589,  643,  643,  643,  635,
      590,  196,  603,  596,  596,  596,  596,  563,  597,  597,
      597,  597,  597,  597,  643,  640,  597,  597,  597,  597,
      196,  643,  598,  598,  598,  598,  604,  599,  599,  599,
      599,  599,  599,  643,  635,  599,  599,  599,  599,  149,
      635,  303,  303,  303,  303,  547,  149,  630,  600,  600,
      600,  600,  586,  601,  601,  601,  601,  601,  601,  643,
      643,  601,  601,  601,  601,  196,  635,  346,  346,  346,

      346,  563,  196,  630,  608,  608,  608,  608,  613,  609,
      609,  609,  609,  609,  609,  643,  630,  609,  609,  609,
      609,  149,  625,  610,  610,  610,  610,  586,  611,  611,
      611,  611,  611,  611,  643,  630,  611,  611,  611,  611,
      196,  625,  617,  617,  617,  617,  625,  618,  618,  618,
      618,  618,  618,  643,  616,  618,  618,  618,  618,  149,
      625,  303,  303,  303,  303,  586,  196,  616,  346,  346,
      346,  346,   38,   38,   38,   38,   38,   40,   40,   40,
       40,   40,   44,   44,   44,   44,   44,   46,  616,   46,
       46,   46,   47,   47,   47,   47,   47,   57,   57,   57,

       98,  595,   98,   98,   98,  101,  101,  145,  145,  194,
      194,  195,  195,  244,  244,  245,  245,  294,  294,  295,
      295,  342,  342,  343,  343,  391,  391,  392,  392,  432,
      432,  433,  433,  469,  469,  470,  470,  496,  496,  497,
      497,  518,  518,  519,  519,  537,  537,  538,  538,  557,
      557,  558,  558,  575,  575,  576,  576,  592,  592,  594,
      594,  605,  605,  606,  606,  614,  614,  615,  615,  620,
      620,  623,  623,  624,  624,  626,  626,  628,  628,  629,
      629,  631,  631,  633,  633,  634,  634,  636,  636,  638,
      638,  639,  639,  641,  641,  642,  642,  643,  586,  616,

      595,  577,  643,  563,  595,  577,  643,  643,  547,  595,
      593,  577,  539,  643,  643,  523,  577,  539,  643,  643,
      506,  559,  539,  498,  474,  539,  498,  643,  643,  443,
      102,  498,  434,  643,  643,  643,  643,  397,  498,  434,
      643,  643,  643,  643,  643,  643,  490,  489,  643,  643,
      355,  102,  434,  344,  643,  643,  643,  457,  456,  643,
      300,  434,  344,  643,  643,  643,  417,  416,  643,  643,
      643,  256,  102,  344,  246,  643,  643,  373,  372,  198,
      344,  246,  643,  323,  322,  643,  151,  102,  246,  146,
      643,  643,  643,  643,  246,  146,  643,  643,  643,  222,

      643,  643,  206,  102,  146,  643,  157,  155,  154,  146,
      643,  643,  643,  117,  110,  643,  108,  107,  643,  102,
       47,   48,   45,   97,  643,   68,   56,  643,   48,   45,
      643,   39,   39,    7,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643
    } ;

static yyconst flex_int16_t yy_chk[2078] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   10,   10,   11,   11,   15,   41,   41,
       24,   15,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   21,   16,   22,   24,   31,   31,   73,
       22,   22,   31,   37,   21,   73,   29,  721,   37,   66,
       16,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   29,   19,   35,   35,   42,   42,   66,   35,

       43,   43,   53,   53,   53,   53,   19,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   26,   20,
       27,   28,   30,   36,   26,   32,   30,   70,   34,   27,
       28,   70,   26,   32,   32,   27,   28,   30,   36,   62,
       30,   28,   34,   33,   33,   32,   33,   33,   56,   56,
       56,   56,   64,   64,  109,   33,   65,   71,   71,   62,
      717,   64,  109,   65,   33,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   67,   51,   58,   58,
       58,   58,   68,   58,   58,   58,   58,   58,   58,   67,
       72,   77,   74,   75,   78,   79,   80,   82,   68,   74,

       81,   85,   79,   84,   84,   81,   83,   77,   86,   86,
       72,   80,   75,   82,   78,   89,   83,   85,   83,   90,
       91,   92,   89,   93,   94,   95,   96,  173,  112,  113,
       92,  116,   90,  112,  113,   93,  116,  114,   94,  115,
      115,   91,  173,   95,  114,   96,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,  141,   99,  100,
      100,  100,  100,  102,  102,  102,  102,  104,  141,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      105,  111,  105,  105,  105,  105,  106,  106,  106,  106,
      117,  106,  106,  106,  106,  106,  106,  118,  119,  120,

      111,  119,  121,  122,  120,  123,  123,  121,  124,  117,
      122,  118,  125,  123,  126,  124,  127,  126,  128,  132,
      129,  125,  130,  134,  128,  360,  126,  130,  127,  129,
      126,  131,  131,  133,  136,  135,  137,  132,  135,  136,
      133,  137,  138,  134,  139,  138,  140,  157,  180,  360,
      140,  180,  157,  139,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  155,  143,  144,  144,  144,
      144,  147,  155,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  148,  713,  148,  148,  148,  148,
      149,  149,  149,  149,  150,  709,  150,  150,  150,  150,

      150,  150,  150,  150,  150,  150,  150,  151,  151,  151,
      151,  152,  158,  152,  152,  152,  152,  153,  153,  153,
      153,  159,  153,  153,  153,  153,  153,  153,  160,  161,
      162,  158,  163,  164,  167,  159,  166,  168,  164,  162,
      171,  166,  169,  172,  171,  181,  174,  160,  161,  176,
      163,  705,  167,  704,  169,  169,  169,  168,  174,  171,
      175,  178,  172,  179,  176,  175,  178,  179,  182,  184,
      181,  183,  185,  182,  184,  183,  186,  188,  188,  190,
      191,  189,  214,  186,  185,  189,  208,  191,  243,  207,
      183,  214,  243,  208,  190,  192,  192,  192,  192,  192,

      196,  196,  196,  196,  197,  207,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  198,  198,  198,
      198,  199,  217,  199,  199,  199,  199,  200,  217,  200,
      200,  200,  200,  201,  261,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  202,  261,  202,  202,
      202,  202,  203,  206,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  204,  210,  204,  204,  204,
      204,  209,  211,  206,  212,  213,  216,  219,  209,  212,
      220,  218,  219,  216,  221,  221,  210,  222,  223,  213,
      218,  224,  211,  225,  226,  220,  224,  228,  225,  227,

      227,  229,  222,  223,  230,  231,  232,  237,  226,  235,
      236,  228,  231,  238,  238,  236,  229,  239,  240,  237,
      241,  242,  230,  260,  235,  389,  232,  241,  247,  258,
      247,  247,  247,  247,  259,  259,  258,  240,  262,  242,
      264,  389,  260,  239,  248,  262,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  249,  264,  249,
      249,  249,  249,  250,  266,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  251,  266,  251,  251,
      251,  251,  252,  252,  252,  252,  253,  263,  253,  253,
      253,  253,  253,  255,  263,  255,  255,  255,  255,  255,

      255,  255,  255,  255,  255,  255,  256,  256,  256,  256,
      257,  267,  257,  257,  257,  257,  268,  268,  269,  270,
      272,  271,  275,  279,  267,  271,  276,  277,  281,  280,
      286,  269,  282,  272,  287,  275,  280,  282,  285,  287,
      281,  270,  279,  283,  276,  277,  283,  284,  286,  288,
      289,  285,  290,  292,  284,  291,  312,  293,  311,  311,
      292,  296,  296,  296,  296,  289,  293,  291,  288,  312,
      310,  297,  290,  297,  297,  297,  297,  297,  299,  310,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  300,  300,  300,  300,  301,  309,  301,  301,  301,

      301,  302,  702,  302,  302,  302,  302,  303,  327,  303,
      303,  303,  303,  304,  309,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  305,  327,  305,  305,
      305,  305,  306,  314,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  307,  308,  307,  307,  307,
      307,  313,  315,  316,  316,  314,  325,  315,  326,  313,
      317,  308,  318,  317,  319,  313,  320,  318,  321,  319,
      328,  320,  330,  321,  324,  324,  330,  331,  325,  332,
      326,  334,  332,  333,  333,  335,  330,  336,  337,  339,
      328,  340,  331,  341,  351,  351,  351,  351,  339,  357,

      358,  358,  337,  334,  335,  365,  336,  361,  361,  699,
      340,  341,  345,  357,  345,  345,  345,  345,  346,  365,
      346,  346,  346,  346,  347,  362,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  348,  362,  348,
      348,  348,  348,  349,  359,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  350,  388,  350,  350,
      350,  350,  352,  388,  352,  352,  352,  352,  352,  354,
      359,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  355,  355,  355,  355,  356,  363,  356,  356,
      356,  356,  364,  366,  367,  369,  374,  364,  375,  367,

      378,  376,  363,  375,  379,  374,  376,  369,  378,  380,
      381,  379,  380,  382,  384,  383,  385,  366,  405,  384,
      404,  387,  412,  381,  383,  382,  387,  393,  393,  393,
      393,  405,  404,  698,  394,  385,  394,  394,  394,  394,
      394,  396,  412,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  397,  397,  397,  397,  398,  695,
      398,  398,  398,  398,  399,  399,  399,  399,  400,  424,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  401,  424,  401,  401,  401,  401,  402,  408,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,

      403,  406,  403,  403,  403,  403,  406,  407,  409,  409,
      410,  411,  408,  413,  407,  414,  418,  419,  420,  422,
      413,  423,  414,  425,  410,  426,  423,  427,  430,  411,
      418,  422,  425,  430,  449,  419,  420,  431,  491,  426,
      450,  449,  431,  450,  491,  427,  435,  435,  435,  435,
      436,  446,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  437,  445,  437,  437,  437,  437,  438,
      446,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  439,  517,  439,  439,  439,  439,  440,  445,
      440,  440,  440,  440,  440,  442,  517,  442,  442,  442,

      442,  442,  442,  442,  442,  442,  442,  442,  443,  443,
      443,  443,  444,  448,  444,  444,  444,  444,  451,  453,
      453,  454,  455,  451,  464,  448,  461,  463,  467,  464,
      692,  455,  484,  454,  468,  461,  463,  468,  471,  484,
      471,  471,  471,  471,  471,  482,  691,  492,  467,  473,
      482,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  474,  474,  474,  474,  475,  492,  475,  475,
      475,  475,  476,  510,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  477,  688,  477,  477,  477,
      477,  478,  510,  478,  478,  478,  478,  478,  478,  478,

      478,  478,  478,  478,  479,  483,  479,  479,  479,  479,
      486,  487,  493,  685,  488,  494,  487,  483,  488,  508,
      508,  516,  486,  509,  494,  682,  493,  499,  509,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      500,  516,  500,  500,  500,  500,  501,  574,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  502,
      574,  502,  502,  502,  502,  503,  513,  503,  503,  503,
      503,  503,  505,  513,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  506,  506,  506,  506,  507,
      529,  507,  507,  507,  507,  512,  512,  514,  530,  530,

      679,  520,  514,  520,  520,  520,  520,  520,  522,  529,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  523,  523,  523,  523,  524,  532,  524,  524,  524,
      524,  525,  676,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  526,  532,  526,  526,  526,  526,
      527,  534,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  528,  531,  528,  528,  528,  528,  533,
      535,  534,  531,  536,  551,  551,  673,  541,  536,  541,
      541,  541,  541,  543,  533,  543,  543,  543,  543,  535,
      540,  670,  540,  540,  540,  540,  540,  540,  540,  540,

      540,  540,  540,  542,  667,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  544,  664,  544,  544,
      544,  544,  544,  546,  661,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  547,  547,  547,  547,
      548,  549,  548,  548,  548,  548,  549,  550,  552,  553,
      554,  658,  560,  552,  560,  560,  560,  560,  560,  554,
      563,  563,  563,  563,  570,  655,  550,  553,  562,  570,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  564,  653,  564,  564,  564,  564,  565,  652,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,

      566,  642,  566,  566,  566,  566,  567,  641,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  568,
      639,  568,  568,  568,  568,  571,  573,  590,  571,  638,
      573,  579,  590,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  580,  637,  580,  580,  580,  580,
      581,  591,  581,  581,  581,  581,  591,  581,  581,  581,
      581,  581,  581,  582,  636,  582,  582,  582,  582,  583,
      634,  583,  583,  583,  583,  583,  585,  633,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  587,
      603,  587,  587,  587,  587,  596,  632,  596,  596,  596,

      596,  596,  598,  631,  598,  598,  598,  598,  603,  598,
      598,  598,  598,  598,  598,  599,  629,  599,  599,  599,
      599,  600,  628,  600,  600,  600,  600,  600,  600,  600,
      600,  600,  600,  600,  601,  627,  601,  601,  601,  601,
      608,  626,  608,  608,  608,  608,  624,  608,  608,  608,
      608,  608,  608,  609,  623,  609,  609,  609,  609,  610,
      621,  610,  610,  610,  610,  610,  617,  620,  617,  617,
      617,  617,  644,  644,  644,  644,  644,  645,  645,  645,
      645,  645,  646,  646,  646,  646,  646,  647,  615,  647,
      647,  647,  648,  648,  648,  648,  648,  649,  649,  649,

      650,  614,  650,  650,  650,  651,  651,  654,  654,  656,
      656,  657,  657,  659,  659,  660,  660,  662,  662,  663,
      663,  665,  665,  666,  666,  668,  668,  669,  669,  671,
      671,  672,  672,  674,  674,  675,  675,  677,  677,  678,
      678,  680,  680,  681,  681,  683,  683,  684,  684,  686,
      686,  687,  687,  689,  689,  690,  690,  693,  693,  694,
      694,  696,  696,  697,  697,  700,  700,  701,  701,  703,
      703,  706,  706,  707,  707,  708,  708,  710,  710,  711,
      711,  712,  712,  714,  714,  715,  715,  716,  716,  718,
      718,  719,  719,  720,  720,  722,  722,  613,  611,  607,

      606,  605,  604,  597,  594,  592,  589,  588,  584,  578,
      577,  576,  575,  572,  569,  561,  558,  557,  556,  555,
      545,  539,  538,  537,  521,  519,  518,  515,  511,  504,
      498,  497,  496,  495,  485,  481,  480,  472,  470,  469,
      466,  465,  462,  460,  459,  458,  457,  456,  452,  447,
      441,  434,  433,  432,  429,  428,  421,  417,  416,  415,
      395,  392,  391,  390,  386,  377,  373,  372,  371,  370,
      368,  353,  344,  343,  342,  338,  329,  323,  322,  298,
      295,  294,  278,  274,  273,  265,  254,  246,  245,  244,
      234,  233,  215,  205,  195,  194,  193,  187,  177,  170,

      165,  156,  154,  146,  145,  142,  110,  108,  107,  101,
       88,   87,   76,   69,   63,   61,   60,   59,   57,   52,
       48,   47,   44,   39,   25,   23,   18,   17,   14,   12,
        7,    4,    3,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[75] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 1140 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 1245 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 644 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2034 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 60 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 62 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::AUTH_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno; 
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 119 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 120 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 61:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 136 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 145 "SrvLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 154 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 163 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 172 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 181 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 193 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 200 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 221 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd then no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 253 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd; 
      YYABORT; 
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 263 "SrvLexer.l"
{ 
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) { 
        Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd; 
        YYABORT; 
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 272 "SrvLexer.l"
{ return yytext[0]; } 
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 275 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 1843 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 644 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 644 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 643);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

yyFlexLexer::~yyFlexLexer()
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

	delete [] (yy_state_buf);
	yyfree((yy_start_stack)  );

}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 275 "SrvLexer.l"




