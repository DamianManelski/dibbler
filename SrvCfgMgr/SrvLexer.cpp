#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 112
#define YY_END_OF_BUFFER 113
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[940] =
    {   0,
        1,    1,    0,    0,    0,    0,  113,  111,    2,    1,
        1,  111,   93,  111,  111,  110,  110,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
       97,   97,  112,    1,    1,    1,    0,  105,   93,    0,
      105,   95,   94,  110,    0,    0,  109,    0,  102,   76,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,   90,
      106,  106,   78,  106,  106,  106,  106,  106,  106,  106,

      106,  106,   17,   18,  106,  106,  106,  106,  106,  106,
      106,  106,   96,   94,  110,    0,    0,    0,  101,  107,
      100,  100,  106,  106,  106,  106,   77,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,   89,  110,    0,    0,    0,    0,   99,   99,
        0,  100,    0,  100,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,   84,  106,  106,  106,  106,   30,

      106,  106,   41,  106,  106,  106,  106,  106,  106,  106,
      106,    0,  106,  106,  106,  106,  106,  106,   23,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,   91,  106,  106,  106,  106,  110,    0,  108,    0,
        0,    0,   99,    0,   99,    0,  100,  100,  100,  100,
      106,  106,  106,  106,   83,  106,  106,  106,    4,  106,
      106,  106,  106,  106,  106,  106,   92,  106,    3,  106,
      106,  106,  106,  106,  106,  106,  106,  106,    0,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,    7,
      106,   24,  106,  106,  106,  106,  106,  106,  106,  106,

      106,  106,  106,    0,    0,    0,    0,    0,   99,   99,
       99,   99,    0,  100,  100,  100,    0,  100,  106,  106,
      106,  106,  106,  106,  106,  106,  106,   29,  106,  106,
      106,   36,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,    0,    0,  106,  106,  106,
       34,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,   87,  106,  106,  106,  106,  106,  106,  106,    0,
        0,    0,    0,   99,   99,   99,    0,   99,    0,    0,
      100,  100,  100,  100,  106,  106,   32,  106,  106,  106,
      106,  106,  106,    0,  106,  106,   86,  106,  106,   56,

      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,    0,    0,  106,  106,  106,  106,  106,   51,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
       21,  106,  106,  106,  108,    0,    0,    0,    0,    0,
       99,   99,   99,   99,    0,  100,  100,  100,    0,  100,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,    0,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,   47,  106,  106,   12,   10,   75,
      106,    0,    0,  106,  106,  106,   49,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,    5,  106,  106,

      106,   14,    0,    0,    0,    0,   99,   99,   99,    0,
       99,  104,  100,  100,  100,  100,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,    0,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,   11,   55,    0,    0,  106,  106,  106,   50,  106,
      106,  106,  106,   31,  106,  106,    6,   85,   38,  106,
      106,    0,    0,    0,    0,  103,   99,   99,   99,   99,
      100,  100,  100,    0,  100,  106,  106,  106,  106,  106,
      106,  106,  106,  106,   48,  106,    0,  106,  106,  106,
      106,  106,  106,   35,  106,   33,  106,  106,  106,   13,

        0,    0,   44,   43,   37,  106,   22,  106,  106,   40,
       39,  106,  106,  108,    0,    0,   99,   99,   99,    0,
       99,  100,  100,  100,  100,  106,   15,  106,   54,  106,
      106,  106,   63,  106,  106,    0,  106,  106,  106,  106,
       66,  106,  106,  106,  106,  106,   46,   45,  106,  106,
      106,  106,   52,    0,    0,    0,    0,   99,   99,   99,
       99,  100,  100,  100,    0,  100,  106,  106,   88,   65,
      106,  106,  106,    0,   74,  106,  106,  106,   67,   53,
      106,  106,    8,  106,   25,  106,  106,    0,    0,    0,
       99,   99,   99,    0,   99,  100,  100,  100,  100,  106,

      106,   64,  106,  106,    0,  106,  106,  106,  106,  106,
       57,  106,  106,  106,  106,  108,    0,    0,    0,   99,
       99,   99,   99,  100,  100,  100,    0,  100,  106,  106,
      106,  106,    0,  106,  106,  106,  106,  106,  106,  106,
       16,   20,    0,    0,   98,  101,   99,   99,   99,    0,
       99,  100,  100,  100,  100,  106,  106,  106,   27,    0,
        0,  106,  106,  106,   68,  106,   26,  106,  106,    0,
        0,   98,    0,   99,   99,   99,   99,   99,  100,  100,
      100,    0,  100,  106,  106,  106,    0,    0,   28,  106,
      106,   69,  106,  106,  106,  106,  106,  108,   98,  101,

       99,    0,   99,   99,   99,   99,  100,  100,  100,   58,
      106,  106,  106,  106,    0,    0,  106,  106,  106,  106,
      106,  106,  106,   19,    0,   98,   99,   99,   99,   99,
      100,  100,  100,  106,  106,  106,  106,  106,    0,    0,
      106,  106,   70,   71,   72,   73,    9,    0,   99,   99,
        0,   99,   99,  100,   42,  106,  106,  106,  106,    0,
        0,  106,  106,  108,   99,   99,  100,  106,  106,  106,
      106,    0,    0,    0,  106,  106,  106,    0,   99,   99,
        0,  106,  106,  106,  106,    0,    0,    0,   79,  106,
      106,  106,   79,   98,   99,   99,   59,  106,  106,  106,

        0,   81,    0,  106,   81,  106,   98,   99,   99,    0,
      106,  106,   62,    0,   80,  106,   80,    0,   99,   99,
      106,   60,   82,   82,    0,   99,   99,    0,   61,  108,
       99,   99,    0,   99,   99,    0,   99,   99,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
       23,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        1,    1,    1,    1,    1,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    1,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1030] =
    {   0,
        0,    0, 1128, 1127,    0,    0, 1133, 5592, 5592,   73,
       75, 1121,    0, 1097,   72,   72,   34, 1081, 1079,  136,
      186,  233,  280,   71,  208,  338,   38,   73,  197,   89,
      267,  175,  249,  350,  193,  382,   67,  357,  237,  317,
     5592, 1089, 5592,  111,  137,  214, 1094, 5592,    0, 1091,
     1090, 5592,    0,  440, 1035,  459, 5592,    0,  485, 5592,
       61,  528,   86,   89,  182,  265,  279,  184,  342,  239,
      381,  372,  229,  354,  373,  445,  270,  438,  519,  285,
      507,  393,  542,  544,  546,  561,  375,  563,  529,  298,
      564,  566,  378,  523,  532,  576,  567,  605,  595,  583,

      618,  599,  530,  574,  613,  611,  581,  626,  617,  619,
      630,  635, 5592,    0,  693, 1032,  503, 1028,  738,    0,
      783,  712,  826,  600,  619,  818,  628,  826,  815,  645,
      816,  843,  691,  819,  846,  762,  725,  857,  864,  866,
      860,  861,  865,  877,  888,  871,  894,  901,  900,  893,
      933,  902,  918,  930,  922,  924,  923,  931,  936,  940,
      946,  929,  953,  970,  963,  982,  981,  983,  986,  985,
      971,  998,  646, 1056,  763, 1027, 1026, 1017, 1103,  802,
     1046, 1148, 1191, 1075, 1234,  703, 1169,  974, 1035, 1090,
     1186, 1222, 1108, 1233,  825, 1223, 1226, 1237, 1265,  977,

     1071, 1254, 1151, 1231, 1272, 1235, 1269, 1268, 1296, 1271,
     1286, 1026, 1302, 1277, 1316, 1317, 1321, 1324, 1152, 1323,
     1337, 1327, 1325, 1339, 1348, 1362, 1356, 1359, 1368, 1370,
     1375, 1236, 1377, 1389, 1379, 1410, 1167,  997,  967,  939,
      932, 1447, 1470, 1513, 1458, 1489, 1558, 1532, 1603, 1577,
      929, 1381, 1594, 1592, 1369, 1605, 1500, 1545, 1591, 1599,
     1412, 1601, 1619, 1635, 1607, 1642, 1449, 1636, 1638, 1646,
     1652, 1651, 1647, 1659, 1650, 1675, 1674, 1556, 1688, 1688,
     1695, 1696, 1690, 1704, 1694, 1698, 1702, 1691, 1727, 1492,
     1719, 1689, 1737, 1723, 1741, 1748, 1738, 1756, 1739, 1742,

     1777, 1750, 1771,  897,  884,  851,  850, 1814, 1837, 1856,
     1882, 1901, 1865, 1927,  846, 1939, 1982, 1958, 1918, 1881,
     1970, 1976, 1973, 1985, 1997, 1974, 1983, 2067, 1779, 1977,
     1982, 1769, 2026, 2021, 2022, 2042, 2017, 2057, 2049, 2059,
     2053, 2055, 2066, 2073, 2062, 1781, 1840, 2077, 2074, 2089,
     1869, 1980, 2104, 2102, 2107, 2114, 2106, 2135, 2113, 2111,
     2110, 2098, 2138, 2123, 2148, 2144, 2150, 2159, 2157,  844,
      843,  842, 2217, 2228,  839, 2240, 2283, 2259, 2302, 2328,
     2339, 2358, 2384, 2403, 2405, 2154, 2261, 2381, 2386, 2156,
     2383, 2158, 2402, 2126, 2418, 2387, 2219, 2434, 2415, 2244,

     2420, 2423, 2452, 2440, 2451, 2454, 2462, 2473, 2479, 2481,
     2476, 2470, 2270, 2284, 2468, 2471, 2484, 2492, 2501, 2318,
     2520, 2512, 2522, 2521, 2528, 2514, 2519, 2531, 2525, 2544,
     2326, 2564, 2555, 2536,  809,  808,  807,  806, 2622, 2633,
     2644, 2663, 2689, 2708, 2672, 2734,  805, 2746, 2789, 2765,
     2558, 2775, 2783, 2688, 2786, 2469, 2804, 2780, 2781, 2556,
     2782, 2576, 2819, 2833, 2831, 2824, 2823, 2827, 2837, 2829,
     2851, 2832, 2725, 2854, 2575, 2865, 2875, 2631, 2676, 2820,
     2869, 2846, 2855, 2883, 2884, 2886, 2872, 2887, 2907, 2903,
     2914, 2899, 2919, 2917, 2920, 2923, 2922, 2889, 2942, 2939,

     2941, 2918,  804,  803,  802, 2984, 3002,  792, 3014, 3057,
     3033, 3042, 3102, 3076, 3147, 3121, 3055, 3135, 3143, 3044,
     3146, 3145, 2938, 3144, 3163, 3165, 3140, 3096, 3168, 3176,
     3184, 3187, 3185, 3200, 3186, 3182, 3214, 3222, 3223, 3229,
     3192, 3199, 3201, 3229, 3235, 3228, 3233, 3234, 3220, 3244,
     3252, 3250, 3251, 3232, 3271, 3266, 3253, 3267, 3269, 3288,
     3291,  765,  764,  763,  752, 3333, 3351, 3370, 3396, 3415,
     3441,  751, 3453, 3496, 3472, 3287, 3482, 3490, 3487, 3491,
     3474, 3286, 3492, 3497, 3273, 3529, 3347, 3498, 3349, 3527,
     3532, 3537, 3395, 3338, 3545, 3526, 3539, 3534, 3543, 3533,

     3542, 3541, 3541, 3542, 3544, 3562, 3548, 3578, 3589, 3549,
     3572, 3580, 3595,  749,  748,  719, 3653,  718, 3665, 3708,
     3684, 3753, 3727, 3798, 3772, 3607, 3582, 3590, 3583, 3586,
     3758, 3695, 3587, 3593, 3801, 3624, 3788, 3796, 3795, 3686,
     3706, 3797, 3800, 3810, 3819, 3835, 5592, 5592, 3839, 3830,
     3832, 3843, 3740,  717,  716,  715,  714, 3903, 3922, 3948,
     3967, 3993,  682, 4005, 4048, 4024, 3837, 3838, 3834, 3841,
     4026, 4043, 3947, 3845, 3882, 4050, 4038, 4047, 3890, 3935,
     4062, 4067, 4037, 4082, 4044, 4049, 4080,  679,  677,  673,
     4140,  672, 4152, 4195, 4171, 4240, 4214, 4285, 4259, 4078,

     4245, 4079, 4275, 4276,  683, 4193, 4131, 4290, 4297, 4279,
     4094, 4286, 4282, 4285, 4304,  670,  669,  658,  604, 4364,
     4383, 4409, 4428, 4454,  593, 4466, 4509, 4485, 4487, 4287,
     4495, 4504, 4514, 4500, 4529, 4182, 4408, 4523, 4505, 4544,
     4174, 4289,  547,  543,  542,    0, 4590,  540, 4604, 4647,
     4623, 4692, 4666, 4737, 4711, 4546, 4705, 4351, 4343, 4405,
     4513, 4739, 4634, 4729, 4509, 4756, 4510, 4742, 4740,  539,
      510,  509,  508,  507, 4816, 4800, 4861, 4835, 4880,  506,
     4906,    0, 4925, 4733, 4738, 4926, 4603, 4642, 4645, 4859,
     4752, 4735, 4933, 4803, 4814, 4909, 4921,  505,  504, 5592,

      503,    0, 4991,  466, 5003, 5022, 5048, 5067,    0, 4753,
     4920, 4928, 5001, 5063, 4797, 4866, 4924, 4945, 4982, 5060,
     5073, 5076, 4911, 4923,  465,  464,  463,  462, 5136, 5121,
     5155,  461,    0, 5141, 5153, 5049, 5053, 5148, 4932,    0,
     5138, 5104, 4990, 5123, 5137, 5139, 5150,  428,  424,  416,
        0, 5211, 5592,    0, 5151, 5189, 5190, 5191, 5208,    0,
     5185, 5262, 5228,  414,  412,  411, 5592, 5175, 5221, 5210,
     5213, 5188, 5226, 5216, 5259, 5264, 5252,  408,  407,  406,
        0, 5249, 5256, 5257, 5246, 5273, 5262, 5259, 5592, 5280,
     5273, 5262, 5263,  361,  358,  357, 5265, 5300, 5297, 5296,

     5299, 5592, 5321, 5303, 5304, 5325,  353,  350,  348,    0,
     5314, 5309, 5310, 5331, 5592, 5332, 5313,  325,  317,  311,
     5317, 5316, 5592, 5318,    0,  307,  306,    0, 5345,  305,
      276,  267,  266,  262,  260,    0,  257,  256, 5592, 5415,
     5419, 5423, 5427, 5431, 5435, 5437,  270, 5439, 5441, 5443,
     5445, 5447, 5449, 5451, 5453, 5455, 5457, 5461, 5463, 5465,
     5467, 5469, 5471, 5473, 5475, 5477, 5479, 5481, 5483, 5485,
     5487, 5489, 5491, 5493, 5495, 5497, 5499, 5501, 5503, 5505,
     5507, 5509, 5511, 5513,  261, 5515, 5517, 5519,  241, 5521,
     5523, 5525,  231,  230, 5527, 5529, 5531,  228, 5535, 5539,

     5541, 5543,  219,  217, 5547, 5551, 5553, 5555, 5557, 5559,
     5561,  212, 5563, 5565, 5567, 5569, 5571,  145, 5573, 5575,
     5577,  131, 5579,  117, 5581, 5583, 5585,   80, 5587
    } ;

static yyconst flex_int16_t yy_def[1030] =
    {   0,
      939,    1,  940,  940,  941,  941,  939,  939,  939,  939,
      939,  942,  943,  944,  939,  939,   16,  939,  939,  939,
       20,   20,   22,   22,   22,   22,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      939,  939,  939,  939,  939,  939,  942,  939,  943,  944,
      939,  939,  945,  939,  946,   54,  939,  947,  939,  939,
       26,   26,   62,   62,   26,   26,   26,   26,   26,   62,
       26,   26,   62,   26,   26,   26,   26,   26,   26,   62,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  939,  945,  939,  948,  115,  949,  939,  947,
      939,  121,   62,  123,  123,   26,   26,   26,   26,  123,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  939,  174,  950,  951,  952,  939,  179,
      939,  939,  939,  182,  123,  185,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  939,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,  175,  175,  951,  953,
      954,  939,  939,  939,  243,  939,  939,  247,  939,  249,
      185,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  939,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,  955,  939,  956,  957,  939,  939,  309,
      939,  311,  939,  939,  939,  939,  939,  316,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  958,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  939,  939,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,  959,
      960,  961,  939,  939,  939,  939,  939,  376,  939,  939,
      939,  381,  939,  383,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  939,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  939,  939,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  956,  939,  962,  963,  939,  939,
      939,  441,  939,  443,  939,  939,  939,  939,  939,  448,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  939,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  939,  939,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,  964,  965,  966,  939,  939,  939,  939,  939,
      509,  939,  939,  513,  939,  515,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  939,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  939,  939,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  967,  939,  968,  969,  939,  939,  567,  939,  569,
      939,  939,  939,  939,  573,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,  939,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

      939,  939,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  970,  971,  972,  939,  939,  939,  939,
      619,  939,  622,  939,  624,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  939,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,  939,  939,   26,   26,
       26,   26,   26,  973,  939,  974,  975,  939,  658,  939,
      660,  939,  939,  939,  939,  664,   26,   26,   26,   26,
       26,   26,   26,  939,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  976,  977,  978,
      939,  939,  939,  939,  693,  939,  696,  939,  698,   26,

       26,   26,   26,   26,  939,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  979,  939,  980,  981,  939,
      720,  939,  722,  939,  939,  939,  939,  726,   26,   26,
       26,   26,  939,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  982,  983,  984,  985,  939,  939,  939,  939,
      749,  939,  752,  939,  754,   26,   26,   26,   26,  939,
      939,   26,   26,   26,   26,   26,   26,   26,   26,  986,
      939,  987,  939,  988,  939,  775,  939,  777,  939,  939,
      939,  989,  781,   26,   26,   26,  939,  939,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  990,  991,  939,

      992,  993,  939,  939,  939,  805,  939,  807,  994,   26,
       26,   26,   26,   26,  939,  939,   26,   26,   26,   26,
       26,   26,   26,   26,  995,  939,  996,  997,  939,  829,
      939,  939,  998,   26,   26,   26,   26,   26,  939,  999,
       26, 1000,   26,   26,   26,   26,   26, 1001,  939, 1002,
     1003,  939,  939, 1004,   26,   26,   26,   26,   26, 1005,
      939, 1006,   26, 1007, 1008, 1009,  939,   26,   26,   26,
       26,  939,  939,  939,   26,   26,   26, 1010,  939, 1011,
     1012,   26,   26,   26,   26,  939,  939,  939,  939,   26,
       26,   26,   26, 1013, 1014, 1015,   26,   26,   26,   26,

      939,  939,  939,   26,   26,   26, 1016,  939, 1017, 1018,
       26,   26,   26,  939,  939,   26,   26, 1019, 1020, 1021,
       26,   26,  939,   26, 1022,  939, 1023, 1024,   26,  939,
     1025, 1026, 1019,  939, 1027, 1028, 1029,  939,    0,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,

      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939
    } ;

static yyconst flex_int16_t yy_nxt[5668] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   27,   27,   29,   30,   31,   32,   33,   27,
       34,   35,   36,   37,   38,   39,   27,   40,   27,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   27,   27,
       29,   30,   31,   32,   33,   27,   34,   35,   36,   37,
       38,   39,   27,   40,   27,   44,   45,   46,   45,   52,
      939,   61,  778,   53,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   55,   62,   56,   56,   56,   56,   56,

       56,   83,   57,  108,   61,   61,  939,   61,   61,   84,
       61,  124,   87,   44,   45,  125,   61,   79,   58,  932,
       62,   56,   56,   56,   56,   56,   56,   83,   57,  108,
       61,   61,   61,  930,   61,   84,   61,  124,   87,   46,
       45,  125,   61,   79,   58,   61,   61,  920,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   55,   61,   62,
       62,   63,   64,   62,   62,   61,   65,   61,   61,   61,
       66,   61,   67,   61,   61,   61,   61,   61,   61,   68,
       61,   61,   61,   61,   61,   62,   62,   63,   64,   62,
       62,   61,   65,   61,   61,   61,   66,   61,   67,   61,

       61,   61,   61,   61,   61,   68,   61,   61,   61,   61,
       61,   62,   62,   92,  896,   93,   44,   45,   61,  867,
       61,  866,   61,   99,  100,   61,  128,   61,   85,   69,
      854,   80,  833,  828,   86,  101,  102,   62,   62,   92,
       61,   93,   61,  809,   61,   61,   61,   81,   61,   99,
      100,   61,  128,   61,   85,   69,   70,   80,   62,   62,
       86,  101,  102,  774,  130,  134,   61,   71,   61,   61,
       72,   61,  120,   81,  111,   94,   61,  936,  936,  138,
       61,  936,   70,  928,   62,   62,   95,  939,  936,   96,
      130,  134,   61,   71,   88,   61,   72,  928,   89,  126,

      111,   94,   61,   62,   90,  127,   61,   73,   61,   91,
       61,   74,   95,   61,   61,   96,   75,   76,   61,  141,
       88,   77,   61,   78,   89,  126,  933,  928,  910,   62,
       90,  127,  928,   73,   61,   91,   61,   74,  910,   61,
       61,   61,   75,   76,  112,  141,  800,   77,   61,   78,
       61,   61,   61,   61,   61,   61,   61,   61,   61,  939,
       61,   61,   61,   61,   61,   61,   61,   61,   61,  910,
      112,  881,   61,   97,  918,   61,  129,   98,  910,  881,
      109,   82,  773,  135,  110,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,  103,  104,   61,   61,   97,

       61,   61,  129,   98,  131,  105,  109,   82,  133,  135,
      110,   61,  132,  106,  136,   61,   61,  149,   61,   61,
      143,   61,  107,   61,   61,   61,   61,  881,  851,  746,
      131,  105,  881,  851,  133,  878,   61,  851,  132,  106,
      136,   61,   61,  149,   61,  802,  143,   61,  107,  719,
       61,   61,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  116,   61,  117,  117,  117,  117,  117,  117,  139,
       57,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      137,   61,  782,  851,  802,  773,  119,  750,   61,  117,
      117,  117,  117,  117,  117,  139,   57,  121,  121,  121,

      121,  121,  121,  121,  121,  121,  137,   61,  122,  122,
      122,  122,  122,  122,   61,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  802,  773,  825,  727,  802,  800,
      773,  719,  154,  142,  122,  122,  122,  122,  122,  122,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  116,
       61,  123,  123,  123,  123,  123,  123,  140,   65,  142,
      657,  694,   61,  773,  719,  144,   61,  145,  119,  155,
      151,   61,   61,   61,  147,   61,   61,  123,  123,  123,
      123,  123,  123,  140,   65,   61,  146,   61,   61,   61,
      148,  144,   61,  145,  150,  155,  151,   61,   61,   61,

      147,   61,  152,  156,   61,  157,   61,   61,  153,   61,
       61,   61,  146,   61,  665,   61,  148,   61,  161,   61,
      150,  162,  166,  165,  168,  746,   61,  186,  152,  156,
       61,  157,   61,   61,  153,   61,   61,  158,   61,  159,
      160,  163,   61,   61,  161,   61,  167,  162,   61,  165,
      168,  170,   61,  186,   61,  171,   61,  169,  164,  187,
       61,   61,   61,  158,   61,  159,  160,  163,   61,   61,
      172,   61,  167,   61,   61,  191,  173,  170,   61,  719,
       61,  171,   61,  169,  164,  187,   61,   61,   61,   61,
      657,  743,  733,  620,  719,   61,  172,   61,  657,   61,

      565,  191,  173,  574,   61,  174,  174,  174,  174,  174,
      174,  174,  174,  174,   55,   61,  175,  175,  175,  175,
      175,  175,  939,   57,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  194,   61,  119,  657,  565,  119,  510,
      657,  252,  175,  175,  175,  175,  175,  175,  198,   57,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  194,
       61,  180,  180,  180,  180,  180,  180,  252,   61,  565,
      654,  197,  449,  119,  198,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  565,  438,  438,  180,  180,  180,
      180,  180,  180,  181,   61,  182,  182,  182,  182,  182,

      182,  182,  182,  182,  183,   61,  184,  184,  184,  184,
      184,  184,  939,  377,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  565,  438,  119,  317,  119,  438,  307,
      503,   61,  184,  184,  184,  184,  184,  184,  185,  185,
      185,  185,  185,  185,  185,  185,  185,   55,  190,  185,
      185,  185,  185,  185,  185,  188,  189,  192,   61,   61,
      244,   61,   61,  438,  307,  307,  195,  183,   61,   61,
      193,  119,  307,  196,  190,  185,  185,  185,  185,  185,
      185,  188,  189,  192,   61,   61,   61,   61,   61,   61,
      200,  199,  195,  201,   61,   61,  193,  203,  207,  196,

       61,  202,  205,   61,   61,  178,  204,   61,   61,   61,
      209,  214,   61,  206,   61,   61,  200,  199,  119,  201,
       61,  208,  211,  203,  207,  210,   61,  202,  205,   61,
       61,   61,  204,   61,   61,   61,   61,   61,  226,  206,
       61,  212,  213,   61,   61,   61,   61,  208,  211,  215,
      939,  210,  220,  307,  221,  216,  219,   61,  222,  223,
      178,   61,   61,   61,  217,   61,   61,   61,  218,   61,
       61,   61,   61,   61,   61,  215,   61,  224,  220,   61,
      221,  216,  219,   61,  222,  223,  225,   61,  304,   61,
      217,   61,   61,   61,  218,  227,   61,  235,   61,   61,

       61,  228,   61,  224,  229,   61,   61,  230,  231,   61,
      232,  233,  225,   61,   61,   61,  234,   61,  939,  255,
       61,  227,   61,  235,   61,   61,   61,  228,   61,   61,
      229,  236,   61,  230,  231,  279,  232,  233,  119,   61,
       61,   61,  234,   61,  256,  255,   61,  178,  178,  178,
       61,   61,   61,  119,   61,   61,  119,  236,  246,  246,
      246,  246,  246,  246,  246,  246,  246,   61,  237,  237,
      237,  237,  237,  237,  237,  237,  237,   55,   61,  238,
      238,  238,  238,  238,  238,  939,   57,  248,  248,  248,
      248,  248,  248,  248,  248,  248,   50,   51,   48,  257,

      113,   60,   59,   51,   61,  238,  238,  238,  238,  238,
      238,  266,   57,  242,   61,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  244,   48,  245,  245,  245,  245,
      245,  245,  939,   61,   42,   42,  939,  266,  939,  939,
       61,  939,  939,  939,  260,  939,  939,  939,  939,  939,
      939,   61,  245,  245,  245,  245,  245,  245,  181,   61,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  183,
      260,  248,  248,  248,  248,  248,  248,   61,  253,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  939,  939,
      939,  939,  939,  939,   61,   61,  254,  248,  248,  248,

      248,  248,  248,  249,  249,  249,  249,  249,  249,  249,
      249,  249,   61,  258,  250,  250,  250,  250,  250,  250,
       61,   61,  254,  939,  939,  939,  939,  939,  939,   61,
      939,  939,  939,  939,  939,  939,  939,  939,   61,  258,
      250,  250,  250,  250,  250,  250,  251,  251,  251,  251,
      251,  251,  251,  251,  251,   61,  261,  251,  251,  251,
      251,  251,  251,  259,  262,   61,   61,  263,  264,   61,
      939,  939,  268,  939,   61,  939,   61,  270,   61,   61,
       61,  267,  261,  251,  251,  251,  251,  251,  251,  259,
      262,   61,   61,  263,  264,   61,  265,   61,  268,  269,

       61,  277,   61,  270,   61,   61,   61,  267,   61,  271,
      272,   61,   61,  939,   61,   61,  278,  939,  282,  939,
       61,  273,  265,   61,  939,  269,  939,  277,  280,   61,
      274,  275,  276,  939,   61,  271,  272,   61,   61,   61,
       61,   61,  278,  281,  282,   61,   61,  273,  285,  939,
      287,  284,  289,  283,  280,   61,  274,  275,  276,   61,
       61,  286,  939,  288,   61,   61,   61,   61,   61,  281,
       61,   61,  290,  939,  285,  292,  287,  284,  289,  283,
       61,  291,   61,  295,  299,   61,   61,  286,  293,  288,
       61,   61,   61,   61,   61,  296,   61,  939,  290,   61,

      300,  292,   61,  294,  298,   61,   61,  291,   61,  295,
      297,   61,   61,   61,  293,  301,  302,   61,   61,  303,
       61,  296,   61,  319,   61,   61,  300,  939,   61,  294,
      298,   61,   61,  939,  939,  939,  297,   61,   61,   61,
      939,  301,  302,  329,   61,  939,   61,  939,   61,  319,
       61,  939,  939,   61,  939,   61,  939,  939,   61,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  939,  329,
      310,  310,  310,  310,  310,  310,  310,  310,  310,   61,
      242,   61,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  244,   61,  310,  310,  310,  310,  310,  310,  313,

      939,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      939,  939,  939,  939,  939,  939,  939,  939,   61,  310,
      310,  310,  310,  310,  310,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  325,   61,  312,  312,  312,  312,
      312,  312,  939,   61,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  939,  326,  939,  939,  939,  939,  939,
      325,   61,  312,  312,  312,  312,  312,  312,  181,   61,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  183,
      345,  315,  315,  315,  315,  315,  315,  939,   61,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  939,   61,

      327,  939,  939,  939,  939,  939,  345,  315,  315,  315,
      315,  315,  315,  181,   61,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  317,   61,  318,  318,  318,  318,
      318,  318,  320,  321,   61,   61,  939,   61,  322,  323,
      324,  328,   61,  330,   61,  335,  331,  336,   61,  333,
       61,  939,  318,  318,  318,  318,  318,  318,  320,  321,
       61,   61,   61,   61,  322,  323,  324,  328,   61,  330,
       61,  332,  331,  334,   61,  333,   61,  337,   61,   61,
      338,   61,  339,  344,  340,   61,  341,  342,   61,   61,
       61,  939,  939,   61,   61,   61,  939,  332,  343,  334,

      356,  939,   61,  337,   61,   61,  338,   61,  339,  939,
      340,   61,  341,  342,  346,   61,   61,   61,   61,   61,
       61,   61,  349,  350,  343,  348,  351,  352,   61,  347,
      353,   61,   61,   61,   61,  354,  939,   61,   61,   61,
      346,   61,  355,   61,   61,   61,  358,   61,  349,  350,
      360,  348,  351,  352,  939,  347,  353,   61,   61,   61,
       61,  354,   61,   61,   61,   61,   61,   61,  355,  357,
       61,   61,  358,   61,  359,  361,  360,  362,  363,  364,
       61,   61,   61,  366,   61,   61,  367,  365,   61,  939,
      368,   61,   61,   61,  939,  357,   61,  369,  939,   61,

      359,  361,  939,  362,  363,  364,   61,   61,   61,  366,
       61,   61,   61,  365,   61,  397,  368,   61,  413,   61,
       61,  939,   61,  369,  373,   61,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  939,  939,  939,   61,  939,
       61,  397,  939,  939,  413,  939,   61,  242,   61,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  244,  939,
      375,  375,  375,  375,  375,  375,  939,  414,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  375,  375,  375,  375,
      375,  375,  242,  414,  376,  376,  376,  376,  376,  376,

      376,  376,  376,  377,  386,  378,  378,  378,  378,  378,
      378,  939,   61,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  939,  939,   61,  939,  939,  385,  939,  939,
      386,  378,  378,  378,  378,  378,  378,  181,   61,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  183,  181,
       61,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      317,   61,  382,  382,  382,  382,  382,  382,  939,  939,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  939,
      939,  939,  939,  939,  939,  939,  398,   61,  382,  382,
      382,  382,  382,  382,  383,  383,  383,  383,  383,  383,

      383,  383,  383,  388,  389,  384,  384,  384,  384,  384,
      384,  387,  390,   61,  939,  392,   61,   61,  393,   61,
       61,  418,  399,   61,  391,   61,   61,  939,   61,  388,
      389,  384,  384,  384,  384,  384,  384,  387,  390,   61,
       61,  392,   61,   61,  393,   61,   61,  418,  399,   61,
      391,   61,   61,  400,   61,  939,  401,  402,  939,  939,
       61,  404,  939,  939,   61,   61,   61,  394,  394,   61,
      394,  394,  394,  394,  394,  394,  395,  403,  394,  400,
      405,  409,  401,  402,  406,   61,   61,  404,  394,  394,
       61,   61,   61,  407,  939,   61,   61,  408,   61,  412,

       61,  410,   61,  403,  411,   61,  405,  409,  939,   61,
      406,   61,  415,  939,  416,  423,   61,   61,   61,  407,
       61,  939,   61,  408,   61,  412,   61,  410,   61,  417,
      411,   61,   61,  419,  421,   61,  420,  427,  415,  422,
      416,   61,   61,   61,  424,   61,   61,   61,  425,   61,
       61,  426,  939,   61,   61,  417,   61,   61,   61,  419,
      421,  939,  420,  427,  429,  422,   61,   61,  433,  428,
      462,   61,  939,   61,  425,   61,   61,  426,   61,   61,
       61,   61,   61,   61,  432,  430,  431,   61,  434,  460,
      429,   61,   61,   61,  454,  428,  462,   61,  458,   61,

       61,   61,   61,  939,   61,  939,  939,   61,  939,  939,
      432,  430,  431,   61,  434,  460,  939,   61,  939,   61,
      454,  939,  939,   61,  458,   61,   61,   61,   61,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  242,  939,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  244,
      242,  939,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  377,   61,  442,  442,  442,  442,  442,  442,  939,
      455,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      939,  939,  939,  939,  939,  939,  939,   61,   61,  442,
      442,  442,  442,  442,  442,  443,  443,  443,  443,  443,

      443,  443,  443,  443,   61,  482,  444,  444,  444,  444,
      444,  444,  445,   61,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  939,  483,  939,  939,  939,  939,  939,
       61,  482,  444,  444,  444,  444,  444,  444,  181,  939,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  181,
      483,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      317,   61,  447,  447,  447,  447,  447,  447,  939,   61,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  939,
      939,  939,  939,  939,  939,  939,  939,   61,  447,  447,
      447,  447,  447,  447,  181,   61,  448,  448,  448,  448,

      448,  448,  448,  448,  448,  449,  459,  450,  450,  450,
      450,  450,  450,  939,  457,  450,  450,  450,  450,  450,
      450,  450,  450,  450,   61,  461,   61,  939,  456,   61,
       61,  465,  459,  450,  450,  450,  450,  450,  450,  451,
      457,  939,  452,  463,  939,   61,  939,  470,  453,  939,
       61,  461,   61,  464,  456,   61,   61,  465,   61,  469,
      471,   61,  465,   61,  466,  451,   61,  473,  452,  463,
      467,   61,  468,  470,  453,  472,  474,   61,  522,  464,
      939,  475,  939,   61,   61,  469,  471,   61,  465,   61,
      466,  484,   61,  473,   61,   61,  467,   61,  468,  476,

      477,  472,  474,   61,  480,   61,  478,  475,  479,   61,
      481,   61,   61,   61,   61,  485,   61,  484,  939,   61,
       61,   61,   61,   61,   61,  476,  477,   61,  486,  939,
      480,   61,  478,  487,  479,   61,  481,   61,   61,   61,
       61,  485,   61,  488,   61,   61,  489,  492,   61,  491,
       61,  494,  493,   61,  486,   61,  490,   61,  495,  487,
      496,   61,   61,   61,   61,   61,  498,  497,   61,  488,
       61,   61,  489,  492,   61,  491,  502,  494,  493,   61,
      499,   61,  490,   61,  495,  517,  496,   61,   61,   61,
       61,   61,  498,  497,   61,  500,  501,   61,   61,   61,

       61,   61,  502,  528,  526,   61,  499,   61,  939,  939,
      939,  517,  939,   61,  939,  939,  939,  939,   61,  939,
      939,  500,  501,  939,   61,   61,  939,   61,  939,  528,
      526,  939,  506,   61,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  242,   61,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  242,  939,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  377,  939,  508,  508,  508,
      508,  508,  508,  939,   61,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  508,  508,  508,  508,  508,  508,  242,

       61,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      510,  520,  511,  511,  511,  511,  511,  511,  939,   61,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  939,
      939,   61,  939,  939,  539,  939,  939,  520,  511,  511,
      511,  511,  511,  511,  181,   61,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  317,  181,   61,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  449,   61,  514,
      514,  514,  514,  514,  514,  939,  939,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  939,  939,  939,  939,
      939,  939,  939,  939,   61,  514,  514,  514,  514,  514,

      514,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      524,  518,  516,  516,  516,  516,  516,  516,   61,  519,
      521,  939,  525,   61,   61,   61,   61,  939,  527,   61,
      939,  523,  939,  939,  939,  939,  524,  518,  516,  516,
      516,  516,  516,  516,   61,  519,  521,   61,  525,   61,
       61,   61,   61,  529,  527,   61,  530,  523,  531,  532,
      533,  534,   61,   61,  535,  536,   61,   61,  939,  544,
       61,  939,   61,   61,   61,   61,   61,  537,  538,  529,
       61,  540,  530,  939,  531,  532,  533,  534,   61,   61,
      535,  536,   61,   61,   61,  544,   61,   61,   61,  545,

       61,   61,   61,  537,  538,  541,   61,  540,   61,  542,
      543,  547,   61,  548,  546,   61,  550,  549,   61,  939,
       61,  939,  939,   61,  939,  545,   61,   61,  551,   61,
       61,  541,   61,  553,   61,  542,  543,  547,   61,  548,
      546,   61,   61,  549,   61,  554,   61,  556,  555,  552,
       61,  558,   61,   61,  551,   61,   61,   61,   61,  553,
       61,   61,   61,   61,  557,   61,   61,  560,   61,  559,
      939,  554,   61,  556,  555,  552,   61,  558,  939,  561,
      582,   61,   61,   61,   61,   61,   61,   61,   61,   61,
      557,   61,   61,  560,  939,  559,  566,  566,  566,  566,

      566,  566,  566,  566,  566,  561,  582,   61,   61,  939,
       61,   61,  242,  939,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  377,  242,  939,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  510,  939,  568,  568,  568,
      568,  568,  568,  939,  939,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  568,  568,  568,  568,  568,  568,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  576,  579,
      570,  570,  570,  570,  570,  570,  939,   61,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  939,   61,  939,

      939,  939,  939,  939,  576,  579,  570,  570,  570,  570,
      570,  570,  181,   61,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  449,   61,  572,  572,  572,  572,  572,
      572,  939,  587,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  939,  939,  939,  939,  939,  939,  939,  586,
      939,  572,  572,  572,  572,  572,  572,  181,  587,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  574,  577,
      575,  575,  575,  575,  575,  575,  578,  580,   61,  581,
      939,  583,  939,   61,  939,  939,   61,   61,   61,   61,
      584,  588,  585,  939,  939,  577,  575,  575,  575,  575,

      575,  575,  578,  580,   61,  581,   61,  583,   61,   61,
      591,   61,   61,   61,   61,   61,  584,  588,  585,   61,
      590,  592,  589,  593,  595,   61,  594,   61,   61,   61,
       61,  597,   61,  600,   61,   61,  591,   61,  599,  939,
      939,  596,   61,   61,   61,   61,  590,  592,  589,  593,
      595,   61,  594,   61,   61,   61,   61,   61,  598,  600,
      601,   61,  602,   61,  603,   61,   61,  596,   61,   61,
       61,   61,   61,  604,  605,   61,   61,   61,  606,  607,
      939,  939,  609,   61,  598,  608,  601,   61,  602,   61,
      603,   61,   61,   61,   61,   61,   61,   61,   61,  604,

      605,   61,   61,   61,  606,  607,  611,  610,  609,   61,
       61,  608,   61,   61,   61,  612,   61,  632,  613,   61,
       61,   61,   61,  939,  939,  939,  939,  939,  626,   61,
       61,   61,  611,  610,   61,   61,   61,  939,   61,  939,
       61,  612,   61,  632,  613,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  626,   61,   61,   61,  638,  939,
       61,  242,  939,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  510,  636,  618,  618,  618,  618,  618,  618,
      939,   61,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  939,   61,  939,  939,  939,  939,  939,  939,  636,

      618,  618,  618,  618,  618,  618,  242,   61,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  620,   61,  621,
      621,  621,  621,  621,  621,  939,  642,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  939,  939,   61,  939,
      939,  939,  939,  939,  939,  621,  621,  621,  621,  621,
      621,  181,  642,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  449,  181,   61,  622,  622,  622,  622,  622,
      622,  622,  622,  622,  574,  939,  623,  623,  623,  623,
      623,  623,  939,  939,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  939,  939,  939,  939,  939,  939,  939,

      939,  631,  623,  623,  623,  623,  623,  623,  624,  624,
      624,  624,  624,  624,  624,  624,  624,   61,  633,  625,
      625,  625,  625,  625,  625,   61,  628,  631,  629,  627,
       61,  939,  630,   61,   61,   61,  634,  939,  939,  637,
       61,   61,  939,   61,  633,  625,  625,  625,  625,  625,
      625,   61,  628,  639,  629,  627,   61,  640,  630,   61,
       61,   61,  634,  635,  641,  637,   61,   61,  643,   61,
       61,  645,   61,  644,  646,   61,   61,   61,  647,  639,
       61,  648,   61,  640,   61,   61,   61,   61,   61,  635,
      641,   61,   61,  649,  643,   61,   61,  645,   61,  644,

      646,   61,   61,   61,  647,   61,   61,  648,   61,  650,
       61,   61,   61,   61,   61,   61,  651,   61,   61,  649,
      653,   61,  652,   61,  939,   61,   61,  668,  669,   61,
       61,   61,   61,   61,  667,  650,  672,  939,   61,  939,
      939,   61,  651,  939,  939,  939,  653,   61,  652,   61,
       61,   61,   61,  668,  669,   61,   61,  939,   61,   61,
      667,  674,  672,  242,   61,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  510,  242,   61,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  620,  674,  659,  659,
      659,  659,  659,  659,  939,  678,  659,  659,  659,  659,

      659,  659,  659,  659,  659,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  659,  659,  659,  659,  659,  659,
      660,  660,  660,  660,  660,  660,  660,  660,  660,   61,
      671,  661,  661,  661,  661,  661,  661,  939,   61,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  939,   61,
      939,  939,  939,  939,  939,   61,  671,  661,  661,  661,
      661,  661,  661,  181,   61,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  574,   61,  663,  663,  663,  663,
      663,  663,  939,   61,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  939,  670,  939,  939,  939,  939,  939,

      939,   61,  663,  663,  663,  663,  663,  663,  181,   61,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  665,
      670,  666,  666,  666,  666,  666,  666,   61,  673,  675,
      676,   61,  677,  679,  680,  939,  939,  681,   61,   61,
       61,  939,  939,   61,   61,  682,  939,  666,  666,  666,
      666,  666,  666,   61,  673,  675,  676,   61,  677,  679,
      680,  683,   61,  681,   61,   61,   61,  684,  686,   61,
       61,  682,  685,   61,  687,   61,  700,   61,   61,   61,
       61,   61,   61,  701,   61,  705,   61,  683,   61,  939,
      939,  939,  939,  684,  686,  939,  939,  939,  685,   61,

      687,   61,  700,   61,   61,  939,   61,   61,   61,  701,
       61,  705,   61,  242,  939,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  620,   61,  692,  692,  692,  692,
      692,  692,  939,   61,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  939,  939,  939,  939,  939,  939,  939,
      939,   61,  692,  692,  692,  692,  692,  692,  242,   61,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  694,
      704,  695,  695,  695,  695,  695,  695,  939,   61,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  939,  939,
       61,  939,  939,  939,  939,  939,  704,  695,  695,  695,

      695,  695,  695,  181,   61,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  574,  181,   61,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  665,  939,  697,  697,
      697,  697,  697,  697,  939,  939,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  939,  712,  939,  939,  939,
      939,  939,  939,  702,  697,  697,  697,  697,  697,  697,
      698,  698,  698,  698,  698,  698,  698,  698,  698,   61,
      703,  699,  699,  699,  699,  699,  699,  706,  707,  702,
       61,   61,  708,  939,  939,  710,   61,   61,  709,  939,
       61,  714,   61,   61,  711,   61,  703,  699,  699,  699,

      699,  699,  699,  706,  707,   61,   61,   61,  708,  713,
       61,  710,   61,   61,  709,  715,   61,  714,   61,   61,
      711,  729,   61,   61,  939,   61,  939,  939,  939,  939,
      939,   61,  939,  939,  939,  713,   61,   61,  939,  939,
      735,  715,  939,  939,  939,  939,  939,  729,   61,   61,
      242,   61,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  620,  242,   61,  720,  720,  720,  720,  720,  720,
      720,  720,  720,  694,   61,  721,  721,  721,  721,  721,
      721,  939,  939,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  939,  939,  939,  939,  939,  939,  939,  765,

       61,  721,  721,  721,  721,  721,  721,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  734,   61,  723,  723,
      723,  723,  723,  723,  939,   61,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  939,   61,  939,  939,  939,
      939,  939,  734,   61,  723,  723,  723,  723,  723,  723,
      181,   61,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  665,   61,  725,  725,  725,  725,  725,  725,  939,
      939,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      939,  730,  939,  939,  939,  939,  939,  939,   61,  725,
      725,  725,  725,  725,  725,  181,  757,  726,  726,  726,

      726,  726,  726,  726,  726,  726,  727,  730,  728,  728,
      728,  728,  728,  728,   61,  731,  736,  732,   61,   61,
      738,  939,   61,  739,  740,   61,  741,  737,   61,   61,
       61,  742,   61,   61,  728,  728,  728,  728,  728,  728,
       61,  731,  736,  732,   61,   61,  738,   61,   61,  739,
      740,   61,  741,  737,   61,   61,   61,  742,   61,   61,
      786,  939,  939,  939,  939,  939,   61,  939,  939,  939,
      939,  939,  939,   61,  242,  939,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  694,   61,  748,  748,  748,
      748,  748,  748,  939,   61,  748,  748,  748,  748,  748,

      748,  748,  748,  748,  939,  939,  939,  939,  939,  939,
      939,  939,   61,  748,  748,  748,  748,  748,  748,  242,
       61,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      750,  766,  751,  751,  751,  751,  751,  751,  939,  787,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  939,
      939,   61,  939,  939,  939,  939,  939,  766,  751,  751,
      751,  751,  751,  751,  181,  787,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  665,  181,   61,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  727,  939,  753,
      753,  753,  753,  753,  753,  939,  939,  753,  753,  753,

      753,  753,  753,  753,  753,  753,  939,  939,  939,  939,
      939,  939,  939,  939,  756,  753,  753,  753,  753,  753,
      753,  754,  754,  754,  754,  754,  754,  754,  754,  754,
       61,  759,  755,  755,  755,  755,  755,  755,   61,  760,
      756,  762,  758,   61,  939,  768,  939,   61,   61,  939,
      767,  788,   61,   61,  763,  761,   61,  759,  755,  755,
      755,  755,  755,  755,   61,  760,   61,  762,  758,   61,
      764,  768,   61,   61,   61,  769,  767,  788,   61,   61,
      763,  761,  939,  939,  939,  939,  784,   61,  939,   61,
      939,  939,   61,  939,  939,  939,  764,  939,   61,  939,

      242,  769,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  694,  784,   61,  242,   61,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  750,  815,  776,  776,  776,
      776,  776,  776,  939,  939,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  939,  939,  939,  939,  939,  939,
      939,  939,  815,  776,  776,  776,  776,  776,  776,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  790,  816,
      778,  778,  778,  778,  778,  778,  939,   61,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  939,   61,  939,
      939,  939,  939,  939,  790,  816,  778,  778,  778,  778,

      778,  778,  181,   61,  779,  779,  779,  779,  779,  779,
      779,  779,  779,  727,   61,  780,  780,  780,  780,  780,
      780,  939,  939,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  939,  785,  939,  939,  939,  939,  939,  939,
      939,  780,  780,  780,  780,  780,  780,  181,   61,  781,
      781,  781,  781,  781,  781,  781,  781,  781,  782,  785,
      783,  783,  783,  783,  783,  783,  789,  791,  796,  792,
      793,  794,   61,  795,   61,  797,   61,  811,   61,  818,
      810,   61,   61,   61,  939,   61,  783,  783,  783,  783,
      783,  783,  789,  791,  796,   61,   61,  939,   61,   61,

      939,  797,   61,  811,   61,  818,  810,   61,   61,   61,
      939,   61,  804,  804,  804,  804,  804,  804,  804,  804,
      804,   61,   61,  821,  939,   61,  242,  822,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  750,  839,  804,
      804,  804,  804,  804,  804,  939,   61,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  939,   61,  939,  939,
      939,  939,  939,  939,  839,  804,  804,  804,  804,  804,
      804,  242,   61,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  817,   61,  806,  806,  806,  806,  806,  806,
      181,  840,  380,  380,  380,  380,  380,  380,  380,  380,

      380,  727,   61,  939,  939,  939,  939,  939,  817,  939,
      806,  806,  806,  806,  806,  806,  181,  840,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  782,   61,  808,
      808,  808,  808,  808,  808,  939,  823,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  834,  819,  824,  812,
      820,  847,   61,  835,   61,  808,  808,  808,  808,  808,
      808,  813,  823,   61,   61,  841,   61,   61,  814,   61,
      842,   61,  834,  860,  824,  812,   61,  847,   61,  835,
       61,  939,  939,  939,  939,  939,  939,  813,   61,   61,
       61,  841,   61,   61,  814,   61,  842,   61,  843,  860,

      939,  242,   61,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  750,  242,   61,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  836,   61,  830,  830,  830,  830,
      830,  830,  939,   61,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  939,   61,  939,  939,  939,  939,  939,
      836,   61,  830,  830,  830,  830,  830,  830,  181,   61,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  782,
       61,  832,  832,  832,  832,  832,  832,  939,  844,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  837,  845,
      846,  858,   61,  939,  838,  857,   61,  832,  832,  832,

      832,  832,  832,   61,  861,  861,   61,  861,  861,  861,
      861,  861,  861,  939,  837,  861,   61,  858,   61,   61,
      838,  857,   61,  939,  939,  861,  861,  939,  939,   61,
      939,  939,   61,  853,  853,  853,  853,  853,  853,  853,
      853,  853,   61,  939,  939,   61,  242,  939,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  939,  939,  853,
      853,  853,  853,  853,  853,  181,   61,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  782,  855,  856,  862,
       61,   61,   61,  859,   61,  853,  853,  853,  853,  853,
      853,   61,   61,   61,   61,  939,   61,  939,  939,  869,

      870,  939,  939,  855,  856,  862,   61,   61,   61,  859,
       61,  873,  874,  882,  886,  887,  868,   61,   61,   61,
       61,  242,   61,  440,  440,  440,  440,  440,  440,  440,
      440,  440,   61,   61,   61,  871,  939,  873,  874,  882,
      886,  887,  868,  939,   61,  939,  883,  939,  884,  888,
      885,   61,  889,   61,  876,  877,   61,  939,   61,   61,
       61,  871,  872,  872,   61,  872,  872,  872,  872,  872,
      872,   61,  883,  872,  884,  888,  885,   61,  889,   61,
      876,  877,   61,  872,  872,  890,  891,  892,  893,  900,
       61,  897,   61,  898,  899,   61,  901,   61,  902,   61,

       61,  903,   61,  904,  906,   61,   61,   61,   61,  905,
      939,  890,  891,  892,  893,  900,   61,  897,   61,  898,
      899,   61,  901,   61,  902,   61,   61,  903,   61,  904,
      906,   61,   61,   61,   61,  905,  911,  912,  913,   61,
       61,  914,   61,   61,  915,  916,   61,   61,  917,   61,
      921,  922,   61,   61,  923,  924,   61,   61,  929,   61,
       61,   61,  911,  912,  913,   61,   61,  914,   61,   61,
      915,  916,   61,   61,  917,   61,  921,  922,   61,   61,
      923,  924,   61,   61,  929,   61,   61,   61,   61,  939,
      939,  939,  939,  939,   61,  939,  939,  939,  939,  939,

      939,   61,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,   61,   41,   41,   41,   41,   43,
       43,   43,   43,   47,   47,   47,   47,   49,  939,   49,
       49,   50,   50,   50,   50,  114,  939,  114,  114,  118,
      118,  176,  176,  177,  177,  239,  239,  240,  240,  241,
      241,  305,  305,  306,  306,  370,  370,  371,  371,  372,
      372,  396,  939,  396,  396,  435,  435,  436,  436,  437,
      437,  504,  504,  505,  505,  562,  562,  563,  563,  564,
      564,  614,  614,  615,  615,  616,  616,  504,  504,  655,
      655,  656,  656,  688,  688,  689,  689,  690,  690,  716,

      716,  717,  717,  718,  718,  615,  615,  744,  744,  745,
      745,  770,  770,  771,  771,  772,  772,  798,  798,  799,
      799,  801,  801,  689,  689,  826,  826,  827,  827,  848,
      848,  849,  849,  850,  850,  861,  939,  861,  861,  863,
      939,  863,  863,  864,  864,  865,  865,  872,  939,  872,
      872,  875,  939,  875,  875,  744,  744,  879,  879,  880,
      880,  894,  894,  895,  895,  907,  907,  908,  908,  909,
      909,  799,  799,  919,  919,  925,  925,  926,  926,  927,
      927,  931,  931,  934,  934,  935,  935,  937,  937,  938,
      938,    7,  939,  939,  939,  939,  939,  939,  939,  939,

      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939
    } ;

static yyconst flex_int16_t yy_chk[5668] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   10,   10,   11,   11,   15,
       17,   27, 1028,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   24,   16,   16,   16,   16,   16,

       16,   28,   16,   37,   61,   24,   17,   27,   24,   28,
       37,   63,   30,   44,   44,   64,   28,   24,   16, 1024,
       24,   16,   16,   16,   16,   16,   16,   28,   16,   37,
       61,   24,   30, 1022,   24,   28,   37,   63,   30,   45,
       45,   64,   28,   24,   16,   20,   20, 1018,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   30,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   21,   21,   32, 1012,   32,   46,   46,   32, 1004,
       21, 1003,   21,   35,   35,   65,   68,   68,   29,   21,
      998,   25,  994,  993,   29,   35,   35,   21,   21,   32,
       29,   32,   25,  989,   32,   25,   21,   25,   21,   35,
       35,   65,   68,   68,   29,   21,   22,   25,   22,   22,
       29,   35,   35,  985,   70,   73,   29,   22,   25,   22,
       22,   25,  947,   25,   39,   33,   22,  938,  937,   77,
       39,  935,   22,  934,   22,   22,   33,  933,  932,   33,
       70,   73,   33,   22,   31,   22,   22,  931,   31,   66,

       39,   33,   22,   23,   31,   67,   39,   23,   66,   31,
       31,   23,   33,   77,   23,   33,   23,   23,   33,   80,
       31,   23,   67,   23,   31,   66,  930,  927,  926,   23,
       31,   67,  920,   23,   66,   31,   31,   23,  919,   77,
       23,   90,   23,   23,   40,   80,  918,   23,   67,   23,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       40,   26,   26,   26,   26,   26,   26,   90,   26,  909,
       40,  908,   26,   34,  907,   26,   69,   34,  896,  895,
       38,   26,  894,   74,   38,   69,   40,   26,   26,   26,
       26,   26,   26,   34,   26,   36,   36,   74,   26,   34,

       38,   26,   69,   34,   71,   36,   38,   26,   72,   74,
       38,   69,   71,   36,   75,   72,   75,   87,   87,   34,
       82,   93,   36,   74,   71,   36,   38,  880,  879,  878,
       71,   36,  866,  865,   72,  864,   82,  850,   71,   36,
       75,   72,   75,   87,   87,  849,   82,   93,   36,  848,
       71,   36,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   82,   54,   54,   54,   54,   54,   54,   78,
       54,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       76,   78,  832,  828,  827,  826,  825,  804,   76,   54,
       54,   54,   54,   54,   54,   78,   54,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   76,   78,   59,   59,
       59,   59,   59,   59,   76,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  801,  799,  798,  780,  774,  773,
      772,  771,   94,   81,   59,   59,   59,   59,   59,   59,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       81,   62,   62,   62,   62,   62,   62,   79,   62,   81,
      770,  748,   79,  745,  744,   83,   94,   84,  743,   95,
       89,   62,   89,  103,   85,   95,   81,   62,   62,   62,
       62,   62,   62,   79,   62,   83,   84,   84,   79,   85,
       86,   83,   94,   84,   88,   95,   89,   62,   89,  103,

       85,   95,   91,   96,   86,   97,   88,   91,   92,   92,
       97,   83,   84,   84,  725,   85,   86,  104,   99,   96,
       88,  100,  105,  102,  107,  719,  100,  124,   91,   96,
       86,   97,   88,   91,   92,   92,   97,   98,   99,   98,
       98,  101,  102,  104,   99,   96,  106,  100,   98,  102,
      107,  109,  100,  124,  106,  110,  105,  108,  101,  125,
      109,  101,  110,   98,   99,   98,   98,  101,  102,  108,
      111,  127,  106,  111,   98,  130,  112,  109,  112,  718,
      106,  110,  105,  108,  101,  125,  109,  101,  110,  173,
      717,  716,  705,  692,  690,  108,  111,  127,  689,  111,

      688,  130,  112,  663,  112,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  173,  115,  115,  115,  115,
      115,  115,  122,  115,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  133,  133,  657,  656,  655,  654,  618,
      616,  186,  115,  115,  115,  115,  115,  115,  137,  115,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  133,
      133,  119,  119,  119,  119,  119,  119,  186,  137,  615,
      614,  136,  572,  565,  137,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  564,  563,  562,  119,  119,  119,
      119,  119,  119,  121,  137,  121,  121,  121,  121,  121,

      121,  121,  121,  121,  121,  136,  121,  121,  121,  121,
      121,  121,  180,  508,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  505,  504,  503,  447,  438,  437,  436,
      435,  136,  121,  121,  121,  121,  121,  121,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  129,  123,
      123,  123,  123,  123,  123,  126,  128,  131,  129,  131,
      375,  126,  134,  372,  371,  370,  134,  315,  195,  128,
      132,  307,  306,  135,  129,  123,  123,  123,  123,  123,
      123,  126,  128,  131,  129,  131,  132,  126,  134,  135,
      139,  138,  134,  140,  195,  128,  132,  142,  146,  135,

      138,  141,  144,  141,  142,  305,  143,  139,  143,  140,
      148,  152,  132,  145,  146,  135,  139,  138,  304,  140,
      144,  147,  150,  142,  146,  149,  138,  141,  144,  141,
      142,  145,  143,  139,  143,  140,  150,  147,  162,  145,
      146,  151,  151,  149,  148,  152,  144,  147,  150,  153,
      251,  149,  156,  241,  157,  154,  155,  145,  158,  159,
      240,  153,  150,  147,  154,  155,  157,  156,  154,  149,
      148,  152,  162,  154,  158,  153,  151,  160,  156,  159,
      157,  154,  155,  160,  158,  159,  161,  153,  239,  161,
      154,  155,  157,  156,  154,  163,  163,  171,  162,  154,

      158,  164,  151,  160,  165,  159,  165,  166,  167,  160,
      168,  169,  161,  164,  171,  161,  170,  188,  238,  188,
      200,  163,  163,  171,  167,  166,  168,  164,  170,  169,
      165,  172,  165,  166,  167,  212,  168,  169,  178,  164,
      171,  172,  170,  188,  189,  188,  200,  177,  176,  118,
      167,  166,  168,  116,  170,  169,   55,  172,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  172,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  189,  174,
      174,  174,  174,  174,  174,  184,  174,  184,  184,  184,
      184,  184,  184,  184,  184,  184,   51,   50,   47,  190,

       42,   19,   18,   14,  189,  174,  174,  174,  174,  174,
      174,  201,  174,  179,  201,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,   12,  179,  179,  179,  179,
      179,  179,    7,  190,    4,    3,    0,  201,    0,    0,
      201,    0,    0,    0,  193,    0,    0,    0,    0,    0,
        0,  193,  179,  179,  179,  179,  179,  179,  182,  190,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      193,  182,  182,  182,  182,  182,  182,  193,  187,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,    0,
        0,    0,    0,    0,  203,  219,  187,  182,  182,  182,

      182,  182,  182,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  187,  191,  183,  183,  183,  183,  183,  183,
      203,  219,  187,    0,    0,    0,    0,    0,    0,  191,
        0,    0,    0,    0,    0,    0,    0,    0,  187,  191,
      183,  183,  183,  183,  183,  183,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  191,  194,  185,  185,  185,
      185,  185,  185,  192,  196,  192,  196,  197,  198,  197,
        0,    0,  204,    0,  204,    0,  194,  206,  206,  232,
      198,  202,  194,  185,  185,  185,  185,  185,  185,  192,
      196,  192,  196,  197,  198,  197,  199,  202,  204,  205,

      204,  210,  194,  206,  206,  232,  198,  202,  199,  207,
      208,  208,  207,    0,  210,  205,  211,    0,  214,    0,
      214,  209,  199,  202,    0,  205,    0,  210,  213,  211,
      209,  209,  209,    0,  199,  207,  208,  208,  207,  209,
      210,  205,  211,  213,  214,  213,  214,  209,  217,    0,
      220,  216,  222,  215,  213,  211,  209,  209,  209,  215,
      216,  218,    0,  221,  217,  209,  220,  218,  223,  213,
      222,  213,  223,    0,  217,  225,  220,  216,  222,  215,
      221,  224,  224,  227,  231,  215,  216,  218,  226,  221,
      217,  225,  220,  218,  223,  228,  222,    0,  223,  227,

      233,  225,  228,  226,  230,  226,  221,  224,  224,  227,
      229,  229,  255,  230,  226,  234,  235,  225,  231,  236,
      233,  228,  235,  252,  252,  227,  233,    0,  228,  226,
      230,  226,  234,    0,    0,    0,  229,  229,  255,  230,
        0,  234,  235,  261,  231,    0,  233,    0,  235,  252,
      252,    0,    0,  236,    0,  261,    0,    0,  234,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  245,  261,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  236,
      243,  261,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  267,  243,  243,  243,  243,  243,  243,  246,

        0,  246,  246,  246,  246,  246,  246,  246,  246,  246,
        0,    0,    0,    0,    0,    0,    0,    0,  267,  243,
      243,  243,  243,  243,  243,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  257,  290,  244,  244,  244,  244,
      244,  244,  248,  257,  248,  248,  248,  248,  248,  248,
      248,  248,  248,    0,  258,    0,    0,    0,    0,    0,
      257,  290,  244,  244,  244,  244,  244,  244,  247,  257,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      278,  247,  247,  247,  247,  247,  247,  250,  258,  250,
      250,  250,  250,  250,  250,  250,  250,  250,    0,  278,

      259,    0,    0,    0,    0,    0,  278,  247,  247,  247,
      247,  247,  247,  249,  258,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  278,  249,  249,  249,  249,
      249,  249,  253,  254,  259,  254,    0,  253,  256,  256,
      256,  260,  260,  262,  262,  268,  263,  269,  256,  265,
      265,    0,  249,  249,  249,  249,  249,  249,  253,  254,
      259,  254,  263,  253,  256,  256,  256,  260,  260,  262,
      262,  264,  263,  266,  256,  265,  265,  270,  264,  268,
      271,  269,  272,  277,  273,  266,  274,  275,  263,  270,
      273,    0,    0,  275,  272,  271,    0,  264,  276,  266,

      288,    0,  274,  270,  264,  268,  271,  269,  272,    0,
      273,  266,  274,  275,  279,  270,  273,  277,  276,  275,
      272,  271,  281,  282,  276,  280,  283,  284,  274,  279,
      285,  280,  292,  283,  288,  286,    0,  285,  281,  282,
      279,  286,  287,  277,  276,  287,  291,  284,  281,  282,
      294,  280,  283,  284,    0,  279,  285,  280,  292,  283,
      288,  286,  291,  285,  281,  282,  294,  286,  287,  289,
      289,  287,  291,  284,  293,  295,  294,  296,  297,  298,
      293,  297,  299,  300,  295,  300,  301,  299,  291,    0,
      302,  296,  294,  302,    0,  289,  289,  303,    0,  298,

      293,  295,    0,  296,  297,  298,  293,  297,  299,  300,
      295,  300,  332,  299,  303,  329,  302,  296,  346,  302,
      301,    0,  329,  303,  308,  298,  308,  308,  308,  308,
      308,  308,  308,  308,  308,    0,    0,    0,  332,    0,
      303,  329,    0,    0,  346,    0,  301,  309,  329,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,    0,
      309,  309,  309,  309,  309,  309,  310,  347,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  309,  309,  309,  309,
      309,  309,  311,  347,  311,  311,  311,  311,  311,  311,

      311,  311,  311,  311,  320,  311,  311,  311,  311,  311,
      311,  312,  351,  312,  312,  312,  312,  312,  312,  312,
      312,  312,    0,    0,  320,    0,    0,  319,    0,    0,
      320,  311,  311,  311,  311,  311,  311,  314,  351,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  316,
      320,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  319,  316,  316,  316,  316,  316,  316,  318,    0,
      318,  318,  318,  318,  318,  318,  318,  318,  318,    0,
        0,    0,    0,    0,    0,    0,  330,  319,  316,  316,
      316,  316,  316,  316,  317,  317,  317,  317,  317,  317,

      317,  317,  317,  322,  323,  317,  317,  317,  317,  317,
      317,  321,  324,  321,    0,  326,  323,  326,  327,  322,
      330,  352,  331,  352,  325,  331,  327,    0,  324,  322,
      323,  317,  317,  317,  317,  317,  317,  321,  324,  321,
      325,  326,  323,  326,  327,  322,  330,  352,  331,  352,
      325,  331,  327,  333,  324,    0,  334,  335,    0,    0,
      337,  337,    0,    0,  334,  335,  325,  328,  328,  333,
      328,  328,  328,  328,  328,  328,  328,  336,  328,  333,
      338,  342,  334,  335,  339,  336,  337,  337,  328,  328,
      334,  335,  339,  340,    0,  333,  341,  341,  342,  345,

      338,  343,  340,  336,  344,  345,  338,  342,    0,  343,
      339,  336,  348,    0,  349,  357,  344,  349,  339,  340,
      348,    0,  341,  341,  342,  345,  338,  343,  340,  350,
      344,  345,  350,  353,  355,  343,  354,  361,  348,  356,
      349,  362,  344,  349,  358,  354,  348,  353,  359,  357,
      355,  360,    0,  361,  360,  350,  359,  356,  350,  353,
      355,    0,  354,  361,  364,  356,  364,  362,  368,  363,
      394,  354,    0,  353,  359,  357,  355,  360,  358,  361,
      360,  363,  359,  356,  367,  365,  366,  366,  369,  392,
      364,  365,  364,  367,  386,  363,  394,  386,  390,  390,

      369,  392,  368,    0,  358,    0,    0,  363,    0,    0,
      367,  365,  366,  366,  369,  392,    0,  365,    0,  367,
      386,    0,    0,  386,  390,  390,  369,  392,  368,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  374,    0,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      376,    0,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  397,  376,  376,  376,  376,  376,  376,  378,
      387,  378,  378,  378,  378,  378,  378,  378,  378,  378,
        0,    0,    0,    0,    0,    0,    0,  400,  397,  376,
      376,  376,  376,  376,  376,  377,  377,  377,  377,  377,

      377,  377,  377,  377,  387,  413,  377,  377,  377,  377,
      377,  377,  379,  400,  379,  379,  379,  379,  379,  379,
      379,  379,  379,    0,  414,    0,    0,    0,    0,    0,
      387,  413,  377,  377,  377,  377,  377,  377,  380,    0,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  381,
      414,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  420,  381,  381,  381,  381,  381,  381,  382,  431,
      382,  382,  382,  382,  382,  382,  382,  382,  382,    0,
        0,    0,    0,    0,    0,    0,    0,  420,  381,  381,
      381,  381,  381,  381,  383,  431,  383,  383,  383,  383,

      383,  383,  383,  383,  383,  383,  391,  383,  383,  383,
      383,  383,  383,  384,  389,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  388,  393,  391,    0,  388,  389,
      396,  396,  391,  383,  383,  383,  383,  383,  383,  385,
      389,    0,  385,  395,    0,  393,    0,  401,  385,    0,
      388,  393,  391,  395,  388,  389,  396,  396,  399,  399,
      402,  395,  395,  401,  398,  385,  402,  404,  385,  395,
      398,  393,  398,  401,  385,  403,  405,  398,  456,  395,
        0,  406,    0,  404,  399,  399,  402,  395,  395,  401,
      398,  415,  402,  404,  405,  403,  398,  406,  398,  407,

      408,  403,  405,  398,  411,  407,  409,  406,  410,  404,
      412,  415,  456,  412,  416,  416,  408,  415,    0,  411,
      405,  403,  409,  406,  410,  407,  408,  417,  417,    0,
      411,  407,  409,  418,  410,  418,  412,  415,  456,  412,
      416,  416,  408,  419,  419,  411,  421,  423,  409,  422,
      410,  425,  424,  417,  417,  422,  421,  426,  426,  418,
      427,  418,  427,  421,  424,  423,  429,  428,  429,  419,
      419,  425,  421,  423,  428,  422,  434,  425,  424,  434,
      430,  422,  421,  426,  426,  451,  427,  430,  427,  421,
      424,  423,  429,  428,  429,  432,  433,  425,  433,  460,

      428,  451,  434,  462,  460,  434,  430,  432,    0,    0,
        0,  451,    0,  430,    0,    0,    0,    0,  475,    0,
        0,  432,  433,    0,  433,  460,    0,  451,    0,  462,
      460,    0,  439,  432,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  440,  475,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  441,    0,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,    0,  441,  441,  441,
      441,  441,  441,  442,  478,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  441,  441,  441,  441,  441,  441,  443,

      478,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  454,  443,  443,  443,  443,  443,  443,  444,  479,
      444,  444,  444,  444,  444,  444,  444,  444,  444,    0,
        0,  454,    0,    0,  473,    0,    0,  454,  443,  443,
      443,  443,  443,  443,  446,  479,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  448,  454,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  473,  448,
      448,  448,  448,  448,  448,  450,    0,  450,  450,  450,
      450,  450,  450,  450,  450,  450,    0,    0,    0,    0,
        0,    0,    0,    0,  473,  448,  448,  448,  448,  448,

      448,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      458,  452,  449,  449,  449,  449,  449,  449,  452,  453,
      455,    0,  459,  458,  459,  461,  453,    0,  461,  455,
        0,  457,    0,    0,    0,    0,  458,  452,  449,  449,
      449,  449,  449,  449,  452,  453,  455,  457,  459,  458,
      459,  461,  453,  463,  461,  455,  464,  457,  465,  466,
      467,  468,  463,  480,  469,  470,  467,  466,    0,  482,
      468,    0,  470,  457,  465,  472,  464,  471,  472,  463,
      469,  474,  464,    0,  465,  466,  467,  468,  463,  480,
      469,  470,  467,  466,  471,  482,  468,  474,  470,  483,

      465,  472,  464,  471,  472,  476,  469,  474,  476,  477,
      481,  485,  481,  486,  484,  487,  489,  488,  477,    0,
      471,    0,    0,  474,    0,  483,  484,  485,  490,  486,
      488,  476,  498,  492,  476,  477,  481,  485,  481,  486,
      484,  487,  492,  488,  477,  493,  490,  495,  494,  491,
      489,  497,  484,  485,  490,  486,  488,  491,  498,  492,
      494,  502,  493,  495,  496,  497,  496,  500,  492,  499,
        0,  493,  490,  495,  494,  491,  489,  497,    0,  501,
      523,  523,  500,  491,  501,  499,  494,  502,  493,  495,
      496,  497,  496,  500,    0,  499,  506,  506,  506,  506,

      506,  506,  506,  506,  506,  501,  523,  523,  500,    0,
      501,  499,  507,    0,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  509,    0,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,    0,  509,  509,  509,
      509,  509,  509,  511,    0,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  509,  509,  509,  509,  509,  509,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  517,  520,
      510,  510,  510,  510,  510,  510,  514,  520,  514,  514,
      514,  514,  514,  514,  514,  514,  514,    0,  517,    0,

        0,    0,    0,    0,  517,  520,  510,  510,  510,  510,
      510,  510,  513,  520,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  517,  513,  513,  513,  513,  513,
      513,  516,  528,  516,  516,  516,  516,  516,  516,  516,
      516,  516,    0,    0,    0,    0,    0,    0,    0,  527,
        0,  513,  513,  513,  513,  513,  513,  515,  528,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  518,
      515,  515,  515,  515,  515,  515,  519,  521,  518,  522,
        0,  524,    0,  527,    0,    0,  519,  524,  522,  521,
      525,  529,  526,    0,    0,  518,  515,  515,  515,  515,

      515,  515,  519,  521,  518,  522,  525,  524,  526,  527,
      532,  529,  519,  524,  522,  521,  525,  529,  526,  530,
      531,  533,  530,  534,  536,  536,  535,  531,  533,  535,
      532,  538,  525,  541,  526,  541,  532,  529,  540,    0,
        0,  537,  542,  534,  543,  530,  531,  533,  530,  534,
      536,  536,  535,  531,  533,  535,  532,  537,  539,  541,
      544,  541,  545,  549,  546,  538,  539,  537,  542,  534,
      543,  546,  540,  547,  548,  554,  547,  548,  550,  551,
        0,    0,  553,  537,  539,  552,  544,  550,  545,  549,
      546,  538,  539,  552,  553,  551,  557,  546,  540,  547,

      548,  554,  547,  548,  550,  551,  556,  555,  553,  556,
      558,  552,  559,  550,  555,  560,  585,  582,  561,  552,
      553,  551,  557,    0,    0,    0,    0,    0,  576,  582,
      576,  560,  556,  555,  561,  556,  558,    0,  559,    0,
      555,  560,  585,  582,  561,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  576,  582,  576,  560,  589,    0,
      561,  567,    0,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  587,  567,  567,  567,  567,  567,  567,
      568,  594,  568,  568,  568,  568,  568,  568,  568,  568,
      568,    0,  589,    0,    0,    0,    0,    0,    0,  587,

      567,  567,  567,  567,  567,  567,  569,  594,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  589,  569,
      569,  569,  569,  569,  569,  570,  593,  570,  570,  570,
      570,  570,  570,  570,  570,  570,    0,    0,  593,    0,
        0,    0,    0,    0,    0,  569,  569,  569,  569,  569,
      569,  571,  593,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  573,  593,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,    0,  573,  573,  573,  573,
      573,  573,  575,    0,  575,  575,  575,  575,  575,  575,
      575,  575,  575,    0,    0,    0,    0,    0,    0,    0,

        0,  581,  573,  573,  573,  573,  573,  573,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  581,  583,  574,
      574,  574,  574,  574,  574,  577,  578,  581,  579,  577,
      579,    0,  580,  578,  580,  583,  584,    0,    0,  588,
      584,  588,    0,  581,  583,  574,  574,  574,  574,  574,
      574,  577,  578,  590,  579,  577,  579,  591,  580,  578,
      580,  583,  584,  586,  592,  588,  584,  588,  595,  596,
      590,  598,  586,  597,  599,  591,  600,  598,  601,  590,
      592,  602,  597,  591,  603,  604,  599,  605,  595,  586,
      592,  607,  610,  606,  595,  596,  590,  598,  586,  597,

      599,  591,  600,  598,  601,  606,  592,  602,  597,  608,
      603,  604,  599,  605,  595,  611,  609,  607,  610,  606,
      613,  608,  612,  612,    0,  627,  629,  628,  630,  630,
      633,  606,  609,  628,  626,  608,  634,    0,  613,    0,
        0,  611,  609,    0,    0,    0,  613,  608,  612,  612,
      626,  627,  629,  628,  630,  630,  633,    0,  609,  628,
      626,  636,  634,  617,  613,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  619,  626,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  636,  619,  619,
      619,  619,  619,  619,  621,  640,  621,  621,  621,  621,

      621,  621,  621,  621,  621,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  619,  619,  619,  619,  619,  619,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  640,
      632,  620,  620,  620,  620,  620,  620,  623,  632,  623,
      623,  623,  623,  623,  623,  623,  623,  623,    0,  641,
        0,    0,    0,    0,    0,  640,  632,  620,  620,  620,
      620,  620,  620,  622,  632,  622,  622,  622,  622,  622,
      622,  622,  622,  622,  622,  641,  622,  622,  622,  622,
      622,  622,  625,  653,  625,  625,  625,  625,  625,  625,
      625,  625,  625,    0,  631,    0,    0,    0,    0,    0,

        0,  631,  622,  622,  622,  622,  622,  622,  624,  653,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      631,  624,  624,  624,  624,  624,  624,  631,  635,  637,
      638,  637,  639,  642,  643,    0,    0,  644,  639,  638,
      642,    0,    0,  643,  635,  645,    0,  624,  624,  624,
      624,  624,  624,  644,  635,  637,  638,  637,  639,  642,
      643,  646,  645,  644,  639,  638,  642,  649,  651,  643,
      635,  645,  650,  650,  652,  651,  667,  669,  646,  644,
      667,  668,  649,  668,  670,  674,  652,  646,  645,    0,
        0,    0,    0,  649,  651,    0,    0,    0,  650,  650,

      652,  651,  667,  669,  646,    0,  667,  668,  649,  668,
      670,  674,  652,  658,    0,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  675,  658,  658,  658,  658,
      658,  658,  659,  679,  659,  659,  659,  659,  659,  659,
      659,  659,  659,    0,    0,    0,    0,    0,    0,    0,
        0,  675,  658,  658,  658,  658,  658,  658,  660,  679,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      673,  660,  660,  660,  660,  660,  660,  661,  680,  661,
      661,  661,  661,  661,  661,  661,  661,  661,    0,    0,
      673,    0,    0,    0,    0,    0,  673,  660,  660,  660,

      660,  660,  660,  662,  680,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  664,  673,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,    0,  664,  664,
      664,  664,  664,  664,  666,    0,  666,  666,  666,  666,
      666,  666,  666,  666,  666,    0,  683,    0,    0,    0,
        0,    0,    0,  671,  664,  664,  664,  664,  664,  664,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  671,
      672,  665,  665,  665,  665,  665,  665,  676,  677,  671,
      683,  677,  678,    0,    0,  681,  672,  685,  678,    0,
      678,  686,  686,  676,  682,  671,  672,  665,  665,  665,

      665,  665,  665,  676,  677,  681,  683,  677,  678,  684,
      682,  681,  672,  685,  678,  687,  678,  686,  686,  676,
      682,  700,  702,  687,    0,  684,    0,    0,    0,    0,
        0,  681,    0,    0,    0,  684,  682,  711,    0,    0,
      707,  687,    0,    0,    0,    0,    0,  700,  702,  687,
      691,  684,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  693,  711,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  707,  693,  693,  693,  693,  693,
      693,  695,    0,  695,  695,  695,  695,  695,  695,  695,
      695,  695,    0,    0,    0,    0,    0,    0,    0,  736,

      707,  693,  693,  693,  693,  693,  693,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  706,  741,  694,  694,
      694,  694,  694,  694,  697,  736,  697,  697,  697,  697,
      697,  697,  697,  697,  697,    0,  706,    0,    0,    0,
        0,    0,  706,  741,  694,  694,  694,  694,  694,  694,
      696,  736,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  706,  696,  696,  696,  696,  696,  696,  699,
        0,  699,  699,  699,  699,  699,  699,  699,  699,  699,
        0,  701,    0,    0,    0,    0,    0,    0,  701,  696,
      696,  696,  696,  696,  696,  698,  730,  698,  698,  698,

      698,  698,  698,  698,  698,  698,  698,  701,  698,  698,
      698,  698,  698,  698,  701,  703,  708,  704,  703,  704,
      710,    0,  710,  712,  713,  713,  714,  709,  714,  712,
      730,  715,  742,  708,  698,  698,  698,  698,  698,  698,
      709,  703,  708,  704,  703,  704,  710,  715,  710,  712,
      713,  713,  714,  709,  714,  712,  730,  715,  742,  708,
      758,    0,    0,    0,    0,    0,  709,    0,    0,    0,
        0,    0,    0,  715,  720,    0,  720,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  759,  720,  720,  720,
      720,  720,  720,  721,  758,  721,  721,  721,  721,  721,

      721,  721,  721,  721,    0,    0,    0,    0,    0,    0,
        0,    0,  759,  720,  720,  720,  720,  720,  720,  722,
      758,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  737,  722,  722,  722,  722,  722,  722,  723,  760,
      723,  723,  723,  723,  723,  723,  723,  723,  723,    0,
        0,  737,    0,    0,    0,    0,    0,  737,  722,  722,
      722,  722,  722,  722,  724,  760,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  726,  737,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,    0,  726,
      726,  726,  726,  726,  726,  728,    0,  728,  728,  728,

      728,  728,  728,  728,  728,  728,    0,    0,    0,    0,
        0,    0,    0,    0,  729,  726,  726,  726,  726,  726,
      726,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      729,  732,  727,  727,  727,  727,  727,  727,  731,  733,
      729,  734,  731,  734,    0,  739,    0,  732,  739,    0,
      738,  761,  765,  767,  735,  733,  729,  732,  727,  727,
      727,  727,  727,  727,  731,  733,  738,  734,  731,  734,
      735,  739,  735,  732,  739,  740,  738,  761,  765,  767,
      735,  733,    0,    0,    0,    0,  756,  740,    0,  756,
        0,    0,  738,    0,    0,    0,  735,    0,  735,    0,

      747,  740,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  756,  740,  749,  756,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  787,  749,  749,  749,
      749,  749,  749,  751,    0,  751,  751,  751,  751,  751,
      751,  751,  751,  751,    0,    0,    0,    0,    0,    0,
        0,    0,  787,  749,  749,  749,  749,  749,  749,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  763,  788,
      750,  750,  750,  750,  750,  750,  753,  763,  753,  753,
      753,  753,  753,  753,  753,  753,  753,    0,  789,    0,
        0,    0,    0,    0,  763,  788,  750,  750,  750,  750,

      750,  750,  752,  763,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  789,  752,  752,  752,  752,  752,
      752,  755,    0,  755,  755,  755,  755,  755,  755,  755,
      755,  755,    0,  757,    0,    0,    0,    0,    0,    0,
        0,  752,  752,  752,  752,  752,  752,  754,  757,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  757,
      754,  754,  754,  754,  754,  754,  762,  764,  768,  766,
      766,  766,  764,  766,  757,  769,  784,  785,  792,  791,
      784,  785,  762,  769,    0,  768,  754,  754,  754,  754,
      754,  754,  762,  764,  768,  791,  810,    0,  764,  766,

        0,  769,  784,  785,  792,  791,  784,  785,  762,  769,
      776,  768,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  791,  810,  794,    0,  766,  775,  795,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  815,  775,
      775,  775,  775,  775,  775,  778,  794,  778,  778,  778,
      778,  778,  778,  778,  778,  778,    0,  795,    0,    0,
        0,    0,    0,    0,  815,  775,  775,  775,  775,  775,
      775,  777,  794,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  790,  795,  777,  777,  777,  777,  777,  777,
      779,  816,  779,  779,  779,  779,  779,  779,  779,  779,

      779,  779,  790,    0,    0,    0,    0,    0,  790,    0,
      777,  777,  777,  777,  777,  777,  781,  816,  781,  781,
      781,  781,  781,  781,  781,  781,  781,  781,  790,  781,
      781,  781,  781,  781,  781,  783,  796,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  811,  793,  797,  786,
      793,  823,  796,  812,  823,  781,  781,  781,  781,  781,
      781,  786,  796,  811,  797,  817,  824,  817,  786,  786,
      818,  812,  811,  839,  797,  786,  793,  823,  796,  812,
      823,    0,    0,    0,    0,    0,    0,  786,  818,  811,
      797,  817,  824,  817,  786,  786,  818,  812,  819,  839,

        0,  803,  793,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  805,  818,  805,  805,  805,  805,  805,
      805,  805,  805,  805,  813,  819,  805,  805,  805,  805,
      805,  805,  806,  843,  806,  806,  806,  806,  806,  806,
      806,  806,  806,    0,  813,    0,    0,    0,    0,    0,
      813,  819,  805,  805,  805,  805,  805,  805,  807,  843,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      813,  807,  807,  807,  807,  807,  807,  808,  820,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  814,  821,
      822,  837,  836,    0,  814,  836,  837,  807,  807,  807,

      807,  807,  807,  820,  842,  842,  814,  842,  842,  842,
      842,  842,  842,    0,  814,  842,  821,  837,  836,  822,
      814,  836,  837,    0,    0,  842,  842,    0,    0,  820,
        0,  830,  814,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  821,    0,    0,  822,  829,    0,  829,  829,
      829,  829,  829,  829,  829,  829,  829,    0,    0,  829,
      829,  829,  829,  829,  829,  831,  844,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  834,  835,  841,
      845,  841,  846,  838,  834,  829,  829,  829,  829,  829,
      829,  838,  844,  847,  855,    0,  835,    0,    0,  857,

      858,    0,    0,  834,  835,  841,  845,  841,  846,  838,
      834,  861,  861,  868,  872,  872,  856,  838,  868,  847,
      855,  852,  835,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  856,  857,  858,  859,    0,  861,  861,  868,
      872,  872,  856,    0,  868,    0,  869,    0,  870,  873,
      871,  859,  874,  870,  863,  863,  871,    0,  856,  857,
      858,  859,  862,  862,  869,  862,  862,  862,  862,  862,
      862,  863,  869,  862,  870,  873,  871,  859,  874,  870,
      863,  863,  871,  862,  862,  875,  875,  876,  877,  885,
      869,  882,  882,  883,  884,  877,  886,  863,  887,  883,

      884,  888,  875,  890,  892,  892,  893,  876,  897,  891,
        0,  875,  875,  876,  877,  885,  891,  882,  882,  883,
      884,  877,  886,  890,  887,  883,  884,  888,  875,  890,
      892,  892,  893,  876,  897,  891,  898,  899,  900,  900,
      899,  901,  891,  898,  903,  904,  904,  905,  906,  890,
      911,  912,  912,  913,  914,  916,  917,  911,  921,  922,
      921,  924,  898,  899,  900,  900,  899,  901,  906,  898,
      903,  904,  904,  905,  906,  916,  911,  912,  912,  913,
      914,  916,  917,  911,  921,  922,  921,  924,  929,    0,
        0,    0,    0,    0,  906,    0,    0,    0,    0,    0,

        0,  916,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  929,  940,  940,  940,  940,  941,
      941,  941,  941,  942,  942,  942,  942,  943,    0,  943,
      943,  944,  944,  944,  944,  945,    0,  945,  945,  946,
      946,  948,  948,  949,  949,  950,  950,  951,  951,  952,
      952,  953,  953,  954,  954,  955,  955,  956,  956,  957,
      957,  958,    0,  958,  958,  959,  959,  960,  960,  961,
      961,  962,  962,  963,  963,  964,  964,  965,  965,  966,
      966,  967,  967,  968,  968,  969,  969,  970,  970,  971,
      971,  972,  972,  973,  973,  974,  974,  975,  975,  976,

      976,  977,  977,  978,  978,  979,  979,  980,  980,  981,
      981,  982,  982,  983,  983,  984,  984,  986,  986,  987,
      987,  988,  988,  990,  990,  991,  991,  992,  992,  995,
      995,  996,  996,  997,  997,  999,    0,  999,  999, 1000,
        0, 1000, 1000, 1001, 1001, 1002, 1002, 1005,    0, 1005,
     1005, 1006,    0, 1006, 1006, 1007, 1007, 1008, 1008, 1009,
     1009, 1010, 1010, 1011, 1011, 1013, 1013, 1014, 1014, 1015,
     1015, 1016, 1016, 1017, 1017, 1019, 1019, 1020, 1020, 1021,
     1021, 1023, 1023, 1025, 1025, 1026, 1026, 1027, 1027, 1029,
     1029,  939,  939,  939,  939,  939,  939,  939,  939,  939,

      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[113] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 2039 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 2149 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 940 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5592 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 59 "SrvLexer.l"
{ return SrvParser::LOGCOLORS_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 61 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 64 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 69 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::ACCEPT_UNKNOWN_FQDN_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::REMOTE_AUTOCONF_NEIGHBORS_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ return SrvParser::DS_LITE_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::BULKLQ_ACCEPT_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::BULKLQ_TCPPORT_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::BULKLQ_MAX_CONNS_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::BULKLQ_TIMEOUT_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 122 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 125 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 126 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
{ return SrvParser::CLIENT_CLASS_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{ return SrvParser::MATCH_IF_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{ return SrvParser::EQ_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 130 "SrvLexer.l"
{ return SrvParser::AND_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 131 "SrvLexer.l"
{ return SrvParser::OR_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_DATA_; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 134 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_EN_; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 135 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_DATA_; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 136 "SrvLexer.l"
{ return SrvParser::ALLOW_; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 137 "SrvLexer.l"
{ return SrvParser::DENY_; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 138 "SrvLexer.l"
{ return SrvParser::SUBSTRING_; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 139 "SrvLexer.l"
{ return SrvParser::CONTAIN_; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 140 "SrvLexer.l"
{ return SrvParser::STRING_KEYWORD_; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 141 "SrvLexer.l"
{ return SrvParser::ADDRESS_LIST_; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 144 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 145 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 146 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 147 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 149 "SrvLexer.l"
;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 151 "SrvLexer.l"
;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 153 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno; 
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 158 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 159 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 160 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 98:
YY_RULE_SETUP
#line 167 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 176 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 185 "SrvLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 194 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 203 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 212 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 221 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 233 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 240 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 261 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd then no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 293 "SrvLexer.l"
{
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   // Log(Crit) << "#### Detected [" << yytext << "] as DUID [len=" << len << "]" << LogEnd;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
        x = (toupper(*pos)-'A' + 10);
      else
        x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))	
        x += (toupper(*(pos+1))-'A' + 10);
      else
        x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }
   
   return SrvParser::DUID_;
}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 321 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd; 
      YYABORT; 
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 331 "SrvLexer.l"
{ 
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) { 
        Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd; 
        YYABORT; 
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 340 "SrvLexer.l"
{ return yytext[0]; } 
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 343 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 2963 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 940 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 940 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 939);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 343 "SrvLexer.l"




