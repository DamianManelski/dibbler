#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 124
#define YY_END_OF_BUFFER 125
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1007] =
    {   0,
        1,    1,    0,    0,    0,    0,  125,  123,    2,    1,
        1,  123,  105,  123,  123,  122,  122,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  109,  109,  124,    1,    1,    1,    0,  117,
      105,    0,  117,  107,  106,  122,    0,    0,  121,    0,
      114,   88,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  102,  118,  118,   90,  118,  118,

      118,  118,  118,  118,  118,  118,  118,  118,   17,   18,
      118,  118,  118,  118,  118,  118,  118,  118,  108,  106,
      122,    0,    0,    0,  113,  119,  112,  112,  118,  118,
      118,  118,  118,  118,   89,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,   83,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  101,  122,    0,    0,    0,    0,  111,
      111,    0,  112,    0,  112,  118,  118,  118,   59,  118,

      118,  118,  118,  118,  118,  118,  118,  118,   96,  118,
      118,  118,   30,  118,  118,   41,  118,  118,  118,  118,
      118,  118,  118,  118,  118,    0,  118,  118,  118,  118,
      118,  118,   23,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  103,  118,  118,  118,
      118,  122,    0,  120,    0,    0,    0,  111,    0,  111,
        0,  112,  112,  112,  112,  118,  118,  118,  118,  118,
       95,  118,  118,  118,    4,  118,  118,  118,  118,  118,
      118,  118,  104,  118,  118,  118,    3,  118,  118,  118,
      118,  118,  118,  118,  118,  118,    0,  118,  118,  118,

      118,  118,  118,  118,  118,  118,  118,    7,  118,  118,
       24,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,    0,    0,    0,    0,    0,  111,  111,  111,
      111,    0,  112,  112,  112,    0,  112,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,   29,  118,  118,
      118,  118,  118,   36,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,    0,
        0,  118,  118,  118,   34,  118,  118,  118,  118,  118,
      118,  118,   84,  118,  118,  118,   99,  118,  118,  118,
      118,  118,  118,  118,    0,    0,    0,    0,  111,  111,

      111,    0,  111,    0,    0,  112,  112,  112,  112,  118,
      118,   32,  118,  118,  118,  118,  118,  118,  118,    0,
      118,  118,   98,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,    0,    0,  118,  118,  118,  118,  118,   54,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
       21,  118,  118,  118,  120,    0,    0,    0,    0,    0,
      111,  111,  111,  111,    0,  112,  112,  112,    0,  112,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,    0,  118,  118,  118,  118,  118,  118,  118,

      118,  118,  118,  118,  118,   72,  118,  118,  118,  118,
       50,  118,  118,   12,   10,   87,  118,    0,    0,  118,
      118,  118,   52,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,    5,  118,  118,  118,   14,    0,    0,
        0,    0,  111,  111,  111,    0,  111,  116,  112,  112,
      112,  112,  118,  118,  118,  118,  118,   85,  118,  118,
      118,  118,  118,  118,    0,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,   74,  118,  118,
      118,  118,  118,  118,  118,   11,   58,    0,    0,  118,
      118,  118,   53,  118,  118,  118,  118,   31,  118,  118,

        6,   97,   38,  118,  118,    0,    0,    0,    0,  115,
      111,  111,  111,  111,  112,  112,  112,    0,  112,  118,
      118,  118,  118,  118,  118,  118,  118,  118,   51,  118,
        0,  118,  118,  118,  118,  118,  118,  118,  118,   35,
      118,  118,   33,  118,  118,  118,  118,  118,  118,  118,
       13,    0,    0,   47,   46,   37,  118,   22,  118,  118,
       40,   39,  118,  118,  120,    0,    0,  111,  111,  111,
        0,  111,  112,  112,  112,  112,  118,   15,  118,   57,
      118,  118,  118,   66,  118,  118,    0,  118,  118,  118,
      118,  118,  118,   69,  118,  118,  118,   76,   78,   80,

       82,  118,  118,  118,   49,   48,  118,  118,  118,  118,
       55,    0,    0,    0,    0,  111,  111,  111,  111,  112,
      112,  112,    0,  112,  118,  118,  100,   68,  118,  118,
      118,    0,   86,  118,  118,  118,   45,  118,   70,   56,
      118,  118,  118,    8,  118,   25,  118,  118,    0,    0,
        0,  111,  111,  111,    0,  111,  112,  112,  112,  112,
      118,  118,   67,  118,  118,    0,  118,  118,   44,  118,
      118,  118,  118,   60,  118,  118,  118,  118,  120,    0,
        0,    0,  111,  111,  111,  111,  112,  112,  112,    0,
      112,  118,  118,  118,  118,    0,  118,  118,  118,  118,

      118,  118,  118,  118,   16,   20,    0,    0,  110,  113,
      111,  111,  111,    0,  111,  112,  112,  112,  112,  118,
      118,  118,   27,    0,    0,  118,  118,  118,   71,  118,
      118,   26,  118,  118,    0,    0,  110,    0,  111,  111,
      111,  111,  111,  112,  112,  112,    0,  112,  118,  118,
      118,    0,    0,   28,  118,  118,   73,  118,  118,  118,
      118,  118,  118,  120,  110,  113,  111,    0,  111,  111,
      111,  111,  112,  112,  112,   61,  118,  118,  118,  118,
        0,    0,  118,  118,  118,  118,  118,  118,   43,  118,
       19,    0,  110,  111,  111,  111,  111,  112,  112,  112,

      118,  118,  118,  118,  118,    0,    0,  118,  118,   75,
       77,   79,   81,    9,    0,  111,  111,    0,  111,  111,
      112,   42,  118,  118,  118,  118,    0,    0,  118,  118,
      120,  111,  111,  112,  118,  118,  118,  118,    0,    0,
        0,  118,  118,  118,    0,  111,  111,    0,  118,  118,
      118,  118,    0,    0,    0,   91,  118,  118,  118,   91,
      110,  111,  111,   62,  118,  118,  118,    0,   93,    0,
      118,   93,  118,  110,  111,  111,    0,  118,  118,   65,
        0,   92,  118,   92,    0,  111,  111,  118,   63,   94,
       94,    0,  111,  111,    0,   64,  120,  111,  111,    0,

      111,  111,    0,  111,  111,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
       23,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        1,    1,    1,    1,    1,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    1,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1097] =
    {   0,
        0,    0, 1142, 1102,    0,    0, 1109, 5859, 5859,   73,
       75, 1103,    0, 1100,   72,   72,   34, 1082, 1077,  136,
      186,  233,  280,   71,  208,  338,   66,  236,   38,   89,
      223,  240,  340,   72,  275,  251,  343,  391,   68,  383,
      180,  375, 5859, 1087, 5859,  111,  137,  213, 1092, 5859,
        0, 1087, 1086, 5859,    0,  449, 1070,  468, 5859,    0,
      494, 5859,   60,  537,  188,  192,  182,  182,  279,  387,
      184,  276,  211,  402,  380,  229,  263,  386,  499,  454,
      447,  531,  287,  533,  551,  549,  554,  573,  374,  556,
      576,  539,  570,  568,  326,  574,  586,  377,  605,  587,

      606,  583,  626,  619,  623,  625,  642,  633,  381,  384,
      655,  636,  608,  647,  666,  637,  653,  660, 5859,    0,
      724, 1068,  512, 1066,  769,    0,  814,  743,  857,  654,
      680,  846,  850,  851,  721,  849,  857,  735,  854,  874,
      856,  861,  886,  895,  793,  756,  906,  904,  893,  899,
      896,  926,  927,  928,  913,  729,  940,  937,  947,  945,
      976,  967,  956,  969,  958,  961,  974,  981,  979,  989,
      997,  999, 1012, 1004,  992, 1010, 1016, 1017, 1035, 1031,
     1026, 1028, 1051,  774, 1109,  794,  990,  970,  965, 1156,
      834, 1099, 1201, 1244, 1128, 1287, 1026, 1222, 1032, 1124,

     1247, 1143, 1239, 1282, 1276, 1161, 1299, 1277, 1033, 1280,
     1283, 1301, 1062, 1287, 1328, 1319, 1290, 1320, 1333, 1322,
     1326, 1330, 1369, 1324, 1331,  972, 1370, 1341, 1364, 1372,
     1382, 1380, 1197, 1391, 1393, 1399, 1405, 1404, 1413, 1426,
     1444, 1428, 1421, 1433, 1420, 1449, 1204, 1461, 1451, 1456,
     1479, 1519,  933,  929,  924,  923, 1537, 1548, 1591, 1567,
     1610, 1636, 1655, 1681, 1700,  920, 1473, 1448, 1457, 1680,
     1478, 1693, 1578, 1623, 1712, 1682, 1713, 1700, 1697, 1714,
     1735, 1715, 1501, 1733, 1720, 1745, 1736, 1730, 1747, 1760,
     1755, 1766, 1757, 1772, 1765, 1634, 1770, 1770, 1800, 1801,

     1787, 1802, 1795, 1799, 1807, 1823, 1816, 1570, 1834, 1832,
     1679, 1809, 1836, 1847, 1851, 1843, 1859, 1845, 1854, 1856,
     1870, 1872,  882,  875,  870,  840, 1930, 1941, 1960, 1986,
     2005, 1576, 2031,  839, 2043, 2086, 2062, 1920, 1868, 2048,
     2065, 2089, 1985, 2098, 2100, 2077, 1861, 2170, 2083, 2081,
     2125, 2079, 2088, 1883, 2129, 2137, 2150, 2157, 2154, 2152,
     2158, 2165, 2161, 2169, 2172, 2181, 2182, 2189, 2086, 1934,
     1955, 2196, 2197, 2204, 2117, 2211, 2206, 2202, 2221, 2234,
     2244, 2246, 2213, 2225, 2229, 2240, 2233, 2248, 2256, 2263,
     2265, 2258, 2279, 2273,  838,  837,  836, 2337, 2348,  835,

     2360, 2403, 2379, 2422, 2448, 2459, 2478, 2504, 2523, 2277,
     2504, 2381, 2516, 2502, 2520, 2508, 2537, 2521, 2538, 2240,
     2557, 2524, 2269, 2554, 2390, 2566, 2555, 2552, 2567, 2576,
     2302, 2588, 2589, 2606, 2591, 2613, 2604, 2619, 2621, 2625,
     2622, 2611, 2286, 2342, 2620, 2627, 2640, 2612, 2643, 2401,
     2672, 2650, 2674, 2661, 2677, 2658, 2662, 2671, 2680, 2696,
     2438, 2705, 2694, 2702,  834,  824,  795,  794, 2763, 2774,
     2785, 2804, 2830, 2849, 2813, 2875,  783, 2887, 2930, 2906,
     2908, 2916, 2924, 2829, 2928, 2929, 2920, 2948, 2944, 2925,
     2956, 2959, 2462, 2969, 2972, 2979, 2965, 2983, 2976, 2701,

     2975, 2996, 2984, 2973, 3017, 2457, 3041, 3004, 3042, 3034,
     2519, 3023, 3028, 2716, 2772, 2817, 3027, 2947, 3013, 3036,
     3037, 3048, 3029, 3052, 3069, 3056, 3079, 3066, 3076, 3073,
     3086, 3077, 3094, 3072, 3100, 3104, 3093, 3081,  782,  780,
      779, 3162, 3173,  750, 3185, 3228, 3204, 3213, 3273, 3247,
     3318, 3292, 3226, 3306, 3314, 3215, 3317, 3090, 3316, 3309,
     3318, 3336, 3337, 3345, 3098, 3359, 3348, 3356, 3358, 3360,
     3361, 3357, 3373, 3369, 3389, 3398, 3397, 3127, 3419, 3391,
     3260, 3404, 3402, 3406, 3403, 3396, 3400, 3417, 3424, 3416,
     3413, 3421, 3411, 3449, 3441, 3446, 3455, 3433, 3457, 3456,

     3448, 3452, 3454, 3477, 3484,  749,  748,  747,  746, 3301,
     3544, 3563, 3589, 3608, 3634,  745, 3646, 3689, 3665, 3462,
     3675, 3470, 3473, 3678, 3667, 3588, 3685, 3684, 3465, 3690,
     3522, 3688, 3542, 3708, 3721, 3523, 3727, 3731, 3725, 3692,
     3740, 3742, 3719, 3750, 3749, 3755, 3759, 3752, 3738, 3756,
     3736, 3744, 3757, 3760, 3761, 3765, 3779, 3771, 3784, 3789,
     3774, 3777, 3795, 3801,  713,  712,  711, 3859,  710, 3871,
     3914, 3890, 3959, 3933, 4004, 3978, 3999, 3788, 3796, 3792,
     3893, 3997, 3946, 3813, 3824, 4007, 3881, 3994, 4002, 4001,
     4004, 4006, 3996, 4000, 4036, 4043, 4052, 4037, 4038, 4039,

     4040, 4057, 4059, 4070, 5859, 5859, 4071, 4047, 4058, 4086,
     4049,  709,  707,  704,  702, 4146, 4132, 4191, 4165, 4210,
      700, 4236, 4279, 4255, 4054, 4239, 4088, 4125, 4273, 4274,
     4291, 4136, 4144, 4282, 4272, 4277, 4178, 4278, 4189, 4275,
     4310, 4325, 4322, 4313, 4323, 4309, 4312, 4324,  697,  696,
      694, 4385,  693, 4397, 4440, 4416, 4485, 4459, 4530, 4504,
     4314, 4327, 4315, 4321, 4518,  704, 4438, 4517, 4376, 4526,
     4532, 4523, 4524, 4401, 4527, 4529, 4533, 4567,  691,  689,
      646,  632, 4627, 4599, 4672, 4611, 4646,  619, 4717, 4760,
     4691, 4712, 4564, 4746, 4755, 4765, 4565, 4777, 4651, 4774,

     4778, 4795, 4760, 4794, 4419, 4472,  615,  613,  611,    0,
     4840,  562, 4855, 4898, 4744, 4943, 4874, 4988, 4917, 4761,
     4911, 4876, 4534, 4615, 4619, 4983, 4984, 4979, 4659, 5006,
     4987, 4764, 5003, 4989,  558,  554,  552,  550,  549, 5066,
     4969, 5111, 5047, 5085,  520, 5156,    0, 5130, 4793, 5008,
     5155, 4854, 4875, 4877, 5144, 5158, 4930, 5172, 5089, 5175,
     5153, 5176, 5185,  518,  517, 5859,  516,    0, 5243,  515,
     5255, 5274, 5300, 5319,    0, 5002, 5174, 5045, 5253, 5315,
     5066, 5170, 5300, 5305, 5234, 5327, 5328, 5333, 5156, 5317,
     5171,  514,  513,  512,  475, 5393, 5375, 5412,  474,    0,

     5398, 5330, 5332, 5397, 5413, 5244,    0, 5395, 5472, 5299,
     5380, 5394, 5396, 5412,  473,  472,  471,    0, 5485, 5859,
        0, 5415, 5443, 5442, 5444, 5463,    0, 5462, 5517, 5483,
      470,  437,  433, 5859, 5491, 5494, 5503, 5490, 5504, 5517,
     5506, 5521, 5526, 5508,  417,  416,  414,    0, 5519, 5528,
     5539, 5511, 5535, 5542, 5537, 5859, 5558, 5549, 5551, 5540,
      398,  363,  359, 5543, 5553, 5560, 5556, 5564, 5859, 5587,
     5571, 5573, 5594,  358,  357,  355,    0, 5585, 5588, 5580,
     5610, 5859, 5612, 5591,  339,  325,  314, 5603, 5595, 5859,
     5598,    0,  310,  309,    0, 5602,  307,  305,  303,  276,

      267,  260,    0,  256,  254, 5859, 5682, 5686, 5690, 5694,
     5698, 5702, 5704,  239, 5706, 5708, 5710, 5712, 5714, 5716,
     5718, 5720, 5722, 5724, 5728, 5730, 5732, 5734, 5736, 5738,
     5740, 5742, 5744, 5746, 5748, 5750, 5752, 5754, 5756, 5758,
     5760, 5762, 5764, 5766, 5768, 5770, 5772, 5774, 5776, 5778,
     5780,  233, 5782, 5784, 5786,  232, 5788, 5790, 5792,  231,
      230, 5794, 5796, 5798,  228, 5802, 5806, 5808, 5810,  226,
      219, 5814, 5818, 5820, 5822, 5824, 5826, 5828,  217, 5830,
     5832, 5834, 5836, 5838,  145, 5840, 5842, 5844,  131, 5846,
      117, 5848, 5850, 5852,   80, 5854

    } ;

static yyconst flex_int16_t yy_def[1097] =
    {   0,
     1006,    1, 1007, 1007, 1008, 1008, 1006, 1006, 1006, 1006,
     1006, 1009, 1010, 1011, 1006, 1006,   16, 1006, 1006, 1006,
       20,   20,   22,   22,   22,   22,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1006, 1006, 1006, 1006, 1006, 1006, 1009, 1006,
     1010, 1011, 1006, 1006, 1012, 1006, 1013,   56, 1006, 1014,
     1006, 1006,   26,   26,   64,   64,   64,   26,   26,   26,
       26,   26,   64,   26,   26,   64,   64,   26,   26,   26,
       26,   26,   64,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1006, 1012,
     1006, 1015,  121, 1016, 1006, 1014, 1006,  127,   64,  129,
      129,   26,   26,   26,   26,   26,   26,  129,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1006,  185, 1017, 1018, 1019, 1006,
      190, 1006, 1006, 1006,  193,  129,  196,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1006,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  186,  186, 1018, 1020, 1021, 1006, 1006, 1006,  258,
     1006, 1006,  262, 1006,  264,  196,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1006,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1022, 1006, 1023, 1024, 1006, 1006,  328, 1006,
      330, 1006, 1006, 1006, 1006, 1006,  335,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1025,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1006,
     1006,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1026, 1027, 1028, 1006, 1006, 1006,

     1006, 1006,  401, 1006, 1006, 1006,  406, 1006,  408,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1006,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1006, 1006,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1023, 1006, 1029, 1030, 1006, 1006,
     1006,  471, 1006,  473, 1006, 1006, 1006, 1006, 1006,  478,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1006,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1006, 1006,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1031, 1032,
     1033, 1006, 1006, 1006, 1006, 1006,  545, 1006, 1006,  549,
     1006,  551,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1006,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1006, 1006,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26, 1034, 1006, 1035, 1036, 1006,
     1006,  611, 1006,  613, 1006, 1006, 1006, 1006,  617,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1006,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1006, 1006,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1037, 1038, 1039, 1006, 1006, 1006,
     1006,  670, 1006,  673, 1006,  675,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1006,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26, 1006, 1006,   26,   26,   26,   26,
       26, 1040, 1006, 1041, 1042, 1006,  716, 1006,  718, 1006,
     1006, 1006, 1006,  722,   26,   26,   26,   26,   26,   26,
       26, 1006,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1043, 1044,
     1045, 1006, 1006, 1006, 1006,  754, 1006,  757, 1006,  759,
       26,   26,   26,   26,   26, 1006,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1046, 1006,
     1047, 1048, 1006,  783, 1006,  785, 1006, 1006, 1006, 1006,
      789,   26,   26,   26,   26, 1006,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26, 1049, 1050, 1051, 1052,
     1006, 1006, 1006, 1006,  813, 1006,  816, 1006,  818,   26,
       26,   26,   26, 1006, 1006,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1053, 1006, 1054, 1006, 1055, 1006,
      840, 1006,  842, 1006, 1006, 1006, 1056,  846,   26,   26,
       26, 1006, 1006,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1057, 1058, 1006, 1059, 1060, 1006, 1006,
     1006,  871, 1006,  873, 1061,   26,   26,   26,   26,   26,
     1006, 1006,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1062, 1006, 1063, 1064, 1006,  896, 1006, 1006, 1065,

       26,   26,   26,   26,   26, 1006, 1066,   26, 1067,   26,
       26,   26,   26,   26, 1068, 1006, 1069, 1070, 1006, 1006,
     1071,   26,   26,   26,   26,   26, 1072, 1006, 1073,   26,
     1074, 1075, 1076, 1006,   26,   26,   26,   26, 1006, 1006,
     1006,   26,   26,   26, 1077, 1006, 1078, 1079,   26,   26,
       26,   26, 1006, 1006, 1006, 1006,   26,   26,   26,   26,
     1080, 1081, 1082,   26,   26,   26,   26, 1006, 1006, 1006,
       26,   26,   26, 1083, 1006, 1084, 1085,   26,   26,   26,
     1006, 1006,   26,   26, 1086, 1087, 1088,   26,   26, 1006,
       26, 1089, 1006, 1090, 1091,   26, 1006, 1092, 1093, 1086,

     1006, 1094, 1095, 1096, 1006,    0, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006

    } ;

static yyconst flex_int16_t yy_nxt[5935] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   29,
       36,   37,   38,   39,   40,   41,   29,   42,   29,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   29,   36,   37,   38,   39,
       40,   41,   29,   42,   29,   46,   47,   48,   47,   54,
     1006,   63,  843,   55,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   57,   64,   58,   58,   58,   58,   58,

       58,   86,   59,   63,  114,   63, 1006,   63,   63,   63,
       97,   63,   98,   46,   47,   63,   89,   82,   60,  999,
       64,   58,   58,   58,   58,   58,   58,   86,   59,   63,
      114,   63,   63,  997,   63,   63,   97,   63,   98,   48,
       47,   63,   89,   82,   60,   63,   63,  987,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   57,   63,   64,
       64,   65,   66,   64,   67,   63,   68,   63,   63,   63,
       69,   63,   70,   63,   63,   63,   63,   63,   63,   71,
       63,   63,   63,   63,   63,   64,   64,   65,   66,   64,
       67,   63,   68,   63,   63,   63,   69,   63,   70,   63,

       63,   63,   63,   63,   63,   71,   63,   63,   63,   63,
       63,   64,   64,  130,   64,   46,   47,  117,  131,  963,
       63,  934,   63,   63,  132,   63,  136,   63,  933,   72,
      921,   83,  900,  895,  875,  839,  138,   64,   64,  130,
       64,  126,   63,  117,  131,   63,   63,   84,   63,   63,
      132,   63,  136,   63,   90,   72,   73,   83,   64,   64,
       91,   64,  138,   92,   87,  142,   63,   74,   63,   63,
       75,   63,   88,   84,  102, 1003,   63, 1003,  103,   63,
       90, 1003,   73,   63,   64,   64,   91,   64,  995,   92,
       87,  142,   63,   74,   63,   63,   75, 1006,   88,  143,

      102,   99,   63,   64,  103,   63,   76,   77,  133,   63,
      137,   78,  100,  134,   63,  101,   79,   80,   63,   63,
       63,  149,   63,   81, 1003,  143,  995,   99, 1000,   64,
      995,  977,   76,   77,  133,  995,  137,   78,  100,  134,
       63,  101,   79,   80,   63,   63,  977,  149,   63,   81,
       63,   63,   63,   63,   63,   63,   63,   63,   63, 1006,
      866,   63,   63,   63,   63,   63,   63,   93,   63,   63,
      104,   94,   63,  105,  106,   63,  977,   95,  948,  985,
      977,   85,   96,   63,  948,  107,  108,   63,   63,   63,
       63,   63,   63,   93,   63,   63,  104,   94,   63,  105,

      106,   63,  118,   95,  109,  110,  115,   85,   96,   63,
      116,  107,  108,  135,  111,  144,  141,   63,   63,  838,
       63,  156,  112,   63,   63,  139,   63,   63,  118,   63,
       63,  113,  115,  140,   63,  948,  116,  918,  810,  135,
      111,  144,  141,   63,   63,   63,   63,  156,  112,   63,
       63,  139,   63,   63,  948,   63,   63,  113,  918,  140,
       63,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      122,   63,  123,  123,  123,  123,  123,  123,  147,   59,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  146,
       63,  945,  918,  868,  782,  847,  918,   63,  123,  123,

      123,  123,  123,  123,  147,   59,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  146,   63,  128,  128,  128,
      128,  128,  128,   63,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  868,  838,  125,  814,  868,  838,  892,
      145,  790,   63,  128,  128,  128,  128,  128,  128,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  122,  150,
      129,  129,  129,  129,  129,  129,  145,   68,   63,  148,
      868,  866,  152,  838,   63,  782,   63,  153,  151,  715,
       63,  159,   63,  755,  157,  150,  129,  129,  129,  129,
      129,  129,   63,   68,   63,  148,  154,   63,  152,   63,

       63,  160,   63,  153,  151,  158,   63,  159,   63,  161,
      157,   63,  162,   63,  164,  155,   63,   63,   63,   63,
       63,  167,  154,   63,  165,   63,   63,  160,  163,   63,
       63,  158,  838,  166,  782,  161,  125,   63,  162,   63,
      723,  155,   63,   63,  171,   63,  172,  167,   63,   63,
      165,  179,   63,  810,  163,   63,   63,  176,  168,  166,
      169,  170,   63,  173,  177,  174,   63,  782,   63,   63,
      171,  178,  172,  182,   63,   63,   63,  179,  180,   63,
       63,  197,  175,  176,  168,   63,  169,  170,   63,  173,
       63,  174,   63,  183,   63,   63,   63,  178,   63,  182,

      181,  184,   63,   63,  180,   63,   63,  197,  175,   63,
      715,   63,  807,  796,  671,  782,   63,  715,  609,  183,
      198,  618,   63,  125,   63,  715,  181,  184,  609,   63,
      125,  546,  715,  609,  712,   63,  185,  185,  185,  185,
      185,  185,  185,  185,  185,   57,  198,  186,  186,  186,
      186,  186,  186, 1006,   59,  195,  195,  195,  195,  195,
      195,  195,  195,  195,   63,  204,  479,  125,  609,  468,
      468,  402,   63,  186,  186,  186,  186,  186,  186,  212,
       59,  190,  190,  190,  190,  190,  190,  190,  190,  190,
       63,  204,  191,  191,  191,  191,  191,  191,   63,   63,

      609,  468,  211,  125,  336,  212,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  125,  468,   63,  191,  191,
      191,  191,  191,  191,  192,   63,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  194,   63,  195,  195,  195,
      195,  195,  195,   63, 1006,  326,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  539,  259,  468,  326,  326,
      194,  125,   63,  195,  195,  195,  195,  195,  195,  196,
      196,  196,  196,  196,  196,  196,  196,  196,   57,  202,
      196,  196,  196,  196,  196,  196,  199,  200,  201,   63,
      203,  326,   63,   63,   63,  205,  189,   63,  207,   63,

       63,  206,  208,  125,   63,  202,  196,  196,  196,  196,
      196,  196,  199,  200,  201,   63,  203,   63,   63,   63,
       63,  205,  210,   63,  207,   63,   63,  206,  208,   63,
       63,  214,  213,  209,  215,  216,   63,  217,   63,   63,
      221, 1006,   63,   63,  326,  189,  223,   63,  210,   63,
      323,  218,  219,  220, 1006,   63,   63,  214,  213,  209,
      215,  216,   63,  217,   63,   63,  221,  222,   63,   63,
       63,   63,  224,   63,  225,   63,  228,  218,  219,  220,
       63,  297,   63,   63,  226,  227,  125,  229,   63,  234,
       63,  189,  233,  222,  230,   63,   63,   63,  224,   63,

      225,   63,  237,  231,   63,  235,   63,  232,  236,   63,
       63,  189,   63,  229,   63,  234,   63,   63,  233,   63,
      230,  241,   63,  243,   63,   63,  238,   63,  237,  231,
       63,  235,   63,  232,  236,   63,   63,  239,   63,  240,
       63,  245,   63,   63,  246,   63,  242,   63,   63,  243,
       63,  244,  238,   63,  250,   63,  248,  249,   63,   63,
       63,   63,  247,  239,  267,  240,   63,  245,   63,   63,
      246,   63,  242,   63,   63,   63,   63,  244,   63,   63,
      250,   63,  248,  249,  251,   63,   63,  189,  247,  125,
      267,  125,   52,   53,   63,   63,   50,   63,  119,   62,

       63,   63,   63,   61,   63,   63,   53,   50, 1006,   44,
      251,  261,  261,  261,  261,  261,  261,  261,  261,  261,
       63,  252,  252,  252,  252,  252,  252,  252,  252,  252,
       57,   63,  253,  253,  253,  253,  253,  253, 1006,   59,
      263,  263,  263,  263,  263,  263,  263,  263,  263,   44,
     1006, 1006,  272, 1006, 1006, 1006, 1006, 1006,  253,  253,
      253,  253,  253,  253,  270,   59,  257,   63,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  259, 1006,  260,
      260,  260,  260,  260,  260, 1006,   63, 1006, 1006, 1006,
      270, 1006, 1006,   63, 1006, 1006, 1006,  276, 1006, 1006,

     1006, 1006, 1006, 1006,   63,  260,  260,  260,  260,  260,
      260,  192,   63,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  194,  276,  263,  263,  263,  263,  263,  263,
       63,  268, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
       63, 1006, 1006, 1006, 1006, 1006, 1006,   63,  273,  269,
      263,  263,  263,  263,  263,  263,  264,  264,  264,  264,
      264,  264,  264,  264,  264,   63,   63,  265,  265,  265,
      265,  265,  265,   63, 1006,  269, 1006, 1006, 1006, 1006,
     1006, 1006,   63, 1006, 1006, 1006,  278, 1006, 1006, 1006,
       63,   63,  271,  265,  265,  265,  265,  265,  265,  266,

      266,  266,  266,  266,  266,  266,  266,  266,   63,  274,
      266,  266,  266,  266,  266,  266,   63,  275,  271,   63,
       63,  279,  277,   63,  280,   63,   63,  282,  284,  286,
       63,  285,  281,   63, 1006,  274,  266,  266,  266,  266,
      266,  266,   63,  275,   63,   63,   63,  279,  277,   63,
      280,   63,   63,  282,  295,  283,   63,  285,  281,   63,
      287,  296,   63,   63,  288,   63,  289,   63,   63,   63,
       63,   63,  290,   63,   63, 1006,   63, 1006, 1006, 1006,
      295,  283,  300, 1006,   63, 1006,  287,  296,   63,   63,
      288,   63,  289,   63,  291,   63,  298,   63,  290,   63,

       63,  301,   63,  292,  293,  294,  302,   63,  300,  303,
       63,  299,   63,   63, 1006,   63, 1006,  304,  305,  306,
      291, 1006,  298,   63,  307,   63, 1006,  301, 1006,  292,
      293,  294,  302,   63,   63,  303,   63,  299,   63,   63,
      310,   63,   63,  304,  305,  306,  309,   63,   63,   63,
      307,   63,  308,  311,  317,  314,   63,  315,  318, 1006,
       63, 1006,   63,   63,   63, 1006,  310, 1006,   63,   63,
      312,   63,  309,   63,   63,  316,   63,  320,  308,  311,
      317,  314,   63,  315,  319,  313,  339,   63,  322,   63,
       63,   63,   63,  321,   63,   63,  312,   63,  340,   63,

       63,  316,   63,  320,   63, 1006, 1006, 1006, 1006, 1006,
      319,  313,  339,   63, 1006,  338,   63,   63,   63,  321,
       63,   63,   63, 1006,  340,   63,   63, 1006, 1006, 1006,
       63,  252,  252,  252,  252,  252,  252,  252,  252,  252,
     1006,  338,   63, 1006,   63, 1006, 1006,   63,   63,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  257, 1006,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  259,
       63,  329,  329,  329,  329,  329,  329, 1006, 1006,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  329,  329,  329,

      329,  329,  329,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  345,   63,  331,  331,  331,  331,  331,  331,
      332,   63,  261,  261,  261,  261,  261,  261,  261,  261,
      261, 1006,  346, 1006, 1006, 1006, 1006, 1006,  345,   63,
      331,  331,  331,  331,  331,  331,  192,   63,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  194,  369,  334,
      334,  334,  334,  334,  334, 1006,   63,  334,  334,  334,
      334,  334,  334,  334,  334,  334, 1006,   63, 1006, 1006,
     1006, 1006, 1006, 1006,  369,  334,  334,  334,  334,  334,
      334,  192,   63,  335,  335,  335,  335,  335,  335,  335,

      335,  335,  336,   63,  337,  337,  337,  337,  337,  337,
     1006,  341,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  347,   63,   63,  348,   63,  342,  343,  344,  357,
      337,  337,  337,  337,  337,  337,   63,  341,  350,  352,
       63,  353,  351,   63,  349,  360,  355, 1006,   63,   63,
      348,   63,  342,  343,  344,   63,   63,   63,   63,  356,
     1006,  361,   63,   63,  350,  352,   63,  353,  351,   63,
      349,  354,  355,   63,  368,  362,   63, 1006,   63,   63,
      358,   63,   63,   63,   63,  356,  359,  361,   63,   63,
       63,  363,  364,  365,  366,  367,  370,  354,   63,   63,

       63,  362,   63,   63,   63,   63,  358,  372,   63,   63,
     1006,  371,  359,   63,   63,   63,   63,  363,  364,  365,
      366,  367,  370,  375,   63,  376,   63,  373,  374,   63,
       63,  377,  380,  372,   63,   63,  378,  371,   63,   63,
     1006,   63,   63,   63,   63,   63,  384,  379, 1006,  375,
       63,  376,   63,  373,  374, 1006,   63,  377,  381,   63,
     1006,  382,  378,  385,   63,  392,   63, 1006,   63,   63,
       63,   63,  384,  379,  383,   63,   63,   63,   63,   63,
      387,  386,  389,  388,  381,   63,   63,  382,   63,  385,
       63,  411,   63,  390,   63,  391,  419,   63,  394,   63,

      383,   63,   63,   63,   63,   63,  387,  386,  389,  388,
      393,   63,   63,   63,   63,   63,   63,  411, 1006,  390,
       63,  391,  419,   63,  394,   63,   63, 1006,   63,  410,
       63, 1006, 1006, 1006, 1006, 1006,  393,   63, 1006,   63,
      398,   63,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  257,   63,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  259,   63,  400,  400,  400,  400,  400,  400,
     1006,  443,  400,  400,  400,  400,  400,  400,  400,  400,
      400, 1006,  444, 1006, 1006, 1006, 1006, 1006, 1006,   63,
      400,  400,  400,  400,  400,  400,  257,  443,  401,  401,

      401,  401,  401,  401,  401,  401,  401,  402,  444,  403,
      403,  403,  403,  403,  403, 1006,  415,  403,  403,  403,
      403,  403,  403,  403,  403,  403, 1006, 1006,   63, 1006,
     1006, 1006, 1006, 1006, 1006,  403,  403,  403,  403,  403,
      403,  192,  415,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  194,  192,   63,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  336, 1006,  407,  407,  407,  407,
      407,  407, 1006, 1006,  407,  407,  407,  407,  407,  407,
      407,  407,  407, 1006, 1006, 1006, 1006, 1006,  426,  412,
     1006,   63,  407,  407,  407,  407,  407,  407,  408,  408,

      408,  408,  408,  408,  408,  408,  408,  413,   63,  409,
      409,  409,  409,  409,  409,  412,  414,   63,  418,  423,
       63,  424,   63,  442,   63,  416,   63,  417,  427,   63,
     1006,   63,   63,  413,   63,  409,  409,  409,  409,  409,
      409,   63,  414,   63,  418,  423,   63,  424,   63,  442,
       63,  416,   63,  417,  427,   63,  425,   63,   63, 1006,
       63, 1006, 1006,  429,  428, 1006, 1006,   63,   63,   63,
      420,  420,   63,  420,  420,  420,  420,  420,  420,  421,
       63,  420,  425,  431,  432,  430,   63,  433,  435,  429,
      428,  420,  420,   63,   63,   63,  436,   63,   63, 1006,

       63,   63,  434,  437,   63, 1006,   63,  439,   63,  431,
      432,  430,   63,  433,  435,   63,  438,  440, 1006,   63,
      441,   63,  436,   63,   63,   63,   63,   63,  434,  437,
       63,  445,   63,  439,   63,  449,  450,  446,   63,   63,
       63,   63,  438,  440,  447,   63,  441,   63,  451,   63,
       63,   63,  448,  453,   63,  454,   63,  445,   63,  452,
      455,  449,  450,  446,   63,   63,   63,  457,   63,  456,
      447,   63,   63,   63,  451,   63,   63,   63,  448,  458,
       63, 1006,   63,   63,  493,  452,  455,   63,  463,   63,
       63,   63,  462,  457,   63,  456, 1006,  459,   63,   63,

      460,   63,   63,   63,  464,  458,   63,  461,   63,   63,
      493,  481,   63,   63,  482,   63,   63,   63,  462,  506,
      483,  518,   63,  459, 1006,   63,  460,   63, 1006, 1006,
      464, 1006,   63,  461,   63, 1006, 1006,  481,   63, 1006,
      482, 1006,   63, 1006, 1006,   63,  483,  518,   63,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  257, 1006,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  259,
      257,   63,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  402,  519,  472,  472,  472,  472,  472,  472, 1006,
      485,  472,  472,  472,  472,  472,  472,  472,  472,  472,

     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,  519,  472,
      472,  472,  472,  472,  472,  473,  473,  473,  473,  473,
      473,  473,  473,  473,   63,  498,  474,  474,  474,  474,
      474,  474,  475,   63,  404,  404,  404,  404,  404,  404,
      404,  404,  404, 1006,   63, 1006, 1006, 1006, 1006, 1006,
       63,  498,  474,  474,  474,  474,  474,  474,  192,   63,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  192,
       63,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      336,   63,  477,  477,  477,  477,  477,  477, 1006,  565,
      477,  477,  477,  477,  477,  477,  477,  477,  477, 1006,

       63, 1006, 1006, 1006, 1006, 1006, 1006,   63,  477,  477,
      477,  477,  477,  477,  192,  565,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  479,   63,  480,  480,  480,
      480,  480,  480, 1006, 1006,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  484,   63,  486,   63,  488,  487,
      489,   63,  491,  480,  480,  480,  480,  480,  480,   63,
      490,  492,   63,   63,   63, 1006, 1006,   63,  496, 1006,
      484,   63,  486,   63,  488,  487,  489,   63,  491,  503,
       63,   63,  494, 1006, 1006,   63,  490,  492,   63,   63,
       63,  497,  495,   63,  496,   63,  499,   63,   63,  502,

       63,  496,  500,  504,  501,  503,   63,   63,  494,   63,
       63,  507,  508,  505, 1006, 1006,  510,  497,  495,   63,
     1006,   63,  499,   63,   63,  502,   63,  496,  500,  504,
      501,   63,   63,  509,   63,   63,   63,  507,  508,  505,
      511,  512,  510,  520, 1006,   63,  513,   63,  514,   63,
      516,  517,  515,  523,   63,   63,   63,   63,   63,  509,
       63, 1006,   63,   63,   63,   63,  511,  512,   63,  520,
       63,  521,  513,   63,  514,   63,  516,  517,  515,  523,
       63,   63,   63,   63,  522,  524,   63,  527,   63,   63,
       63,   63,  529,   63,   63, 1006,   63,  521,  525,  528,

      530,   63,  531,  532,   63,   63, 1006,  533,  526,   63,
      522,  524,   63,  527,   63,   63, 1006,   63,  529,   63,
       63,  534, 1006,   63,  525,  528,  530,   63,  531,  532,
       63,   63,  535,  533,  526,  537,  536,   63,  572,   63,
       63,   63,  538,   63,   63,   63,   63,  534,   63,   63,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,  535,   63,
     1006,  537,  536,   63,  572,   63, 1006, 1006,  538, 1006,
       63,   63, 1006,  542,   63,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  257,   63,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  257, 1006,  543,  543,  543,

      543,  543,  543,  543,  543,  543,  402, 1006,  544,  544,
      544,  544,  544,  544, 1006,   63,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  544,  544,  544,  544,  544,  544,
      257,   63,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  546,  556,  547,  547,  547,  547,  547,  547, 1006,
       63,  547,  547,  547,  547,  547,  547,  547,  547,  547,
     1006, 1006,   63, 1006, 1006, 1006, 1006, 1006,  556,  547,
      547,  547,  547,  547,  547,  192,   63,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  336,  192,   63,  549,

      549,  549,  549,  549,  549,  549,  549,  549,  479, 1006,
      550,  550,  550,  550,  550,  550, 1006, 1006,  550,  550,
      550,  550,  550,  550,  550,  550,  550, 1006, 1006,  559,
     1006, 1006, 1006, 1006, 1006,  553,  550,  550,  550,  550,
      550,  550,  551,  551,  551,  551,  551,  551,  551,  551,
      551,   63,  554,  552,  552,  552,  552,  552,  552,   63,
      555,  553,  557,   63,  558, 1006,  562,   63,   63, 1006,
      588,   63,   63, 1006,  561,  560, 1006,   63,  554,  552,
      552,  552,  552,  552,  552,   63,  555,   63,  557,   63,
      558,   63,  562,   63,   63,  567,  588,   63,   63,   63,

      561,  560,   63,  566,  563,  564,  568,  569,   63,  573,
      570,  571,   63,   63,  576,   63,   63,   63,   63,   63,
      575,  567,   63,  574, 1006,   63,   63,   63,   63,  566,
      563,  564,  568,  569,   63,  573,  570,  571,   63,   63,
      576,   63,   63,  577,   63,   63,  575,   63,   63,  574,
      582,  583,   63,   63,  578,  579,  580,  589,  581, 1006,
       63,  584,  586,  585,  591,   63,   63,  590,  587,  577,
       63,   63,   63,   63, 1006,  592,  582,   63,  594,   63,
       63,  595,  593,  589,   63,   63,   63,  584,  586,  585,
      591,   63,   63,  590,  587,   63,   63,   63,   63,   63,

      597,  592,  598,   63,  599,   63,   63,  595,  593,   63,
       63,   63,   63,  600,  596,   63,   63,   63,  601,   63,
       63,   63,   63,  602,   63,   63,  597,  603,  598,   63,
      599,  605,  604,   63,  631,   63,   63,   63,   63,  600,
      596,   63,   63,   63,  601,   63,   63,   63,   63,  602,
       63, 1006, 1006,  603, 1006,   63, 1006,  605,  604,   63,
      631, 1006,   63,   63, 1006, 1006, 1006, 1006, 1006,   63,
       63, 1006, 1006,   63,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  257, 1006,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  402,  257,   63,  611,  611,  611,

      611,  611,  611,  611,  611,  611,  546, 1006,  612,  612,
      612,  612,  612,  612, 1006, 1006,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  612,  612,  612,  612,  612,  612,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  620,
      623,  614,  614,  614,  614,  614,  614, 1006,   63,  616,
      616,  616,  616,  616,  616,  616,  616,  616, 1006,   63,
     1006, 1006, 1006,  647, 1006,  620,  623,  614,  614,  614,
      614,  614,  614,  192,   63,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  479,   63,  616,  616,  616,  616,

      616,  616, 1006,   63,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  616,  616,  616,  616,  616,  616,  192,   63,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  618,
      621,  619,  619,  619,  619,  619,  619,  622,  624,   63,
      625,  626,   63, 1006,  630,  627, 1006,   63, 1006,   63,
       63,   63, 1006,  628,  629, 1006,  621,  619,  619,  619,
      619,  619,  619,  622,  624,   63,  625,  626,   63,   63,
       63,  627,  632,   63,  637,   63,   63,   63,   63,  628,
      629,   63,  634,  638,  633,  635,  639,  636, 1006,   63,

       63,   63,   63,   63,   63,   63,   63,  642,  632,  640,
      637,  646,   63,  648,   63,  650,   63,   63,  634,  638,
      633,  635,  639,  636,  643,   63,   63,   63,   63,   63,
       63,  641,   63,  644,   63,  640,  645,  649,   63,   63,
       63,   63,   63,   63,  651,   63,   63,   63,  652,   63,
      643,  653,  654,  655,   63, 1006,   63,  641,   63,   63,
       63,  656,   63,  649,   63,   63,   63,   63,  658,   63,
      651,   63,   63,   63,  652,   63,   63,  653,  654,  655,
       63,  659,   63,  657,   63,   63,  660,  656,   63,   63,
       63,   63,   63,  661,  658,   63,  662,   63,   63,   63,

       63, 1006,   63,  677,  663,   63,  679,  659,   63,  657,
       63,  664,  660,   63,  680,   63,   63,   63,   63,  661,
       63,   63,  662,   63,   63,   63,   63,   63, 1006,  677,
      663,   63,  679, 1006,   63, 1006, 1006,  664, 1006,   63,
      680, 1006,   63, 1006, 1006, 1006,   63, 1006,  687, 1006,
     1006,  689, 1006,   63,  257, 1006,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  546,  692,  669,  669,  669,
      669,  669,  669, 1006,  687,  669,  669,  669,  669,  669,
      669,  669,  669,  669, 1006,   63, 1006, 1006, 1006, 1006,
     1006, 1006,  692,  669,  669,  669,  669,  669,  669,  257,

     1006,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      671,   63,  672,  672,  672,  672,  672,  672, 1006,  683,
      672,  672,  672,  672,  672,  672,  672,  672,  672, 1006,
     1006,   63, 1006, 1006, 1006, 1006, 1006, 1006,  672,  672,
      672,  672,  672,  672,  192,  683,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  479,  192,   63,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  618, 1006,  674,
      674,  674,  674,  674,  674, 1006, 1006,  674,  674,  674,
      674,  674,  674,  674,  674,  674, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006,  682,  674,  674,  674,  674,  674,

      674,  675,  675,  675,  675,  675,  675,  675,  675,  675,
       63,  684,  676,  676,  676,  676,  676,  676,   63,  681,
      682,   63,  678,  685,  686, 1006, 1006,   63,   63,  688,
     1006,   63, 1006,   63,  690,   63,   63,  684,  676,  676,
      676,  676,  676,  676,   63,  681,  691,   63,  678,  685,
      686,   63,  693,   63,   63,  688,  695,   63,  694,   63,
      690,   63,   63,  696,   63,  697,  698,  699,   63, 1006,
       63,  700,  691,  701,   63,  703, 1006,   63,  693,   63,
      705,   63,  695,   63,  694,   63,  702,  704,   63,  696,
       63,  697,   63,   63,   63,   63,   63,  706,   63,   63,

       63,  703,   63,   63,   63,   63,  705,   63,   63,   63,
      707,   63,  702,  704,   63,  708,  709,   63,   63,   63,
       63,   63,   63,  706,   63,   63,  711,   63,   63,   63,
       63,   63,   63,  726,   63,   63,  707,  710,   63,   63,
       63,  708,  709,   63,   63, 1006,   63, 1006,   63, 1006,
     1006, 1006,  711,   63, 1006, 1006,   63,   63,   63,  726,
     1006,   63, 1006,  710,   63,   63, 1006,  730, 1006,  257,
       63,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      546,  257,   63,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  671,  730,  717,  717,  717,  717,  717,  717,

     1006, 1006,  717,  717,  717,  717,  717,  717,  717,  717,
      717, 1006, 1006, 1006, 1006, 1006, 1006, 1006,  732, 1006,
      717,  717,  717,  717,  717,  717,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  727,   63,  719,  719,  719,
      719,  719,  719, 1006,  732,  721,  721,  721,  721,  721,
      721,  721,  721,  721, 1006, 1006, 1006, 1006, 1006, 1006,
     1006,  727,   63,  719,  719,  719,  719,  719,  719,  192,
     1006,  720,  720,  720,  720,  720,  720,  720,  720,  720,
      618,  729,  721,  721,  721,  721,  721,  721, 1006,   63,
      724,  724,  724,  724,  724,  724,  724,  724,  724, 1006,

     1006, 1006, 1006, 1006, 1006,  738, 1006,  729,  721,  721,
      721,  721,  721,  721,  192,   63,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  723,  725,  724,  724,  724,
      724,  724,  724,  728,  731,  733,  734,   63,  735,   63,
       63,  736,   63,   63,   63,   63, 1006,   63,  737,   63,
       63, 1006,  725,  724,  724,  724,  724,  724,  724,  728,
      731,  733,  734,   63,  735,   63,   63,  736,   63,   63,
       63,   63,  739,   63,  737,   63,   63,  740,  741,   63,
       63,   63,   63,   63,  742,  743,   63, 1006, 1006,  746,
       63, 1006,   63,  761,  747,   63,  744,   63,  739,  745,

       63,   63,   63,  740,  741,   63,   63,   63,   63,   63,
      742,  743,   63,   63,   63,  746,   63,  748,   63,  761,
      747,   63,  744,   63, 1006,  745,   63,   63,   63,   63,
     1006,   63, 1006, 1006, 1006, 1006, 1006, 1006, 1006,   63,
       63, 1006, 1006,  748,  753,  753,  753,  753,  753,  753,
      753,  753,  753, 1006, 1006,   63,  257,   63,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  671,   63,  753,
      753,  753,  753,  753,  753, 1006,  766,  756,  756,  756,
      756,  756,  756,  756,  756,  756, 1006,   63, 1006, 1006,
     1006, 1006, 1006, 1006,   63,  753,  753,  753,  753,  753,

      753,  257,  766,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  755,   63,  756,  756,  756,  756,  756,  756,
      192,   63,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  618,   63, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
      756,  756,  756,  756,  756,  756,  192,   63,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  723,   63,  758,
      758,  758,  758,  758,  758, 1006, 1006,  758,  758,  758,
      758,  758,  758,  758,  758,  758, 1006, 1006, 1006, 1006,
     1006, 1006,   63, 1006,  762,  758,  758,  758,  758,  758,
      758,  759,  759,  759,  759,  759,  759,  759,  759,  759,

      763,  764,  760,  760,  760,  760,  760,  760,   63,  767,
      762,  769,  768,  770,  765,   63,   63,   63,   63,  771,
       63,   63,  775, 1006, 1006,   63,  763,  764,  760,  760,
      760,  760,  760,  760,   63,  767,  772,  769,  768,  770,
      765,   63,   63,   63,   63,  771,   63,   63,  773,  774,
      776,   63,   63,   63,  777,   63,   63,  792,   63,  778,
       63,  794,  772,  793,   63,   63,   63,   63,   63, 1006,
       63, 1006, 1006, 1006,  773,  774,  776, 1006,   63,   63,
      777,   63,   63,  792,   63,  778, 1006,  794, 1006,  793,
       63,   63,   63,   63,   63,  257,   63,  470,  470,  470,

      470,  470,  470,  470,  470,  470,  671,  257, 1006,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  755,   63,
      784,  784,  784,  784,  784,  784, 1006, 1006,  784,  784,
      784,  784,  784,  784,  784,  784,  784, 1006, 1006, 1006,
     1006, 1006, 1006, 1006,   63,   63,  784,  784,  784,  784,
      784,  784,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  797,   63,  786,  786,  786,  786,  786,  786, 1006,
       63,  788,  788,  788,  788,  788,  788,  788,  788,  788,
     1006,   63, 1006, 1006, 1006, 1006, 1006,  797,   63,  786,
      786,  786,  786,  786,  786,  192, 1006,  787,  787,  787,

      787,  787,  787,  787,  787,  787,  723,   63,  788,  788,
      788,  788,  788,  788, 1006,   63,  791,  791,  791,  791,
      791,  791,  791,  791,  791, 1006,  798, 1006, 1006, 1006,
     1006, 1006, 1006, 1006,  788,  788,  788,  788,  788,  788,
      192,   63,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  790,  799,  791,  791,  791,  791,  791,  791,  795,
       63,   63,  800,  801,  803,  802,   63,   63, 1006,   63,
       63,  804,   63,  821,  805,   63,   63,   63,  799,  791,
      791,  791,  791,  791,  791,  795,   63,   63,  800,  801,
      803,  802,   63,   63,  806,   63,   63,  804,   63, 1006,

      805,   63,   63,   63, 1006, 1006,  826,   63,   63, 1006,
       63,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      806, 1006, 1006,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  826,   63,   63, 1006,   63,  257, 1006,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  755,  852,
      812,  812,  812,  812,  812,  812,  192,  853,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  723,  829, 1006,
     1006, 1006, 1006, 1006, 1006,  852,  812,  812,  812,  812,
      812,  812,  257,  853,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  814,   63,  815,  815,  815,  815,  815,

      815, 1006,   63,  817,  817,  817,  817,  817,  817,  817,
      817,  817, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
       63,  815,  815,  815,  815,  815,  815,  192,   63,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  790,  820,
      817,  817,  817,  817,  817,  817, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006,   63,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  820,  817,  817,  817,  817,
      817,  817,  818,  818,  818,  818,  818,  818,  818,  818,
      818,   63,  823,  819,  819,  819,  819,  819,  819,   63,
      824, 1006, 1006,  822, 1006, 1006, 1006,  830,   63, 1006,

      833,  849,  827,   63,   63,  831,  825,   63,  823,  819,
      819,  819,  819,  819,  819,   63,  824,   63,  828,  822,
       63,   63,  832,  830,   63,  834,  833,  849,  827,   63,
       63,  831,  825,   63, 1006, 1006,   63,   63,   63, 1006,
      876, 1006, 1006,   63,  828, 1006,   63,   63,  832, 1006,
      257,  834,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  755,   63,   63,   63,  257,  876,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  814,  881,  841,  841,
      841,  841,  841,  841, 1006,  851,  845,  845,  845,  845,
      845,  845,  845,  845,  845, 1006, 1006, 1006, 1006, 1006,

     1006, 1006,  882,  881,  841,  841,  841,  841,  841,  841,
      842,  842,  842,  842,  842,  842,  842,  842,  842,   63,
       63,  843,  843,  843,  843,  843,  843, 1006,  882,  848,
      848,  848,  848,  848,  848,  848,  848,  848, 1006,  850,
     1006, 1006, 1006, 1006, 1006,   63,   63,  843,  843,  843,
      843,  843,  843,  192,   63,  844,  844,  844,  844,  844,
      844,  844,  844,  844,  790,  850,  845,  845,  845,  845,
      845,  845, 1006,   63, 1006, 1006, 1006, 1006, 1006, 1006,
       63,  870,  870,  870,  870,  870,  870,  870,  870,  870,
     1006, 1006,  845,  845,  845,  845,  845,  845,  192,   63,

      846,  846,  846,  846,  846,  846,  846,  846,  846,  847,
      854,  848,  848,  848,  848,  848,  848,  856,  855,  857,
      858,  859,   63,  860,  863, 1006,   63,   63,  861,  862,
       63, 1006,   63, 1006, 1006, 1006,  854,  848,  848,  848,
      848,  848,  848,  856,  855,   63,   63,  877,   63,   63,
      863,   63,   63,   63,  861,  862,   63, 1006,   63,  872,
      872,  872,  872,  872,  872,  872,  872,  872, 1006, 1006,
      902,   63,   63,  877, 1006,   63,  257,   63,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  814,   63,  870,
      870,  870,  870,  870,  870,  192,  902,  405,  405,  405,

      405,  405,  405,  405,  405,  405,  790,  906, 1006,  887,
     1006, 1006, 1006, 1006,   63,  870,  870,  870,  870,  870,
      870,  257, 1006,  871,  871,  871,  871,  871,  871,  871,
      871,  871,   63,  906,  872,  872,  872,  872,  872,  872,
     1006, 1006,  874,  874,  874,  874,  874,  874,  874,  874,
      874, 1006, 1006, 1006, 1006, 1006, 1006, 1006,   63, 1006,
      872,  872,  872,  872,  872,  872,  192,  883,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  847,  878,  874,
      874,  874,  874,  874,  874,  884,  885,   63,  888,  886,
      879, 1006, 1006,  883,  889,  907,   63,  880,   63,   63,

      901,   63, 1006,  890,  878,  874,  874,  874,  874,  874,
      874,  884,  891,   63,   63,   63,  879,   63,   63,   63,
      889,  907,   63,  880,   63,   63,  901,   63,   63,  890,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,  891, 1006,
       63,   63, 1006,   63,   63,   63, 1006, 1006, 1006, 1006,
      910, 1006, 1006,  257,   63,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  814,  257, 1006,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  903,   63,  897,  897,
      897,  897,  897,  897, 1006,  927,  897,  897,  897,  897,
      897,  897,  897,  897,  897, 1006,   63, 1006, 1006, 1006,

     1006, 1006,  903,   63,  897,  897,  897,  897,  897,  897,
      192,  927,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  847,   63,  899,  899,  899,  899,  899,  899, 1006,
      909,  899,  899,  899,  899,  899,  899,  899,  899,  899,
      904,  908,   63,   63,  912,  911,  905,  913,   63,  899,
      899,  899,  899,  899,  899,  923,  909,  914,   63, 1006,
       63, 1006, 1006, 1006, 1006, 1006,  904,  908,   63,   63,
       63,   63,  905,   63,   63,   63,   63, 1006,  924, 1006,
     1006,  923, 1006,  914,   63, 1006,   63,  920,  920,  920,
      920,  920,  920,  920,  920,  920,   63,   63, 1006,   63,

     1006,   63,   63,  257,  924,  919,  919,  919,  919,  919,
      919,  919,  919,  919, 1006, 1006,  920,  920,  920,  920,
      920,  920,  192,   63,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  847,  922,  925,  929,   63,   63,   63,
       63,   63,  920,  920,  920,  920,  920,  920,  926,   63,
     1006,  936, 1006,  937, 1006,   63,   63, 1006,   63, 1006,
      922,  925,  929,   63,   63,   63,   63,   63, 1006, 1006,
      935, 1006,  928,  928,  926,  928,  928,  928,  928,  928,
      928,   63,   63,  928,   63,   63,   63,   63,  940,  941,
      938, 1006, 1006,  928,  928,  257,  935,  470,  470,  470,

      470,  470,  470,  470,  470,  470,   63, 1006, 1006,  943,
      944,   63,   63,   63,  940,  941,  938,  939,  939,  950,
      939,  939,  939,  939,  939,  939,   63,  952,  939,  949,
      953,  954,   63,   63,   63,  943,  944,   63,  939,  939,
      955,  951,  956, 1006,  960,  950,   63,  957,  958,  959,
     1006,   63,   63,  952,  967,  949,  953,  954,  968,   63,
       63,  964,   63,   63,   63,  965,  955,  951,  956,   63,
      960,   63,   63,  957,  958,  959,  966,   63,  969,  970,
      967,  971,   63,   63,  968,  972,   63,  964,   63,  978,
       63,  965,   63,  973,   63,   63,   63,   63,  980,   63,

      979,   63,  966,   63,  969,  970,  981,  971,   63,   63,
      982,  972,   63,  983,   63,  978,   63,  984,   63,  973,
       63,  988,   63,   63,  980,   63,  979,   63,   63,   63,
      989,   63,  981,  990,   63,  991,  982,   63,   63,  983,
       63,   63,   63,  984,  996,   63,   63,  988, 1006,   63,
     1006, 1006, 1006, 1006,   63,   63,  989,   63, 1006,  990,
       63,  991, 1006,   63,   63, 1006, 1006,   63, 1006, 1006,
      996,   63,   63, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006,   63,   43,   43,   43,   43,   45,   45,   45,   45,
       49,   49,   49,   49,   51, 1006,   51,   51,   52,   52,

       52,   52,  120, 1006,  120,  120,  124,  124,  187,  187,
      188,  188,  254,  254,  255,  255,  256,  256,  324,  324,
      325,  325,  395,  395,  396,  396,  397,  397,  422, 1006,
      422,  422,  465,  465,  466,  466,  467,  467,  540,  540,
      541,  541,  606,  606,  607,  607,  608,  608,  665,  665,
      666,  666,  667,  667,  540,  540,  713,  713,  714,  714,
      749,  749,  750,  750,  751,  751,  779,  779,  780,  780,
      781,  781,  666,  666,  808,  808,  809,  809,  835,  835,
      836,  836,  837,  837,  864,  864,  865,  865,  867,  867,
      750,  750,  893,  893,  894,  894,  915,  915,  916,  916,

      917,  917,  928, 1006,  928,  928,  930, 1006,  930,  930,
      931,  931,  932,  932,  939, 1006,  939,  939,  942, 1006,
      942,  942,  808,  808,  946,  946,  947,  947,  961,  961,
      962,  962,  974,  974,  975,  975,  976,  976,  865,  865,
      986,  986,  992,  992,  993,  993,  994,  994,  998,  998,
     1001, 1001, 1002, 1002, 1004, 1004, 1005, 1005,    7, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,

     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006
    } ;

static yyconst flex_int16_t yy_chk[5935] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   10,   10,   11,   11,   15,
       17,   29, 1095,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   24,   16,   16,   16,   16,   16,

       16,   27,   16,   63,   39,   24,   17,   29,   24,   27,
       34,   39,   34,   46,   46,   34,   30,   24,   16, 1091,
       24,   16,   16,   16,   16,   16,   16,   27,   16,   63,
       39,   24,   30, 1089,   24,   27,   34,   39,   34,   47,
       47,   34,   30,   24,   16,   20,   20, 1085,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   30,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   21,   21,   65,   21,   48,   48,   41,   66, 1079,
       21, 1071,   21,   41,   67,   68,   71,   71, 1070,   21,
     1065,   25, 1061, 1060, 1056, 1052,   73,   21,   21,   65,
       21, 1014,   25,   41,   66,   25,   21,   25,   21,   41,
       67,   68,   71,   71,   31,   21,   22,   25,   22,   22,
       31,   22,   73,   32,   28,   76,   31,   22,   25,   22,
       22,   25,   28,   25,   36, 1005,   22, 1004,   36,   28,
       31, 1002,   22,   32,   22,   22,   31,   22, 1001,   32,
       28,   76,   31,   22,   36,   22,   22, 1000,   28,   77,

       36,   35,   22,   23,   36,   28,   23,   23,   69,   32,
       72,   23,   35,   69,   23,   35,   23,   23,   35,   72,
       36,   83,   69,   23,  999,   77,  998,   35,  997,   23,
      994,  993,   23,   23,   69,  987,   72,   23,   35,   69,
       23,   35,   23,   23,   35,   72,  986,   83,   69,   23,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      985,   26,   26,   26,   26,   26,   26,   33,   26,   95,
       37,   33,   26,   37,   37,   26,  976,   33,  975,  974,
      963,   26,   33,   33,  962,   37,   37,   26,   26,   26,
       26,   26,   26,   33,   26,   95,   37,   33,   26,   37,

       37,   26,   42,   33,   38,   38,   40,   26,   33,   33,
       40,   37,   37,   70,   38,   78,   75,   89,   42,  961,
       98,   89,   38,   75,  109,   74,   40,  110,   42,   78,
       70,   38,   40,   74,   38,  947,   40,  946,  945,   70,
       38,   78,   75,   89,   42,   74,   98,   89,   38,   75,
      109,   74,   40,  110,  933,   78,   70,   38,  932,   74,
       38,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   74,   56,   56,   56,   56,   56,   56,   81,   56,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   80,
       81,  931,  917,  916,  915,  899,  895,   80,   56,   56,

       56,   56,   56,   56,   81,   56,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   80,   81,   61,   61,   61,
       61,   61,   61,   80,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  894,  893,  892,  870,  867,  865,  864,
       79,  845,   79,   61,   61,   61,   61,   61,   61,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   84,
       64,   64,   64,   64,   64,   64,   79,   64,   79,   82,
      839,  838,   86,  837,   82,  836,   84,   87,   85,  835,
       64,   92,   92,  812,   90,   84,   64,   64,   64,   64,
       64,   64,   86,   64,   85,   82,   88,   87,   86,   90,

       82,   93,   84,   87,   85,   91,   64,   92,   92,   94,
       90,   94,   96,   93,   99,   88,   88,   96,   86,   91,
       85,  102,   88,   87,  100,   90,  102,   93,   97,   97,
      100,   91,  809,  101,  808,   94,  807,   94,   96,   93,
      788,   88,   88,   96,  104,   91,  105,  102,   99,  101,
      100,  113,  102,  782,   97,   97,  100,  108,  103,  101,
      103,  103,  104,  106,  111,  107,  105,  781,  106,  103,
      104,  112,  105,  116,   99,  101,  108,  113,  114,  112,
      116,  130,  107,  108,  103,  107,  103,  103,  104,  106,
      114,  107,  105,  117,  106,  103,  117,  112,  111,  116,

      115,  118,  108,  118,  114,  112,  116,  130,  107,  115,
      780,  107,  779,  766,  753,  751,  114,  750,  749,  117,
      131,  721,  117,  715,  111,  714,  115,  118,  713,  118,
      712,  669,  667,  666,  665,  115,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  131,  121,  121,  121,
      121,  121,  121,  128,  121,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  135,  138,  616,  609,  608,  607,
      606,  544,  156,  121,  121,  121,  121,  121,  121,  146,
      121,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      135,  138,  125,  125,  125,  125,  125,  125,  156,  146,

      541,  540,  145,  539,  477,  146,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  468,  467,  184,  125,  125,
      125,  125,  125,  125,  127,  146,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  145,  127,  127,  127,
      127,  127,  127,  184,  191,  466,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  465,  400,  397,  396,  395,
      334,  326,  145,  127,  127,  127,  127,  127,  127,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  136,
      129,  129,  129,  129,  129,  129,  132,  133,  134,  132,
      137,  325,  136,  133,  134,  139,  324,  139,  141,  141,

      137,  140,  142,  323,  142,  136,  129,  129,  129,  129,
      129,  129,  132,  133,  134,  132,  137,  140,  136,  133,
      134,  139,  144,  139,  141,  141,  137,  140,  142,  143,
      142,  148,  147,  143,  149,  150,  149,  151,  144,  151,
      155,  266,  150,  140,  256,  255,  158,  148,  144,  147,
      254,  152,  153,  154,  253,  143,  155,  148,  147,  143,
      149,  150,  149,  151,  144,  151,  155,  157,  150,  152,
      153,  154,  159,  148,  160,  147,  162,  152,  153,  154,
      158,  226,  155,  157,  161,  161,  189,  163,  160,  166,
      159,  188,  165,  157,  164,  152,  153,  154,  159,  163,

      160,  165,  169,  164,  166,  167,  158,  164,  168,  157,
      162,  187,  164,  163,  160,  166,  159,  167,  165,  161,
      164,  173,  169,  175,  168,  163,  170,  165,  169,  164,
      166,  167,  170,  164,  168,  175,  162,  171,  164,  172,
      171,  177,  172,  167,  178,  161,  174,  174,  169,  175,
      168,  176,  170,  176,  182,  173,  180,  181,  170,  177,
      178,  175,  179,  171,  197,  172,  171,  177,  172,  181,
      178,  182,  174,  174,  180,  199,  209,  176,  179,  176,
      182,  173,  180,  181,  183,  177,  178,  124,  179,  122,
      197,   57,   53,   52,  183,  181,   49,  182,   44,   19,

      180,  199,  209,   18,  179,  213,   14,   12,    7,    4,
      183,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      183,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  213,  185,  185,  185,  185,  185,  185,  195,  185,
      195,  195,  195,  195,  195,  195,  195,  195,  195,    3,
        0,    0,  202,    0,    0,    0,    0,    0,  185,  185,
      185,  185,  185,  185,  200,  185,  190,  200,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,    0,  190,
      190,  190,  190,  190,  190,    0,  202,    0,    0,    0,
      200,    0,    0,  200,    0,    0,    0,  206,    0,    0,

        0,    0,    0,    0,  206,  190,  190,  190,  190,  190,
      190,  193,  202,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  206,  193,  193,  193,  193,  193,  193,
      206,  198,    0,    0,    0,    0,    0,    0,    0,    0,
      233,    0,    0,    0,    0,    0,    0,  247,  203,  198,
      193,  193,  193,  193,  193,  193,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  198,  233,  194,  194,  194,
      194,  194,  194,  247,    0,  198,    0,    0,    0,    0,
        0,    0,  203,    0,    0,    0,  208,    0,    0,    0,
      201,  198,  201,  194,  194,  194,  194,  194,  194,  196,

      196,  196,  196,  196,  196,  196,  196,  196,  203,  204,
      196,  196,  196,  196,  196,  196,  201,  205,  201,  205,
      208,  210,  207,  210,  211,  204,  211,  214,  216,  218,
      214,  217,  212,  217,    0,  204,  196,  196,  196,  196,
      196,  196,  207,  205,  212,  205,  208,  210,  207,  210,
      211,  204,  211,  214,  224,  215,  214,  217,  212,  217,
      219,  225,  216,  218,  220,  220,  221,  224,  207,  221,
      212,  215,  222,  222,  225,    0,  219,    0,    0,    0,
      224,  215,  228,    0,  228,    0,  219,  225,  216,  218,
      220,  220,  221,  224,  223,  221,  227,  215,  222,  222,

      225,  229,  219,  223,  223,  223,  230,  229,  228,  231,
      228,  227,  223,  227,    0,  230,    0,  232,  234,  235,
      223,    0,  227,  232,  236,  231,    0,  229,    0,  223,
      223,  223,  230,  229,  234,  231,  235,  227,  223,  227,
      239,  230,  236,  232,  234,  235,  238,  238,  237,  232,
      236,  231,  237,  240,  245,  242,  239,  243,  246,    0,
      234,    0,  235,  245,  243,    0,  239,    0,  236,  240,
      241,  242,  238,  238,  237,  244,  244,  249,  237,  240,
      245,  242,  239,  243,  248,  241,  268,  241,  251,  245,
      243,  268,  246,  250,  249,  240,  241,  242,  269,  250,

      269,  244,  244,  249,  248,    0,    0,    0,    0,    0,
      248,  241,  268,  241,    0,  267,  267,  268,  246,  250,
      249,  271,  251,    0,  269,  250,  269,    0,    0,    0,
      248,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  267,  267,    0,  283,    0,    0,  271,  251,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  258,    0,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      283,  258,  258,  258,  258,  258,  258,  260,    0,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  258,  258,  258,

      258,  258,  258,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  273,  308,  259,  259,  259,  259,  259,  259,
      261,  273,  261,  261,  261,  261,  261,  261,  261,  261,
      261,    0,  274,    0,    0,    0,    0,    0,  273,  308,
      259,  259,  259,  259,  259,  259,  262,  273,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  296,  262,
      262,  262,  262,  262,  262,  263,  274,  263,  263,  263,
      263,  263,  263,  263,  263,  263,    0,  296,    0,    0,
        0,    0,    0,    0,  296,  262,  262,  262,  262,  262,
      262,  264,  274,  264,  264,  264,  264,  264,  264,  264,

      264,  264,  264,  296,  264,  264,  264,  264,  264,  264,
      265,  270,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  275,  311,  270,  276,  276,  272,  272,  272,  285,
      264,  264,  264,  264,  264,  264,  272,  270,  278,  279,
      279,  280,  278,  278,  277,  287,  282,    0,  311,  270,
      276,  276,  272,  272,  272,  275,  277,  280,  282,  284,
        0,  288,  272,  285,  278,  279,  279,  280,  278,  278,
      277,  281,  282,  288,  295,  289,  284,    0,  281,  287,
      286,  275,  277,  280,  282,  284,  286,  288,  286,  285,
      289,  290,  291,  292,  293,  294,  297,  281,  291,  288,

      293,  289,  284,  290,  281,  287,  286,  298,  295,  292,
        0,  297,  286,  298,  286,  294,  289,  290,  291,  292,
      293,  294,  297,  301,  291,  302,  293,  299,  300,  290,
      301,  303,  306,  298,  295,  292,  304,  297,  303,  298,
        0,  294,  304,  299,  300,  302,  312,  305,    0,  301,
      305,  302,  312,  299,  300,    0,  301,  303,  307,  307,
        0,  309,  304,  313,  303,  320,  306,    0,  304,  299,
      300,  302,  312,  305,  310,  310,  305,  309,  312,  313,
      315,  314,  317,  316,  307,  307,  316,  309,  318,  313,
      314,  339,  306,  318,  315,  319,  347,  319,  322,  320,

      310,  310,  317,  309,  347,  313,  315,  314,  317,  316,
      321,  339,  316,  321,  318,  322,  314,  339,    0,  318,
      315,  319,  347,  319,  322,  320,  354,    0,  317,  338,
      347,    0,    0,    0,    0,    0,  321,  339,    0,  321,
      327,  322,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  328,  354,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  338,  328,  328,  328,  328,  328,  328,
      329,  370,  329,  329,  329,  329,  329,  329,  329,  329,
      329,    0,  371,    0,    0,    0,    0,    0,    0,  338,
      328,  328,  328,  328,  328,  328,  330,  370,  330,  330,

      330,  330,  330,  330,  330,  330,  330,  330,  371,  330,
      330,  330,  330,  330,  330,  331,  343,  331,  331,  331,
      331,  331,  331,  331,  331,  331,    0,    0,  343,    0,
        0,    0,    0,    0,    0,  330,  330,  330,  330,  330,
      330,  333,  343,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  335,  343,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,    0,  335,  335,  335,  335,
      335,  335,  337,    0,  337,  337,  337,  337,  337,  337,
      337,  337,  337,    0,    0,    0,    0,    0,  352,  340,
        0,  340,  335,  335,  335,  335,  335,  335,  336,  336,

      336,  336,  336,  336,  336,  336,  336,  341,  341,  336,
      336,  336,  336,  336,  336,  340,  342,  340,  346,  349,
      346,  350,  352,  369,  350,  344,  349,  345,  353,  369,
        0,  353,  342,  341,  341,  336,  336,  336,  336,  336,
      336,  344,  342,  345,  346,  349,  346,  350,  352,  369,
      350,  344,  349,  345,  353,  369,  351,  353,  342,    0,
      375,    0,    0,  356,  355,    0,    0,  344,  351,  345,
      348,  348,  355,  348,  348,  348,  348,  348,  348,  348,
      356,  348,  351,  358,  359,  357,  375,  360,  362,  356,
      355,  348,  348,  357,  351,  360,  363,  359,  355,    0,

      358,  361,  361,  364,  363,    0,  356,  366,  362,  358,
      359,  357,  364,  360,  362,  365,  365,  367,    0,  357,
      368,  360,  363,  359,  366,  367,  358,  361,  361,  364,
      363,  372,  368,  366,  362,  377,  378,  373,  364,  372,
      373,  365,  365,  367,  374,  378,  368,  374,  379,  377,
      366,  367,  376,  381,  376,  382,  383,  372,  368,  380,
      384,  377,  378,  373,  379,  372,  373,  386,  384,  385,
      374,  378,  385,  374,  379,  377,  387,  380,  376,  388,
      376,    0,  383,  386,  420,  380,  384,  381,  393,  382,
      379,  388,  392,  386,  384,  385,    0,  389,  385,  389,

      390,  392,  387,  380,  394,  388,  390,  391,  391,  386,
      420,  410,  423,  381,  410,  382,  394,  388,  392,  431,
      410,  443,  393,  389,    0,  389,  390,  392,    0,    0,
      394,    0,  390,  391,  391,    0,    0,  410,  423,    0,
      410,    0,  394,    0,    0,  431,  410,  443,  393,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  399,    0,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      401,  431,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  444,  401,  401,  401,  401,  401,  401,  403,
      412,  403,  403,  403,  403,  403,  403,  403,  403,  403,

        0,    0,    0,    0,    0,    0,    0,    0,  444,  401,
      401,  401,  401,  401,  401,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  412,  425,  402,  402,  402,  402,
      402,  402,  404,  425,  404,  404,  404,  404,  404,  404,
      404,  404,  404,    0,  450,    0,    0,    0,    0,    0,
      412,  425,  402,  402,  402,  402,  402,  402,  405,  425,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  406,
      450,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  461,  406,  406,  406,  406,  406,  406,  407,  493,
      407,  407,  407,  407,  407,  407,  407,  407,  407,    0,

      506,    0,    0,    0,    0,    0,    0,  461,  406,  406,
      406,  406,  406,  406,  408,  493,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  506,  408,  408,  408,
      408,  408,  408,  409,    0,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  411,  414,  413,  411,  415,  414,
      416,  416,  418,  408,  408,  408,  408,  408,  408,  413,
      417,  419,  511,  415,  418,    0,    0,  422,  422,    0,
      411,  414,  413,  411,  415,  414,  416,  416,  418,  428,
      417,  419,  421,    0,    0,  413,  417,  419,  511,  415,
      418,  424,  421,  422,  422,  428,  426,  424,  427,  427,

      421,  421,  426,  429,  426,  428,  417,  419,  421,  426,
      429,  432,  433,  430,    0,    0,  435,  424,  421,  430,
        0,  428,  426,  424,  427,  427,  421,  421,  426,  429,
      426,  432,  433,  434,  435,  426,  429,  432,  433,  430,
      436,  437,  435,  445,    0,  430,  438,  437,  439,  434,
      441,  442,  440,  448,  442,  448,  436,  432,  433,  434,
      435,    0,  438,  445,  439,  441,  436,  437,  440,  445,
      446,  446,  438,  437,  439,  434,  441,  442,  440,  448,
      442,  448,  436,  447,  447,  449,  449,  452,  438,  445,
      439,  441,  454,  452,  440,    0,  446,  446,  451,  453,

      455,  456,  456,  457,  454,  457,    0,  458,  451,  447,
      447,  449,  449,  452,  458,  451,    0,  453,  454,  452,
      455,  459,    0,  459,  451,  453,  455,  456,  456,  457,
      454,  457,  460,  458,  451,  463,  462,  463,  500,  460,
      458,  451,  464,  453,  500,  464,  455,  459,  462,  459,
        0,    0,    0,    0,    0,    0,    0,    0,  460,  514,
        0,  463,  462,  463,  500,  460,    0,    0,  464,    0,
      500,  464,    0,  469,  462,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  470,  514,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  471,    0,  471,  471,  471,

      471,  471,  471,  471,  471,  471,  471,    0,  471,  471,
      471,  471,  471,  471,  472,  515,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  471,  471,  471,  471,  471,  471,
      473,  515,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  484,  473,  473,  473,  473,  473,  473,  474,
      516,  474,  474,  474,  474,  474,  474,  474,  474,  474,
        0,    0,  484,    0,    0,    0,    0,    0,  484,  473,
      473,  473,  473,  473,  473,  476,  516,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  478,  484,  478,

      478,  478,  478,  478,  478,  478,  478,  478,  478,    0,
      478,  478,  478,  478,  478,  478,  480,    0,  480,  480,
      480,  480,  480,  480,  480,  480,  480,    0,    0,  487,
        0,    0,    0,    0,    0,  481,  478,  478,  478,  478,
      478,  478,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  481,  482,  479,  479,  479,  479,  479,  479,  482,
      483,  481,  485,  487,  486,    0,  490,  483,  490,    0,
      518,  485,  486,    0,  489,  488,    0,  481,  482,  479,
      479,  479,  479,  479,  479,  482,  483,  489,  485,  487,
      486,  488,  490,  483,  490,  495,  518,  485,  486,  491,

      489,  488,  492,  494,  491,  492,  496,  497,  497,  501,
      498,  499,  494,  489,  504,  495,  504,  488,  501,  499,
      503,  495,  496,  502,    0,  491,  498,  503,  492,  494,
      491,  492,  496,  497,  497,  501,  498,  499,  494,  502,
      504,  495,  504,  505,  501,  499,  503,  508,  496,  502,
      508,  509,  498,  503,  507,  507,  507,  519,  507,    0,
      505,  510,  513,  512,  521,  502,  512,  520,  517,  505,
      517,  513,  523,  508,    0,  522,  508,  510,  525,  520,
      521,  526,  524,  519,  507,  509,  505,  510,  513,  512,
      521,  522,  512,  520,  517,  524,  517,  513,  523,  526,

      528,  522,  529,  510,  530,  520,  521,  526,  524,  528,
      507,  509,  525,  531,  527,  534,  530,  522,  532,  529,
      532,  524,  527,  533,  538,  526,  528,  535,  529,  531,
      530,  537,  536,  558,  565,  528,  537,  533,  525,  531,
      527,  534,  530,  535,  532,  529,  532,  536,  527,  533,
      538,    0,    0,  535,    0,  531,    0,  537,  536,  558,
      565,    0,  537,  533,    0,    0,    0,    0,    0,  535,
      578,    0,    0,  536,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  543,    0,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  545,  578,  545,  545,  545,

      545,  545,  545,  545,  545,  545,  545,    0,  545,  545,
      545,  545,  545,  545,  547,    0,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  545,  545,  545,  545,  545,  545,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  553,
      556,  546,  546,  546,  546,  546,  546,  550,  556,  550,
      550,  550,  550,  550,  550,  550,  550,  550,    0,  553,
        0,    0,    0,  581,    0,  553,  556,  546,  546,  546,
      546,  546,  546,  549,  556,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  553,  549,  549,  549,  549,

      549,  549,  552,  581,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  549,  549,  549,  549,  549,  549,  551,  581,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      554,  551,  551,  551,  551,  551,  551,  555,  557,  554,
      559,  560,  560,    0,  564,  561,    0,  555,    0,  559,
      557,  561,    0,  562,  563,    0,  554,  551,  551,  551,
      551,  551,  551,  555,  557,  554,  559,  560,  560,  562,
      563,  561,  566,  555,  571,  559,  557,  561,  564,  562,
      563,  567,  568,  572,  567,  569,  573,  570,    0,  568,

      572,  569,  566,  570,  571,  562,  563,  576,  566,  574,
      571,  580,  574,  582,  564,  584,  573,  567,  568,  572,
      567,  569,  573,  570,  577,  568,  572,  569,  566,  570,
      571,  575,  575,  579,  580,  574,  579,  583,  574,  586,
      577,  576,  573,  587,  585,  583,  585,  582,  588,  584,
      577,  589,  590,  591,  593,    0,  591,  575,  575,  590,
      580,  592,  579,  583,  592,  586,  577,  576,  595,  587,
      585,  583,  585,  582,  588,  584,  598,  589,  590,  591,
      593,  596,  591,  594,  595,  590,  597,  592,  579,  596,
      592,  601,  594,  599,  595,  602,  600,  603,  597,  600,

      599,    0,  598,  620,  604,  620,  622,  596,  629,  594,
      595,  605,  597,  622,  623,  596,  623,  601,  594,  599,
      604,  602,  600,  603,  597,  600,  599,  605,    0,  620,
      604,  620,  622,    0,  629,    0,    0,  605,    0,  622,
      623,    0,  623,    0,    0,    0,  604,    0,  631,    0,
        0,  633,    0,  605,  611,    0,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  636,  611,  611,  611,
      611,  611,  611,  612,  631,  612,  612,  612,  612,  612,
      612,  612,  612,  612,    0,  633,    0,    0,    0,    0,
        0,    0,  636,  611,  611,  611,  611,  611,  611,  613,

        0,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  633,  613,  613,  613,  613,  613,  613,  614,  626,
      614,  614,  614,  614,  614,  614,  614,  614,  614,    0,
        0,  626,    0,    0,    0,    0,    0,    0,  613,  613,
      613,  613,  613,  613,  615,  626,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  617,  626,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,    0,  617,
      617,  617,  617,  617,  617,  619,    0,  619,  619,  619,
      619,  619,  619,  619,  619,  619,    0,    0,    0,    0,
        0,    0,    0,    0,  625,  617,  617,  617,  617,  617,

      617,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      625,  627,  618,  618,  618,  618,  618,  618,  621,  624,
      625,  624,  621,  628,  630,    0,    0,  628,  627,  632,
        0,  632,    0,  630,  634,  640,  625,  627,  618,  618,
      618,  618,  618,  618,  621,  624,  635,  624,  621,  628,
      630,  634,  637,  628,  627,  632,  639,  632,  638,  630,
      634,  640,  643,  641,  635,  642,  644,  645,  639,    0,
      637,  646,  635,  647,  638,  649,    0,  634,  637,  651,
      652,  649,  639,  641,  638,  642,  648,  650,  643,  641,
      635,  642,  645,  644,  639,  648,  637,  653,  646,  650,

      638,  649,  647,  654,  655,  651,  652,  649,  656,  641,
      657,  642,  648,  650,  658,  659,  660,  661,  645,  644,
      662,  648,  657,  653,  646,  650,  664,  659,  647,  654,
      655,  678,  660,  679,  656,  680,  657,  663,  663,  679,
      658,  659,  660,  661,  664,    0,  662,    0,  657,    0,
        0,    0,  664,  659,    0,    0,  684,  678,  660,  679,
        0,  680,    0,  663,  663,  679,    0,  685,    0,  668,
      664,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  670,  684,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  685,  670,  670,  670,  670,  670,  670,

      672,    0,  672,  672,  672,  672,  672,  672,  672,  672,
      672,    0,    0,    0,    0,    0,    0,    0,  687,    0,
      670,  670,  670,  670,  670,  670,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  681,  681,  671,  671,  671,
      671,  671,  671,  674,  687,  674,  674,  674,  674,  674,
      674,  674,  674,  674,    0,    0,    0,    0,    0,    0,
        0,  681,  681,  671,  671,  671,  671,  671,  671,  673,
        0,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  683,  673,  673,  673,  673,  673,  673,  676,  683,
      676,  676,  676,  676,  676,  676,  676,  676,  676,    0,

        0,    0,    0,    0,    0,  693,    0,  683,  673,  673,
      673,  673,  673,  673,  675,  683,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  677,  675,  675,  675,
      675,  675,  675,  682,  686,  688,  689,  688,  690,  693,
      682,  691,  677,  694,  690,  689,    0,  691,  692,  692,
      686,    0,  677,  675,  675,  675,  675,  675,  675,  682,
      686,  688,  689,  688,  690,  693,  682,  691,  677,  694,
      690,  689,  695,  691,  692,  692,  686,  696,  697,  695,
      698,  699,  700,  701,  702,  703,  696,    0,    0,  708,
      708,    0,  711,  725,  709,  697,  704,  725,  695,  707,

      702,  709,  703,  696,  697,  695,  698,  699,  700,  701,
      702,  703,  696,  704,  707,  708,  708,  710,  711,  725,
      709,  697,  704,  725,    0,  707,  702,  709,  703,  710,
        0,  727,    0,    0,    0,    0,    0,    0,    0,  704,
      707,    0,  717,  710,  717,  717,  717,  717,  717,  717,
      717,  717,  717,    0,    0,  710,  716,  727,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  728,  716,
      716,  716,  716,  716,  716,  719,  732,  719,  719,  719,
      719,  719,  719,  719,  719,  719,    0,  733,    0,    0,
        0,    0,    0,    0,  728,  716,  716,  716,  716,  716,

      716,  718,  732,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  733,  718,  718,  718,  718,  718,  718,
      720,  737,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  720,  739,    0,    0,    0,    0,    0,    0,    0,
      718,  718,  718,  718,  718,  718,  722,  737,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  739,  722,
      722,  722,  722,  722,  722,  724,    0,  724,  724,  724,
      724,  724,  724,  724,  724,  724,    0,    0,    0,    0,
        0,    0,  726,    0,  726,  722,  722,  722,  722,  722,
      722,  723,  723,  723,  723,  723,  723,  723,  723,  723,

      729,  730,  723,  723,  723,  723,  723,  723,  726,  734,
      726,  736,  735,  738,  731,  735,  729,  730,  740,  738,
      736,  738,  744,    0,    0,  734,  729,  730,  723,  723,
      723,  723,  723,  723,  731,  734,  741,  736,  735,  738,
      731,  735,  729,  730,  740,  738,  736,  738,  742,  743,
      745,  734,  746,  741,  747,  747,  744,  761,  763,  748,
      731,  764,  741,  762,  764,  743,  745,  748,  742,    0,
      762,    0,    0,    0,  742,  743,  745,    0,  746,  741,
      747,  747,  744,  761,  763,  748,    0,  764,    0,  762,
      764,  743,  745,  748,  742,  752,  762,  752,  752,  752,

      752,  752,  752,  752,  752,  752,  752,  754,    0,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  769,
      754,  754,  754,  754,  754,  754,  756,    0,  756,  756,
      756,  756,  756,  756,  756,  756,  756,    0,    0,    0,
        0,    0,    0,    0,  774,  769,  754,  754,  754,  754,
      754,  754,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  767,  805,  755,  755,  755,  755,  755,  755,  758,
      774,  758,  758,  758,  758,  758,  758,  758,  758,  758,
        0,  767,    0,    0,    0,    0,    0,  767,  805,  755,
      755,  755,  755,  755,  755,  757,    0,  757,  757,  757,

      757,  757,  757,  757,  757,  757,  757,  767,  757,  757,
      757,  757,  757,  757,  760,  806,  760,  760,  760,  760,
      760,  760,  760,  760,  760,    0,  768,    0,    0,    0,
        0,    0,    0,    0,  757,  757,  757,  757,  757,  757,
      759,  806,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  770,  759,  759,  759,  759,  759,  759,  765,
      768,  765,  771,  772,  775,  773,  772,  773,    0,  770,
      775,  776,  776,  793,  777,  771,  777,  823,  770,  759,
      759,  759,  759,  759,  759,  765,  768,  765,  771,  772,
      775,  773,  772,  773,  778,  770,  775,  776,  776,    0,

      777,  771,  777,  823,    0,    0,  797,  793,  797,  784,
      778,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      778,  786,    0,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  797,  793,  797,    0,  778,  783,    0,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  824,
      783,  783,  783,  783,  783,  783,  787,  825,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  799,    0,
        0,    0,    0,    0,    0,  824,  783,  783,  783,  783,
      783,  783,  785,  825,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  799,  785,  785,  785,  785,  785,

      785,  791,  829,  791,  791,  791,  791,  791,  791,  791,
      791,  791,    0,    0,    0,    0,    0,    0,    0,    0,
      799,  785,  785,  785,  785,  785,  785,  789,  829,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  792,
      789,  789,  789,  789,  789,  789,    0,    0,    0,    0,
        0,    0,    0,    0,  815,  792,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  792,  789,  789,  789,  789,
      789,  789,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  792,  795,  790,  790,  790,  790,  790,  790,  794,
      796,    0,    0,  794,    0,    0,    0,  800,  795,    0,

      803,  820,  798,  803,  820,  801,  796,  832,  795,  790,
      790,  790,  790,  790,  790,  794,  796,  800,  798,  794,
      798,  801,  802,  800,  795,  804,  803,  820,  798,  803,
      820,  801,  796,  832,    0,    0,  849,  804,  802,    0,
      849,    0,    0,  800,  798,    0,  798,  801,  802,    0,
      811,  804,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  849,  804,  802,  813,  849,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  852,  813,  813,
      813,  813,  813,  813,  817,  822,  817,  817,  817,  817,
      817,  817,  817,  817,  817,    0,    0,    0,    0,    0,

        0,    0,  853,  852,  813,  813,  813,  813,  813,  813,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  822,
      854,  814,  814,  814,  814,  814,  814,  819,  853,  819,
      819,  819,  819,  819,  819,  819,  819,  819,    0,  821,
        0,    0,    0,    0,    0,  822,  854,  814,  814,  814,
      814,  814,  814,  816,  821,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  821,  816,  816,  816,  816,
      816,  816,    0,  857,    0,    0,    0,    0,    0,  841,
      821,  841,  841,  841,  841,  841,  841,  841,  841,  841,
        0,    0,  816,  816,  816,  816,  816,  816,  818,  857,

      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      826,  818,  818,  818,  818,  818,  818,  828,  827,  830,
      830,  830,  828,  830,  834,    0,  826,  827,  831,  833,
      831,    0,  834,    0,    0,    0,  826,  818,  818,  818,
      818,  818,  818,  828,  827,  876,  833,  850,  828,  830,
      834,  850,  826,  827,  831,  833,  831,  843,  834,  843,
      843,  843,  843,  843,  843,  843,  843,  843,    0,    0,
      878,  876,  833,  850,    0,  830,  840,  850,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  878,  840,
      840,  840,  840,  840,  840,  844,  878,  844,  844,  844,

      844,  844,  844,  844,  844,  844,  844,  881,    0,  859,
        0,    0,    0,    0,  878,  840,  840,  840,  840,  840,
      840,  842,    0,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  859,  881,  842,  842,  842,  842,  842,  842,
      848,    0,  848,  848,  848,  848,  848,  848,  848,  848,
      848,    0,    0,    0,    0,    0,    0,    0,  859,    0,
      842,  842,  842,  842,  842,  842,  846,  855,  846,  846,
      846,  846,  846,  846,  846,  846,  846,  846,  851,  846,
      846,  846,  846,  846,  846,  856,  858,  855,  860,  858,
      851,    0,    0,  855,  861,  882,  861,  851,  851,  889,

      877,  856,    0,  862,  851,  846,  846,  846,  846,  846,
      846,  856,  863,  855,  891,  858,  851,  877,  860,  862,
      861,  882,  861,  851,  851,  889,  877,  856,  863,  862,
        0,    0,    0,    0,    0,    0,    0,    0,  863,    0,
      891,  858,    0,  877,  860,  862,    0,    0,    0,    0,
      885,    0,    0,  869,  863,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  871,    0,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  879,  885,  871,  871,
      871,  871,  871,  871,  872,  906,  872,  872,  872,  872,
      872,  872,  872,  872,  872,    0,  879,    0,    0,    0,

        0,    0,  879,  885,  871,  871,  871,  871,  871,  871,
      873,  906,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  879,  873,  873,  873,  873,  873,  873,  874,
      884,  874,  874,  874,  874,  874,  874,  874,  874,  874,
      880,  883,  910,  883,  887,  886,  880,  888,  884,  873,
      873,  873,  873,  873,  873,  902,  884,  890,  880,    0,
      890,    0,    0,    0,    0,    0,  880,  883,  910,  883,
      886,  887,  880,  902,  884,  903,  888,    0,  903,    0,
        0,  902,    0,  890,  880,  897,  890,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  886,  887,    0,  902,

        0,  903,  888,  896,  903,  896,  896,  896,  896,  896,
      896,  896,  896,  896,    0,    0,  896,  896,  896,  896,
      896,  896,  898,  911,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  901,  904,  908,  912,  908,  913,
      904,  901,  896,  896,  896,  896,  896,  896,  905,  911,
        0,  924,    0,  925,    0,  914,  905,    0,  922,    0,
      901,  904,  908,  912,  908,  913,  904,  901,    0,    0,
      923,    0,  909,  909,  905,  909,  909,  909,  909,  909,
      909,  914,  905,  909,  922,  924,  923,  925,  928,  928,
      926,    0,    0,  909,  909,  919,  923,  919,  919,  919,

      919,  919,  919,  919,  919,  919,  926,    0,    0,  930,
      930,  924,  923,  925,  928,  928,  926,  929,  929,  936,
      929,  929,  929,  929,  929,  929,  930,  938,  929,  935,
      939,  939,  926,  938,  935,  930,  930,  936,  929,  929,
      940,  937,  941,    0,  944,  936,  937,  942,  942,  943,
        0,  944,  930,  938,  952,  935,  939,  939,  953,  938,
      935,  949,  949,  936,  942,  950,  940,  937,  941,  943,
      944,  950,  937,  942,  942,  943,  951,  944,  954,  955,
      952,  957,  951,  960,  953,  958,  964,  949,  949,  965,
      942,  950,  958,  959,  959,  943,  965,  950,  967,  967,

      966,  957,  951,  966,  954,  955,  968,  957,  951,  960,
      970,  958,  964,  971,  971,  965,  972,  973,  958,  959,
      959,  978,  965,  980,  967,  967,  966,  957,  978,  966,
      979,  979,  968,  981,  984,  983,  970,  973,  989,  971,
      971,  991,  972,  973,  988,  996,  988,  978,    0,  980,
        0,    0,    0,    0,  978,  983,  979,  979,    0,  981,
      984,  983,    0,  973,  989,    0,    0,  991,    0,    0,
      988,  996,  988,    0,    0,    0,    0,    0,    0,    0,
        0,  983, 1007, 1007, 1007, 1007, 1008, 1008, 1008, 1008,
     1009, 1009, 1009, 1009, 1010,    0, 1010, 1010, 1011, 1011,

     1011, 1011, 1012,    0, 1012, 1012, 1013, 1013, 1015, 1015,
     1016, 1016, 1017, 1017, 1018, 1018, 1019, 1019, 1020, 1020,
     1021, 1021, 1022, 1022, 1023, 1023, 1024, 1024, 1025,    0,
     1025, 1025, 1026, 1026, 1027, 1027, 1028, 1028, 1029, 1029,
     1030, 1030, 1031, 1031, 1032, 1032, 1033, 1033, 1034, 1034,
     1035, 1035, 1036, 1036, 1037, 1037, 1038, 1038, 1039, 1039,
     1040, 1040, 1041, 1041, 1042, 1042, 1043, 1043, 1044, 1044,
     1045, 1045, 1046, 1046, 1047, 1047, 1048, 1048, 1049, 1049,
     1050, 1050, 1051, 1051, 1053, 1053, 1054, 1054, 1055, 1055,
     1057, 1057, 1058, 1058, 1059, 1059, 1062, 1062, 1063, 1063,

     1064, 1064, 1066,    0, 1066, 1066, 1067,    0, 1067, 1067,
     1068, 1068, 1069, 1069, 1072,    0, 1072, 1072, 1073,    0,
     1073, 1073, 1074, 1074, 1075, 1075, 1076, 1076, 1077, 1077,
     1078, 1078, 1080, 1080, 1081, 1081, 1082, 1082, 1083, 1083,
     1084, 1084, 1086, 1086, 1087, 1087, 1088, 1088, 1090, 1090,
     1092, 1092, 1093, 1093, 1094, 1094, 1096, 1096, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,

     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[125] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
    0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 2114 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 2219 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1007 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5859 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 59 "SrvLexer.l"
{ return SrvParser::LOGCOLORS_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 61 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 64 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 69 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::ACCEPT_UNKNOWN_FQDN_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::FQDN_DDNS_ADDRESS_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::DDNS_PROTOCOL_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::DDNS_TIMEOUT_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 108 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::REMOTE_AUTOCONF_NEIGHBORS_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::AFTR_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::BULKLQ_ACCEPT_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::BULKLQ_TCPPORT_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::BULKLQ_MAX_CONNS_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ return SrvParser::BULKLQ_TIMEOUT_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 122 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 125 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 126 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 130 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 131 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 134 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 135 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 136 "SrvLexer.l"
{ return SrvParser::KEY_; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 137 "SrvLexer.l"
{ return SrvParser::SECRET_; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 138 "SrvLexer.l"
{ return SrvParser::ALGORITHM_; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 139 "SrvLexer.l"
{ return SrvParser::CLIENT_CLASS_; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 140 "SrvLexer.l"
{ return SrvParser::MATCH_IF_; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 141 "SrvLexer.l"
{ return SrvParser::EQ_; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 142 "SrvLexer.l"
{ return SrvParser::AND_; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 143 "SrvLexer.l"
{ return SrvParser::OR_; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 144 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 145 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_DATA_; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 146 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_EN_; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 147 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_DATA_; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 148 "SrvLexer.l"
{ return SrvParser::ALLOW_; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 149 "SrvLexer.l"
{ return SrvParser::DENY_; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 150 "SrvLexer.l"
{ return SrvParser::SUBSTRING_; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 151 "SrvLexer.l"
{ return SrvParser::CONTAIN_; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 152 "SrvLexer.l"
{ return SrvParser::STRING_KEYWORD_; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 153 "SrvLexer.l"
{ return SrvParser::ADDRESS_LIST_; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 156 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 157 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 158 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 159 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 161 "SrvLexer.l"
;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 163 "SrvLexer.l"
;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 165 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 170 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 171 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 172 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 110:
YY_RULE_SETUP
#line 179 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 188 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 197 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 206 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 215 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 224 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 233 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 245 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 252 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
	 ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
	 ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 273 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
	yytext[1]='0'; //if odd then no-meaning zero at the beginning
	len = strlen(yytext)-1;
	ptr = yytext+1;
    } else {
	len = strlen(yytext)-2;
	ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
	yylval.duidval.duid[i>>1]<<=4;
	if (!isxdigit(ptr[i])) {
	     Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
	     YYABORT;
	}
	if (isalpha(ptr[i])) {
	    yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
	} else {
	    yylval.duidval.duid[i>>1]|=ptr[i]-'0';
	}
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 305 "SrvLexer.l"
{
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   // Log(Crit) << "#### Detected [" << yytext << "] as DUID [len=" << len << "]" << LogEnd;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
	x = (toupper(*pos)-'A' + 10);
      else
	x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))
	x += (toupper(*(pos+1))-'A' + 10);
      else
	x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }

   return SrvParser::DUID_;
}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 333 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd;
      YYABORT;
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 343 "SrvLexer.l"
{
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) {
	Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd;
	YYABORT;
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 352 "SrvLexer.l"
{ return yytext[0]; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 355 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 3093 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1007 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1007 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1006);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 355 "SrvLexer.l"



