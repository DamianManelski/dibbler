#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 88
#define YY_END_OF_BUFFER 89
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[729] =
    {   0,
        1,    1,    0,    0,    0,    0,   89,   87,    2,    1,
        1,   87,   70,   87,   87,   86,   86,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   74,   74,
       88,    1,    1,    1,    0,   82,   70,    0,   82,   72,
       71,   86,    0,    0,   85,    0,   79,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   67,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   16,
       17,   83,   83,   83,   83,   83,   83,   83,   83,   73,

       71,   86,    0,    0,   78,   84,   77,   77,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   66,   86,
        0,    0,    0,   76,   76,    0,   77,    0,   77,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   29,
       83,   83,   40,   83,   83,   83,   83,   83,   83,    0,
       83,   83,   83,   83,   83,   83,   22,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   68,   83,   83,

       83,   83,   86,    0,    0,    0,    0,   76,    0,   76,
        0,   77,   77,   77,   77,   83,   83,   83,   83,   83,
       83,    4,   83,   83,   83,   83,   83,   69,   83,    3,
       83,   83,   83,   83,   83,   83,    0,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,    7,   83,   23,
       83,   83,   83,   83,   83,   83,   83,   83,   83,    0,
        0,    0,    0,   76,   76,   76,   76,    0,   77,   77,
       77,    0,   77,   83,   83,   83,   83,   83,   83,   83,
       83,   28,   83,   83,   35,   83,   83,   83,   83,   83,
       83,   83,   83,   83,    0,    0,   83,   83,   83,   33,

       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,    0,    0,    0,   76,
       76,   76,    0,   76,    0,    0,   77,   77,   77,   77,
       83,   83,   31,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
        0,    0,   83,   83,   83,   83,   83,   49,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   20,   83,   83,
       83,    0,    0,    0,    0,    0,   76,   76,   76,   76,
        0,   77,   77,   77,    0,   77,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,

       83,   83,   83,   83,   45,   83,   12,   10,    0,    0,
       83,   83,   83,   47,   83,   83,   83,   83,   83,   83,
       83,   83,   83,    5,   83,   83,   83,   13,    0,    0,
        0,   76,   76,   76,    0,   76,   81,   77,   77,   77,
       77,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   11,
        0,    0,   83,   83,   83,   48,   83,   83,   83,   83,
       30,   83,   83,    6,   37,   83,   83,    0,    0,    0,
       80,   76,   76,   76,   76,   77,   77,   77,    0,   77,
       83,   83,   83,   83,   83,   83,   46,   83,   83,   83,

       83,   83,   34,   83,   32,   83,   83,   83,    0,    0,
       42,   41,   36,   83,   21,   83,   83,   39,   38,   83,
       83,    0,    0,   76,   76,   76,    0,   76,   77,   77,
       77,   77,   83,   14,   51,   83,   83,   55,   83,   83,
       83,   58,   83,   83,   83,   83,   83,   44,   43,   83,
       83,   83,   83,   50,    0,    0,    0,   76,   76,   76,
       76,   77,   77,   77,    0,   77,   83,   57,   83,   83,
       83,   83,   59,   52,   83,   83,    8,   83,   24,   83,
       83,    0,    0,   76,   76,   76,    0,   76,   77,   77,
       77,   77,   83,   56,   83,   83,   83,   83,   83,   53,

       83,   83,   83,   83,    0,    0,    0,   76,   76,   76,
       76,   77,   77,   77,    0,   77,   83,   83,   83,   83,
       83,   83,   83,   83,   15,   19,    0,   75,   78,   76,
       76,   76,    0,   76,   77,   77,   77,   77,   83,   26,
       83,   60,   83,   25,   83,   83,    0,   75,    0,   76,
       76,   76,   76,   76,   77,   77,   77,    0,   77,   83,
       27,   61,   83,   83,   83,   83,   83,   75,   78,   76,
        0,   76,   76,   76,   76,   77,   77,   77,   54,   83,
       83,   83,   83,   83,   18,   75,   76,   76,   76,   76,
       77,   77,   77,   62,   63,   64,   65,    9,   76,   76,

        0,   76,   76,   77,   76,   76,   77,   76,   76,    0,
       76,   76,   76,   76,    0,   76,   76,   76,   76,    0,
       76,   76,   76,   76,    0,   76,   76,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
        1,    1,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,    1,    1,    1,    1,    1,   49,   24,   50,   51,

       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[74] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        4,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    6,    7,    7,    7,    7,    7,    7,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    7,    7,
        7,    7,    7,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[796] =
    {   0,
        0,    0, 2065, 2010,    0,    0, 2017, 4020, 4020,   71,
       73, 2009,    0, 2006,   70,   70,   33, 1990,  129,  185,
       78,   72,   34,  193,   92, 1989,  192,  196,  217,  154,
      204,  109,  234,  260,   77,  141,  209,  143, 4020, 1963,
     4020,  103,  107,  114, 1967, 4020,    0, 1963, 1962, 4020,
        0,  313, 1946,  331, 4020,    0,  356, 1945,  397,  137,
      140, 1909,  152,  146,  239,  238,  202,  250,  255,  256,
      188,  199,  271,  258,  336,  333,  338,  378, 1908,  366,
      275,  163,  365,  374,  413,  406,  408,  414,  410, 1907,
     1906,  167,  420,  415,  265,  434,  417,  421,  423, 4020,

        0,  481,  499, 1904,  524,    0,  567,  542,  608,  272,
      414,  499,  430,  469,  440,  544,  241,  581,  546,  585,
      621,  577,  622,  589,  620,  588,  619,  292,  296,  293,
      625,  630,  631,  626,  644,  645,  627,  647,  651,  298,
      652,  660,  656,  674,  670,  655,  676,  681, 1903,  727,
      715, 1902, 1859,  772,  745,  754,  815,  856,  790,  897,
      661,  792,  459,  685,  837,  791,  863,  878,  682, 1858,
      823,  834, 1843,  904,  835,  909,  912,  911,  905, 1854,
      916,  913,  906,  937,  910,  936, 1826,  933,  958,  947,
      914,  941,  965,  969,  966,  967,  460, 1750,  980,  968,

      977,  462, 1733, 1644, 1642, 1641,  876, 1029, 1070, 1047,
     1088, 1113, 1131, 1156, 1174, 1640, 1050,  978,  993, 1164,
      465,  557, 1174, 1178,  984, 1179,  982, 1639,  695,  696,
     1180, 1047, 1181,  985, 1182, 1203, 1187, 1192, 1091, 1205,
     1195, 1211, 1213, 1221, 1199,  836, 1188, 1638, 1220, 1637,
     1224, 1240, 1229, 1246,  908, 1237,  838, 1226, 1249, 1636,
     1603, 1602, 1291, 1302, 1320, 1345, 1363, 1140,  164, 1600,
     1388, 1429, 1406, 1011, 1326, 1248, 1366, 1429, 1406, 1442,
     1437, 1255, 1263, 1444, 1599, 1439, 1440, 1441, 1443, 1445,
     1451, 1447, 1466, 1455,  968, 1249, 1467, 1473, 1474, 1596,

     1481, 1476, 1484, 1497, 1482, 1271, 1272, 1488, 1504, 1498,
     1499, 1509, 1511, 1507, 1274, 1506, 1595, 1552, 1566,  587,
     1550, 1577, 1618, 1595, 1636, 1661, 1672, 1690, 1715, 1733,
     1723, 1512, 1537, 1601, 1514, 1598, 1533, 1739, 1734, 1741,
     1736, 1748, 1737, 1761, 1751, 1764, 1754, 1765, 1768, 1771,
     1297, 1495, 1785, 1769, 1775, 1787, 1779, 1532, 1789, 1790,
     1804, 1800, 1810, 1813, 1796, 1802, 1794, 1471, 1814, 1817,
     1662, 1449, 1448, 1414, 1858, 1873, 1884, 1902, 1927, 1945,
     1699, 1103, 1413, 1970, 2011, 1988, 1905, 2011, 1951, 1277,
     1988, 2019, 1994, 2022, 2028, 1825, 2021, 2023, 2026, 2030,

     2033, 2024, 1535, 2049, 1412, 2047, 1410, 1409,  200, 1507,
     2034, 2053, 2065, 1408, 2064, 1546, 2063, 2067, 2074, 2077,
     2076, 2082, 2075, 1407, 2088, 2090, 2092, 1370, 1369, 1368,
     2131, 1268, 1365, 2145, 2186, 2163, 2172, 2229, 2204, 2272,
     2247, 2210, 2250, 2279, 2281, 2284, 2280, 2102, 1548, 2282,
     2285, 2283, 2288, 1874, 2290, 2291, 1551, 2294, 1553, 1364,
     1810, 1815, 2305, 2298, 2308, 1363, 2311, 2309, 2324, 2325,
     1328, 2313, 2328, 1325, 1324, 2333, 2340, 1323, 1322, 1321,
     2381, 2392, 2410, 2435, 2453, 1378, 1320, 2478, 2519, 2496,
     2500, 2418, 2526, 2456, 2527, 2353, 1276, 2330, 1597, 2501,

     2498, 2530, 1275, 2531, 1258, 2540, 2538, 2533, 2018, 2060,
     1228, 1196, 1146, 2534, 1094, 2551, 2554, 1093, 1090, 2535,
     2562, 1089, 1088, 1960, 1055, 2602, 2643, 2620, 2686, 2661,
     2729, 2704, 2621, 1054, 1052, 2705, 2736, 1051, 2664, 2738,
     1839, 1049, 2737, 2740, 2741, 2537, 2739, 4020, 4020, 2557,
     2623, 2747, 2745, 1048, 1010, 1009, 1006, 2798, 2816, 2841,
     2859, 2100, 1005, 2884, 2925, 2902, 2764, 1003, 2748, 2822,
     2862, 2925, 1002, 1001, 2905, 2903, 1841, 2904, 1000, 2937,
     2742,  953,  952, 2109,  880, 2994, 3035, 2979, 3078, 3012,
     3121, 3053, 3014,  879, 2940, 2935, 3057, 2186, 3085,  877,

     3053, 3091, 3128, 3013,  876,  833,  831, 3184, 3103, 3227,
     3146, 2115,  829, 3270, 3311, 3164, 3164, 3165, 3191,  108,
     3166, 3204, 3174, 3243,  827,  798,  796,  795,    0, 2131,
      794, 3354, 3395, 3289, 3438, 3329, 3481, 3372, 3293,  793,
     3289,  790,  375,  762, 3333, 3133,  759,  703,  701,  699,
     3524, 3413, 3567, 3456, 2347,  629, 3610,    0, 3499, 3378,
      584,  583,  832,  291,  586, 3416, 3459,  580, 4020,  579,
        0, 2354,  548, 3653, 3542, 3696, 3585,    0,  547,  107,
      334,  166,  700, 3377,  543,  542,  524,  506, 3739, 3628,
     2360,  505,    0,  504,  503,  502,  501,  500,  468,  466,

        0, 3671, 4020,    0,  452,  451, 4020,  449,  412,    0,
      377,  376,  373,  372,    0,  335,  332,  300,  282,    0,
      207,  147,  145,  117,    0,   80,   59, 4020, 3792, 3799,
     3806, 3813, 3820, 3825, 3832, 3835, 3838, 3841, 3844, 3847,
     3850, 3853, 3856, 3859, 3863, 3865, 3868, 3872, 3874, 3877,
     3880, 3883, 3886, 3889, 3892, 3895, 3898, 3901, 3904, 3907,
     3910, 3913, 3916, 3919, 3922, 3925, 3928, 3931, 3934, 3937,
     3940, 3943, 3946, 3949, 3952, 3955, 3958, 3961, 3964, 3967,
     3970, 3973, 3976, 3979, 3982, 3985, 3988, 3991, 3994, 3997,
     4000, 4003, 4006, 4009, 4012

    } ;

static yyconst flex_int16_t yy_def[796] =
    {   0,
      728,    1,  729,  729,  730,  730,  728,  728,  728,  728,
      728,  731,  732,  733,  728,  728,   16,  728,  734,  734,
       20,   20,   20,   20,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  728,  728,
      728,  728,  728,  728,  731,  728,  732,  733,  728,  728,
      735,  728,  736,   52,  728,  737,  728,  734,   20,   59,
       59,  734,  734,   59,  734,  734,  734,  734,  734,  734,
       59,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  728,

      735,  728,  102,  738,  728,  737,  728,  107,   59,  109,
      109,  734,  109,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  728,
      150,  739,  740,  728,  154,  728,  728,  728,  157,  109,
      160,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  728,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,

      734,  734,  150,  151,  741,  742,  728,  728,  728,  208,
      728,  728,  212,  728,  214,  160,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  728,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  728,
      743,  744,  728,  728,  264,  728,  266,  728,  745,  728,
      728,  728,  271,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  728,  728,  734,  734,  734,  734,

      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  746,  747,  728,  748,
      728,  728,  728,  322,  728,  728,  728,  327,  728,  329,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      728,  728,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  728,  749,  750,  728,  728,  728,  377,  728,  379,
      728,  745,  728,  728,  728,  384,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,

      734,  734,  734,  734,  734,  734,  734,  734,  728,  728,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  751,  752,
      728,  748,  728,  728,  728,  434,  728,  728,  438,  728,
      440,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      728,  728,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  728,  753,  754,
      728,  728,  482,  728,  484,  745,  728,  728,  728,  488,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,

      734,  734,  734,  734,  734,  734,  734,  734,  728,  728,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  755,  756,  748,  728,  728,  728,  526,  728,  529,
      728,  531,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  728,  728,  734,
      734,  734,  734,  734,  728,  757,  758,  728,  558,  728,
      560,  745,  728,  728,  728,  564,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  759,  760,  748,  728,  728,  728,  586,  728,  589,
      728,  591,  734,  734,  734,  734,  734,  734,  734,  734,

      734,  734,  734,  734,  728,  761,  762,  728,  608,  728,
      610,  745,  728,  728,  728,  614,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  763,  764,  765,  748,
      728,  728,  728,  632,  728,  635,  728,  637,  734,  734,
      734,  734,  734,  734,  734,  734,  728,  766,  728,  767,
      728,  651,  728,  653,  745,  728,  728,  768,  657,  734,
      734,  734,  734,  734,  734,  734,  734,  769,  728,  770,
      771,  748,  728,  728,  674,  728,  676,  772,  734,  734,
      734,  734,  734,  734,  734,  728,  773,  774,  728,  689,
      745,  728,  775,  734,  734,  734,  734,  734,  728,  776,

      777,  728,  728,  778,  779,  780,  728,  728,  781,  782,
      783,  784,  728,  785,  786,  787,  788,  728,  789,  790,
      791,  792,  728,  793,  794,  795,  728,    0,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728

    } ;

static yyconst flex_int16_t yy_nxt[4094] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   26,   26,   28,   26,   29,   30,   31,   26,   32,
       33,   34,   35,   36,   37,   26,   38,   26,   19,   21,
       22,   23,   24,   25,   26,   27,   26,   26,   28,   26,
       29,   30,   31,   26,   32,   33,   34,   35,   36,   37,
       26,   38,   26,   42,   43,   44,   43,   50,  728,   70,
      725,   51,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   53,   54,   54,   54,   54,   54,   54,  728,   55,

       64,  725,   66,  728,   70,   42,   43,   67,   68,   44,
       43,   65,   95,  728,   69,   56,   42,   43,   54,   54,
       54,   54,   54,  694,   55,  642,   64,   66,  728,  728,
      728,   85,   67,   68,   73,   86,   65,   95,  725,   69,
       56,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       53,   59,   59,   60,   61,   59,   59,   85,   62,   73,
       86,  110,  728,   96,  728,  111,  720,   97,  725,   99,
      113,   63,  132,  728,  156,  728,  142,   59,   60,   61,
       59,   59,  696,   62,  728,  158,  110,  728,  728,   96,
      111,   81,   97,  112,   99,  113,   63,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   53,   59,   59,   59,
       59,   59,   59,  728,   62,   71,   81,  728,  112,   74,
      728,  121,  461,  728,  122,  728,   76,   75,  720,   82,
      728,   72,   77,   59,   59,   59,   59,   59,  728,   62,
       83,   71,  117,   84,   74,   98,  121,   78,  461,  122,
      168,   76,   75,   79,   82,  728,   72,   77,   80,  728,
      728,  114,  728,   87,   88,   83,  116,  117,   84,  115,
       98,  728,   78,   90,   91,   89,  728,  728,   79,  728,
      124,  728,   92,   80,  118,  119,  728,  114,   87,   88,
       93,  116,  728,  120,  115,  145,  728,  123,  161,   94,

       89,  179,  182,  720,  180,  181,  124,  194,   92,  118,
      119,  682,  728,  728,  728,   93,  131,  728,  120,  728,
      145,  715,  123,  161,   94,  102,  102,  102,  102,  102,
      102,  102,  102,  102,   53,  103,  103,  103,  103,  103,
      103,  131,   55,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  695,  720,  728,  728,  715,  728,  125,  728,
      127,  103,  103,  103,  103,  103,  128,   55,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  126,  108,  108,
      108,  108,  108,  108,  125,  127,  728,  728,  662,  663,
      664,  128,  665,  715,  710,  728,  728,  715,  710,  728,

      134,  133,  126,  130,  108,  108,  108,  108,  108,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  129,  109,
      109,  109,  109,  109,  109,  134,  133,  728,  130,  728,
      139,  728,  141,  710,  728,  728,  728,  136,  728,  137,
      138,  728,  728,  129,  728,  109,  109,  109,  109,  109,
      135,  140,  147,  162,  143,  728,  139,  144,  141,  164,
      148,  728,  136,  149,  137,  138,  166,  146,  220,  255,
      701,  259,  710,  701,  280,  135,  140,  147,  162,  143,
      728,  728,  144,  728,  164,  148,  728,  701,  149,  671,
      728,  166,  146,  150,  150,  150,  150,  150,  150,  150,

      150,  150,   53,  151,  151,  151,  151,  151,  151,  165,
       55,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      728,  728,  728,  728,  728,  728,  658,  701,  163,  151,
      151,  151,  151,  151,  165,   55,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  671,  155,  155,  155,  155,
      155,  155,  728,  163,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  649,  728,  728,  281,  728,  728,  633,
      167,  170,  155,  155,  155,  155,  155,  156,  728,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  158,  159,
      159,  159,  159,  159,  159,  167,  170,  207,  728,  683,

      671,  649,  728,  169,  728,  728,  728,  728,  209,  728,
      728,  171,  173,  175,  177,  159,  159,  159,  159,  159,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  169,
      160,  160,  160,  160,  160,  160,  171,  173,  175,  177,
      728,  728,  728,  728,  176,  178,  728,  728,  728,  191,
      615,  728,  728,  188,  184,  183,  160,  160,  160,  160,
      160,  172,  174,  185,  187,  728,  728,  186,  728,  176,
      178,  190,  728,  728,  189,  191,  728,  728,  188,  184,
      183,  728,  197,  192,  196,  200,  172,  174,  185,  187,
      193,  728,  186,  195,  199,  728,  190,  728,  217,  189,

      198,  201,  728,  728,  287,  288,  728,  197,  192,  196,
      200,  221,  226,  202,  697,  193,  728,  728,  195,  199,
      671,  728,  669,  217,  649,  198,  201,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  221,  226,  202,  203,
      203,  203,  203,  203,  203,  203,  203,  203,   53,  204,
      204,  204,  204,  204,  204,  728,   55,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  204,  204,  204,  204,  204,
      607,   55,  207,  728,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  209,  210,  210,  210,  210,  210,  210,

      728,  218,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  728,  728,  728,  728,  587,  649,  607,  219,  728,
      210,  210,  210,  210,  210,  156,  223,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  158,  213,  213,  213,
      213,  213,  213,  219,  728,  305,  680,  314,  728,  681,
      565,  223,  629,  728,  607,  728,  728,  728,  728,  728,
      228,  230,  227,  213,  213,  213,  213,  213,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  222,  215,  215,
      215,  215,  215,  215,  728,  228,  230,  227,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  557,  728,  728,

      728,  527,  222,  224,  215,  215,  215,  215,  215,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  225,  216,
      216,  216,  216,  216,  216,  728,  728,  728,  224,  728,
      728,  728,  728,  728,  728,  728,  243,  728,  234,  235,
      236,  238,  241,  225,  229,  216,  216,  216,  216,  216,
      231,  232,  233,  240,  728,  312,  239,  728,  728,  245,
      248,  243,  728,  234,  235,  236,  238,  241,  728,  229,
      242,  247,  244,  607,  557,  231,  232,  233,  240,  728,
      312,  239,  249,  246,  245,  248,  728,  728,  728,  728,
      728,  250,  253,  257,  251,  242,  247,  244,  728,  728,

      254,  728,  256,  728,  351,  728,  728,  249,  246,  252,
      284,  292,  286,  258,  728,  275,  250,  253,  257,  251,
      331,  728,  728,  728,  728,  254,  489,  105,  256,  351,
      557,  480,  728,  276,  252,  284,  292,  286,  258,  207,
      275,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      209,  265,  265,  265,  265,  265,  265,  728,  276,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  728,  728,
      728,  728,  728,  728,  290,  728,  435,  265,  265,  265,
      265,  265,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  274,  267,  267,  267,  267,  267,  267,  268,  290,

      211,  211,  211,  211,  211,  211,  211,  211,  211,  557,
      480,  728,  728,  156,  728,  728,  274,  298,  267,  267,
      267,  267,  267,  156,  272,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  158,  270,  270,  270,  270,  270,
      270,  728,  298,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  270,  270,  270,  270,  270,  156,  728,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  272,  273,  273,
      273,  273,  273,  273,  728,  728,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  728,  277,  278,  279,  728,

      728,  728,  728,  728,  273,  273,  273,  273,  273,  728,
      289,  291,  295,  728,  285,  282,  728,  728,  293,  283,
      728,  277,  278,  279,  728,  294,  728,  296,  297,  306,
      300,  299,  728,  301,  728,  289,  291,  295,  304,  285,
      282,  728,  728,  293,  283,  728,  307,  728,  302,  728,
      728,  294,  296,  297,  306,  300,  299,  303,  728,  301,
      308,  728,  310,  304,  339,  315,  309,  728,  311,  728,
      728,  307,  340,  302,  316,  352,  728,  313,  207,  728,
      361,  362,  303,  370,  728,  308,  445,  310,  333,  323,
      315,  309,  728,  728,  311,  728,  728,  728,  728,  316,

      352,  319,  313,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  207,  333,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  209,  321,  321,  321,  321,  321,  321,
      728,  409,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  385,  105,  480,  374,  728,  728,  728,  332,  728,
      321,  321,  321,  321,  321,  207,  409,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  323,  324,  324,  324,
      324,  324,  324,  728,  332,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  728,  728,  323,  728,  156,  480,
      374,  728,  334,  324,  324,  324,  324,  324,  156,  385,

      327,  327,  327,  327,  327,  327,  327,  327,  327,  272,
      328,  328,  328,  328,  328,  328,  728,  334,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  728,  728,  728,
      728,  728,  336,  728,  272,  105,  328,  328,  328,  328,
      328,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      728,  330,  330,  330,  330,  330,  330,  336,  728,  335,
      728,  728,  728,  728,  728,  728,  728,  346,  728,  374,
      262,  338,  728,  342,  343,  344,  728,  330,  330,  330,
      330,  330,  337,  341,  335,  347,  345,  728,  728,  350,
      348,  349,  728,  346,  728,  728,  338,  728,  342,  343,

      344,  353,  728,  728,  357,  728,  360,  337,  341,  728,
      347,  345,  354,  355,  350,  348,  349,  358,  728,  728,
      728,  356,  363,  359,  365,  728,  353,  728,  728,  357,
      728,  360,  728,  728,  410,  728,  371,  354,  355,  366,
      369,  391,  358,  364,  458,  367,  356,  363,  359,  365,
      462,  389,  368,  728,  728,  467,  728,  498,  728,  410,
      506,  371,  508,  393,  366,  369,  391,  728,  364,  728,
      367,  209,  728,  374,  728,  462,  389,  368,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  207,  393,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  323,  378,

      378,  378,  378,  378,  378,  728,  540,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  262,  728,  728,  728,
      728,  158,  728,  105,  262,  378,  378,  378,  378,  378,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  392,
      380,  380,  380,  380,  380,  380,  381,  390,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  153,  728,  728,
      728,  728,  262,  153,  392,  728,  380,  380,  380,  380,
      380,  156,  390,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  156,  728,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  272,  383,  383,  383,  383,  383,  383,

      728,  428,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      383,  383,  383,  383,  383,  156,  428,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  385,  386,  386,  386,
      386,  386,  386,  728,  728,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  728,  728,  387,  728,  728,  388,
      728,  394,  728,  386,  386,  386,  386,  386,  395,  728,
      396,  728,  728,  401,  400,  728,  397,  403,  398,  399,
      405,  387,  728,  402,  388,  728,  728,  394,  404,  728,
      728,  406,  728,  395,  407,  396,  728,  408,  401,  400,

      728,  397,  403,  398,  399,  405,  728,  411,  728,  402,
      728,  728,  412,  404,  416,  728,  406,  728,  413,  407,
      415,  728,  408,  728,  417,  728,  418,  414,  419,  425,
      420,  728,  421,  411,  728,  728,  423,  412,  728,  416,
      509,  510,  424,  413,  426,  415,  728,  728,  572,  417,
      601,  418,  414,  419,  425,  420,  422,  427,  421,  451,
      728,  423,  728,  237,  728,  509,  510,  424,  431,  426,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  728,
      105,  422,  427,  207,  451,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  207,  728,  432,  432,  432,  432,

      432,  432,  432,  432,  432,  323,  433,  433,  433,  433,
      433,  433,  728,  503,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  153,  728,  153,  728,  728,  728,  728,
      728,  442,  433,  433,  433,  433,  433,  207,  503,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  435,  436,
      436,  436,  436,  436,  436,  728,  442,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  728,  105,   48,   49,
      207,   46,  728,  444,  100,  436,  436,  436,  436,  436,
      156,  435,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  385,  439,  439,  439,  439,  439,  439,  728,  444,

      439,  439,  439,  439,  439,  439,  439,  439,  439,  728,
      728,   57,   49,   46,  446,  728,  728,   40,  439,  439,
      439,  439,  439,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  728,  441,  441,  441,  441,  441,  441,  446,
      728,  448,  728,  728,  728,  728,  443,  728,  447,  728,
      450,  728,  454,  548,  728,  728,  453,  452,  456,  441,
      441,  441,  441,  441,  463,  455,  448,  449,  728,  457,
      728,  443,   40,  447,  728,  459,  450,  454,  548,  464,
      460,  453,  452,  456,  728,  728,  728,  468,  728,  463,
      455,  465,  449,  466,  457,  728,  728,  728,  728,  549,

      459,  469,  471,  728,  464,  460,  472,  470,  473,  728,
      156,  728,  468,  728,  475,  474,  465,  476,  466,  207,
      728,  489,  728,  728,  549,  156,  469,  471,  497,  477,
      527,  472,  470,  473,  728,  728,  565,  728,  728,  475,
      474,  207,  476,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  587,  497,  477,  207,  728,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  435,  483,  483,  483,
      483,  483,  483,  728,  728,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  483,  483,  483,  483,  483,  484,  484,

      484,  484,  484,  484,  484,  484,  484,  728,  485,  485,
      485,  485,  485,  485,  728,  621,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  728,  728,  728,  728,  728,
      728,  728,  491,  728,  485,  485,  485,  485,  485,  156,
      621,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      385,  487,  487,  487,  487,  487,  487,  728,  491,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  487,  487,  487,
      487,  487,  156,  492,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  489,  490,  490,  490,  490,  490,  490,

      728,  728,  728,  728,  728,  728,  728,  500,  492,  728,
      502,  728,  728,  493,  494,  728,  496,  505,  501,  728,
      490,  490,  490,  490,  490,  495,  728,  499,  507,  728,
      728,  504,  728,  500,  728,  515,  502,  512,  493,  494,
      511,  496,  505,  501,  514,  728,  728,  513,  518,  728,
      495,  728,  499,  507,  728,  517,  504,  156,  516,  520,
      515,  728,  512,  539,  207,  511,  521,  519,  615,  514,
      156,  728,  513,  518,  728,  633,  728,  728,  538,  728,
      517,  658,  728,  516,  520,  728,  728,  728,  539,  728,
      728,  521,  519,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  207,  538,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  435,  525,  525,  525,  525,  525,  525,
      728,  728,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      525,  525,  525,  525,  525,  207,  728,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  527,  528,  528,  528,
      528,  528,  528,  728,  534,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  728,  728,  728,  728,  728,  728,
      728,  728,  536,  528,  528,  528,  528,  528,  156,  534,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  489,

      530,  530,  530,  530,  530,  530,  728,  536,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  728,  728,  728,
      728,  728,  728,  728,  542,  541,  530,  530,  530,  530,
      530,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      533,  532,  532,  532,  532,  532,  532,  728,  728,  542,
      541,  728,  728,  544,  728,  728,  728,  537,  728,  728,
      543,  728,  576,  547,  550,  533,  535,  532,  532,  532,
      532,  532,  728,  545,  546,  728,  553,  728,  728,  544,
      552,  551,  537,  728,  578,  543,  554,  576,  547,  550,
      728,  535,  728,  728,  728,  728,  728,  728,  545,  546,

      728,  553,  728,  728,  728,  552,  551,  728,  728,  578,
      728,  554,  207,  728,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  527,  559,  559,  559,  559,  559,  559,
      728,  728,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  728,  728,  728,  728,  728,  728,  567,  728,  728,
      559,  559,  559,  559,  559,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  579,  561,  561,  561,  561,  561,
      561,  728,  567,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  728,  728,  728,  728,  728,  728,  728,  579,
      570,  561,  561,  561,  561,  561,  156,  728,  562,  562,

      562,  562,  562,  562,  562,  562,  562,  489,  563,  563,
      563,  563,  563,  563,  728,  570,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  563,  563,  563,  563,  563,  156,
      568,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      565,  566,  566,  566,  566,  566,  566,  728,  728,  728,
      728,  728,  728,  728,  577,  568,  728,  575,  728,  728,
      569,  571,  573,  574,  594,  581,  604,  566,  566,  566,
      566,  566,  580,  728,  728,  728,  728,  728,  728,  577,
      728,  728,  575,  728,  728,  569,  571,  573,  574,  594,

      581,  604,  593,  728,  728,  728,  728,  580,  207,  728,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  527,
      585,  585,  585,  585,  585,  585,  728,  593,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  728,  728,  728,
      728,  728,  728,  728,  595,  728,  585,  585,  585,  585,
      585,  207,  728,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  587,  588,  588,  588,  588,  588,  588,  728,
      595,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      728,  728,  728,  728,  728,  728,  728,  728,  596,  588,
      588,  588,  588,  588,  156,  728,  589,  589,  589,  589,

      589,  589,  589,  589,  589,  565,  590,  590,  590,  590,
      590,  590,  728,  596,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  728,  728,  728,  728,  599,  728,  600,
      602,  728,  590,  590,  590,  590,  590,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  728,  592,  592,  592,
      592,  592,  592,  599,  600,  602,  728,  619,  728,  597,
      728,  728,  728,  728,  728,  598,  728,  728,  728,  728,
      728,  728,  728,  592,  592,  592,  592,  592,  603,  728,
      618,  728,  728,  619,  597,  728,  728,  728,  728,  728,
      598,  609,  609,  609,  609,  609,  609,  609,  609,  609,

      728,  728,  728,  603,  207,  618,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  587,  609,  609,  609,  609,
      609,  609,  728,  728,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  728,  728,  728,  728,  728,  728,  626,
      728,  728,  609,  609,  609,  609,  609,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  617,  611,  611,  611,
      611,  611,  611,  728,  626,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  728,  728,  728,  728,  728,  728,
      728,  617,  620,  611,  611,  611,  611,  611,  156,  623,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  565,

      613,  613,  613,  613,  613,  613,  728,  620,  728,  728,
      728,  728,  728,  728,  623,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  728,  622,  613,  613,  613,  613,
      613,  156,  624,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  615,  616,  616,  616,  616,  616,  616,  728,
      622,  728,  728,  728,  728,  728,  728,  624,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  667,  625,  616,
      616,  616,  616,  616,  728,  728,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  728,  728,  728,  643,  728,
      639,  640,  667,  625,  207,  728,  630,  630,  630,  630,

      630,  630,  630,  630,  630,  587,  631,  631,  631,  631,
      631,  631,  728,  645,  643,  639,  640,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      644,  641,  631,  631,  631,  631,  631,  207,  645,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  633,  634,
      634,  634,  634,  634,  634,  644,  641,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  646,  728,  634,  634,  634,  634,  634,
      156,  728,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  615,  636,  636,  636,  636,  636,  636,  646,  728,

      728,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      728,  728,  728,  728,  728,  661,  728,  728,  636,  636,
      636,  636,  636,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  660,  638,  638,  638,  638,  638,  638,  728,
      661,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      728,  728,  728,  728,  728,  728,  728,  660,  666,  638,
      638,  638,  638,  638,  207,  728,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  633,  652,  652,  652,  652,
      652,  652,  728,  666,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  728,  728,  728,  728,  728,  728,  728,

      728,  728,  652,  652,  652,  652,  652,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  698,  654,  654,  654,
      654,  654,  654,  728,  679,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  728,  728,  728,  728,  728,  728,
      728,  698,  684,  654,  654,  654,  654,  654,  156,  679,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  615,
      656,  656,  656,  656,  656,  656,  728,  684,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  728,  728,  728,
      728,  728,  728,  728,  728,  685,  656,  656,  656,  656,
      656,  156,  728,  657,  657,  657,  657,  657,  657,  657,

      657,  657,  658,  659,  659,  659,  659,  659,  659,  728,
      685,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  659,
      659,  659,  659,  659,  207,  728,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  633,  673,  673,  673,  673,
      673,  673,  728,  728,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  673,  673,  673,  673,  673,  207,  728,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  728,  675,
      675,  675,  675,  675,  675,  728,  728,  692,  692,  692,

      692,  692,  692,  692,  692,  692,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  675,  675,  675,  675,  675,
      156,  728,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  658,  677,  677,  677,  677,  677,  677,  728,  728,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  677,  677,
      677,  677,  677,  207,  728,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  728,  690,  690,  690,  690,  690,
      690,  207,  728,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  728,  728,  728,  728,  728,  728,  728,  728,

      728,  690,  690,  690,  690,  690,  156,  728,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  658,  692,  692,
      692,  692,  692,  692,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  692,  692,  692,  692,  692,  207,
      728,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      728,  703,  703,  703,  703,  703,  703,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  703,  703,  703,
      703,  703,   39,   39,   39,   39,   39,   39,   39,   41,

       41,   41,   41,   41,   41,   41,   45,   45,   45,   45,
       45,   45,   45,   47,  728,   47,   47,   47,   47,   47,
       48,   48,   48,   48,   48,   48,   48,   58,   58,   58,
       58,   58,  101,  728,  101,  101,  101,  101,  101,  104,
      104,  104,  106,  728,  106,  152,  152,  152,  205,  205,
      205,  206,  206,  206,  260,  260,  260,  261,  261,  261,
      317,  317,  317,  318,  318,  318,  326,  326,  326,  372,
      372,  372,  373,  373,  373,  376,  376,  376,  429,  429,
      429,  430,  430,  430,  478,  478,  478,  479,  479,  479,
      522,  522,  522,  523,  523,  523,  555,  555,  555,  556,

      556,  556,  582,  582,  582,  583,  583,  583,  605,  605,
      605,  606,  606,  606,  627,  627,  627,  628,  628,  628,
      647,  647,  647,  648,  648,  648,  650,  728,  650,  668,
      668,  668,  670,  670,  670,  678,  728,  678,  686,  686,
      686,  687,  687,  687,  688,  728,  688,  693,  728,  693,
      699,  699,  699,  700,  700,  700,  704,  728,  704,  705,
      705,  705,  706,  728,  706,  707,  728,  707,  708,  708,
      708,  709,  709,  709,  711,  711,  711,  712,  728,  712,
      713,  713,  713,  714,  714,  714,  716,  716,  716,  717,
      728,  717,  718,  718,  718,  719,  719,  719,  721,  721,

      721,  722,  728,  722,  723,  723,  723,  724,  724,  724,
      726,  726,  726,  654,  728,  654,  727,  727,  727,    7,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728

    } ;

static yyconst flex_int16_t yy_chk[4094] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   10,   10,   11,   11,   15,   17,   23,
      727,   15,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   35,   16,

       21,  726,   22,   17,   23,   42,   42,   22,   22,   43,
       43,   21,   35,   25,   22,   16,   44,   44,   16,   16,
       16,   16,   16,  680,   16,  620,   21,   22,  680,  620,
       32,   32,   22,   22,   25,   32,   21,   35,  724,   22,
       16,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   32,   19,   25,
       32,   60,   36,   36,   38,   61,  723,   36,  722,   38,
       64,   19,   82,   63,  269,   30,   92,   19,   19,   19,
       19,   19,  682,   19,   82,  269,   60,  682,   92,   36,
       61,   30,   36,   63,   38,   64,   19,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   27,   20,   24,   30,   28,   63,   27,
       72,   71,  409,   67,   72,   31,   28,   27,  721,   31,
       37,   24,   28,   20,   20,   20,   20,   20,   29,   20,
       31,   24,   67,   31,   27,   37,   71,   29,  409,   72,
      117,   28,   27,   29,   31,   33,   24,   28,   29,   66,
       65,   65,  117,   33,   33,   31,   66,   67,   31,   65,
       37,   68,   29,   34,   34,   33,   69,   70,   29,   74,
       74,   34,   34,   29,   68,   69,   95,   65,   33,   33,
       34,   66,   73,   70,   65,   95,   81,   73,  110,   34,

       33,  128,  130,  719,  129,  129,   74,  140,   34,   68,
       69,  664,  664,  128,  130,   34,   81,  129,   70,  140,
       95,  718,   73,  110,   34,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   81,   52,   54,   54,   54,   54,   54,   54,   54,
       54,   54,  681,  717,   76,  681,  716,   75,   75,   77,
       76,   52,   52,   52,   52,   52,   77,   52,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   75,   57,   57,
       57,   57,   57,   57,   75,   76,   83,   80,  643,  643,
      643,   77,  643,  714,  713,   84,  643,  712,  711,   78,

       84,   83,   75,   80,   57,   57,   57,   57,   57,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   78,   59,
       59,   59,   59,   59,   59,   84,   83,   86,   80,   87,
       87,   89,   89,  709,   85,   88,   94,   86,   97,   86,
       86,   93,   98,   78,   99,   59,   59,   59,   59,   59,
       85,   88,   97,  111,   93,   96,   87,   94,   89,  113,
       98,  115,   86,   99,   86,   86,  115,   96,  163,  197,
      708,  202,  706,  705,  221,   85,   88,   97,  111,   93,
      163,  197,   94,  202,  113,   98,  221,  700,   99,  699,
      114,  115,   96,  102,  102,  102,  102,  102,  102,  102,

      102,  102,  102,  102,  102,  102,  102,  102,  102,  114,
      102,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      112,  698,  697,  696,  695,  694,  692,  688,  112,  102,
      102,  102,  102,  102,  114,  102,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  687,  105,  105,  105,  105,
      105,  105,  108,  112,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  686,  685,  116,  222,  119,  679,  673,
      116,  119,  105,  105,  105,  105,  105,  107,  222,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  116,  119,  320,  122,  665,

      670,  668,  118,  118,  662,  661,  120,  665,  320,  126,
      124,  120,  122,  124,  126,  107,  107,  107,  107,  107,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  118,
      109,  109,  109,  109,  109,  109,  120,  122,  124,  126,
      127,  125,  121,  123,  125,  127,  131,  134,  137,  137,
      656,  132,  133,  134,  132,  131,  109,  109,  109,  109,
      109,  121,  123,  132,  133,  135,  136,  132,  138,  125,
      127,  136,  139,  141,  135,  137,  146,  143,  134,  132,
      131,  142,  143,  138,  142,  146,  121,  123,  132,  133,
      139,  145,  132,  141,  145,  144,  136,  147,  161,  135,

      144,  147,  148,  169,  229,  230,  164,  143,  138,  142,
      146,  164,  169,  148,  683,  139,  229,  230,  141,  145,
      650,  683,  649,  161,  648,  144,  147,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  164,  169,  148,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  155,  150,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  150,  150,  150,  150,  150,
      647,  150,  154,  644,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,

      159,  162,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  642,  166,  162,  640,  631,  628,  627,  162,  626,
      154,  154,  154,  154,  154,  157,  166,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  162,  171,  246,  663,  257,  625,  663,
      613,  166,  607,  663,  606,  172,  175,  246,  165,  257,
      172,  175,  171,  157,  157,  157,  157,  157,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  165,  158,  158,
      158,  158,  158,  158,  167,  172,  175,  171,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  605,  600,  168,

      594,  585,  165,  167,  158,  158,  158,  158,  158,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  168,  160,
      160,  160,  160,  160,  160,  174,  179,  183,  167,  255,
      176,  185,  178,  177,  182,  191,  185,  181,  179,  179,
      179,  181,  183,  168,  174,  160,  160,  160,  160,  160,
      176,  177,  178,  182,  188,  255,  181,  186,  184,  188,
      191,  185,  192,  179,  179,  179,  181,  183,  190,  174,
      184,  190,  186,  583,  582,  176,  177,  178,  182,  189,
      255,  181,  192,  189,  188,  191,  193,  195,  196,  200,
      194,  193,  195,  200,  194,  184,  190,  186,  201,  218,

      196,  199,  199,  227,  295,  225,  234,  192,  189,  194,
      225,  234,  227,  201,  219,  218,  193,  195,  200,  194,
      274,  579,  574,  573,  568,  196,  563,  557,  199,  295,
      556,  555,  274,  219,  194,  225,  234,  227,  201,  208,
      218,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  210,  219,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  232,  554,
      542,  217,  538,  535,  232,  534,  525,  208,  208,  208,
      208,  208,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  217,  209,  209,  209,  209,  209,  209,  211,  232,

      211,  211,  211,  211,  211,  211,  211,  211,  211,  523,
      522,  519,  239,  382,  518,  515,  217,  239,  209,  209,
      209,  209,  209,  212,  382,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  213,  239,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  212,  212,  212,  212,  212,  214,  513,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  215,  220,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  223,  220,  220,  220,  224,

      226,  231,  233,  235,  214,  214,  214,  214,  214,  247,
      231,  233,  237,  238,  226,  223,  241,  512,  235,  224,
      245,  220,  220,  220,  236,  236,  240,  237,  238,  247,
      241,  240,  242,  242,  243,  231,  233,  237,  245,  226,
      223,  249,  244,  235,  224,  251,  249,  258,  243,  511,
      253,  236,  237,  238,  247,  241,  240,  244,  256,  242,
      251,  252,  253,  245,  282,  258,  252,  254,  254,  276,
      259,  249,  283,  243,  259,  296,  282,  256,  432,  505,
      306,  307,  244,  315,  283,  251,  390,  253,  276,  432,
      258,  252,  306,  307,  254,  315,  503,  497,  390,  259,

      296,  263,  256,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  264,  276,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      265,  351,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  487,  480,  479,  478,  475,  474,  275,  275,  471,
      264,  264,  264,  264,  264,  266,  351,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  267,  275,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  466,  460,  433,  277,  486,  430,
      429,  428,  277,  266,  266,  266,  266,  266,  271,  486,

      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  273,  277,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  279,  424,  414,
      408,  407,  279,  405,  383,  374,  271,  271,  271,  271,
      271,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      278,  272,  272,  272,  272,  272,  272,  279,  281,  278,
      286,  287,  288,  280,  289,  284,  290,  290,  292,  373,
      372,  281,  291,  286,  287,  288,  294,  272,  272,  272,
      272,  272,  280,  284,  278,  291,  289,  293,  297,  294,
      292,  293,  368,  290,  298,  299,  281,  302,  286,  287,

      288,  297,  301,  305,  302,  303,  305,  280,  284,  308,
      291,  289,  298,  299,  294,  292,  293,  303,  304,  310,
      311,  301,  308,  304,  310,  309,  297,  316,  314,  302,
      312,  305,  313,  332,  352,  335,  316,  298,  299,  311,
      314,  335,  303,  309,  403,  312,  301,  308,  304,  310,
      410,  332,  313,  358,  337,  416,  403,  449,  333,  352,
      457,  316,  459,  337,  311,  314,  335,  416,  309,  449,
      312,  321,  457,  318,  459,  410,  332,  313,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  322,  337,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,

      322,  322,  322,  322,  322,  324,  499,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  317,  300,  499,  336,
      285,  270,  334,  262,  261,  322,  322,  322,  322,  322,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  336,
      323,  323,  323,  323,  323,  323,  325,  334,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  260,  250,  248,
      228,  216,  206,  205,  336,  204,  323,  323,  323,  323,
      323,  326,  334,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  327,  371,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,

      328,  371,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      327,  327,  327,  327,  327,  329,  371,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  330,  331,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  203,  339,  331,  341,  343,  331,
      338,  338,  340,  329,  329,  329,  329,  329,  339,  342,
      340,  198,  345,  343,  342,  347,  340,  345,  340,  341,
      347,  331,  344,  344,  331,  346,  348,  338,  346,  349,
      354,  348,  350,  339,  349,  340,  355,  350,  343,  342,

      357,  340,  345,  340,  341,  347,  353,  353,  356,  344,
      359,  360,  354,  346,  359,  367,  348,  365,  355,  349,
      357,  362,  350,  366,  359,  361,  360,  356,  361,  367,
      362,  363,  363,  353,  364,  369,  365,  354,  370,  359,
      461,  462,  366,  355,  369,  357,  396,  187,  541,  359,
      577,  360,  356,  361,  367,  362,  364,  370,  363,  396,
      541,  365,  577,  180,  173,  461,  462,  366,  375,  369,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  170,
      153,  364,  370,  376,  396,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  377,  454,  377,  377,  377,  377,

      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  378,  454,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  152,  149,  104,  387,   91,   90,   79,
       62,  387,  377,  377,  377,  377,  377,  379,  454,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  380,  387,  380,  380,  380,
      380,  380,  380,  380,  380,  380,   58,   53,   49,   48,
      524,   45,  389,  389,   40,  379,  379,  379,  379,  379,
      384,  524,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  386,  389,

      386,  386,  386,  386,  386,  386,  386,  386,  386,  391,
       26,   18,   14,   12,  391,  393,    7,    4,  384,  384,
      384,  384,  384,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  388,  385,  385,  385,  385,  385,  385,  391,
      392,  393,  397,  394,  398,  402,  388,  399,  392,  395,
      395,  400,  399,  509,  401,  411,  398,  397,  401,  385,
      385,  385,  385,  385,  411,  400,  393,  394,  406,  402,
      404,  388,    3,  392,  412,  404,  395,  399,  509,  412,
      406,  398,  397,  401,  417,  415,  413,  417,  418,  411,
      400,  413,  394,  415,  402,  419,  423,  421,  420,  510,

      404,  418,  420,  422,  412,  406,  421,  419,  422,  425,
      562,  426,  417,  427,  425,  423,  413,  426,  415,  584,
        0,  562,    0,  448,  510,  612,  418,  420,  448,  427,
      584,  421,  419,  422,    0,    0,  612,    0,    0,  425,
      423,  630,  426,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  630,  448,  427,  434,    0,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  436,    0,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  434,  434,  434,  434,  434,  435,  435,

      435,  435,  435,  435,  435,  435,  435,  598,  435,  435,
      435,  435,  435,  435,  439,  598,  439,  439,  439,  439,
      439,  439,  439,  439,  439,    0,    0,    0,    0,    0,
        0,  442,  442,    0,  435,  435,  435,  435,  435,  438,
      598,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  441,  442,  441,
      441,  441,  441,  441,  441,  441,  441,  441,    0,    0,
        0,  443,    0,    0,    0,    0,    0,  438,  438,  438,
      438,  438,  440,  443,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,

      444,  447,  445,  450,  452,  446,  451,  451,  443,  453,
      453,  455,  456,  444,  445,  458,  447,  456,  452,  464,
      440,  440,  440,  440,  440,  446,  463,  450,  458,  465,
      468,  455,  467,  451,  472,  468,  453,  464,  444,  445,
      463,  447,  456,  452,  467,  469,  470,  465,  472,  473,
      446,  498,  450,  458,  476,  470,  455,  655,  469,  476,
      468,  477,  464,  498,  672,  463,  477,  473,  655,  467,
      691,    0,  465,  472,  496,  672,    0,    0,  496,    0,
      470,  691,    0,  469,  476,    0,    0,    0,  498,    0,
        0,  477,  473,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  482,  496,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      483,    0,  483,  483,  483,  483,  483,  483,  483,  483,
      483,    0,    0,    0,    0,    0,    0,    0,    0,  492,
      482,  482,  482,  482,  482,  484,    0,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  485,  492,  485,  485,  485,  485,  485,
      485,  485,  485,  485,    0,    0,    0,  494,    0,    0,
        0,    0,  494,  484,  484,  484,  484,  484,  488,  492,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,

      488,  488,  488,  488,  488,  488,  490,  494,  490,  490,
      490,  490,  490,  490,  490,  490,  490,    0,    0,  501,
        0,  491,  500,    0,  501,  500,  488,  488,  488,  488,
      488,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      491,  489,  489,  489,  489,  489,  489,  493,  495,  501,
      500,  502,  504,  504,  508,  514,  520,  495,  546,  507,
      502,  506,  546,  508,  514,  491,  493,  489,  489,  489,
      489,  489,  516,  506,  507,  517,  520,    0,  550,  504,
      517,  516,  495,  521,  550,  502,  521,  546,  508,  514,
        0,  493,    0,    0,    0,    0,    0,    0,  506,  507,

        0,  520,    0,    0,    0,  517,  516,    0,    0,  550,
        0,  521,  526,    0,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      528,    0,  528,  528,  528,  528,  528,  528,  528,  528,
      528,    0,  533,    0,  551,    0,    0,  533,    0,    0,
      526,  526,  526,  526,  526,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  551,  527,  527,  527,  527,  527,
      527,  530,  533,  530,  530,  530,  530,  530,  530,  530,
      530,  530,    0,    0,    0,  539,    0,    0,    0,  551,
      539,  527,  527,  527,  527,  527,  529,    0,  529,  529,

      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  532,  539,  532,  532,  532,  532,
      532,  532,  532,  532,  532,    0,  536,    0,    0,    0,
        0,    0,    0,    0,  529,  529,  529,  529,  529,  531,
      536,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  537,  543,  540,
      547,  544,  545,  581,  547,  536,  553,  545,  552,  569,
      537,  540,  543,  544,  569,  553,  581,  531,  531,  531,
      531,  531,  552,    0,    0,  567,    0,    0,    0,  547,
        0,    0,  545,    0,    0,  537,  540,  543,  544,  569,

      553,  581,  567,    0,    0,    0,    0,  552,  558,    0,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  559,  567,  559,  559,
      559,  559,  559,  559,  559,  559,  559,    0,    0,    0,
        0,    0,    0,  570,  570,    0,  558,  558,  558,  558,
      558,  560,    0,  560,  560,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  560,  561,
      570,  561,  561,  561,  561,  561,  561,  561,  561,  561,
        0,    0,    0,  571,    0,    0,    0,    0,  571,  560,
      560,  560,  560,  560,  564,    0,  564,  564,  564,  564,

      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  566,  571,  566,  566,  566,  566,  566,  566,
      566,  566,  566,    0,  576,  578,  575,  575,    0,  576,
      578,    0,  564,  564,  564,  564,  564,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  572,  565,  565,  565,
      565,  565,  565,  575,  576,  578,  596,  596,  580,  572,
        0,  595,    0,    0,    0,  572,    0,    0,    0,    0,
        0,    0,    0,  565,  565,  565,  565,  565,  580,    0,
      595,    0,    0,  596,  572,    0,    0,    0,    0,  588,
      572,  588,  588,  588,  588,  588,  588,  588,  588,  588,

        0,    0,    0,  580,  586,  595,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  590,    0,  590,  590,  590,  590,  590,  590,
      590,  590,  590,    0,  604,  593,    0,    0,    0,  604,
        0,    0,  586,  586,  586,  586,  586,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  593,  587,  587,  587,
      587,  587,  587,  592,  604,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  601,    0,    0,    0,  597,    0,
        0,  593,  597,  587,  587,  587,  587,  587,  589,  601,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,

      589,  589,  589,  589,  589,  589,  599,  597,    0,    0,
        0,    0,  602,  609,  601,  609,  609,  609,  609,  609,
      609,  609,  609,  609,    0,  599,  589,  589,  589,  589,
      589,  591,  602,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  603,
      599,    0,    0,    0,  646,    0,  611,  602,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  646,  603,  591,
      591,  591,  591,  591,  616,    0,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  617,  618,  621,  621,    0,
      617,  618,  646,  603,  608,  623,  608,  608,  608,  608,

      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  619,  623,  621,  617,  618,    0,    0,    0,
        0,    0,    0,    0,    0,  622,    0,    0,    0,    0,
      622,  619,  608,  608,  608,  608,  608,  610,  623,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  622,  619,    0,    0,    0,
        0,    0,    0,    0,  624,    0,    0,    0,    0,    0,
        0,    0,    0,  624,    0,  610,  610,  610,  610,  610,
      614,    0,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  624,  634,

        0,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      641,    0,    0,    0,  639,  641,    0,    0,  614,  614,
      614,  614,  614,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  639,  615,  615,  615,  615,  615,  615,  636,
      641,  636,  636,  636,  636,  636,  636,  636,  636,  636,
        0,    0,    0,    0,  645,    0,    0,  639,  645,  615,
      615,  615,  615,  615,  632,    0,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  638,  645,  638,  638,  638,  638,  638,  638,
      638,  638,  638,    0,    0,    0,    0,    0,  684,  660,

        0,    0,  632,  632,  632,  632,  632,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  684,  633,  633,  633,
      633,  633,  633,  652,  660,  652,  652,  652,  652,  652,
      652,  652,  652,  652,    0,    0,    0,  666,    0,    0,
        0,  684,  666,  633,  633,  633,  633,  633,  635,  660,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  654,  666,  654,  654,
      654,  654,  654,  654,  654,  654,  654,    0,    0,    0,
      667,    0,    0,    0,    0,  667,  635,  635,  635,  635,
      635,  637,    0,  637,  637,  637,  637,  637,  637,  637,

      637,  637,  637,  637,  637,  637,  637,  637,  637,  659,
      667,  659,  659,  659,  659,  659,  659,  659,  659,  659,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  637,
      637,  637,  637,  637,  651,    0,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  675,    0,  675,  675,  675,  675,  675,  675,
      675,  675,  675,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  651,  651,  651,  651,  651,  653,    0,  653,
      653,  653,  653,  653,  653,  653,  653,  653,    0,  653,
      653,  653,  653,  653,  653,  677,    0,  677,  677,  677,

      677,  677,  677,  677,  677,  677,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  653,  653,  653,  653,  653,
      657,    0,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  690,    0,
      690,  690,  690,  690,  690,  690,  690,  690,  690,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  657,  657,
      657,  657,  657,  674,    0,  674,  674,  674,  674,  674,
      674,  674,  674,  674,    0,  674,  674,  674,  674,  674,
      674,  702,    0,  702,  702,  702,  702,  702,  702,  702,
      702,  702,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  674,  674,  674,  674,  674,  676,    0,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  676,  676,  676,  676,  676,  689,
        0,  689,  689,  689,  689,  689,  689,  689,  689,  689,
        0,  689,  689,  689,  689,  689,  689,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  689,  689,  689,
      689,  689,  729,  729,  729,  729,  729,  729,  729,  730,

      730,  730,  730,  730,  730,  730,  731,  731,  731,  731,
      731,  731,  731,  732,    0,  732,  732,  732,  732,  732,
      733,  733,  733,  733,  733,  733,  733,  734,  734,  734,
      734,  734,  735,    0,  735,  735,  735,  735,  735,  736,
      736,  736,  737,    0,  737,  738,  738,  738,  739,  739,
      739,  740,  740,  740,  741,  741,  741,  742,  742,  742,
      743,  743,  743,  744,  744,  744,  745,  745,  745,  746,
      746,  746,  747,  747,  747,  748,  748,  748,  749,  749,
      749,  750,  750,  750,  751,  751,  751,  752,  752,  752,
      753,  753,  753,  754,  754,  754,  755,  755,  755,  756,

      756,  756,  757,  757,  757,  758,  758,  758,  759,  759,
      759,  760,  760,  760,  761,  761,  761,  762,  762,  762,
      763,  763,  763,  764,  764,  764,  765,    0,  765,  766,
      766,  766,  767,  767,  767,  768,    0,  768,  769,  769,
      769,  770,  770,  770,  771,    0,  771,  772,    0,  772,
      773,  773,  773,  774,  774,  774,  775,    0,  775,  776,
      776,  776,  777,    0,  777,  778,    0,  778,  779,  779,
      779,  780,  780,  780,  781,  781,  781,  782,    0,  782,
      783,  783,  783,  784,  784,  784,  785,  785,  785,  786,
        0,  786,  787,  787,  787,  788,  788,  788,  789,  789,

      789,  790,    0,  790,  791,  791,  791,  792,  792,  792,
      793,  793,  793,  794,    0,  794,  795,  795,  795,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728

    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[89] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
    0, 0, 1, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 1612 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 1717 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 729 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4020 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 60 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 62 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 108 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 122 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 126 "SrvLexer.l"
;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno; 
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 134 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 135 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 75:
YY_RULE_SETUP
#line 142 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 151 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 160 "SrvLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 169 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 178 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 187 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 196 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 208 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 215 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 236 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd then no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 268 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd; 
      YYABORT; 
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 278 "SrvLexer.l"
{ 
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) { 
        Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd; 
        YYABORT; 
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 287 "SrvLexer.l"
{ return yytext[0]; } 
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 290 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 2385 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 729 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 729 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 728);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 290 "SrvLexer.l"




