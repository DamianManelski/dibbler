#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 116
#define YY_END_OF_BUFFER 117
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[974] =
    {   0,
        1,    1,    0,    0,    0,    0,  117,  115,    2,    1,
        1,  115,   97,  115,  115,  114,  114,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      101,  101,  116,    1,    1,    1,    0,  109,   97,    0,
      109,   99,   98,  114,    0,    0,  113,    0,  106,   80,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
       94,  110,  110,   82,  110,  110,  110,  110,  110,  110,

      110,  110,  110,  110,   17,   18,  110,  110,  110,  110,
      110,  110,  110,  110,  100,   98,  114,    0,    0,    0,
      105,  111,  104,  104,  110,  110,  110,  110,  110,   81,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,   93,  114,    0,    0,
        0,    0,  103,  103,    0,  104,    0,  104,  110,  110,
      110,   60,  110,  110,  110,  110,  110,  110,  110,  110,

       88,  110,  110,  110,   30,  110,  110,   41,  110,  110,
      110,  110,  110,  110,  110,  110,    0,  110,  110,  110,
      110,  110,  110,   23,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,   95,  110,  110,
      110,  110,  114,    0,  112,    0,    0,    0,  103,    0,
      103,    0,  104,  104,  104,  104,  110,  110,  110,  110,
       87,  110,  110,  110,    4,  110,  110,  110,  110,  110,
      110,  110,   96,  110,  110,    3,  110,  110,  110,  110,
      110,  110,  110,  110,  110,    0,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,    7,  110,  110,   24,

      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,    0,    0,    0,    0,    0,  103,  103,  103,  103,
        0,  104,  104,  104,    0,  104,  110,  110,  110,  110,
      110,  110,  110,  110,  110,   29,  110,  110,  110,  110,
      110,   36,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,    0,    0,  110,  110,  110,
       34,  110,  110,  110,  110,  110,  110,  110,   56,  110,
      110,  110,   91,  110,  110,  110,  110,  110,  110,  110,
        0,    0,    0,    0,  103,  103,  103,    0,  103,    0,
        0,  104,  104,  104,  104,  110,  110,   32,  110,  110,

      110,  110,  110,  110,    0,  110,  110,   90,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,    0,    0,  110,  110,  110,
      110,  110,   54,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,   21,  110,  110,  110,  112,    0,    0,
        0,    0,    0,  103,  103,  103,  103,    0,  104,  104,
      104,    0,  104,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,    0,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
       50,  110,  110,   12,   10,   79,  110,    0,    0,  110,

      110,  110,   52,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,    5,  110,  110,  110,   14,    0,    0,
        0,    0,  103,  103,  103,    0,  103,  108,  104,  104,
      104,  104,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,    0,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
       11,   59,    0,    0,  110,  110,  110,   53,  110,  110,
      110,  110,   31,  110,  110,    6,   89,   38,  110,  110,
        0,    0,    0,    0,  107,  103,  103,  103,  103,  104,
      104,  104,    0,  104,  110,  110,  110,  110,  110,  110,

      110,  110,  110,   51,  110,    0,  110,  110,  110,  110,
      110,  110,  110,  110,   35,  110,  110,   33,  110,  110,
      110,   13,    0,    0,   47,   46,   37,  110,   22,  110,
      110,   40,   39,  110,  110,  112,    0,    0,  103,  103,
      103,    0,  103,  104,  104,  104,  104,  110,   15,  110,
       58,  110,  110,  110,   67,  110,  110,    0,  110,  110,
      110,  110,  110,  110,   70,  110,  110,  110,  110,  110,
      110,   49,   48,  110,  110,  110,  110,   55,    0,    0,
        0,    0,  103,  103,  103,  103,  104,  104,  104,    0,
      104,  110,  110,   92,   69,  110,  110,  110,    0,   78,

      110,  110,  110,   45,  110,   71,   57,  110,  110,  110,
        8,  110,   25,  110,  110,    0,    0,    0,  103,  103,
      103,    0,  103,  104,  104,  104,  104,  110,  110,   68,
      110,  110,    0,  110,  110,   44,  110,  110,  110,  110,
       61,  110,  110,  110,  110,  112,    0,    0,    0,  103,
      103,  103,  103,  104,  104,  104,    0,  104,  110,  110,
      110,  110,    0,  110,  110,  110,  110,  110,  110,  110,
      110,   16,   20,    0,    0,  102,  105,  103,  103,  103,
        0,  103,  104,  104,  104,  104,  110,  110,  110,   27,
        0,    0,  110,  110,  110,   72,  110,  110,   26,  110,

      110,    0,    0,  102,    0,  103,  103,  103,  103,  103,
      104,  104,  104,    0,  104,  110,  110,  110,    0,    0,
       28,  110,  110,   73,  110,  110,  110,  110,  110,  110,
      112,  102,  105,  103,    0,  103,  103,  103,  103,  104,
      104,  104,   62,  110,  110,  110,  110,    0,    0,  110,
      110,  110,  110,  110,  110,   43,  110,   19,    0,  102,
      103,  103,  103,  103,  104,  104,  104,  110,  110,  110,
      110,  110,    0,    0,  110,  110,   74,   75,   76,   77,
        9,    0,  103,  103,    0,  103,  103,  104,   42,  110,
      110,  110,  110,    0,    0,  110,  110,  112,  103,  103,

      104,  110,  110,  110,  110,    0,    0,    0,  110,  110,
      110,    0,  103,  103,    0,  110,  110,  110,  110,    0,
        0,    0,   83,  110,  110,  110,   83,  102,  103,  103,
       63,  110,  110,  110,    0,   85,    0,  110,   85,  110,
      102,  103,  103,    0,  110,  110,   66,    0,   84,  110,
       84,    0,  103,  103,  110,   64,   86,   86,    0,  103,
      103,    0,   65,  112,  103,  103,    0,  103,  103,    0,
      103,  103,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
       23,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        1,    1,    1,    1,    1,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    1,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1064] =
    {   0,
        0,    0, 1187, 1186,    0,    0, 1193, 5684, 5684,   73,
       75, 1187,    0, 1184,   72,   72,   34, 1140, 1138,  136,
      186,  233,  280,   71,  208,  338,   38,   73,  223,   89,
      267,  175,  275,  350,  353,  392,   67,  359,  180,  209,
     5684, 1148, 5684,  111,  137,  222, 1154, 5684,    0, 1151,
     1150, 5684,    0,  450, 1133,  469, 5684,    0,  495, 5684,
       61,  538,   86,   89,  185,  208,  231,  279,  221,  265,
      288,  403,  375,  283,  285,  384,  373,  382,  448,  386,
      337,  517,  540,  552,  554,  556,  569,  388,  571,  537,
      331,  536,  573,  390,  576,  574,  586,  588,  601,  587,

      611,  608,  624,  625,  447,  455,  623,  615,  539,  638,
      631,  635,  639,  642, 5684,    0,  700, 1132,  513, 1131,
      745,    0,  790,  719,  833,  636,  656,  822,  826,  697,
      825,  831,  711,  829,  849,  835,  830,  832,  866,  769,
      732,  880,  881,  869,  871,  870,  900,  901,  888,  902,
      911,  905,  917,  919,  933,  916,  941,  934,  935,  950,
      955,  968,  953,  952,  957,  944,  972,  975,  984,  987,
      993, 1002, 1006, 1004, 1007, 1009,  705, 1067,  522, 1129,
     1128, 1126, 1114,  770,  807, 1159, 1202, 1086, 1245,  990,
     1180,  991, 1205, 1101, 1197, 1240, 1234, 1119, 1020, 1235,

      996, 1238, 1239, 1257, 1005, 1082, 1259, 1275, 1244, 1288,
     1248, 1279, 1278, 1299, 1280, 1295, 1137, 1311, 1286, 1319,
     1324, 1338, 1329, 1155, 1342, 1344, 1346, 1330, 1332, 1366,
     1359, 1379, 1363, 1374, 1376, 1380, 1399, 1162, 1398, 1407,
     1414, 1415,  816, 1124, 1122, 1115, 1094, 1473, 1484, 1527,
     1503, 1546, 1572, 1591, 1617, 1636, 1093, 1384, 1391, 1396,
     1395, 1629, 1514, 1463, 1559, 1615, 1616, 1636, 1618, 1638,
     1639, 1649, 1411, 1650, 1668, 1685, 1666, 1667, 1672, 1677,
     1669, 1687, 1690, 1708, 1570, 1690, 1689, 1700, 1717, 1712,
     1722, 1725, 1729, 1724, 1740, 1720, 1413, 1752, 1733, 1426,

     1741, 1753, 1739, 1768, 1760, 1784, 1769, 1772, 1776, 1785,
     1788, 1092, 1091, 1090, 1088, 1846, 1857, 1876, 1902, 1921,
     1885, 1947, 1087, 1959, 2002, 1978, 1938, 1901, 1775, 1996,
     1993, 2004, 2005, 1992, 1999, 2075, 2001, 1998, 2046, 1997,
     2003, 1506, 2050, 2061, 2055, 2056, 2051, 2065, 2057, 2067,
     2062, 2086, 2098, 2092, 2085, 1662, 1793, 2102, 2099, 2100,
     1781, 2103, 2121, 2113, 2131, 2132, 2142, 2143, 1844, 2144,
     2137, 2135, 1889, 2150, 2148, 2155, 2152, 2165, 2187, 2166,
     1086, 1056, 1051, 2224, 2245, 1049, 2257, 2300, 2276, 2319,
     2345, 2356, 2375, 2401, 2420, 2422, 2401, 2236, 2179, 2403,

     2185, 2298, 2417, 2400, 2001, 2433, 2418, 2261, 2436, 2343,
     2468, 2420, 2454, 2457, 2458, 2469, 2482, 2471, 2486, 2473,
     2488, 2490, 2501, 2506, 2505, 2287, 2405, 2523, 2509, 2518,
     2515, 2521, 2504, 2550, 2540, 2555, 2538, 2542, 2553, 2558,
     2572, 2573, 2574, 2525, 2587, 2585, 2589, 1046, 1045, 1043,
     1037, 2647, 2658, 2669, 2688, 2714, 2733, 2697, 2759,  978,
     2771, 2814, 2790, 2578, 2577, 2800, 2713, 2801, 2750, 2828,
     2816, 2806, 2805, 2808, 2672, 2844, 2833, 2856, 2846, 2857,
     2851, 2853, 2858, 2864, 2862, 2852, 2880, 2865, 2919, 2902,
     2701, 2895, 2896, 2897, 2898, 2899, 2903, 2920, 2903, 2917,

     2932, 2936, 2907, 2947, 2944, 2953, 2948, 2950, 2954, 2951,
     2968, 2957, 2985, 2938, 2972, 2984, 2991, 2949,  946,  944,
      943, 3030, 3049,  940, 3061, 3104, 3080, 3089, 3149, 3123,
     3194, 3168, 3102, 3182, 3190, 3091, 3193, 3192, 2988, 3191,
     3210, 3212, 3187, 2996, 3215, 3223, 3231, 3233, 3234, 3245,
     3237, 3255, 3242, 3244, 3188, 3248, 3280, 3272, 3296, 3275,
     3136, 3240, 3279, 3292, 3284, 3282, 3286, 3278, 3294, 3307,
     3295, 3300, 3289, 3323, 3327, 3292, 3319, 3325, 3344, 3346,
      937,  901,  900,  896, 3388, 3406, 3425, 3451, 3470, 3496,
      895, 3508, 3551, 3527, 3343, 3537, 3545, 3542, 3546, 3529,

     3450, 3547, 3552, 3329, 3584, 3357, 3553, 3543, 3582, 3594,
     3348, 3598, 3597, 3595, 3385, 3605, 3612, 3393, 3596, 3599,
     3600, 3404, 3596, 3593, 3603, 3604, 3617, 3639, 3628, 3644,
     3649, 3634, 3635, 3637, 3664,  859,  846,  845, 3707,  772,
     3724, 3767, 3743, 3812, 3786, 3857, 3831, 3852, 3640, 3647,
     3642, 3746, 3850, 3799, 3645, 3703, 3860, 3734, 3847, 3855,
     3854, 3857, 3859, 3849, 3853, 3889, 3896, 3905, 3906, 3909,
     3910, 5684, 5684, 3912, 3895, 3898, 3911, 3900,  771,  770,
      758,  756, 3972, 3991, 4017, 4036, 4062,  755, 4074, 4117,
     4093, 3907, 3902, 3901, 3951, 4095, 4112, 4016, 3962, 4004,

     4119, 4107, 4115, 4108, 4118, 4109, 4111, 4131, 4159, 4162,
     4147, 4164, 4117, 4150, 4160,  726,  725,  724, 4222,  723,
     4234, 4277, 4253, 4322, 4296, 4367, 4341, 4151, 4161, 4153,
     4158, 4355,  734, 4275, 4354, 4156, 4363, 4369, 4360, 4361,
     4213, 4364, 4366, 4370, 4404,  721,  689,  685,  682, 4464,
     4436, 4509, 4448, 4483,  681, 4554, 4597, 4528, 4549, 4401,
     4583, 4592, 4602, 4402, 4614, 4264, 4611, 4615, 4632, 4597,
     4631, 4256, 4309,  680,  678,  677,    0, 4677,  667, 4692,
     4735, 4581, 4780, 4711, 4825, 4754, 4598, 4748, 4496, 4371,
     4452, 4456, 4820, 4821, 4816, 4488, 4843, 4824, 4601, 4713,

     4826,  666,  665,  627,  599,  597, 4903, 4806, 4948, 4884,
     4922,  555, 4993,    0, 4967, 4630, 4823, 4992, 4691, 4730,
     4767, 4981, 4995, 4839, 5009, 4864, 4901, 4988, 5006, 5013,
      552,  551, 5684,  550,    0, 5071,  549, 5083, 5102, 5128,
     5147,    0, 4840, 5011, 5125, 5146, 5159, 4884, 4944, 5129,
     5148, 5061, 5140, 5158, 4982, 4989, 4996, 5025,  476,  475,
      474,  473, 5219, 5238, 5264,  472,    0, 5149, 5161, 5154,
     5150, 5070, 5146,    0, 5219, 5289, 5197, 5198, 5206, 5218,
     5222,  471,  433,  427,    0, 5289, 5684,    0, 5255, 5285,
     5304, 5305, 5288,    0, 5290, 5329, 5318,  426,  424,  417,

     5684, 5315, 5321, 5317, 5319, 5339, 5300, 5290, 5342, 5340,
     5357,  415,  399,  364,    0, 5333, 5360, 5361, 5337, 5373,
     5363, 5363, 5684, 5384, 5372, 5370, 5367,  359,  358,  355,
     5371, 5385, 5377, 5402, 5374, 5684, 5409, 5406, 5392, 5414,
      349,  348,  346,    0, 5416, 5408, 5412, 5433, 5684, 5437,
     5419,  339,  325,  307, 5423, 5422, 5684, 5424,    0,  305,
      276,    0, 5425,  267,  262,  260,  258,  254,  251,    0,
      229,  214, 5684, 5507, 5511, 5515, 5519, 5523, 5527, 5529,
      232, 5531, 5533, 5535, 5537, 5539, 5541, 5543, 5545, 5547,
     5549, 5553, 5555, 5557, 5559, 5561, 5563, 5565, 5567, 5569,

     5571, 5573, 5575, 5577, 5579, 5581, 5583, 5585, 5587, 5589,
     5591, 5593, 5595, 5597, 5599, 5601, 5603, 5605,  231, 5607,
     5609, 5611,  230, 5613, 5615, 5617,  228,  226, 5619, 5621,
     5623,  224, 5627, 5631, 5633, 5635,  219,  217, 5639, 5643,
     5645, 5647, 5649, 5651, 5653,  214, 5655, 5657, 5659, 5661,
     5663,  145, 5665, 5667, 5669,  131, 5671,  117, 5673, 5675,
     5677,   80, 5679
    } ;

static yyconst flex_int16_t yy_def[1064] =
    {   0,
      973,    1,  974,  974,  975,  975,  973,  973,  973,  973,
      973,  976,  977,  978,  973,  973,   16,  973,  973,  973,
       20,   20,   22,   22,   22,   22,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      973,  973,  973,  973,  973,  973,  976,  973,  977,  978,
      973,  973,  979,  973,  980,   54,  973,  981,  973,  973,
       26,   26,   62,   62,   62,   26,   26,   26,   26,   26,
       62,   26,   26,   62,   62,   26,   26,   26,   26,   26,
       62,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  973,  979,  973,  982,  117,  983,
      973,  981,  973,  123,   62,  125,  125,   26,   26,   26,
       26,   26,  125,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  973,  178,  984,
      985,  986,  973,  183,  973,  973,  973,  186,  125,  189,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,  973,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  179,  179,  985,  987,  988,  973,  973,  973,
      249,  973,  973,  253,  973,  255,  189,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  973,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  989,  973,  990,  991,  973,  973,  317,  973,  319,
      973,  973,  973,  973,  973,  324,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  992,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  973,  973,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      993,  994,  995,  973,  973,  973,  973,  973,  387,  973,
      973,  973,  392,  973,  394,   26,   26,   26,   26,   26,

       26,   26,   26,   26,  973,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  973,  973,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  990,  973,  996,
      997,  973,  973,  973,  454,  973,  456,  973,  973,  973,
      973,  973,  461,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  973,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  973,  973,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  998,  999,
     1000,  973,  973,  973,  973,  973,  525,  973,  973,  529,
      973,  531,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  973,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  973,  973,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1001,  973, 1002, 1003,  973,  973,  586,  973,  588,  973,
      973,  973,  973,  592,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,  973,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  973,  973,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1004, 1005, 1006,  973,  973,
      973,  973,  641,  973,  644,  973,  646,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  973,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  973,  973,   26,   26,   26,   26,   26, 1007,  973,
     1008, 1009,  973,  683,  973,  685,  973,  973,  973,  973,
      689,   26,   26,   26,   26,   26,   26,   26,  973,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1010, 1011, 1012,  973,  973,
      973,  973,  721,  973,  724,  973,  726,   26,   26,   26,
       26,   26,  973,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1013,  973, 1014, 1015,  973,
      750,  973,  752,  973,  973,  973,  973,  756,   26,   26,
       26,   26,  973,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1016, 1017, 1018, 1019,  973,  973,  973,
      973,  780,  973,  783,  973,  785,   26,   26,   26,   26,
      973,  973,   26,   26,   26,   26,   26,   26,   26,   26,

       26, 1020,  973, 1021,  973, 1022,  973,  807,  973,  809,
      973,  973,  973, 1023,  813,   26,   26,   26,  973,  973,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1024, 1025,  973, 1026, 1027,  973,  973,  973,  838,  973,
      840, 1028,   26,   26,   26,   26,   26,  973,  973,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1029,  973,
     1030, 1031,  973,  863,  973,  973, 1032,   26,   26,   26,
       26,   26,  973, 1033,   26, 1034,   26,   26,   26,   26,
       26, 1035,  973, 1036, 1037,  973,  973, 1038,   26,   26,
       26,   26,   26, 1039,  973, 1040,   26, 1041, 1042, 1043,

      973,   26,   26,   26,   26,  973,  973,  973,   26,   26,
       26, 1044,  973, 1045, 1046,   26,   26,   26,   26,  973,
      973,  973,  973,   26,   26,   26,   26, 1047, 1048, 1049,
       26,   26,   26,   26,  973,  973,  973,   26,   26,   26,
     1050,  973, 1051, 1052,   26,   26,   26,  973,  973,   26,
       26, 1053, 1054, 1055,   26,   26,  973,   26, 1056,  973,
     1057, 1058,   26,  973, 1059, 1060, 1053,  973, 1061, 1062,
     1063,  973,    0,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,

      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973
    } ;

static yyconst flex_int16_t yy_nxt[5760] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   27,   27,   29,   30,   31,   32,   33,   27,
       34,   35,   36,   37,   38,   39,   27,   40,   27,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   27,   27,
       29,   30,   31,   32,   33,   27,   34,   35,   36,   37,
       38,   39,   27,   40,   27,   44,   45,   46,   45,   52,
      973,   61,  810,   53,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   55,   62,   56,   56,   56,   56,   56,

       56,   84,   57,  110,   61,   61,  973,   61,   61,   85,
       61,  126,   88,   44,   45,  127,   61,   80,   58,  966,
       62,   56,   56,   56,   56,   56,   56,   84,   57,  110,
       61,   61,   61,  964,   61,   85,   61,  126,   88,   46,
       45,  127,   61,   80,   58,   61,   61,  954,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   55,   61,   62,
       62,   63,   64,   62,   65,   61,   66,   61,   61,   61,
       67,   61,   68,   61,   61,   61,   61,   61,   61,   69,
       61,   61,   61,   61,   61,   62,   62,   63,   64,   62,
       65,   61,   66,   61,   61,   61,   67,   61,   68,   61,

       61,   61,   61,   61,   61,   69,   61,   61,   61,   61,
       61,   62,   62,   93,   62,   94,  930,  113,   61,  901,
       61,  900,   61,   61,   44,   45,  888,  128,  867,   70,
      862,   81,  842,  806,  122,  970,  114,   62,   62,   93,
       62,   94,   61,  113,   61,   61,   61,   82,   61,   61,
      970,   61,   61,  128,   86,   70,   71,   81,   62,   62,
       87,   62,  114,  131,   61,  129,   61,   72,   61,   61,
       73,   61,  970,   82,   61,  962,   61,   61,   61,  973,
       86,  970,   71,  962,   62,   62,   87,   62,  967,  131,
       61,  129,   61,   72,   89,   61,   73,  962,   90,  132,

       61,   95,   61,   62,   91,  130,   74,   75,   61,   92,
       61,   76,   96,  133,   61,   97,   77,   78,   61,  137,
       89,  138,   61,   79,   90,  132,  944,   95,  962,   62,
       91,  130,   74,   75,   61,   92,   61,   76,   96,  133,
       61,   97,   77,   78,   61,  137,  944,  138,   61,   79,
       61,   61,   61,   61,   61,   61,   61,   61,   61,  973,
      833,   61,   61,   61,   61,   61,   61,  944,   61,  915,
      952,  144,   61,   98,   61,   61,  944,   99,  100,  915,
      805,   83,  111,  101,  102,  915,  112,   61,   61,   61,
       61,   61,   61,   61,   61,  103,  104,  144,   61,   98,

       61,   61,   61,   99,  100,  105,  106,   83,  111,  101,
      102,  136,  112,  139,  140,  107,   61,  141,   61,   61,
      885,  103,  104,  108,  143,   61,  134,   61,   61,   61,
      152,   61,  109,   61,  135,   61,  777,  136,  915,  139,
      140,  107,   61,  141,   61,  885,   61,  912,  885,  108,
      143,   61,  134,   61,  835,   61,  152,   61,  109,   61,
      135,   61,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  118,   61,  119,  119,  119,  119,  119,  119,  142,
       57,  119,  119,  119,  119,  119,  119,  119,  119,  119,
       61,   61,  749,  814,  885,  835,  805,  121,   61,  119,

      119,  119,  119,  119,  119,  142,   57,  123,  123,  123,
      123,  123,  123,  123,  123,  123,   61,   61,  124,  124,
      124,  124,  124,  124,   61,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  145,  124,  124,  124,  124,  124,  124,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  118,
       61,  125,  125,  125,  125,  125,  125,  146,   66,  145,
      781,  835,  805,  859,  155,  147,  757,  148,  154,   61,
       61,   61,  172,   61,  150,  157,   61,  125,  125,  125,
      125,  125,  125,  146,   66,   61,  149,   61,  151,   61,

      155,  147,  153,  148,  154,   61,   61,   61,  172,   61,
      150,  158,   61,  159,   61,  156,   61,   61,  835,   61,
      833,   61,  149,   61,  151,   61,  160,  164,  153,   61,
       61,   61,  170,  161,  165,  162,  163,  158,   61,  159,
       61,  156,   61,   61,   61,   61,  166,  167,  805,  169,
      171,   61,  160,  164,   61,   61,   61,   61,   61,  161,
      165,  162,  163,  190,  168,  174,   61,   61,   61,  173,
       61,  175,  166,  167,   61,  169,  171,   61,   61,  176,
       61,   61,   61,  177,   61,   61,  749,  682,  722,  190,
      168,  174,   61,   61,   61,  173,  191,  175,  805,  749,

       61,  121,  690,  777,   61,  176,  749,   61,   61,  177,
      682,   61,  178,  178,  178,  178,  178,  178,  178,  178,
      178,   55,  191,  179,  179,  179,  179,  179,  179,  973,
       57,  188,  188,  188,  188,  188,  188,  188,  188,  188,
       61,  196,  774,  763,  642,  749,  682,  584,   61,  179,
      179,  179,  179,  179,  179,  204,   57,  183,  183,  183,
      183,  183,  183,  183,  183,  183,   61,  196,  184,  184,
      184,  184,  184,  184,   61,   61,  593,  121,  203,  682,
      973,  204,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  584,  121,  526,  184,  184,  184,  184,  184,  184,

      185,   61,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  187,   61,  188,  188,  188,  188,  188,  188,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  973,   61,  188,
      188,  188,  188,  188,  188,  189,  189,  189,  189,  189,
      189,  189,  189,  189,   55,  194,  189,  189,  189,  189,
      189,  189,  192,  193,  195,   61,  682,  584,   61,   61,
      197,  200,   61,   61,   61,   61,  198,  199,   61,  201,
      679,  194,  189,  189,  189,  189,  189,  189,  192,  193,
      195,   61,   61,  202,   61,   61,  197,  200,   61,   61,

       61,   61,  198,  199,   61,  201,  205,  208,  206,   61,
      207,  209,   61,   61,   61,  212,  462,  121,   61,  202,
      214,  584,  451,   61,   61,  210,  211,  217,  218,  213,
      215,   61,  205,  208,  206,   61,  207,  209,   61,   61,
       61,  212,  219,   61,   61,   61,  216,  220,   61,   61,
       61,  210,  211,  232,   61,  213,  215,   61,  451,   61,
       61,  388,   61,  225,  584,  451,  221,  121,  224,   61,
       61,   61,  216,  220,   61,  222,   61,   61,   61,  223,
       61,  226,  227,  230,   61,   61,   61,   61,   61,  225,
      229,  228,  221,   61,  224,   61,   61,  231,   61,  325,

       61,  222,   61,   61,   61,  223,  234,  226,  227,  230,
       61,   61,  236,   61,  233,   61,  229,  228,   61,   61,
      237,   61,   61,  231,   61,  235,   61,   61,  258,  238,
       61,  239,  234,  241,   61,  240,   61,   61,  236,   61,
      233,   61,  242,  267,   61,   61,  237,   61,   61,   61,
       61,  235,   61,   61,  258,  238,   61,  239,  121,  241,
       61,  240,   61,   61,  451,   61,  315,  519,  242,  267,
      250,   61,  451,   61,   61,   61,   61,  315,   61,  243,
      243,  243,  243,  243,  243,  243,  243,  243,   55,   61,
      244,  244,  244,  244,  244,  244,  973,   57,  254,  254,

      254,  254,  254,  254,  254,  254,  254,  315,  187,  121,
      262,  315,  182,  121,  973,  315,  244,  244,  244,  244,
      244,  244,  272,   57,  248,   61,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  250,  182,  251,  251,  251,
      251,  251,  251,  312,   61,  973,  286,  121,  272,  182,
      182,   61,  182,  121,  121,  266,   50,   51,   48,  115,
       60,   59,   61,  251,  251,  251,  251,  251,  251,  185,
       61,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      187,  266,  254,  254,  254,  254,  254,  254,   61,  259,
       51,   48,  973,   42,   42,  973,  973,  973,   61,  973,

      973,  973,  973,  973,  973,   61,  263,  260,  254,  254,
      254,  254,  254,  254,  255,  255,  255,  255,  255,  255,
      255,  255,  255,   61,   61,  256,  256,  256,  256,  256,
      256,   61,  973,  260,  973,  973,  973,  973,  973,  973,
       61,  973,  973,  973,  268,  973,  973,  973,   61,   61,
      261,  256,  256,  256,  256,  256,  256,  257,  257,  257,
      257,  257,  257,  257,  257,  257,   61,  264,  257,  257,
      257,  257,  257,  257,   61,  265,  261,   61,   61,  269,
      270,   61,   61,   61,  274,  275,  273,   61,  271,  973,
      277,   61,  973,  264,  257,  257,  257,  257,  257,  257,

       61,  265,   61,   61,   61,  269,  270,   61,   61,   61,
      284,  275,  273,   61,  271,  276,  277,   61,   61,  278,
      279,   61,   61,   61,  280,  285,   61,  289,   61,   61,
      973,   61,  973,  281,  282,  283,  284,  287,   61,  973,
      973,  276,   61,  973,   61,  278,  279,   61,   61,   61,
      280,  285,  288,  289,   61,   61,  290,   61,  291,  281,
      282,  283,   61,  287,   61,  292,  293,   61,   61,  294,
      295,  296,   61,   61,  298,   61,  973,  297,  288,  973,
       61,   61,  290,  973,  291,   61,  300,   61,   61,   61,
      303,  292,  293,   61,  973,  294,  295,  296,   61,   61,

      298,   61,   61,  297,  299,  301,   61,   61,  307,   61,
      304,   61,  300,   61,  306,   61,  303,   61,  305,   61,
      302,  308,   61,   61,  311,  973,  327,   61,   61,  328,
      299,  301,   61,  309,   61,   61,  304,  329,   61,   61,
      306,   61,   61,   61,  305,   61,  302,  308,   61,   61,
       61,  310,  327,   61,   61,  328,   61,   61,   61,  309,
       61,  973,  973,  329,   61,   61,  973,   61,   61,   61,
      973,  973,  334,  973,  973,  973,   61,  310,  973,  973,
       61,  973,   61,   61,   61,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  248,   61,  317,  317,  317,  317,

      317,  317,  317,  317,  317,  250,   61,  318,  318,  318,
      318,  318,  318,  973,  973,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  973,  973,  973,  973,  973,  973,
      973,  973,   61,  318,  318,  318,  318,  318,  318,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  333,   61,
      320,  320,  320,  320,  320,  320,  321,   61,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  973,  335,  973,
      973,  973,  973,  973,  333,   61,  320,  320,  320,  320,
      320,  320,  185,   61,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  187,  355,  323,  323,  323,  323,  323,

      323,  973,   61,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  973,   61,  973,  973,  973,  973,  973,  973,
      355,  323,  323,  323,  323,  323,  323,  185,   61,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  325,   61,
      326,  326,  326,  326,  326,  326,  973,  337,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  336,   61,   61,
      340,   61,  330,  331,  332,  341,  326,  326,  326,  326,
      326,  326,   61,  337,  338,  342,  344,  345,  339,   61,
      343,   61,   61,  336,   61,   61,  340,   61,  330,  331,
      332,  341,   61,   61,  346,  348,  351,  347,   61,  426,

      338,  342,  344,  349,  339,   61,  343,   61,   61,   61,
       61,   61,   61,  353,  350,   61,  356,  354,   61,   61,
       61,  348,  351,  347,  352,  426,  358,  359,   61,  349,
       61,  357,   61,   61,  973,   61,   61,   61,   61,  353,
      350,   61,  356,   61,  360,  362,   61,  973,  361,  366,
      352,   61,  358,  359,   61,   61,   61,  357,   61,   61,
       61,  363,  367,   61,  365,   61,  364,   61,   61,   61,
      360,  362,   61,  372,  361,  369,   61,   61,  370,  368,
      371,   61,   61,   61,   61,  378,   61,  363,  367,   61,
      365,   61,  364,   61,   61,   61,   61,  373,   61,  372,

      374,  369,   61,   61,  370,  368,  371,  375,   61,   61,
       61,   61,   61,  377,  380,   61,  398,  376,   61,   61,
      427,   61,   61,  373,   61,  379,  374,   61,   61,   61,
      973,   61,  973,  375,  973,  973,  973,   61,   61,  377,
      380,   61,  398,  376,   61,   61,  427,  973,  973,  973,
       61,  379,  973,   61,   61,  973,  384,   61,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  248,  973,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  250,  973,
      386,  386,  386,  386,  386,  386,  973,   61,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  390,  390,  390,

      390,  390,  390,  390,  390,  390,  386,  386,  386,  386,
      386,  386,  248,   61,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  388,  397,  389,  389,  389,  389,  389,
      389,  973,   61,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  973,  973,   61,  973,  973,  396,  973,  973,
      397,  389,  389,  389,  389,  389,  389,  185,   61,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  187,  185,
       61,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      325,   61,  393,  393,  393,  393,  393,  393,  973,  973,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  973,

      973,  973,  973,  973,  973,  973,  411,   61,  393,  393,
      393,  393,  393,  393,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  399,  400,  395,  395,  395,  395,  395,
      395,  401,  402,  403,  404,   61,   61,  408,  409,   61,
       61,   61,   61,  412,   61,  475,   61,   61,   61,  399,
      400,  395,  395,  395,  395,  395,  395,  401,  402,  403,
      404,   61,   61,  408,  409,   61,   61,   61,   61,  412,
       61,  475,   61,   61,   61,  405,  405,  410,  405,  405,
      405,  405,  405,  405,  406,  413,  405,  414,  418,   61,
      415,  416,  419,   61,   61,  417,  405,  405,   61,   61,

       61,  420,  973,  410,   61,   61,  421,  973,   61,  973,
       61,  413,  422,  414,  418,   61,  415,  416,  419,   61,
       61,  417,  425,  424,   61,   61,   61,  420,   61,   61,
       61,   61,  421,  423,   61,   61,   61,  428,  422,  429,
      430,   61,   61,   61,  431,   61,   61,  433,  425,  424,
      432,  436,  437,  973,   61,   61,   61,  435,  434,  423,
      973,   61,  440,  428,   61,  429,  430,   61,   61,   61,
      431,   61,   61,  433,   61,   61,  432,  439,   61,  438,
       61,  441,   61,  435,  434,   61,   61,   61,  440,  442,
       61,   61,  443,   61,  444,   61,  446,  447,   61,  445,

       61,   61,  973,  439,   61,  438,   61,  441,   61,   61,
      973,   61,   61,   61,  973,  442,  973,   61,  443,   61,
      444,   61,   61,  447,   61,  445,  469,  471,   61,  973,
       61,  973,  973,  973,   61,   61,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  468,  973,  973,   61,  973,
      973,  973,  469,  471,   61,  248,   61,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  250,  248,  973,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  388,   61,
      455,  455,  455,  455,  455,  455,  973,  973,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  973,  973,  973,

      973,  973,  973,  973,   61,   61,  455,  455,  455,  455,
      455,  455,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  472,  498,  457,  457,  457,  457,  457,  457,  458,
       61,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      973,   61,  973,  973,  973,  973,  973,  472,  498,  457,
      457,  457,  457,  457,  457,  185,  973,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  185,   61,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  325,  480,  460,
      460,  460,  460,  460,  460,  973,   61,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  973,  973,  973,  973,

      973,  973,  973,  973,  480,  460,  460,  460,  460,  460,
      460,  185,   61,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  462,  474,  463,  463,  463,  463,  463,  463,
      973,  470,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  467,  973,   61,   61,  499,   61,  973,  473,  474,
      463,  463,  463,  463,  463,  463,  464,  470,  476,  465,
       61,   61,  478,   61,  484,  466,  973,  467,  477,   61,
       61,  499,   61,  479,  473,  973,   61,  478,  973,   61,
      973,  485,  464,  973,  476,  465,   61,   61,  478,   61,
      484,  466,  488,  486,  477,  487,  490,   61,  481,  479,

       61,   61,   61,  478,  482,   61,  483,  485,  973,  489,
      492,   61,   61,  491,   61,  493,   61,  494,  488,  486,
      973,  487,  490,   61,  481,   61,   61,   61,  495,   61,
      482,   61,  483,   61,  496,  489,  492,   61,   61,  491,
       61,  493,   61,  494,   61,  497,  500,   61,   61,   61,
      973,   61,   61,  501,  495,   61,  503,   61,   61,   61,
      496,   61,  502,  504,   61,  510,   61,  973,   61,  509,
       61,  497,  500,   61,   61,   61,  505,  507,   61,  501,
      508,   61,  503,   61,   61,   61,  506,   61,  502,  504,
       61,  510,   61,   61,   61,  509,   61,  511,   61,  512,

      973,   61,  505,  507,  973,  533,  508,   61,  513,   61,
      515,   61,  506,  534,  514,   61,   61,   61,  516,   61,
       61,   61,   61,  511,   61,  512,  517,   61,   61,  518,
       61,  533,   61,  973,  513,  973,  515,  973,  973,  534,
      514,   61,   61,   61,  516,  973,   61,   61,  973,  973,
      973,  973,  517,  973,   61,  518,   61,  522,   61,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  248,  973,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  248,
      973,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      388,  973,  524,  524,  524,  524,  524,  524,  973,  544,

      524,  524,  524,  524,  524,  524,  524,  524,  524,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  524,  524,
      524,  524,  524,  524,  248,  544,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  526,  536,  527,  527,  527,
      527,  527,  527,  973,   61,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  973,  973,   61,  973,  973,  538,
      973,  973,  536,  527,  527,  527,  527,  527,  527,  185,
       61,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      325,  185,   61,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  462,   61,  530,  530,  530,  530,  530,  530,

      973,  973,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  973,  973,  973,  973,  973,  973,  973,  973,   61,
      530,  530,  530,  530,  530,  530,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  537,  535,  532,  532,  532,
      532,  532,  532,   61,   61,  973,  540,  541,   61,   61,
      973,   61,  973,  542,  543,  539,  546,  973,  973,   61,
      973,  537,  535,  532,  532,  532,  532,  532,  532,   61,
       61,   61,  540,  541,   61,   61,   61,   61,  545,  542,
      543,  539,  546,  547,  549,   61,  550,   61,  548,   61,
      551,  553,  552,  555,   61,   61,   61,   61,  554,   61,

       61,   61,   61,  973,  545,   61,  556,   61,   61,  547,
      549,  557,  550,   61,  548,   61,  551,  553,  552,  555,
       61,   61,   61,   61,  554,   61,   61,   61,  558,  559,
      561,   61,  556,   61,   61,  560,  973,  557,   61,   61,
       61,   61,   61,  563,  562,   61,   61,  564,  565,   61,
       61,  973,  973,  569,  973,  559,  561,  973,  973,  566,
       61,  560,   61,  567,   61,   61,   61,   61,   61,  563,
      562,   61,   61,  564,  565,   61,   61,  568,  570,   61,
      573,   61,  574,  571,  572,  566,   61,   61,   61,  567,
       61,   61,   61,   61,   61,  575,   61,   61,  576,  578,

       61,   61,  973,  568,  570,   61,  573,   61,  574,  571,
      572,   61,  579,   61,  577,   61,   61,   61,   61,   61,
       61,  575,   61,   61,  576,  578,   61,   61,   61,  580,
      601,   61,  606,  973,   61,  973,  973,   61,  579,  973,
      577,   61,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  973,  973,   61,   61,  580,  601,   61,  606,  248,
       61,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      388,  248,  973,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  526,  973,  587,  587,  587,  587,  587,  587,
      973,  973,  587,  587,  587,  587,  587,  587,  587,  587,

      587,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      587,  587,  587,  587,  587,  587,  588,  588,  588,  588,
      588,  588,  588,  588,  588,  595,  598,  589,  589,  589,
      589,  589,  589,  973,   61,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  973,   61,  973,  973,  973,  973,
      973,  595,  598,  589,  589,  589,  589,  589,  589,  185,
       61,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      462,   61,  591,  591,  591,  591,  591,  591,  973,   61,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  973,
      973,  973,  973,  973,  973,  973,  605,  617,  591,  591,

      591,  591,  591,  591,  185,   61,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  593,  596,  594,  594,  594,
      594,  594,  594,  597,  599,   61,  600,  973,  602,  973,
       61,   61,  973,   61,   61,   61,   61,  603,  607,  604,
      973,  973,  596,  594,  594,  594,  594,  594,  594,  597,
      599,   61,  600,   61,  602,   61,   61,   61,   61,   61,
       61,   61,   61,  603,  607,  604,   61,  609,  612,  608,
      610,  611,  973,  613,   61,  618,   61,   61,  614,   61,
       61,   61,  615,   61,   61,   61,  616,   61,   61,  619,
      973,   61,   61,  609,  612,  608,  610,  611,   61,  613,

       61,  618,   61,   61,  614,  621,   61,  620,  615,   61,
      623,   61,  616,   61,   61,   61,  622,   61,   61,  624,
      625,   61,  626,   61,   61,   61,  627,   61,  628,   61,
      630,  631,   61,  620,  629,   61,  623,   61,   61,   61,
      973,   61,  622,   61,   61,  624,  625,   61,  626,   61,
       61,   61,  627,   61,  628,   61,  630,  631,   61,  632,
      629,   61,   61,   61,   61,   61,   61,  633,   61,   61,
       61,  634,   61,  635,  973,  973,   61,  973,  973,  973,
      973,  973,  973,  658,  648,  632,   61,   61,   61,   61,
      973,  663,   61,  633,   61,  973,   61,  634,   61,  635,

      585,  585,  585,  585,  585,  585,  585,  585,  585,  658,
      648,  973,   61,   61,  973,   61,  248,  663,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  526,   61,  640,
      640,  640,  640,  640,  640,  973,   61,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  973,   61,  973,  973,
      973,  973,  973,  973,   61,  640,  640,  640,  640,  640,
      640,  248,   61,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  642,   61,  643,  643,  643,  643,  643,  643,
      973,  654,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  973,  973,   61,  973,  973,  973,  973,  973,  973,

      643,  643,  643,  643,  643,  643,  185,  654,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  462,  185,   61,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  593,
      973,  645,  645,  645,  645,  645,  645,  973,  973,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  973,  973,
      973,  973,  660,  973,  973,  973,  653,  645,  645,  645,
      645,  645,  645,  646,  646,  646,  646,  646,  646,  646,
      646,  646,   61,  655,  647,  647,  647,  647,  647,  647,
       61,  650,  653,  651,  649,   61,   61,  652,   61,   61,
       61,  656,  973,  973,  659,   61,   61,  973,   61,  655,

      647,  647,  647,  647,  647,  647,   61,  650,  661,  651,
      649,   61,   61,  652,   61,   61,   61,  656,  657,  662,
      659,   61,   61,  664,  665,   61,  666,   61,  667,  973,
      669,  671,  672,  673,  661,  668,  670,   61,   61,   61,
       61,   61,   61,   61,  657,  662,   61,   61,   61,  664,
      665,   61,  666,   61,  667,   61,  669,  671,  672,  673,
       61,  668,  670,   61,   61,   61,   61,   61,   61,   61,
      674,   61,   61,   61,   61,  675,  676,   61,   61,  677,
       61,   61,   61,   61,  693,   61,   61,   61,   61,  678,
       61,  973,   61,  973,  973,  973,  674,   61,  973,  973,

      973,  675,  676,   61,   61,  677,   61,   61,   61,   61,
      693,   61,  973,   61,   61,  678,   61,  248,   61,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  526,  973,
      973,  973,  973,   61,  248,  973,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  642,  697,  684,  684,  684,
      684,  684,  684,  973,  973,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  973,  973,  973,  973,  973,  973,
      973,  699,  697,  684,  684,  684,  684,  684,  684,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  694,   61,
      686,  686,  686,  686,  686,  686,  973,  699,  688,  688,

      688,  688,  688,  688,  688,  688,  688,  973,  973,  973,
      973,  973,  973,  973,  694,   61,  686,  686,  686,  686,
      686,  686,  185,  973,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  593,  696,  688,  688,  688,  688,  688,
      688,  973,   61,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  973,  973,  973,  973,  973,  973,  705,  973,
      696,  688,  688,  688,  688,  688,  688,  185,   61,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  690,  692,
      691,  691,  691,  691,  691,  691,  695,  698,  700,  701,
       61,  702,   61,   61,  703,   61,   61,   61,   61,  973,

       61,  704,   61,   61,  973,  692,  691,  691,  691,  691,
      691,  691,  695,  698,  700,  701,   61,  702,   61,   61,
      703,   61,   61,   61,   61,  706,   61,  704,   61,   61,
      707,  708,   61,  709,  714,  710,  711,  713,   61,   61,
      712,   61,  715,   61,   61,   61,  728,  729,   61,   61,
       61,  706,   61,   61,   61,   61,  707,  708,   61,  709,
      714,  710,  711,  713,   61,   61,  712,   61,  715,   61,
       61,   61,  728,  729,   61,   61,   61,  973,   61,   61,
       61,   61,  248,  973,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  642,   61,  720,  720,  720,  720,  720,

      720,  973,  733,  720,  720,  720,  720,  720,  720,  720,
      720,  720,  973,  973,  973,  973,  973,  973,  973,  973,
       61,  720,  720,  720,  720,  720,  720,  248,  733,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  722,  732,
      723,  723,  723,  723,  723,  723,  973,   61,  723,  723,
      723,  723,  723,  723,  723,  723,  723,  973,  973,   61,
      973,  973,  973,  973,  973,  732,  723,  723,  723,  723,
      723,  723,  185,   61,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  593,  185,   61,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  690,  973,  725,  725,  725,

      725,  725,  725,  973,  973,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  973,  973,  973,  973,  973,  973,
      973,  973,  730,  725,  725,  725,  725,  725,  725,  726,
      726,  726,  726,  726,  726,  726,  726,  726,   61,  731,
      727,  727,  727,  727,  727,  727,  734,  735,  730,  736,
       61,   61,   61,  737,   61,   61,  742,  739,   61,  738,
       61,   61,   61,  973,   61,  731,  727,  727,  727,  727,
      727,  727,  734,  735,   61,  736,   61,   61,   61,  737,
       61,   61,  740,  739,   61,  738,   61,   61,   61,  741,
       61,  743,  744,   61,  759,  745,   61,  760,  761,   61,

       61,   61,   61,   61,   61,   61,  973,   61,  740,  973,
      973,  973,  973,  973,  973,  741,   61,  743,  744,   61,
      759,  745,   61,  760,  761,   61,  973,   61,   61,   61,
       61,   61,  248,   61,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  642,  248,  973,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  722,   61,  751,  751,  751,
      751,  751,  751,  973,  973,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  973,  973,  973,  973,  973,  973,
      973,  796,   61,  751,  751,  751,  751,  751,  751,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  764,   61,

      753,  753,  753,  753,  753,  753,  973,   61,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  973,   61,  973,
      973,  973,  973,  973,  764,   61,  753,  753,  753,  753,
      753,  753,  185,   61,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  690,   61,  755,  755,  755,  755,  755,
      755,  973,   61,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  973,  765,  973,  973,  973,  973,  973,  973,
      973,  755,  755,  755,  755,  755,  755,  185,   61,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  757,  766,
      758,  758,  758,  758,  758,  758,  762,   61,   61,  767,

      768,  770,  769,   61,   61,  973,   61,   61,  771,   61,
      788,  772,   61,   61,   61,  766,  758,  758,  758,  758,
      758,  758,  762,   61,   61,  767,  768,  770,  769,   61,
       61,  773,   61,   61,  771,   61,  973,  772,   61,   61,
       61,  973,  973,  793,   61,   61,  973,   61,  779,  779,
      779,  779,  779,  779,  779,  779,  779,  773,  973,  973,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  793,
       61,   61,  973,   61,  248,  973,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  722,  819,  779,  779,  779,
      779,  779,  779,  185,  820,  391,  391,  391,  391,  391,

      391,  391,  391,  391,  690,  818,  973,  973,  973,  973,
      973,  973,  819,  779,  779,  779,  779,  779,  779,  248,
      820,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      781,   61,  782,  782,  782,  782,  782,  782,  973,   61,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  973,
      973,  973,  973,  973,  973,  973,  973,   61,  782,  782,
      782,  782,  782,  782,  185,   61,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  757,  787,  784,  784,  784,
      784,  784,  784,  973,  973,  973,  973,  973,  973,  973,
      973,  973,   61,  808,  808,  808,  808,  808,  808,  808,

      808,  808,  787,  784,  784,  784,  784,  784,  784,  785,
      785,  785,  785,  785,  785,  785,  785,  785,   61,  790,
      786,  786,  786,  786,  786,  786,   61,  791,  973,  973,
      789,  973,  973,  973,  797,   61,  973,  800,  816,  794,
       61,   61,  798,  792,   61,  790,  786,  786,  786,  786,
      786,  786,   61,  791,   61,  795,  789,   61,   61,  799,
      797,   61,  801,  800,  816,  794,   61,   61,  798,  792,
       61,  973,  973,   61,   61,   61,  973,  843,  973,  973,
       61,  795,  973,   61,   61,  799,  973,  248,  801,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  722,   61,

       61,   61,  248,  843,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  781,  848,  808,  808,  808,  808,  808,
      808,  973,  973,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  973,  973,  973,  973,  973,  973,  973,  829,
      848,  808,  808,  808,  808,  808,  808,  809,  809,  809,
      809,  809,  809,  809,  809,  809,   61,  849,  810,  810,
      810,  810,  810,  810,  973,  829,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  973,  817,  973,  973,  973,
      973,  973,   61,  849,  810,  810,  810,  810,  810,  810,
      185,   61,  811,  811,  811,  811,  811,  811,  811,  811,

      811,  757,  817,  812,  812,  812,  812,  812,  812,  973,
       61,  973,  973,  973,  973,  973,  973,   61,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  973,  973,  812,
      812,  812,  812,  812,  812,  185,   61,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  814,  821,  815,  815,
      815,  815,  815,  815,  823,  822,  824,  825,  826,   61,
      827,  830,  844,   61,   61,  828,   61,   61,  973,   61,
      973,  973,  973,  821,  815,  815,  815,  815,  815,  815,
      823,  822,   61,   61,  854,   61,   61,  830,  844,   61,
       61,  828,   61,   61,  973,   61,  839,  839,  839,  839,

      839,  839,  839,  839,  839,  973,  973,   61,   61,   61,
      973,  973,   61,  248,  855,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  781,  873,  837,  837,  837,  837,
      837,  837,  185,   61,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  757,   61,  973,  973,  973,  973,  973,
      973,  873,  837,  837,  837,  837,  837,  837,  248,  973,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  874,
       61,  839,  839,  839,  839,  839,  839,  973,  973,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  973,  973,
      973,  973,  973,  973,  973,  874,  880,  839,  839,  839,

      839,  839,  839,  185,  850,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  814,  845,  841,  841,  841,  841,
      841,  841,  851,  852,   61,   61,  853,  846,  973,  856,
      850,   61,   61,  857,  847,   61,  881,  868,   61,   61,
      858,  845,  841,  841,  841,  841,  841,  841,  851,   61,
       61,   61,   61,  846,   61,  856,   61,   61,   61,  857,
      847,   61,  881,  868,   61,   61,  858,  973,   61,  973,
      973,  973,  973,  973,  973,   61,  973,  877,   61,  973,
       61,  248,   61,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  781,  248,   61,  863,  863,  863,  863,  863,

      863,  863,  863,  863,   61,  893,  864,  864,  864,  864,
      864,  864,  973,   61,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  973,  973,  973,  973,  973,  973,  973,
       61,  893,  864,  864,  864,  864,  864,  864,  185,   61,
      865,  865,  865,  865,  865,  865,  865,  865,  865,  814,
      869,  866,  866,  866,  866,  866,  866,  973,  878,  866,
      866,  866,  866,  866,  866,  866,  866,  866,   61,  870,
      875,  973,   61,  876,  879,  973,  869,  866,  866,  866,
      866,  866,  866,   61,  871,  889,  890,  894,  892,   61,
      872,   61,   61,   61,   61,  870,  875,   61,   61,  876,

      891,   61,   61,  973,   61,  973,  973,  973,  973,   61,
      871,  889,  890,  894,  892,   61,  872,   61,   61,   61,
      973,  973,  973,   61,  973,  973,  891,   61,   61,  248,
       61,  886,  886,  886,  886,  886,  886,  886,  886,  886,
       61,   61,  887,  887,  887,  887,  887,  887,  973,   61,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  973,
      896,   61,   61,  973,  973,   61,   61,   61,  887,  887,
      887,  887,  887,  887,  185,   61,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  814,  896,   61,   61,  895,
      895,   61,  895,  895,  895,  895,  895,  895,   61,  248,

      895,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      895,  895,  902,  903,  904,  905,  907,  908,  973,  973,
      973,  973,  973,  922,   61,  973,  923,  973,   61,  906,
      906,   61,  906,  906,  906,  906,  906,  906,  902,  973,
      906,  905,  907,  908,  910,  911,  917,   61,   61,  922,
      906,  906,  923,  916,   61,  918,  919,   61,   61,  973,
       61,   61,   61,  926,   61,  920,  921,  973,  924,  925,
      910,  911,  917,   61,   61,  931,   61,  973,  973,  916,
      934,  918,  919,   61,   61,   61,   61,   61,   61,  926,
       61,  920,  921,  927,  924,  925,  935,  932,  933,  936,

       61,  931,   61,   61,   61,  937,  934,  938,  939,   61,
       61,   61,  940,   61,   61,   61,  948,  946,  973,  927,
       61,  945,  935,  932,  933,  936,   61,   61,   61,   61,
       61,  937,  949,  938,  939,   61,   61,  951,  940,   61,
       61,   61,  948,  946,  947,   61,   61,  945,  950,   61,
      956,   61,  955,   61,   61,   61,  957,   61,  949,   61,
      958,   61,   61,  951,  963,   61,   61,   61,   61,  973,
      947,   61,  973,  973,  950,   61,  956,   61,  955,  973,
       61,   61,  957,   61,  973,   61,  958,  973,   61,  973,
      963,   61,   61,   61,   61,  973,  973,  973,  973,  973,

      973,  973,  973,  973,  973,  973,   61,   41,   41,   41,
       41,   43,   43,   43,   43,   47,   47,   47,   47,   49,
      973,   49,   49,   50,   50,   50,   50,  116,  973,  116,
      116,  120,  120,  180,  180,  181,  181,  245,  245,  246,
      246,  247,  247,  313,  313,  314,  314,  381,  381,  382,
      382,  383,  383,  407,  973,  407,  407,  448,  448,  449,
      449,  450,  450,  520,  520,  521,  521,  581,  581,  582,
      582,  583,  583,  636,  636,  637,  637,  638,  638,  520,
      520,  680,  680,  681,  681,  716,  716,  717,  717,  718,
      718,  746,  746,  747,  747,  748,  748,  637,  637,  775,

      775,  776,  776,  802,  802,  803,  803,  804,  804,  831,
      831,  832,  832,  834,  834,  717,  717,  860,  860,  861,
      861,  882,  882,  883,  883,  884,  884,  895,  973,  895,
      895,  897,  973,  897,  897,  898,  898,  899,  899,  906,
      973,  906,  906,  909,  973,  909,  909,  775,  775,  913,
      913,  914,  914,  928,  928,  929,  929,  941,  941,  942,
      942,  943,  943,  832,  832,  953,  953,  959,  959,  960,
      960,  961,  961,  965,  965,  968,  968,  969,  969,  971,
      971,  972,  972,    7,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,

      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973
    } ;

static yyconst flex_int16_t yy_chk[5760] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   10,   10,   11,   11,   15,
       17,   27, 1062,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   24,   16,   16,   16,   16,   16,

       16,   28,   16,   37,   61,   24,   17,   27,   24,   28,
       37,   63,   30,   44,   44,   64,   28,   24,   16, 1058,
       24,   16,   16,   16,   16,   16,   16,   28,   16,   37,
       61,   24,   30, 1056,   24,   28,   37,   63,   30,   45,
       45,   64,   28,   24,   16,   20,   20, 1052,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   30,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   21,   21,   32,   21,   32, 1046,   39,   32, 1038,
       21, 1037,   21,   39,   46,   46, 1032,   65, 1028,   21,
     1027,   25, 1023, 1019,  981,  972,   40,   21,   21,   32,
       21,   32,   25,   39,   32,   25,   21,   25,   21,   39,
      971,   66,   40,   65,   29,   21,   22,   25,   22,   22,
       29,   22,   40,   69,   69,   67,   29,   22,   25,   22,
       22,   25,  969,   25,   67,  968,   22,   66,   40,  967,
       29,  966,   22,  965,   22,   22,   29,   22,  964,   69,
       69,   67,   29,   22,   31,   22,   22,  961,   31,   70,

       67,   33,   22,   23,   31,   68,   23,   23,   70,   31,
       31,   23,   33,   71,   23,   33,   23,   23,   33,   74,
       31,   75,   68,   23,   31,   70,  960,   33,  954,   23,
       31,   68,   23,   23,   70,   31,   31,   23,   33,   71,
       23,   33,   23,   23,   33,   74,  953,   75,   68,   23,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      952,   26,   26,   26,   26,   26,   26,  943,   26,  942,
      941,   81,   26,   34,   91,   26,  930,   34,   35,  929,
      928,   26,   38,   35,   35,  914,   38,   26,   26,   26,
       26,   26,   26,   34,   26,   35,   35,   81,   26,   34,

       91,   26,   38,   34,   35,   36,   36,   26,   38,   35,
       35,   73,   38,   76,   77,   36,   77,   78,   73,   34,
      913,   35,   35,   36,   80,   78,   72,   76,   38,   80,
       88,   88,   36,   94,   72,   36,  912,   73,  900,   76,
       77,   36,   77,   78,   73,  899,   72,  898,  884,   36,
       80,   78,   72,   76,  883,   80,   88,   88,   36,   94,
       72,   36,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   72,   54,   54,   54,   54,   54,   54,   79,
       54,   56,   56,   56,   56,   56,   56,   56,   56,   56,
      105,   79,  882,  866,  862,  861,  860,  859,  106,   54,

       54,   54,   54,   54,   54,   79,   54,   59,   59,   59,
       59,   59,   59,   59,   59,   59,  105,   79,   59,   59,
       59,   59,   59,   59,  106,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  179,  179,  179,  179,  179,  179,
      179,  179,  179,   82,   59,   59,   59,   59,   59,   59,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       82,   62,   62,   62,   62,   62,   62,   83,   62,   82,
      837,  834,  832,  831,   92,   84,  812,   85,   90,   92,
       90,   62,  109,   83,   86,   95,   82,   62,   62,   62,
       62,   62,   62,   83,   62,   84,   85,   85,   87,   86,

       92,   84,   89,   85,   90,   92,   90,   62,  109,   83,
       86,   96,   87,   97,   89,   93,   93,   96,  806,   95,
      805,   84,   85,   85,   87,   86,   98,  100,   89,   97,
      100,   98,  107,   99,  101,   99,   99,   96,   87,   97,
       89,   93,   93,   96,   99,   95,  102,  103,  804,  104,
      108,  102,   98,  100,  101,   97,  100,   98,  108,   99,
      101,   99,   99,  126,  103,  111,  107,  103,  104,  110,
       99,  112,  102,  103,  111,  104,  108,  102,  112,  113,
      101,  110,  113,  114,  108,  114,  803,  802,  779,  126,
      103,  111,  107,  103,  104,  110,  127,  112,  776,  775,

      111,  774,  755,  749,  112,  113,  748,  110,  113,  114,
      747,  114,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  127,  117,  117,  117,  117,  117,  117,  124,
      117,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      130,  133,  746,  733,  720,  718,  717,  716,  177,  117,
      117,  117,  117,  117,  117,  141,  117,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  130,  133,  121,  121,
      121,  121,  121,  121,  177,  141,  688,  682,  140,  681,
      184,  141,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  680,  679,  640,  121,  121,  121,  121,  121,  121,

      123,  141,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  140,  123,  123,  123,  123,  123,  123,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  140,  123,
      123,  123,  123,  123,  123,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  131,  125,  125,  125,  125,
      125,  125,  128,  129,  132,  128,  638,  637,  131,  129,
      134,  137,  134,  137,  132,  138,  135,  136,  136,  138,
      636,  131,  125,  125,  125,  125,  125,  125,  128,  129,
      132,  128,  135,  139,  131,  129,  134,  137,  134,  137,

      132,  138,  135,  136,  136,  138,  142,  145,  143,  139,
      144,  146,  144,  146,  145,  149,  591,  584,  135,  139,
      151,  583,  582,  142,  143,  147,  148,  154,  154,  150,
      152,  149,  142,  145,  143,  139,  144,  146,  144,  146,
      145,  149,  155,  147,  148,  150,  153,  156,  152,  142,
      143,  147,  148,  166,  151,  150,  152,  149,  581,  156,
      153,  524,  154,  159,  521,  520,  157,  519,  158,  147,
      148,  150,  153,  156,  152,  157,  155,  158,  159,  157,
      151,  160,  161,  164,  157,  156,  153,  166,  154,  159,
      163,  162,  157,  160,  158,  164,  163,  165,  161,  460,

      165,  157,  155,  158,  159,  157,  168,  160,  161,  164,
      157,  162,  170,  166,  167,  167,  163,  162,  168,  160,
      171,  164,  163,  165,  161,  169,  165,  169,  190,  172,
      170,  173,  168,  175,  192,  174,  171,  162,  170,  201,
      167,  167,  176,  199,  168,  172,  171,  174,  205,  173,
      175,  169,  176,  169,  190,  172,  170,  173,  451,  175,
      192,  174,  171,  199,  450,  201,  449,  448,  176,  199,
      386,  172,  383,  174,  205,  173,  175,  382,  176,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  199,
      178,  178,  178,  178,  178,  178,  188,  178,  188,  188,

      188,  188,  188,  188,  188,  188,  188,  381,  323,  315,
      194,  314,  313,  312,  257,  247,  178,  178,  178,  178,
      178,  178,  206,  178,  183,  206,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  246,  183,  183,  183,
      183,  183,  183,  245,  194,  244,  217,  182,  206,  181,
      180,  206,  120,  118,   55,  198,   51,   50,   47,   42,
       19,   18,  198,  183,  183,  183,  183,  183,  183,  186,
      194,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  198,  186,  186,  186,  186,  186,  186,  198,  191,
       14,   12,    7,    4,    3,    0,    0,    0,  224,    0,

        0,    0,    0,    0,    0,  238,  195,  191,  186,  186,
      186,  186,  186,  186,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  191,  224,  187,  187,  187,  187,  187,
      187,  238,    0,  191,    0,    0,    0,    0,    0,    0,
      195,    0,    0,    0,  200,    0,    0,    0,  193,  191,
      193,  187,  187,  187,  187,  187,  187,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  195,  196,  189,  189,
      189,  189,  189,  189,  193,  197,  193,  197,  200,  202,
      203,  202,  203,  196,  208,  209,  207,  209,  204,    0,
      211,  211,    0,  196,  189,  189,  189,  189,  189,  189,

      204,  197,  207,  197,  200,  202,  203,  202,  203,  196,
      215,  209,  207,  209,  204,  210,  211,  211,  208,  212,
      213,  213,  212,  215,  214,  216,  204,  219,  207,  219,
        0,  210,    0,  214,  214,  214,  215,  218,  216,    0,
        0,  210,  214,    0,  208,  212,  213,  213,  212,  215,
      214,  216,  218,  219,  218,  219,  220,  210,  221,  214,
      214,  214,  220,  218,  216,  222,  223,  221,  214,  225,
      226,  227,  223,  228,  229,  229,    0,  228,  218,    0,
      218,  222,  220,    0,  221,  225,  231,  226,  220,  227,
      233,  222,  223,  221,    0,  225,  226,  227,  223,  228,

      229,  229,  231,  228,  230,  232,  233,  222,  237,  230,
      234,  225,  231,  226,  236,  227,  233,  234,  235,  235,
      232,  239,  232,  236,  242,    0,  258,  258,  231,  259,
      230,  232,  233,  240,  259,  230,  234,  260,  261,  260,
      236,  239,  237,  234,  235,  235,  232,  239,  232,  236,
      240,  241,  258,  258,  273,  259,  297,  241,  242,  240,
      259,    0,    0,  260,  261,  260,    0,  239,  237,  300,
        0,    0,  264,    0,    0,    0,  240,  241,    0,    0,
      273,    0,  297,  241,  242,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  249,  300,  249,  249,  249,  249,

      249,  249,  249,  249,  249,  249,  264,  249,  249,  249,
      249,  249,  249,  251,    0,  251,  251,  251,  251,  251,
      251,  251,  251,  251,    0,    0,    0,    0,    0,    0,
        0,    0,  264,  249,  249,  249,  249,  249,  249,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  263,  342,
      250,  250,  250,  250,  250,  250,  252,  263,  252,  252,
      252,  252,  252,  252,  252,  252,  252,    0,  265,    0,
        0,    0,    0,    0,  263,  342,  250,  250,  250,  250,
      250,  250,  253,  263,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  285,  253,  253,  253,  253,  253,

      253,  254,  265,  254,  254,  254,  254,  254,  254,  254,
      254,  254,    0,  285,    0,    0,    0,    0,    0,    0,
      285,  253,  253,  253,  253,  253,  253,  255,  265,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  285,
      255,  255,  255,  255,  255,  255,  256,  267,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  266,  266,  267,
      269,  269,  262,  262,  262,  270,  255,  255,  255,  255,
      255,  255,  262,  267,  268,  271,  274,  275,  268,  268,
      272,  270,  271,  266,  266,  267,  269,  269,  262,  262,
      262,  270,  272,  274,  276,  278,  281,  277,  262,  356,

      268,  271,  274,  279,  268,  268,  272,  270,  271,  277,
      278,  275,  281,  283,  280,  279,  286,  284,  272,  274,
      280,  278,  281,  277,  282,  356,  287,  288,  276,  279,
      282,  286,  287,  283,    0,  277,  278,  275,  281,  283,
      280,  279,  286,  288,  289,  291,  280,    0,  290,  295,
      282,  284,  287,  288,  276,  290,  282,  286,  287,  283,
      289,  292,  296,  296,  294,  291,  293,  294,  292,  288,
      289,  291,  293,  303,  290,  299,  299,  284,  301,  298,
      302,  290,  303,  295,  301,  309,  289,  292,  296,  296,
      294,  291,  293,  294,  292,  298,  302,  304,  293,  303,

      305,  299,  299,  305,  301,  298,  302,  306,  303,  295,
      301,  304,  307,  308,  311,  308,  329,  307,  329,  309,
      357,  298,  302,  304,  361,  310,  305,  306,  310,  305,
        0,  311,    0,  306,    0,    0,    0,  304,  307,  308,
      311,  308,  329,  307,  329,  309,  357,    0,    0,    0,
      361,  310,    0,  306,  310,    0,  316,  311,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  317,    0,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,    0,
      317,  317,  317,  317,  317,  317,  318,  369,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  321,  321,  321,

      321,  321,  321,  321,  321,  321,  317,  317,  317,  317,
      317,  317,  319,  369,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  328,  319,  319,  319,  319,  319,
      319,  320,  373,  320,  320,  320,  320,  320,  320,  320,
      320,  320,    0,    0,  328,    0,    0,  327,    0,    0,
      328,  319,  319,  319,  319,  319,  319,  322,  373,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  324,
      328,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  327,  324,  324,  324,  324,  324,  324,  326,    0,
      326,  326,  326,  326,  326,  326,  326,  326,  326,    0,

        0,    0,    0,    0,    0,    0,  340,  327,  324,  324,
      324,  324,  324,  324,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  330,  331,  325,  325,  325,  325,  325,
      325,  332,  333,  334,  335,  334,  331,  337,  338,  330,
      340,  338,  335,  341,  337,  405,  341,  332,  333,  330,
      331,  325,  325,  325,  325,  325,  325,  332,  333,  334,
      335,  334,  331,  337,  338,  330,  340,  338,  335,  341,
      337,  405,  341,  332,  333,  336,  336,  339,  336,  336,
      336,  336,  336,  336,  336,  343,  336,  344,  348,  339,
      345,  346,  349,  343,  347,  347,  336,  336,  345,  346,

      349,  350,    0,  339,  344,  351,  351,    0,  348,    0,
      350,  343,  352,  344,  348,  339,  345,  346,  349,  343,
      347,  347,  355,  354,  345,  346,  349,  350,  355,  352,
      344,  351,  351,  353,  348,  354,  350,  358,  352,  359,
      360,  353,  359,  360,  362,  358,  362,  364,  355,  354,
      363,  367,  368,    0,  355,  352,  364,  366,  365,  353,
        0,  354,  372,  358,  363,  359,  360,  353,  359,  360,
      362,  358,  362,  364,  365,  366,  363,  371,  372,  370,
      371,  374,  364,  366,  365,  367,  368,  370,  372,  375,
      363,  375,  376,  374,  377,  377,  379,  380,  376,  378,

      365,  366,    0,  371,  372,  370,  371,  374,  378,  380,
        0,  367,  368,  370,    0,  375,    0,  375,  376,  374,
      377,  377,  399,  380,  376,  378,  399,  401,  401,    0,
      379,    0,    0,    0,  378,  380,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  398,    0,    0,  399,    0,
        0,    0,  399,  401,  401,  385,  379,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  387,    0,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  398,
      387,  387,  387,  387,  387,  387,  389,    0,  389,  389,
      389,  389,  389,  389,  389,  389,  389,    0,    0,    0,

        0,    0,    0,    0,  408,  398,  387,  387,  387,  387,
      387,  387,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  402,  426,  388,  388,  388,  388,  388,  388,  390,
      408,  390,  390,  390,  390,  390,  390,  390,  390,  390,
        0,  402,    0,    0,    0,    0,    0,  402,  426,  388,
      388,  388,  388,  388,  388,  391,    0,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  392,  402,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  410,  392,
      392,  392,  392,  392,  392,  393,  410,  393,  393,  393,
      393,  393,  393,  393,  393,  393,    0,    0,    0,    0,

        0,    0,    0,    0,  410,  392,  392,  392,  392,  392,
      392,  394,  410,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  404,  394,  394,  394,  394,  394,  394,
      395,  400,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  397,    0,  404,  397,  427,  400,    0,  403,  404,
      394,  394,  394,  394,  394,  394,  396,  400,  406,  396,
      403,  407,  407,  412,  412,  396,    0,  397,  406,  404,
      397,  427,  400,  409,  403,    0,  406,  406,    0,  409,
        0,  413,  396,    0,  406,  396,  403,  407,  407,  412,
      412,  396,  416,  414,  406,  415,  418,  413,  411,  409,

      414,  415,  406,  406,  411,  409,  411,  413,    0,  417,
      420,  411,  416,  419,  418,  421,  420,  422,  416,  414,
        0,  415,  418,  413,  411,  417,  414,  415,  423,  419,
      411,  421,  411,  422,  424,  417,  420,  411,  416,  419,
      418,  421,  420,  422,  423,  425,  428,  433,  425,  424,
        0,  417,  429,  429,  423,  419,  431,  421,  431,  422,
      424,  430,  430,  432,  432,  438,  428,    0,  444,  437,
      423,  425,  428,  433,  425,  424,  434,  435,  429,  429,
      436,  437,  431,  435,  431,  438,  434,  430,  430,  432,
      432,  438,  428,  434,  444,  437,  439,  439,  436,  440,

        0,  440,  434,  435,    0,  464,  436,  437,  441,  435,
      443,  438,  434,  465,  442,  441,  442,  443,  445,  434,
      465,  464,  439,  439,  436,  440,  446,  440,  446,  447,
      445,  464,  447,    0,  441,    0,  443,    0,    0,  465,
      442,  441,  442,  443,  445,    0,  465,  464,    0,    0,
        0,    0,  446,    0,  446,  447,  445,  452,  447,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  453,    0,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  454,
        0,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,    0,  454,  454,  454,  454,  454,  454,  455,  475,

      455,  455,  455,  455,  455,  455,  455,  455,  455,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  454,  454,
      454,  454,  454,  454,  456,  475,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  467,  456,  456,  456,
      456,  456,  456,  457,  491,  457,  457,  457,  457,  457,
      457,  457,  457,  457,    0,    0,  467,    0,    0,  469,
        0,    0,  467,  456,  456,  456,  456,  456,  456,  459,
      491,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  461,  467,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  469,  461,  461,  461,  461,  461,  461,

      463,    0,  463,  463,  463,  463,  463,  463,  463,  463,
      463,    0,    0,    0,    0,    0,    0,    0,    0,  469,
      461,  461,  461,  461,  461,  461,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  468,  466,  462,  462,  462,
      462,  462,  462,  466,  468,    0,  471,  472,  473,  472,
        0,  474,    0,  473,  474,  470,  477,    0,    0,  471,
        0,  468,  466,  462,  462,  462,  462,  462,  462,  466,
      468,  470,  471,  472,  473,  472,  477,  474,  476,  473,
      474,  470,  477,  478,  480,  471,  481,  476,  479,  479,
      482,  484,  483,  486,  481,  486,  482,  470,  485,  478,

      480,  483,  477,    0,  476,  485,  487,  484,  488,  478,
      480,  488,  481,  476,  479,  479,  482,  484,  483,  486,
      481,  486,  482,  487,  485,  478,  480,  483,  489,  490,
      493,  485,  487,  484,  488,  492,    0,  488,  492,  493,
      494,  495,  496,  498,  497,  490,  497,  499,  500,  487,
      503,    0,    0,  505,    0,  490,  493,    0,    0,  501,
      500,  492,  489,  502,  492,  493,  494,  495,  496,  498,
      497,  490,  497,  499,  500,  501,  503,  504,  506,  502,
      509,  514,  510,  507,  508,  501,  500,  505,  489,  502,
      504,  507,  518,  508,  510,  511,  506,  509,  512,  515,

      512,  501,    0,  504,  506,  502,  509,  514,  510,  507,
      508,  511,  516,  505,  513,  515,  504,  507,  518,  508,
      510,  511,  506,  509,  512,  515,  512,  516,  513,  517,
      539,  539,  544,    0,  517,    0,    0,  511,  516,    0,
      513,  515,  522,  522,  522,  522,  522,  522,  522,  522,
      522,    0,    0,  516,  513,  517,  539,  539,  544,  523,
      517,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  525,    0,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,    0,  525,  525,  525,  525,  525,  525,
      527,    0,  527,  527,  527,  527,  527,  527,  527,  527,

      527,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      525,  525,  525,  525,  525,  525,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  533,  536,  526,  526,  526,
      526,  526,  526,  530,  536,  530,  530,  530,  530,  530,
      530,  530,  530,  530,    0,  533,    0,    0,    0,    0,
        0,  533,  536,  526,  526,  526,  526,  526,  526,  529,
      536,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  533,  529,  529,  529,  529,  529,  529,  532,  561,
      532,  532,  532,  532,  532,  532,  532,  532,  532,    0,
        0,    0,    0,    0,    0,    0,  543,  555,  529,  529,

      529,  529,  529,  529,  531,  561,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  534,  531,  531,  531,
      531,  531,  531,  535,  537,  534,  538,    0,  540,    0,
      543,  555,    0,  535,  540,  538,  537,  541,  545,  542,
        0,    0,  534,  531,  531,  531,  531,  531,  531,  535,
      537,  534,  538,  541,  540,  542,  543,  555,  545,  535,
      540,  538,  537,  541,  545,  542,  546,  547,  550,  546,
      548,  549,    0,  551,  547,  556,  548,  549,  552,  541,
      551,  542,  553,  562,  545,  553,  554,  554,  550,  557,
        0,  556,  546,  547,  550,  546,  548,  549,  552,  551,

      547,  556,  548,  549,  552,  559,  551,  558,  553,  562,
      563,  553,  554,  554,  550,  558,  560,  556,  560,  564,
      565,  568,  566,  557,  552,  566,  567,  565,  569,  567,
      571,  572,  573,  558,  570,  576,  563,  569,  571,  559,
        0,  558,  560,  572,  560,  564,  565,  568,  566,  557,
      570,  566,  567,  565,  569,  567,  571,  572,  573,  574,
      570,  576,  577,  569,  571,  559,  574,  575,  578,  572,
      575,  579,  604,  580,    0,    0,  570,    0,    0,    0,
        0,    0,    0,  606,  595,  574,  595,  579,  577,  580,
        0,  611,  574,  575,  578,    0,  575,  579,  604,  580,

      585,  585,  585,  585,  585,  585,  585,  585,  585,  606,
      595,    0,  595,  579,    0,  580,  586,  611,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  615,  586,
      586,  586,  586,  586,  586,  587,  618,  587,  587,  587,
      587,  587,  587,  587,  587,  587,    0,  622,    0,    0,
        0,    0,    0,    0,  615,  586,  586,  586,  586,  586,
      586,  588,  618,  588,  588,  588,  588,  588,  588,  588,
      588,  588,  588,  622,  588,  588,  588,  588,  588,  588,
      589,  601,  589,  589,  589,  589,  589,  589,  589,  589,
      589,    0,    0,  601,    0,    0,    0,    0,    0,    0,

      588,  588,  588,  588,  588,  588,  590,  601,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  592,  601,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
        0,  592,  592,  592,  592,  592,  592,  594,    0,  594,
      594,  594,  594,  594,  594,  594,  594,  594,    0,    0,
        0,    0,  608,    0,    0,    0,  600,  592,  592,  592,
      592,  592,  592,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  600,  602,  593,  593,  593,  593,  593,  593,
      596,  597,  600,  598,  596,  598,  608,  599,  597,  599,
      602,  603,    0,    0,  607,  603,  607,    0,  600,  602,

      593,  593,  593,  593,  593,  593,  596,  597,  609,  598,
      596,  598,  608,  599,  597,  599,  602,  603,  605,  610,
      607,  603,  607,  612,  613,  609,  614,  605,  616,    0,
      619,  621,  623,  624,  609,  617,  620,  610,  614,  619,
      613,  612,  620,  621,  605,  610,  625,  626,  616,  612,
      613,  609,  614,  605,  616,  617,  619,  621,  623,  624,
      627,  617,  620,  610,  614,  619,  613,  612,  620,  621,
      628,  629,  625,  626,  616,  630,  631,  632,  633,  634,
      634,  617,  628,  649,  650,  651,  627,  630,  655,  635,
      650,    0,  631,    0,    0,    0,  628,  629,    0,    0,

        0,  630,  631,  632,  633,  634,  634,  635,  628,  649,
      650,  651,    0,  630,  655,  635,  650,  639,  631,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,    0,
        0,    0,    0,  635,  641,    0,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  656,  641,  641,  641,
      641,  641,  641,  643,    0,  643,  643,  643,  643,  643,
      643,  643,  643,  643,    0,    0,    0,    0,    0,    0,
        0,  658,  656,  641,  641,  641,  641,  641,  641,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  652,  652,
      642,  642,  642,  642,  642,  642,  645,  658,  645,  645,

      645,  645,  645,  645,  645,  645,  645,    0,    0,    0,
        0,    0,    0,    0,  652,  652,  642,  642,  642,  642,
      642,  642,  644,    0,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  644,  654,  644,  644,  644,  644,  644,
      644,  647,  654,  647,  647,  647,  647,  647,  647,  647,
      647,  647,    0,    0,    0,    0,    0,    0,  664,    0,
      654,  644,  644,  644,  644,  644,  644,  646,  654,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  648,
      646,  646,  646,  646,  646,  646,  653,  657,  659,  660,
      659,  661,  664,  653,  662,  648,  665,  661,  660,    0,

      662,  663,  663,  657,    0,  648,  646,  646,  646,  646,
      646,  646,  653,  657,  659,  660,  659,  661,  664,  653,
      662,  648,  665,  661,  660,  666,  662,  663,  663,  657,
      667,  668,  666,  669,  676,  670,  671,  675,  675,  667,
      674,  676,  677,  678,  694,  693,  692,  693,  668,  669,
      692,  666,  670,  671,  677,  674,  667,  668,  666,  669,
      676,  670,  671,  675,  675,  667,  674,  676,  677,  678,
      694,  693,  692,  693,  668,  669,  692,    0,  670,  671,
      677,  674,  683,    0,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  695,  683,  683,  683,  683,  683,

      683,  684,  699,  684,  684,  684,  684,  684,  684,  684,
      684,  684,    0,    0,    0,    0,    0,    0,    0,    0,
      695,  683,  683,  683,  683,  683,  683,  685,  699,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  698,
      685,  685,  685,  685,  685,  685,  686,  700,  686,  686,
      686,  686,  686,  686,  686,  686,  686,    0,    0,  698,
        0,    0,    0,    0,    0,  698,  685,  685,  685,  685,
      685,  685,  687,  700,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  689,  698,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,    0,  689,  689,  689,

      689,  689,  689,  691,    0,  691,  691,  691,  691,  691,
      691,  691,  691,  691,    0,    0,    0,    0,    0,    0,
        0,    0,  696,  689,  689,  689,  689,  689,  689,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  696,  697,
      690,  690,  690,  690,  690,  690,  701,  702,  696,  703,
      702,  704,  706,  705,  707,  697,  711,  708,  703,  705,
      713,  705,  701,    0,  696,  697,  690,  690,  690,  690,
      690,  690,  701,  702,  708,  703,  702,  704,  706,  705,
      707,  697,  709,  708,  703,  705,  713,  705,  701,  710,
      711,  712,  714,  714,  728,  715,  730,  729,  731,  736,

      708,  731,  709,  715,  729,  710,    0,  712,  709,    0,
        0,    0,    0,    0,    0,  710,  711,  712,  714,  714,
      728,  715,  730,  729,  731,  736,    0,  731,  709,  715,
      729,  710,  719,  712,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  721,    0,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  741,  721,  721,  721,
      721,  721,  721,  723,    0,  723,  723,  723,  723,  723,
      723,  723,  723,  723,    0,    0,    0,    0,    0,    0,
        0,  766,  741,  721,  721,  721,  721,  721,  721,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  734,  772,

      722,  722,  722,  722,  722,  722,  725,  766,  725,  725,
      725,  725,  725,  725,  725,  725,  725,    0,  734,    0,
        0,    0,    0,    0,  734,  772,  722,  722,  722,  722,
      722,  722,  724,  766,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  734,  724,  724,  724,  724,  724,
      724,  727,  773,  727,  727,  727,  727,  727,  727,  727,
      727,  727,    0,  735,    0,    0,    0,    0,    0,    0,
        0,  724,  724,  724,  724,  724,  724,  726,  773,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  737,
      726,  726,  726,  726,  726,  726,  732,  735,  732,  738,

      739,  742,  740,  739,  740,    0,  737,  742,  743,  743,
      760,  744,  738,  744,  790,  737,  726,  726,  726,  726,
      726,  726,  732,  735,  732,  738,  739,  742,  740,  739,
      740,  745,  737,  742,  743,  743,    0,  744,  738,  744,
      790,    0,    0,  764,  760,  764,  751,  745,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  745,  753,    0,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  764,
      760,  764,    0,  745,  750,    0,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  791,  750,  750,  750,
      750,  750,  750,  754,  792,  754,  754,  754,  754,  754,

      754,  754,  754,  754,  754,  789,    0,    0,    0,    0,
        0,    0,  791,  750,  750,  750,  750,  750,  750,  752,
      792,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  796,  752,  752,  752,  752,  752,  752,  758,  789,
      758,  758,  758,  758,  758,  758,  758,  758,  758,    0,
        0,    0,    0,    0,    0,    0,    0,  796,  752,  752,
      752,  752,  752,  752,  756,  789,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  759,  756,  756,  756,
      756,  756,  756,    0,    0,    0,    0,    0,    0,    0,
        0,  782,  759,  782,  782,  782,  782,  782,  782,  782,

      782,  782,  759,  756,  756,  756,  756,  756,  756,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  759,  762,
      757,  757,  757,  757,  757,  757,  761,  763,    0,    0,
      761,    0,    0,    0,  767,  762,    0,  770,  787,  765,
      770,  787,  768,  763,  799,  762,  757,  757,  757,  757,
      757,  757,  761,  763,  767,  765,  761,  765,  768,  769,
      767,  762,  771,  770,  787,  765,  770,  787,  768,  763,
      799,    0,    0,  816,  771,  769,    0,  816,    0,    0,
      767,  765,    0,  765,  768,  769,    0,  778,  771,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  816,

      771,  769,  780,  816,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  819,  780,  780,  780,  780,  780,
      780,  784,    0,  784,  784,  784,  784,  784,  784,  784,
      784,  784,    0,    0,    0,    0,    0,    0,    0,  800,
      819,  780,  780,  780,  780,  780,  780,  781,  781,  781,
      781,  781,  781,  781,  781,  781,  800,  820,  781,  781,
      781,  781,  781,  781,  786,  800,  786,  786,  786,  786,
      786,  786,  786,  786,  786,    0,  788,    0,    0,    0,
        0,    0,  800,  820,  781,  781,  781,  781,  781,  781,
      783,  788,  783,  783,  783,  783,  783,  783,  783,  783,

      783,  783,  788,  783,  783,  783,  783,  783,  783,    0,
      821,    0,    0,    0,    0,    0,  808,  788,  808,  808,
      808,  808,  808,  808,  808,  808,  808,    0,    0,  783,
      783,  783,  783,  783,  783,  785,  821,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  793,  785,  785,
      785,  785,  785,  785,  795,  794,  797,  797,  797,  795,
      797,  801,  817,  793,  794,  798,  817,  798,    0,  801,
        0,    0,    0,  793,  785,  785,  785,  785,  785,  785,
      795,  794,  824,  843,  826,  795,  797,  801,  817,  793,
      794,  798,  817,  798,  810,  801,  810,  810,  810,  810,

      810,  810,  810,  810,  810,    0,    0,  826,  824,  843,
        0,    0,  797,  807,  827,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  848,  807,  807,  807,  807,
      807,  807,  811,  826,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  827,    0,    0,    0,    0,    0,
        0,  848,  807,  807,  807,  807,  807,  807,  809,    0,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  849,
      827,  809,  809,  809,  809,  809,  809,  815,    0,  815,
      815,  815,  815,  815,  815,  815,  815,  815,    0,    0,
        0,    0,    0,    0,    0,  849,  855,  809,  809,  809,

      809,  809,  809,  813,  822,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  818,  813,  813,  813,  813,
      813,  813,  823,  825,  822,  855,  825,  818,    0,  828,
      822,  828,  856,  829,  818,  818,  857,  844,  823,  857,
      830,  818,  813,  813,  813,  813,  813,  813,  823,  829,
      822,  855,  825,  818,  844,  828,  830,  828,  856,  829,
      818,  818,  857,  844,  823,  857,  830,    0,  858,    0,
        0,    0,    0,    0,    0,  829,    0,  852,  825,    0,
      844,  836,  830,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  838,  858,  838,  838,  838,  838,  838,

      838,  838,  838,  838,  852,  872,  838,  838,  838,  838,
      838,  838,  839,  872,  839,  839,  839,  839,  839,  839,
      839,  839,  839,    0,    0,    0,    0,    0,    0,    0,
      852,  872,  838,  838,  838,  838,  838,  838,  840,  872,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      845,  840,  840,  840,  840,  840,  840,  841,  853,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  845,  846,
      850,    0,  850,  851,  854,    0,  845,  840,  840,  840,
      840,  840,  840,  853,  847,  868,  869,  873,  871,  846,
      847,  851,  868,  871,  845,  846,  850,  870,  850,  851,

      870,  854,  847,    0,  869,    0,    0,    0,    0,  853,
      847,  868,  869,  873,  871,  846,  847,  851,  868,  871,
        0,    0,    0,  870,    0,    0,  870,  854,  847,  863,
      869,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      877,  878,  863,  863,  863,  863,  863,  863,  864,  879,
      864,  864,  864,  864,  864,  864,  864,  864,  864,    0,
      875,  880,  875,    0,    0,  881,  877,  878,  863,  863,
      863,  863,  863,  863,  865,  879,  865,  865,  865,  865,
      865,  865,  865,  865,  865,  865,  875,  880,  875,  876,
      876,  881,  876,  876,  876,  876,  876,  876,  889,  886,

      876,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      876,  876,  890,  891,  892,  893,  895,  895,    0,    0,
        0,    0,    0,  907,  889,    0,  908,    0,  890,  896,
      896,  893,  896,  896,  896,  896,  896,  896,  890,    0,
      896,  893,  895,  895,  897,  897,  903,  891,  892,  907,
      896,  896,  908,  902,  890,  904,  905,  893,  902,    0,
      904,  897,  905,  910,  903,  906,  906,    0,  909,  909,
      897,  897,  903,  891,  892,  916,  916,    0,    0,  902,
      919,  904,  905,  910,  902,  909,  904,  897,  905,  910,
      903,  906,  906,  911,  909,  909,  920,  917,  918,  921,

      911,  916,  916,  917,  918,  922,  919,  924,  925,  910,
      927,  909,  926,  926,  931,  925,  935,  933,    0,  911,
      933,  932,  920,  917,  918,  921,  911,  924,  932,  917,
      918,  922,  937,  924,  925,  939,  927,  940,  926,  926,
      931,  925,  935,  933,  934,  934,  933,  932,  938,  938,
      946,  946,  945,  924,  932,  947,  948,  940,  937,  945,
      950,  939,  951,  940,  955,  956,  955,  958,  963,    0,
      934,  934,    0,    0,  938,  938,  946,  946,  945,    0,
      950,  947,  948,  940,    0,  945,  950,    0,  951,    0,
      955,  956,  955,  958,  963,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  950,  974,  974,  974,
      974,  975,  975,  975,  975,  976,  976,  976,  976,  977,
        0,  977,  977,  978,  978,  978,  978,  979,    0,  979,
      979,  980,  980,  982,  982,  983,  983,  984,  984,  985,
      985,  986,  986,  987,  987,  988,  988,  989,  989,  990,
      990,  991,  991,  992,    0,  992,  992,  993,  993,  994,
      994,  995,  995,  996,  996,  997,  997,  998,  998,  999,
      999, 1000, 1000, 1001, 1001, 1002, 1002, 1003, 1003, 1004,
     1004, 1005, 1005, 1006, 1006, 1007, 1007, 1008, 1008, 1009,
     1009, 1010, 1010, 1011, 1011, 1012, 1012, 1013, 1013, 1014,

     1014, 1015, 1015, 1016, 1016, 1017, 1017, 1018, 1018, 1020,
     1020, 1021, 1021, 1022, 1022, 1024, 1024, 1025, 1025, 1026,
     1026, 1029, 1029, 1030, 1030, 1031, 1031, 1033,    0, 1033,
     1033, 1034,    0, 1034, 1034, 1035, 1035, 1036, 1036, 1039,
        0, 1039, 1039, 1040,    0, 1040, 1040, 1041, 1041, 1042,
     1042, 1043, 1043, 1044, 1044, 1045, 1045, 1047, 1047, 1048,
     1048, 1049, 1049, 1050, 1050, 1051, 1051, 1053, 1053, 1054,
     1054, 1055, 1055, 1057, 1057, 1059, 1059, 1060, 1060, 1061,
     1061, 1063, 1063,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,

      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[117] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 2061 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 2166 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 974 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5684 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 59 "SrvLexer.l"
{ return SrvParser::LOGCOLORS_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 61 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 64 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 69 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::ACCEPT_UNKNOWN_FQDN_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::FQDN_DDNS_ADDRESS_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::DDNS_PROTOCOL_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::DDNS_TIMEOUT_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::SCRIPT_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::REMOTE_AUTOCONF_NEIGHBORS_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::AFTR_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::BULKLQ_ACCEPT_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::BULKLQ_TCPPORT_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ return SrvParser::BULKLQ_MAX_CONNS_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ return SrvParser::BULKLQ_TIMEOUT_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 122 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 125 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 126 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 130 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 131 "SrvLexer.l"
{ return SrvParser::CLIENT_CLASS_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
{ return SrvParser::MATCH_IF_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
{ return SrvParser::EQ_; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 134 "SrvLexer.l"
{ return SrvParser::AND_; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 135 "SrvLexer.l"
{ return SrvParser::OR_; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 136 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 137 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_DATA_; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 138 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_EN_; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 139 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_DATA_; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 140 "SrvLexer.l"
{ return SrvParser::ALLOW_; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 141 "SrvLexer.l"
{ return SrvParser::DENY_; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 142 "SrvLexer.l"
{ return SrvParser::SUBSTRING_; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 143 "SrvLexer.l"
{ return SrvParser::CONTAIN_; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 144 "SrvLexer.l"
{ return SrvParser::STRING_KEYWORD_; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 145 "SrvLexer.l"
{ return SrvParser::ADDRESS_LIST_; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 148 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 149 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 150 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 151 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 153 "SrvLexer.l"
;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 155 "SrvLexer.l"
;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 157 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 162 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 163 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 164 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 102:
YY_RULE_SETUP
#line 171 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 180 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 189 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 198 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 207 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 216 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 225 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 237 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 244 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
	 ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
	 ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 265 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
	yytext[1]='0'; //if odd then no-meaning zero at the beginning
	len = strlen(yytext)-1;
	ptr = yytext+1;
    } else {
	len = strlen(yytext)-2;
	ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
	yylval.duidval.duid[i>>1]<<=4;
	if (!isxdigit(ptr[i])) {
	     Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
	     YYABORT;
	}
	if (isalpha(ptr[i])) {
	    yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
	} else {
	    yylval.duidval.duid[i>>1]|=ptr[i]-'0';
	}
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 297 "SrvLexer.l"
{
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   // Log(Crit) << "#### Detected [" << yytext << "] as DUID [len=" << len << "]" << LogEnd;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
	x = (toupper(*pos)-'A' + 10);
      else
	x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))
	x += (toupper(*(pos+1))-'A' + 10);
      else
	x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }

   return SrvParser::DUID_;
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 325 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd;
      YYABORT;
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 335 "SrvLexer.l"
{
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) {
	Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd;
	YYABORT;
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 344 "SrvLexer.l"
{ return yytext[0]; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 347 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 3000 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 974 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 974 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 973);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 347 "SrvLexer.l"



