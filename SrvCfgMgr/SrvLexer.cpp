#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 91
#define YY_END_OF_BUFFER 92
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[754] =
    {   0,
        1,    1,    0,    0,    0,    0,   92,   90,    2,    1,
        1,   90,   73,   90,   90,   89,   89,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   77,   77,
       91,    1,    1,    1,    0,   85,   73,    0,   85,   75,
       74,   89,    0,    0,   88,    0,   82,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   70,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   16,
       17,   86,   86,   86,   86,   86,   86,   86,   86,   86,

       76,   74,   89,    0,    0,   81,   87,   80,   80,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   69,   89,    0,    0,    0,   79,   79,    0,   80,
        0,   80,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   29,   86,   86,   86,   40,   86,   86,   86,
       86,   86,   86,    0,   86,   86,   86,   86,   86,   86,
       22,   86,   86,   86,   86,   86,   86,   86,   86,   86,

       86,   71,   86,   86,   86,   86,   86,   89,    0,    0,
        0,    0,   79,    0,   79,    0,   80,   80,   80,   80,
       86,   86,   86,   86,   86,   86,    4,   86,   86,   86,
       86,   86,   47,   72,   86,    3,   86,   86,   86,   86,
       86,   86,    0,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,    7,   86,   23,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,    0,    0,    0,    0,
       79,   79,   79,   79,    0,   80,   80,   80,    0,   80,
       86,   86,   86,   86,   86,   86,   86,   86,   28,   86,
       86,   35,   86,   86,   86,   86,   86,   86,   86,   86,

       86,    0,    0,   86,   86,   86,   33,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,    0,    0,    0,   79,   79,   79,
        0,   79,    0,    0,   80,   80,   80,   80,   86,   86,
       31,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,    0,    0,
       86,   86,   86,   86,   86,   51,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   20,   86,   86,   86,
        0,    0,    0,    0,    0,   79,   79,   79,   79,    0,
       80,   80,   80,    0,   80,   86,   86,   86,   86,   86,

       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   46,   86,   12,   10,    0,    0,
       86,   86,   86,   49,   86,   86,   86,   86,   86,   86,
       86,   86,   86,    5,   86,   86,   86,   86,   13,    0,
        0,    0,   79,   79,   79,    0,   79,   84,   80,   80,
       80,   80,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   11,    0,    0,   86,   86,   86,   50,   86,   86,
       86,   86,   30,   86,   86,    6,   37,   86,   86,   86,
        0,    0,    0,   83,   79,   79,   79,   79,   80,   80,

       80,    0,   80,   86,   86,   86,   86,   86,   86,   86,
       48,   86,   86,   86,   86,   86,   34,   86,   32,   86,
       86,   86,    0,    0,   43,   42,   36,   86,   21,   86,
       86,   39,   38,   86,   86,   86,    0,    0,   79,   79,
       79,    0,   79,   80,   80,   80,   80,   86,   14,   86,
       53,   86,   86,   58,   86,   86,   86,   61,   86,   86,
       86,   86,   86,   45,   44,   86,   86,   86,   55,   86,
       52,    0,    0,    0,   79,   79,   79,   79,   80,   80,
       80,    0,   80,   86,   86,   60,   86,   86,   86,   86,
       62,   54,   86,   86,    8,   86,   24,   86,   86,    0,

        0,   79,   79,   79,    0,   79,   80,   80,   80,   80,
       86,   86,   59,   86,   86,   86,   86,   86,   56,   86,
       86,   86,   86,    0,    0,    0,   79,   79,   79,   79,
       80,   80,   80,    0,   80,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   15,   19,    0,   78,   81,   79,
       79,   79,    0,   79,   80,   80,   80,   80,   86,   86,
       26,   86,   63,   86,   25,   86,   86,    0,   78,    0,
       79,   79,   79,   79,   79,   80,   80,   80,    0,   80,
       86,   86,   27,   64,   86,   86,   86,   86,   86,   78,
       81,   79,    0,   79,   79,   79,   79,   80,   80,   80,

       57,   86,   86,   86,   86,   86,   86,   18,   78,   79,
       79,   79,   79,   80,   80,   80,   86,   65,   66,   67,
       68,    9,   79,   79,    0,   79,   79,   80,   41,   79,
       79,   80,   79,   79,    0,   79,   79,   79,   79,    0,
       79,   79,   79,   79,    0,   79,   79,   79,   79,    0,
       79,   79,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
        1,    1,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,    1,    1,    1,    1,    1,   49,   24,   50,   51,

       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[74] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        4,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    6,    7,    7,    7,    7,    7,    7,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    7,    7,
        7,    7,    7,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[821] =
    {   0,
        0,    0, 2052, 2051,    0,    0, 2031, 4089, 4089,   71,
       73, 2018,    0, 2015,   70,   70,   33, 1999,  129,  185,
       78,   72,   34,  193,   92, 1998,  192,  196,  217,  154,
      204,  109,  234,  288,   77,  141,  209,  143, 4089, 2007,
     4089,  103,  107,  114, 2013, 4089,    0, 2010, 1974, 4089,
        0,  344, 1956,  278, 4089,    0,  387, 1955,  428,  137,
      140, 1954,  152,  146,  283,  221,  241,  225,  252,  278,
      190,  287,  290,  239,  367,  293,  296,  282, 1953,  313,
      312,  163,  318,  300,  360,  428,  369,  395,  408, 1952,
     1951,  167,  437,  439,  447,  442,  452,  448,  449,  453,

     4089,    0,  507,  525, 1923,  550,    0,  593,  568,  634,
      297,  425,  446,  436,  495,  528,  570,  258,  607,  572,
      611,  642,  647,  604,  648,  646,  650,  614,  651,  363,
      410,  365,  645,  668,  657,  652,  673,  670,  676,  672,
      686,  482,  688,  690,  697,  701,  699,  695,  710,  711,
      714, 1901,  760,  778, 1897, 1895,  805,  823,  787,  848,
      889,  866,  930,  455,  868,  490,  716,  748,  899,  870,
      896,  903, 1893,  795,  941,  717, 1885,  911,  867,  943,
      944,  945,  939, 1895,  950,  947,  949,  970,  967,  956,
     1881,  975,  720,  981,  948,  983,  995, 1002,  999,  974,

      493, 1862, 1008,  992, 1010, 1001,  583, 1803, 1771, 1677,
     1675,  832, 1058, 1099, 1076, 1117, 1142, 1160, 1185, 1203,
     1674, 1079, 1066, 1203, 1193,  615,  617, 1207, 1208, 1012,
     1209, 1210, 1673, 1671,  742, 1027, 1211, 1119, 1217, 1018,
     1218, 1234, 1220, 1225, 1232, 1236, 1242, 1259, 1243, 1254,
     1250, 1032, 1255, 1669, 1267, 1636, 1263, 1271, 1273, 1279,
     1270, 1277, 1283, 1034, 1274, 1284, 1635, 1632, 1631, 1337,
     1348, 1366, 1391, 1409, 1169,  164, 1628, 1434, 1475, 1452,
     1036, 1298, 1456, 1290, 1482, 1369, 1488, 1483, 1045, 1132,
     1338, 1586, 1484, 1485, 1486, 1487, 1415, 1495, 1489, 1287,

     1501,  510, 1216, 1512, 1492, 1513, 1585, 1518, 1519, 1515,
     1538, 1517, 1319, 1323, 1528, 1529, 1544, 1540, 1542, 1324,
     1553, 1546, 1424, 1554, 1581, 1578, 1598,  256, 1571, 1610,
     1651, 1628, 1669, 1694, 1705, 1723, 1748, 1766, 1768, 1633,
     1570, 1530, 1569, 1766, 1772, 1560, 1756, 1774, 1770, 1629,
     1784, 1795, 1793, 1797, 1804, 1816, 1826, 1827, 1657, 1695,
     1801, 1818, 1819, 1791, 1767, 1548, 1829, 1830, 1836, 1838,
     1848, 1820, 1844, 1850, 1837, 1860, 1494, 1852, 1855, 1853,
     1493, 1490, 1460, 1911, 1922, 1933, 1951, 1976, 1994, 1732,
      259, 1459, 2019, 2060, 2037, 1854, 2060, 2067, 1957, 1576,

     1882, 1994, 2042, 2045, 2043, 2071, 2077, 2073, 2075, 2072,
     2078, 2076, 1577, 2096, 1458, 2083, 1457, 1455,  202, 1919,
     2103, 2097, 2108, 1454, 2114, 1579, 2115, 2116, 2119, 2124,
     2121, 2134, 2079, 1453, 2135, 2133, 2136, 2141, 1452, 1417,
     1414, 2192,  325, 1413, 2203, 2244, 2221, 2230, 2287, 2262,
     2330, 2305, 2144, 2308, 2337, 2338, 2340, 2132, 2339, 2146,
     1630, 2341, 2268, 2342, 2343, 2150, 2346, 2350, 1684, 2349,
     1785, 1411, 2140, 2247, 2353, 2364, 2368, 1410, 2363, 2369,
     2371, 2385, 1409, 2383, 2378, 1373, 1372, 2389, 2398, 2401,
     1371, 1370, 1368, 2441, 2452, 2470, 2495, 2513,  366, 1367,

     2538, 2579, 2556, 2560, 2478, 2388, 2586, 2412, 2395, 2517,
     1366, 2587, 1889, 2561, 2558, 2591, 1322, 2592, 1318, 2590,
     2596, 2594, 2333, 2387, 1315, 1309, 1308, 2612, 1305, 2613,
     2615, 1304, 1238, 2618, 2597, 2598, 1175, 1123,  413, 1122,
     2660, 2701, 2678, 2744, 2719, 2787, 2762, 2638, 1121, 2686,
     1118, 2763, 2794, 1117, 2679, 2796, 1890, 1084, 2795, 2798,
     2722, 2797, 2799, 4089, 4089, 2800, 2804, 2805, 1083, 2811,
     1081, 1080, 1078, 1077, 2861, 2879, 2904, 2922,  484, 1076,
     2947, 2988, 2965, 2955, 2846, 1044, 2882, 2812, 2965, 2988,
     1043, 1040, 2821, 2966, 1891, 2968, 1035, 3000, 2999, 1030,

      985,  488,  946, 3057, 3098, 3075, 3141, 3116, 3184, 3159,
     2595, 3008,  910, 3021, 3002, 3005, 3006, 3079,  909, 3159,
     3196, 3191, 3076,  908,  907,  906, 3253, 3209, 3296, 3228,
      491,  905, 3339, 3380, 3271, 3119, 1892, 3162, 3303,  108,
     3277, 3231, 3311, 3004,  904,  902,  901,  900,    0,  494,
      874, 3423, 3464, 3321, 3507, 3364, 3550, 3398, 3388, 3399,
      871, 3434,  869,  743,  866, 3442, 3308,  741,  732,  728,
      726, 3593, 3483, 3636, 3525,  613,  689, 3679,    0, 3568,
     3193, 3473,  659,  655,  311,  200,  364, 3528, 3570,  612,
     4089,  610,    0,  745,  609, 3722, 3612, 3765, 3654,    0,

      606, 3615,  107,  362,  166,  406, 3618,  574,  573,  569,
      568, 3808, 3697, 1037,  532,    0, 3195,  531,  530,  529,
      527,  526,  474,  445,    0, 3740, 4089,    0,  407,  405,
      404, 4089,  403,  400,    0,  361,  321,  308,  265,    0,
      264,  255,  250,  207,    0,  201,  147,  145,  117,    0,
       80,   59, 4089, 3861, 3868, 3875, 3882, 3889, 3894, 3901,
     3904, 3907, 3910, 3913, 3916, 3919, 3922, 3925, 3928, 3932,
     3934, 3937, 3941, 3943, 3946, 3949, 3952, 3955, 3958, 3961,
     3964, 3967, 3970, 3973, 3976, 3979, 3982, 3985, 3988, 3991,
     3994, 3997, 4000, 4003, 4006, 4009, 4012, 4015, 4018, 4021,

     4024, 4027, 4030, 4033, 4036, 4039, 4042, 4045, 4048, 4051,
     4054, 4057, 4060, 4063, 4066, 4069, 4072, 4075, 4078, 4081
    } ;

static yyconst flex_int16_t yy_def[821] =
    {   0,
      753,    1,  754,  754,  755,  755,  753,  753,  753,  753,
      753,  756,  757,  758,  753,  753,   16,  753,  759,  759,
       20,   20,   20,   20,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  753,  753,
      753,  753,  753,  753,  756,  753,  757,  758,  753,  753,
      760,  753,  761,   52,  753,  762,  753,  759,   20,   59,
       59,  759,  759,   59,  759,  759,  759,  759,  759,  759,
       59,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,

      753,  760,  753,  103,  763,  753,  762,  753,  108,   59,
      110,  110,  759,  110,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  753,  153,  764,  765,  753,  157,  753,  753,
      753,  160,  110,  163,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  753,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,

      759,  759,  759,  759,  759,  759,  759,  153,  154,  766,
      767,  753,  753,  753,  213,  753,  753,  217,  753,  219,
      163,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  753,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  753,  768,  769,  753,
      753,  271,  753,  273,  753,  770,  753,  753,  753,  278,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,

      759,  753,  753,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  771,  772,  753,  773,  753,  753,
      753,  330,  753,  753,  753,  335,  753,  337,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  753,  753,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      753,  774,  775,  753,  753,  753,  386,  753,  388,  753,
      770,  753,  753,  753,  393,  759,  759,  759,  759,  759,

      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  753,  753,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  776,
      777,  753,  773,  753,  753,  753,  445,  753,  753,  449,
      753,  451,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  753,  753,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      753,  778,  779,  753,  753,  495,  753,  497,  770,  753,

      753,  753,  501,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  753,  753,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  780,  781,  773,  753,
      753,  753,  541,  753,  544,  753,  546,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  753,  753,  759,  759,  759,  759,  759,
      759,  753,  782,  783,  753,  575,  753,  577,  770,  753,
      753,  753,  581,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  784,

      785,  773,  753,  753,  753,  604,  753,  607,  753,  609,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  753,  786,  787,  753,  627,  753,  629,
      770,  753,  753,  753,  633,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  788,  789,  790,  773,
      753,  753,  753,  652,  753,  655,  753,  657,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  753,  791,  753,
      792,  753,  672,  753,  674,  770,  753,  753,  793,  678,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  794,
      753,  795,  796,  773,  753,  753,  696,  753,  698,  797,

      759,  759,  759,  759,  759,  759,  759,  759,  753,  798,
      799,  753,  712,  770,  753,  800,  759,  759,  759,  759,
      759,  759,  753,  801,  802,  753,  753,  803,  759,  804,
      805,  753,  753,  806,  807,  808,  809,  753,  810,  811,
      812,  813,  753,  814,  815,  816,  817,  753,  818,  819,
      820,  753,    0,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,

      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753
    } ;

static yyconst flex_int16_t yy_nxt[4163] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   26,   26,   28,   26,   29,   30,   31,   26,   32,
       33,   34,   35,   36,   37,   26,   38,   26,   19,   21,
       22,   23,   24,   25,   26,   27,   26,   26,   28,   26,
       29,   30,   31,   26,   32,   33,   34,   35,   36,   37,
       26,   38,   26,   42,   43,   44,   43,   50,  753,   70,
      750,   51,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   53,   54,   54,   54,   54,   54,   54,  753,   55,

       64,  750,   66,  753,   70,   42,   43,   67,   68,   44,
       43,   65,   96,  753,   69,   56,   42,   43,   54,   54,
       54,   54,   54,  718,   55,  663,   64,   66,  753,  753,
      753,   85,   67,   68,   73,   86,   65,   96,  750,   69,
       56,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       53,   59,   59,   60,   61,   59,   59,   85,   62,   73,
       86,  111,  753,   97,  753,  112,  745,   98,  750,  100,
      114,   63,  134,  753,  159,  753,  144,   59,   60,   61,
       59,   59,  720,   62,  753,  161,  111,  753,  753,   97,
      112,   81,   98,  113,  100,  114,   63,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   53,   59,   59,   59,
       59,   59,   59,  753,   62,   71,   81,  753,  113,   74,
      705,  753,  745,  123,  473,  753,   76,   75,  745,   82,
      753,   72,   77,   59,   59,   59,   59,   59,  753,   62,
       83,   71,  753,   84,   74,   99,  753,   78,  123,  117,
      473,   76,   75,   79,   82,  753,   72,   77,   80,  119,
      753,  126,  753,   87,   88,   83,  212,  171,   84,  159,
       99,  740,   78,  753,  117,   89,  745,  214,   79,  753,
      279,  118,  120,   80,  119,  740,  740,  126,   87,   88,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  753,

       89,   90,   91,  753,  753,  115,  118,  120,  753,  753,
       92,  753,  124,  116,  753,  121,  125,  753,   93,  122,
      129,  753,  131,  164,  130,  703,  136,   94,  704,  735,
       95,  115,  753,  753,  753,  212,   92,  124,  116,  753,
      121,  125,  740,   93,  122,  129,  331,  131,  164,  130,
      132,  136,   94,  133,  135,   95,  103,  103,  103,  103,
      103,  103,  103,  103,  103,   53,  104,  104,  104,  104,
      104,  104,  183,   55,  186,  132,  159,  706,  133,  135,
      719,  753,  735,  753,  753,  753,  753,  394,  753,  127,
      753,  141,  104,  104,  104,  104,  104,  137,   55,  108,

      108,  108,  108,  108,  108,  108,  108,  108,  128,  109,
      109,  109,  109,  109,  109,  127,  753,  141,  184,  185,
      721,  735,  137,  212,  725,  735,  725,  753,  753,  753,
      143,  753,  142,  128,  446,  109,  109,  109,  109,  109,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  753,
      110,  110,  110,  110,  110,  110,  143,  142,  753,  138,
      753,  139,  140,  753,  165,  167,  725,  753,  753,  753,
      753,  145,  148,  753,  753,  166,  110,  110,  110,  110,
      110,  146,  147,  150,  138,  149,  139,  140,  151,  165,
      167,  198,  222,  152,  159,  693,  145,  148,  212,  225,

      166,  159,  261,  753,  212,  502,  146,  147,  150,  542,
      149,  753,  582,  151,  753,  605,  753,  222,  152,  153,
      153,  153,  153,  153,  153,  153,  153,  153,   53,  154,
      154,  154,  154,  154,  154,  168,   55,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  359,  753,  753,  753,
      753,  753,  753,  679,  169,  154,  154,  154,  154,  154,
      168,   55,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  359,  158,  158,  158,  158,  158,  158,  753,  169,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  725,
      693,  753,  266,  753,  670,  753,  170,  173,  158,  158,

      158,  158,  158,  159,  753,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  161,  162,  162,  162,  162,  162,
      162,  170,  173,  159,  287,  753,  288,  753,  753,  172,
      653,  693,  753,  670,  634,  753,  753,  174,  753,  177,
      181,  162,  162,  162,  162,  162,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  172,  163,  163,  163,  163,
      163,  163,  174,  753,  177,  181,  753,  753,  753,  753,
      179,  753,  753,  753,  180,  187,  753,  182,  753,  192,
      753,  175,  163,  163,  163,  163,  163,  176,  178,  753,
      191,  753,  188,  753,  753,  179,  194,  753,  195,  180,

      187,  189,  182,  193,  192,  190,  175,  753,  196,  753,
      634,  753,  176,  178,  200,  191,  753,  188,  753,  204,
      753,  194,  753,  201,  195,  197,  189,  202,  193,  199,
      190,  753,  753,  196,  203,  753,  206,  753,  753,  200,
      205,  753,  226,  234,  204,  252,  207,  693,  201,  691,
      197,  294,  202,  670,  199,  212,  684,  685,  686,  203,
      687,  206,  626,  753,  753,  205,  653,  226,  234,  753,
      252,  207,  208,  208,  208,  208,  208,  208,  208,  208,
      208,   53,  209,  209,  209,  209,  209,  209,  227,   55,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  216,

      216,  216,  216,  216,  216,  216,  216,  216,  209,  209,
      209,  209,  209,  227,   55,  212,  753,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  214,  215,  215,  215,
      215,  215,  215,  753,  232,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  215,  215,  215,  215,  215,  159,  232,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  161,
      218,  218,  218,  218,  218,  218,  753,  223,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  753,  753,  753,
      753,  753,  753,  236,  224,  605,  218,  218,  218,  218,

      218,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      229,  220,  220,  220,  220,  220,  220,  753,  236,  224,
      753,  670,  626,  753,  753,  753,  582,  649,  626,  574,
      753,  753,  753,  231,  228,  229,  230,  220,  220,  220,
      220,  220,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  235,  221,  221,  221,  221,  221,  221,  231,  228,
      753,  230,  753,  233,  753,  753,  753,  542,  753,  753,
      753,  753,  240,  241,  242,  244,  235,  753,  221,  221,
      221,  221,  221,  238,  237,  247,  239,  246,  753,  233,
      245,  753,  250,  249,  254,  753,  753,  240,  241,  242,

      244,  251,  753,  248,  753,  253,  626,  260,  238,  237,
      247,  239,  246,  753,  263,  245,  753,  250,  249,  254,
      753,  256,  753,  753,  255,  259,  251,  257,  248,  753,
      253,  753,  260,  753,  262,  264,  295,  265,  291,  753,
      263,  312,  258,  322,  299,  339,  256,  159,  753,  255,
      259,  574,  257,  753,  347,  753,  753,  753,  679,  262,
      264,  753,  265,  291,  753,  753,  753,  258,  212,  299,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  214,
      272,  272,  272,  272,  272,  272,  753,  753,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  502,  106,  574,

      753,  493,  753,  282,  753,  753,  272,  272,  272,  272,
      272,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      281,  274,  274,  274,  274,  274,  274,  275,  282,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  753,  753,
      753,  348,  753,  446,  574,  281,  297,  274,  274,  274,
      274,  274,  159,  753,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  161,  277,  277,  277,  277,  277,  277,
      753,  297,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      277,  277,  277,  277,  277,  159,  493,  278,  278,  278,

      278,  278,  278,  278,  278,  278,  279,  280,  280,  280,
      280,  280,  280,  753,  753,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  753,  284,  285,  286,  753,  753,
      753,  753,  753,  280,  280,  280,  280,  280,  753,  753,
      293,  296,  360,  283,  292,  302,  753,  298,  289,  290,
      284,  285,  286,  753,  300,  753,  301,  753,  305,  753,
      303,  304,  306,  753,  753,  293,  296,  360,  283,  292,
      302,  753,  298,  289,  290,  753,  753,  307,  309,  300,
      753,  308,  301,  305,  753,  303,  304,  306,  753,  311,
      310,  753,  753,  314,  753,  753,  313,  316,  753,  315,

      753,  318,  307,  309,  753,  753,  317,  308,  753,  324,
      320,  753,  357,  323,  311,  310,  342,  319,  314,  753,
      340,  313,  316,  321,  315,  753,  753,  318,  369,  753,
      753,  317,  370,  376,  324,  320,  753,  357,  323,  753,
      753,  342,  319,  753,  753,  753,  340,  327,  321,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  212,  753,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  214,
      329,  329,  329,  329,  329,  329,  753,  349,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  753,  394,  106,
      753,  493,  383,  753,  753,  344,  329,  329,  329,  329,

      329,  212,  349,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  331,  332,  332,  332,  332,  332,  332,  753,
      344,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      753,  753,  753,  379,  331,  493,  753,  354,  383,  332,
      332,  332,  332,  332,  159,  753,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  279,  336,  336,  336,  336,
      336,  336,  753,  354,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  753,  753,  753,  753,  753,  753,  753,
      279,  106,  336,  336,  336,  336,  336,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  341,  338,  338,  338,

      338,  338,  338,  753,  753,  753,  753,  753,  753,  753,
      753,  383,  343,  753,  269,  753,  753,  346,  350,  351,
      352,  341,  753,  338,  338,  338,  338,  338,  345,  355,
      353,  362,  356,  753,  753,  358,  753,  343,  753,  753,
      753,  368,  346,  350,  351,  352,  361,  365,  366,  753,
      753,  753,  363,  345,  355,  353,  362,  356,  364,  753,
      358,  753,  371,  753,  367,  753,  368,  753,  372,  753,
      373,  361,  365,  366,  753,  753,  400,  363,  375,  378,
      374,  753,  404,  364,  380,  457,  470,  371,  479,  367,
      753,  753,  214,  372,  377,  373,  401,  753,  753,  383,

      753,  400,  269,  375,  378,  374,  753,  753,  404,  380,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  377,
      212,  401,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  331,  387,  387,  387,  387,  387,  387,  753,  512,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  161,
      753,  753,  106,  269,  753,  410,  156,  753,  387,  387,
      387,  387,  387,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  399,  389,  389,  389,  389,  389,  389,  390,
      410,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      753,  419,  753,  520,  753,  753,  269,  399,  156,  389,

      389,  389,  389,  389,  159,  753,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  159,  419,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  279,  392,  392,  392,
      392,  392,  392,  753,  420,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  392,  392,  392,  392,  392,  159,  420,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  394,
      395,  395,  395,  395,  395,  395,  753,  753,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  753,  753,  753,
      405,  753,  753,  753,  522,  753,  395,  395,  395,  395,

      395,  396,  403,  406,  397,  753,  753,  402,  425,  407,
      398,  408,  753,  409,  753,  405,  753,  412,  753,  413,
      411,  414,  753,  421,  753,  753,  396,  403,  406,  397,
      415,  424,  402,  425,  407,  398,  408,  753,  409,  753,
      753,  753,  416,  412,  413,  411,  414,  753,  753,  421,
      753,  753,  417,  418,  426,  415,  424,  753,  753,  753,
      429,  422,  423,  432,  427,  753,  428,  416,  430,  753,
      431,  753,  435,  753,  753,  753,  753,  417,  418,  426,
      453,  753,  437,  753,  433,  429,  422,  423,  432,  427,
      434,  428,  439,  430,  436,  438,  431,  435,  556,  590,

      620,  660,  753,  753,  243,  453,  753,  437,  458,  433,
      753,  753,  753,  753,  753,  434,  106,  439,  156,  436,
      438,  442,  753,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  212,  458,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  212,  156,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  331,  444,  444,  444,  444,  444,
      444,  753,  474,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  753,  753,  753,  753,  753,  106,  753,  456,
       48,  444,  444,  444,  444,  444,  212,  474,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  446,  447,  447,

      447,  447,  447,  447,  753,  456,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  753,   49,   46,  101,  753,
       57,   49,   46,  459,  447,  447,  447,  447,  447,  159,
      753,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      394,  450,  450,  450,  450,  450,  450,  753,  459,  450,
      450,  450,  450,  450,  450,  450,  450,  450,   40,   40,
      753,  753,  753,  753,  753,  462,  753,  450,  450,  450,
      450,  450,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  753,  452,  452,  452,  452,  452,  452,  753,  460,
      461,  462,  753,  753,  753,  454,  753,  753,  753,  753,

      753,  466,  455,  468,  753,  463,  465,  467,  452,  452,
      452,  452,  452,  464,  460,  461,  472,  753,  753,  486,
      454,  469,  471,  476,  753,  753,  466,  455,  468,  753,
      463,  465,  467,  475,  477,  753,  753,  753,  464,  480,
      753,  472,  753,  478,  486,  753,  469,  471,  476,  483,
      481,  484,  482,  753,  753,  753,  753,  753,  475,  477,
      485,  487,  753,  489,  480,  753,  504,  753,  478,  488,
      523,  753,  511,  509,  483,  481,  484,  482,  490,  753,
      753,  753,  753,  753,  753,  485,  487,  753,  489,  517,
      753,  753,  504,  753,  488,  523,  753,  511,  509,  753,

      753,  753,  753,  490,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  212,  517,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  446,  496,  496,  496,  496,  496,
      496,  753,  753,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  496,  496,  496,  496,  496,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  753,  498,  498,  498,  498,
      498,  498,  753,  524,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  753,  753,  753,  753,  753,  753,  753,
      514,  753,  498,  498,  498,  498,  498,  159,  524,  499,

      499,  499,  499,  499,  499,  499,  499,  499,  394,  500,
      500,  500,  500,  500,  500,  753,  514,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  500,  500,  500,  500,  500,
      159,  505,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  502,  503,  503,  503,  503,  503,  503,  753,  753,
      753,  753,  753,  753,  753,  516,  505,  753,  564,  506,
      753,  753,  507,  508,  753,  510,  519,  515,  503,  503,
      503,  503,  503,  521,  753,  753,  513,  518,  525,  753,
      753,  516,  753,  564,  506,  529,  528,  507,  508,  753,

      510,  519,  515,  526,  753,  530,  753,  527,  521,  753,
      753,  513,  518,  525,  534,  531,  753,  533,  532,  753,
      529,  528,  753,  550,  535,  553,  565,  536,  526,  753,
      530,  753,  527,  753,  753,  753,  753,  753,  552,  534,
      531,  753,  533,  532,  753,  753,  753,  753,  550,  535,
      553,  565,  536,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  212,  552,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  446,  540,  540,  540,  540,  540,  540,
      753,  753,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  753,  753,  753,  753,  753,  753,  753,  753,  753,

      540,  540,  540,  540,  540,  212,  753,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  542,  543,  543,  543,
      543,  543,  543,  753,  549,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  753,  753,  753,  753,  753,  753,
      753,  753,  554,  543,  543,  543,  543,  543,  159,  549,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  502,
      545,  545,  545,  545,  545,  545,  753,  554,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  753,  753,  753,
      753,  753,  753,  753,  558,  557,  545,  545,  545,  545,
      545,  546,  546,  546,  546,  546,  546,  546,  546,  546,

      548,  547,  547,  547,  547,  547,  547,  753,  753,  558,
      557,  753,  753,  753,  560,  753,  753,  753,  753,  753,
      555,  559,  571,  561,  563,  548,  551,  547,  547,  547,
      547,  547,  562,  753,  753,  753,  753,  636,  570,  753,
      560,  568,  566,  567,  569,  555,  559,  571,  561,  563,
      753,  551,  753,  753,  753,  753,  753,  562,  753,  753,
      753,  753,  636,  570,  584,  753,  568,  566,  567,  569,
      212,  753,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  542,  576,  576,  576,  576,  576,  576,  753,  584,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  753,

      753,  753,  753,  753,  753,  588,  753,  753,  576,  576,
      576,  576,  576,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  585,  578,  578,  578,  578,  578,  578,  753,
      588,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      753,  753,  753,  753,  753,  753,  753,  585,  593,  578,
      578,  578,  578,  578,  159,  753,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  502,  580,  580,  580,  580,
      580,  580,  753,  593,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  580,  580,  580,  580,  580,  159,  586,  581,

      581,  581,  581,  581,  581,  581,  581,  581,  582,  583,
      583,  583,  583,  583,  583,  753,  753,  753,  753,  753,
      753,  753,  594,  586,  595,  753,  753,  596,  587,  589,
      591,  592,  753,  753,  614,  583,  583,  583,  583,  583,
      598,  599,  753,  618,  753,  597,  753,  594,  753,  595,
      753,  753,  596,  587,  589,  591,  592,  753,  753,  753,
      614,  753,  753,  753,  753,  598,  599,  753,  753,  618,
      597,  212,  753,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  542,  603,  603,  603,  603,  603,  603,  753,
      612,  603,  603,  603,  603,  603,  603,  603,  603,  603,

      753,  753,  753,  753,  753,  753,  753,  753,  613,  603,
      603,  603,  603,  603,  212,  612,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  605,  606,  606,  606,  606,
      606,  606,  753,  613,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  606,  606,  606,  606,  606,  159,  753,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  582,  608,
      608,  608,  608,  608,  608,  753,  753,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  753,  753,  753,  753,
      753,  615,  619,  611,  621,  608,  608,  608,  608,  608,

      609,  609,  609,  609,  609,  609,  609,  609,  609,  753,
      610,  610,  610,  610,  610,  610,  615,  619,  611,  621,
      753,  753,  616,  753,  639,  753,  753,  753,  617,  753,
      640,  753,  753,  623,  667,  641,  610,  610,  610,  610,
      610,  622,  753,  637,  753,  753,  753,  616,  753,  753,
      639,  753,  753,  617,  753,  640,  753,  753,  623,  667,
      641,  638,  753,  753,  753,  753,  622,  212,  637,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  605,  628,
      628,  628,  628,  628,  628,  753,  638,  628,  628,  628,
      628,  628,  628,  628,  628,  628,  753,  753,  753,  753,

      753,  753,  646,  753,  753,  628,  628,  628,  628,  628,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  642,
      630,  630,  630,  630,  630,  630,  753,  646,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  753,  753,  753,
      753,  753,  753,  753,  642,  659,  630,  630,  630,  630,
      630,  159,  753,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  582,  632,  632,  632,  632,  632,  632,  753,
      659,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      753,  753,  753,  753,  753,  753,  753,  753,  661,  632,
      632,  632,  632,  632,  159,  643,  633,  633,  633,  633,

      633,  633,  633,  633,  633,  634,  635,  635,  635,  635,
      635,  635,  753,  661,  753,  753,  753,  753,  753,  753,
      643,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      729,  645,  635,  635,  635,  635,  635,  644,  753,  701,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  753,
      753,  753,  753,  753,  753,  729,  645,  665,  753,  753,
      753,  753,  644,  212,  701,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  605,  651,  651,  651,  651,  651,
      651,  753,  665,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  753,  753,  753,  753,  753,  753,  753,  664,

      753,  651,  651,  651,  651,  651,  212,  753,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  653,  654,  654,
      654,  654,  654,  654,  753,  664,  753,  753,  753,  753,
      753,  753,  753,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  689,  662,  654,  654,  654,  654,  654,  159,
      666,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      634,  656,  656,  656,  656,  656,  656,  689,  662,  753,
      753,  753,  753,  753,  753,  666,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  753,  753,  656,  656,  656,
      656,  656,  657,  657,  657,  657,  657,  657,  657,  657,

      657,  753,  658,  658,  658,  658,  658,  658,  753,  753,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  753,
      753,  753,  753,  753,  753,  753,  682,  681,  658,  658,
      658,  658,  658,  212,  753,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  653,  673,  673,  673,  673,  673,
      673,  682,  681,  753,  753,  753,  753,  753,  753,  753,
      683,  753,  753,  753,  753,  753,  753,  688,  753,  753,
      753,  673,  673,  673,  673,  673,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  683,  675,  675,  675,  675,
      675,  675,  688,  753,  753,  695,  695,  695,  695,  695,

      695,  695,  695,  695,  753,  753,  753,  753,  753,  753,
      753,  702,  675,  675,  675,  675,  675,  159,  753,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  634,  677,
      677,  677,  677,  677,  677,  753,  702,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  753,  753,  753,  753,
      753,  753,  753,  753,  707,  677,  677,  677,  677,  677,
      159,  753,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  679,  680,  680,  680,  680,  680,  680,  753,  707,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  753,
      753,  753,  753,  753,  753,  753,  708,  753,  680,  680,

      680,  680,  680,  212,  753,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  653,  695,  695,  695,  695,  695,
      695,  708,  753,  753,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  753,  753,  753,  753,  753,  753,  753,
      717,  695,  695,  695,  695,  695,  212,  753,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  722,  697,  697,
      697,  697,  697,  697,  753,  717,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  753,  753,  753,  753,  753,
      753,  753,  722,  753,  697,  697,  697,  697,  697,  159,
      753,  698,  698,  698,  698,  698,  698,  698,  698,  698,

      679,  699,  699,  699,  699,  699,  699,  753,  753,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  699,  699,  699,
      699,  699,  212,  753,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  753,  713,  713,  713,  713,  713,  713,
      212,  753,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      713,  713,  713,  713,  713,  159,  753,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  679,  715,  715,  715,
      715,  715,  715,  753,  753,  753,  753,  753,  753,  753,

      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  715,  715,  715,  715,  715,  212,  753,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  753,
      727,  727,  727,  727,  727,  727,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  727,  727,  727,  727,
      727,   39,   39,   39,   39,   39,   39,   39,   41,   41,
       41,   41,   41,   41,   41,   45,   45,   45,   45,   45,
       45,   45,   47,  753,   47,   47,   47,   47,   47,   48,
       48,   48,   48,   48,   48,   48,   58,   58,   58,   58,

       58,  102,  753,  102,  102,  102,  102,  102,  105,  105,
      105,  107,  753,  107,  155,  155,  155,  210,  210,  210,
      211,  211,  211,  267,  267,  267,  268,  268,  268,  325,
      325,  325,  326,  326,  326,  334,  334,  334,  381,  381,
      381,  382,  382,  382,  385,  385,  385,  440,  440,  440,
      441,  441,  441,  491,  491,  491,  492,  492,  492,  537,
      537,  537,  538,  538,  538,  572,  572,  572,  573,  573,
      573,  600,  600,  600,  601,  601,  601,  624,  624,  624,
      625,  625,  625,  647,  647,  647,  648,  648,  648,  668,
      668,  668,  669,  669,  669,  671,  753,  671,  690,  690,

      690,  692,  692,  692,  700,  753,  700,  709,  709,  709,
      710,  710,  710,  711,  753,  711,  716,  753,  716,  723,
      723,  723,  724,  724,  724,  728,  753,  728,  730,  730,
      730,  731,  753,  731,  732,  753,  732,  733,  733,  733,
      734,  734,  734,  736,  736,  736,  737,  753,  737,  738,
      738,  738,  739,  739,  739,  741,  741,  741,  742,  753,
      742,  743,  743,  743,  744,  744,  744,  746,  746,  746,
      747,  753,  747,  748,  748,  748,  749,  749,  749,  751,
      751,  751,  675,  753,  675,  752,  752,  752,    7,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,

      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753
    } ;

static yyconst flex_int16_t yy_chk[4163] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   10,   10,   11,   11,   15,   17,   23,
      752,   15,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   35,   16,

       21,  751,   22,   17,   23,   42,   42,   22,   22,   43,
       43,   21,   35,   25,   22,   16,   44,   44,   16,   16,
       16,   16,   16,  703,   16,  640,   21,   22,  703,  640,
       32,   32,   22,   22,   25,   32,   21,   35,  749,   22,
       16,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   32,   19,   25,
       32,   60,   36,   36,   38,   61,  748,   36,  747,   38,
       64,   19,   82,   63,  276,   30,   92,   19,   19,   19,
       19,   19,  705,   19,   82,  276,   60,  705,   92,   36,
       61,   30,   36,   63,   38,   64,   19,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   27,   20,   24,   30,   28,   63,   27,
      686,  686,  746,   71,  419,   31,   28,   27,  744,   31,
       37,   24,   28,   20,   20,   20,   20,   20,   29,   20,
       31,   24,   66,   31,   27,   37,   68,   29,   71,   66,
      419,   28,   27,   29,   31,   33,   24,   28,   29,   68,
       74,   74,   67,   33,   33,   31,  328,  118,   31,  391,
       37,  743,   29,   69,   66,   33,  742,  328,   29,  118,
      391,   67,   69,   29,   68,  741,  739,   74,   33,   33,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   70,

       33,   34,   34,   78,   65,   65,   67,   69,   72,   34,
       34,   73,   72,   65,   76,   70,   73,   77,   34,   70,
       76,   84,   78,  111,   77,  685,   84,   34,  685,  738,
       34,   65,  685,   81,   80,  443,   34,   72,   65,   83,
       70,   73,  737,   34,   70,   76,  443,   78,  111,   77,
       80,   84,   34,   81,   83,   34,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,  130,   52,  132,   80,  499,  687,   81,   83,
      704,   85,  736,  704,  130,  687,  132,  499,   75,   75,
       87,   87,   52,   52,   52,   52,   52,   85,   52,   57,

       57,   57,   57,   57,   57,   57,   57,   57,   75,   57,
       57,   57,   57,   57,   57,   75,   88,   87,  131,  131,
      706,  734,   85,  539,  733,  731,  730,  706,  729,   89,
       89,  131,   88,   75,  539,   57,   57,   57,   57,   57,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   86,
       59,   59,   59,   59,   59,   59,   89,   88,   93,   86,
       94,   86,   86,   96,  112,  114,  724,  113,   95,   98,
       99,   93,   96,   97,  100,  113,   59,   59,   59,   59,
       59,   94,   95,   98,   86,   97,   86,   86,   99,  112,
      114,  142,  164,  100,  579,  723,   93,   96,  602,  166,

      113,  631,  201,  142,  650,  579,   94,   95,   98,  602,
       97,  166,  631,   99,  201,  650,  115,  164,  100,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  115,  103,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  302,  722,  721,  116,
      720,  719,  718,  715,  116,  103,  103,  103,  103,  103,
      115,  103,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  302,  106,  106,  106,  106,  106,  106,  109,  116,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  711,
      710,  117,  207,  120,  709,  708,  117,  120,  106,  106,

      106,  106,  106,  108,  207,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  117,  120,  676,  226,  124,  227,  701,  119,  119,
      695,  692,  121,  690,  676,  128,  226,  121,  227,  124,
      128,  108,  108,  108,  108,  108,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  119,  110,  110,  110,  110,
      110,  110,  121,  122,  124,  128,  133,  126,  123,  125,
      126,  127,  129,  136,  127,  133,  684,  129,  135,  136,
      683,  122,  110,  110,  110,  110,  110,  123,  125,  134,
      135,  138,  134,  140,  137,  126,  138,  139,  139,  127,

      133,  134,  129,  137,  136,  134,  122,  141,  140,  143,
      677,  144,  123,  125,  144,  135,  148,  134,  145,  148,
      147,  138,  146,  145,  139,  141,  134,  146,  137,  143,
      134,  149,  150,  140,  147,  151,  150,  167,  176,  144,
      149,  193,  167,  176,  148,  193,  151,  671,  145,  670,
      141,  235,  146,  669,  143,  694,  664,  664,  664,  147,
      664,  150,  668,  235,  664,  149,  694,  167,  176,  168,
      193,  151,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  168,  153,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  159,

      159,  159,  159,  159,  159,  159,  159,  159,  153,  153,
      153,  153,  153,  168,  153,  157,  174,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  158,  174,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  157,  157,  157,  157,  157,  160,  174,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  162,  165,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  665,  179,  165,
      663,  170,  661,  179,  165,  651,  160,  160,  160,  160,

      160,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      170,  161,  161,  161,  161,  161,  161,  171,  179,  165,
      169,  648,  647,  646,  172,  645,  632,  626,  625,  624,
      619,  613,  178,  172,  169,  170,  171,  161,  161,  161,
      161,  161,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  178,  163,  163,  163,  163,  163,  163,  172,  169,
      183,  171,  175,  175,  180,  181,  182,  603,  186,  195,
      187,  185,  183,  183,  183,  185,  178,  190,  163,  163,
      163,  163,  163,  181,  180,  187,  182,  186,  189,  175,
      185,  188,  190,  189,  195,  200,  192,  183,  183,  183,

      185,  192,  194,  188,  196,  194,  601,  200,  181,  180,
      187,  182,  186,  204,  204,  185,  197,  190,  189,  195,
      199,  197,  206,  198,  196,  199,  192,  198,  188,  203,
      194,  205,  200,  230,  203,  205,  236,  206,  230,  240,
      204,  252,  198,  264,  240,  281,  197,  714,  236,  196,
      199,  600,  198,  252,  289,  264,  597,  281,  714,  203,
      205,  592,  206,  230,  591,  586,  289,  198,  213,  240,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  215,  223,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  580,  574,  573,

      222,  572,  571,  223,  569,  558,  213,  213,  213,  213,
      213,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      222,  214,  214,  214,  214,  214,  214,  216,  223,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  554,  551,
      238,  290,  549,  540,  538,  222,  238,  214,  214,  214,
      214,  214,  217,  290,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      218,  238,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      217,  217,  217,  217,  217,  219,  537,  219,  219,  219,

      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  220,  225,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  224,  225,  225,  225,  228,  229,
      231,  232,  237,  219,  219,  219,  219,  219,  239,  241,
      232,  237,  303,  224,  231,  243,  244,  239,  228,  229,
      225,  225,  225,  245,  241,  242,  242,  246,  245,  533,
      243,  244,  246,  247,  249,  232,  237,  303,  224,  231,
      243,  251,  239,  228,  229,  250,  253,  247,  249,  241,
      248,  248,  242,  245,  257,  243,  244,  246,  255,  251,
      250,  261,  258,  255,  259,  265,  253,  258,  262,  257,

      260,  260,  247,  249,  263,  266,  259,  248,  300,  266,
      262,  284,  300,  265,  251,  250,  284,  261,  255,  282,
      282,  253,  258,  263,  257,  532,  529,  260,  313,  527,
      526,  259,  314,  320,  266,  262,  525,  300,  265,  519,
      313,  284,  261,  517,  314,  320,  282,  270,  263,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  271,  291,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  272,  291,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  511,  500,  493,
      286,  492,  491,  487,  486,  286,  271,  271,  271,  271,

      271,  273,  291,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  274,
      286,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      483,  478,  472,  323,  444,  441,  297,  297,  440,  273,
      273,  273,  273,  273,  278,  323,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  280,  297,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  439,  434,  424,  418,  283,  417,  415,
      392,  383,  278,  278,  278,  278,  278,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  283,  279,  279,  279,

      279,  279,  279,  285,  288,  293,  294,  295,  296,  287,
      299,  382,  285,  305,  381,  377,  298,  288,  293,  294,
      295,  283,  301,  279,  279,  279,  279,  279,  287,  298,
      296,  305,  299,  304,  306,  301,  310,  285,  312,  308,
      309,  312,  288,  293,  294,  295,  304,  309,  310,  315,
      316,  342,  306,  287,  298,  296,  305,  299,  308,  311,
      301,  318,  315,  319,  311,  317,  312,  322,  316,  366,
      317,  304,  309,  310,  321,  324,  342,  306,  319,  322,
      318,  346,  346,  308,  324,  400,  413,  315,  426,  311,
      343,  341,  329,  316,  321,  317,  343,  400,  413,  326,

      426,  342,  325,  319,  322,  318,  307,  292,  346,  324,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  321,
      330,  343,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  332,  461,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  277,
      350,  461,  269,  268,  340,  350,  267,  256,  330,  330,
      330,  330,  330,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  340,  331,  331,  331,  331,  331,  331,  333,
      350,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      254,  359,  234,  469,  233,  221,  211,  340,  210,  331,

      331,  331,  331,  331,  334,  469,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  335,  359,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  336,  360,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  335,  335,  335,  335,  335,  337,  360,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  338,  347,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  344,  365,  339,
      347,  349,  209,  345,  471,  348,  337,  337,  337,  337,

      337,  339,  345,  348,  339,  351,  471,  344,  365,  348,
      339,  348,  364,  349,  353,  347,  352,  352,  354,  353,
      351,  354,  361,  361,  208,  355,  339,  345,  348,  339,
      355,  364,  344,  365,  348,  339,  348,  356,  349,  362,
      363,  372,  356,  352,  353,  351,  354,  357,  358,  361,
      367,  368,  357,  358,  367,  355,  364,  369,  375,  370,
      369,  362,  363,  372,  367,  373,  368,  356,  370,  371,
      371,  374,  375,  378,  380,  396,  379,  357,  358,  367,
      396,  376,  378,  202,  373,  369,  362,  363,  372,  367,
      374,  368,  380,  370,  376,  379,  371,  375,  513,  557,

      595,  637,  191,  401,  184,  396,  177,  378,  401,  373,
      513,  557,  595,  637,  173,  374,  156,  380,  155,  376,
      379,  384,  152,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  385,  401,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  386,  105,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  387,  420,  387,  387,  387,  387,  387,  387,  387,
      387,  387,   91,   90,   79,   62,   58,   53,  399,  399,
       49,  386,  386,  386,  386,  386,  388,  420,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,

      388,  388,  388,  388,  389,  399,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  402,   48,   45,   40,   26,
       18,   14,   12,  402,  388,  388,  388,  388,  388,  393,
        7,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  395,  402,  395,
      395,  395,  395,  395,  395,  395,  395,  395,    4,    3,
        0,    0,    0,  403,  405,  405,  404,  393,  393,  393,
      393,  393,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  397,  394,  394,  394,  394,  394,  394,  398,  403,
      404,  405,  406,  410,  408,  397,  409,  412,  407,  411,

      433,  409,  398,  411,  416,  406,  408,  410,  394,  394,
      394,  394,  394,  407,  403,  404,  416,  414,  422,  433,
      397,  412,  414,  422,  421,    0,  409,  398,  411,  423,
      406,  408,  410,  421,  423,  425,  427,  428,  407,  427,
      429,  416,  431,  425,  433,  430,  412,  414,  422,  430,
      428,  431,  429,  458,  436,  432,  435,  437,  421,  423,
      432,  435,  438,  437,  427,  453,  453,  460,  425,  436,
      473,  466,  460,  458,  430,  428,  431,  429,  438,    0,
        0,    0,    0,    0,    0,  432,  435,    0,  437,  466,
        0,    0,  453,    0,  436,  473,    0,  460,  458,    0,

        0,    0,    0,  438,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  445,  466,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  447,    0,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  445,  445,  445,  445,  445,  446,  446,  446,  446,
      446,  446,  446,  446,  446,    0,  446,  446,  446,  446,
      446,  446,  450,  474,  450,  450,  450,  450,  450,  450,
      450,  450,  450,    0,    0,    0,    0,    0,    0,  463,
      463,    0,  446,  446,  446,  446,  446,  449,  474,  449,

      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  452,  463,  452,  452,  452,
      452,  452,  452,  452,  452,  452,    0,    0,    0,  454,
        0,    0,    0,    0,    0,  449,  449,  449,  449,  449,
      451,  454,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  455,  456,
      459,  457,  462,  464,  465,  465,  454,  467,  523,  455,
      470,  468,  456,  457,  475,  459,  468,  464,  451,  451,
      451,  451,  451,  470,  479,  476,  462,  467,  475,  477,
      480,  465,  481,  523,  455,  480,  479,  456,  457,  485,

      459,  468,  464,  476,  484,  481,  482,  477,  470,  506,
      488,  462,  467,  475,  488,  482,  509,  485,  484,  489,
      480,  479,  490,  506,  489,  509,  524,  490,  476,    0,
      481,    0,  477,  508,    0,    0,    0,    0,  508,  488,
      482,    0,  485,  484,    0,    0,    0,    0,  506,  489,
      509,  524,  490,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  495,  508,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      496,    0,  496,  496,  496,  496,  496,  496,  496,  496,
      496,    0,    0,    0,    0,    0,    0,    0,    0,  505,

      495,  495,  495,  495,  495,  497,    0,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  498,  505,  498,  498,  498,  498,  498,
      498,  498,  498,  498,    0,    0,    0,    0,  510,    0,
        0,    0,  510,  497,  497,  497,  497,  497,  501,  505,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  503,  510,  503,  503,
      503,  503,  503,  503,  503,  503,  503,    0,    0,  515,
        0,  504,  514,    0,  515,  514,  501,  501,  501,  501,
      501,  502,  502,  502,  502,  502,  502,  502,  502,  502,

      504,  502,  502,  502,  502,  502,  502,  507,  512,  515,
      514,  520,  516,  518,  518,  522,  611,  521,  535,  536,
      512,  516,  536,  520,  522,  504,  507,  502,  502,  502,
      502,  502,  521,  528,  530,    0,  531,  611,  535,  534,
      518,  531,  528,  530,  534,  512,  516,  536,  520,  522,
        0,  507,    0,    0,    0,    0,    0,  521,    0,  548,
        0,    0,  611,  535,  548,    0,  531,  528,  530,  534,
      541,    0,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  543,  548,
      543,  543,  543,  543,  543,  543,  543,  543,  543,    0,

      555,    0,    0,    0,    0,  555,    0,  550,  541,  541,
      541,  541,  541,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  550,  542,  542,  542,  542,  542,  542,  545,
      555,  545,  545,  545,  545,  545,  545,  545,  545,  545,
        0,    0,    0,  561,    0,    0,    0,  550,  561,  542,
      542,  542,  542,  542,  544,    0,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  547,  561,  547,  547,  547,  547,  547,  547,
      547,  547,  547,    0,  552,    0,    0,    0,    0,    0,
        0,    0,  544,  544,  544,  544,  544,  546,  552,  546,

      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  553,  559,  556,  562,  560,
      563,  566,  562,  552,  563,  567,  568,  566,  553,  556,
      559,  560,  570,  588,  588,  546,  546,  546,  546,  546,
      568,  570,  593,  593,    0,  567,    0,  562,    0,  563,
        0,    0,  566,  553,  556,  559,  560,    0,    0,    0,
      588,    0,    0,    0,    0,  568,  570,  585,    0,  593,
      567,  575,    0,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  576,
      585,  576,  576,  576,  576,  576,  576,  576,  576,  576,

        0,    0,    0,  587,    0,    0,    0,    0,  587,  575,
      575,  575,  575,  575,  577,  585,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  578,  587,  578,  578,  578,  578,  578,  578,
      578,  578,  578,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  577,  577,  577,  577,  577,  581,    0,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  583,  584,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  589,  594,    0,  596,
        0,  589,  594,  584,  596,  581,  581,  581,  581,  581,

      582,  582,  582,  582,  582,  582,  582,  582,  582,  590,
      582,  582,  582,  582,  582,  582,  589,  594,  584,  596,
      599,  598,  590,  615,  615,  644,  616,  617,  590,  612,
      616,    0,    0,  599,  644,  617,  582,  582,  582,  582,
      582,  598,  614,  612,    0,    0,    0,  590,    0,    0,
      615,    0,    0,  590,    0,  616,    0,    0,  599,  644,
      617,  614,    0,    0,    0,    0,  598,  604,  612,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  606,  614,  606,  606,  606,
      606,  606,  606,  606,  606,  606,    0,  623,    0,    0,

      618,    0,  623,    0,    0,  604,  604,  604,  604,  604,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  618,
      605,  605,  605,  605,  605,  605,  608,  623,  608,  608,
      608,  608,  608,  608,  608,  608,  608,    0,    0,    0,
      636,    0,    0,    0,  618,  636,  605,  605,  605,  605,
      605,  607,    0,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  610,
      636,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      620,    0,    0,  638,    0,    0,    0,    0,  638,  607,
      607,  607,  607,  607,  609,  620,  609,  609,  609,  609,

      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  622,  638,  681,    0,  717,  621,    0,  628,
      620,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      717,  622,  609,  609,  609,  609,  609,  621,  630,  681,
      630,  630,  630,  630,  630,  630,  630,  630,  630,    0,
        0,    0,  642,    0,    0,  717,  622,  642,    0,    0,
        0,    0,  621,  627,  681,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  635,  642,  635,  635,  635,  635,  635,  635,  635,
      635,  635,    0,    0,    0,    0,    0,    0,  641,  641,

        0,  627,  627,  627,  627,  627,  629,    0,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  639,  641,    0,    0,    0,  667,
        0,  654,  643,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  667,  639,  629,  629,  629,  629,  629,  633,
      643,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  667,  639,    0,
        0,    0,    0,    0,  656,  643,  656,  656,  656,  656,
      656,  656,  656,  656,  656,    0,    0,  633,  633,  633,
      633,  633,  634,  634,  634,  634,  634,  634,  634,  634,

      634,    0,  634,  634,  634,  634,  634,  634,  658,  659,
      658,  658,  658,  658,  658,  658,  658,  658,  658,    0,
      660,    0,    0,    0,    0,    0,  660,  659,  634,  634,
      634,  634,  634,  652,    0,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  660,  659,    0,    0,  662,    0,    0,    0,    0,
      662,    0,    0,  666,    0,    0,    0,  666,    0,    0,
        0,  652,  652,  652,  652,  652,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  662,  653,  653,  653,  653,
      653,  653,  666,  673,  682,  673,  673,  673,  673,  673,

      673,  673,  673,  673,    0,    0,    0,    0,    0,    0,
        0,  682,  653,  653,  653,  653,  653,  655,    0,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  675,  682,  675,  675,  675,
      675,  675,  675,  675,  675,  675,    0,    0,    0,  688,
        0,    0,    0,    0,  688,  655,  655,  655,  655,  655,
      657,    0,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  680,  688,
      680,  680,  680,  680,  680,  680,  680,  680,  680,    0,
        0,  689,    0,    0,    0,    0,  689,    0,  657,  657,

      657,  657,  657,  672,    0,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  689,  697,    0,  697,  697,  697,  697,  697,  697,
      697,  697,  697,    0,    0,    0,  702,    0,    0,  707,
      702,  672,  672,  672,  672,  672,  674,    0,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  707,  674,  674,
      674,  674,  674,  674,  699,  702,  699,  699,  699,  699,
      699,  699,  699,  699,  699,    0,    0,    0,    0,    0,
        0,    0,  707,    0,  674,  674,  674,  674,  674,  678,
        0,  678,  678,  678,  678,  678,  678,  678,  678,  678,

      678,  678,  678,  678,  678,  678,  678,  713,    0,  713,
      713,  713,  713,  713,  713,  713,  713,  713,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  678,  678,  678,
      678,  678,  696,    0,  696,  696,  696,  696,  696,  696,
      696,  696,  696,    0,  696,  696,  696,  696,  696,  696,
      726,    0,  726,  726,  726,  726,  726,  726,  726,  726,
      726,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      696,  696,  696,  696,  696,  698,    0,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  698,  698,  698,  698,  698,  712,    0,
      712,  712,  712,  712,  712,  712,  712,  712,  712,    0,
      712,  712,  712,  712,  712,  712,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  712,  712,  712,  712,
      712,  754,  754,  754,  754,  754,  754,  754,  755,  755,
      755,  755,  755,  755,  755,  756,  756,  756,  756,  756,
      756,  756,  757,    0,  757,  757,  757,  757,  757,  758,
      758,  758,  758,  758,  758,  758,  759,  759,  759,  759,

      759,  760,    0,  760,  760,  760,  760,  760,  761,  761,
      761,  762,    0,  762,  763,  763,  763,  764,  764,  764,
      765,  765,  765,  766,  766,  766,  767,  767,  767,  768,
      768,  768,  769,  769,  769,  770,  770,  770,  771,  771,
      771,  772,  772,  772,  773,  773,  773,  774,  774,  774,
      775,  775,  775,  776,  776,  776,  777,  777,  777,  778,
      778,  778,  779,  779,  779,  780,  780,  780,  781,  781,
      781,  782,  782,  782,  783,  783,  783,  784,  784,  784,
      785,  785,  785,  786,  786,  786,  787,  787,  787,  788,
      788,  788,  789,  789,  789,  790,    0,  790,  791,  791,

      791,  792,  792,  792,  793,    0,  793,  794,  794,  794,
      795,  795,  795,  796,    0,  796,  797,    0,  797,  798,
      798,  798,  799,  799,  799,  800,    0,  800,  801,  801,
      801,  802,    0,  802,  803,    0,  803,  804,  804,  804,
      805,  805,  805,  806,  806,  806,  807,    0,  807,  808,
      808,  808,  809,  809,  809,  810,  810,  810,  811,    0,
      811,  812,  812,  812,  813,  813,  813,  814,  814,  814,
      815,    0,  815,  816,  816,  816,  817,  817,  817,  818,
      818,  818,  819,    0,  819,  820,  820,  820,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,

      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[92] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 1633 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 1738 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 754 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4089 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 60 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 62 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::ACCEPT_UNKNOWN_FQDN_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::EXTRA_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::TUNNEL_MODE_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 108 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 122 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 125 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 131 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno; 
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 137 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 138 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 78:
YY_RULE_SETUP
#line 145 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 154 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 163 "SrvLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 172 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 181 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 190 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 199 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 211 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 218 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 239 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd then no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 271 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd; 
      YYABORT; 
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 281 "SrvLexer.l"
{ 
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) { 
        Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd; 
        YYABORT; 
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 290 "SrvLexer.l"
{ return yytext[0]; } 
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 293 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 2421 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 754 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 754 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 753);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 293 "SrvLexer.l"




