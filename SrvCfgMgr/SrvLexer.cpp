#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 108
#define YY_END_OF_BUFFER 109
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[903] =
    {   0,
        1,    1,    0,    0,    0,    0,  109,  107,    2,    1,
        1,  107,   89,  107,  107,  106,  106,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
       93,   93,  108,    1,    1,    1,    0,  101,   89,    0,
      101,   91,   90,  106,    0,    0,  105,    0,   98,   72,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,   86,  102,
      102,   74,  102,  102,  102,  102,  102,  102,  102,  102,

      102,   17,   18,  102,  102,  102,  102,  102,  102,  102,
      102,   92,   90,  106,    0,    0,    0,   97,  103,   96,
       96,  102,  102,  102,  102,   73,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
       85,  106,    0,    0,    0,    0,   95,   95,    0,   96,
        0,   96,  102,  102,  102,  102,  102,  102,  102,  102,
      102,   80,  102,  102,  102,  102,   30,  102,  102,   41,

      102,  102,  102,  102,  102,  102,  102,  102,    0,  102,
      102,  102,  102,  102,  102,   23,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,   87,  102,
      102,  102,  102,  106,    0,  104,    0,    0,    0,   95,
        0,   95,    0,   96,   96,   96,   96,  102,  102,  102,
      102,   79,  102,  102,    4,  102,  102,  102,  102,  102,
      102,  102,   88,  102,    3,  102,  102,  102,  102,  102,
      102,  102,  102,  102,    0,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,    7,  102,   24,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,    0,

        0,    0,    0,    0,   95,   95,   95,   95,    0,   96,
       96,   96,    0,   96,  102,  102,  102,  102,  102,  102,
      102,  102,   29,  102,  102,  102,   36,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
        0,    0,  102,  102,  102,   34,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,   83,  102,  102,  102,
      102,  102,  102,  102,    0,    0,    0,    0,   95,   95,
       95,    0,   95,    0,    0,   96,   96,   96,   96,  102,
      102,   32,  102,  102,  102,  102,  102,    0,  102,  102,
       82,  102,  102,  102,  102,  102,  102,  102,  102,  102,

      102,  102,  102,  102,  102,  102,    0,    0,  102,  102,
      102,  102,  102,   51,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,   21,  102,  102,  102,  104,    0,
        0,    0,    0,    0,   95,   95,   95,   95,    0,   96,
       96,   96,    0,   96,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,    0,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,   47,  102,
      102,   12,   10,   71,  102,    0,    0,  102,  102,  102,
       49,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,    5,  102,  102,  102,   14,    0,    0,    0,    0,

       95,   95,   95,    0,   95,  100,   96,   96,   96,   96,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
        0,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,   11,   55,    0,    0,  102,
      102,  102,   50,  102,  102,  102,  102,   31,  102,  102,
        6,   81,   38,  102,  102,    0,    0,    0,    0,   99,
       95,   95,   95,   95,   96,   96,   96,    0,   96,  102,
      102,  102,  102,  102,  102,  102,  102,   48,  102,    0,
      102,  102,  102,  102,  102,  102,   35,  102,  102,   33,
      102,  102,  102,   13,    0,    0,   44,   43,   37,  102,

       22,  102,  102,   40,   39,  102,  102,  104,    0,    0,
       95,   95,   95,    0,   95,   96,   96,   96,   96,  102,
       15,  102,   54,  102,  102,  102,   59,  102,    0,  102,
      102,  102,  102,   62,  102,  102,  102,  102,  102,  102,
       46,   45,  102,  102,  102,  102,   52,    0,    0,    0,
        0,   95,   95,   95,   95,   96,   96,   96,    0,   96,
      102,  102,   84,   61,  102,  102,    0,   70,  102,  102,
      102,   63,  102,   53,  102,  102,    8,  102,   25,  102,
      102,    0,    0,    0,   95,   95,   95,    0,   95,   96,
       96,   96,   96,  102,  102,   60,  102,    0,  102,  102,

      102,  102,  102,  102,   57,  102,  102,  102,  102,  104,
        0,    0,    0,   95,   95,   95,   95,   96,   96,   96,
        0,   96,  102,  102,  102,    0,  102,  102,  102,  102,
       56,  102,  102,  102,   16,   20,    0,    0,   94,   97,
       95,   95,   95,    0,   95,   96,   96,   96,   96,  102,
      102,   27,    0,    0,  102,  102,  102,   64,  102,   26,
      102,  102,    0,    0,   94,    0,   95,   95,   95,   95,
       95,   96,   96,   96,    0,   96,  102,  102,    0,    0,
       28,  102,  102,   65,  102,  102,  102,  102,  102,  104,
       94,   97,   95,    0,   95,   95,   95,   95,   96,   96,

       96,   58,  102,    0,    0,  102,  102,  102,  102,  102,
      102,  102,   19,    0,   94,   95,   95,   95,   95,   96,
       96,   96,  102,    0,    0,  102,  102,   66,   67,   68,
       69,    9,    0,   95,   95,    0,   95,   95,   96,   42,
        0,    0,  102,  102,  104,   95,   95,   96,    0,    0,
        0,  102,  102,  102,    0,   95,   95,    0,    0,    0,
        0,   75,  102,  102,  102,   75,   94,   95,   95,    0,
       77,    0,  102,   77,  102,   94,   95,   95,    0,    0,
       76,  102,   76,    0,   95,   95,   78,   78,    0,   95,
       95,    0,  104,   95,   95,    0,   95,   95,    0,   95,

       95,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
       23,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        1,    1,    1,    1,    1,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    1,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[993] =
    {   0,
        0,    0, 1121, 1120,    0,    0, 1127, 5438, 5438,   73,
       75, 1121,    0, 1118,   72,   72,   34, 1101, 1071,  136,
      186,  233,  280,   71,  208,  338,   38,   73,  197,   89,
      267,  175,  249,  350,  193,  382,   67,  357,  237,  317,
     5438, 1071, 5438,  111,  137,  214, 1077, 5438,    0, 1074,
     1073, 5438,    0,  440, 1056,  459, 5438,    0,  485, 5438,
       61,  528,   86,   89,  182,  265,  279,  184,  239,  381,
      340,  229,  342,  373,  380,  270,  377,  519,  285,  481,
      532,  543,  547,  393,  544,  375,  560,  526,  298,  562,
      564,  426,  551,  561,  575,  571,  576,  598,  584,  615,

      599,  437,  445,  616,  608,  596,  619,  618,  620,  614,
      629, 5438,    0,  687, 1055,  503, 1054,  732,    0,  777,
      706,  820,  633,  626,  812,  628,  820,  679,  810,  815,
      685,  809,  837,  756,  719,  823,  859,  860,  819,  855,
      852,  869,  871,  872,  873,  858,  880,  875,  900,  923,
      902,  912,  905,  908,  904,  925,  911,  921,  913,  948,
      943,  944,  952,  945,  956,  962,  973,  975,  977,  964,
      737, 1035,  757, 1024, 1022, 1020, 1082,  797, 1054, 1127,
     1170, 1101, 1213,  962, 1148,  959, 1069, 1165,  967, 1021,
     1212, 1061, 1201, 1202, 1215, 1216, 1080, 1208, 1233, 1130,

     1211, 1248, 1214, 1247, 1246, 1269, 1263, 1265, 1031, 1266,
     1255, 1299, 1294, 1296, 1303, 1131, 1298, 1300, 1302, 1301,
     1313, 1330, 1334, 1337, 1342, 1345, 1350, 1349, 1210, 1353,
     1365, 1352, 1385, 1146, 1018, 1017, 1016, 1014, 1423, 1445,
     1488, 1464, 1507, 1533, 1552, 1578, 1597, 1006, 1355, 1362,
     1384, 1364, 1590, 1466, 1520, 1576, 1577, 1579, 1599, 1600,
     1595, 1610, 1377, 1630, 1631, 1623, 1627, 1629, 1628, 1634,
     1639, 1635, 1647, 1531, 1668, 1652, 1658, 1679, 1669, 1670,
     1671, 1680, 1685, 1701, 1687, 1387, 1699, 1424, 1704, 1707,
     1702, 1729, 1721, 1714, 1726, 1734, 1737, 1738, 1739, 1001,

      946,  889,  886, 1799, 1810, 1829, 1855, 1874, 1838, 1900,
      876, 1912, 1955, 1931, 1891, 1736, 1943, 1949, 1854, 1950,
     1944, 1475, 2020, 1953, 1945, 1990, 1614, 2005, 2000, 2001,
     2002, 1947, 2011, 2003, 2006, 2007, 2039, 2012, 2036, 2041,
     1729, 1813, 2051, 2045, 2047, 1834, 2054, 2060, 2049, 2074,
     2081, 2059, 2087, 2064, 2079, 2099, 2088, 2103, 2094, 2101,
     2097, 2115, 2138, 2110,  844,  840,  838, 2173, 2184,  833,
     2198, 2241, 2217, 2260, 2286, 2297, 2316, 2342, 2361, 2363,
     2111, 2219, 2339, 2344, 2341, 2358, 2362, 2092, 2393, 2360,
     2126, 2403, 2373, 2276, 2392, 2397, 2415, 2425, 2220, 2426,

     2412, 2430, 2443, 2444, 2446, 2381, 2148, 2180, 2433, 2447,
     2449, 2460, 2462, 2239, 2485, 2471, 2455, 2479, 2500, 2482,
     2466, 2496, 2501, 2502, 2284, 2510, 2514, 2382,  803,  802,
      801,  800, 2572, 2583, 2594, 2613, 2639, 2658, 2622, 2684,
      799, 2696, 2739, 2715, 2717, 2725, 2733, 2638, 2737, 2729,
     2756, 2770, 2734, 2732, 2311, 2762, 2784, 2785, 2775, 2774,
     2780, 2789, 2777, 2798, 2804, 2805, 2812, 2823, 2345, 2819,
     2818, 2477, 2507, 2581, 2822, 2646, 2813, 2837, 2843, 2852,
     2821, 2841, 2860, 2850, 2864, 2866, 2872, 2871, 2877, 2870,
     2879, 2873, 2900, 2895, 2893, 2875,  798,  797,  787, 2958,

     2969,  758, 2981, 3024, 3000, 3009, 3069, 3043, 3114, 3088,
     3022, 3102, 3110, 3011, 2923, 3112, 3105, 3107, 3132, 3108,
     2896, 3135, 3111, 3146, 3163, 3151, 3167, 3148, 3056, 3150,
     3168, 3187, 3162, 3190, 3157, 3159, 3160, 3178, 3195, 3191,
     3198, 3199, 3182, 3206, 3218, 3209, 3212, 3203, 3211, 3234,
     3207, 3214, 3215, 3236, 3255,  757,  746,  745,  743, 3297,
     3315, 3334, 3360, 3379, 3405,  742, 3417, 3460, 3436, 3251,
     3250, 3446, 3449, 3450, 3454, 3359, 3477, 3219, 3461, 3269,
     3455, 3313, 3499, 3501, 3500, 3497, 3294, 3495, 3512, 3302,
     3498, 3496, 3505, 3396, 3498, 3497, 3502, 3504, 3506, 3541,

     3507, 3546, 3551, 3513, 3536, 3543, 3558,  740,  713,  712,
     3616,  711, 3628, 3671, 3647, 3716, 3690, 3761, 3735, 3553,
     3544, 3554, 3545, 3550, 3721, 3658, 3547, 3764, 3558, 3751,
     3759, 3758, 3649, 3556, 3760, 3761, 3765, 3773, 3798, 3805,
     5438, 5438, 3804, 3793, 3801, 3808, 3581,  710,  709,  708,
      674, 3868, 3887, 3913, 3932, 3958,  673, 3970, 4013, 3989,
     3806, 3795, 3669, 3703, 3991, 3912, 3803, 3803, 4008, 4002,
     4011, 3810, 4016, 3847, 4027, 4030, 3900, 4031, 3855, 4013,
     4044,  672,  670,  669, 4102,  658, 4114, 4157, 4133, 4202,
     4176, 4247, 4221, 4006, 4207, 4067, 4236,  666, 4155, 4235,

     4259, 4250, 4247, 4241, 4118, 4246, 4244, 4251, 4287,  653,
      652,  625,  555, 4347, 4319, 4392, 4331, 4366,  553, 4437,
     4480, 4411, 4432, 4345, 4475, 4484, 4469, 4496, 4405, 4497,
     4136, 4499, 4479, 4484, 4189, 4248,  551,  547,  544,    0,
     4557,  543, 4569, 4612, 4588, 4657, 4631, 4702, 4676, 4691,
     4670, 4252, 4292, 4289, 4705, 4599, 4695, 4326, 4727, 4334,
     4719, 4700,  542,  540,  511,  510,  509, 4787, 4763, 4832,
     4806, 4851,  508, 4877,    0, 4896, 4720, 4729, 4417, 4490,
     4480, 4830, 4880, 4481, 4903, 4591, 4548, 4891, 4892,  507,
      506, 5438,  505,    0, 4938,  504, 4963, 4982, 5008, 5027,

        0, 4511, 4895, 4612, 4740, 4896, 4942, 4774, 4766, 4811,
     4723, 4900, 4819,  466,  465,  464,  463, 5053, 5072, 5098,
      462,    0, 5058, 4895,    0, 5054, 5125, 4899, 4941, 4961,
     4995, 5005,  461,  460,  424,    0, 5125, 5438,    0, 5006,
        0, 5122, 5150, 5133,  416,  414,  412, 5438, 5136, 5060,
     5060, 5138, 5144, 5130,  411,  408,  407,    0, 5075, 5116,
     5126, 5438, 5154, 5162, 5127, 5137,  406,  361,  358, 5140,
     5438, 5160, 5158, 5141, 5189,  357,  353,  348,    0, 5181,
     5438, 5191, 5168,  325,  317,  311, 5438, 5172,    0,  307,
      306,    0,  305,  276,  267,  266,  262,  260,    0,  257,

      256, 5438, 5261, 5265, 5269, 5273, 5277, 5281, 5283,  270,
     5285, 5287, 5289, 5291, 5293, 5295, 5297, 5299, 5301, 5303,
     5307, 5309, 5311, 5313, 5315, 5317, 5319, 5321, 5323, 5325,
     5327, 5329, 5331, 5333, 5335, 5337, 5339, 5341, 5343, 5345,
     5347, 5349, 5351, 5353, 5355, 5357, 5359,  261, 5361, 5363,
     5365,  241, 5367, 5369, 5371,  231,  230, 5373, 5375, 5377,
      228, 5381, 5385, 5387, 5389,  219,  217, 5393, 5397, 5399,
     5401, 5403, 5405, 5407,  212, 5409, 5411, 5413, 5415, 5417,
      145, 5419, 5421, 5423,  131, 5425,  117, 5427, 5429, 5431,
       80, 5433

    } ;

static yyconst flex_int16_t yy_def[993] =
    {   0,
      902,    1,  903,  903,  904,  904,  902,  902,  902,  902,
      902,  905,  906,  907,  902,  902,   16,  902,  902,  902,
       20,   20,   22,   22,   22,   22,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      902,  902,  902,  902,  902,  902,  905,  902,  906,  907,
      902,  902,  908,  902,  909,   54,  902,  910,  902,  902,
       26,   26,   62,   62,   26,   26,   26,   26,   62,   26,
       26,   62,   26,   26,   26,   26,   26,   26,   62,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  902,  908,  902,  911,  114,  912,  902,  910,  902,
      120,   62,  122,  122,   26,   26,   26,  122,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  902,  172,  913,  914,  915,  902,  177,  902,  902,
      902,  180,  122,  183,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,  902,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  173,  173,  914,  916,  917,  902,  902,
      902,  240,  902,  902,  244,  902,  246,  183,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  902,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,  918,

      902,  919,  920,  902,  902,  305,  902,  307,  902,  902,
      902,  902,  902,  312,   26,   26,   26,   26,   26,   26,
       26,   26,  921,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      902,  902,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  922,  923,  924,  902,  902,  902,
      902,  902,  371,  902,  902,  902,  376,  902,  378,   26,
       26,   26,   26,   26,   26,   26,   26,  902,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,  902,  902,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  919,  902,
      925,  926,  902,  902,  902,  435,  902,  437,  902,  902,
      902,  902,  902,  442,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  902,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  902,  902,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,  927,  928,  929,  902,

      902,  902,  902,  902,  503,  902,  902,  507,  902,  509,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      902,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  902,  902,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  930,  902,  931,  932,  902,
      902,  561,  902,  563,  902,  902,  902,  902,  567,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,  902,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  902,  902,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,  933,  934,  935,
      902,  902,  902,  902,  613,  902,  616,  902,  618,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  902,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      902,  902,   26,   26,   26,   26,   26,  936,  902,  937,
      938,  902,  652,  902,  654,  902,  902,  902,  902,  658,
       26,   26,   26,   26,   26,   26,  902,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  939,  940,  941,  902,  902,  902,  902,  687,  902,
      690,  902,  692,   26,   26,   26,   26,  902,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,  942,
      902,  943,  944,  902,  714,  902,  716,  902,  902,  902,
      902,  720,   26,   26,   26,  902,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,  945,  946,  947,  948,
      902,  902,  902,  902,  743,  902,  746,  902,  748,   26,
       26,   26,  902,  902,   26,   26,   26,   26,   26,   26,
       26,   26,  949,  902,  950,  902,  951,  902,  768,  902,
      770,  902,  902,  902,  952,  774,   26,   26,  902,  902,
       26,   26,   26,   26,   26,   26,   26,   26,   26,  953,
      954,  902,  955,  956,  902,  902,  902,  797,  902,  799,

      957,   26,   26,  902,  902,   26,   26,   26,   26,   26,
       26,   26,   26,  958,  902,  959,  960,  902,  818,  902,
      902,  961,   26,  902,  962,   26,  963,   26,   26,   26,
       26,   26,  964,  902,  965,  966,  902,  902,  967,   26,
      968,  902,  969,   26,  970,  971,  972,  902,  902,  902,
      902,   26,   26,   26,  973,  902,  974,  975,  902,  902,
      902,  902,   26,   26,   26,   26,  976,  977,  978,  902,
      902,  902,   26,   26,   26,  979,  902,  980,  981,  902,
      902,   26,   26,  982,  983,  984,  902,   26,  985,  902,
      986,  987,  902,  988,  989,  982,  902,  990,  991,  992,

      902,    0,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902

    } ;

static yyconst flex_int16_t yy_nxt[5514] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   27,   27,   29,   30,   31,   32,   33,   27,
       34,   35,   36,   37,   38,   39,   27,   40,   27,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   27,   27,
       29,   30,   31,   32,   33,   27,   34,   35,   36,   37,
       38,   39,   27,   40,   27,   44,   45,   46,   45,   52,
      902,   61,  771,   53,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   55,   62,   56,   56,   56,   56,   56,

       56,   82,   57,  107,   61,   61,  902,   61,   61,   83,
       61,  123,   86,   44,   45,  124,   61,   78,   58,  895,
       62,   56,   56,   56,   56,   56,   56,   82,   57,  107,
       61,   61,   61,  893,   61,   83,   61,  123,   86,   46,
       45,  124,   61,   78,   58,   61,   61,  886,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   55,   61,   62,
       62,   63,   64,   62,   62,   61,   65,   61,   61,   61,
       66,   61,   67,   61,   61,   61,   61,   61,   61,   68,
       61,   61,   61,   61,   61,   62,   62,   63,   64,   62,
       62,   61,   65,   61,   61,   61,   66,   61,   67,   61,

       61,   61,   61,   61,   61,   68,   61,   61,   61,   61,
       61,   62,   62,   91,  869,   92,   44,   45,   61,  848,
       61,  847,   61,   98,   99,   61,  127,   61,   84,   61,
      839,   79,  822,  817,   85,  100,  101,   62,   62,   91,
       61,   92,   61,  801,   61,   61,   61,   80,   61,   98,
       99,   61,  127,   61,   84,   61,   69,   79,   62,   62,
       85,  100,  101,  767,  128,  132,   61,   70,   61,   61,
       71,   61,  119,   80,  110,   93,   61,  899,  899,  136,
       61,  899,   69,  892,   62,   62,   94,  902,  899,   95,
      128,  132,   61,   70,   87,   61,   71,  892,   88,  125,

      110,   93,   61,   62,   89,  126,   61,   72,   61,   90,
       61,   73,   94,   61,   61,   95,   74,   75,   61,  139,
       87,   76,   61,   77,   88,  125,  896,  892,  879,   62,
       89,  126,  892,   72,   61,   90,   61,   73,  879,   61,
       61,   61,   74,   75,  111,  139,  792,   76,   61,   77,
       61,   61,   61,   61,   61,   61,   61,   61,   61,  902,
       61,   61,   61,   61,   61,   61,   61,   61,   61,  879,
      111,  133,   61,   96,  858,   61,  131,   97,  884,  879,
      108,   81,  858,   61,  109,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,  102,  103,  133,   61,   96,

       61,   61,  131,   97,  129,  104,  108,   81,  137,   61,
      109,   61,  130,  105,  134,  135,   61,  147,   61,   61,
       61,  145,  106,   61,   61,   61,   61,  766,  858,  836,
      129,  104,  740,  858,  137,  836,   61,  855,  130,  105,
      134,  135,   61,  147,   61,  836,   61,  145,  106,   61,
       61,   61,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  115,   61,  116,  116,  116,  116,  116,  116,   61,
       57,  116,  116,  116,  116,  116,  116,  116,  116,  116,
       61,  794,  713,  775,  836,  794,  766,  118,   61,  116,
      116,  116,  116,  116,  116,   61,   57,  120,  120,  120,

      120,  120,  120,  120,  120,  120,   61,  140,  121,  121,
      121,  121,  121,  121,   61,  173,  173,  173,  173,  173,
      173,  173,  173,  173,   61,  744,  794,  766,  814,  721,
      794,  792,  766,  140,  121,  121,  121,  121,  121,  121,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  115,
       61,  122,  122,  122,  122,  122,  122,  138,   65,  141,
      152,  713,   61,  651,  688,  766,  142,  149,  713,   61,
      143,   61,  118,  146,  659,   61,  740,  122,  122,  122,
      122,  122,  122,  138,   65,  141,   61,   61,   61,  144,
       61,  148,  142,  149,   61,   61,  143,   61,  153,  146,

      150,   61,  154,   61,   61,   61,  151,   61,  156,  155,
      157,  158,   61,   61,   61,  144,   61,  148,   61,   61,
       61,  159,  160,  163,  153,  164,  150,   61,  154,   61,
       61,   61,  151,   61,  156,  155,  157,  158,  161,  166,
       61,   61,   61,  165,   61,   61,  713,  159,  160,  163,
      167,   61,  168,   61,  170,  162,  169,   61,   61,   61,
      184,   61,   61,   61,  161,  166,  185,   61,   61,  165,
      171,   61,   61,  651,  737,  726,  167,   61,  168,  614,
      170,  162,  169,   61,   61,   61,  184,   61,   61,   61,
      713,  651,  185,  559,  568,  118,  171,   61,   61,  172,

      172,  172,  172,  172,  172,  172,  172,  172,   55,  188,
      173,  173,  173,  173,  173,  173,  902,   57,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  191,   61,  651,
      559,  118,  504,  651,  559,  188,  173,  173,  173,  173,
      173,  173,  195,   57,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  191,   61,  178,  178,  178,  178,  178,
      178,  648,   61,  443,  118,  194,  559,  432,  195,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  432,  372,
       61,  178,  178,  178,  178,  178,  178,  179,   61,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  181,   61,

      182,  182,  182,  182,  182,  182,   61,  902,  559,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  432,  118,
      313,  118,  432,  303,  497,   61,  182,  182,  182,  182,
      182,  182,  183,  183,  183,  183,  183,  183,  183,  183,
      183,   55,  190,  183,  183,  183,  183,  183,  183,  186,
      187,  189,   61,   61,  241,   61,  192,  196,   61,  432,
      199,  303,   61,   61,  193,  303,   61,  206,  190,  183,
      183,  183,  183,  183,  183,  186,  187,  189,   61,   61,
       61,   61,  192,  196,   61,  197,  199,  198,   61,   61,
      193,  200,   61,  201,  202,   61,  203,  181,   61,  204,

      205,   61,   61,   61,  208,  207,   61,  118,  209,  210,
      303,  197,   61,  198,   61,   61,   61,  200,   61,  201,
      202,   61,  203,   61,   61,  204,  205,   61,   61,   61,
      208,  207,  211,  212,  220,  218,  217,  213,   61,  216,
       61,   61,   61,   61,   61,   61,  214,   61,   61,   61,
      215,   61,  219,  222,   61,   61,   61,  223,  221,  212,
      220,  218,  217,  213,   61,  216,   61,  176,   61,   61,
      227,   61,  214,   61,   61,  225,  215,   61,  219,  222,
       61,   61,   61,  228,  221,  224,   61,   61,   61,  229,
       61,   61,   61,  226,   61,   61,  227,  233,  230,   61,

      249,  225,   61,  232,  252,   61,  231,   61,  255,  228,
       61,  224,   61,   61,   61,  229,   61,   61,   61,  226,
       61,   61,  118,  233,  230,   61,  249,  902,   61,  232,
      252,   61,  231,   61,  255,  303,   61,  176,  300,  902,
      275,  118,   61,  176,   61,  176,   61,  234,  234,  234,
      234,  234,  234,  234,  234,  234,   55,  256,  235,  235,
      235,  235,  235,  235,   61,   57,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  176,  118,  118,  253,   50,
       51,   48,  112,  256,  235,  235,  235,  235,  235,  235,
       61,   57,  239,   60,  240,  240,  240,  240,  240,  240,

      240,  240,  240,  241,   61,  242,  242,  242,  242,  242,
      242,  902,   61,  245,  245,  245,  245,  245,  245,  245,
      245,  245,   59,   61,   51,   48,  902,   42,   42,  902,
       61,  242,  242,  242,  242,  242,  242,  179,   61,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  181,   61,
      245,  245,  245,  245,  245,  245,  902,  250,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  902,  902,  902,
      902,  902,  902,   61,   61,  251,  245,  245,  245,  245,
      245,  245,  246,  246,  246,  246,  246,  246,  246,  246,
      246,   61,  254,  247,  247,  247,  247,  247,  247,   61,

       61,  251,  902,  902,  902,  902,  902,  902,   61,  902,
      902,  902,  902,  902,  902,  902,  902,   61,  254,  247,
      247,  247,  247,  247,  247,  248,  248,  248,  248,  248,
      248,  248,  248,  248,   61,  257,  248,  248,  248,  248,
      248,  248,  258,  259,   61,   61,  260,  261,  262,  902,
      902,   61,  264,   61,   61,   61,  266,   61,   61,   61,
      263,  257,  248,  248,  248,  248,  248,  248,  258,  259,
       61,   61,  260,  261,  262,  265,   61,   61,  264,   61,
       61,   61,  266,   61,   61,   61,  263,  267,  268,   61,
       61,   61,  276,  273,  269,  274,  278,  902,   61,  902,

      902,  265,   61,  270,  271,  272,   61,  277,   61,   61,
      902,  902,   61,  267,  268,   61,   61,   61,  276,  273,
      269,  274,  278,  281,   61,  283,  284,  285,  280,  270,
      271,  272,   61,  277,   61,   61,  279,   61,   61,   61,
      282,   61,   61,   61,   61,   61,   61,  902,  286,  281,
      902,  283,  284,  285,  280,  287,   61,  288,  295,  902,
      289,  902,  279,   61,  291,   61,  282,   61,   61,   61,
       61,   61,   61,   61,  286,  290,  296,   61,  292,  902,
       61,  287,   61,  288,  294,   61,  289,  293,   61,  298,
      291,  297,   61,   61,  299,   61,   61,  315,   61,   61,

      316,  290,  296,   61,  292,   61,   61,   61,   61,  902,
      294,   61,  902,  293,   61,  298,  902,  297,   61,   61,
       61,   61,   61,  315,   61,  317,  316,   61,   61,  902,
       61,   61,  902,   61,   61,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  902,  902,   61,  902,  902,  902,
      902,  317,  902,   61,   61,  239,   61,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  241,   61,  306,  306,
      306,  306,  306,  306,  902,  321,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  902,  902,  902,  902,  902,
      902,  902,  902,   61,  306,  306,  306,  306,  306,  306,

      307,  307,  307,  307,  307,  307,  307,  307,  307,   61,
      387,  308,  308,  308,  308,  308,  308,  309,   61,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  902,  322,
      902,  902,  902,  902,  902,   61,  387,  308,  308,  308,
      308,  308,  308,  179,   61,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  181,  340,  311,  311,  311,  311,
      311,  311,  902,   61,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  902,   61,  902,  902,  902,  902,  902,
      902,  340,  311,  311,  311,  311,  311,  311,  179,   61,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  313,

       61,  314,  314,  314,  314,  314,  314,  902,  324,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  323,   61,
       61,  325,   61,  318,  319,  320,  326,  314,  314,  314,
      314,  314,  314,   61,  324,  902,  327,  328,   61,  330,
      331,  329,   61,   61,  323,   61,   61,  325,   61,  318,
      319,  320,  326,   61,  332,  333,  339,   61,  338,   61,
      334,  336,  327,  328,   61,  335,   61,  329,   61,   61,
       61,   61,   61,   61,   61,  902,  337,   61,   61,   61,
      332,  333,   61,   61,  338,  344,  334,  336,  902,  343,
       61,  335,   61,  347,  341,   61,   61,   61,   61,   61,

       61,   61,  337,   61,   61,  346,  345,  348,   61,  342,
      351,  344,   61,   61,   61,  343,   61,  349,  902,  347,
      341,   61,   61,   61,  902,  350,  353,   61,   61,  352,
       61,  346,  345,  348,  355,  342,  356,  359,   61,   61,
       61,  354,   61,  349,   61,   61,  362,   61,   61,   61,
       61,  350,  353,  902,   61,  352,   61,   61,  357,  381,
      355,  358,  356,  359,   61,  364,  407,  354,   61,   61,
       61,   61,   61,   61,  360,  361,   61,   61,  363,   61,
       61,   61,   61,   61,  357,  381,  902,  358,  902,  902,
       61,  364,  407,  902,  902,   61,  902,  902,   61,  902,

      360,  361,  902,   61,  363,   61,   61,   61,   61,  368,
      902,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      239,  902,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  241,  902,  370,  370,  370,  370,  370,  370,  902,
      408,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  370,
      370,  370,  370,  370,  370,  239,  408,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  372,   61,  373,  373,
      373,  373,  373,  373,  902,  384,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  902,  902,   61,  902,  902,

      380,  902,  902,   61,  373,  373,  373,  373,  373,  373,
      179,  384,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  181,  179,   61,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  313,   61,  377,  377,  377,  377,  377,
      377,  902,  902,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  902,  902,  392,  902,  902,  902,  902,  902,
       61,  377,  377,  377,  377,  377,  377,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  383,  385,  379,  379,
      379,  379,  379,  379,  382,  386,   61,   61,   61,  391,
       61,  398,   61,   61,  902,  902,   61,  902,  902,  902,

      902,  902,  383,  385,  379,  379,  379,  379,  379,  379,
      382,  386,   61,   61,   61,  391,   61,  398,   61,   61,
      388,  388,   61,  388,  388,  388,  388,  388,  388,  389,
      393,  388,  394,   61,  399,  395,  396,  397,  400,  902,
      401,  388,  388,   61,   61,   61,   61,  404,   61,   61,
       61,  402,  902,  902,   61,   61,  393,  902,  394,   61,
      399,  395,  396,  397,  400,  403,  401,  405,  417,   61,
       61,   61,   61,  404,   61,   61,   61,  402,  406,   61,
       61,   61,   61,  414,   61,  410,  409,  411,   61,  413,
       61,  403,   61,  405,   61,  412,  418,   61,  902,  419,

      902,  415,   61,   61,  406,   61,  416,   61,   61,  414,
       61,  410,  409,  411,   61,  413,   61,   61,   61,  420,
       61,  412,   61,   61,   61,  419,  421,  415,   61,   61,
       61,   61,  416,   61,  422,  423,  455,   61,  424,  425,
       61,  428,   61,   61,   61,  420,   61,  427,   61,  426,
       61,  448,  421,   61,   61,  902,   61,   61,   61,  902,
      422,  423,  455,   61,  424,  425,   61,  428,   61,   61,
       61,  902,   61,  902,  902,  426,  902,  448,  902,   61,
       61,   61,  902,  476,   61,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  239,   61,  434,  434,  434,  434,

      434,  434,  434,  434,  434,  241,  902,   61,  239,  476,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  372,
      477,  436,  436,  436,  436,  436,  436,  902,  449,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  902,  902,
      902,  902,  902,  902,  902,  468,  477,  436,  436,  436,
      436,  436,  436,  437,  437,  437,  437,  437,  437,  437,
      437,  437,   61,   61,  438,  438,  438,  438,  438,  438,
      439,  468,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  902,   61,  902,  902,  463,  902,  902,   61,   61,
      438,  438,  438,  438,  438,  438,  179,  902,  375,  375,

      375,  375,  375,  375,  375,  375,  375,  179,   61,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  313,   61,
      441,  441,  441,  441,  441,  441,  902,   61,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  902,  521,  902,
      902,  902,  902,  902,  902,   61,  441,  441,  441,  441,
      441,  441,  179,   61,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  443,  521,  444,  444,  444,  444,  444,
      444,  902,  451,  444,  444,  444,  444,  444,  444,  444,
      444,  444,   61,  452,   61,  454,  450,   61,   61,  453,
      902,  444,  444,  444,  444,  444,  444,  445,  451,  902,

      446,   61,  902,   61,  458,   61,  447,  902,   61,  452,
       61,  454,  450,   61,   61,  453,   61,  462,  456,  464,
      902,  475,  496,  445,   61,   61,  446,   61,  457,   61,
      458,   61,  447,  459,  465,   61,   61,  458,  466,  460,
       61,  461,   61,  462,  456,  464,   61,  475,  496,  470,
       61,   61,  467,  469,  457,   61,  478,  471,   61,  459,
      465,   61,   61,  458,  466,  460,   61,  461,   61,   61,
      472,  473,   61,   61,  474,  470,   61,  902,  467,  469,
      486,   61,  478,  471,   61,  902,   61,   61,  902,   61,
       61,  479,   61,  480,   61,   61,  472,  473,   61,   61,

      474,  481,   61,   61,  482,   61,  486,  490,  485,   61,
      487,  483,   61,   61,   61,   61,   61,  479,   61,  480,
       61,  484,   61,  488,   61,   61,  489,  481,   61,   61,
      482,   61,  491,  490,  485,   61,  487,  483,  493,   61,
       61,  494,  492,   61,   61,   61,   61,  484,   61,  488,
       61,   61,  489,   61,   61,  495,  902,   61,  491,  902,
      902,  902,  902,  902,  493,   61,  902,  494,  492,   61,
       61,   61,  902,  902,  902,  902,   61,  902,  902,   61,
      902,  495,  500,   61,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  239,  902,  434,  434,  434,  434,  434,

      434,  434,  434,  434,  239,  902,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  372,  902,  502,  502,  502,
      502,  502,  502,  902,   61,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  502,  502,  502,  502,  502,  502,  239,
       61,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      504,  514,  505,  505,  505,  505,  505,  505,  902,  538,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  902,
      902,   61,  902,  902,  902,  902,  902,  514,  505,  505,
      505,  505,  505,  505,  179,  538,  375,  375,  375,  375,

      375,  375,  375,  375,  375,  313,  179,   61,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  443,  902,  508,
      508,  508,  508,  508,  508,  902,  902,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  902,  902,  516,  902,
      902,  902,  902,  902,  511,  508,  508,  508,  508,  508,
      508,  509,  509,  509,  509,  509,  509,  509,  509,  509,
       61,  512,  510,  510,  510,  510,  510,  510,   61,  513,
      511,  515,   61,  902,  902,   61,   61,   61,  520,  902,
       61,  902,  519,  517,  902,  902,   61,  512,  510,  510,
      510,  510,  510,  510,   61,  513,  522,  515,   61,   61,

      518,   61,   61,   61,  520,   61,   61,  523,  519,  517,
      525,  526,  524,   61,  527,  902,  528,   61,   61,  529,
       61,  533,  522,   61,  902,   61,  518,   61,   61,  902,
      531,   61,   61,  523,  530,  902,  525,  526,  524,   61,
      527,   61,  528,   61,   61,  529,   61,   61,   61,   61,
      534,  532,  536,   61,   61,   61,  531,  539,   61,  535,
      530,   61,   61,  537,   61,   61,   61,   61,  540,  544,
      541,  543,  902,   61,   61,  545,  534,  532,  536,  542,
       61,   61,  902,  539,   61,  535,   61,   61,   61,  537,
       61,   61,   61,   61,  540,   61,  541,  543,  548,  546,

      547,  545,  549,   61,  550,  542,   61,   61,  552,   61,
       61,  551,   61,   61,   61,   61,   61,  902,   61,   61,
       61,   61,   61,  554,  548,  546,  547,  553,  549,   61,
      550,  555,  580,   61,  552,   61,   61,  551,   61,   61,
       61,   61,   61,   61,   61,  902,   61,  902,   61,  554,
      902,  902,  902,  553,  574,  902,  902,  555,  580,  902,
      902,  902,   61,  902,   61,  902,   61,  902,  902,   61,
      560,  560,  560,  560,  560,  560,  560,  560,  560,  239,
      574,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      372,  239,   61,  561,  561,  561,  561,  561,  561,  561,

      561,  561,  504,  902,  562,  562,  562,  562,  562,  562,
      902,  902,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      562,  562,  562,  562,  562,  562,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  570,  573,  564,  564,  564,
      564,  564,  564,  902,   61,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  902,   61,  902,  902,  902,  902,
      902,  570,  573,  564,  564,  564,  564,  564,  564,  179,
       61,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      443,   61,  566,  566,  566,  566,  566,  566,  902,  588,

      569,  569,  569,  569,  569,  569,  569,  569,  569,  902,
      902,  902,  902,  902,  902,  902,  902,  579,  566,  566,
      566,  566,  566,  566,  179,  588,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  568,  571,  569,  569,  569,
      569,  569,  569,  572,  577,   61,  575,  576,   61,  902,
       61,   61,  902,   61,   61,   61,  902,  582,  581,  578,
      902,  902,  571,  569,  569,  569,  569,  569,  569,  572,
      577,   61,  575,  576,   61,   61,   61,   61,   61,   61,
       61,   61,  583,  582,  581,  578,  584,  585,  587,   61,
      586,   61,  589,   61,   61,  590,  591,  592,  594,  593,

       61,   61,   61,   61,   61,   61,   61,  902,  583,  595,
       61,   61,  584,  585,  587,   61,  586,   61,  589,   61,
       61,  590,  596,  592,  594,   61,   61,  597,   61,   61,
       61,   61,   61,   61,   61,  595,   61,   61,  598,  599,
      600,   61,   61,  603,  602,  601,   61,  604,  596,   61,
       61,   61,   61,  597,   61,   61,   61,   61,   61,   61,
       61,   61,   61,  606,  598,  599,  600,   61,   61,  603,
      602,  601,   61,  604,  605,   61,   61,   61,   61,   61,
       61,   61,  607,   61,   61,  902,  902,   61,   61,  606,
      902,  902,  620,   61,   61,  629,  902,  621,   61,  902,

      605,  902,  902,   61,  902,   61,  902,  902,  607,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  620,   61,
       61,  629,  631,  621,   61,  239,  902,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  504,   61,  612,  612,
      612,  612,  612,  612,  902,   61,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  902,   61,  902,  902,  902,
      902,  902,  902,   61,  612,  612,  612,  612,  612,  612,
      239,   61,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  614,   61,  615,  615,  615,  615,  615,  615,  902,
      626,  615,  615,  615,  615,  615,  615,  615,  615,  615,

      902,  902,   61,  902,  902,  902,  902,  902,  902,  615,
      615,  615,  615,  615,  615,  179,  626,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  443,  179,   61,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  568,   61,
      617,  617,  617,  617,  617,  617,  902,  902,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  902,  902,  902,
      902,  902,  902,  902,  902,   61,  617,  617,  617,  617,
      617,  617,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  625,  622,  619,  619,  619,  619,  619,  619,   61,
      623,  624,   61,   61,  902,  628,  630,   61,   61,  902,

      902,  902,  902,  627,   61,  902,  902,  625,  622,  619,
      619,  619,  619,  619,  619,   61,  623,  624,   61,   61,
       61,  628,  630,   61,   61,  632,  633,  634,  635,  627,
       61,  636,  638,  639,  641,  637,  640,  642,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,  632,  633,  634,  635,   61,   61,  636,  638,  639,
      641,  637,  640,  642,   61,   61,   61,   61,   61,   61,
       61,   61,  643,   61,   61,   61,   61,  644,  645,   61,
      661,   61,   61,  647,   61,  646,   61,   61,   61,   61,
       61,  662,  663,   61,   61,  667,   61,   61,  643,   61,

      902,   61,  902,  644,  645,   61,  661,  902,  902,  647,
       61,  646,   61,   61,   61,   61,   61,  662,  663,   61,
       61,  667,   61,   61,   61,   61,  239,   61,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  504,  239,  902,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  614,
       61,  653,  653,  653,  653,  653,  653,  902,  671,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  653,  653,  653,
      653,  653,  653,  654,  654,  654,  654,  654,  654,  654,
      654,  654,   61,  665,  655,  655,  655,  655,  655,  655,

      902,   61,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  902,   61,  902,  902,  902,  902,  902,   61,  665,
      655,  655,  655,  655,  655,  655,  179,   61,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  568,   61,  657,
      657,  657,  657,  657,  657,  902,   61,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  902,  664,  902,  902,
      902,  902,  902,  902,   61,  657,  657,  657,  657,  657,
      657,  179,   61,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  659,  664,  660,  660,  660,  660,  660,  660,
       61,  666,  668,  669,   61,  670,  672,  673,  902,  674,

      675,   61,   61,   61,   61,  902,  902,   61,   61,  902,
      660,  660,  660,  660,  660,  660,   61,  666,  668,  669,
       61,  670,  672,  673,  676,  674,  675,   61,   61,   61,
       61,  677,  678,   61,   61,  679,   61,  680,   61,  681,
      695,   61,   61,  698,   61,  694,   61,   61,   61,   61,
      676,   61,  902,   61,  902,  902,  902,  677,  678,  902,
      902,  679,   61,  680,   61,  681,  695,   61,  902,  698,
       61,  694,   61,   61,   61,   61,  902,   61,  239,   61,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  614,
       61,  686,  686,  686,  686,  686,  686,  902,   61,  686,

      686,  686,  686,  686,  686,  686,  686,  686,  902,  706,
      902,  902,  902,  902,  902,  902,   61,  686,  686,  686,
      686,  686,  686,  239,   61,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  688,  697,  689,  689,  689,  689,
      689,  689,  902,   61,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  902,  902,   61,  902,  902,  902,  902,
      902,  697,  689,  689,  689,  689,  689,  689,  179,   61,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  568,
      179,   61,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  659,  902,  691,  691,  691,  691,  691,  691,  902,

      902,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      902,  902,  902,  902,  902,  902,  902,  902,  696,  691,
      691,  691,  691,  691,  691,  692,  692,  692,  692,  692,
      692,  692,  692,  692,   61,  699,  693,  693,  693,  693,
      693,  693,  700,  703,  696,   61,  701,  902,  902,  723,
      704,   61,  702,  902,   61,  708,   61,  705,  707,   61,
       61,  699,  693,  693,  693,  693,  693,  693,  700,  703,
       61,   61,  701,   61,   61,  723,  704,   61,  702,  709,
       61,  708,   61,  705,  707,   61,  902,   61,  902,  902,
      902,  902,  902,  902,  902,  902,   61,  902,  902,   61,

       61,  902,  902,  902,  902,  709,  902,  902,  902,  902,
       61,  902,  239,   61,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  614,  239,  902,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  688,   61,  715,  715,  715,
      715,  715,  715,  902,  902,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  902,  902,  902,  902,  902,  902,
      902,   61,  902,  715,  715,  715,  715,  715,  715,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  727,   61,
      717,  717,  717,  717,  717,  717,  902,   61,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  902,   61,  902,

      902,  902,  902,  902,  727,   61,  717,  717,  717,  717,
      717,  717,  179,  902,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  659,   61,  719,  719,  719,  719,  719,
      719,  902,   61,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  902,  724,  728,  902,  902,  902,  902,  902,
       61,  719,  719,  719,  719,  719,  719,  179,   61,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  721,  724,
      722,  722,  722,  722,  722,  722,   61,  725,   61,   61,
      730,  731,  732,  733,   61,  729,  734,   61,  902,   61,
       61,   61,  735,   61,   61,   61,  722,  722,  722,  722,

      722,  722,   61,  725,   61,   61,  730,  731,  732,  733,
       61,  729,  734,   61,  736,   61,   61,   61,  735,   61,
       61,   61,  902,  902,  902,  902,  779,  780,   61,  902,
       61,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      736,  902,  902,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  779,  780,  751,  902,   61,  239,  902,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  688,   61,
      742,  742,  742,  742,  742,  742,  179,   61,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  659,   61,  902,
      902,  902,  902,  902,  902,   61,  742,  742,  742,  742,

      742,  742,  239,   61,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  744,   61,  745,  745,  745,  745,  745,
      745,  902,  758,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  902,  902,  902,  902,  902,  902,  902,  902,
      804,  745,  745,  745,  745,  745,  745,  179,   61,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  721,  750,
      747,  747,  747,  747,  747,  747,  804,  902,  902,  902,
      902,  902,  902,  902,   61,   61,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  750,  747,  747,  747,  747,
      747,  747,  748,  748,  748,  748,  748,  748,  748,  748,

      748,   61,  752,  749,  749,  749,  749,  749,  749,  753,
      755,  902,   61,  902,  902,  762,  902,  805,   61,  761,
      759,  756,   61,   61,   61,  754,  760,   61,  752,  749,
      749,  749,  749,  749,  749,  753,  755,  757,   61,   61,
       61,  762,   61,  805,   61,  761,  759,  756,   61,   61,
       61,  754,  760,   61,   61,  902,  902,  902,  902,  902,
      902,  811,  902,  757,  902,   61,   61,  239,   61,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  688,  239,
       61,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      744,   61,  769,  769,  769,  769,  769,  769,  902,  902,

      769,  769,  769,  769,  769,  769,  769,  769,  769,  902,
      902,  810,  902,  902,  902,  902,  902,   61,  769,  769,
      769,  769,  769,  769,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  782,   61,  771,  771,  771,  771,  771,
      771,  902,   61,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  902,  824,  902,  902,  902,  902,  902,  782,
       61,  771,  771,  771,  771,  771,  771,  179,   61,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  721,  824,
      773,  773,  773,  773,  773,  773,  902,  902,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  902,  778,  902,

      902,  902,  902,  902,  902,  902,  773,  773,  773,  773,
      773,  773,  179,   61,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  775,  778,  776,  776,  776,  776,  776,
      776,  777,  781,  783,   61,  789,  902,  831,   61,   61,
      784,  785,  786,   61,  787,  788,  902,  902,   61,  902,
      902,  776,  776,  776,  776,  776,  776,  777,  781,  783,
       61,  789,   61,   61,   61,  825,   61,  802,  803,   61,
       61,  788,   61,  902,   61,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  829,  902,  902,  902,   61,   61,
      828,  825,   61,  802,  803,  902,   61,  239,   61,  795,

      795,  795,  795,  795,  795,  795,  795,  795,  744,   61,
      796,  796,  796,  796,  796,  796,  902,   61,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  830,  902,  902,
      902,  902,  902,  902,  902,   61,  796,  796,  796,  796,
      796,  796,  239,   61,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  806,   61,  798,  798,  798,  798,  798,
      798,  179,   61,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  721,   61,  902,  902,  902,  902,  902,  806,
       61,  798,  798,  798,  798,  798,  798,  179,   61,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  775,   61,

      800,  800,  800,  800,  800,  800,  902,  807,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  808,  812,  813,
      809,  823,  902,   61,  902,  902,  800,  800,  800,  800,
      800,  800,  902,  807,   61,   61,  841,  826,   61,   61,
      832,  902,   61,   61,  812,  813,   61,  823,  239,   61,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  744,
       61,   61,  841,  826,   61,   61,  832,  827,   61,   61,
      902,  902,   61,  239,  902,  818,  818,  818,  818,  818,
      818,  818,  818,  818,   61,   61,  819,  819,  819,  819,
      819,  819,  902,  827,  819,  819,  819,  819,  819,  819,

      819,  819,  819,  902,   61,  902,  902,  902,  902,  902,
       61,   61,  819,  819,  819,  819,  819,  819,  179,  902,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  775,
       61,  821,  821,  821,  821,  821,  821,  902,   61,  821,
      821,  821,  821,  821,  821,  821,  821,  821,   61,   61,
      902,  902,  902,  902,  902,  902,  902,  821,  821,  821,
      821,  821,  821,  239,   61,  837,  837,  837,  837,  837,
      837,  837,  837,  837,   61,   61,  838,  838,  838,  838,
      838,  838,  902,  861,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  902,  840,  843,  862,   61,  870,  902,

      902,   61,  838,  838,  838,  838,  838,  838,  179,  861,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  775,
      840,  843,  862,   61,  870,  842,  842,   61,  842,  842,
      842,  842,  842,  842,  902,  239,  842,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  842,  842,  850,  851,
      849,  849,  871,  849,  849,  849,  849,  849,  849,  853,
      854,  849,  859,  860,  863,  864,  866,  865,  872,  875,
       61,  849,  849,   61,  850,  851,   61,  873,  871,  902,
       61,   61,  880,  881,   61,  853,  854,   61,  859,  860,
      863,  864,  866,  865,  872,  875,   61,   61,  874,   61,

      882,   61,   61,  873,  887,   61,   61,   61,  880,  881,
       61,   61,  883,   61,  888,   61,  902,  902,  902,  902,
      902,  902,  902,   61,  874,  902,  882,   61,  902,  902,
      887,   61,   61,  902,   61,  902,  902,   61,  883,  902,
      888,   61,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,   61,  902,
       61,   41,   41,   41,   41,   43,   43,   43,   43,   47,
       47,   47,   47,   49,  902,   49,   49,   50,   50,   50,
       50,  113,  902,  113,  113,  117,  117,  174,  174,  175,
      175,  236,  236,  237,  237,  238,  238,  301,  301,  302,

      302,  365,  365,  366,  366,  367,  367,  390,  902,  390,
      390,  429,  429,  430,  430,  431,  431,  498,  498,  499,
      499,  556,  556,  557,  557,  558,  558,  608,  608,  609,
      609,  610,  610,  498,  498,  649,  649,  650,  650,  682,
      682,  683,  683,  684,  684,  710,  710,  711,  711,  712,
      712,  609,  609,  738,  738,  739,  739,  763,  763,  764,
      764,  765,  765,  790,  790,  791,  791,  793,  793,  683,
      683,  815,  815,  816,  816,  833,  833,  834,  834,  835,
      835,  842,  902,  842,  842,  844,  902,  844,  844,  845,
      845,  846,  846,  849,  902,  849,  849,  852,  902,  852,

      852,  738,  738,  856,  856,  857,  857,  867,  867,  868,
      868,  876,  876,  877,  877,  878,  878,  791,  791,  885,
      885,  889,  889,  890,  890,  891,  891,  894,  894,  897,
      897,  898,  898,  900,  900,  901,  901,    7,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,

      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902
    } ;

static yyconst flex_int16_t yy_chk[5514] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   10,   10,   11,   11,   15,
       17,   27,  991,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   24,   16,   16,   16,   16,   16,

       16,   28,   16,   37,   61,   24,   17,   27,   24,   28,
       37,   63,   30,   44,   44,   64,   28,   24,   16,  987,
       24,   16,   16,   16,   16,   16,   16,   28,   16,   37,
       61,   24,   30,  985,   24,   28,   37,   63,   30,   45,
       45,   64,   28,   24,   16,   20,   20,  981,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   30,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   21,   21,   32,  975,   32,   46,   46,   32,  967,
       21,  966,   21,   35,   35,   65,   68,   68,   29,   21,
      961,   25,  957,  956,   29,   35,   35,   21,   21,   32,
       29,   32,   25,  952,   32,   25,   21,   25,   21,   35,
       35,   65,   68,   68,   29,   21,   22,   25,   22,   22,
       29,   35,   35,  948,   69,   72,   29,   22,   25,   22,
       22,   25,  910,   25,   39,   33,   22,  901,  900,   76,
       39,  898,   22,  897,   22,   22,   33,  896,  895,   33,
       69,   72,   33,   22,   31,   22,   22,  894,   31,   66,

       39,   33,   22,   23,   31,   67,   39,   23,   66,   31,
       31,   23,   33,   76,   23,   33,   23,   23,   33,   79,
       31,   23,   67,   23,   31,   66,  893,  891,  890,   23,
       31,   67,  886,   23,   66,   31,   31,   23,  885,   76,
       23,   89,   23,   23,   40,   79,  884,   23,   67,   23,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       40,   26,   26,   26,   26,   26,   26,   89,   26,  878,
       40,   73,   26,   34,  877,   26,   71,   34,  876,  869,
       38,   26,  868,   71,   38,   73,   40,   26,   26,   26,
       26,   26,   26,   34,   26,   36,   36,   73,   26,   34,

       38,   26,   71,   34,   70,   36,   38,   26,   77,   71,
       38,   73,   70,   36,   74,   75,   74,   86,   86,   34,
       77,   84,   36,   75,   70,   36,   38,  867,  857,  856,
       70,   36,  855,  847,   77,  846,   84,  845,   70,   36,
       74,   75,   74,   86,   86,  835,   77,   84,   36,   75,
       70,   36,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   84,   54,   54,   54,   54,   54,   54,   92,
       54,   56,   56,   56,   56,   56,   56,   56,   56,   56,
      102,  834,  833,  821,  817,  816,  815,  814,  103,   54,
       54,   54,   54,   54,   54,   92,   54,   59,   59,   59,

       59,   59,   59,   59,   59,   59,  102,   80,   59,   59,
       59,   59,   59,   59,  103,  116,  116,  116,  116,  116,
      116,  116,  116,  116,   80,  796,  793,  791,  790,  773,
      767,  766,  765,   80,   59,   59,   59,   59,   59,   59,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       80,   62,   62,   62,   62,   62,   62,   78,   62,   81,
       93,  764,   78,  763,  742,  739,   82,   88,  738,   88,
       83,   62,  737,   85,  719,   81,  713,   62,   62,   62,
       62,   62,   62,   78,   62,   81,   82,   85,   78,   83,
       83,   87,   82,   88,   93,   88,   83,   62,   94,   85,

       90,   81,   95,   87,   94,   90,   91,   91,   97,   96,
       97,   97,   82,   85,   96,   83,   83,   87,   95,   97,
       93,   98,   99,  101,   94,  104,   90,   99,   95,   87,
       94,   90,   91,   91,   97,   96,   97,   97,  100,  106,
       96,   98,  101,  105,   95,   97,  712,   98,   99,  101,
      107,  105,  108,   99,  110,  100,  109,  110,  100,  104,
      123,  108,  107,  109,  100,  106,  124,   98,  101,  105,
      111,  126,  111,  711,  710,  698,  107,  105,  108,  686,
      110,  100,  109,  110,  100,  104,  123,  108,  107,  109,
      684,  683,  124,  682,  657,  651,  111,  126,  111,  114,

      114,  114,  114,  114,  114,  114,  114,  114,  114,  128,
      114,  114,  114,  114,  114,  114,  121,  114,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  131,  131,  650,
      649,  648,  612,  610,  609,  128,  114,  114,  114,  114,
      114,  114,  135,  114,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  131,  131,  118,  118,  118,  118,  118,
      118,  608,  135,  566,  559,  134,  558,  557,  135,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  556,  502,
      171,  118,  118,  118,  118,  118,  118,  120,  135,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  134,

      120,  120,  120,  120,  120,  120,  171,  178,  499,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  498,  497,
      441,  432,  431,  430,  429,  134,  120,  120,  120,  120,
      120,  120,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  130,  122,  122,  122,  122,  122,  122,  125,
      127,  129,  132,  129,  370,  125,  132,  136,  130,  367,
      139,  366,  139,  127,  133,  365,  136,  146,  130,  122,
      122,  122,  122,  122,  122,  125,  127,  129,  132,  129,
      133,  125,  132,  136,  130,  137,  139,  138,  139,  127,
      133,  140,  136,  141,  142,  141,  143,  311,  140,  144,

      145,  146,  137,  138,  148,  147,  133,  303,  149,  149,
      302,  137,  142,  138,  143,  144,  145,  140,  148,  141,
      142,  141,  143,  147,  140,  144,  145,  146,  137,  138,
      148,  147,  150,  151,  157,  155,  154,  152,  142,  153,
      143,  144,  145,  149,  148,  151,  152,  155,  153,  147,
      152,  154,  156,  159,  157,  152,  159,  160,  158,  151,
      157,  155,  154,  152,  158,  153,  150,  301,  156,  149,
      164,  151,  152,  155,  153,  162,  152,  154,  156,  159,
      157,  152,  159,  165,  158,  161,  161,  162,  164,  166,
      158,  160,  150,  163,  156,  163,  164,  170,  167,  165,

      184,  162,  186,  169,  186,  166,  168,  170,  189,  165,
      189,  161,  161,  162,  164,  166,  167,  160,  168,  163,
      169,  163,  300,  170,  167,  165,  184,  248,  186,  169,
      186,  166,  168,  170,  189,  238,  189,  237,  236,  235,
      209,  176,  167,  175,  168,  174,  169,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  190,  172,  172,
      172,  172,  172,  172,  190,  172,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  117,  115,   55,  187,   51,
       50,   47,   42,  190,  172,  172,  172,  172,  172,  172,
      190,  172,  177,   19,  177,  177,  177,  177,  177,  177,

      177,  177,  177,  177,  192,  177,  177,  177,  177,  177,
      177,  182,  187,  182,  182,  182,  182,  182,  182,  182,
      182,  182,   18,  197,   14,   12,    7,    4,    3,    0,
      192,  177,  177,  177,  177,  177,  177,  180,  187,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  197,
      180,  180,  180,  180,  180,  180,    0,  185,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,    0,    0,
        0,    0,    0,  200,  216,  185,  180,  180,  180,  180,
      180,  180,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  185,  188,  181,  181,  181,  181,  181,  181,  200,

      216,  185,    0,    0,    0,    0,    0,    0,  188,    0,
        0,    0,    0,    0,    0,    0,    0,  185,  188,  181,
      181,  181,  181,  181,  181,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  188,  191,  183,  183,  183,  183,
      183,  183,  193,  194,  193,  194,  195,  196,  198,    0,
        0,  198,  201,  229,  201,  191,  203,  203,  195,  196,
      199,  191,  183,  183,  183,  183,  183,  183,  193,  194,
      193,  194,  195,  196,  198,  202,  199,  198,  201,  229,
      201,  191,  203,  203,  195,  196,  199,  204,  205,  205,
      204,  202,  210,  207,  206,  208,  211,    0,  211,    0,

        0,  202,  199,  206,  206,  206,  207,  210,  208,  210,
        0,    0,  206,  204,  205,  205,  204,  202,  210,  207,
      206,  208,  211,  214,  211,  217,  218,  219,  213,  206,
      206,  206,  207,  210,  208,  210,  212,  213,  206,  214,
      215,  217,  212,  218,  220,  219,  215,    0,  220,  214,
        0,  217,  218,  219,  213,  221,  221,  222,  228,    0,
      223,    0,  212,  213,  224,  214,  215,  217,  212,  218,
      220,  219,  215,  222,  220,  223,  230,  223,  225,    0,
      224,  221,  221,  222,  227,  225,  223,  226,  226,  232,
      224,  231,  228,  227,  233,  232,  230,  249,  249,  222,

      250,  223,  230,  223,  225,  250,  224,  252,  231,    0,
      227,  225,    0,  226,  226,  232,    0,  231,  228,  227,
      263,  232,  230,  249,  249,  251,  250,  251,  233,    0,
      286,  250,    0,  252,  231,  239,  239,  239,  239,  239,
      239,  239,  239,  239,    0,    0,  263,    0,    0,    0,
        0,  251,    0,  251,  233,  240,  286,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  288,  240,  240,
      240,  240,  240,  240,  242,  254,  242,  242,  242,  242,
      242,  242,  242,  242,  242,    0,    0,    0,    0,    0,
        0,    0,    0,  288,  240,  240,  240,  240,  240,  240,

      241,  241,  241,  241,  241,  241,  241,  241,  241,  254,
      322,  241,  241,  241,  241,  241,  241,  243,  322,  243,
      243,  243,  243,  243,  243,  243,  243,  243,    0,  255,
        0,    0,    0,    0,    0,  254,  322,  241,  241,  241,
      241,  241,  241,  244,  322,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  274,  244,  244,  244,  244,
      244,  244,  245,  255,  245,  245,  245,  245,  245,  245,
      245,  245,  245,    0,  274,    0,    0,    0,    0,    0,
        0,  274,  244,  244,  244,  244,  244,  244,  246,  255,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,

      274,  246,  246,  246,  246,  246,  246,  247,  257,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  256,  256,
      257,  258,  258,  253,  253,  253,  259,  246,  246,  246,
      246,  246,  246,  253,  257,    0,  260,  261,  261,  264,
      265,  262,  259,  260,  256,  256,  257,  258,  258,  253,
      253,  253,  259,  262,  266,  267,  273,  327,  272,  253,
      268,  270,  260,  261,  261,  269,  266,  262,  259,  260,
      267,  269,  268,  264,  265,    0,  271,  270,  272,  262,
      266,  267,  271,  327,  272,  277,  268,  270,    0,  276,
      273,  269,  266,  280,  275,  276,  267,  269,  268,  264,

      265,  277,  271,  270,  272,  279,  278,  281,  271,  275,
      284,  277,  279,  280,  281,  276,  273,  282,    0,  280,
      275,  276,  278,  282,    0,  283,  287,  277,  283,  285,
      285,  279,  278,  281,  290,  275,  291,  294,  279,  280,
      281,  289,  287,  282,  284,  291,  297,  289,  278,  282,
      290,  283,  287,    0,  283,  285,  285,  294,  292,  316,
      290,  293,  291,  294,  293,  299,  341,  289,  287,  295,
      284,  291,  292,  289,  295,  296,  290,  296,  298,  316,
      297,  298,  299,  294,  292,  316,    0,  293,    0,    0,
      293,  299,  341,    0,    0,  295,    0,    0,  292,    0,

      295,  296,    0,  296,  298,  316,  297,  298,  299,  304,
        0,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      305,    0,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,    0,  305,  305,  305,  305,  305,  305,  306,
      342,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  305,
      305,  305,  305,  305,  305,  307,  342,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  346,  307,  307,
      307,  307,  307,  307,  308,  319,  308,  308,  308,  308,
      308,  308,  308,  308,  308,    0,    0,  319,    0,    0,

      315,    0,    0,  346,  307,  307,  307,  307,  307,  307,
      310,  319,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  312,  319,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  315,  312,  312,  312,  312,  312,
      312,  314,    0,  314,  314,  314,  314,  314,  314,  314,
      314,  314,    0,    0,  325,    0,    0,    0,    0,    0,
      315,  312,  312,  312,  312,  312,  312,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  318,  320,  313,  313,
      313,  313,  313,  313,  317,  321,  317,  321,  325,  324,
      332,  332,  318,  320,    0,    0,  324,    0,    0,    0,

        0,    0,  318,  320,  313,  313,  313,  313,  313,  313,
      317,  321,  317,  321,  325,  324,  332,  332,  318,  320,
      323,  323,  324,  323,  323,  323,  323,  323,  323,  323,
      326,  323,  328,  326,  333,  329,  330,  331,  334,    0,
      335,  323,  323,  329,  330,  331,  334,  338,  328,  335,
      336,  336,    0,    0,  333,  338,  326,    0,  328,  326,
      333,  329,  330,  331,  334,  337,  335,  339,  352,  329,
      330,  331,  334,  338,  328,  335,  336,  336,  340,  339,
      333,  338,  337,  349,  340,  344,  343,  345,  344,  348,
      345,  337,  349,  339,  343,  347,  353,  347,    0,  354,

        0,  350,  352,  348,  340,  339,  351,  354,  337,  349,
      340,  344,  343,  345,  344,  348,  345,  350,  349,  355,
      343,  347,  355,  347,  351,  354,  356,  350,  352,  348,
      353,  357,  351,  354,  358,  359,  388,  359,  360,  361,
      361,  364,  356,  350,  360,  355,  358,  363,  355,  362,
      351,  381,  356,  364,  381,    0,  353,  357,  362,    0,
      358,  359,  388,  359,  360,  361,  361,  364,  356,  391,
      360,    0,  358,    0,    0,  362,    0,  381,    0,  364,
      381,  363,    0,  407,  362,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  369,  391,  369,  369,  369,  369,

      369,  369,  369,  369,  369,  369,    0,  363,  371,  407,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      408,  371,  371,  371,  371,  371,  371,  373,  382,  373,
      373,  373,  373,  373,  373,  373,  373,  373,    0,    0,
        0,    0,    0,    0,    0,  399,  408,  371,  371,  371,
      371,  371,  371,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  382,  399,  372,  372,  372,  372,  372,  372,
      374,  399,  374,  374,  374,  374,  374,  374,  374,  374,
      374,    0,  414,    0,    0,  394,    0,    0,  382,  399,
      372,  372,  372,  372,  372,  372,  375,    0,  375,  375,

      375,  375,  375,  375,  375,  375,  375,  376,  414,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  394,
      376,  376,  376,  376,  376,  376,  377,  425,  377,  377,
      377,  377,  377,  377,  377,  377,  377,    0,  455,    0,
        0,    0,    0,    0,    0,  394,  376,  376,  376,  376,
      376,  376,  378,  425,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  455,  378,  378,  378,  378,  378,
      378,  379,  384,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  383,  385,  385,  387,  383,  384,  469,  386,
        0,  378,  378,  378,  378,  378,  378,  380,  384,    0,

      380,  386,    0,  390,  390,  387,  380,    0,  383,  385,
      385,  387,  383,  384,  469,  386,  393,  393,  389,  395,
        0,  406,  428,  380,  406,  428,  380,  386,  389,  390,
      390,  387,  380,  392,  396,  395,  389,  389,  397,  392,
      396,  392,  393,  393,  389,  395,  392,  406,  428,  401,
      406,  428,  398,  400,  389,  401,  409,  402,  397,  392,
      396,  395,  389,  389,  397,  392,  396,  392,  398,  400,
      403,  404,  392,  402,  405,  401,  409,    0,  398,  400,
      417,  401,  409,  402,  397,    0,  403,  404,    0,  405,
      410,  410,  411,  411,  398,  400,  403,  404,  417,  402,

      405,  412,  409,  412,  413,  413,  417,  421,  416,  421,
      418,  415,  403,  404,  416,  405,  410,  410,  411,  411,
      472,  415,  418,  419,  417,  420,  420,  412,  415,  412,
      413,  413,  422,  421,  416,  421,  418,  415,  424,  422,
      416,  426,  423,  419,  423,  424,  472,  415,  418,  419,
      473,  420,  420,  426,  415,  427,    0,  427,  422,    0,
        0,    0,    0,    0,  424,  422,    0,  426,  423,  419,
      423,  424,    0,    0,    0,    0,  473,    0,    0,  426,
        0,  427,  433,  427,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  434,    0,  434,  434,  434,  434,  434,

      434,  434,  434,  434,  435,    0,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,    0,  435,  435,  435,
      435,  435,  435,  436,  474,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  435,  435,  435,  435,  435,  435,  437,
      474,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  448,  437,  437,  437,  437,  437,  437,  438,  476,
      438,  438,  438,  438,  438,  438,  438,  438,  438,    0,
        0,  448,    0,    0,    0,    0,    0,  448,  437,  437,
      437,  437,  437,  437,  440,  476,  440,  440,  440,  440,

      440,  440,  440,  440,  440,  440,  442,  448,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,    0,  442,
      442,  442,  442,  442,  442,  444,    0,  444,  444,  444,
      444,  444,  444,  444,  444,  444,    0,    0,  450,    0,
        0,    0,    0,    0,  445,  442,  442,  442,  442,  442,
      442,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      445,  446,  443,  443,  443,  443,  443,  443,  446,  447,
      445,  449,  450,    0,    0,  454,  447,  453,  454,    0,
      449,    0,  453,  451,    0,    0,  445,  446,  443,  443,
      443,  443,  443,  443,  446,  447,  456,  449,  450,  451,

      452,  454,  447,  453,  454,  456,  449,  457,  453,  451,
      459,  460,  458,  452,  461,    0,  462,  460,  459,  463,
      463,  467,  456,  461,    0,  451,  452,  457,  458,    0,
      465,  456,  462,  457,  464,    0,  459,  460,  458,  452,
      461,  464,  462,  460,  459,  463,  463,  465,  466,  461,
      468,  466,  471,  457,  458,  467,  465,  477,  462,  470,
      464,  471,  470,  475,  481,  475,  468,  464,  478,  483,
      479,  482,    0,  465,  466,  484,  468,  466,  471,  480,
      478,  467,    0,  477,  482,  470,  479,  471,  470,  475,
      481,  475,  468,  484,  478,  480,  479,  482,  487,  485,

      486,  484,  488,  483,  489,  480,  478,  485,  491,  486,
      482,  490,  479,  490,  488,  487,  492,    0,  496,  484,
      489,  480,  491,  494,  487,  485,  486,  493,  488,  483,
      489,  495,  521,  485,  491,  486,  495,  490,  494,  490,
      488,  487,  492,  493,  496,    0,  489,    0,  491,  494,
        0,    0,    0,  493,  515,    0,    0,  495,  521,    0,
        0,    0,  495,    0,  494,    0,  515,    0,    0,  493,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  501,
      515,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  503,  515,  503,  503,  503,  503,  503,  503,  503,

      503,  503,  503,    0,  503,  503,  503,  503,  503,  503,
      505,    0,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      503,  503,  503,  503,  503,  503,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  511,  514,  504,  504,  504,
      504,  504,  504,  508,  514,  508,  508,  508,  508,  508,
      508,  508,  508,  508,    0,  511,    0,    0,    0,    0,
        0,  511,  514,  504,  504,  504,  504,  504,  504,  507,
      514,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  511,  507,  507,  507,  507,  507,  507,  510,  529,

      510,  510,  510,  510,  510,  510,  510,  510,  510,    0,
        0,    0,    0,    0,    0,    0,    0,  520,  507,  507,
      507,  507,  507,  507,  509,  529,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  512,  509,  509,  509,
      509,  509,  509,  513,  518,  512,  516,  517,  517,    0,
      518,  520,    0,  513,  523,  516,    0,  523,  522,  519,
        0,    0,  512,  509,  509,  509,  509,  509,  509,  513,
      518,  512,  516,  517,  517,  519,  518,  520,  522,  513,
      523,  516,  524,  523,  522,  519,  525,  526,  528,  524,
      527,  528,  530,  530,  526,  531,  532,  533,  535,  534,

      535,  519,  536,  537,  522,  533,  525,    0,  524,  538,
      527,  531,  525,  526,  528,  524,  527,  528,  530,  530,
      526,  531,  539,  533,  535,  543,  535,  540,  536,  537,
      532,  533,  525,  534,  540,  538,  527,  531,  541,  542,
      544,  541,  542,  547,  546,  545,  548,  549,  539,  544,
      551,  543,  546,  540,  549,  547,  532,  552,  553,  534,
      540,  545,  578,  554,  541,  542,  544,  541,  542,  547,
      546,  545,  548,  549,  550,  544,  551,  550,  546,  554,
      549,  547,  555,  552,  553,    0,    0,  545,  578,  554,
        0,    0,  570,  571,  570,  580,    0,  571,  555,    0,

      550,    0,    0,  550,    0,  554,    0,    0,  555,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  570,  571,
      570,  580,  582,  571,  555,  561,    0,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  587,  561,  561,
      561,  561,  561,  561,  562,  590,  562,  562,  562,  562,
      562,  562,  562,  562,  562,    0,  582,    0,    0,    0,
        0,    0,    0,  587,  561,  561,  561,  561,  561,  561,
      563,  590,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  582,  563,  563,  563,  563,  563,  563,  564,
      576,  564,  564,  564,  564,  564,  564,  564,  564,  564,

        0,    0,  576,    0,    0,    0,    0,    0,    0,  563,
      563,  563,  563,  563,  563,  565,  576,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  567,  576,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  594,
      567,  567,  567,  567,  567,  567,  569,    0,  569,  569,
      569,  569,  569,  569,  569,  569,  569,    0,    0,    0,
        0,    0,    0,    0,    0,  594,  567,  567,  567,  567,
      567,  567,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  575,  572,  568,  568,  568,  568,  568,  568,  572,
      573,  574,  573,  574,    0,  579,  581,  575,  581,    0,

        0,    0,    0,  577,  579,    0,    0,  575,  572,  568,
      568,  568,  568,  568,  568,  572,  573,  574,  573,  574,
      577,  579,  581,  575,  581,  583,  584,  585,  586,  577,
      579,  588,  591,  592,  595,  589,  593,  596,  588,  592,
      586,  591,  583,  585,  584,  597,  577,  598,  593,  599,
      601,  583,  584,  585,  586,  589,  604,  588,  591,  592,
      595,  589,  593,  596,  588,  592,  586,  591,  583,  585,
      584,  597,  600,  598,  593,  599,  601,  602,  603,  605,
      620,  589,  604,  607,  600,  606,  606,  621,  623,  602,
      627,  622,  624,  624,  603,  629,  620,  622,  600,  634,

        0,  607,    0,  602,  603,  605,  620,    0,    0,  607,
      600,  606,  606,  621,  623,  602,  627,  622,  624,  624,
      603,  629,  620,  622,  647,  634,  611,  607,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  613,    0,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      647,  613,  613,  613,  613,  613,  613,  615,  633,  615,
      615,  615,  615,  615,  615,  615,  615,  615,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  613,  613,  613,
      613,  613,  613,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  633,  626,  614,  614,  614,  614,  614,  614,

      617,  626,  617,  617,  617,  617,  617,  617,  617,  617,
      617,    0,  663,    0,    0,    0,    0,    0,  633,  626,
      614,  614,  614,  614,  614,  614,  616,  626,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  663,  616,
      616,  616,  616,  616,  616,  619,  664,  619,  619,  619,
      619,  619,  619,  619,  619,  619,    0,  625,    0,    0,
        0,    0,    0,    0,  625,  616,  616,  616,  616,  616,
      616,  618,  664,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  625,  618,  618,  618,  618,  618,  618,
      625,  628,  630,  631,  630,  632,  635,  636,    0,  637,

      638,  632,  631,  635,  636,    0,    0,  628,  637,    0,
      618,  618,  618,  618,  618,  618,  638,  628,  630,  631,
      630,  632,  635,  636,  639,  637,  638,  632,  631,  635,
      636,  640,  643,  628,  637,  644,  644,  645,  662,  646,
      662,  639,  638,  667,  645,  661,  668,  643,  640,  661,
      639,  646,    0,  672,    0,    0,    0,  640,  643,    0,
        0,  644,  644,  645,  662,  646,  662,  639,    0,  667,
      645,  661,  668,  643,  640,  661,    0,  646,  652,  672,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      674,  652,  652,  652,  652,  652,  652,  653,  679,  653,

      653,  653,  653,  653,  653,  653,  653,  653,    0,  677,
        0,    0,    0,    0,    0,    0,  674,  652,  652,  652,
      652,  652,  652,  654,  679,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  666,  654,  654,  654,  654,
      654,  654,  655,  677,  655,  655,  655,  655,  655,  655,
      655,  655,  655,    0,    0,  666,    0,    0,    0,    0,
        0,  666,  654,  654,  654,  654,  654,  654,  656,  677,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      658,  666,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,    0,  658,  658,  658,  658,  658,  658,  660,

        0,  660,  660,  660,  660,  660,  660,  660,  660,  660,
        0,    0,    0,    0,    0,    0,    0,    0,  665,  658,
      658,  658,  658,  658,  658,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  665,  669,  659,  659,  659,  659,
      659,  659,  670,  673,  665,  670,  671,    0,    0,  694,
      675,  669,  671,    0,  671,  680,  680,  676,  678,  673,
      665,  669,  659,  659,  659,  659,  659,  659,  670,  673,
      675,  670,  671,  676,  678,  694,  675,  669,  671,  681,
      671,  680,  680,  676,  678,  673,    0,  681,    0,    0,
        0,    0,    0,    0,    0,    0,  675,    0,    0,  676,

      678,    0,    0,    0,    0,  681,    0,    0,    0,    0,
      696,    0,  685,  681,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  687,    0,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  696,  687,  687,  687,
      687,  687,  687,  689,    0,  689,  689,  689,  689,  689,
      689,  689,  689,  689,    0,    0,    0,    0,    0,    0,
        0,  705,    0,  687,  687,  687,  687,  687,  687,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  699,  731,
      688,  688,  688,  688,  688,  688,  691,  705,  691,  691,
      691,  691,  691,  691,  691,  691,  691,    0,  699,    0,

        0,    0,    0,    0,  699,  731,  688,  688,  688,  688,
      688,  688,  690,    0,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  699,  690,  690,  690,  690,  690,
      690,  693,  735,  693,  693,  693,  693,  693,  693,  693,
      693,  693,    0,  695,  700,    0,    0,    0,    0,    0,
      695,  690,  690,  690,  690,  690,  690,  692,  735,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  695,
      692,  692,  692,  692,  692,  692,  695,  697,  700,  697,
      702,  703,  704,  706,  704,  701,  707,  707,    0,  706,
      703,  736,  708,  702,  708,  752,  692,  692,  692,  692,

      692,  692,  701,  697,  700,  697,  702,  703,  704,  706,
      704,  701,  707,  707,  709,  706,  703,  736,  708,  702,
      708,  752,    0,    0,    0,    0,  753,  754,  701,  715,
      709,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      709,  717,    0,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  753,  754,  724,    0,  709,  714,    0,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  758,
      714,  714,  714,  714,  714,  714,  718,  760,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  724,    0,
        0,    0,    0,    0,    0,  758,  714,  714,  714,  714,

      714,  714,  716,  760,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  724,  716,  716,  716,  716,  716,
      716,  722,  729,  722,  722,  722,  722,  722,  722,  722,
      722,  722,    0,    0,    0,    0,    0,    0,    0,    0,
      779,  716,  716,  716,  716,  716,  716,  720,  729,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  720,  723,
      720,  720,  720,  720,  720,  720,  779,    0,    0,    0,
        0,    0,    0,    0,  729,  723,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  723,  720,  720,  720,  720,
      720,  720,  721,  721,  721,  721,  721,  721,  721,  721,

      721,  723,  725,  721,  721,  721,  721,  721,  721,  726,
      727,    0,  727,    0,    0,  734,    0,  780,  725,  733,
      730,  728,  733,  781,  784,  726,  732,  734,  725,  721,
      721,  721,  721,  721,  721,  726,  727,  728,  727,  728,
      730,  734,  732,  780,  725,  733,  730,  728,  733,  781,
      784,  726,  732,  734,  802,    0,    0,    0,    0,    0,
        0,  787,    0,  728,    0,  728,  730,  741,  732,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  743,
      802,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  787,  743,  743,  743,  743,  743,  743,  745,    0,

      745,  745,  745,  745,  745,  745,  745,  745,  745,    0,
        0,  786,    0,    0,    0,    0,    0,  787,  743,  743,
      743,  743,  743,  743,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  756,  786,  744,  744,  744,  744,  744,
      744,  747,  756,  747,  747,  747,  747,  747,  747,  747,
      747,  747,    0,  804,    0,    0,    0,    0,    0,  756,
      786,  744,  744,  744,  744,  744,  744,  746,  756,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  804,
      746,  746,  746,  746,  746,  746,  749,    0,  749,  749,
      749,  749,  749,  749,  749,  749,  749,    0,  751,    0,

        0,    0,    0,    0,    0,    0,  746,  746,  746,  746,
      746,  746,  748,  751,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  751,  748,  748,  748,  748,  748,
      748,  750,  755,  757,  750,  762,    0,  811,  757,  751,
      759,  759,  759,  762,  759,  761,    0,    0,  755,    0,
        0,  748,  748,  748,  748,  748,  748,  750,  755,  757,
      750,  762,  761,  777,  757,  805,  811,  777,  778,  762,
      759,  761,  778,  769,  755,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  809,    0,    0,    0,  761,  777,
      808,  805,  811,  777,  778,    0,  759,  768,  778,  768,

      768,  768,  768,  768,  768,  768,  768,  768,  768,  809,
      768,  768,  768,  768,  768,  768,  771,  808,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  810,    0,    0,
        0,    0,    0,    0,    0,  809,  768,  768,  768,  768,
      768,  768,  770,  808,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  782,  810,  770,  770,  770,  770,  770,
      770,  772,  813,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  782,    0,    0,    0,    0,    0,  782,
      810,  770,  770,  770,  770,  770,  770,  774,  813,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  782,

      774,  774,  774,  774,  774,  774,  776,  783,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  785,  788,  789,
      785,  803,    0,  783,    0,    0,  774,  774,  774,  774,
      774,  774,    0,  783,  788,  789,  824,  806,  803,  806,
      812,    0,  828,  812,  788,  789,  785,  803,  795,  783,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      788,  789,  824,  806,  803,  806,  812,  807,  828,  812,
        0,    0,  785,  797,    0,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  829,  807,  797,  797,  797,  797,
      797,  797,  798,  807,  798,  798,  798,  798,  798,  798,

      798,  798,  798,    0,  830,    0,    0,    0,    0,    0,
      829,  807,  797,  797,  797,  797,  797,  797,  799,    0,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      830,  799,  799,  799,  799,  799,  799,  800,  831,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  832,  840,
        0,    0,    0,    0,    0,    0,    0,  799,  799,  799,
      799,  799,  799,  818,  831,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  832,  840,  818,  818,  818,  818,
      818,  818,  819,  850,  819,  819,  819,  819,  819,  819,
      819,  819,  819,    0,  823,  826,  851,  826,  859,    0,

        0,  823,  818,  818,  818,  818,  818,  818,  820,  850,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      823,  826,  851,  826,  859,  827,  827,  823,  827,  827,
      827,  827,  827,  827,    0,  837,  827,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  827,  827,  842,  842,
      843,  843,  860,  843,  843,  843,  843,  843,  843,  844,
      844,  843,  849,  849,  852,  852,  854,  853,  861,  865,
      865,  843,  843,  854,  842,  842,  844,  863,  860,    0,
      866,  852,  870,  872,  874,  844,  844,  853,  849,  849,
      852,  852,  854,  853,  861,  865,  865,  863,  864,  854,

      873,  873,  844,  863,  880,  864,  866,  852,  870,  872,
      874,  883,  875,  853,  882,  888,    0,    0,    0,    0,
        0,    0,    0,  863,  864,    0,  873,  873,    0,    0,
      880,  864,  875,    0,  882,    0,    0,  883,  875,    0,
      882,  888,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  875,    0,
      882,  903,  903,  903,  903,  904,  904,  904,  904,  905,
      905,  905,  905,  906,    0,  906,  906,  907,  907,  907,
      907,  908,    0,  908,  908,  909,  909,  911,  911,  912,
      912,  913,  913,  914,  914,  915,  915,  916,  916,  917,

      917,  918,  918,  919,  919,  920,  920,  921,    0,  921,
      921,  922,  922,  923,  923,  924,  924,  925,  925,  926,
      926,  927,  927,  928,  928,  929,  929,  930,  930,  931,
      931,  932,  932,  933,  933,  934,  934,  935,  935,  936,
      936,  937,  937,  938,  938,  939,  939,  940,  940,  941,
      941,  942,  942,  943,  943,  944,  944,  945,  945,  946,
      946,  947,  947,  949,  949,  950,  950,  951,  951,  953,
      953,  954,  954,  955,  955,  958,  958,  959,  959,  960,
      960,  962,    0,  962,  962,  963,    0,  963,  963,  964,
      964,  965,  965,  968,    0,  968,  968,  969,    0,  969,

      969,  970,  970,  971,  971,  972,  972,  973,  973,  974,
      974,  976,  976,  977,  977,  978,  978,  979,  979,  980,
      980,  982,  982,  983,  983,  984,  984,  986,  986,  988,
      988,  989,  989,  990,  990,  992,  992,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,

      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[109] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 1998 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 2108 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 903 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5438 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 59 "SrvLexer.l"
{ return SrvParser::LOGCOLORS_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 61 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 64 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 69 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::ACCEPT_UNKNOWN_FQDN_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::REMOTE_AUTOCONF_NEIGHBORS_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ return SrvParser::DS_LITE_TUNNEL_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 122 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{ return SrvParser::CLIENT_CLASS_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
{ return SrvParser::MATCH_IF_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 125 "SrvLexer.l"
{ return SrvParser::EQ_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 126 "SrvLexer.l"
{ return SrvParser::AND_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
{ return SrvParser::OR_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_DATA_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 130 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_EN_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 131 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_DATA_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
{ return SrvParser::ALLOW_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
{ return SrvParser::DENY_; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 134 "SrvLexer.l"
{ return SrvParser::SUBSTRING_; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 135 "SrvLexer.l"
{ return SrvParser::CONTAIN_; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 136 "SrvLexer.l"
{ return SrvParser::STRING_KEYWORD_; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 137 "SrvLexer.l"
{ return SrvParser::ADDRESS_LIST_; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 140 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 141 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 142 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 143 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 145 "SrvLexer.l"
;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 147 "SrvLexer.l"
;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 149 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno; 
}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 154 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 155 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 156 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 94:
YY_RULE_SETUP
#line 163 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 172 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 181 "SrvLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 190 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 199 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 208 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 217 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 229 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 236 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 257 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd then no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 289 "SrvLexer.l"
{
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   // Log(Crit) << "#### Detected [" << yytext << "] as DUID [len=" << len << "]" << LogEnd;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
        x = (toupper(*pos)-'A' + 10);
      else
        x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))	
        x += (toupper(*(pos+1))-'A' + 10);
      else
        x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }
   
   return SrvParser::DUID_;
}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 317 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd; 
      YYABORT; 
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 327 "SrvLexer.l"
{ 
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) { 
        Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd; 
        YYABORT; 
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 336 "SrvLexer.l"
{ return yytext[0]; } 
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 339 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 2902 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 903 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 903 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 902);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 339 "SrvLexer.l"




