#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 75
#define YY_END_OF_BUFFER 76
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[655] =
    {   0,
        1,    1,    0,    0,    0,    0,   76,   74,    2,    1,
        1,   74,   57,   74,   74,   73,   73,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   61,   61,   75,
        1,    1,    1,    0,   69,   57,    0,   69,   59,   58,
       73,    0,    0,   72,    0,   66,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   54,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   16,   17,   70,   70,
       70,   70,   70,   70,   70,   70,   60,   58,   73,    0,

        0,   65,   71,   64,   64,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   53,   73,    0,    0,    0,   63,   63,    0,
       64,    0,   64,   70,   70,   70,   47,   70,   70,   70,
       70,   70,   70,   70,   70,   36,   70,   70,   70,   70,
       70,    0,   70,   70,   70,   70,   70,   70,   22,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   55,   70,
       70,   70,   70,   73,    0,    0,    0,    0,   63,    0,

       63,    0,   64,   64,   64,   64,   70,   70,   70,   70,
        4,   70,   70,   70,   70,   70,   56,    3,   70,   70,
       70,   70,   70,   70,    0,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,    7,   23,   70,   70,   70,
       70,   70,   70,   70,   70,   70,    0,    0,    0,    0,
       63,   63,   63,   63,    0,   64,   64,   64,    0,   64,
       70,   70,   70,   70,   28,   70,   70,   31,   70,   70,
       70,   70,   70,   70,   70,   70,    0,    0,   70,   70,
       70,   29,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,    0,    0,    0,

       63,   63,   63,    0,   63,    0,    0,   64,   64,   64,
       64,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,    0,    0,   70,   70,
       70,   70,   70,   45,   70,   70,   70,   70,   70,   70,
       70,   70,   20,   70,   70,   70,    0,    0,    0,    0,
        0,   63,   63,   63,   63,    0,   64,   64,   64,    0,
       64,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   41,   70,   12,   10,    0,    0,   70,
       70,   70,   43,   70,   70,   70,   70,   70,   70,   70,
       70,    5,   70,   70,   70,   13,    0,    0,    0,   63,

       63,   63,    0,   63,   68,   64,   64,   64,   64,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   11,    0,    0,   70,   70,   70,   44,   70,   70,
       70,   70,   70,   70,    6,   33,   70,   70,    0,    0,
        0,   67,   63,   63,   63,   63,   64,   64,   64,    0,
       64,   70,   70,   42,   70,   70,   70,   70,   30,   70,
       70,   70,   70,    0,    0,   38,   37,   32,   70,   21,
       70,   70,   35,   34,   70,   70,    0,    0,   63,   63,
       63,    0,   63,   64,   64,   64,   64,   14,   50,   70,
       70,   70,   48,   70,   70,   70,   70,   40,   39,   70,

       70,   70,   70,   46,    0,    0,    0,   63,   63,   63,
       63,   64,   64,   64,    0,   64,   70,   70,   70,   51,
       70,   70,    8,   70,   24,   70,   70,    0,    0,   63,
       63,   63,    0,   63,   64,   64,   64,   64,   70,   70,
       70,   70,   52,   70,   70,   70,   70,    0,    0,    0,
       63,   63,   63,   63,   64,   64,   64,    0,   64,   70,
       70,   70,   70,   70,   70,   15,   19,    0,   62,   65,
       63,   63,   63,    0,   63,   64,   64,   64,   64,   26,
       70,   70,   25,   70,   70,    0,   62,    0,   63,   63,
       63,   63,   63,   64,   64,   64,    0,   64,   27,   49,

       70,   70,   62,   65,   63,    0,   63,   63,   63,   63,
       64,   64,   64,   70,   18,   62,   63,   63,   63,   63,
       64,   64,   64,    9,   63,   63,    0,   63,   63,   64,
       63,   63,   64,   63,   63,    0,   63,   63,   63,   63,
        0,   63,   63,   63,   63,    0,   63,   63,   63,   63,
        0,   63,   63,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   16,   16,   16,   16,   16,   16,   17,    1,    1,
        1,    1,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
        1,    1,    1,    1,    1,    1,   18,   19,   20,   21,

       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[44] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        3,    1,    4,    4,    4,    4,    5,    4,    4,    4,
        4,    4,    4,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[734] =
    {   0,
        0,    0, 2047, 2046,    0,    0, 2053, 2056, 2056,   41,
       43, 2047,    0, 2044,   40,   40, 2009, 2032,   69,   95,
       46,   40, 2007,   33, 2030,  102,  104,  105,   60,  106,
       51,  109,  130,  112,   78,  107,   57, 2056, 2034, 2056,
       46,   94,   98, 2040, 2056,    0, 2037, 2036, 2056,    0,
      153, 2025,   90, 2056,    0,  136, 2024,  166, 2020, 2018,
     2021,  123, 2017,  136,  140,   63,  160,  166, 2007,  111,
      141,  174,   53,  176,  177, 2018,  179,  178,  187,  184,
      181,  185,  190,  188,  191,  192, 2017, 2016,  204,  203,
      205,  206,  208,  209,  210,  211, 2056,    0,  235,  248,

     2015,  252,    0,  258,  271,  275, 2009, 1995,  138, 2004,
      266,  212,  213,  221,  224,  222,  275,  282,  283,  284,
      288,  290,  298,  307,  304,  292,  302,  303,  306,  308,
      311,  309,  313,  326,  320,  321,  322,  323,  329,  325,
      333,  242, 2011,  345,  358, 2010, 2009,  364,  377,  381,
      387,  398,  404,  408, 1992,  359, 2007,  330,  399,  408,
      415,  416,  417,  419,  420, 2006,  423,  421,  424,  427,
      431, 2012,  429,  430,  436,  438,  452,  439, 2004,  453,
      455,  336,  440,  456,  460,  462,  463,  473, 2003,  468,
      470,  471,  483,  491, 2002, 2001, 2000,  496,  502,  513,

      519,  525,  531,  544,  550,  563, 1999,  477,  558,  485,
      570,  545,  564,  566,  432,  472, 1998,  575,  567,  514,
      569,  572,  573,  579,  577,  582,  585,  586,  587,  592,
      589,  583,  594,  602,  599, 1997, 1996,  600,  604,  605,
      606,  608,  610,  618,  613,  480, 1995, 1994, 1993,  626,
      641,  654,  660,  673,  677,  683, 1992,  690,  701,  707,
      621,  626,  630,  526,  685,  709,  707, 1991,  655,  708,
      710,  632,  711,  712,  713,  714, 1975, 1984,  715,  718,
      719, 1988,  716,  722,  616,  726,  720,  740,  730,  738,
      739,  741,  742,  745,  746,  754,  750, 1987, 1986,  765,

      772, 1985,  779,  790,  796,  802,  808,  814,  827,  833,
      846,  752,  791,  841,  748,  846,  847,  848,  849,  851,
      853,  857,  862,  863,  864,  866, 1971, 1965,  872,  856,
      865,  755,  874, 1982,  875,  876,  877,  881,  883,  803,
      884,  885, 1981,  886,  888,  890, 1980, 1979, 1978,  915,
      921,  927,  940,  946,  959,  963,  969, 1977,  976,  987,
      993,  892,  896,  971,  898,  900,  941,  988,  993,  902,
      994, 1002,  996, 1976,  999, 1975, 1974, 1972, 1950, 1000,
     1005, 1007, 1971, 1006, 1015, 1013, 1004, 1019, 1020, 1021,
     1022, 1970, 1023,  904, 1024, 1969, 1968, 1967, 1036, 1048,

     1966, 1055, 1040, 1068, 1072, 1078, 1091, 1097, 1110, 1105,
     1030, 1110, 1118, 1092, 1112, 1114, 1119, 1120, 1129, 1050,
     1130, 1965, 1955, 1958, 1121, 1124, 1125, 1962, 1126, 1127,
     1073, 1136, 1133, 1131, 1961, 1960, 1134, 1141, 1959, 1958,
     1957, 1154, 1160, 1173, 1179, 1192, 1198, 1956, 1205, 1216,
     1222, 1168, 1155, 1955, 1217, 1230, 1222, 1226, 1954, 1227,
     1224, 1232, 1233, 1939, 1934, 1951, 1950, 1949, 1234, 1948,
     1235, 1240, 1947, 1946, 1237, 1238, 1945, 1944, 1252, 1943,
     1264, 1257, 1277, 1283, 1296, 1302, 1315, 1942, 1941, 1310,
     1316, 1324, 1940, 1318, 1320, 1144, 1319, 2056, 2056, 1272,

     1239, 1321, 1322, 1939, 1938, 1937, 1936, 1342, 1355, 1361,
     1374, 1380, 1935, 1387, 1398, 1404, 1326, 1329, 1337, 1934,
     1332, 1399, 1382, 1405, 1933, 1406, 1187, 1932, 1931, 1415,
     1930, 1433, 1420, 1426, 1446, 1459, 1465, 1478, 1350, 1407,
     1473, 1441, 1929, 1478, 1479, 1482, 1480, 1928, 1927, 1926,
     1508, 1490, 1521, 1498, 1534, 1925, 1541, 1552, 1558, 1498,
     1553, 1490, 1558, 1559, 1560, 1924, 1923, 1922, 1921,    0,
     1568, 1920, 1584, 1577, 1597, 1603, 1616, 1622, 1635, 1919,
     1630, 1639, 1918, 1637, 1516, 1917, 1916, 1915, 1914, 1648,
     1661, 1667, 1680, 1686, 1913, 1693,    0, 1706, 1912, 1911,

     1638, 1662, 1910, 2056, 1909,    0, 1712, 1908, 1719, 1732,
     1738, 1751,    0, 1561, 1812, 1799, 1778, 1771, 1757, 1770,
     1776, 1765,    0, 1757, 1752, 1746,    0, 1783, 2056,    0,
     1733, 1727, 2056, 1719, 1714,    0, 1707, 1701, 1688, 1681,
        0, 1675, 1656, 1640, 1617,    0, 1611, 1598, 1592, 1571,
        0, 1570, 1536, 2056, 1799, 1804, 1809, 1814, 1819, 1822,
     1827, 1829, 1513, 1496, 1831, 1467, 1833, 1835, 1441, 1837,
     1839, 1434, 1841, 1843, 1310, 1845, 1847, 1304, 1849, 1851,
     1040, 1853, 1855, 1038, 1857, 1859,  977, 1861, 1863,  948,
     1865, 1867,  906, 1869, 1871,  841, 1873, 1875,  810, 1877,

     1879,  766,  764, 1881, 1883,  649, 1885, 1887,  495,  395,
     1889, 1891,  385, 1893,  351,  302, 1895, 1897, 1899,  242,
     1901, 1903, 1905,  232, 1907, 1909, 1911,  157, 1913, 1915,
     1917,   74, 1919
    } ;

static yyconst flex_int16_t yy_def[734] =
    {   0,
      654,    1,  655,  655,  656,  656,  654,  654,  654,  654,
      654,  657,  658,  659,  654,  654,   16,  654,  660,  660,
       20,   20,   20,   20,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  654,  654,  654,
      654,  654,  654,  657,  654,  658,  659,  654,  654,  661,
      654,  662,   51,  654,  663,  664,  660,   20,   58,   58,
      660,  660,   58,  660,  660,  660,  660,  660,   58,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  654,  661,  654,   99,

      665,  666,  663,  654,  104,   58,  106,  106,  660,  106,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  654,  144,  667,  668,  654,  148,  654,
      654,  669,  151,  106,  154,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  654,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  145,  145,  670,  671,  654,  654,  672,

      199,  654,  654,  203,  654,  205,  154,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  654,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  654,  673,  674,  654,
      654,  251,  654,  253,  654,  654,  654,  654,  675,  258,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  654,  654,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  676,  677,  654,

      654,  654,  654,  678,  303,  654,  654,  654,  308,  654,
      310,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  654,  654,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  654,  679,  680,  654,
      654,  654,  352,  654,  354,  654,  654,  654,  654,  681,
      359,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  654,  654,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  682,  683,  654,  654,

      654,  654,  684,  402,  654,  654,  406,  654,  408,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  654,  654,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  654,  685,
      686,  654,  654,  443,  654,  445,  654,  654,  654,  687,
      449,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  654,  654,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  688,  689,  654,  654,
      654,  690,  481,  654,  484,  654,  486,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  654,  654,  660,

      660,  660,  660,  660,  654,  691,  692,  654,  508,  654,
      510,  654,  654,  654,  693,  514,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  694,  695,  654,
      654,  654,  696,  532,  654,  535,  654,  537,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  654,  697,  698,
      654,  551,  654,  553,  654,  654,  654,  699,  557,  660,
      660,  660,  660,  660,  660,  660,  660,  700,  701,  702,
      654,  654,  654,  703,  573,  654,  576,  654,  578,  660,
      660,  660,  660,  660,  660,  654,  704,  654,  705,  654,
      590,  654,  592,  654,  654,  654,  706,  596,  660,  660,

      660,  660,  707,  654,  708,  709,  654,  654,  654,  609,
      654,  611,  710,  660,  660,  654,  711,  712,  654,  619,
      654,  654,  713,  660,  654,  714,  715,  654,  654,  716,
      717,  718,  654,  654,  719,  720,  721,  722,  654,  723,
      724,  725,  726,  654,  727,  728,  729,  730,  654,  731,
      732,  733,  654,    0,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,

      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654
    } ;

static yyconst flex_int16_t yy_nxt[2100] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   25,   26,   25,   25,   27,   25,
       28,   29,   30,   25,   31,   32,   33,   34,   35,   36,
       25,   37,   25,   41,   42,   43,   42,   49,   41,   42,
       69,   50,   51,   51,   51,   51,   52,   53,   53,   53,
       53,   53,   53,   63,   54,   65,   70,  654,   82,  654,
       66,   67,   83,  654,   64,  122,  654,  593,   96,  654,
       55,   58,   58,   58,   58,   52,   58,   58,   59,   60,
       58,   58,   78,   61,  654,   93,   43,   42,  114,   94,

       41,   42,  100,  100,  100,  100,   62,   58,   58,   58,
       58,   52,   58,   58,   58,   58,   58,   58,  654,   61,
      654,  654,  654,  654,   71,  654,   79,  654,  654,   73,
       75,  118,   72,   84,   85,   74,   76,   80,   95,  654,
       81,   77,   92,   87,   88,   86,  654,   89,  104,  104,
      104,  104,  654,  111,  654,   90,  654,  654,  119,  109,
      648,  112,  157,  113,   91,   99,   99,   99,   99,   52,
      100,  100,  100,  100,  100,  100,  654,   54,  106,  106,
      106,  106,  654,  106,  106,  106,  106,  106,  106,  115,
      654,  120,  654,  654,  654,  654,  127,  654,  116,  123,

      654,  654,  129,  654,  654,  133,  654,  654,  654,  135,
      121,  125,  124,  136,  126,  128,  131,  130,  132,  654,
      654,  654,  654,  134,  654,  654,  654,  654,  654,  654,
      162,  139,  137,  160,  161,  643,  140,  654,  654,  141,
      654,  163,  138,  164,  142,  638,  143,  144,  144,  144,
      144,   52,  145,  145,  145,  145,  145,  145,  654,   54,
      145,  145,  145,  145,  148,  148,  148,  148,  150,  193,
      151,  151,  151,  151,  152,  153,  153,  153,  153,  153,
      153,  654,  654,  153,  153,  153,  153,  154,  154,  154,
      154,  654,  154,  154,  154,  154,  154,  154,  654,  654,

      654,  159,  167,  168,  654,  633,  654,  171,  654,  169,
      165,  170,  166,  174,  654,  172,  173,  175,  654,  654,
      654,  176,  654,  654,  654,  654,  183,  654,  180,  654,
      177,  179,  182,  181,  178,  185,  654,  654,  654,  654,
      187,  654,  654,  188,  189,  654,  654,  184,  190,  654,
      191,  210,  654,  192,  632,  235,  186,  194,  194,  194,
      194,   52,  195,  195,  195,  195,  195,  195,  209,   54,
      195,  195,  195,  195,  198,  654,  199,  199,  199,  199,
      200,  201,  201,  201,  201,  201,  201,  654,  630,  201,
      201,  201,  201,  202,  202,  202,  202,  150,  623,  203,

      203,  203,  203,  152,  204,  204,  204,  204,  204,  204,
      205,  205,  205,  205,  654,  654,  204,  204,  204,  204,
      207,  207,  207,  207,  654,  207,  207,  207,  207,  207,
      207,  654,  654,  654,  211,  654,  654,  654,  212,  654,
      654,  217,  215,  654,  218,  654,  654,  654,  654,  226,
      213,  214,  654,  216,  654,  654,  654,  219,  220,  222,
      223,  224,  268,  221,  227,  228,  230,  229,  654,  654,
      232,  654,  654,  231,  233,  234,  654,  237,  654,  654,
      238,  236,  242,  240,  654,  243,  654,  654,  654,  654,
      244,  241,  246,  654,  263,  239,  654,  269,  618,  654,

      297,  654,  245,  194,  194,  194,  194,  654,  250,  250,
      250,  250,  198,  261,  251,  251,  251,  251,  200,  252,
      252,  252,  252,  252,  252,  253,  253,  253,  253,  654,
      654,  252,  252,  252,  252,  255,  272,  202,  202,  202,
      202,  150,  654,  256,  256,  256,  256,  152,  257,  257,
      257,  257,  257,  257,  654,  315,  257,  257,  257,  257,
      150,  654,  258,  258,  258,  258,  259,  260,  260,  260,
      260,  260,  260,  654,  654,  260,  260,  260,  260,  264,
      654,  265,  654,  654,  270,  654,  654,  267,  654,  654,
      262,  654,  271,  274,  273,  654,  276,  277,  654,  654,

      266,  654,  654,  654,  275,  654,  280,  281,  654,  283,
      654,  287,  278,  279,  285,  654,  654,  282,  654,  284,
      654,  654,  654,  292,  654,  290,  654,  295,  286,  654,
      312,  289,  654,  291,  654,  288,  300,  654,  250,  250,
      250,  250,  654,  313,  334,  294,  654,  296,  654,  322,
      293,  198,  613,  301,  301,  301,  301,  200,  302,  302,
      302,  302,  302,  302,  654,  314,  302,  302,  302,  302,
      198,  654,  303,  303,  303,  303,  304,  305,  305,  305,
      305,  305,  305,  654,  319,  305,  305,  305,  305,  306,
      306,  306,  306,  150,  316,  307,  307,  307,  307,  152,

      150,  654,  308,  308,  308,  308,  259,  309,  309,  309,
      309,  309,  309,  310,  310,  310,  310,  654,  317,  309,
      309,  309,  309,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  325,  654,  654,  654,  320,  654,  336,
      323,  318,  654,  326,  329,  333,  654,  335,  321,  337,
      324,  332,  330,  331,  654,  654,  654,  654,  654,  338,
      340,  654,  654,  345,  654,  365,  654,  593,  654,  589,
      654,  654,  339,  342,  344,  346,  341,  350,  350,  350,
      350,  343,  198,  362,  351,  351,  351,  351,  200,  198,
      383,  352,  352,  352,  352,  304,  353,  353,  353,  353,

      353,  353,  354,  354,  354,  354,  654,  654,  353,  353,
      353,  353,  356,  579,  306,  306,  306,  306,  150,  654,
      307,  307,  307,  307,  150,  363,  357,  357,  357,  357,
      259,  358,  358,  358,  358,  358,  358,  654,  391,  358,
      358,  358,  358,  150,  554,  359,  359,  359,  359,  360,
      361,  361,  361,  361,  361,  361,  654,  654,  361,  361,
      361,  361,  654,  654,  654,  654,  364,  654,  371,  654,
      370,  367,  654,  654,  372,  366,  373,  368,  654,  654,
      654,  654,  654,  374,  375,  376,  369,  377,  654,  380,
      654,  654,  654,  654,  381,  385,  388,  654,  389,  654,

      654,  654,  654,  382,  654,  386,  654,  387,  654,  538,
      384,  394,  654,  411,  654,  393,  654,  414,  654,  392,
      654,  390,  410,  395,  396,  399,  437,  350,  350,  350,
      350,  198,  418,  351,  351,  351,  351,  198,  413,  400,
      400,  400,  400,  304,  401,  401,  401,  401,  401,  401,
      654,  511,  401,  401,  401,  401,  198,  654,  402,  402,
      402,  402,  403,  404,  404,  404,  404,  404,  404,  654,
      415,  404,  404,  404,  404,  405,  405,  405,  405,  150,
      487,  307,  307,  307,  307,  259,  150,  654,  406,  406,
      406,  406,  360,  407,  407,  407,  407,  407,  407,  408,

      408,  408,  408,  654,  654,  407,  407,  407,  407,  654,
      654,  420,  654,  412,  417,  654,  654,  421,  654,  416,
      654,  654,  654,  654,  429,  425,  426,  422,  427,  654,
      428,  654,  430,  431,  419,  654,  654,  654,  654,  654,
      654,  446,  434,  409,  436,  433,  654,  432,  442,  442,
      442,  442,  445,  445,  445,  445,  438,  435,  198,  453,
      351,  351,  351,  351,  304,  198,  654,  443,  443,  443,
      443,  403,  444,  444,  444,  444,  444,  444,  654,  462,
      444,  444,  444,  444,  405,  405,  405,  405,  150,  654,
      447,  447,  447,  447,  360,  448,  448,  448,  448,  448,

      448,  654,  471,  448,  448,  448,  448,  150,  654,  449,
      449,  449,  449,  450,  451,  451,  451,  451,  451,  451,
      654,  654,  451,  451,  451,  451,  654,  455,  654,  457,
      654,  454,  456,  452,  654,  654,  654,  654,  461,  463,
      654,  654,  654,  654,  458,  654,  654,  654,  470,  654,
      654,  466,  654,  459,  469,  475,  460,  654,  467,  468,
      654,  472,  476,  473,  522,  474,  442,  442,  442,  442,
      198,  654,  479,  479,  479,  479,  403,  480,  480,  480,
      480,  480,  480,  654,  654,  480,  480,  480,  480,  198,
      489,  481,  481,  481,  481,  482,  483,  483,  483,  483,

      483,  483,  654,  654,  483,  483,  483,  483,  150,  488,
      307,  307,  307,  307,  360,  150,  547,  484,  484,  484,
      484,  450,  485,  485,  485,  485,  485,  485,  486,  486,
      486,  486,  654,  654,  485,  485,  485,  485,  654,  491,
      654,  492,  654,  654,  494,  490,  654,  493,  654,  654,
      654,  654,  495,  654,  654,  654,  654,  504,  497,  500,
      501,  502,  198,  496,  351,  351,  351,  351,  403,  510,
      510,  510,  510,  503,  198,  525,  508,  508,  508,  508,
      482,  509,  509,  509,  509,  509,  509,  654,  654,  509,
      509,  509,  509,  150,  524,  512,  512,  512,  512,  450,

      513,  513,  513,  513,  513,  513,  654,  355,  513,  513,
      513,  513,  150,  311,  514,  514,  514,  514,  515,  516,
      516,  516,  516,  516,  516,  654,  654,  516,  516,  516,
      516,  517,  654,  519,  654,  654,  654,  654,  654,  523,
      654,  521,  654,  539,  518,  654,  520,  527,  654,  542,
      540,  526,  198,  654,  530,  530,  530,  530,  482,  531,
      531,  531,  531,  531,  531,  654,  654,  531,  531,  531,
      531,  198,  541,  532,  532,  532,  532,  533,  534,  534,
      534,  534,  534,  534,  654,  560,  534,  534,  534,  534,
      150,  544,  307,  307,  307,  307,  450,  150,  654,  535,

      535,  535,  535,  515,  536,  536,  536,  536,  536,  536,
      537,  537,  537,  537,  654,  654,  536,  536,  536,  536,
      543,  654,  654,  654,  561,  198,  545,  351,  351,  351,
      351,  482,  553,  553,  553,  553,  654,  254,  552,  552,
      552,  552,  546,  198,  206,  551,  551,  551,  551,  533,
      552,  552,  552,  552,  552,  552,  150,  654,  555,  555,
      555,  555,  515,  556,  556,  556,  556,  556,  556,  654,
      149,  556,  556,  556,  556,  150,  563,  557,  557,  557,
      557,  558,  559,  559,  559,  559,  559,  559,  654,  654,
      559,  559,  559,  559,  654,  654,  654,  562,  654,  105,

      654,  567,  572,  572,  572,  572,  654,  582,  654,  564,
      575,  575,  575,  575,  654,  565,  103,  566,  198,  580,
      571,  571,  571,  571,  533,  572,  572,  572,  572,  572,
      572,  198,  654,  573,  573,  573,  573,  574,  575,  575,
      575,  575,  575,  575,  150,  602,  307,  307,  307,  307,
      515,  150,  651,  576,  576,  576,  576,  558,  577,  577,
      577,  577,  577,  577,  578,  578,  578,  578,  654,  654,
      577,  577,  577,  577,  654,  654,  654,  654,  198,  583,
      351,  351,  351,  351,  533,  585,  651,  651,  581,  592,
      592,  592,  592,  584,  198,  624,  590,  590,  590,  590,

      574,  591,  591,  591,  591,  591,  591,  654,  646,  591,
      591,  591,  591,  150,  651,  594,  594,  594,  594,  558,
      595,  595,  595,  595,  595,  595,  654,  646,  595,  595,
      595,  595,  150,  646,  596,  596,  596,  596,  597,  598,
      598,  598,  598,  598,  598,  654,  654,  598,  598,  598,
      598,  599,  600,  654,  654,  654,  641,  601,  198,  614,
      607,  607,  607,  607,  574,  608,  608,  608,  608,  608,
      608,  654,  646,  608,  608,  608,  608,  198,  654,  609,
      609,  609,  609,  615,  610,  610,  610,  610,  610,  610,
      654,  641,  610,  610,  610,  610,  150,  641,  307,  307,

      307,  307,  558,  150,  636,  611,  611,  611,  611,  597,
      612,  612,  612,  612,  612,  612,  654,  641,  612,  612,
      612,  612,  198,  636,  351,  351,  351,  351,  574,  198,
      636,  619,  619,  619,  619,  627,  620,  620,  620,  620,
      620,  620,  654,  636,  620,  620,  620,  620,  150,  627,
      621,  621,  621,  621,  597,  622,  622,  622,  622,  622,
      622,  654,  627,  622,  622,  622,  622,  198,  606,  628,
      628,  628,  628,  654,  629,  629,  629,  629,  629,  629,
      654,  597,  629,  629,  629,  629,  150,  627,  307,  307,
      307,  307,  597,  198,  606,  351,  351,  351,  351,   38,

       38,   38,   38,   38,   40,   40,   40,   40,   40,   44,
       44,   44,   44,   44,   46,  588,   46,   46,   46,   47,
       47,   47,   47,   47,   57,   57,   57,   98,  654,   98,
       98,   98,  101,  101,  146,  146,  196,  196,  197,  197,
      247,  247,  248,  248,  298,  298,  299,  299,  347,  347,
      348,  348,  397,  397,  398,  398,  439,  439,  440,  440,
      477,  477,  478,  478,  505,  505,  506,  506,  528,  528,
      529,  529,  548,  548,  549,  549,  568,  568,  569,  569,
      586,  586,  587,  587,  603,  603,  605,  605,  616,  616,
      617,  617,  625,  625,  626,  626,  631,  631,  634,  634,

      635,  635,  637,  637,  639,  639,  640,  640,  642,  642,
      644,  644,  645,  645,  647,  647,  649,  649,  650,  650,
      652,  652,  653,  653,  574,  606,  588,  654,  654,  558,
      606,  604,  588,  550,  654,  654,  533,  588,  550,  654,
      654,  515,  570,  550,  507,  654,  482,  550,  507,  654,
      654,  450,  102,  507,  441,  654,  654,  654,  654,  403,
      507,  441,  654,  654,  654,  654,  654,  654,  499,  498,
      654,  654,  360,  102,  441,  349,  654,  654,  654,  465,
      464,  654,  304,  441,  349,  654,  654,  654,  424,  423,
      654,  654,  654,  259,  102,  349,  249,  654,  654,  379,

      378,  200,  349,  249,  654,  328,  327,  654,  152,  102,
      249,  147,  654,  654,  654,  654,  249,  147,  654,  654,
      654,  225,  654,  654,  208,  102,  147,  654,  158,  156,
      155,  147,  654,  654,  654,  117,  110,  654,  108,  107,
      654,  102,   47,   48,   45,   97,  654,   68,   56,  654,
       48,   45,  654,   39,   39,    7,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654

    } ;

static yyconst flex_int16_t yy_chk[2100] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   10,   10,   11,   11,   15,   41,   41,
       24,   15,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   21,   16,   22,   24,   31,   31,   73,
       22,   22,   31,   37,   21,   73,   29,  732,   37,   66,
       16,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   29,   19,   35,   35,   42,   42,   66,   35,

       43,   43,   53,   53,   53,   53,   19,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   26,   20,
       27,   28,   30,   36,   26,   32,   30,   70,   34,   27,
       28,   70,   26,   32,   32,   27,   28,   30,   36,   62,
       30,   28,   34,   33,   33,   32,   33,   33,   56,   56,
       56,   56,   64,   64,  109,   33,   65,   71,   71,   62,
      728,   64,  109,   65,   33,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   67,   51,   58,   58,
       58,   58,   68,   58,   58,   58,   58,   58,   58,   67,
       72,   72,   74,   75,   78,   77,   79,   81,   68,   74,

       80,   82,   81,   79,   84,   84,   83,   85,   86,   86,
       72,   77,   75,   89,   78,   80,   83,   82,   83,   90,
       89,   91,   92,   85,   93,   94,   95,   96,  112,  113,
      114,   92,   90,  112,  113,  724,   93,  114,  116,   94,
      115,  115,   91,  116,   95,  720,   96,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,  142,   99,
      100,  100,  100,  100,  102,  102,  102,  102,  104,  142,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  105,  111,  105,  105,  105,  105,  106,  106,  106,
      106,  117,  106,  106,  106,  106,  106,  106,  118,  119,

      120,  111,  119,  120,  121,  716,  122,  123,  126,  121,
      117,  122,  118,  125,  123,  124,  124,  126,  127,  128,
      125,  127,  129,  124,  130,  132,  132,  131,  129,  133,
      127,  128,  131,  130,  127,  134,  135,  136,  137,  138,
      136,  140,  134,  137,  138,  139,  158,  133,  139,  141,
      140,  158,  182,  141,  715,  182,  135,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  156,  144,
      145,  145,  145,  145,  148,  156,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  149,  713,  149,
      149,  149,  149,  150,  150,  150,  150,  151,  710,  151,

      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      152,  152,  152,  152,  153,  159,  153,  153,  153,  153,
      154,  154,  154,  154,  160,  154,  154,  154,  154,  154,
      154,  161,  162,  163,  159,  164,  165,  168,  160,  167,
      169,  165,  163,  170,  167,  173,  174,  171,  215,  173,
      161,  162,  175,  164,  176,  178,  183,  168,  169,  171,
      171,  171,  215,  170,  173,  174,  176,  175,  177,  180,
      178,  181,  184,  177,  180,  181,  185,  184,  186,  187,
      185,  183,  188,  186,  190,  190,  191,  192,  216,  188,
      191,  187,  193,  208,  210,  185,  246,  216,  709,  193,

      246,  210,  192,  194,  194,  194,  194,  194,  198,  198,
      198,  198,  199,  208,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  200,  200,  200,  200,  201,
      220,  201,  201,  201,  201,  202,  220,  202,  202,  202,
      202,  203,  264,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  204,  264,  204,  204,  204,  204,
      205,  212,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  206,  209,  206,  206,  206,  206,  211,
      213,  212,  214,  219,  218,  221,  211,  214,  222,  223,
      209,  218,  219,  222,  221,  224,  224,  225,  226,  232,

      213,  227,  228,  229,  223,  231,  227,  228,  230,  230,
      233,  234,  225,  226,  232,  235,  238,  229,  234,  231,
      239,  240,  241,  241,  242,  239,  243,  244,  233,  245,
      261,  238,  285,  240,  244,  235,  250,  261,  250,  250,
      250,  250,  262,  262,  285,  243,  263,  245,  272,  272,
      242,  251,  706,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  252,  263,  252,  252,  252,  252,
      253,  269,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  254,  269,  254,  254,  254,  254,  255,
      255,  255,  255,  256,  265,  256,  256,  256,  256,  256,

      258,  265,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  259,  259,  259,  259,  260,  266,  260,
      260,  260,  260,  267,  270,  266,  271,  273,  274,  275,
      276,  279,  283,  275,  280,  281,  287,  270,  284,  287,
      273,  267,  286,  276,  279,  284,  289,  286,  271,  288,
      274,  283,  280,  281,  290,  291,  288,  292,  293,  289,
      291,  294,  295,  296,  315,  315,  297,  703,  312,  702,
      296,  332,  290,  293,  295,  297,  292,  300,  300,  300,
      300,  294,  301,  312,  301,  301,  301,  301,  301,  303,
      332,  303,  303,  303,  303,  303,  303,  303,  303,  303,

      303,  303,  304,  304,  304,  304,  305,  313,  305,  305,
      305,  305,  306,  699,  306,  306,  306,  306,  307,  340,
      307,  307,  307,  307,  308,  313,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  309,  340,  309,
      309,  309,  309,  310,  696,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  311,  314,  311,  311,
      311,  311,  316,  317,  318,  319,  314,  320,  320,  321,
      319,  317,  330,  322,  321,  316,  322,  317,  323,  324,
      325,  331,  326,  323,  324,  325,  318,  326,  329,  329,
      333,  335,  336,  337,  330,  335,  337,  338,  338,  339,

      341,  342,  344,  331,  345,  335,  346,  336,  362,  693,
      333,  344,  363,  363,  365,  342,  366,  366,  370,  341,
      394,  339,  362,  345,  346,  350,  394,  350,  350,  350,
      350,  351,  370,  351,  351,  351,  351,  352,  365,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      353,  690,  353,  353,  353,  353,  354,  367,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  355,
      367,  355,  355,  355,  355,  356,  356,  356,  356,  357,
      687,  357,  357,  357,  357,  357,  359,  364,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  360,

      360,  360,  360,  361,  368,  361,  361,  361,  361,  369,
      371,  372,  373,  364,  369,  375,  380,  373,  372,  368,
      387,  381,  384,  382,  385,  380,  381,  375,  382,  386,
      384,  385,  386,  387,  371,  388,  389,  390,  391,  393,
      395,  684,  390,  681,  393,  389,  411,  388,  399,  399,
      399,  399,  403,  403,  403,  403,  395,  391,  400,  411,
      400,  400,  400,  400,  400,  402,  420,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  404,  420,
      404,  404,  404,  404,  405,  405,  405,  405,  406,  431,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,

      406,  407,  431,  407,  407,  407,  407,  408,  414,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      409,  410,  409,  409,  409,  409,  412,  413,  415,  415,
      416,  412,  414,  410,  413,  417,  418,  425,  419,  421,
      426,  427,  429,  430,  416,  419,  421,  434,  430,  433,
      437,  425,  432,  417,  429,  437,  418,  438,  426,  427,
      496,  432,  438,  433,  496,  434,  442,  442,  442,  442,
      443,  453,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  444,  452,  444,  444,  444,  444,  445,
      453,  445,  445,  445,  445,  445,  445,  445,  445,  445,

      445,  445,  446,  527,  446,  446,  446,  446,  447,  452,
      447,  447,  447,  447,  447,  449,  527,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  450,  450,
      450,  450,  451,  455,  451,  451,  451,  451,  457,  456,
      461,  457,  458,  460,  460,  455,  456,  458,  462,  463,
      469,  471,  461,  475,  476,  501,  472,  476,  463,  469,
      471,  472,  479,  462,  479,  479,  479,  479,  479,  482,
      482,  482,  482,  475,  481,  501,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  483,  500,  483,
      483,  483,  483,  484,  500,  484,  484,  484,  484,  484,

      484,  484,  484,  484,  484,  484,  485,  678,  485,  485,
      485,  485,  486,  675,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  487,  490,  487,  487,  487,
      487,  490,  491,  492,  494,  497,  495,  502,  503,  497,
      492,  495,  517,  517,  491,  518,  494,  503,  521,  521,
      518,  502,  508,  519,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  509,  539,  509,  509,  509,
      509,  510,  519,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  511,  539,  511,  511,  511,  511,
      512,  523,  512,  512,  512,  512,  512,  514,  523,  514,

      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      515,  515,  515,  515,  516,  522,  516,  516,  516,  516,
      522,  524,  526,  540,  540,  530,  524,  530,  530,  530,
      530,  530,  533,  533,  533,  533,  534,  672,  534,  534,
      534,  534,  526,  532,  669,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  535,  542,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  536,
      666,  536,  536,  536,  536,  537,  542,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  538,  541,
      538,  538,  538,  538,  544,  545,  547,  541,  546,  664,

      552,  547,  552,  552,  552,  552,  562,  562,  554,  544,
      554,  554,  554,  554,  560,  545,  663,  546,  551,  560,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  553,  585,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  555,  585,  555,  555,  555,  555,
      555,  557,  653,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  558,  558,  558,  558,  559,  561,
      559,  559,  559,  559,  563,  564,  565,  614,  571,  563,
      571,  571,  571,  571,  571,  565,  652,  650,  561,  574,
      574,  574,  574,  564,  573,  614,  573,  573,  573,  573,

      573,  573,  573,  573,  573,  573,  573,  575,  649,  575,
      575,  575,  575,  576,  648,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  577,  647,  577,  577,
      577,  577,  578,  645,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  579,  581,  579,  579,  579,
      579,  581,  582,  584,  601,  582,  644,  584,  590,  601,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  591,  643,  591,  591,  591,  591,  592,  602,  592,
      592,  592,  592,  602,  592,  592,  592,  592,  592,  592,
      593,  642,  593,  593,  593,  593,  594,  640,  594,  594,

      594,  594,  594,  596,  639,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  598,  638,  598,  598,
      598,  598,  607,  637,  607,  607,  607,  607,  607,  609,
      635,  609,  609,  609,  609,  634,  609,  609,  609,  609,
      609,  609,  610,  632,  610,  610,  610,  610,  611,  631,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  612,  626,  612,  612,  612,  612,  619,  625,  619,
      619,  619,  619,  624,  619,  619,  619,  619,  619,  619,
      620,  622,  620,  620,  620,  620,  621,  618,  621,  621,
      621,  621,  621,  628,  617,  628,  628,  628,  628,  655,

      655,  655,  655,  655,  656,  656,  656,  656,  656,  657,
      657,  657,  657,  657,  658,  616,  658,  658,  658,  659,
      659,  659,  659,  659,  660,  660,  660,  661,  615,  661,
      661,  661,  662,  662,  665,  665,  667,  667,  668,  668,
      670,  670,  671,  671,  673,  673,  674,  674,  676,  676,
      677,  677,  679,  679,  680,  680,  682,  682,  683,  683,
      685,  685,  686,  686,  688,  688,  689,  689,  691,  691,
      692,  692,  694,  694,  695,  695,  697,  697,  698,  698,
      700,  700,  701,  701,  704,  704,  705,  705,  707,  707,
      708,  708,  711,  711,  712,  712,  714,  714,  717,  717,

      718,  718,  719,  719,  721,  721,  722,  722,  723,  723,
      725,  725,  726,  726,  727,  727,  729,  729,  730,  730,
      731,  731,  733,  733,  608,  605,  603,  600,  599,  595,
      589,  588,  587,  586,  583,  580,  572,  569,  568,  567,
      566,  556,  550,  549,  548,  543,  531,  529,  528,  525,
      520,  513,  507,  506,  505,  504,  493,  489,  488,  480,
      478,  477,  474,  473,  470,  468,  467,  466,  465,  464,
      459,  454,  448,  441,  440,  439,  436,  435,  428,  424,
      423,  422,  401,  398,  397,  396,  392,  383,  379,  378,
      377,  376,  374,  358,  349,  348,  347,  343,  334,  328,

      327,  302,  299,  298,  282,  278,  277,  268,  257,  249,
      248,  247,  237,  236,  217,  207,  197,  196,  195,  189,
      179,  172,  166,  157,  155,  147,  146,  143,  110,  108,
      107,  101,   88,   87,   76,   69,   63,   61,   60,   59,
       57,   52,   48,   47,   44,   39,   25,   23,   18,   17,
       14,   12,    7,    4,    3,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654

    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[76] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 1149 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 1254 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 655 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2056 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 60 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 62 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::AUTH_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 108 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno; 
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 120 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 121 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 62:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 137 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 146 "SrvLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 155 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 164 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 173 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 182 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 194 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 201 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 222 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd then no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 254 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd; 
      YYABORT; 
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 264 "SrvLexer.l"
{ 
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) { 
        Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd; 
        YYABORT; 
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 273 "SrvLexer.l"
{ return yytext[0]; } 
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 276 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 1857 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 655 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 655 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 654);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

yyFlexLexer::~yyFlexLexer()
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

	delete [] (yy_state_buf);
	yyfree((yy_start_stack)  );

}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 276 "SrvLexer.l"




