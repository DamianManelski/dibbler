#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 105
#define YY_END_OF_BUFFER 106
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[864] =
    {   0,
        1,    1,    0,    0,    0,    0,  106,  104,    2,    1,
        1,  104,   87,  104,  104,  103,  103,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
       91,   91,  105,    1,    1,    1,    0,   99,   87,    0,
       99,   89,   88,  103,    0,    0,  102,    0,   96,   70,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,   84,  100,  100,
       72,  100,  100,  100,  100,  100,  100,  100,  100,  100,

       16,   17,  100,  100,  100,  100,  100,  100,  100,  100,
       90,   88,  103,    0,    0,   95,  101,   94,   94,  100,
      100,  100,  100,   71,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,   83,  103,    0,
        0,    0,   93,   93,    0,   94,    0,   94,  100,  100,
      100,  100,  100,  100,  100,  100,  100,   78,  100,  100,
      100,  100,   29,  100,  100,   40,  100,  100,  100,  100,

      100,  100,  100,    0,  100,  100,  100,  100,  100,  100,
       22,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,   85,  100,  100,  100,  100,  103,    0,
        0,    0,    0,   93,    0,   93,    0,   94,   94,   94,
       94,  100,  100,  100,  100,   77,  100,  100,    4,  100,
      100,  100,  100,  100,  100,  100,   86,  100,    3,  100,
      100,  100,  100,  100,  100,  100,    0,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,    7,  100,   23,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,    0,    0,    0,    0,   93,   93,   93,   93,    0,

       94,   94,   94,    0,   94,  100,  100,  100,  100,  100,
      100,  100,  100,   28,  100,  100,  100,   35,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,    0,
        0,  100,  100,  100,   33,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,   81,  100,  100,  100,  100,
      100,  100,  100,    0,    0,    0,   93,   93,   93,    0,
       93,    0,    0,   94,   94,   94,   94,  100,  100,   31,
      100,  100,  100,  100,  100,    0,  100,  100,   80,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,    0,    0,  100,  100,  100,  100,  100,   50,

      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
       20,  100,  100,  100,    0,    0,    0,    0,    0,   93,
       93,   93,   93,    0,   94,   94,   94,    0,   94,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,    0,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,   46,  100,   12,   10,   69,    0,    0,
      100,  100,  100,   48,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,    5,  100,  100,  100,   13,    0,
        0,    0,   93,   93,   93,    0,   93,   98,   94,   94,
       94,   94,  100,  100,  100,  100,  100,  100,  100,  100,

      100,  100,    0,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,   11,    0,    0,  100,
      100,  100,   49,  100,  100,  100,  100,   30,  100,  100,
        6,   79,   37,  100,  100,    0,    0,    0,   97,   93,
       93,   93,   93,   94,   94,   94,    0,   94,  100,  100,
      100,  100,  100,  100,  100,  100,   47,  100,    0,  100,
      100,  100,  100,  100,  100,   34,  100,  100,   32,  100,
      100,  100,    0,    0,   43,   42,   36,  100,   21,  100,
      100,   39,   38,  100,  100,    0,    0,   93,   93,   93,
        0,   93,   94,   94,   94,   94,  100,   14,  100,   52,

      100,  100,  100,   57,  100,    0,  100,  100,  100,  100,
       60,  100,  100,  100,  100,  100,  100,   45,   44,  100,
      100,  100,  100,   51,    0,    0,    0,   93,   93,   93,
       93,   94,   94,   94,    0,   94,  100,  100,   82,   59,
      100,  100,    0,   68,  100,  100,  100,   61,  100,   53,
      100,  100,    8,  100,   24,  100,  100,    0,    0,   93,
       93,   93,    0,   93,   94,   94,   94,   94,  100,  100,
       58,  100,    0,  100,  100,  100,  100,  100,  100,   55,
      100,  100,  100,  100,    0,    0,    0,   93,   93,   93,
       93,   94,   94,   94,    0,   94,  100,  100,  100,    0,

      100,  100,  100,  100,   54,  100,  100,  100,   15,   19,
        0,   92,   95,   93,   93,   93,    0,   93,   94,   94,
       94,   94,  100,  100,   26,    0,    0,  100,  100,  100,
       62,  100,   25,  100,  100,    0,   92,    0,   93,   93,
       93,   93,   93,   94,   94,   94,    0,   94,  100,  100,
        0,    0,   27,  100,  100,   63,  100,  100,  100,  100,
      100,   92,   95,   93,    0,   93,   93,   93,   93,   94,
       94,   94,   56,  100,    0,    0,  100,  100,  100,  100,
      100,  100,  100,   18,   92,   93,   93,   93,   93,   94,
       94,   94,  100,    0,    0,  100,  100,   64,   65,   66,

       67,    9,   93,   93,    0,   93,   93,   94,   41,    0,
        0,  100,  100,   93,   93,   94,    0,    0,    0,  100,
      100,  100,   93,   93,    0,    0,    0,    0,   73,  100,
      100,  100,   73,   93,   93,    0,   75,    0,  100,   75,
      100,   93,   93,    0,    0,   74,  100,   74,   93,   93,
       76,   76,   93,   93,    0,   93,   93,   93,   93,    0,
       93,   93,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
       23,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        1,    1,    1,    1,    1,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    1,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[933] =
    {   0,
        0,    0,  807,  806,    0,    0,  813, 5322, 5322,   73,
       75,  807,    0,  804,   72,   72,   34,  788,  750,  136,
      186,  233,  280,   71,  208,  338,   38,   73,  197,   89,
      263,  175,  235,  350,  340,  391,   67,  357,  180,  256,
     5322,  760, 5322,  111,  137,  222,  766, 5322,    0,  763,
      762, 5322,    0,  449,  746,  468, 5322,    0,  494, 5322,
       61,  537,   86,   89,  183,  193,  343,  221,  226,  390,
      272,  229,  373,  269,  380,  270,  386,  382,  258,  489,
      384,  409,  536,  402,  461,  524,  527,  276,  534,  533,
      279,  526,  381,  556,  568,  578,  584,  576,  601,  592,

      454,  539,  606,  585,  574,  591,  621,  615,  616,  622,
     5322,    0,  680,  699,  744,  725,    0,  770,  744,  813,
      599,  591,  805,  619,  804,  646,  802,  808,  678,  803,
      827,  806,  835,  845,  855,  856,  844,  730,  848,  857,
      867,  859,  863,  850,  878,  914,  892,  896,  908,  900,
      902,  906,  911,  927,  915,  939,  931,  924,  942,  945,
      964,  960,  963,  966,  967,  975,  961,  640, 1033,  788,
      714,  707, 1080, 1052, 1061, 1125, 1168, 1099, 1211,  717,
     1146,  952, 1093, 1163, 1199, 1085, 1210,  775, 1200, 1203,
     1214, 1242,  851, 1208, 1248,  912, 1209, 1253, 1129, 1215,

     1244, 1254, 1252,  718, 1266, 1257, 1267, 1259, 1298, 1294,
      959, 1300, 1277, 1307, 1291, 1297, 1318, 1329, 1325, 1311,
     1306, 1343, 1347, 1316, 1339, 1357, 1352, 1370, 1415,  705,
      704,  703, 1428, 1439, 1482, 1458, 1501, 1527, 1546, 1572,
     1591,  702, 1349, 1574, 1356, 1341, 1585, 1460, 1514, 1571,
     1584, 1587, 1589, 1614, 1591, 1604, 1350, 1593, 1622, 1606,
     1623, 1621, 1641, 1637, 1644, 1639, 1644, 1652, 1645, 1654,
     1643, 1676, 1666, 1679, 1661, 1660, 1675, 1368, 1693, 1381,
     1689, 1697, 1704, 1708, 1691, 1710, 1706, 1698, 1746, 1728,
     1735,  701,  666,  665, 1793, 1806, 1825, 1851, 1870, 1467,

     1896,  659, 1908, 1951, 1927, 1793, 1850, 1729, 1929, 1942,
     1953, 1940, 1469, 2023, 1948, 1838, 1748, 1506, 1993, 1952,
     1990, 2000, 1945, 1969, 2004, 1997, 2011, 2007, 2017, 1531,
     1729, 2014, 1950, 2012, 1726, 2015, 2042, 2036, 2045, 2052,
     2044, 2080, 2056, 2050, 2065, 1731, 2063, 2059, 2064, 2067,
     2081, 2095, 2099,  658,  657, 2157, 2168,  653, 2180, 2223,
     2199, 2242, 2268, 2279, 2298, 2324, 2343, 2345, 2097, 2122,
     2321, 2326, 2202, 2340, 2323, 1784, 2356, 2341, 2079, 2385,
     2343, 2258, 2376, 2361, 2373, 2391, 2395, 2400, 2405, 2408,
     2409, 2412, 2094, 2113, 2414, 2424, 2427, 2432, 2437, 2159,

     2446, 2396, 2459, 2457, 2464, 2442, 2449, 2481, 2478, 2484,
     2184, 2491, 2482, 2489,  652,  651,  650, 2549, 2560, 2571,
     2590, 2616, 2635, 2599, 2661,  648, 2673, 2716, 2692, 2694,
     2702, 2710, 2615, 2714, 2706, 2733, 2747, 2461, 2709, 2237,
     2739, 2757, 2758, 2749, 2750, 2754, 2762, 2752, 2755, 2786,
     2761, 2753, 2782, 2266, 2794, 2324, 2407, 2488, 2533, 2557,
     2801, 2807, 2809, 2603, 2810, 2830, 2816, 2813, 2834, 2838,
     2814, 2822, 2843, 2858, 2800, 2845, 2852, 2854, 2846,  647,
      645, 2916, 2927,  609, 2939, 2982, 2958, 2967, 3027, 3001,
     3072, 3046, 2980, 3060, 3068, 2969, 3071, 3070, 3063, 3072,

     3090, 3065, 2857, 3093, 3101, 3076, 3123, 3112, 3126, 3110,
     2853, 3109, 3137, 3145, 3122, 3151, 2857, 2893, 3030, 3120,
     3118, 3153, 3128, 3164, 3158, 3165, 3172, 3143, 3166, 3170,
     3156, 3161, 3162, 3189, 3194,  608,  602,  597, 3236, 3254,
     3273, 3299, 3318, 3344,  563, 3356, 3399, 3375, 3361, 3386,
     3395, 3391, 3394, 3393, 3298, 3413, 3174, 3411, 3192, 3399,
     3252, 3441, 3444, 3443, 3442, 3233, 3436, 3451, 3241, 3447,
     3440, 3445, 3385, 3435, 3435, 3446, 3448, 3475, 3454, 3488,
     3481, 3478, 3479, 3483, 3503,  560,  559, 3546,  552, 3563,
     3606, 3523, 3651, 3582, 3696, 3625, 3691, 3484, 3688, 3486,

     3585, 3690, 3638, 3542, 3700, 3573, 3687, 3695, 3698, 3689,
     3619, 3727, 3729, 3728, 3739, 3742, 3747, 5322, 5322, 3750,
     3732, 3740, 3764, 3734,  521,  519,  518, 3824, 3677, 3869,
     3810, 3843,  517, 3914, 3957, 3888, 3741, 3917, 3736, 3743,
     3951, 3956, 3747, 3803, 3960, 3949, 3955, 3811, 3974, 3822,
     3989, 3987, 3950, 3994, 3856, 3991, 3988,  516,  515, 3933,
      513, 4054, 4097, 4073, 4142, 4116, 4187, 4161, 3867, 3992,
     3957, 4175,  524, 4095, 3993, 4183, 4187, 4185, 4179, 3996,
     4184, 4181, 4188, 4224,  510,  508,  507, 4284, 4256, 4329,
     4268, 4303,  506, 4374, 4417, 4348, 4369, 4033, 4412, 4421,

     4191, 4432, 4084, 4431, 4076, 4433, 4413, 4420, 4129, 4190,
      505,  504,    0, 4493,  503, 4505, 4548, 4401, 4593, 4524,
     4638, 4567, 4418, 4561, 4220, 4230, 4227, 4633, 4634, 4421,
     4263, 4435, 4271, 4526, 4316,  475,  474,  473,  472, 4694,
     4619, 4739, 4713, 4758,  471, 4784,    0, 4803, 4624, 4630,
     4504, 4543, 4580, 4737, 4787, 4627, 4810, 4655, 4692, 4798,
     4799,  470, 5322,  468,    0, 4845,  433, 4870, 4889, 4915,
     4934,    0, 4631, 4802, 4675, 4744, 4803, 4849, 4894, 4927,
     4939, 4942, 4807, 4800,  417,  415,  414, 5002, 4961, 4974,
      364,    0, 4962, 4808,    0, 4966, 5036, 4848, 4914, 4954,

     4963, 4991,  358,  357,    0, 5049, 5322,    0, 5002,    0,
     5022, 5076, 5059,  355,  353, 5322, 5062, 5023, 5034, 5064,
     5050, 5058,  346,  339,    0, 5055, 5056, 5053, 5322, 5080,
     5070, 5066, 5057,  325,  323, 5063, 5322, 5087, 5082, 5079,
     5114,  314,  309,    0, 5107, 5322, 5115, 5097,  307,  306,
     5322, 5098,  303,  276,    0,  267,  265,  260,  259,    0,
      253,  229, 5322, 5185, 5189, 5193, 5197, 5201, 5205, 5207,
      233, 5209, 5211, 5213, 5215, 5217, 5219, 5221, 5225, 5227,
     5229, 5231, 5233, 5235, 5237, 5239, 5241, 5243, 5245, 5247,
     5249, 5251, 5253, 5255, 5257, 5259, 5261,  231, 5263, 5265,

      230, 5267, 5269,  228,  219, 5271, 5273,  217, 5277, 5281,
     5283,  214,  212, 5287, 5291, 5293, 5295, 5297,  145, 5299,
     5301, 5303,  131, 5305, 5307, 5309,  117, 5311, 5313, 5315,
       80, 5317
    } ;

static yyconst flex_int16_t yy_def[933] =
    {   0,
      863,    1,  864,  864,  865,  865,  863,  863,  863,  863,
      863,  866,  867,  868,  863,  863,   16,  863,  863,  863,
       20,   20,   22,   22,   22,   22,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      863,  863,  863,  863,  863,  863,  866,  863,  867,  868,
      863,  863,  869,  863,  870,   54,  863,  871,  863,  863,
       26,   22,   62,   62,   26,   26,   26,   26,   62,   26,
       26,   62,   26,   26,   26,   26,   26,   26,   62,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      863,  869,  863,  113,  872,  863,  871,  863,  118,   62,
      120,  120,   26,   26,   26,  120,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  863,  169,
      873,  874,  863,  173,  863,  863,  863,  176,  120,  179,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,  863,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  170,  170,
      875,  876,  863,  863,  863,  234,  863,  863,  238,  863,
      240,  179,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,  863,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  863,  877,  878,  863,  863,  296,  863,  298,  863,

      863,  863,  863,  863,  303,   26,   26,   26,   26,   26,
       26,   26,   26,  879,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,  863,
      863,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  880,  881,  863,  863,  863,  863,  863,
      359,  863,  863,  863,  364,  863,  366,   26,   26,   26,
       26,   26,   26,   26,   26,  863,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  863,  863,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  863,  882,  883,  863,  863,  863,
      420,  863,  422,  863,  863,  863,  863,  863,  427,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,  863,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  863,  863,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,  884,
      885,  863,  863,  863,  863,  863,  485,  863,  863,  489,
      863,  491,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,  863,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  863,  863,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  863,  886,  887,  863,  863,
      540,  863,  542,  863,  863,  863,  863,  546,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  863,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  863,  863,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  888,  889,  863,  863,  863,
      863,  590,  863,  593,  863,  595,   26,   26,   26,   26,

       26,   26,   26,   26,   26,  863,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  863,  863,   26,
       26,   26,   26,   26,  863,  890,  891,  863,  628,  863,
      630,  863,  863,  863,  863,  634,   26,   26,   26,   26,
       26,   26,  863,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  892,  893,  863,
      863,  863,  863,  662,  863,  665,  863,  667,   26,   26,
       26,   26,  863,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  863,  894,  895,  863,  688,  863,
      690,  863,  863,  863,  863,  694,   26,   26,   26,  863,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      896,  897,  898,  863,  863,  863,  863,  716,  863,  719,
      863,  721,   26,   26,   26,  863,  863,   26,   26,   26,
       26,   26,   26,   26,   26,  863,  899,  863,  900,  863,
      740,  863,  742,  863,  863,  863,  901,  746,   26,   26,
      863,  863,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  902,  863,  903,  904,  863,  863,  863,  768,  863,
      770,  905,   26,   26,  863,  863,   26,   26,   26,   26,
       26,   26,   26,   26,  863,  906,  907,  863,  788,  863,
      863,  908,   26,  863,  909,   26,  910,   26,   26,   26,

       26,   26,  863,  911,  912,  863,  863,  913,   26,  914,
      863,  915,   26,  916,  917,  863,  863,  863,  863,   26,
       26,   26,  863,  918,  919,  863,  863,  863,  863,   26,
       26,   26,   26,  920,  921,  863,  863,  863,   26,   26,
       26,  863,  922,  923,  863,  863,   26,   26,  924,  925,
      863,   26,  863,  926,  927,  928,  929,  863,  930,  931,
      932,  863,    0,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,

      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863
    } ;

static yyconst flex_int16_t yy_nxt[5398] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   27,   27,   29,   30,   31,   32,   33,   27,
       34,   35,   36,   37,   38,   39,   27,   40,   27,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   27,   27,
       29,   30,   31,   32,   33,   27,   34,   35,   36,   37,
       38,   39,   27,   40,   27,   44,   45,   46,   45,   52,
      863,   61,  743,   53,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   55,   62,   56,   56,   56,   56,   56,

       56,   82,   57,  106,   61,   61,  863,   61,   61,   83,
       61,  121,   86,   44,   45,  122,   61,   78,   58,  857,
       62,   56,   56,   56,   56,   56,   56,   82,   57,  106,
       61,   61,   61,  850,   61,   83,   61,  121,   86,   46,
       45,  122,   61,   78,   58,   61,   61,  835,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   55,   61,   62,
       62,   63,   64,   62,   62,   61,   65,   61,   61,   61,
       66,   61,   67,   61,   61,   61,   61,   61,   61,   68,
       61,   61,   61,   61,   61,   62,   62,   63,   64,   62,
       62,   61,   65,   61,   61,   61,   66,   61,   67,   61,

       61,   61,   61,   61,   61,   68,   61,   61,   61,   61,
       61,   62,   62,   90,  816,   91,  815,  109,   61,  808,
       61,  792,   61,   61,   44,   45,   61,  123,   84,   61,
      787,   79,  772,  739,   85,  117,   61,   62,   62,   90,
       61,   91,   61,  109,   61,   61,   61,   80,   61,   61,
      860,  126,   61,  123,   84,   61,   69,   79,   62,   62,
       85,   92,   61,  125,   61,  130,   61,   70,   61,   61,
       71,   61,   93,   80,  860,   94,   61,  126,   61,  134,
      860,  855,   69,  110,   62,   62,  860,   92,  855,  125,
       61,  130,  137,   70,   87,   61,   71,  855,   93,   61,

       88,   94,   61,   62,   61,   89,   61,   72,  129,  110,
      132,   73,   61,   61,   61,   61,   74,   75,  137,   61,
       87,   76,   61,   77,  844,   61,   88,  855,  844,   62,
      844,   89,   61,   72,  129,  825,  132,   73,   61,   61,
       61,   61,   74,   75,  844,   61,  825,   76,   61,   77,
       61,   61,   61,   61,   61,   61,   61,   61,   61,  863,
      825,   61,   61,   61,   61,   61,   61,  805,   61,  124,
       97,   98,   61,   95,  825,   61,  805,   96,  805,  765,
      107,   81,   99,  100,  108,  747,   61,   61,   61,   61,
       61,   61,   61,   61,   61,  124,   97,   98,   61,   95,

       61,   61,  131,   96,  101,  102,  107,   81,   99,  100,
      108,  139,   61,  127,  103,  133,   61,  135,  150,   61,
      136,  128,  104,   61,   61,   61,   61,   61,  131,   61,
      143,  105,  140,   61,   61,  805,  765,  139,  738,  127,
      103,  133,   61,  135,  150,   61,  136,  128,  104,   61,
       61,   61,   61,   61,  717,   61,  143,  105,  140,   61,
       61,  113,  113,  113,  113,  113,  113,  113,  113,  113,
       55,   61,  114,  114,  114,  114,  114,  114,   61,   57,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  765,
      144,  738,  695,  765,  763,  738,  687,   61,  114,  114,

      114,  114,  114,  114,   61,   57,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  138,  144,  119,  119,  119,
      119,  119,  119,   61,  663,  738,  687,  635,  713,  687,
       61,  627,   61,  700,  591,  149,  687,  627,  547,  116,
      627,  138,  538,  119,  119,  119,  119,  119,  119,  120,
      120,  120,  120,  120,  120,  120,  120,  120,   61,  141,
      120,  120,  120,  120,  120,  120,  145,   61,  146,   61,
       61,   61,  147,  486,   61,  148,   61,   61,  142,   61,
      627,  538,   61,  151,  428,  141,  120,  120,  120,  120,
      120,  120,  145,   61,  146,   61,   61,   61,  147,   61,

       61,  148,   61,   61,  142,   61,  152,  156,   61,  151,
      153,   61,  154,  155,  157,  161,  160,  163,  116,   61,
      162,   61,  164,  538,  158,   61,  180,   61,   61,  417,
      360,  181,  152,  156,   61,   61,  153,   61,  154,  155,
      157,  159,  160,  163,   61,   61,  162,   61,  164,   61,
      158,  166,  180,   61,   61,  165,  167,  181,   61,   61,
       61,   61,   61,  168,   61,   61,  538,  159,  417,  304,
       61,  116,  417,  294,  235,   61,  184,  166,  417,  294,
      177,  165,  167,   61,   61,   61,  116,  294,   61,  168,
       61,   61,  169,  169,  169,  169,  169,  169,  169,  169,

      169,   55,  184,  170,  170,  170,  170,  170,  170,   61,
       57,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      187,   61,  172,  863,  294,  172,  863,  267,  116,  170,
      170,  170,  170,  170,  170,  172,   57,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  187,   61,  174,  174,
      174,  174,  174,  174,  863,  243,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  172,  196,  116,   50,   51,
       48,  111,   60,   61,  174,  174,  174,  174,  174,  174,
      175,  243,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  177,  196,  178,  178,  178,  178,  178,  178,   61,

      230,  230,  230,  230,  230,  230,  230,  230,  230,   59,
       51,   48,  863,   42,   42,  190,  863,  863,   61,  178,
      178,  178,  178,  178,  178,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  183,  186,  179,  179,  179,  179,
      179,  179,  182,  185,   61,   61,   61,   61,   61,   61,
      188,   61,  863,  863,  189,  863,  863,  863,  191,  202,
      183,  186,  179,  179,  179,  179,  179,  179,  182,  185,
       61,   61,   61,   61,   61,   61,  188,   61,   61,  192,
      189,  193,  198,  194,  191,  195,  200,   61,   61,  197,
      201,   61,  199,   61,   61,  863,   61,  863,   61,   61,

       61,  206,   61,  203,   61,  192,   61,  193,  198,  194,
       61,  195,  200,   61,   61,  197,  201,   61,  199,   61,
       61,   61,  204,  205,   61,   61,   61,  207,   61,  203,
      212,  863,   61,  208,  211,   61,   61,  213,  214,   61,
      218,  863,  209,   61,  863,   61,  210,   61,  863,   61,
      215,   61,  216,  207,   61,   61,  212,   61,   61,  208,
      211,   61,  863,  213,  214,   61,  219,   61,  209,   61,
       61,   61,  210,  220,   61,   61,  215,   61,  216,  217,
       61,   61,   61,   61,   61,   61,  221,  223,   61,  222,
      224,  225,  219,   61,  228,   61,   61,  246,  226,  220,

       61,  227,   61,   61,   61,  217,   61,   61,   61,   61,
       61,   61,  221,  223,   61,  222,  224,  225,   61,  863,
      228,   61,  863,  246,  226,  863,  863,  227,   61,   61,
       61,  863,   61,   61,  863,   61,   61,  863,  863,  863,
      863,  863,  863,  863,   61,  229,  229,  229,  229,  229,
      229,  229,  229,  229,   55,  863,  230,  230,  230,  230,
      230,  230,  863,   57,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  230,  230,  230,  230,  230,  230,  863,   57,
      233,  863,  234,  234,  234,  234,  234,  234,  234,  234,

      234,  235,  247,  236,  236,  236,  236,  236,  236,  863,
      863,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      863,  250,  863,  863,  863,  863,  863,  863,   61,  236,
      236,  236,  236,  236,  236,  175,   61,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  177,  250,  239,  239,
      239,  239,  239,  239,   61,  244,  863,  863,  863,  863,
      863,  863,   61,  863,  863,  863,  863,  863,  863,  863,
      863,  260,   61,  245,  239,  239,  239,  239,  239,  239,
      240,  240,  240,  240,  240,  240,  240,  240,  240,   61,
      248,  241,  241,  241,  241,  241,  241,  260,   61,  245,

      863,  863,  863,  863,  863,  863,   61,  863,  863,  863,
      863,  863,  863,  863,  863,   61,  248,  241,  241,  241,
      241,  241,  241,  242,  242,  242,  242,  242,  242,  242,
      242,  242,   61,  251,  242,  242,  242,  242,  242,  242,
      249,  252,   61,   61,  253,  254,   61,  863,  256,  863,
      258,   61,   61,   61,  863,  261,  863,   61,   61,  251,
      242,  242,  242,  242,  242,  242,  249,  252,   61,   61,
      253,  254,   61,  255,  256,  257,  258,   61,   61,   61,
      259,  261,  266,   61,   61,   61,  262,   61,  263,  264,
      265,   61,  268,  272,  863,   61,   61,   61,  270,  255,

       61,  257,   61,  276,  271,  863,  259,  269,  266,   61,
       61,   61,  262,   61,  263,  264,  265,   61,  268,  272,
       61,   61,   61,   61,  270,  273,   61,  275,   61,  276,
      271,  274,  277,  269,   61,   61,   61,   61,  278,  279,
       61,   61,  863,   61,  863,  280,   61,  284,  285,   61,
       61,  273,  283,  275,   61,  281,  287,  274,  277,   61,
       61,   61,  288,   61,  278,  279,   61,   61,   61,   61,
      282,  280,   61,  284,  285,   61,   61,  286,  283,  291,
       61,  281,   61,  289,   61,   61,   61,   61,  288,  290,
       61,  306,   61,   61,   61,   61,  282,  308,   61,   61,

       61,  863,  863,  286,  863,  863,  863,  863,   61,  289,
       61,   61,   61,   61,  863,  290,   61,  306,   61,   61,
      863,   61,  863,  308,   61,   61,   61,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  863,   61,  863,   61,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  233,
       61,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      235,  863,  297,  297,  297,  297,  297,  297,  863,  312,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  297,  297,
      297,  297,  297,  297,  298,  298,  298,  298,  298,  298,

      298,  298,  298,   61,  375,  299,  299,  299,  299,  299,
      299,  300,   61,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  863,  313,  863,  863,  863,  863,  863,   61,
      375,  299,  299,  299,  299,  299,  299,  175,   61,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  177,   61,
      302,  302,  302,  302,  302,  302,  863,   61,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  863,  393,  863,
      863,  863,  863,  863,  863,   61,  302,  302,  302,  302,
      302,  302,  175,   61,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  304,  393,  305,  305,  305,  305,  305,

      305,  863,  321,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  307,  314,   61,  315,  317,   61,  309,  310,
      311,  305,  305,  305,  305,  305,  305,   61,   61,  316,
       61,  322,   61,  319,   61,  320,   61,  323,  307,  314,
       61,  315,  317,   61,  309,  310,  311,   61,  329,   61,
      318,  324,  325,   61,   61,  316,   61,   61,   61,  319,
       61,  320,   61,  323,   61,   61,   61,  328,  326,  340,
      330,  863,  333,   61,  327,   61,  318,  324,  325,  335,
       61,  334,   61,   61,   61,  331,   61,   61,   61,  332,
       61,   61,   61,  328,  326,   61,  330,   61,  333,  336,

      327,  339,  337,   61,   61,  335,   61,  334,   61,   61,
       61,  331,   61,   61,   61,  332,  338,  341,   61,   61,
      342,   61,   61,   61,  344,  336,  343,  339,  337,   61,
       61,  347,   61,  348,   61,   61,   61,  346,  345,  350,
       61,   61,  338,  341,   61,   61,  342,   61,   61,   61,
      344,   61,  343,   61,  349,  351,  394,  347,   61,  348,
       61,  353,   61,  346,  345,  350,   61,   61,  352,   61,
      370,   61,   61,   61,   61,   61,  863,   61,   61,   61,
      349,  863,  394,  863,  863,  863,  863,  353,  381,   61,
      863,   61,  863,  863,  352,   61,  370,   61,   61,  863,

       61,  863,  368,  356,   61,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  381,   61,  233,   61,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  235,  440,  358,
      358,  358,  358,  358,  358,  863,   61,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  863,  380,  863,  863,
      863,  863,  863,  863,  440,  358,  358,  358,  358,  358,
      358,  233,   61,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  360,  369,  361,  361,  361,  361,  361,  361,
      863,   61,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  863,  863,   61,  863,  863,  863,  863,  863,  369,

      361,  361,  361,  361,  361,  361,  175,   61,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  177,  175,   61,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  304,
      863,  365,  365,  365,  365,  365,  365,  863,  863,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  863,  863,
      863,  863,  863,  863,  863,  863,  371,  365,  365,  365,
      365,  365,  365,  366,  366,  366,  366,  366,  366,  366,
      366,  366,   61,  372,  367,  367,  367,  367,  367,  367,
      373,  374,  371,   61,  379,   61,  863,  383,   61,  386,
      396,   61,  387,   61,  863,   61,   61,  863,   61,  372,

      367,  367,  367,  367,  367,  367,  373,  374,  863,   61,
      379,   61,   61,  383,   61,  386,  396,   61,  387,   61,
      382,   61,   61,  376,  376,  384,  376,  376,  376,  376,
      376,  376,  377,   61,  376,  385,   61,  390,   61,  388,
       61,  389,  391,   61,  376,  376,  382,   61,  392,  395,
       61,  384,  397,  403,   61,   61,  398,   61,   61,   61,
       61,  385,   61,  390,  863,  388,   61,  389,  391,   61,
      400,  399,  401,   61,  392,  395,   61,  402,  397,   61,
       61,   61,  398,   61,   61,   61,   61,   61,   61,  404,
      406,  405,  407,   61,  408,   61,  400,  399,  401,   61,

      409,  410,   61,  402,  413,   61,   61,   61,   61,  411,
       61,   61,  863,   61,   61,  412,  406,  405,  407,   61,
      408,   61,   61,   61,   61,   61,  409,  410,   61,  459,
      414,  434,   61,   61,   61,  411,   61,  433,   61,  863,
       61,  412,   61,  863,  863,  863,  863,  863,   61,   61,
       61,  863,  863,  460,  863,  459,  414,  863,  863,  863,
      863,  863,  863,  433,   61,   61,   61,  863,   61,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  233,  460,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  235,
      233,   61,  420,  420,  420,  420,  420,  420,  420,  420,

      420,  360,   61,  421,  421,  421,  421,  421,  421,  863,
      863,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      863,  863,  863,  863,  863,  863,  863,   61,   61,  421,
      421,  421,  421,  421,  421,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  437,   61,  423,  423,  423,  423,
      423,  423,  424,   61,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  863,  503,  863,  863,  448,  863,  863,
      437,   61,  423,  423,  423,  423,  423,  423,  175,  863,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  175,
      503,  425,  425,  425,  425,  425,  425,  425,  425,  425,

      304,   61,  426,  426,  426,  426,  426,  426,  863,   61,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  863,
      863,  863,  863,  863,  863,  863,  863,   61,  426,  426,
      426,  426,  426,  426,  175,   61,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  428,  439,  429,  429,  429,
      429,  429,  429,  863,  436,  429,  429,  429,  429,  429,
      429,  429,  429,  429,   61,  863,   61,   61,  435,   61,
      863,  438,  439,  429,  429,  429,  429,  429,  429,  430,
      436,  441,  431,   61,   61,  443,   61,  447,  432,  863,
       61,  442,   61,   61,  435,   61,  451,  438,  450,   61,

      443,  863,  863,  449,   61,  430,  863,  441,  431,   61,
       61,  443,   61,  447,  432,  444,   61,  442,  452,   61,
      453,  445,  451,  446,  450,   61,  443,  454,   61,  449,
       61,  863,  455,  468,   61,  456,  457,  461,   61,   61,
      458,  444,   61,   61,  452,   61,  453,  445,   61,  446,
       61,   61,   61,  454,   61,   61,  863,   61,  455,  468,
       61,  456,  457,  461,   61,   61,  458,   61,  462,   61,
       61,  463,  466,  464,   61,   61,   61,   61,   61,  465,
       61,   61,  467,   61,  469,   61,  472,  471,  470,   61,
      473,  863,   61,   61,  462,  863,   61,  463,  466,  464,

       61,   61,   61,  863,   61,  465,   61,   61,  467,  501,
      469,   61,  472,  471,  470,   61,  473,  474,   61,  475,
      476,   61,  477,  478,   61,   61,   61,   61,   61,  479,
       61,   61,   61,   61,   61,  501,  863,  863,  863,  863,
      863,  863,  863,  474,  863,  475,  476,   61,  477,  478,
       61,   61,  863,   61,  863,  479,  518,   61,   61,  482,
       61,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      233,  863,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  233,  518,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  360,  863,  484,  484,  484,  484,  484,  484,

      863,  519,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      484,  484,  484,  484,  484,  484,  233,  519,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  486,  496,  487,
      487,  487,  487,  487,  487,  863,   61,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  863,  863,   61,  863,
      863,  863,  863,  863,  496,  487,  487,  487,  487,  487,
      487,  175,   61,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  304,  175,   61,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  428,  863,  490,  490,  490,  490,

      490,  490,  863,  863,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  863,  863,  498,  863,  863,  863,  863,
      863,  493,  490,  490,  490,  490,  490,  490,  491,  491,
      491,  491,  491,  491,  491,  491,  491,   61,  494,  492,
      492,  492,  492,  492,  492,   61,  495,  493,  497,   61,
      863,  863,   61,   61,  863,  502,  863,   61,  863,  863,
      499,  863,  515,   61,  494,  492,  492,  492,  492,  492,
      492,   61,  495,  504,  497,   61,   61,  500,   61,   61,
      505,  502,   61,   61,  507,  506,  499,  508,  509,  510,
       61,  512,   61,   61,  511,   61,   61,   61,   61,  504,

       61,   61,   61,  500,   61,   61,  505,  514,   61,  516,
      507,  506,  513,  508,  509,  510,   61,  512,   61,   61,
      511,   61,   61,   61,   61,   61,   61,   61,  517,   61,
       61,   61,  520,  514,  521,  516,  522,   61,  513,  524,
      523,  525,  863,   61,   61,  529,  863,  863,  526,  530,
       61,   61,   61,   61,  517,   61,   61,   61,  520,   61,
      521,  863,  522,   61,  528,   61,  523,  525,  527,   61,
       61,  529,  533,   61,  526,  530,   61,   61,   61,   61,
      534,   61,   61,   61,  531,   61,   61,  532,   61,   61,
      528,   61,  535,  559,  527,   61,  567,   61,  533,   61,

       61,   61,  863,   61,  863,  863,  534,   61,  863,  863,
      531,  863,   61,  532,   61,   61,  863,  863,  535,  559,
      863,   61,  567,   61,  573,  863,   61,   61,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  233,  863,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  360,  233,
      573,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      486,  863,  541,  541,  541,  541,  541,  541,  863,  863,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  541,  541,
      541,  541,  541,  541,  542,  542,  542,  542,  542,  542,

      542,  542,  542,  549,  552,  543,  543,  543,  543,  543,
      543,  863,   61,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  863,   61,  863,  863,  863,  863,  863,  549,
      552,  543,  543,  543,  543,  543,  543,  175,   61,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  428,   61,
      545,  545,  545,  545,  545,  545,  863,  574,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  863,  863,  863,
      863,  863,  863,  863,  558,  863,  545,  545,  545,  545,
      545,  545,  175,  574,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  547,  550,  548,  548,  548,  548,  548,

      548,  551,  553,   61,  554,  555,   61,  863,   61,  556,
      863,   61,  562,   61,   61,   61,  560,  557,  863,   61,
      550,  548,  548,  548,  548,  548,  548,  551,  553,   61,
      554,  555,   61,   61,   61,  556,   61,   61,  562,   61,
       61,   61,  560,  557,   61,   61,  563,  561,  564,  565,
      566,  568,   61,   61,  570,   61,  575,  571,  576,   61,
      572,   61,   61,   61,  569,   61,   61,  863,  863,   61,
       61,   61,  563,  561,  564,  565,  566,  568,   61,   61,
       61,   61,  575,  571,  576,  579,   61,   61,   61,   61,
      569,   61,   61,  577,   61,   61,   61,   61,  578,   61,

      580,   61,  582,  581,   61,   61,   61,   61,   61,   61,
      583,  579,   61,   61,   61,   61,  584,   61,  606,  577,
       61,  585,   61,  863,  578,   61,  580,   61,  582,  581,
       61,   61,   61,   61,   61,   61,  583,   61,  863,   61,
      863,   61,  584,   61,  606,  863,  863,  585,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  863,   61,  863,
      863,  608,  863,   61,  233,  863,  588,  588,  588,  588,
      588,  588,  588,  588,  588,  486,   61,  589,  589,  589,
      589,  589,  589,  863,   61,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  863,   61,  863,  863,  863,  863,

      863,  863,   61,  589,  589,  589,  589,  589,  589,  233,
       61,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      591,   61,  592,  592,  592,  592,  592,  592,  863,  603,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  863,
      863,   61,  863,  863,  863,  863,  863,  863,  592,  592,
      592,  592,  592,  592,  175,  603,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  428,  175,   61,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  547,  863,  594,
      594,  594,  594,  594,  594,  863,  863,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  863,  863,  863,  863,

      863,  863,  597,  863,   61,  594,  594,  594,  594,  594,
      594,  595,  595,  595,  595,  595,  595,  595,  595,  595,
      602,  618,  596,  596,  596,  596,  596,  596,  597,   61,
       61,  599,  600,  598,   61,  601,   61,   61,   61,  604,
      607,  863,   61,  863,  863,  605,  602,  618,  596,  596,
      596,  596,  596,  596,   61,   61,   61,  599,  600,  598,
       61,  601,   61,   61,   61,  604,  607,  609,   61,  610,
      611,  605,  613,  612,  614,  619,  617,  616,   61,   61,
       61,  615,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,  863,  609,   61,  610,  611,   61,  613,  612,

      614,  619,  617,  616,   61,   61,  620,  615,  622,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,  621,
       61,   61,   61,   61,   61,  623,   61,   61,  624,   61,
      863,   61,  620,  863,  622,  629,  629,  629,  629,  629,
      629,  629,  629,  629,   61,  621,   61,   61,   61,  863,
       61,  623,   61,   61,  624,   61,  233,   61,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  486,  863,  863,
      863,  863,   61,  233,  863,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  591,   61,  629,  629,  629,  629,
      629,  629,  863,  863,  633,  633,  633,  633,  633,  633,

      633,  633,  633,  863,  863,  863,  863,  863,  863,  863,
      643,   61,  629,  629,  629,  629,  629,  629,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  639,   61,  631,
      631,  631,  631,  631,  631,  863,  643,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  863,  863,  863,  863,
      863,  863,  863,  639,   61,  631,  631,  631,  631,  631,
      631,  175,   61,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  547,  641,  633,  633,  633,  633,  633,  633,
      863,   61,  863,  863,  863,  863,  863,  863,   61,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  647,  641,

      633,  633,  633,  633,  633,  633,  175,   61,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  635,  637,  636,
      636,  636,  636,  636,  636,  638,  640,  642,  644,  645,
       61,   61,   61,   61,   61,  646,  863,  863,   61,  863,
      863,   61,  863,   61,  637,  636,  636,  636,  636,  636,
      636,  638,  640,  642,  644,  645,   61,   61,   61,   61,
       61,  646,  650,  648,   61,  649,  651,   61,  652,   61,
       61,   61,   61,  653,  655,   61,  656,   61,  654,   61,
      669,  863,   61,   61,   61,   61,   61,  673,  650,  648,
       61,  649,  651,   61,  652,  657,   61,   61,   61,  653,

      655,   61,  656,   61,  654,   61,  669,   61,   61,   61,
       61,   61,   61,  673,  863,  863,   61,  863,  863,   61,
      863,  657,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  863,  863,   61,  233,  863,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  591,   61,  661,  661,  661,
      661,  661,  661,  175,   61,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  547,   61,  863,  863,  863,  863,
      863,  863,   61,  661,  661,  661,  661,  661,  661,  233,
       61,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      663,   61,  664,  664,  664,  664,  664,  664,  863,   61,

      666,  666,  666,  666,  666,  666,  666,  666,  666,  863,
      697,  863,  863,  863,  863,  863,  863,  863,  664,  664,
      664,  664,  664,  664,  175,   61,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  635,  697,  666,  666,  666,
      666,  666,  666,  233,  863,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  591,  863,  863,  863,  863,  681,
       61,  863,  670,  666,  666,  666,  666,  666,  666,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  671,  672,
      668,  668,  668,  668,  668,  668,   61,  674,  670,  675,
      676,  863,   61,   61,   61,  863,  677,  863,   61,   61,

       61,  678,  702,   61,  671,  672,  668,  668,  668,  668,
      668,  668,  679,  674,  680,  675,  676,   61,   61,   61,
       61,  682,  677,  684,   61,   61,   61,  678,  698,   61,
       61,   61,   61,  683,   61,   61,   61,   61,  679,   61,
      680,  863,  724,   61,  863,  863,  863,  682,  863,  684,
      863,  863,  863,  863,  698,  863,   61,   61,   61,  683,
       61,   61,   61,   61,  233,   61,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  663,   61,  689,  689,  689,
      689,  689,  689,  863,  863,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  863,  863,  863,  863,  863,  863,

      863,  731,   61,  689,  689,  689,  689,  689,  689,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  701,   61,
      691,  691,  691,  691,  691,  691,  863,   61,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  863,   61,  863,
      863,  863,  863,  863,  701,   61,  691,  691,  691,  691,
      691,  691,  175,   61,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  635,   61,  693,  693,  693,  693,  693,
      693,  863,   61,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  693,  693,  693,  693,  693,  693,  175,   61,  694,

      694,  694,  694,  694,  694,  694,  694,  694,  695,  703,
      696,  696,  696,  696,  696,  696,  699,  704,   61,  705,
      706,  707,   61,  708,   61,  863,   61,   61,   61,  709,
       61,   61,  728,   61,   61,  703,  696,  696,  696,  696,
      696,  696,  699,  704,   61,  705,  706,  707,   61,  708,
       61,  710,   61,   61,   61,  709,   61,   61,  728,   61,
       61,  863,  863,   61,  751,  752,  863,   61,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  710,  863,  863,
      718,  718,  718,  718,  718,  718,  718,  718,  718,   61,
      751,  752,  863,   61,  233,  863,  714,  714,  714,  714,

      714,  714,  714,  714,  714,  663,   61,  715,  715,  715,
      715,  715,  715,  175,   61,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  635,  863,  863,  863,  863,  863,
      863,  863,   61,  715,  715,  715,  715,  715,  715,  233,
       61,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      717,  761,  718,  718,  718,  718,  718,  718,  863,   61,
      720,  720,  720,  720,  720,  720,  720,  720,  720,  863,
      863,  863,  863,  863,  863,  863,  863,  761,  718,  718,
      718,  718,  718,  718,  175,   61,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  695,  723,  720,  720,  720,

      720,  720,  720,  863,  863,  863,  863,  863,  863,  863,
      863,  863,   61,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  723,  720,  720,  720,  720,  720,  720,  721,
      721,  721,  721,  721,  721,  721,  721,  721,   61,  725,
      722,  722,  722,  722,  722,  722,  726,  863,  756,  757,
      758,  735,  759,  734,  732,   61,   61,  729,  749,  755,
      733,   61,  727,   61,   61,  725,  722,  722,  722,  722,
      722,  722,  726,  730,   61,   61,   61,  735,   61,  734,
      732,   61,   61,  729,  749,  755,  733,   61,  727,   61,
       61,  863,  863,  863,  863,  863,  863,  863,  863,  730,

       61,   61,   61,  233,   61,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  663,  233,  863,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  717,  775,  741,  741,
      741,  741,  741,  741,  863,  863,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  863,  863,  863,  863,  863,
      863,  863,  760,  775,  741,  741,  741,  741,  741,  741,
      742,  742,  742,  742,  742,  742,  742,  742,  742,   61,
      776,  743,  743,  743,  743,  743,  743,  863,  760,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  863,  750,
      863,  863,  863,  863,  863,   61,  776,  743,  743,  743,

      743,  743,  743,  175,   61,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  695,  750,  745,  745,  745,  745,
      745,  745,  863,   61,  863,  863,  863,  863,  863,  863,
       61,  767,  767,  767,  767,  767,  767,  767,  767,  767,
      863,  863,  745,  745,  745,  745,  745,  745,  175,   61,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  747,
      753,  748,  748,  748,  748,  748,  748,   61,  754,  774,
       61,  773,  863,   61,   61,  781,   61,   61,  863,  863,
      863,  863,  863,  863,  863,  863,  753,  748,  748,  748,
      748,  748,  748,   61,  754,  774,   61,  773,   61,   61,

       61,  863,   61,   61,  233,  782,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  717,  794,  767,  767,  767,
      767,  767,  767,  863,   61,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  863,   61,  863,  863,  863,  863,
      863,  863,  794,  767,  767,  767,  767,  767,  767,  233,
      863,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      777,   61,  769,  769,  769,  769,  769,  769,  175,  795,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  695,
       61,  863,  863,  863,  863,  863,  777,  863,  769,  769,
      769,  769,  769,  769,  175,  795,  770,  770,  770,  770,

      770,  770,  770,  770,  770,  747,   61,  771,  771,  771,
      771,  771,  771,  863,  778,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  779,  783,  784,  780,  793,  863,
       61,  863,  863,  771,  771,  771,  771,  771,  771,  863,
      778,   61,   61,   61,  796,   61,   61,  802,  863,  810,
       61,  783,  784,   61,  793,  233,   61,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  717,   61,   61,   61,
      796,   61,   61,  802,  797,  810,   61,  863,  863,   61,
      233,  863,  788,  788,  788,  788,  788,  788,  788,  788,
      788,   61,   61,  789,  789,  789,  789,  789,  789,  863,

      797,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      798,  863,  863,  863,  863,  863,  863,   61,   61,  789,
      789,  789,  789,  789,  789,  175,  863,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  747,   61,  791,  791,
      791,  791,  791,  791,  863,  799,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  800,  801,   61,  863,  863,
      863,  863,  863,   61,  791,  791,  791,  791,  791,  791,
       61,  863,  863,  807,  807,  807,  807,  807,  807,  807,
      807,  807,   61,   61,  175,   61,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  747,   61,   61,  809,  863,

      863,  863,  863,  863,  863,   61,   61,  812,   61,   61,
      863,   61,  233,  863,  806,  806,  806,  806,  806,  806,
      806,  806,  806,   61,  809,  807,  807,  807,  807,  807,
      807,   61,   61,  812,   61,   61,  811,  811,  863,  811,
      811,  811,  811,  811,  811,   61,  828,  811,  818,  819,
      863,  807,  807,  807,  807,  807,  807,  811,  811,  233,
       61,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      829,   61,  828,  832,  818,  819,  817,  817,  836,  817,
      817,  817,  817,  817,  817,  821,  822,  817,  826,  827,
      830,  831,  837,   61,  833,  838,  829,  817,  817,  832,

       61,   61,   61,  839,  836,  845,  840,   61,  841,   61,
      846,  821,  822,   61,  826,  827,  830,  831,  837,   61,
      833,  838,   61,   61,  847,   61,   61,   61,   61,  839,
      851,  845,  840,   61,  841,   61,  846,  848,  852,   61,
       61,   61,  863,  863,  863,  863,  863,  863,   61,   61,
      847,   61,  863,  863,  863,  863,  851,   61,   61,  863,
      863,  863,  863,  848,  852,  863,   61,   61,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,   61,   61,   41,   41,   41,   41,   43,
       43,   43,   43,   47,   47,   47,   47,   49,  863,   49,

       49,   50,   50,   50,   50,  112,  863,  112,  112,  115,
      115,  171,  171,  231,  231,  232,  232,  292,  292,  293,
      293,  354,  354,  355,  355,  378,  863,  378,  378,  415,
      415,  416,  416,  480,  480,  481,  481,  536,  536,  537,
      537,  586,  586,  587,  587,  625,  625,  626,  626,  658,
      658,  659,  659,  685,  685,  686,  686,  711,  711,  712,
      712,  736,  736,  737,  737,  762,  762,  764,  764,  785,
      785,  786,  786,  803,  803,  804,  804,  811,  863,  811,
      811,  813,  863,  813,  813,  814,  814,  817,  863,  817,
      817,  820,  863,  820,  820,  823,  823,  824,  824,  834,

      834,  842,  842,  843,  843,  849,  849,  853,  853,  854,
      854,  856,  856,  858,  858,  859,  859,  861,  861,  862,
      862,    7,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863

    } ;

static yyconst flex_int16_t yy_chk[5398] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   10,   10,   11,   11,   15,
       17,   27,  931,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   24,   16,   16,   16,   16,   16,

       16,   28,   16,   37,   61,   24,   17,   27,   24,   28,
       37,   63,   30,   44,   44,   64,   28,   24,   16,  927,
       24,   16,   16,   16,   16,   16,   16,   28,   16,   37,
       61,   24,   30,  923,   24,   28,   37,   63,   30,   45,
       45,   64,   28,   24,   16,   20,   20,  919,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   30,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   21,   21,   32,  913,   32,  912,   39,   32,  908,
       21,  905,   21,   39,   46,   46,   65,   66,   29,   21,
      904,   25,  901,  898,   29,  871,   66,   21,   21,   32,
       29,   32,   25,   39,   32,   25,   21,   25,   21,   39,
      862,   69,   65,   66,   29,   21,   22,   25,   22,   22,
       29,   33,   66,   68,   68,   72,   29,   22,   25,   22,
       22,   25,   33,   25,  861,   33,   22,   69,   33,   76,
      859,  858,   22,   40,   22,   22,  857,   33,  856,   68,
       68,   72,   79,   22,   31,   22,   22,  854,   33,   40,

       31,   33,   22,   23,   33,   31,   31,   23,   71,   40,
       74,   23,   74,   76,   23,   71,   23,   23,   79,   88,
       31,   23,   91,   23,  853,   40,   31,  850,  849,   23,
      843,   31,   31,   23,   71,  842,   74,   23,   74,   76,
       23,   71,   23,   23,  835,   88,  834,   23,   91,   23,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      824,   26,   26,   26,   26,   26,   26,  823,   26,   67,
       35,   35,   26,   34,  815,   26,  814,   34,  804,  803,
       38,   26,   35,   35,   38,  791,   67,   26,   26,   26,
       26,   26,   26,   34,   26,   67,   35,   35,   26,   34,

       38,   26,   73,   34,   36,   36,   38,   26,   35,   35,
       38,   81,   67,   70,   36,   75,   73,   77,   93,   34,
       78,   70,   36,   75,   93,   78,   38,   81,   73,   77,
       84,   36,   82,   70,   36,  787,  786,   81,  785,   70,
       36,   75,   73,   77,   93,   84,   78,   70,   36,   75,
       93,   78,   82,   81,  767,   77,   84,   36,   82,   70,
       36,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   84,   54,   54,   54,   54,   54,   54,   82,   54,
       56,   56,   56,   56,   56,   56,   56,   56,   56,  764,
       85,  762,  745,  739,  738,  737,  736,  101,   54,   54,

       54,   54,   54,   54,   85,   54,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   80,   85,   59,   59,   59,
       59,   59,   59,  101,  715,  712,  711,  693,  687,  686,
       85,  685,   80,  673,  661,   92,  659,  658,  633,  627,
      626,   80,  625,   59,   59,   59,   59,   59,   59,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   80,   83,
       62,   62,   62,   62,   62,   62,   86,   86,   87,   92,
       87,   62,   89,  589,   62,   90,   90,   89,   83,   83,
      587,  586,  102,   94,  545,   83,   62,   62,   62,   62,
       62,   62,   86,   86,   87,   92,   87,   62,   89,   94,

       62,   90,   90,   89,   83,   83,   95,   97,  102,   94,
       96,   95,   96,   96,   98,  103,  100,  105,  538,   98,
      104,   96,  106,  537,   99,   94,  121,   97,  104,  536,
      484,  122,   95,   97,  106,  100,   96,   95,   96,   96,
       98,   99,  100,  105,   99,   98,  104,   96,  106,  103,
       99,  108,  121,   97,  104,  107,  109,  122,  108,  109,
      106,  100,  124,  110,  107,  110,  481,   99,  480,  426,
       99,  417,  416,  415,  358,  103,  126,  108,  355,  354,
      302,  107,  109,  168,  108,  109,  294,  293,  124,  110,
      107,  110,  113,  113,  113,  113,  113,  113,  113,  113,

      113,  113,  126,  113,  113,  113,  113,  113,  113,  168,
      113,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      129,  129,  292,  242,  232,  231,  230,  204,  172,  113,
      113,  113,  113,  113,  113,  171,  113,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  129,  129,  116,  116,
      116,  116,  116,  116,  119,  180,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  115,  138,   55,   51,   50,
       47,   42,   19,  138,  116,  116,  116,  116,  116,  116,
      118,  180,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  138,  118,  118,  118,  118,  118,  118,  138,

      170,  170,  170,  170,  170,  170,  170,  170,  170,   18,
       14,   12,    7,    4,    3,  132,    0,    0,  188,  118,
      118,  118,  118,  118,  118,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  125,  128,  120,  120,  120,  120,
      120,  120,  123,  127,  188,  127,  130,  125,  123,  132,
      130,  128,    0,    0,  131,    0,    0,    0,  133,  144,
      125,  128,  120,  120,  120,  120,  120,  120,  123,  127,
      131,  127,  130,  125,  123,  132,  130,  128,  133,  134,
      131,  135,  140,  136,  133,  137,  142,  137,  134,  139,
      143,  139,  141,  144,  193,    0,  131,    0,  135,  136,

      140,  147,  142,  145,  133,  134,  143,  135,  140,  136,
      141,  137,  142,  137,  134,  139,  143,  139,  141,  144,
      193,  145,  146,  146,  135,  136,  140,  148,  142,  145,
      151,    0,  143,  149,  150,  147,  141,  152,  153,  148,
      157,    0,  149,  150,    0,  151,  149,  145,    0,  152,
      154,  149,  155,  148,  153,  196,  151,  146,  155,  149,
      150,  147,    0,  152,  153,  148,  158,  158,  149,  150,
      154,  151,  149,  159,  157,  152,  154,  149,  155,  156,
      153,  196,  156,  146,  155,  159,  160,  162,  160,  161,
      163,  164,  158,  158,  167,  182,  154,  182,  165,  159,

      157,  166,  211,  162,  167,  156,  163,  161,  156,  164,
      165,  159,  160,  162,  160,  161,  163,  164,  166,    0,
      167,  182,    0,  182,  165,    0,    0,  166,  211,  162,
      167,    0,  163,  161,    0,  164,  165,    0,    0,    0,
        0,    0,    0,    0,  166,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,    0,  169,  169,  169,  169,
      169,  169,  174,  169,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  169,  169,  169,  169,  169,  169,    0,  169,
      173,    0,  173,  173,  173,  173,  173,  173,  173,  173,

      173,  173,  183,  173,  173,  173,  173,  173,  173,  178,
        0,  178,  178,  178,  178,  178,  178,  178,  178,  178,
        0,  186,    0,    0,    0,    0,    0,    0,  186,  173,
      173,  173,  173,  173,  173,  176,  183,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  186,  176,  176,
      176,  176,  176,  176,  186,  181,    0,    0,    0,    0,
        0,    0,  183,    0,    0,    0,    0,    0,    0,    0,
        0,  199,  199,  181,  176,  176,  176,  176,  176,  176,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  181,
      184,  177,  177,  177,  177,  177,  177,  199,  199,  181,

        0,    0,    0,    0,    0,    0,  184,    0,    0,    0,
        0,    0,    0,    0,    0,  181,  184,  177,  177,  177,
      177,  177,  177,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  184,  187,  179,  179,  179,  179,  179,  179,
      185,  189,  185,  189,  190,  191,  190,    0,  194,    0,
      197,  194,  197,  187,    0,  200,    0,  191,  200,  187,
      179,  179,  179,  179,  179,  179,  185,  189,  185,  189,
      190,  191,  190,  192,  194,  195,  197,  194,  197,  187,
      198,  200,  203,  191,  200,  192,  201,  201,  202,  202,
      202,  195,  205,  208,    0,  203,  198,  202,  206,  192,

      206,  195,  208,  213,  207,    0,  198,  205,  203,  205,
      207,  192,  201,  201,  202,  202,  202,  195,  205,  208,
      213,  203,  198,  202,  206,  209,  206,  212,  208,  213,
      207,  210,  214,  205,  215,  205,  207,  210,  215,  216,
      216,  209,    0,  212,    0,  217,  213,  220,  221,  221,
      214,  209,  219,  212,  220,  218,  223,  210,  214,  224,
      215,  217,  225,  210,  215,  216,  216,  209,  219,  212,
      218,  217,  218,  220,  221,  221,  214,  222,  219,  228,
      220,  218,  225,  226,  246,  224,  222,  217,  225,  227,
      223,  243,  243,  257,  219,  227,  218,  245,  218,  245,

      226,    0,    0,  222,    0,    0,    0,    0,  225,  226,
      246,  278,  222,  228,    0,  227,  223,  243,  243,  257,
        0,  227,    0,  245,  280,  245,  226,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  278,    0,  228,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  234,
      280,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,    0,  234,  234,  234,  234,  234,  234,  236,  248,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  234,  234,
      234,  234,  234,  234,  235,  235,  235,  235,  235,  235,

      235,  235,  235,  248,  313,  235,  235,  235,  235,  235,
      235,  237,  313,  237,  237,  237,  237,  237,  237,  237,
      237,  237,    0,  249,    0,    0,    0,    0,    0,  248,
      313,  235,  235,  235,  235,  235,  235,  238,  313,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  318,
      238,  238,  238,  238,  238,  238,  239,  249,  239,  239,
      239,  239,  239,  239,  239,  239,  239,    0,  330,    0,
        0,    0,    0,    0,    0,  318,  238,  238,  238,  238,
      238,  238,  240,  249,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  330,  240,  240,  240,  240,  240,

      240,  241,  258,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  244,  250,  250,  251,  253,  244,  247,  247,
      247,  240,  240,  240,  240,  240,  240,  251,  247,  252,
      252,  259,  253,  255,  255,  256,  258,  260,  244,  250,
      250,  251,  253,  244,  247,  247,  247,  256,  266,  260,
      254,  261,  262,  251,  247,  252,  252,  254,  253,  255,
      255,  256,  258,  260,  262,  259,  261,  265,  263,  276,
      267,    0,  269,  256,  264,  260,  254,  261,  262,  271,
      264,  270,  266,  254,  263,  267,  271,  265,  269,  268,
      262,  259,  261,  265,  263,  268,  267,  270,  269,  272,

      264,  275,  273,  276,  275,  271,  264,  270,  266,  273,
      263,  267,  271,  265,  269,  268,  274,  277,  277,  272,
      279,  268,  274,  270,  282,  272,  281,  275,  273,  276,
      275,  285,  281,  286,  285,  273,  279,  284,  283,  288,
      282,  288,  274,  277,  277,  272,  279,  283,  274,  287,
      282,  284,  281,  286,  287,  289,  331,  285,  281,  286,
      285,  291,  279,  284,  283,  288,  282,  288,  290,  335,
      308,  290,  308,  283,  346,  287,    0,  284,  291,  286,
      287,    0,  331,    0,    0,    0,    0,  291,  317,  289,
        0,  317,    0,    0,  290,  335,  308,  290,  308,    0,

      346,    0,  306,  295,  291,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  317,  289,  296,  317,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  376,  296,
      296,  296,  296,  296,  296,  297,  306,  297,  297,  297,
      297,  297,  297,  297,  297,  297,    0,  316,    0,    0,
        0,    0,    0,    0,  376,  296,  296,  296,  296,  296,
      296,  298,  306,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  307,  298,  298,  298,  298,  298,  298,
      299,  316,  299,  299,  299,  299,  299,  299,  299,  299,
      299,    0,    0,  307,    0,    0,    0,    0,    0,  307,

      298,  298,  298,  298,  298,  298,  301,  316,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  303,  307,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
        0,  303,  303,  303,  303,  303,  303,  305,    0,  305,
      305,  305,  305,  305,  305,  305,  305,  305,    0,    0,
        0,    0,    0,    0,    0,    0,  309,  303,  303,  303,
      303,  303,  303,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  309,  310,  304,  304,  304,  304,  304,  304,
      311,  312,  309,  312,  315,  310,    0,  320,  323,  323,
      333,  315,  324,  333,    0,  320,  311,    0,  309,  310,

      304,  304,  304,  304,  304,  304,  311,  312,    0,  312,
      315,  310,  324,  320,  323,  323,  333,  315,  324,  333,
      319,  320,  311,  314,  314,  321,  314,  314,  314,  314,
      314,  314,  314,  321,  314,  322,  319,  327,  324,  325,
      326,  326,  328,  322,  314,  314,  319,  325,  329,  332,
      328,  321,  334,  341,  327,  334,  336,  332,  336,  321,
      329,  322,  319,  327,    0,  325,  326,  326,  328,  322,
      338,  337,  339,  325,  329,  332,  328,  340,  334,  338,
      327,  334,  336,  332,  336,  337,  329,  341,  339,  342,
      344,  343,  345,  344,  347,  340,  338,  337,  339,  343,

      348,  349,  348,  340,  352,  338,  347,  349,  345,  350,
      350,  337,    0,  341,  339,  351,  344,  343,  345,  344,
      347,  340,  379,  342,  351,  343,  348,  349,  348,  393,
      353,  370,  347,  349,  345,  350,  350,  369,  352,    0,
      369,  351,  353,    0,    0,    0,    0,    0,  379,  342,
      351,    0,    0,  394,    0,  393,  353,    0,    0,    0,
        0,    0,    0,  369,  352,  370,  369,    0,  353,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  357,  394,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      359,  370,  359,  359,  359,  359,  359,  359,  359,  359,

      359,  359,  400,  359,  359,  359,  359,  359,  359,  361,
        0,  361,  361,  361,  361,  361,  361,  361,  361,  361,
        0,    0,    0,    0,    0,    0,    0,  411,  400,  359,
      359,  359,  359,  359,  359,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  373,  373,  360,  360,  360,  360,
      360,  360,  362,  411,  362,  362,  362,  362,  362,  362,
      362,  362,  362,    0,  440,    0,    0,  382,    0,    0,
      373,  373,  360,  360,  360,  360,  360,  360,  363,    0,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  364,
      440,  364,  364,  364,  364,  364,  364,  364,  364,  364,

      364,  382,  364,  364,  364,  364,  364,  364,  365,  454,
      365,  365,  365,  365,  365,  365,  365,  365,  365,    0,
        0,    0,    0,    0,    0,    0,    0,  382,  364,  364,
      364,  364,  364,  364,  366,  454,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  375,  366,  366,  366,
      366,  366,  366,  367,  372,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  371,    0,  375,  456,  371,  372,
        0,  374,  375,  366,  366,  366,  366,  366,  366,  368,
      372,  377,  368,  374,  378,  378,  381,  381,  368,    0,
      371,  377,  375,  456,  371,  372,  385,  374,  384,  377,

      377,    0,    0,  383,  384,  368,    0,  377,  368,  374,
      378,  378,  381,  381,  368,  380,  385,  377,  386,  383,
      387,  380,  385,  380,  384,  377,  377,  388,  380,  383,
      384,    0,  389,  402,  386,  390,  391,  395,  387,  402,
      392,  380,  385,  388,  386,  383,  387,  380,  389,  380,
      457,  390,  391,  388,  380,  392,    0,  395,  389,  402,
      386,  390,  391,  395,  387,  402,  392,  396,  396,  388,
      397,  397,  401,  398,  389,  398,  457,  390,  391,  399,
      399,  392,  401,  395,  403,  406,  406,  405,  404,  401,
      407,    0,  407,  396,  396,    0,  397,  397,  401,  398,

      404,  398,  403,    0,  438,  399,  399,  405,  401,  438,
      403,  406,  406,  405,  404,  401,  407,  408,  407,  409,
      410,  409,  412,  413,  408,  413,  404,  410,  403,  414,
      438,  458,  414,  405,  412,  438,    0,    0,    0,    0,
        0,    0,    0,  408,    0,  409,  410,  409,  412,  413,
      408,  413,    0,  410,    0,  414,  459,  458,  414,  418,
      412,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      419,    0,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  420,  459,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,    0,  420,  420,  420,  420,  420,  420,

      421,  460,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      420,  420,  420,  420,  420,  420,  422,  460,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  433,  422,
      422,  422,  422,  422,  422,  423,  464,  423,  423,  423,
      423,  423,  423,  423,  423,  423,    0,    0,  433,    0,
        0,    0,    0,    0,  433,  422,  422,  422,  422,  422,
      422,  425,  464,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  427,  433,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,    0,  427,  427,  427,  427,

      427,  427,  429,    0,  429,  429,  429,  429,  429,  429,
      429,  429,  429,    0,    0,  435,    0,    0,    0,    0,
        0,  430,  427,  427,  427,  427,  427,  427,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  430,  431,  428,
      428,  428,  428,  428,  428,  431,  432,  430,  434,  435,
        0,    0,  439,  432,    0,  439,    0,  434,    0,    0,
      436,    0,  452,  430,  431,  428,  428,  428,  428,  428,
      428,  431,  432,  441,  434,  435,  436,  437,  439,  432,
      442,  439,  441,  434,  444,  443,  436,  445,  446,  447,
      437,  449,  444,  445,  448,  448,  452,  446,  449,  441,

      442,  443,  436,  437,  451,  447,  442,  451,  441,  453,
      444,  443,  450,  445,  446,  447,  437,  449,  444,  445,
      448,  448,  452,  446,  449,  453,  442,  443,  455,  450,
      451,  447,  461,  451,  462,  453,  463,  455,  450,  466,
      465,  467,    0,  475,  461,  471,    0,    0,  468,  472,
      462,  453,  463,  465,  455,  450,  468,  471,  461,  467,
      462,    0,  463,  455,  470,  472,  465,  467,  469,  475,
      461,  471,  476,  466,  468,  472,  462,  469,  463,  465,
      477,  470,  468,  471,  473,  467,  473,  474,  476,  479,
      470,  472,  478,  503,  469,  477,  511,  478,  476,  466,

      517,  474,    0,  469,    0,    0,  477,  470,    0,    0,
      473,    0,  473,  474,  476,  479,    0,    0,  478,  503,
        0,  477,  511,  478,  518,    0,  517,  474,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  483,    0,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  485,
      518,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,    0,  485,  485,  485,  485,  485,  485,  487,    0,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  485,  485,
      485,  485,  485,  485,  486,  486,  486,  486,  486,  486,

      486,  486,  486,  493,  496,  486,  486,  486,  486,  486,
      486,  490,  496,  490,  490,  490,  490,  490,  490,  490,
      490,  490,    0,  493,    0,    0,    0,    0,    0,  493,
      496,  486,  486,  486,  486,  486,  486,  489,  496,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  493,
      489,  489,  489,  489,  489,  489,  492,  519,  492,  492,
      492,  492,  492,  492,  492,  492,  492,    0,    0,    0,
        0,    0,    0,    0,  502,    0,  489,  489,  489,  489,
      489,  489,  491,  519,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  494,  491,  491,  491,  491,  491,

      491,  495,  497,  494,  498,  499,  499,    0,  502,  500,
        0,  495,  506,  498,  497,  500,  504,  501,    0,  506,
      494,  491,  491,  491,  491,  491,  491,  495,  497,  494,
      498,  499,  499,  501,  502,  500,  504,  495,  506,  498,
      497,  500,  504,  501,  505,  506,  507,  505,  508,  509,
      510,  512,  512,  510,  514,  508,  520,  515,  521,  501,
      516,  521,  504,  520,  513,  515,  507,    0,    0,  509,
      505,  523,  507,  505,  508,  509,  510,  512,  512,  510,
      513,  508,  520,  515,  521,  525,  528,  521,  514,  520,
      513,  515,  507,  522,  516,  509,  522,  523,  524,  531,

      526,  525,  529,  527,  532,  533,  513,  524,  526,  529,
      530,  525,  528,  530,  514,  527,  534,  557,  559,  522,
      516,  535,  522,    0,  524,  531,  526,  525,  529,  527,
      532,  533,  534,  524,  526,  529,  530,  535,    0,  530,
        0,  527,  534,  557,  559,    0,    0,  535,  539,  539,
      539,  539,  539,  539,  539,  539,  539,    0,  534,    0,
        0,  561,    0,  535,  540,    0,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  566,  540,  540,  540,
      540,  540,  540,  541,  569,  541,  541,  541,  541,  541,
      541,  541,  541,  541,    0,  561,    0,    0,    0,    0,

        0,    0,  566,  540,  540,  540,  540,  540,  540,  542,
      569,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  561,  542,  542,  542,  542,  542,  542,  543,  555,
      543,  543,  543,  543,  543,  543,  543,  543,  543,    0,
        0,  555,    0,    0,    0,    0,    0,    0,  542,  542,
      542,  542,  542,  542,  544,  555,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  546,  555,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,    0,  546,
      546,  546,  546,  546,  546,  548,    0,  548,  548,  548,
      548,  548,  548,  548,  548,  548,    0,    0,    0,    0,

        0,    0,  549,    0,  549,  546,  546,  546,  546,  546,
      546,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      554,  573,  547,  547,  547,  547,  547,  547,  549,  550,
      549,  551,  552,  550,  552,  553,  554,  553,  551,  556,
      560,    0,  560,    0,    0,  558,  554,  573,  547,  547,
      547,  547,  547,  547,  558,  550,  556,  551,  552,  550,
      552,  553,  554,  553,  551,  556,  560,  562,  560,  563,
      564,  558,  567,  565,  568,  574,  572,  571,  575,  567,
      558,  570,  556,  571,  562,  565,  564,  563,  572,  576,
      570,  577,    0,  562,  568,  563,  564,  579,  567,  565,

      568,  574,  572,  571,  575,  567,  578,  570,  581,  571,
      562,  565,  564,  563,  572,  576,  570,  577,  578,  580,
      568,  582,  583,  579,  581,  584,  584,  598,  585,  600,
        0,  580,  578,  592,  581,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  578,  580,  585,  582,  583,    0,
      581,  584,  584,  598,  585,  600,  588,  580,  588,  588,
      588,  588,  588,  588,  588,  588,  588,  588,    0,    0,
        0,    0,  585,  590,    0,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  604,  590,  590,  590,  590,
      590,  590,  594,    0,  594,  594,  594,  594,  594,  594,

      594,  594,  594,    0,    0,    0,    0,    0,    0,    0,
      606,  604,  590,  590,  590,  590,  590,  590,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  601,  601,  591,
      591,  591,  591,  591,  591,  596,  606,  596,  596,  596,
      596,  596,  596,  596,  596,  596,    0,    0,    0,    0,
        0,    0,    0,  601,  601,  591,  591,  591,  591,  591,
      591,  593,  611,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  603,  593,  593,  593,  593,  593,  593,
        0,  603,    0,    0,    0,    0,    0,  629,  611,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  610,  603,

      593,  593,  593,  593,  593,  593,  595,  603,  595,  595,
      595,  595,  595,  595,  595,  595,  595,  595,  597,  595,
      595,  595,  595,  595,  595,  599,  602,  605,  607,  608,
      607,  599,  610,  602,  597,  609,    0,    0,  608,    0,
        0,  609,    0,  605,  597,  595,  595,  595,  595,  595,
      595,  599,  602,  605,  607,  608,  607,  599,  610,  602,
      597,  609,  614,  612,  608,  613,  615,  609,  616,  605,
      612,  614,  613,  617,  621,  621,  622,  624,  620,  639,
      637,    0,  615,  622,  637,  616,  640,  643,  614,  612,
      617,  613,  615,  620,  616,  623,  612,  614,  613,  617,

      621,  621,  622,  624,  620,  639,  637,  623,  615,  622,
      637,  616,  640,  643,    0,    0,  617,    0,    0,  620,
      631,  623,  631,  631,  631,  631,  631,  631,  631,  631,
      631,    0,    0,  623,  628,    0,  628,  628,  628,  628,
      628,  628,  628,  628,  628,  628,  644,  628,  628,  628,
      628,  628,  628,  632,  648,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  650,    0,    0,    0,    0,
        0,    0,  644,  628,  628,  628,  628,  628,  628,  630,
      648,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  650,  630,  630,  630,  630,  630,  630,  636,  655,

      636,  636,  636,  636,  636,  636,  636,  636,  636,    0,
      669,    0,    0,    0,    0,    0,    0,    0,  630,  630,
      630,  630,  630,  630,  634,  655,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  669,  634,  634,  634,
      634,  634,  634,  660,    0,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,    0,    0,    0,    0,  653,
      638,    0,  638,  634,  634,  634,  634,  634,  634,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  641,  642,
      635,  635,  635,  635,  635,  635,  638,  645,  638,  646,
      647,    0,  646,  653,  641,    0,  647,    0,  647,  642,

      671,  649,  675,  645,  641,  642,  635,  635,  635,  635,
      635,  635,  651,  645,  652,  646,  647,  649,  646,  653,
      641,  654,  647,  657,  647,  642,  671,  649,  670,  645,
      652,  657,  651,  656,  656,  670,  675,  654,  651,  680,
      652,    0,  698,  649,    0,    0,    0,  654,    0,  657,
        0,    0,    0,    0,  670,    0,  652,  657,  651,  656,
      656,  670,  675,  654,  662,  680,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  698,  662,  662,  662,
      662,  662,  662,  664,    0,  664,  664,  664,  664,  664,
      664,  664,  664,  664,    0,    0,    0,    0,    0,    0,

        0,  703,  698,  662,  662,  662,  662,  662,  662,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  674,  705,
      663,  663,  663,  663,  663,  663,  666,  703,  666,  666,
      666,  666,  666,  666,  666,  666,  666,    0,  674,    0,
        0,    0,    0,    0,  674,  705,  663,  663,  663,  663,
      663,  663,  665,  703,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  674,  665,  665,  665,  665,  665,
      665,  668,  709,  668,  668,  668,  668,  668,  668,  668,
      668,  668,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  665,  665,  665,  665,  665,  665,  667,  709,  667,

      667,  667,  667,  667,  667,  667,  667,  667,  667,  676,
      667,  667,  667,  667,  667,  667,  672,  677,  672,  678,
      679,  681,  679,  682,  682,    0,  676,  681,  678,  683,
      677,  683,  701,  710,  701,  676,  667,  667,  667,  667,
      667,  667,  672,  677,  672,  678,  679,  681,  679,  682,
      682,  684,  676,  681,  678,  683,  677,  683,  701,  710,
      701,    0,    0,  725,  726,  727,  689,  684,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  684,  691,    0,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  725,
      726,  727,    0,  684,  688,    0,  688,  688,  688,  688,

      688,  688,  688,  688,  688,  688,  731,  688,  688,  688,
      688,  688,  688,  692,  733,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,    0,    0,    0,    0,    0,
        0,    0,  731,  688,  688,  688,  688,  688,  688,  690,
      733,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  735,  690,  690,  690,  690,  690,  690,  696,  735,
      696,  696,  696,  696,  696,  696,  696,  696,  696,    0,
        0,    0,    0,    0,    0,    0,    0,  735,  690,  690,
      690,  690,  690,  690,  694,  735,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  697,  694,  694,  694,

      694,  694,  694,    0,    0,    0,    0,    0,    0,    0,
        0,  718,  697,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  697,  694,  694,  694,  694,  694,  694,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  697,  699,
      695,  695,  695,  695,  695,  695,  700,    0,  732,  732,
      732,  708,  732,  707,  704,  699,  707,  702,  723,  730,
      706,  723,  700,  708,  730,  699,  695,  695,  695,  695,
      695,  695,  700,  702,  704,  702,  706,  708,  732,  707,
      704,  699,  707,  702,  723,  730,  706,  723,  700,  708,
      730,    0,    0,    0,    0,    0,    0,    0,    0,  702,

      704,  702,  706,  714,  732,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  716,    0,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  751,  716,  716,
      716,  716,  716,  716,  720,    0,  720,  720,  720,  720,
      720,  720,  720,  720,  720,    0,    0,    0,    0,    0,
        0,    0,  734,  751,  716,  716,  716,  716,  716,  716,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  734,
      752,  717,  717,  717,  717,  717,  717,  722,  734,  722,
      722,  722,  722,  722,  722,  722,  722,  722,    0,  724,
        0,    0,    0,    0,    0,  734,  752,  717,  717,  717,

      717,  717,  717,  719,  724,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  724,  719,  719,  719,  719,
      719,  719,    0,  753,    0,    0,    0,    0,    0,  741,
      724,  741,  741,  741,  741,  741,  741,  741,  741,  741,
        0,    0,  719,  719,  719,  719,  719,  719,  721,  753,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      728,  721,  721,  721,  721,  721,  721,  749,  729,  750,
      756,  749,    0,  750,  773,  758,  728,  729,    0,    0,
        0,    0,    0,    0,    0,    0,  728,  721,  721,  721,
      721,  721,  721,  749,  729,  750,  756,  749,  758,  750,

      773,    0,  728,  729,  740,  759,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  775,  740,  740,  740,
      740,  740,  740,  743,  758,  743,  743,  743,  743,  743,
      743,  743,  743,  743,    0,  759,    0,    0,    0,    0,
        0,    0,  775,  740,  740,  740,  740,  740,  740,  742,
        0,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      754,  759,  742,  742,  742,  742,  742,  742,  744,  776,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      754,    0,    0,    0,    0,    0,  754,    0,  742,  742,
      742,  742,  742,  742,  746,  776,  746,  746,  746,  746,

      746,  746,  746,  746,  746,  746,  754,  746,  746,  746,
      746,  746,  746,  748,  755,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  757,  760,  761,  757,  774,    0,
      755,    0,    0,  746,  746,  746,  746,  746,  746,    0,
      755,  760,  761,  784,  777,  774,  777,  783,    0,  794,
      783,  760,  761,  757,  774,  766,  755,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  760,  761,  784,
      777,  774,  777,  783,  778,  794,  783,    0,    0,  757,
      768,    0,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  798,  778,  768,  768,  768,  768,  768,  768,  769,

      778,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      779,    0,    0,    0,    0,    0,    0,  798,  778,  768,
      768,  768,  768,  768,  768,  770,    0,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  779,  770,  770,
      770,  770,  770,  770,  771,  780,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  781,  782,  799,    0,    0,
        0,    0,    0,  779,  770,  770,  770,  770,  770,  770,
      780,  789,    0,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  781,  799,  790,  782,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  780,  800,  793,    0,

        0,    0,    0,    0,    0,  793,  801,  796,  781,  796,
        0,  782,  788,    0,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  800,  793,  788,  788,  788,  788,  788,
      788,  793,  801,  796,  802,  796,  797,  797,    0,  797,
      797,  797,  797,  797,  797,  809,  818,  797,  811,  811,
        0,  788,  788,  788,  788,  788,  788,  797,  797,  806,
      802,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      819,  809,  818,  821,  811,  811,  812,  812,  826,  812,
      812,  812,  812,  812,  812,  813,  813,  812,  817,  817,
      820,  820,  827,  821,  822,  828,  819,  812,  812,  821,

      833,  822,  813,  830,  826,  836,  831,  820,  832,  832,
      838,  813,  813,  831,  817,  817,  820,  820,  827,  821,
      822,  828,  840,  830,  839,  839,  833,  822,  813,  830,
      845,  836,  831,  820,  832,  832,  838,  841,  847,  831,
      848,  852,    0,    0,    0,    0,    0,    0,  840,  830,
      839,  839,    0,    0,    0,    0,  845,  841,  847,    0,
        0,    0,    0,  841,  847,    0,  848,  852,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  841,  847,  864,  864,  864,  864,  865,
      865,  865,  865,  866,  866,  866,  866,  867,    0,  867,

      867,  868,  868,  868,  868,  869,    0,  869,  869,  870,
      870,  872,  872,  873,  873,  874,  874,  875,  875,  876,
      876,  877,  877,  878,  878,  879,    0,  879,  879,  880,
      880,  881,  881,  882,  882,  883,  883,  884,  884,  885,
      885,  886,  886,  887,  887,  888,  888,  889,  889,  890,
      890,  891,  891,  892,  892,  893,  893,  894,  894,  895,
      895,  896,  896,  897,  897,  899,  899,  900,  900,  902,
      902,  903,  903,  906,  906,  907,  907,  909,    0,  909,
      909,  910,    0,  910,  910,  911,  911,  914,    0,  914,
      914,  915,    0,  915,  915,  916,  916,  917,  917,  918,

      918,  920,  920,  921,  921,  922,  922,  924,  924,  925,
      925,  926,  926,  928,  928,  929,  929,  930,  930,  932,
      932,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863

    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[106] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 
    0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 1953 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 2063 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 864 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5322 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 60 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 62 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::ACCEPT_UNKNOWN_FQDN_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::DS_LITE_TUNNEL_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ return SrvParser::CLIENT_CLASS_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ return SrvParser::MATCH_IF_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 122 "SrvLexer.l"
{ return SrvParser::EQ_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{ return SrvParser::AND_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
{ return SrvParser::OR_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 125 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 126 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_DATA_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_EN_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_DATA_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{ return SrvParser::ALLOW_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 130 "SrvLexer.l"
{ return SrvParser::DENY_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 131 "SrvLexer.l"
{ return SrvParser::SUBSTRING_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
{ return SrvParser::CONTAIN_; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
{ return SrvParser::STRING_KEYWORD_; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 134 "SrvLexer.l"
{ return SrvParser::ADDRESS_LIST_; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 137 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 138 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 139 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 140 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 142 "SrvLexer.l"
;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 144 "SrvLexer.l"
;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 146 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno; 
}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 151 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 152 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 153 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 92:
YY_RULE_SETUP
#line 160 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 169 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 178 "SrvLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 187 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 196 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 205 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 214 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 226 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 233 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 254 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd then no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 286 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd; 
      YYABORT; 
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 296 "SrvLexer.l"
{ 
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) { 
        Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd; 
        YYABORT; 
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 305 "SrvLexer.l"
{ return yytext[0]; } 
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 308 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 2816 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 864 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 864 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 863);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 308 "SrvLexer.l"




