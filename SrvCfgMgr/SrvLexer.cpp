#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 113
#define YY_END_OF_BUFFER 114
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[950] =
    {   0,
        1,    1,    0,    0,    0,    0,  114,  112,    2,    1,
        1,  112,   94,  112,  112,  111,  111,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
       98,   98,  113,    1,    1,    1,    0,  106,   94,    0,
      106,   96,   95,  111,    0,    0,  110,    0,  103,   77,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,   91,
      107,  107,   79,  107,  107,  107,  107,  107,  107,  107,

      107,  107,   17,   18,  107,  107,  107,  107,  107,  107,
      107,  107,   97,   95,  111,    0,    0,    0,  102,  108,
      101,  101,  107,  107,  107,  107,  107,   78,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,   90,  111,    0,    0,    0,    0,  100,  100,
        0,  101,    0,  101,  107,  107,  107,   57,  107,  107,
      107,  107,  107,  107,  107,   85,  107,  107,  107,   30,

      107,  107,   41,  107,  107,  107,  107,  107,  107,  107,
      107,    0,  107,  107,  107,  107,  107,  107,   23,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,   92,  107,  107,  107,  107,  111,    0,  109,    0,
        0,    0,  100,    0,  100,    0,  101,  101,  101,  101,
      107,  107,  107,  107,   84,  107,  107,  107,    4,  107,
      107,  107,  107,  107,  107,   93,  107,  107,    3,  107,
      107,  107,  107,  107,  107,  107,  107,  107,    0,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,    7,
      107,   24,  107,  107,  107,  107,  107,  107,  107,  107,

      107,  107,  107,    0,    0,    0,    0,    0,  100,  100,
      100,  100,    0,  101,  101,  101,    0,  101,  107,  107,
      107,  107,  107,  107,  107,  107,  107,   29,  107,  107,
      107,   36,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,    0,    0,  107,  107,  107,
       34,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,   88,  107,  107,  107,  107,  107,  107,  107,    0,
        0,    0,    0,  100,  100,  100,    0,  100,    0,    0,
      101,  101,  101,  101,  107,  107,   32,  107,  107,  107,
      107,  107,  107,    0,  107,  107,   87,  107,  107,  107,

      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,    0,    0,  107,  107,  107,  107,  107,   52,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
       21,  107,  107,  107,  109,    0,    0,    0,    0,    0,
      100,  100,  100,  100,    0,  101,  101,  101,    0,  101,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,    0,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,   48,  107,  107,   12,   10,
       76,  107,    0,    0,  107,  107,  107,   50,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,    5,  107,

      107,  107,   14,    0,    0,    0,    0,  100,  100,  100,
        0,  100,  105,  101,  101,  101,  101,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,    0,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,   11,   56,    0,    0,  107,  107,  107,
       51,  107,  107,  107,  107,   31,  107,  107,    6,   86,
       38,  107,  107,    0,    0,    0,    0,  104,  100,  100,
      100,  100,  101,  101,  101,    0,  101,  107,  107,  107,
      107,  107,  107,  107,  107,  107,   49,  107,    0,  107,
      107,  107,  107,  107,  107,   35,  107,  107,   33,  107,

      107,  107,   13,    0,    0,   45,   44,   37,  107,   22,
      107,  107,   40,   39,  107,  107,  109,    0,    0,  100,
      100,  100,    0,  100,  101,  101,  101,  101,  107,   15,
      107,   55,  107,  107,  107,   64,  107,  107,    0,  107,
      107,  107,  107,   67,  107,  107,  107,  107,  107,  107,
       47,   46,  107,  107,  107,  107,   53,    0,    0,    0,
        0,  100,  100,  100,  100,  101,  101,  101,    0,  101,
      107,  107,   89,   66,  107,  107,  107,    0,   75,  107,
      107,  107,   68,   54,  107,  107,  107,    8,  107,   25,
      107,  107,    0,    0,    0,  100,  100,  100,    0,  100,

      101,  101,  101,  101,  107,  107,   65,  107,  107,    0,
      107,  107,  107,  107,  107,  107,   58,  107,  107,  107,
      107,  109,    0,    0,    0,  100,  100,  100,  100,  101,
      101,  101,    0,  101,  107,  107,  107,  107,    0,  107,
      107,  107,  107,  107,  107,  107,  107,   16,   20,    0,
        0,   99,  102,  100,  100,  100,    0,  100,  101,  101,
      101,  101,  107,  107,  107,   27,    0,    0,  107,  107,
      107,   69,  107,  107,   26,  107,  107,    0,    0,   99,
        0,  100,  100,  100,  100,  100,  101,  101,  101,    0,
      101,  107,  107,  107,    0,    0,   28,  107,  107,   70,

      107,  107,  107,  107,  107,  107,  109,   99,  102,  100,
        0,  100,  100,  100,  100,  101,  101,  101,   59,  107,
      107,  107,  107,    0,    0,  107,  107,  107,  107,  107,
      107,   43,  107,   19,    0,   99,  100,  100,  100,  100,
      101,  101,  101,  107,  107,  107,  107,  107,    0,    0,
      107,  107,   71,   72,   73,   74,    9,    0,  100,  100,
        0,  100,  100,  101,   42,  107,  107,  107,  107,    0,
        0,  107,  107,  109,  100,  100,  101,  107,  107,  107,
      107,    0,    0,    0,  107,  107,  107,    0,  100,  100,
        0,  107,  107,  107,  107,    0,    0,    0,   80,  107,

      107,  107,   80,   99,  100,  100,   60,  107,  107,  107,
        0,   82,    0,  107,   82,  107,   99,  100,  100,    0,
      107,  107,   63,    0,   81,  107,   81,    0,  100,  100,
      107,   61,   83,   83,    0,  100,  100,    0,   62,  109,
      100,  100,    0,  100,  100,    0,  100,  100,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
       23,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        1,    1,    1,    1,    1,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    1,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1040] =
    {   0,
        0,    0, 1132, 1131,    0,    0, 1137, 5612, 5612,   73,
       75, 1103,    0, 1091,   72,   72,   34, 1075, 1073,  136,
      186,  233,  280,   71,  208,  338,   38,   73,  223,   89,
      267,  175,  275,  350,  221,  382,   67,  357,  180,  278,
     5612, 1083, 5612,  111,  137,  222, 1089, 5612,    0, 1085,
     1084, 5612,    0,  440, 1068,  459, 5612,    0,  485, 5612,
       61,  528,   86,   89,  185,  193,  231,  359,  340,  265,
      281,  381,  378,  277,  452,  374,  445,  317,  380,  285,
      507,  393,  540,  543,  544,  545,  522,  562,  527,  328,
      561,  559,  373,  552,  573,  579,  565,  583,  597,  595,

      614,  615,  488,  580,  626,  610,  581,  624,  613,  625,
      632,  619, 5612,    0,  690, 1035,  510, 1033,  735,    0,
      780,  709,  823,  624,  630,  812,  816,  631,  815,  821,
      682,  819,  839,  688,  814,  862,  759,  722,  867,  864,
      827,  859,  856,  873,  875,  877,  879,  858,  886,  906,
      904,  900,  907,  920,  917,  913,  909,  938,  936,  925,
      947,  961,  950,  952,  931,  971,  972,  974,  977,  980,
      986,  991,  740, 1049,  760, 1032, 1030, 1027, 1096,  800,
     1068, 1141, 1184, 1115, 1227,  968, 1162,  967,  988, 1035,
     1049, 1179, 1215, 1101, 1226,  983, 1216, 1219, 1230, 1002,

     1223, 1247, 1255, 1224, 1267, 1145, 1261, 1228, 1278, 1272,
     1275, 1038, 1282, 1266, 1274, 1311, 1279, 1309, 1083, 1315,
     1324, 1330, 1310, 1317, 1334, 1348, 1339, 1326, 1354, 1364,
     1347, 1332, 1371, 1376, 1367, 1396, 1160, 1021, 1018, 1014,
      987, 1434, 1456, 1499, 1475, 1518, 1544, 1563, 1589, 1608,
      982, 1369, 1391, 1588, 1363, 1601, 1375, 1477, 1531, 1590,
     1606, 1603, 1621, 1611, 1622, 1388, 1624, 1642, 1643, 1625,
     1638, 1646, 1641, 1656, 1658, 1665, 1687, 1542, 1661, 1663,
     1690, 1692, 1662, 1693, 1686, 1701, 1680, 1709, 1697, 1398,
     1710, 1435, 1704, 1731, 1717, 1725, 1729, 1748, 1733, 1742,

     1773, 1749, 1761,  976,  936,  932,  918, 1809, 1833, 1821,
     1878, 1852, 1861, 1897,  913, 1923, 1966, 1942, 1944, 1965,
     1928, 1969, 1967, 1978, 1980, 1958, 1486, 2050, 1966, 1957,
     1963, 1732, 1865, 2017, 2005, 2009, 1998, 2039, 2030, 2041,
     2020, 2050, 2042, 2049, 2044, 1751, 1779, 2061, 2054, 2055,
     1820, 2071, 2086, 2066, 2089, 2100, 1961, 2036, 2093, 2091,
     2106, 1876, 2096, 2103, 2113, 2105, 2118, 2128, 2136,  893,
      882,  848, 2194, 2205,  844, 2217, 2260, 2236, 2279, 2305,
     2316, 2335, 2361, 2380, 2382, 2123, 2159, 2358, 2363, 2239,
     2360, 2377, 2379, 1967, 2412, 2380, 2121, 2422, 2392, 2411,

     2397, 2431, 2434, 2426, 2442, 2444, 2433, 2445, 2462, 2463,
     2464, 2461, 2142, 2199, 2476, 2465, 2477, 2469, 2480, 2221,
     2514, 2500, 2501, 2498, 2516, 2510, 2515, 2525, 2519, 2528,
     2258, 2546, 2531, 2535,  842,  835,  806,  805, 2604, 2615,
     2626, 2645, 2671, 2690, 2344, 2716,  804, 2728, 2771, 2747,
     2749, 2757, 2765, 2670, 2769, 2658, 2787, 2785, 2764, 2763,
     2767, 2319, 2801, 2819, 2816, 2538, 2808, 2812, 2820, 2814,
     2817, 2822, 2806, 2844, 2837, 2361, 2839, 2858, 2375, 2568,
     2605, 2852, 2633, 2850, 2866, 2869, 2871, 2856, 2872, 2857,
     2886, 2896, 2873, 2891, 2901, 2903, 2904, 2907, 2905, 2924,

     2921, 2916, 2909,  803,  802,  801, 2982, 2993,  800, 3005,
     3048, 3024, 3033, 3093, 3067, 3138, 3112, 3046, 3126, 2920,
     3035, 3136, 3134, 3128, 3135, 3156, 3157, 3132, 2925, 3159,
     3168, 3170, 3184, 3176, 3192, 3177, 3179, 3207, 3191, 3214,
     3216, 3215, 3211, 2923, 3080, 3198, 3203, 3206, 3222, 3223,
     3221, 3236, 3244, 3238, 3243, 3224, 3258, 3229, 3239, 3259,
     3260, 3279, 3282,  790,  761,  760,  749, 3324, 3342, 3361,
     3387, 3406, 3432,  748, 3444, 3487, 3463, 3278, 3473, 3481,
     3478, 3482, 3465, 3386, 3483, 3488, 3261, 3520, 3297, 3489,
     3479, 3518, 3321, 3528, 3529, 3281, 3536, 3539, 3340, 3530,

     3531, 3534, 3523, 3531, 3529, 3532, 3533, 3535, 3553, 3540,
     3575, 3580, 3568, 3569, 3571, 3591,  746,  745,  743, 3638,
      716, 3651, 3694, 3670, 3739, 3713, 3784, 3758, 3593, 3572,
     3776, 3574, 3673, 3778, 3726, 3576, 3578, 3779, 3636, 3774,
     3782, 3781, 3777, 3655, 3787, 3818, 3827, 3828, 3831, 3832,
     5612, 5612, 3826, 3817, 3829, 3833, 3819,  715,  714,  713,
      712, 3893, 3912, 3938, 3957, 3983,  711, 3995, 4038, 4014,
     3824, 3823, 3830, 3872, 4016, 4033, 3937, 3883, 3925, 4040,
     4028, 4037, 4027, 4030, 4058, 4072, 4073, 4065, 4076, 4036,
     4069, 4079,  678,  676,  671, 4137,  670, 4149, 4192, 4168,

     4237, 4211, 4282, 4256, 4038, 4077, 4074, 4271, 4272,  681,
     4190, 4269, 4278, 4286, 4277, 4281, 4075, 4282, 4284, 4313,
     4317,  668,  664,  657,  655, 4377, 4349, 4422, 4396, 4441,
      586, 4467, 4510, 4486, 4330, 4375, 4496, 4488, 4507, 4499,
     4529, 4179, 4524, 4528, 4548, 4510, 4546, 4128, 4171,  554,
      552,  548,    0, 4592,  546, 4608, 4651, 4627, 4696, 4670,
     4741, 4715, 4730, 4709, 4547, 4224, 4289, 4343, 4744, 4638,
     4734, 4409, 4766, 4733, 4420, 4758, 4769,  541,  539,  511,
      499,  498, 4829, 4804, 4874, 4848, 4893,  497, 4919,    0,
     4938, 4742, 4920, 4939, 4529, 4561, 4587, 4782, 4922, 4630,

     4947, 4675, 4816, 4765, 4933, 4940,  496,  495, 5612,  494,
        0, 5005,  466, 5017, 5036, 5062, 5081,    0, 4764, 5066,
     4941, 4872, 5077, 4829, 4879, 4936, 5078, 4995, 4996, 5041,
     5090, 4935, 5079, 4937,  465,  464,  463,  462, 5150, 5169,
     5195,  461,    0, 5081, 5080, 5084, 5153, 5137, 4946,    0,
     5151, 5223, 5004, 5063, 5082, 5083, 5128,  448,  424,  416,
        0, 5223, 5612,    0, 5150, 5205, 5152, 5216, 5219,    0,
     5223, 5260, 5226,  414,  413,  412, 5612, 5246, 5248, 5249,
     5214, 5267, 5231, 5234, 5271, 5263, 5264,  411,  408,  406,
        0, 5259, 5266, 5268, 5247, 5281, 5272, 5279, 5612, 5299,

     5300, 5296, 5282,  358,  357,  355, 5298, 5309, 5306, 5311,
     5302, 5612, 5327, 5313, 5314, 5343,  349,  348,  346,    0,
     5341, 5331, 5316, 5338, 5612, 5365, 5320,  325,  307,  305,
     5350, 5347, 5612, 5351,    0,  301,  276,    0, 5352,  267,
      262,  260,  258,  254,  251,    0,  229,  214, 5612, 5435,
     5439, 5443, 5447, 5451, 5455, 5457,  232, 5459, 5461, 5463,
     5465, 5467, 5469, 5471, 5473, 5475, 5477, 5481, 5483, 5485,
     5487, 5489, 5491, 5493, 5495, 5497, 5499, 5501, 5503, 5505,
     5507, 5509, 5511, 5513, 5515, 5517, 5519, 5521, 5523, 5525,
     5527, 5529, 5531, 5533,  231, 5535, 5537, 5539,  230, 5541,

     5543, 5545,  228,  226, 5547, 5549, 5551,  224, 5555, 5559,
     5561, 5563,  219,  217, 5567, 5571, 5573, 5575, 5577, 5579,
     5581,  214, 5583, 5585, 5587, 5589, 5591,  145, 5593, 5595,
     5597,  131, 5599,  117, 5601, 5603, 5605,   80, 5607
    } ;

static yyconst flex_int16_t yy_def[1040] =
    {   0,
      949,    1,  950,  950,  951,  951,  949,  949,  949,  949,
      949,  952,  953,  954,  949,  949,   16,  949,  949,  949,
       20,   20,   22,   22,   22,   22,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      949,  949,  949,  949,  949,  949,  952,  949,  953,  954,
      949,  949,  955,  949,  956,   54,  949,  957,  949,  949,
       26,   26,   62,   62,   62,   26,   26,   26,   26,   26,
       62,   26,   26,   62,   26,   26,   26,   26,   26,   62,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  949,  955,  949,  958,  115,  959,  949,  957,
      949,  121,   62,  123,  123,   26,   26,   26,   26,   26,
      123,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  949,  174,  960,  961,  962,  949,  179,
      949,  949,  949,  182,  123,  185,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  949,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,  175,  175,  961,  963,
      964,  949,  949,  949,  243,  949,  949,  247,  949,  249,
      185,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  949,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,  965,  949,  966,  967,  949,  949,  309,
      949,  311,  949,  949,  949,  949,  949,  316,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  968,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  949,  949,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,  969,
      970,  971,  949,  949,  949,  949,  949,  376,  949,  949,
      949,  381,  949,  383,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  949,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  949,  949,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  966,  949,  972,  973,  949,  949,
      949,  441,  949,  443,  949,  949,  949,  949,  949,  448,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  949,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  949,  949,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,  974,  975,  976,  949,  949,  949,  949,
      949,  510,  949,  949,  514,  949,  516,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  949,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  949,  949,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  977,  949,  978,  979,  949,  949,  569,
      949,  571,  949,  949,  949,  949,  575,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  949,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,  949,  949,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,  980,  981,  982,  949,
      949,  949,  949,  622,  949,  625,  949,  627,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  949,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      949,  949,   26,   26,   26,   26,   26,  983,  949,  984,
      985,  949,  662,  949,  664,  949,  949,  949,  949,  668,
       26,   26,   26,   26,   26,   26,   26,  949,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  986,  987,  988,  949,  949,  949,  949,  698,

      949,  701,  949,  703,   26,   26,   26,   26,   26,  949,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  989,  949,  990,  991,  949,  726,  949,  728,  949,
      949,  949,  949,  732,   26,   26,   26,   26,  949,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,  992,
      993,  994,  995,  949,  949,  949,  949,  756,  949,  759,
      949,  761,   26,   26,   26,   26,  949,  949,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  996,  949,  997,
      949,  998,  949,  783,  949,  785,  949,  949,  949,  999,
      789,   26,   26,   26,  949,  949,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26, 1000, 1001,  949, 1002,
     1003,  949,  949,  949,  814,  949,  816, 1004,   26,   26,
       26,   26,   26,  949,  949,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1005,  949, 1006, 1007,  949,  839,
      949,  949, 1008,   26,   26,   26,   26,   26,  949, 1009,
       26, 1010,   26,   26,   26,   26,   26, 1011,  949, 1012,
     1013,  949,  949, 1014,   26,   26,   26,   26,   26, 1015,
      949, 1016,   26, 1017, 1018, 1019,  949,   26,   26,   26,
       26,  949,  949,  949,   26,   26,   26, 1020,  949, 1021,
     1022,   26,   26,   26,   26,  949,  949,  949,  949,   26,

       26,   26,   26, 1023, 1024, 1025,   26,   26,   26,   26,
      949,  949,  949,   26,   26,   26, 1026,  949, 1027, 1028,
       26,   26,   26,  949,  949,   26,   26, 1029, 1030, 1031,
       26,   26,  949,   26, 1032,  949, 1033, 1034,   26,  949,
     1035, 1036, 1029,  949, 1037, 1038, 1039,  949,    0,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,

      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949
    } ;

static yyconst flex_int16_t yy_nxt[5688] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   27,   27,   29,   30,   31,   32,   33,   27,
       34,   35,   36,   37,   38,   39,   27,   40,   27,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   27,   27,
       29,   30,   31,   32,   33,   27,   34,   35,   36,   37,
       38,   39,   27,   40,   27,   44,   45,   46,   45,   52,
      949,   61,  786,   53,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   55,   62,   56,   56,   56,   56,   56,

       56,   83,   57,  108,   61,   61,  949,   61,   61,   84,
       61,  124,   87,   44,   45,  125,   61,   79,   58,  942,
       62,   56,   56,   56,   56,   56,   56,   83,   57,  108,
       61,   61,   61,  940,   61,   84,   61,  124,   87,   46,
       45,  125,   61,   79,   58,   61,   61,  930,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   55,   61,   62,
       62,   63,   64,   62,   65,   61,   66,   61,   61,   61,
       67,   61,   68,   61,   61,   61,   61,   61,   61,   69,
       61,   61,   61,   61,   61,   62,   62,   63,   64,   62,
       65,   61,   66,   61,   61,   61,   67,   61,   68,   61,

       61,   61,   61,   61,   61,   69,   61,   61,   61,   61,
       61,   62,   62,   92,   62,   93,  906,  111,   61,  877,
       61,  876,   61,   61,   44,   45,  864,  126,  843,   70,
      838,   80,  818,  782,  120,  946,   61,   62,   62,   92,
       62,   93,   61,  111,   61,   61,   61,   81,   61,   61,
      946,   99,  100,  126,   85,   70,   71,   80,   62,   62,
       86,   62,   61,  101,  102,  127,   61,   72,   61,   61,
       73,   61,  946,   81,   61,  938,   61,   99,  100,  949,
       85,  946,   71,  938,   62,   62,   86,   62,  943,  101,
      102,  127,   61,   72,   88,   61,   73,  938,   89,  130,

       61,   94,   61,   62,   90,  112,  131,   74,   61,   91,
       61,   75,   95,  135,   61,   96,   76,   77,   61,  141,
       88,   61,  920,   78,   89,  130,  938,   94,  920,   62,
       90,  112,  131,   74,   61,   91,   61,   75,   95,  135,
       61,   96,   76,   77,   61,  141,  809,   61,  139,   78,
       61,   61,   61,   61,   61,   61,   61,   61,   61,  949,
       61,   61,   61,   61,   61,   61,   61,  920,   61,  891,
      928,   61,   61,   97,  139,   61,  920,   98,  891,  781,
      109,   82,  129,   61,  110,  128,   61,   61,   61,   61,
       61,   61,   61,   61,   61,  103,  104,   61,   61,   97,

       61,   61,   61,   98,  132,  105,  109,   82,  129,   61,
      110,  128,  133,  106,  134,  137,   61,   61,  140,   61,
      143,   61,  107,   61,   61,   61,   61,  891,   61,  861,
      132,  105,  753,  891,  861,  888,   61,  861,  133,  106,
      134,  137,   61,   61,  140,  811,  143,   61,  107,   61,
       61,   61,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  116,   61,  117,  117,  117,  117,  117,  117,  725,
       57,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      138,  136,  790,  861,  811,  781,  119,  757,   61,  117,
      117,  117,  117,  117,  117,   61,   57,  121,  121,  121,

      121,  121,  121,  121,  121,  121,  138,  136,  122,  122,
      122,  122,  122,  122,   61,  811,  781,  835,  733,  811,
      809,   61,  175,  175,  175,  175,  175,  175,  175,  175,
      175,   61,  781,  142,  122,  122,  122,  122,  122,  122,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  116,
       61,  123,  123,  123,  123,  123,  123,   61,   66,  142,
      725,  154,  661,  144,  149,   61,  145,  699,  151,  781,
       61,   61,  147,  725,  148,  119,   61,  123,  123,  123,
      123,  123,  123,   61,   66,  146,   61,   61,   61,  144,
      149,   61,  145,  150,  151,   61,   61,   61,  147,  152,

      148,  153,   61,  157,   61,   61,  156,  669,   61,   61,
      155,  146,   61,   61,   61,  158,   61,  159,  160,  150,
      161,   61,   61,   61,  168,  152,   61,  153,   61,  157,
       61,   61,  156,  162,   61,  166,  155,  163,   61,  165,
       61,  158,   61,  159,  160,  167,  161,  170,   61,   61,
      168,  186,   61,   61,  164,  169,   61,   61,   61,  162,
      173,  171,   61,  163,   61,  165,   61,   61,   61,   61,
      187,  167,  172,  170,   61,   61,  753,  186,  725,   61,
      164,  169,   61,   61,   61,  661,  173,  171,   61,  750,
      739,  623,  725,   61,   61,   61,  187,  661,  172,  567,

       61,   61,  174,  174,  174,  174,  174,  174,  174,  174,
      174,   55,  192,  175,  175,  175,  175,  175,  175,  949,
       57,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      195,   61,  576,  119,  661,  567,  119,  511,  192,  175,
      175,  175,  175,  175,  175,  199,   57,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  195,   61,  180,  180,
      180,  180,  180,  180,  661,   61,  567,  658,  198,  449,
      119,  199,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  567,  438,   61,  180,  180,  180,  180,  180,  180,
      181,   61,  182,  182,  182,  182,  182,  182,  182,  182,

      182,  183,   61,  184,  184,  184,  184,  184,  184,   61,
      949,  438,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  377,  567,  438,  119,  317,  119,  438,   61,  184,
      184,  184,  184,  184,  184,  185,  185,  185,  185,  185,
      185,  185,  185,  185,   55,  190,  185,  185,  185,  185,
      185,  185,  188,  189,  191,   61,  307,   61,   61,   61,
      193,  196,   61,  504,   61,  244,  194,  209,  202,  438,
       61,  190,  185,  185,  185,  185,  185,  185,  188,  189,
      191,   61,   61,   61,   61,   61,  193,  196,   61,  197,
       61,  201,  194,  200,  202,  203,   61,  204,  205,   61,

      206,   61,   61,  307,  207,   61,  208,   61,   61,  214,
       61,  210,  212,  213,  307,  197,   61,  201,   61,  200,
       61,  203,   61,  204,  205,   61,  206,   61,   61,   61,
      207,   61,  208,   61,  183,  211,   61,  210,  215,  119,
      221,  220,   61,   61,   61,  216,   61,   61,   61,   61,
       61,  219,   61,  307,  217,   61,   61,  178,  218,  223,
       61,  211,  224,   61,  215,  222,  221,  220,   61,   61,
      226,  216,  229,   61,   61,   61,   61,  219,   61,   61,
      217,   61,   61,  228,  218,  223,   61,  225,  224,   61,
       61,  222,  227,   61,   61,   61,  230,  119,  229,  231,

       61,  232,  233,  949,   61,   61,  252,   61,  307,  228,
       61,  234,  235,  225,   61,   61,   61,   61,  227,   61,
       61,   61,  230,   61,  236,  231,   61,  232,  233,   61,
       61,   61,  252,  255,   61,  178,   61,  234,  235,  304,
       61,   61,  949,   61,  256,   61,   61,  279,  119,   61,
      236,  178,   61,  178,  178,   61,  119,   61,  257,  255,
       61,  237,  237,  237,  237,  237,  237,  237,  237,  237,
       55,   61,  238,  238,  238,  238,  238,  238,   61,   57,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  119,
       50,   51,   61,   48,  113,   60,   59,   51,  238,  238,

      238,  238,  238,  238,   61,   57,  242,   48,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  244,   61,  245,
      245,  245,  245,  245,  245,  949,   61,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  949,  260,   42,   42,
      949,  949,  949,  949,   61,  245,  245,  245,  245,  245,
      245,  181,   61,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  183,  260,  248,  248,  248,  248,  248,  248,
       61,  253,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  949,  949,  949,  949,  949,  949,  270,   61,  254,
      248,  248,  248,  248,  248,  248,  249,  249,  249,  249,

      249,  249,  249,  249,  249,   61,  258,  250,  250,  250,
      250,  250,  250,  270,   61,  254,  949,  949,  949,  949,
      949,  949,   61,  949,  949,  949,  949,  949,  949,  949,
      949,   61,  258,  250,  250,  250,  250,  250,  250,  251,
      251,  251,  251,  251,  251,  251,  251,  251,   61,  261,
      251,  251,  251,  251,  251,  251,  259,  262,   61,   61,
      263,  264,   61,  265,  267,  268,   61,   61,  949,   61,
      272,   61,  949,   61,  266,  261,  251,  251,  251,  251,
      251,  251,  259,  262,   61,   61,  263,  264,   61,  265,
       61,  268,   61,   61,  269,   61,  272,   61,   61,   61,

      266,  271,  277,  273,   61,  278,  285,  282,  280,   61,
       61,  283,  274,  275,  276,   61,   61,   61,   61,  949,
      269,   61,   61,  281,   61,   61,  949,  271,  277,  273,
       61,  278,  285,  282,  280,   61,   61,  283,  274,  275,
      276,   61,  287,   61,   61,  284,  286,   61,   61,  281,
      288,   61,   61,   61,   61,  289,  299,  290,   61,  291,
       61,  292,  296,  949,  949,  949,  295,   61,  287,   61,
      949,  284,  286,   61,  293,   61,  288,   61,   61,   61,
       61,  289,   61,  290,   61,  291,   61,  292,  296,  294,
       61,   61,  295,   61,  300,   61,  297,   61,  298,   61,

      293,   61,  301,   61,  302,  303,   61,   61,   61,  325,
       61,  319,   61,  949,   61,  294,   61,   61,   61,   61,
      300,  949,  297,   61,  298,  949,  949,  949,  301,  320,
      302,   61,   61,   61,   61,  325,   61,  319,   61,   61,
       61,   61,  949,  949,   61,   61,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  320,  949,   61,  949,  949,
       61,  949,  949,  949,  949,   61,  242,   61,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  244,   61,  310,
      310,  310,  310,  310,  310,  949,  326,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  949,  949,  949,  949,

      949,  949,  949,  949,   61,  310,  310,  310,  310,  310,
      310,  311,  311,  311,  311,  311,  311,  311,  311,  311,
       61,  393,  312,  312,  312,  312,  312,  312,  313,   61,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  949,
      327,  949,  949,  949,  949,  949,   61,  393,  312,  312,
      312,  312,  312,  312,  181,   61,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  183,  345,  315,  315,  315,
      315,  315,  315,  949,   61,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  949,   61,  949,  949,  949,  949,
      949,  949,  345,  315,  315,  315,  315,  315,  315,  181,

       61,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      317,   61,  318,  318,  318,  318,  318,  318,  949,  949,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  321,
      949,   61,  328,   61,  322,  323,  324,  329,  318,  318,
      318,  318,  318,  318,   61,  330,   61,  332,  331,   61,
      334,  335,  336,  333,   61,  321,  337,   61,  328,   61,
      322,  323,  324,  329,   61,   61,  338,   61,   61,  949,
       61,  330,   61,  332,  331,   61,  334,  339,  340,  333,
       61,   61,  337,  341,   61,   61,   61,  346,  343,   61,
       61,   61,  338,   61,   61,  342,  344,  949,  351,   61,

      348,   61,  347,  339,  340,   61,   61,   61,   61,  341,
       61,   61,   61,  346,  343,   61,  352,  349,  356,  350,
      355,  342,  353,   61,  351,   61,  348,   61,  347,   61,
       61,   61,   61,   61,   61,   61,   61,  358,  354,  357,
       61,  359,  352,  349,   61,  350,  355,   61,  353,   61,
      949,  361,   61,   61,  362,   61,   61,  949,  360,   61,
       61,   61,   61,  358,  354,  357,   61,  359,   61,  363,
       61,  364,   61,   61,   61,   61,   61,  361,   61,   61,
      362,  365,  367,  366,  360,   61,   61,  369,  413,  368,
      949,   61,   61,  949,   61,  363,  949,  364,   61,  949,

       61,   61,   61,  949,   61,  949,  414,  365,  949,  366,
      949,   61,  949,  369,  413,  368,   61,   61,   61,  373,
      949,  308,  308,  308,  308,  308,  308,  308,  308,  308,
       61,  949,  414,  375,  375,  375,  375,  375,  375,  375,
      375,  375,   61,  242,  949,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  244,  949,  375,  375,  375,  375,
      375,  375,  949,   61,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  375,  375,  375,  375,  375,  375,  242,   61,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  377,

      400,  378,  378,  378,  378,  378,  378,  181,   61,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  183,   61,
      949,  949,  949,  949,  949,  949,  400,  378,  378,  378,
      378,  378,  378,  181,   61,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  317,   61,  382,  382,  382,  382,
      382,  382,  949,  385,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  949,  949,  949,  398,  949,  949,  387,
      423,   61,  382,  382,  382,  382,  382,  382,  383,  383,
      383,  383,  383,  383,  383,  383,  383,   61,  386,  384,
      384,  384,  384,  384,  384,  387,  388,   61,  389,  392,

       61,   61,  397,  399,   61,  390,   61,  391,   61,   61,
       61,  462,   61,   61,  386,  384,  384,  384,  384,  384,
      384,   61,  388,   61,  389,  392,   61,   61,  397,  399,
       61,  390,   61,  391,   61,   61,   61,  462,   61,  949,
      402,   61,  404,  401,  403,  424,  949,   61,   61,   61,
      394,  394,   61,  394,  394,  394,  394,  394,  394,  395,
       61,  394,  405,   61,  408,  406,  402,   61,  404,  401,
      403,  394,  394,   61,   61,  407,  409,  410,   61,   61,
      411,  412,   61,  949,   61,   61,   61,   61,  405,   61,
      408,  406,   61,   61,  416,  417,  415,   61,   61,   61,

      420,  407,  409,  410,   61,   61,  411,  412,   61,   61,
       61,   61,  418,   61,   61,  419,  421,  949,   61,   61,
      416,  417,  415,   61,   61,  422,  420,  428,  425,   61,
       61,  426,   61,  427,   61,   61,   61,  433,  418,   61,
       61,  419,  421,   61,  429,  949,   61,  431,   61,   61,
      430,  422,  432,  428,  425,   61,   61,  426,   61,  427,
       61,   61,   61,  454,   61,   61,   61,  434,  455,   61,
      429,   61,   61,  431,   61,   61,  430,  483,  432,   61,
      949,  949,   61,  949,  949,  949,  949,   61,  949,  454,
       61,  949,   61,  434,  949,  949,  949,   61,  949,  949,

      949,  949,   61,  483,  949,   61,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  242,  949,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  244,  242,   61,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  377,  484,
      442,  442,  442,  442,  442,  442,  949,  949,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  949,  949,  949,
      949,  949,  949,  949,   61,  484,  442,  442,  442,  442,
      442,  442,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  458,   61,  444,  444,  444,  444,  444,  444,  445,
       61,  379,  379,  379,  379,  379,  379,  379,  379,  379,

      949,   61,  949,  949,  949,  949,  949,  458,   61,  444,
      444,  444,  444,  444,  444,  181,  949,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  181,   61,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  317,  949,  447,
      447,  447,  447,  447,  447,  949,  529,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  447,  447,  447,  447,  447,
      447,  181,  529,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  449,  459,  450,  450,  450,  450,  450,  450,
      949,  457,  450,  450,  450,  450,  450,  450,  450,  450,

      450,   61,  461,   61,   61,  456,   61,  949,  460,  459,
      450,  450,  450,  450,  450,  450,  451,  457,   61,  452,
       61,  949,   61,   61,  465,  453,  949,   61,  461,   61,
       61,  456,   61,  471,  460,   61,  469,  463,  470,  949,
       61,  949,  451,  949,   61,  452,   61,  464,   61,   61,
      465,  453,  466,  474,   61,   61,  465,  473,  467,  471,
      468,   61,  469,  463,  470,   61,   61,  475,  472,   61,
      477,  476,  478,  464,   61,  949,   61,   61,  466,  474,
       61,   61,  465,  473,  467,   61,  468,   61,   61,  479,
      480,   61,  481,  475,  472,   61,  477,  476,  478,  485,

       61,  482,   61,   61,   61,   61,   61,   61,   61,  486,
      488,   61,   61,   61,   61,  479,  480,  949,  481,   61,
       61,  487,  489,   61,  949,  485,  493,  482,  949,  494,
       61,   61,   61,   61,   61,  486,  488,  492,   61,  495,
      490,   61,  949,   61,   61,   61,   61,  487,  489,   61,
      491,  949,  493,   61,  496,  494,  497,   61,   61,   61,
      499,  498,   61,  492,  500,  495,  490,   61,   61,   61,
       61,   61,  502,  533,   61,  503,  491,  501,   61,   61,
      496,   61,  497,   61,   61,   61,  499,  498,   61,   61,
      500,  949,  949,  949,   61,  949,  949,   61,  502,  533,

       61,  503,  949,  501,   61,  949,  949,   61,  949,  949,
      949,   61,  949,  949,  507,   61,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  242,  949,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  242,   61,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  377,   61,  509,
      509,  509,  509,  509,  509,  949,  546,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  949,  523,  949,  949,
      949,  949,  949,  949,   61,  509,  509,  509,  509,  509,
      509,  242,  546,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  511,  521,  512,  512,  512,  512,  512,  512,

      949,   61,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  949,  949,   61,  949,  949,  949,  949,  949,  521,
      512,  512,  512,  512,  512,  512,  181,   61,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  317,  181,   61,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  449,
      949,  515,  515,  515,  515,  515,  515,  949,  949,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  949,  949,
      949,  949,  949,  949,  949,  949,  518,  515,  515,  515,
      515,  515,  515,  516,  516,  516,  516,  516,  516,  516,
      516,  516,   61,  519,  517,  517,  517,  517,  517,  517,

       61,  520,  518,  522,  949,  526,   61,   61,   61,  949,
       61,  527,   61,  528,  524,  525,  949,  949,   61,  519,
      517,  517,  517,  517,  517,  517,   61,  520,   61,  522,
       61,  526,   61,   61,   61,  530,   61,  527,   61,  528,
      524,  525,  531,  532,   61,  534,  535,  536,  539,   61,
      537,   61,  540,  541,   61,   61,   61,   61,  538,   61,
       61,  530,   61,   61,  542,   61,  552,  949,  531,  532,
       61,  534,  535,  536,  539,   61,  537,   61,  540,  543,
       61,   61,   61,   61,  538,   61,   61,   61,   61,   61,
      542,   61,  544,  545,  547,   61,  549,  548,  550,   61,

       61,   61,  551,  949,  949,  543,   61,  555,   61,   61,
      949,  553,   61,   61,   61,   61,   61,  556,  544,  545,
      547,   61,  549,  548,  550,   61,   61,   61,  551,   61,
      558,  554,  557,  555,   61,   61,  560,  553,   61,   61,
       61,   61,   61,  556,   61,  559,   61,   61,   61,  562,
       61,  561,   61,  580,  563,   61,  558,  554,  557,   61,
       61,  589,  560,   61,   61,   61,   61,   61,  949,  949,
       61,  559,   61,   61,   61,  562,   61,  561,   61,  580,
      563,  949,  949,  949,  949,   61,  949,  589,  949,   61,
       61,  949,   61,   61,  568,  568,  568,  568,  568,  568,

      568,  568,  568,  242,  949,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  377,  242,  949,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  511,  949,  570,  570,
      570,  570,  570,  570,  949,  949,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  570,  570,  570,  570,  570,  570,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  578,
      581,  572,  572,  572,  572,  572,  572,  949,   61,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  949,   61,
      949,  949,  949,  949,  949,  578,  581,  572,  572,  572,

      572,  572,  572,  181,   61,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  449,   61,  574,  574,  574,  574,
      574,  574,  949,   61,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  949,  949,  949,  949,  949,  949,  949,
      949,  588,  574,  574,  574,  574,  574,  574,  181,   61,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  576,
      579,  577,  577,  577,  577,  577,  577,  582,  583,   61,
      584,   61,  585,  949,  949,   61,  949,   61,   61,   61,
      949,  949,  590,  586,  587,  949,  579,  577,  577,  577,
      577,  577,  577,  582,  583,   61,  584,   61,  585,   61,

       61,   61,   61,   61,   61,   61,  592,  593,  590,  586,
      587,   61,  594,   61,  591,  595,  598,  596,  599,   61,
       61,  597,   61,  600,  602,   61,   61,   61,   61,  604,
      605,  949,  592,  593,   61,   61,  949,   61,  594,   61,
      591,  595,  606,  596,  599,   61,   61,  597,   61,   61,
       61,  601,  603,   61,   61,  604,  605,   61,   61,   61,
       61,   61,  607,  608,   61,   61,   61,   61,  606,  614,
      609,  610,   61,  611,  612,   61,   61,  601,  603,   61,
       61,   61,   61,   61,   61,   61,   61,   61,  607,  608,
       61,   61,   61,   61,  613,  614,  609,  610,   61,  611,

      612,   61,   61,   61,   61,   61,  615,   61,   61,  616,
      949,  949,   61,   61,  949,  949,  949,  949,  949,  629,
      613,   61,   61,  639,   61,   61,  949,   61,   61,   61,
       61,  949,  615,  949,  949,  616,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  629,  643,   61,   61,  639,
       61,   61,  242,  949,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  511,   61,  621,  621,  621,  621,  621,
      621,  949,  643,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  949,   61,  949,  949,  949,  949,  949,  949,
       61,  621,  621,  621,  621,  621,  621,  242,  949,  622,

      622,  622,  622,  622,  622,  622,  622,  622,  623,   61,
      624,  624,  624,  624,  624,  624,  949,  635,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  949,  949,   61,
      949,  949,  949,  949,  949,  949,  624,  624,  624,  624,
      624,  624,  181,  635,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  449,  181,   61,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  576,  949,  626,  626,  626,
      626,  626,  626,  949,  949,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  949,  949,  949,  949,  641,  949,
      949,  949,  634,  626,  626,  626,  626,  626,  626,  627,

      627,  627,  627,  627,  627,  627,  627,  627,   61,  636,
      628,  628,  628,  628,  628,  628,   61,  631,  634,  632,
      630,   61,   61,  633,   61,   61,   61,  637,  949,  949,
      640,   61,   61,  949,   61,  636,  628,  628,  628,  628,
      628,  628,   61,  631,  642,  632,  630,   61,   61,  633,
       61,   61,   61,  637,  638,  644,  640,   61,   61,  646,
      645,   61,  647,   61,  648,  650,   61,  651,  649,  652,
      642,   61,   61,   61,   61,   61,   61,   61,   61,   61,
      638,  644,   61,   61,  653,  646,  645,   61,  647,   61,
      648,  650,   61,  651,  649,  652,   61,   61,   61,   61,

       61,   61,   61,   61,   61,   61,  654,  655,   61,   61,
      653,   61,   61,  656,   61,   61,  657,   61,   61,   61,
      671,  676,   61,   61,  949,  949,  949,  949,  949,  949,
      949,  949,  654,  655,   61,  949,   61,   61,   61,  656,
       61,   61,  657,   61,   61,   61,  671,  676,  242,   61,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  511,
       61,  242,   61,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  623,  678,  663,  663,  663,  663,  663,  663,
      949,  949,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  949,  949,  949,  949,  949,  949,  949,   61,  678,

      663,  663,  663,  663,  663,  663,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  673,   61,  665,  665,  665,
      665,  665,  665,  949,   61,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  949,  949,  949,  949,  949,  949,
      949,  673,   61,  665,  665,  665,  665,  665,  665,  181,
      949,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      576,  675,  667,  667,  667,  667,  667,  667,  949,   61,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  949,
      949,  949,  949,  949,  949,  949,  682,  675,  667,  667,
      667,  667,  667,  667,  181,   61,  668,  668,  668,  668,

      668,  668,  668,  668,  668,  669,  677,  670,  670,  670,
      670,  670,  670,  672,  674,  679,  680,   61,  681,   61,
       61,   61,   61,  683,   61,   61,  949,  949,  949,  949,
       61,  949,  677,  670,  670,  670,  670,  670,  670,  672,
      674,  679,  680,   61,  681,   61,   61,   61,   61,  683,
       61,   61,  684,  685,  689,  686,   61,  687,  688,  690,
       61,   61,   61,  705,  692,  691,   61,   61,  706,   61,
       61,   61,   61,   61,   61,   61,   61,  949,  684,  685,
      689,  686,  949,  687,  688,  690,   61,   61,   61,  705,
      692,  691,   61,   61,  706,   61,   61,   61,   61,   61,

       61,   61,   61,  242,  949,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  623,   61,  697,  697,  697,  697,
      697,  697,  949,  710,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  949,  949,  949,  949,  949,  949,  949,
      949,   61,  697,  697,  697,  697,  697,  697,  242,  710,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  699,
      709,  700,  700,  700,  700,  700,  700,  949,   61,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  949,  949,
       61,  949,  949,  949,  949,  949,  709,  700,  700,  700,
      700,  700,  700,  181,   61,  380,  380,  380,  380,  380,

      380,  380,  380,  380,  576,  181,   61,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  669,  949,  702,  702,
      702,  702,  702,  702,  949,  949,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  949,  949,  949,  949,  949,
      949,  949,  949,  707,  702,  702,  702,  702,  702,  702,
      703,  703,  703,  703,  703,  703,  703,  703,  703,   61,
      708,  704,  704,  704,  704,  704,  704,  711,  712,  707,
       61,   61,  713,   61,  718,  949,   61,  949,  714,   61,
       61,  735,  949,   61,  715,   61,  708,  704,  704,  704,
      704,  704,  704,  711,  712,  716,   61,   61,  713,   61,

      717,   61,   61,  719,  714,   61,   61,  735,   61,   61,
      715,  720,   61,  736,  721,   61,   61,   61,   61,   61,
       61,  716,   61,  949,  949,  949,  717,   61,  949,  719,
      949,  949,  949,  949,   61,  949,  949,  720,   61,  736,
      721,   61,   61,   61,   61,   61,   61,  242,   61,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  623,  242,
      949,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      699,   61,  727,  727,  727,  727,  727,  727,  949,  949,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  949,
      949,  949,  949,  949,  949,  949,  772,   61,  727,  727,

      727,  727,  727,  727,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  740,   61,  729,  729,  729,  729,  729,
      729,  949,   61,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  949,   61,  949,  949,  949,  949,  949,  740,
       61,  729,  729,  729,  729,  729,  729,  181,   61,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  669,   61,
      731,  731,  731,  731,  731,  731,  949,   61,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  949,  741,  949,
      949,  949,  949,  949,  949,  949,  731,  731,  731,  731,
      731,  731,  181,   61,  732,  732,  732,  732,  732,  732,

      732,  732,  732,  733,  742,  734,  734,  734,  734,  734,
      734,  737,   61,  738,   61,   61,  743,  744,  949,  746,
       61,   61,  745,  795,   61,   61,  747,   61,  949,   61,
      742,  734,  734,  734,  734,  734,  734,  737,   61,  738,
       61,   61,  743,  744,  749,  746,   61,   61,  745,  795,
       61,   61,  747,   61,  748,   61,   61,  763,  949,  949,
       61,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      749,  949,  949,   61,  949,  949,  949,  949,  949,  949,
      748,  796,   61,  763,  764,  949,   61,  242,  949,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  699,   61,

      755,  755,  755,  755,  755,  755,  949,  796,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  949,   61,  949,
      949,  949,  949,  949,  949,  949,  755,  755,  755,  755,
      755,  755,  242,  949,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  757,   61,  758,  758,  758,  758,  758,
      758,  181,   61,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  669,   61,  949,  949,  949,  949,  949,  949,
      949,  758,  758,  758,  758,  758,  758,  181,   61,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  733,   61,
      760,  760,  760,  760,  760,  760,  949,  949,  760,  760,

      760,  760,  760,  760,  760,  760,  760,  949,  949,  949,
      949,  949,  949,  949,  949,  766,  760,  760,  760,  760,
      760,  760,  761,  761,  761,  761,  761,  761,  761,  761,
      761,   61,  767,  762,  762,  762,  762,  762,  762,   61,
      769,  766,   61,  765,  949,  949,  949,  773,  768,  949,
      776,  949,  824,   61,  770,  774,  794,   61,  767,  762,
      762,  762,  762,  762,  762,   61,  769,   61,   61,  765,
      771,   61,   61,  773,  768,  775,  776,  777,  824,   61,
      770,  774,  949,  949,  949,  949,  949,  949,  825,   61,
       61,   61,  949,   61,  949,  949,  771,   61,   61,  949,

      949,  775,  242,  777,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  699,  825,   61,   61,   61,  242,  949,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  757,
       61,  784,  784,  784,  784,  784,  784,  949,  949,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  949,  949,
      949,  949,  949,  949,  949,  949,   61,  784,  784,  784,
      784,  784,  784,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  798,   61,  786,  786,  786,  786,  786,  786,
      949,   61,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  949,  949,  949,  949,  830,  949,  949,  798,   61,

      786,  786,  786,  786,  786,  786,  181,   61,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  733,   61,  788,
      788,  788,  788,  788,  788,  949,  949,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  949,  793,  949,  949,
      949,  949,  949,  949,   61,  788,  788,  788,  788,  788,
      788,  181,   61,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  790,  793,  791,  791,  791,  791,  791,  791,
      792,  797,  799,   61,  804,  949,   61,   61,   61,  800,
      801,  802,  949,  803,  805,   61,  949,   61,  949,  819,
      791,  791,  791,  791,  791,  791,  792,  797,  799,   61,

      804,   61,   61,   61,  806,  826,  832,   61,   61,   61,
      805,   61,   61,   61,  949,  819,  813,  813,  813,  813,
      813,  813,  813,  813,  813,   61,  949,   61,  949,  831,
      806,  826,  832,   61,   61,   61,  949,  949,   61,  242,
      949,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      757,   61,  813,  813,  813,  813,  813,  813,  949,   61,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  949,
      849,  949,  949,  949,  949,  949,  949,  949,  813,  813,
      813,  813,  813,  813,  242,   61,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  846,  849,  815,  815,  815,

      815,  815,  815,  181,  850,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  733,   61,  949,  949,  949,  949,
      949,  846,  949,  815,  815,  815,  815,  815,  815,  181,
      850,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      790,   61,  817,  817,  817,  817,  817,  817,  949,  827,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  820,
      833,  828,  821,   61,  829,   61,  845,  834,  817,  817,
      817,  817,  817,  817,  822,  827,   61,  851,   61,   61,
       61,  823,   61,   61,   61,  820,  833,  870,  821,   61,
       61,   61,  845,  834,  949,  949,  949,  949,  949,  949,

      822,  949,   61,  851,   61,   61,   61,  823,   61,   61,
       61,  853,  949,  870,  854,  242,   61,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  757,  242,  949,  839,
      839,  839,  839,  839,  839,  839,  839,  839,   61,   61,
      840,  840,  840,  840,  840,  840,  949,   61,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  855,  949,  949,
      949,  949,  949,  949,   61,   61,  840,  840,  840,  840,
      840,  840,  181,   61,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  790,   61,  842,  842,  842,  842,  842,
      842,  949,  844,  842,  842,  842,  842,  842,  842,  842,

      842,  842,  847,  852,  856,  866,   61,  949,  848,   61,
       61,  842,  842,  842,  842,  842,  842,  865,  844,  857,
       61,   61,   61,   61,   61,   61,   61,   61,  847,  852,
      867,  866,   61,   61,  848,   61,  949,  949,  949,  949,
      949,  949,  949,  865,  949,  857,   61,   61,   61,   61,
       61,   61,   61,   61,  949,  949,  867,  949,  949,   61,
      242,  879,  862,  862,  862,  862,  862,  862,  862,  862,
      862,   61,  869,  863,  863,  863,  863,  863,  863,  949,
       61,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      949,  868,  872,   61,   61,   61,   61,   61,  869,  863,

      863,  863,  863,  863,  863,  181,   61,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  790,  868,  872,   61,
       61,   61,   61,  871,  871,  880,  871,  871,  871,  871,
      871,  871,  878,  242,  871,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  871,  871,  881,  949,   61,  883,
      884,  895,  886,  887,  898,  949,  949,   61,  878,   61,
      882,  882,   61,  882,  882,  882,  882,  882,  882,   61,
      899,  882,  881,  893,   61,  883,  884,  895,  886,  887,
      898,  882,  882,   61,  892,   61,  902,  894,   61,   61,
      910,   61,   61,  896,  897,   61,  899,  900,  901,  893,

      903,  907,   61,  908,  911,  909,   61,   61,  912,   61,
      892,   61,  902,  894,   61,   61,  910,   61,   61,  896,
      897,  913,  914,  900,  901,   61,  903,  907,   61,  908,
      911,  909,   61,   61,  912,   61,  915,   61,  916,   61,
       61,   61,   61,   61,  924,  921,  922,  913,  914,   61,
      925,   61,   61,  923,   61,  926,   61,   61,  949,   61,
      949,  933,  915,   61,  916,   61,  927,   61,   61,   61,
      924,  921,  922,  932,   61,   61,  925,  931,   61,  923,
       61,  926,   61,   61,   61,   61,   61,  933,  934,   61,
       61,  939,  927,   61,   61,   61,  949,  949,  949,  932,

       61,  949,  949,  931,  949,  949,  949,  949,   61,  949,
       61,  949,   61,  949,  934,  949,   61,  939,  949,   61,
       61,   61,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,   61,   41,   41,   41,   41,   43,
       43,   43,   43,   47,   47,   47,   47,   49,  949,   49,
       49,   50,   50,   50,   50,  114,  949,  114,  114,  118,
      118,  176,  176,  177,  177,  239,  239,  240,  240,  241,
      241,  305,  305,  306,  306,  370,  370,  371,  371,  372,
      372,  396,  949,  396,  396,  435,  435,  436,  436,  437,
      437,  505,  505,  506,  506,  564,  564,  565,  565,  566,

      566,  617,  617,  618,  618,  619,  619,  505,  505,  659,
      659,  660,  660,  693,  693,  694,  694,  695,  695,  722,
      722,  723,  723,  724,  724,  618,  618,  751,  751,  752,
      752,  778,  778,  779,  779,  780,  780,  807,  807,  808,
      808,  810,  810,  694,  694,  836,  836,  837,  837,  858,
      858,  859,  859,  860,  860,  871,  949,  871,  871,  873,
      949,  873,  873,  874,  874,  875,  875,  882,  949,  882,
      882,  885,  949,  885,  885,  751,  751,  889,  889,  890,
      890,  904,  904,  905,  905,  917,  917,  918,  918,  919,
      919,  808,  808,  929,  929,  935,  935,  936,  936,  937,

      937,  941,  941,  944,  944,  945,  945,  947,  947,  948,
      948,    7,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949
    } ;

static yyconst flex_int16_t yy_chk[5688] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   10,   10,   11,   11,   15,
       17,   27, 1038,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   24,   16,   16,   16,   16,   16,

       16,   28,   16,   37,   61,   24,   17,   27,   24,   28,
       37,   63,   30,   44,   44,   64,   28,   24,   16, 1034,
       24,   16,   16,   16,   16,   16,   16,   28,   16,   37,
       61,   24,   30, 1032,   24,   28,   37,   63,   30,   45,
       45,   64,   28,   24,   16,   20,   20, 1028,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   30,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   21,   21,   32,   21,   32, 1022,   39,   32, 1014,
       21, 1013,   21,   39,   46,   46, 1008,   65, 1004,   21,
     1003,   25,  999,  995,  957,  948,   66,   21,   21,   32,
       21,   32,   25,   39,   32,   25,   21,   25,   21,   39,
      947,   35,   35,   65,   29,   21,   22,   25,   22,   22,
       29,   22,   66,   35,   35,   67,   29,   22,   25,   22,
       22,   25,  945,   25,   67,  944,   22,   35,   35,  943,
       29,  942,   22,  941,   22,   22,   29,   22,  940,   35,
       35,   67,   29,   22,   31,   22,   22,  937,   31,   70,

       67,   33,   22,   23,   31,   40,   71,   23,   70,   31,
       31,   23,   33,   74,   23,   33,   23,   23,   33,   80,
       31,   40,  936,   23,   31,   70,  930,   33,  929,   23,
       31,   40,   71,   23,   70,   31,   31,   23,   33,   74,
       23,   33,   23,   23,   33,   80,  928,   40,   78,   23,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       78,   26,   26,   26,   26,   26,   26,  919,   26,  918,
      917,   90,   26,   34,   78,   26,  906,   34,  905,  904,
       38,   26,   69,   69,   38,   68,   78,   26,   26,   26,
       26,   26,   26,   34,   26,   36,   36,   90,   26,   34,

       38,   26,   68,   34,   72,   36,   38,   26,   69,   69,
       38,   68,   72,   36,   73,   76,   93,   76,   79,   34,
       82,   73,   36,   79,   72,   36,   38,  890,   68,  889,
       72,   36,  888,  876,  875,  874,   82,  860,   72,   36,
       73,   76,   93,   76,   79,  859,   82,   73,   36,   79,
       72,   36,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   82,   54,   54,   54,   54,   54,   54,  858,
       54,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       77,   75,  842,  838,  837,  836,  835,  813,   77,   54,
       54,   54,   54,   54,   54,   75,   54,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   77,   75,   59,   59,
       59,   59,   59,   59,   77,  810,  808,  807,  788,  782,
      781,   75,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  103,  780,   81,   59,   59,   59,   59,   59,   59,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       81,   62,   62,   62,   62,   62,   62,  103,   62,   81,
      779,   94,  778,   83,   87,   87,   84,  755,   89,  752,
       89,   62,   85,  751,   86,  750,   81,   62,   62,   62,
       62,   62,   62,   83,   62,   84,   84,   85,   86,   83,
       87,   87,   84,   88,   89,   94,   89,   62,   85,   91,

       86,   92,   92,   97,   91,   88,   96,  731,   97,   83,
       95,   84,   84,   85,   86,   98,   95,   98,   98,   88,
       99,   94,   96,  104,  107,   91,   98,   92,   92,   97,
       91,   88,   96,  100,   97,  105,   95,  101,  100,  102,
       99,   98,   95,   98,   98,  106,   99,  109,   96,  104,
      107,  124,   98,  106,  101,  108,  109,  101,  102,  100,
      112,  110,  112,  101,  100,  102,   99,  108,  110,  105,
      125,  106,  111,  109,  128,  111,  725,  124,  724,  106,
      101,  108,  109,  101,  102,  723,  112,  110,  112,  722,
      710,  697,  695,  108,  110,  105,  125,  694,  111,  693,

      128,  111,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  131,  115,  115,  115,  115,  115,  115,  122,
      115,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      134,  134,  667,  661,  660,  659,  658,  621,  131,  115,
      115,  115,  115,  115,  115,  138,  115,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  134,  134,  119,  119,
      119,  119,  119,  119,  619,  138,  618,  617,  137,  574,
      567,  138,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  566,  565,  173,  119,  119,  119,  119,  119,  119,
      121,  138,  121,  121,  121,  121,  121,  121,  121,  121,

      121,  121,  137,  121,  121,  121,  121,  121,  121,  173,
      180,  564,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  509,  506,  505,  504,  447,  438,  437,  137,  121,
      121,  121,  121,  121,  121,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  129,  123,  123,  123,  123,
      123,  123,  126,  127,  130,  126,  436,  135,  129,  127,
      132,  135,  132,  435,  130,  375,  133,  148,  141,  372,
      141,  129,  123,  123,  123,  123,  123,  123,  126,  127,
      130,  126,  133,  135,  129,  127,  132,  135,  132,  136,
      130,  140,  133,  139,  141,  142,  141,  143,  144,  143,

      145,  148,  142,  371,  146,  136,  147,  140,  133,  152,
      139,  149,  151,  151,  370,  136,  144,  140,  145,  139,
      146,  142,  147,  143,  144,  143,  145,  148,  142,  149,
      146,  136,  147,  140,  315,  150,  139,  149,  153,  307,
      157,  156,  144,  152,  145,  154,  146,  151,  147,  150,
      153,  155,  157,  306,  154,  149,  156,  305,  154,  159,
      155,  150,  160,  154,  153,  158,  157,  156,  160,  152,
      162,  154,  165,  151,  165,  150,  153,  155,  157,  159,
      154,  158,  156,  164,  154,  159,  155,  161,  160,  154,
      161,  158,  163,  163,  160,  164,  166,  304,  165,  167,

      165,  168,  169,  251,  162,  159,  186,  158,  241,  164,
      188,  170,  171,  161,  166,  167,  161,  168,  163,  163,
      169,  164,  166,  170,  172,  167,  196,  168,  169,  171,
      162,  189,  186,  189,  172,  240,  188,  170,  171,  239,
      166,  167,  238,  168,  190,  200,  169,  212,  178,  170,
      172,  177,  196,  176,  118,  171,  116,  189,  191,  189,
      172,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  200,  174,  174,  174,  174,  174,  174,  190,  174,
      181,  181,  181,  181,  181,  181,  181,  181,  181,   55,
       51,   50,  191,   47,   42,   19,   18,   14,  174,  174,

      174,  174,  174,  174,  190,  174,  179,   12,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  191,  179,
      179,  179,  179,  179,  179,  184,  219,  184,  184,  184,
      184,  184,  184,  184,  184,  184,    7,  194,    4,    3,
        0,    0,    0,    0,  194,  179,  179,  179,  179,  179,
      179,  182,  219,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  194,  182,  182,  182,  182,  182,  182,
      194,  187,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,    0,    0,    0,    0,    0,  206,  206,  187,
      182,  182,  182,  182,  182,  182,  183,  183,  183,  183,

      183,  183,  183,  183,  183,  187,  192,  183,  183,  183,
      183,  183,  183,  206,  206,  187,    0,    0,    0,    0,
        0,    0,  192,    0,    0,    0,    0,    0,    0,    0,
        0,  187,  192,  183,  183,  183,  183,  183,  183,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  192,  195,
      185,  185,  185,  185,  185,  185,  193,  197,  193,  197,
      198,  199,  198,  201,  203,  204,  201,  204,    0,  195,
      208,  208,    0,  199,  202,  195,  185,  185,  185,  185,
      185,  185,  193,  197,  193,  197,  198,  199,  198,  201,
      202,  204,  201,  204,  205,  195,  208,  208,  203,  199,

      202,  207,  210,  209,  207,  211,  217,  214,  213,  214,
      205,  215,  209,  209,  209,  210,  202,  215,  211,    0,
      205,  209,  217,  213,  203,  213,    0,  207,  210,  209,
      207,  211,  217,  214,  213,  214,  205,  215,  209,  209,
      209,  210,  220,  215,  211,  216,  218,  209,  217,  213,
      221,  213,  218,  223,  216,  222,  231,  223,  220,  224,
      224,  225,  228,    0,    0,    0,  227,  221,  220,  228,
        0,  216,  218,  222,  226,  232,  221,  225,  218,  223,
      216,  222,  227,  223,  220,  224,  224,  225,  228,  226,
      231,  226,  227,  221,  233,  228,  229,  229,  230,  222,

      226,  232,  234,  225,  235,  236,  255,  230,  227,  257,
      235,  252,  252,    0,  233,  226,  231,  226,  257,  234,
      233,    0,  229,  229,  230,    0,    0,    0,  234,  253,
      235,  266,  255,  230,  253,  257,  235,  252,  252,  236,
      233,  290,    0,    0,  257,  234,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  253,    0,  266,    0,    0,
      253,    0,    0,    0,    0,  236,  243,  290,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  292,  243,
      243,  243,  243,  243,  243,  245,  258,  245,  245,  245,
      245,  245,  245,  245,  245,  245,    0,    0,    0,    0,

        0,    0,    0,    0,  292,  243,  243,  243,  243,  243,
      243,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      258,  327,  244,  244,  244,  244,  244,  244,  246,  327,
      246,  246,  246,  246,  246,  246,  246,  246,  246,    0,
      259,    0,    0,    0,    0,    0,  258,  327,  244,  244,
      244,  244,  244,  244,  247,  327,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  278,  247,  247,  247,
      247,  247,  247,  248,  259,  248,  248,  248,  248,  248,
      248,  248,  248,  248,    0,  278,    0,    0,    0,    0,
        0,    0,  278,  247,  247,  247,  247,  247,  247,  249,

      259,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  278,  249,  249,  249,  249,  249,  249,  250,    0,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  254,
        0,  254,  260,  260,  256,  256,  256,  261,  249,  249,
      249,  249,  249,  249,  256,  262,  262,  264,  263,  261,
      267,  268,  269,  265,  264,  254,  270,  254,  260,  260,
      256,  256,  256,  261,  263,  265,  271,  267,  270,    0,
      256,  262,  262,  264,  263,  261,  267,  272,  273,  265,
      264,  271,  270,  274,  273,  268,  269,  279,  276,  272,
      263,  265,  271,  267,  270,  275,  277,    0,  283,  274,

      280,  275,  279,  272,  273,  283,  280,  271,  276,  274,
      273,  268,  269,  279,  276,  272,  284,  281,  288,  282,
      287,  275,  285,  287,  283,  274,  280,  275,  279,  285,
      277,  283,  280,  281,  276,  282,  284,  291,  286,  289,
      289,  293,  284,  281,  286,  282,  287,  293,  285,  287,
        0,  295,  288,  291,  296,  285,  277,    0,  294,  281,
      295,  282,  284,  291,  286,  289,  289,  293,  296,  297,
      286,  298,  297,  293,  294,  332,  299,  295,  288,  291,
      296,  299,  301,  300,  294,  300,  295,  303,  346,  302,
        0,  298,  302,    0,  296,  297,    0,  298,  297,    0,

      294,  332,  299,    0,  303,    0,  347,  299,    0,  300,
        0,  300,    0,  303,  346,  302,  301,  298,  302,  308,
        0,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      303,  310,  347,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  301,  309,    0,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,    0,  309,  309,  309,  309,
      309,  309,  312,  351,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  309,  309,  309,  309,  309,  309,  311,  351,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,

      333,  311,  311,  311,  311,  311,  311,  314,  333,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  362,
        0,    0,    0,    0,    0,    0,  333,  311,  311,  311,
      311,  311,  311,  316,  333,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  362,  316,  316,  316,  316,
      316,  316,  318,  319,  318,  318,  318,  318,  318,  318,
      318,  318,  318,    0,    0,    0,  330,    0,    0,  321,
      357,  321,  316,  316,  316,  316,  316,  316,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  319,  320,  317,
      317,  317,  317,  317,  317,  321,  322,  321,  323,  326,

      330,  326,  329,  331,  357,  324,  331,  325,  320,  329,
      323,  394,  322,  319,  320,  317,  317,  317,  317,  317,
      317,  324,  322,  325,  323,  326,  330,  326,  329,  331,
      357,  324,  331,  325,  320,  329,  323,  394,  322,    0,
      335,  337,  337,  334,  336,  358,    0,  324,  335,  325,
      328,  328,  336,  328,  328,  328,  328,  328,  328,  328,
      334,  328,  338,  341,  341,  339,  335,  337,  337,  334,
      336,  328,  328,  339,  335,  340,  342,  343,  336,  358,
      344,  345,  338,    0,  340,  343,  334,  345,  338,  341,
      341,  339,  344,  342,  349,  350,  348,  349,  350,  339,

      354,  340,  342,  343,  348,  358,  344,  345,  338,  354,
      340,  343,  352,  345,  352,  353,  355,    0,  344,  342,
      349,  350,  348,  349,  350,  356,  354,  363,  359,  353,
      348,  360,  355,  361,  360,  354,  359,  368,  352,  363,
      352,  353,  355,  356,  364,    0,  364,  366,  366,  361,
      365,  356,  367,  363,  359,  353,  365,  360,  355,  361,
      360,  367,  359,  386,  397,  363,  386,  369,  387,  356,
      364,  368,  364,  366,  366,  361,  365,  413,  367,  369,
        0,    0,  365,    0,    0,    0,    0,  367,    0,  386,
      397,    0,  386,  369,    0,    0,    0,  368,    0,    0,

        0,    0,  387,  413,    0,  369,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  374,    0,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  376,  387,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  414,
      376,  376,  376,  376,  376,  376,  378,    0,  378,  378,
      378,  378,  378,  378,  378,  378,  378,    0,    0,    0,
        0,    0,    0,    0,  420,  414,  376,  376,  376,  376,
      376,  376,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  390,  390,  377,  377,  377,  377,  377,  377,  379,
      420,  379,  379,  379,  379,  379,  379,  379,  379,  379,

        0,  431,    0,    0,    0,    0,    0,  390,  390,  377,
      377,  377,  377,  377,  377,  380,    0,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  381,  431,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,    0,  381,
      381,  381,  381,  381,  381,  382,  462,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  381,  381,  381,  381,  381,
      381,  383,  462,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  391,  383,  383,  383,  383,  383,  383,
      384,  389,  384,  384,  384,  384,  384,  384,  384,  384,

      384,  388,  393,  391,  476,  388,  389,    0,  392,  391,
      383,  383,  383,  383,  383,  383,  385,  389,  479,  385,
      392,    0,  393,  396,  396,  385,    0,  388,  393,  391,
      476,  388,  389,  401,  392,  399,  399,  395,  400,    0,
      401,    0,  385,    0,  479,  385,  392,  395,  393,  396,
      396,  385,  398,  404,  400,  395,  395,  403,  398,  401,
      398,  399,  399,  395,  400,  398,  401,  405,  402,  404,
      407,  406,  408,  395,  402,    0,  407,  403,  398,  404,
      400,  395,  395,  403,  398,  405,  398,  406,  408,  409,
      410,  398,  411,  405,  402,  404,  407,  406,  408,  415,

      402,  412,  407,  403,  412,  409,  410,  411,  416,  416,
      418,  405,  418,  406,  408,  409,  410,    0,  411,  415,
      417,  417,  419,  419,    0,  415,  423,  412,    0,  424,
      412,  409,  410,  411,  416,  416,  418,  422,  418,  425,
      421,  424,    0,  422,  423,  415,  417,  417,  419,  419,
      421,    0,  423,  426,  426,  424,  427,  421,  427,  425,
      429,  428,  429,  422,  430,  425,  421,  424,  428,  422,
      423,  430,  433,  466,  433,  434,  421,  432,  434,  426,
      426,  466,  427,  421,  427,  425,  429,  428,  429,  432,
      430,    0,    0,    0,  428,    0,    0,  430,  433,  466,

      433,  434,    0,  432,  434,    0,    0,  466,    0,    0,
        0,  480,    0,    0,  439,  432,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  440,    0,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  441,  480,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  481,  441,
      441,  441,  441,  441,  441,  442,  483,  442,  442,  442,
      442,  442,  442,  442,  442,  442,    0,  456,    0,    0,
        0,    0,    0,    0,  481,  441,  441,  441,  441,  441,
      441,  443,  483,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  454,  443,  443,  443,  443,  443,  443,

      444,  456,  444,  444,  444,  444,  444,  444,  444,  444,
      444,    0,    0,  454,    0,    0,    0,    0,    0,  454,
      443,  443,  443,  443,  443,  443,  446,  456,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  448,  454,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
        0,  448,  448,  448,  448,  448,  448,  450,    0,  450,
      450,  450,  450,  450,  450,  450,  450,  450,    0,    0,
        0,    0,    0,    0,    0,    0,  451,  448,  448,  448,
      448,  448,  448,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  451,  452,  449,  449,  449,  449,  449,  449,

      452,  453,  451,  455,    0,  459,  460,  459,  453,    0,
      461,  460,  455,  461,  457,  458,    0,    0,  451,  452,
      449,  449,  449,  449,  449,  449,  452,  453,  458,  455,
      457,  459,  460,  459,  453,  463,  461,  460,  455,  461,
      457,  458,  464,  465,  463,  467,  468,  469,  472,  473,
      470,  467,  473,  474,  458,  468,  457,  470,  471,  465,
      471,  463,  464,  469,  475,  472,  490,    0,  464,  465,
      463,  467,  468,  469,  472,  473,  470,  467,  473,  477,
      475,  468,  477,  470,  471,  465,  471,  474,  464,  469,
      475,  472,  478,  482,  484,  482,  486,  485,  487,  488,

      490,  478,  489,    0,    0,  477,  475,  493,  477,  485,
        0,  491,  486,  474,  487,  489,  493,  494,  478,  482,
      484,  482,  486,  485,  487,  488,  490,  478,  489,  491,
      496,  492,  495,  493,  494,  485,  498,  491,  486,  492,
      487,  489,  493,  494,  495,  497,  496,  497,  499,  501,
      498,  500,  503,  520,  502,  491,  496,  492,  495,  502,
      494,  529,  498,  520,  501,  492,  544,  500,    0,    0,
      495,  497,  496,  497,  499,  501,  498,  500,  503,  520,
      502,    0,    0,    0,    0,  502,    0,  529,    0,  520,
      501,    0,  544,  500,  507,  507,  507,  507,  507,  507,

      507,  507,  507,  508,    0,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  510,    0,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,    0,  510,  510,
      510,  510,  510,  510,  512,    0,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  510,  510,  510,  510,  510,  510,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  518,
      521,  511,  511,  511,  511,  511,  511,  515,  521,  515,
      515,  515,  515,  515,  515,  515,  515,  515,    0,  518,
        0,    0,    0,    0,    0,  518,  521,  511,  511,  511,

      511,  511,  511,  514,  521,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  518,  514,  514,  514,  514,
      514,  514,  517,  545,  517,  517,  517,  517,  517,  517,
      517,  517,  517,    0,    0,    0,    0,    0,    0,    0,
        0,  528,  514,  514,  514,  514,  514,  514,  516,  545,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      519,  516,  516,  516,  516,  516,  516,  522,  523,  519,
      524,  524,  525,    0,    0,  528,    0,  523,  525,  522,
        0,    0,  530,  526,  527,    0,  519,  516,  516,  516,
      516,  516,  516,  522,  523,  519,  524,  524,  525,  526,

      527,  528,  530,  523,  525,  522,  532,  533,  530,  526,
      527,  531,  534,  532,  531,  535,  538,  536,  539,  534,
      536,  537,  537,  540,  542,  526,  527,  533,  530,  546,
      547,    0,  532,  533,  539,  535,    0,  531,  534,  532,
      531,  535,  548,  536,  539,  534,  536,  537,  537,  548,
      538,  541,  543,  533,  543,  546,  547,  540,  542,  541,
      539,  535,  549,  550,  551,  549,  550,  556,  548,  558,
      552,  553,  558,  554,  555,  548,  538,  541,  543,  552,
      543,  554,  559,  540,  542,  541,  555,  553,  549,  550,
      551,  549,  550,  556,  557,  558,  552,  553,  558,  554,

      555,  557,  560,  561,  587,  552,  562,  554,  559,  563,
        0,    0,  555,  553,    0,    0,    0,    0,    0,  578,
      557,  578,  562,  589,  596,  563,    0,  557,  560,  561,
      587,    0,  562,    0,    0,  563,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  578,  593,  578,  562,  589,
      596,  563,  569,    0,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  593,  569,  569,  569,  569,  569,
      569,  570,  593,  570,  570,  570,  570,  570,  570,  570,
      570,  570,    0,  599,    0,    0,    0,    0,    0,    0,
      593,  569,  569,  569,  569,  569,  569,  571,    0,  571,

      571,  571,  571,  571,  571,  571,  571,  571,  571,  599,
      571,  571,  571,  571,  571,  571,  572,  584,  572,  572,
      572,  572,  572,  572,  572,  572,  572,    0,    0,  584,
        0,    0,    0,    0,    0,    0,  571,  571,  571,  571,
      571,  571,  573,  584,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  575,  584,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,    0,  575,  575,  575,
      575,  575,  575,  577,    0,  577,  577,  577,  577,  577,
      577,  577,  577,  577,    0,    0,    0,    0,  591,    0,
        0,    0,  583,  575,  575,  575,  575,  575,  575,  576,

      576,  576,  576,  576,  576,  576,  576,  576,  583,  585,
      576,  576,  576,  576,  576,  576,  579,  580,  583,  581,
      579,  581,  591,  582,  580,  582,  585,  586,    0,    0,
      590,  586,  590,    0,  583,  585,  576,  576,  576,  576,
      576,  576,  579,  580,  592,  581,  579,  581,  591,  582,
      580,  582,  585,  586,  588,  594,  590,  586,  590,  597,
      595,  592,  598,  588,  600,  602,  603,  604,  601,  605,
      592,  594,  595,  600,  601,  606,  607,  602,  608,  597,
      588,  594,  598,  610,  609,  597,  595,  592,  598,  588,
      600,  602,  603,  604,  601,  605,  609,  594,  595,  600,

      601,  606,  607,  602,  608,  597,  611,  612,  598,  610,
      609,  613,  614,  615,  615,  630,  616,  632,  611,  636,
      629,  637,  609,  612,    0,    0,    0,    0,    0,    0,
        0,    0,  611,  612,  616,    0,  629,  613,  614,  615,
      615,  630,  616,  632,  611,  636,  629,  637,  620,  612,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      616,  622,  629,  622,  622,  622,  622,  622,  622,  622,
      622,  622,  622,  639,  622,  622,  622,  622,  622,  622,
      624,    0,  624,  624,  624,  624,  624,  624,  624,  624,
      624,    0,    0,    0,    0,    0,    0,    0,  644,  639,

      622,  622,  622,  622,  622,  622,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  633,  633,  623,  623,  623,
      623,  623,  623,  626,  644,  626,  626,  626,  626,  626,
      626,  626,  626,  626,    0,    0,    0,    0,    0,    0,
        0,  633,  633,  623,  623,  623,  623,  623,  623,  625,
        0,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  635,  625,  625,  625,  625,  625,  625,  628,  635,
      628,  628,  628,  628,  628,  628,  628,  628,  628,    0,
        0,    0,    0,    0,    0,    0,  643,  635,  625,  625,
      625,  625,  625,  625,  627,  635,  627,  627,  627,  627,

      627,  627,  627,  627,  627,  627,  638,  627,  627,  627,
      627,  627,  627,  631,  634,  640,  641,  640,  642,  631,
      643,  634,  638,  645,  642,  641,    0,    0,    0,    0,
      645,    0,  638,  627,  627,  627,  627,  627,  627,  631,
      634,  640,  641,  640,  642,  631,  643,  634,  638,  645,
      642,  641,  646,  647,  653,  648,  645,  649,  650,  654,
      654,  646,  657,  671,  656,  655,  672,  671,  672,  653,
      647,  648,  655,  673,  649,  650,  656,    0,  646,  647,
      653,  648,    0,  649,  650,  654,  654,  646,  657,  671,
      656,  655,  672,  671,  672,  653,  647,  648,  655,  673,

      649,  650,  656,  662,    0,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  674,  662,  662,  662,  662,
      662,  662,  663,  678,  663,  663,  663,  663,  663,  663,
      663,  663,  663,    0,    0,    0,    0,    0,    0,    0,
        0,  674,  662,  662,  662,  662,  662,  662,  664,  678,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      677,  664,  664,  664,  664,  664,  664,  665,  679,  665,
      665,  665,  665,  665,  665,  665,  665,  665,    0,    0,
      677,    0,    0,    0,    0,    0,  677,  664,  664,  664,
      664,  664,  664,  666,  679,  666,  666,  666,  666,  666,

      666,  666,  666,  666,  666,  668,  677,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  668,    0,  668,  668,
      668,  668,  668,  668,  670,    0,  670,  670,  670,  670,
      670,  670,  670,  670,  670,    0,    0,    0,    0,    0,
        0,    0,    0,  675,  668,  668,  668,  668,  668,  668,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  675,
      676,  669,  669,  669,  669,  669,  669,  680,  681,  675,
      683,  681,  682,  684,  688,    0,  676,    0,  682,  690,
      682,  705,    0,  680,  685,  675,  676,  669,  669,  669,
      669,  669,  669,  680,  681,  686,  683,  681,  682,  684,

      687,  685,  676,  689,  682,  690,  682,  705,  688,  680,
      685,  691,  691,  706,  692,  686,  687,  707,  717,  689,
      706,  686,  692,    0,    0,    0,  687,  685,    0,  689,
        0,    0,    0,    0,  688,    0,    0,  691,  691,  706,
      692,  686,  687,  707,  717,  689,  706,  696,  692,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  698,
        0,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  748,  698,  698,  698,  698,  698,  698,  700,    0,
      700,  700,  700,  700,  700,  700,  700,  700,  700,    0,
        0,    0,    0,    0,    0,    0,  742,  748,  698,  698,

      698,  698,  698,  698,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  711,  749,  699,  699,  699,  699,  699,
      699,  702,  742,  702,  702,  702,  702,  702,  702,  702,
      702,  702,    0,  711,    0,    0,    0,    0,    0,  711,
      749,  699,  699,  699,  699,  699,  699,  701,  742,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  711,
      701,  701,  701,  701,  701,  701,  704,  766,  704,  704,
      704,  704,  704,  704,  704,  704,  704,    0,  712,    0,
        0,    0,    0,    0,    0,    0,  701,  701,  701,  701,
      701,  701,  703,  766,  703,  703,  703,  703,  703,  703,

      703,  703,  703,  703,  713,  703,  703,  703,  703,  703,
      703,  708,  712,  709,  708,  709,  714,  715,    0,  718,
      715,  713,  716,  767,  716,  718,  719,  719,    0,  714,
      713,  703,  703,  703,  703,  703,  703,  708,  712,  709,
      708,  709,  714,  715,  721,  718,  715,  713,  716,  767,
      716,  718,  719,  719,  720,  714,  720,  735,    0,  727,
      721,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      721,    0,    0,  735,    0,    0,    0,    0,    0,    0,
      720,  768,  720,  735,  736,    0,  721,  726,    0,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  735,

      726,  726,  726,  726,  726,  726,  729,  768,  729,  729,
      729,  729,  729,  729,  729,  729,  729,    0,  736,    0,
        0,    0,    0,    0,    0,    0,  726,  726,  726,  726,
      726,  726,  728,    0,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  736,  728,  728,  728,  728,  728,
      728,  730,  772,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  775,    0,    0,    0,    0,    0,    0,
        0,  728,  728,  728,  728,  728,  728,  732,  772,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  775,
      732,  732,  732,  732,  732,  732,  734,    0,  734,  734,

      734,  734,  734,  734,  734,  734,  734,    0,    0,    0,
        0,    0,    0,    0,    0,  738,  732,  732,  732,  732,
      732,  732,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  738,  739,  733,  733,  733,  733,  733,  733,  737,
      740,  738,  740,  737,    0,    0,    0,  743,  739,    0,
      746,    0,  795,  746,  741,  744,  765,  738,  739,  733,
      733,  733,  733,  733,  733,  737,  740,  743,  740,  737,
      741,  744,  741,  743,  739,  745,  746,  747,  795,  746,
      741,  744,    0,    0,    0,    0,    0,    0,  796,  747,
      765,  745,    0,  743,    0,    0,  741,  744,  741,    0,

        0,  745,  754,  747,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  796,  747,  765,  745,  756,    0,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      797,  756,  756,  756,  756,  756,  756,  758,    0,  758,
      758,  758,  758,  758,  758,  758,  758,  758,    0,    0,
        0,    0,    0,    0,    0,    0,  797,  756,  756,  756,
      756,  756,  756,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  770,  800,  757,  757,  757,  757,  757,  757,
      760,  770,  760,  760,  760,  760,  760,  760,  760,  760,
      760,    0,    0,    0,    0,  802,    0,    0,  770,  800,

      757,  757,  757,  757,  757,  757,  759,  770,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  802,  759,
      759,  759,  759,  759,  759,  762,    0,  762,  762,  762,
      762,  762,  762,  762,  762,  762,    0,  764,    0,    0,
        0,    0,    0,    0,  802,  759,  759,  759,  759,  759,
      759,  761,  764,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  764,  761,  761,  761,  761,  761,  761,
      763,  769,  771,  763,  774,    0,  774,  771,  764,  773,
      773,  773,    0,  773,  776,  792,    0,  769,    0,  792,
      761,  761,  761,  761,  761,  761,  763,  769,  771,  763,

      774,  776,  774,  771,  777,  798,  804,  819,  804,  773,
      776,  792,  777,  769,  784,  792,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  798,    0,  776,    0,  803,
      777,  798,  804,  819,  804,  773,    0,    0,  777,  783,
        0,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  798,  783,  783,  783,  783,  783,  783,  786,  803,
      786,  786,  786,  786,  786,  786,  786,  786,  786,    0,
      824,    0,    0,    0,    0,    0,    0,    0,  783,  783,
      783,  783,  783,  783,  785,  803,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  822,  824,  785,  785,  785,

      785,  785,  785,  787,  825,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  822,    0,    0,    0,    0,
        0,  822,    0,  785,  785,  785,  785,  785,  785,  789,
      825,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  822,  789,  789,  789,  789,  789,  789,  791,  799,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  793,
      805,  801,  794,  793,  801,  799,  821,  806,  789,  789,
      789,  789,  789,  789,  794,  799,  805,  826,  832,  826,
      834,  794,  794,  806,  821,  793,  805,  849,  794,  793,
      801,  799,  821,  806,    0,    0,    0,    0,    0,    0,

      794,    0,  805,  826,  832,  826,  834,  794,  794,  806,
      821,  828,    0,  849,  829,  812,  801,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  814,    0,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  828,  829,
      814,  814,  814,  814,  814,  814,  815,  853,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  830,    0,    0,
        0,    0,    0,    0,  828,  829,  814,  814,  814,  814,
      814,  814,  816,  853,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  830,  816,  816,  816,  816,  816,
      816,  817,  820,  817,  817,  817,  817,  817,  817,  817,

      817,  817,  823,  827,  831,  845,  854,    0,  823,  820,
      830,  816,  816,  816,  816,  816,  816,  844,  820,  833,
      823,  827,  833,  845,  844,  855,  856,  846,  823,  827,
      846,  845,  854,  831,  823,  820,    0,    0,    0,    0,
        0,    0,    0,  844,    0,  833,  823,  827,  833,  845,
      844,  855,  856,  846,    0,    0,  846,    0,    0,  831,
      839,  867,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  857,  848,  839,  839,  839,  839,  839,  839,  840,
      848,  840,  840,  840,  840,  840,  840,  840,  840,  840,
        0,  847,  851,  865,  851,  867,  847,  857,  848,  839,

      839,  839,  839,  839,  839,  841,  848,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  847,  851,  865,
      851,  867,  847,  852,  852,  868,  852,  852,  852,  852,
      852,  852,  866,  862,  852,  862,  862,  862,  862,  862,
      862,  862,  862,  862,  852,  852,  869,    0,  866,  871,
      871,  881,  873,  873,  883,    0,    0,  881,  866,  868,
      872,  872,  869,  872,  872,  872,  872,  872,  872,  873,
      884,  872,  869,  879,  866,  871,  871,  881,  873,  873,
      883,  872,  872,  881,  878,  868,  886,  880,  869,  878,
      895,  879,  880,  882,  882,  873,  884,  885,  885,  879,

      887,  892,  892,  893,  896,  894,  886,  887,  897,  893,
      878,  894,  886,  880,  885,  878,  895,  879,  880,  882,
      882,  898,  900,  885,  885,  903,  887,  892,  892,  893,
      896,  894,  886,  887,  897,  893,  901,  894,  902,  902,
      885,  907,  900,  901,  911,  908,  909,  898,  900,  909,
      913,  903,  908,  910,  910,  914,  914,  915,    0,  923,
        0,  924,  901,  927,  902,  902,  916,  907,  900,  901,
      911,  908,  909,  922,  922,  909,  913,  921,  908,  910,
      910,  914,  914,  915,  921,  923,  916,  924,  926,  927,
      932,  931,  916,  931,  934,  939,    0,    0,    0,  922,

      922,    0,    0,  921,    0,    0,    0,    0,  926,    0,
      921,    0,  916,    0,  926,    0,  932,  931,    0,  931,
      934,  939,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  926,  950,  950,  950,  950,  951,
      951,  951,  951,  952,  952,  952,  952,  953,    0,  953,
      953,  954,  954,  954,  954,  955,    0,  955,  955,  956,
      956,  958,  958,  959,  959,  960,  960,  961,  961,  962,
      962,  963,  963,  964,  964,  965,  965,  966,  966,  967,
      967,  968,    0,  968,  968,  969,  969,  970,  970,  971,
      971,  972,  972,  973,  973,  974,  974,  975,  975,  976,

      976,  977,  977,  978,  978,  979,  979,  980,  980,  981,
      981,  982,  982,  983,  983,  984,  984,  985,  985,  986,
      986,  987,  987,  988,  988,  989,  989,  990,  990,  991,
      991,  992,  992,  993,  993,  994,  994,  996,  996,  997,
      997,  998,  998, 1000, 1000, 1001, 1001, 1002, 1002, 1005,
     1005, 1006, 1006, 1007, 1007, 1009,    0, 1009, 1009, 1010,
        0, 1010, 1010, 1011, 1011, 1012, 1012, 1015,    0, 1015,
     1015, 1016,    0, 1016, 1016, 1017, 1017, 1018, 1018, 1019,
     1019, 1020, 1020, 1021, 1021, 1023, 1023, 1024, 1024, 1025,
     1025, 1026, 1026, 1027, 1027, 1029, 1029, 1030, 1030, 1031,

     1031, 1033, 1033, 1035, 1035, 1036, 1036, 1037, 1037, 1039,
     1039,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[114] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 2046 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 2156 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 950 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5612 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 59 "SrvLexer.l"
{ return SrvParser::LOGCOLORS_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 61 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 64 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 69 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::ACCEPT_UNKNOWN_FQDN_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::FQDN_DDNS_ADDRESS_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 108 "SrvLexer.l"
{ return SrvParser::REMOTE_AUTOCONF_NEIGHBORS_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::AFTR_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::BULKLQ_ACCEPT_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::BULKLQ_TCPPORT_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::BULKLQ_MAX_CONNS_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::BULKLQ_TIMEOUT_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 122 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 125 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 126 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{ return SrvParser::CLIENT_CLASS_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{ return SrvParser::MATCH_IF_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 130 "SrvLexer.l"
{ return SrvParser::EQ_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 131 "SrvLexer.l"
{ return SrvParser::AND_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
{ return SrvParser::OR_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 134 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_DATA_; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 135 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_EN_; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 136 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_DATA_; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 137 "SrvLexer.l"
{ return SrvParser::ALLOW_; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 138 "SrvLexer.l"
{ return SrvParser::DENY_; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 139 "SrvLexer.l"
{ return SrvParser::SUBSTRING_; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 140 "SrvLexer.l"
{ return SrvParser::CONTAIN_; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 141 "SrvLexer.l"
{ return SrvParser::STRING_KEYWORD_; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 142 "SrvLexer.l"
{ return SrvParser::ADDRESS_LIST_; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 145 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 146 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 147 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 148 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 150 "SrvLexer.l"
;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 152 "SrvLexer.l"
;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 154 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 159 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 160 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 161 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 99:
YY_RULE_SETUP
#line 168 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 177 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 186 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 195 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 204 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 213 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 222 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 234 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 241 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
	 ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
	 ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 262 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
	yytext[1]='0'; //if odd then no-meaning zero at the beginning
	len = strlen(yytext)-1;
	ptr = yytext+1;
    } else {
	len = strlen(yytext)-2;
	ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
	yylval.duidval.duid[i>>1]<<=4;
	if (!isxdigit(ptr[i])) {
	     Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
	     YYABORT;
	}
	if (isalpha(ptr[i])) {
	    yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
	} else {
	    yylval.duidval.duid[i>>1]|=ptr[i]-'0';
	}
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 294 "SrvLexer.l"
{
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   // Log(Crit) << "#### Detected [" << yytext << "] as DUID [len=" << len << "]" << LogEnd;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
	x = (toupper(*pos)-'A' + 10);
      else
	x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))
	x += (toupper(*(pos+1))-'A' + 10);
      else
	x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }

   return SrvParser::DUID_;
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 322 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd;
      YYABORT;
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 332 "SrvLexer.l"
{
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) {
	Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd;
	YYABORT;
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 341 "SrvLexer.l"
{ return yytext[0]; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 344 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 2975 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 950 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 950 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 949);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 344 "SrvLexer.l"



