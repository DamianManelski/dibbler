#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 84
#define YY_END_OF_BUFFER 85
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[706] =
    {   0,
        1,    1,    0,    0,    0,    0,   85,   83,    2,    1,
        1,   83,   66,   83,   83,   82,   82,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   70,   70,   84,
        1,    1,    1,    0,   78,   66,    0,   78,   68,   67,
       82,    0,    0,   81,    0,   75,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   63,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   16,   17,   79,   79,
       79,   79,   79,   79,   79,   79,   69,   67,   82,    0,

        0,   74,   80,   73,   73,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   62,   82,    0,    0,    0,   72,   72,    0,
       73,    0,   73,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   36,   79,   79,   79,   79,
       79,    0,   79,   79,   79,   79,   79,   79,   22,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   64,   79,
       79,   79,   79,   82,    0,    0,    0,    0,   72,    0,

       72,    0,   73,   73,   73,   73,   79,   79,   79,   79,
       79,    4,   79,   79,   79,   79,   79,   65,    3,   79,
       79,   79,   79,   79,   79,    0,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,    7,   23,   79,   79,
       79,   79,   79,   79,   79,   79,   79,    0,    0,    0,
        0,   72,   72,   72,   72,    0,   73,   73,   73,    0,
       73,   79,   79,   79,   79,   79,   79,   79,   28,   79,
       79,   31,   79,   79,   79,   79,   79,   79,   79,   79,
        0,    0,   79,   79,   79,   29,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       79,    0,    0,    0,   72,   72,   72,    0,   72,    0,
        0,   73,   73,   73,   73,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,    0,    0,   79,   79,   79,   79,   79,
       45,   79,   79,   79,   79,   79,   79,   79,   79,   20,
       79,   79,   79,    0,    0,    0,    0,    0,   72,   72,
       72,   72,    0,   73,   73,   73,    0,   73,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   41,   79,   12,   10,    0,
        0,   79,   79,   79,   43,   79,   79,   79,   79,   79,

       79,   79,   79,    5,   79,   79,   79,   13,    0,    0,
        0,   72,   72,   72,    0,   72,   77,   73,   73,   73,
       73,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   11,    0,
        0,   79,   79,   79,   44,   79,   79,   79,   79,   79,
       79,    6,   33,   79,   79,    0,    0,    0,   76,   72,
       72,   72,   72,   73,   73,   73,    0,   73,   79,   79,
       79,   79,   79,   79,   42,   79,   79,   79,   79,   79,
       30,   79,   79,   79,   79,    0,    0,   38,   37,   32,
       79,   21,   79,   79,   35,   34,   79,   79,    0,    0,

       72,   72,   72,    0,   72,   73,   73,   73,   73,   79,
       14,   47,   79,   79,   51,   79,   79,   79,   54,   79,
       79,   79,   79,   79,   40,   39,   79,   79,   79,   79,
       46,    0,    0,    0,   72,   72,   72,   72,   73,   73,
       73,    0,   73,   79,   53,   79,   79,   79,   79,   55,
       48,   79,   79,    8,   79,   24,   79,   79,    0,    0,
       72,   72,   72,    0,   72,   73,   73,   73,   73,   79,
       52,   79,   79,   79,   79,   79,   49,   79,   79,   79,
       79,    0,    0,    0,   72,   72,   72,   72,   73,   73,
       73,    0,   73,   79,   79,   79,   79,   79,   79,   79,

       79,   15,   19,    0,   71,   74,   72,   72,   72,    0,
       72,   73,   73,   73,   73,   79,   26,   79,   56,   79,
       25,   79,   79,    0,   71,    0,   72,   72,   72,   72,
       72,   73,   73,   73,    0,   73,   79,   27,   57,   79,
       79,   79,   79,   79,   71,   74,   72,    0,   72,   72,
       72,   72,   73,   73,   73,   50,   79,   79,   79,   79,
       79,   18,   71,   72,   72,   72,   72,   73,   73,   73,
       58,   59,   60,   61,    9,   72,   72,    0,   72,   72,
       73,   72,   72,   73,   72,   72,    0,   72,   72,   72,
       72,    0,   72,   72,   72,   72,    0,   72,   72,   72,

       72,    0,   72,   72,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
        1,    1,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,    1,    1,    1,    1,    1,   23,   24,   25,   26,

       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[49] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        3,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    5,    6,    6,    6,    6,    6,    6,    1,    7,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[837] =
    {   0,
        0,    0, 1985, 1984,    0,    0, 1991, 1994, 1994,   46,
       48, 1985,    0, 1982,   45,   45, 1942, 1965,   82,   51,
      108,  110,  112,  131,  162,   46,   47,   48, 1948,  122,
       60,  119,  129, 1949,  140, 1947, 1956, 1994, 1970, 1994,
       51,   77,   85, 1976, 1994,    0, 1973, 1972, 1994,    0,
      193, 1956,  110, 1994,    0,  170,    0,  211, 1952, 1950,
        0, 1933, 1949,  141, 1944, 1931, 1936, 1932, 1935, 1942,
     1944,  180, 1938, 1936, 1923,    0, 1925, 1920, 1951, 1923,
     1932, 1920,  134, 1934, 1918, 1932,    0,    0, 1944, 1918,
     1909, 1920, 1916, 1913, 1908, 1906, 1994,    0,  242,  143,

     1924,  217,    0,  262, 1923,  278, 1917, 1903, 1912, 1911,
     1899, 1912, 1911, 1927, 1913, 1908, 1893, 1897, 1907, 1906,
     1903, 1902, 1918,  190, 1917, 1895,  275, 1891, 1896, 1892,
     1895, 1898, 1880, 1909, 1876, 1892, 1889, 1888, 1889, 1882,
     1886, 1878,    0,  301,  308, 1888, 1887,  328, 1886,    0,
      346,  223, 1885,  362, 1868, 1895, 1894, 1876, 1861, 1865,
     1859, 1858, 1867, 1857, 1869,    0, 1868, 1852, 1853, 1850,
      276, 1881,  358, 1849, 1852, 1854, 1860, 1849,    0, 1858,
     1858, 1858, 1835, 1854,  365, 1853, 1845, 1868,    0, 1854,
     1850, 1838, 1864, 1851,  310, 1850, 1849,    0,  396,  369,

     1848, 1858,  414, 1846,  432, 1845, 1844, 1823, 1826,  300,
     1853, 1852, 1819, 1818, 1832, 1822, 1826,    0, 1846, 1824,
     1826, 1822, 1825, 1814, 1827,  435, 1812, 1821, 1820, 1810,
     1822, 1808, 1806, 1802, 1831, 1798,    0,    0, 1802, 1811,
     1803, 1813, 1787, 1793, 1823, 1792, 1805, 1808, 1807, 1806,
     1816,  466, 1804,  484, 1803,    0,  180, 1802,  502,  377,
     1801, 1812, 1798, 1793, 1788, 1791, 1776, 1781, 1805, 1804,
     1773,    0, 1777, 1776, 1766, 1786, 1773, 1763, 1780, 1770,
     1767, 1776, 1767, 1761, 1760,    0, 1758, 1769, 1763, 1769,
     1770, 1784, 1758, 1752, 1764, 1749, 1752, 1746, 1753, 1776,

     1754, 1762, 1761,    0,  451, 1760,  520,  440, 1759, 1769,
      538,  550, 1757,  568, 1756,  167, 1737, 1729, 1747, 1732,
     1742, 1749, 1736,  520, 1726, 1742, 1745, 1740, 1741, 1738,
     1737, 1736, 1735, 1726, 1720, 1736, 1714, 1713, 1715, 1713,
        0,  372, 1717, 1728, 1729, 1707, 1709, 1708, 1712,    0,
     1716, 1705, 1705, 1722, 1721, 1720, 1730,  540,  586, 1718,
      604, 1717,    0, 1716, 1715,  622,  628, 1714, 1708, 1698,
     1710, 1722, 1704, 1700, 1681, 1682, 1704, 1691, 1688, 1690,
     1696, 1686, 1675, 1710, 1692,    0, 1684,    0,    0, 1694,
     1672, 1684, 1687, 1686,    0, 1682, 1701, 1685, 1674, 1674,

     1676, 1679, 1664,    0, 1677, 1675, 1664,    0, 1679, 1678,
        0, 1677, 1676,  646,  652, 1675,    0,  670, 1674,  688,
     1673, 1671, 1659, 1657, 1657, 1648, 1652, 1661, 1677, 1640,
     1662, 1648, 1660, 1642, 1639, 1670, 1644, 1668,    0, 1646,
     1649, 1639, 1634, 1633,    0, 1638, 1644, 1635, 1638, 1632,
     1627,    0,    0, 1639, 1638, 1642, 1641, 1640,    0,  706,
     1639,  724, 1638, 1637, 1636,  742,  748, 1635, 1615, 1608,
     1613, 1626, 1621, 1625,    0, 1616, 1639, 1623, 1620, 1615,
        0, 1622, 1610, 1606, 1611, 1605, 1600,    0,    0,    0,
     1608,    0, 1607, 1610,    0,    0, 1594, 1610, 1612, 1611,

     1610, 1609,  766,  772, 1608,  790, 1607,  808, 1606, 1600,
        0,    0, 1590, 1590,    0, 1597, 1589, 1612,    0, 1585,
     1586, 1592, 1592, 1591, 1994, 1994, 1588, 1573, 1578, 1582,
        0, 1590, 1589, 1588,  826, 1587,  844, 1586, 1585, 1584,
      862,  868, 1583, 1565,    0, 1576, 1579, 1574,  104,    0,
        0, 1577, 1572, 1588, 1570,    0, 1554, 1560, 1572, 1571,
     1570, 1569,  886,  892, 1568,  910, 1567,  928, 1566, 1544,
        0, 1541, 1547, 1532, 1516, 1493,    0, 1494, 1483, 1481,
     1486, 1485, 1482, 1470,  946, 1467,  964, 1446, 1443, 1431,
      982,  988, 1407, 1390, 1366, 1340, 1339, 1322, 1294, 1266,

     1248,    0,    0, 1245, 1226,    0, 1216, 1213, 1006, 1012,
     1199, 1030, 1185, 1048, 1156, 1128,    0, 1123,    0,  456,
        0, 1116, 1097, 1092, 1084, 1074, 1056, 1066, 1038, 1084,
        0, 1020,  996, 1102,    0,  972,  929,    0,    0,  256,
      937,  926,  895,  871,  852, 1994,  834,    0,  816,  798,
     1120,    0, 1138,  780,    0,    0,  761,  735,  719,  703,
      660,    0,  660,  636,  612, 1156,    0,  594,  576,    0,
        0,    0,    0,    0,    0,  558,  537,    0,    0, 1994,
        0,  535,  533, 1994,  532,  531,    0,  530,  510,  492,
      474,    0,  456,  453,  447,  422,    0,  404,  336,  315,

      314,    0,  286,  285, 1994, 1184, 1191, 1198, 1205, 1212,
     1219, 1223, 1226, 1230, 1233, 1236, 1240, 1243, 1246, 1249,
     1253, 1256, 1259,  249, 1262, 1265, 1268, 1271,  248, 1274,
     1277, 1280, 1283, 1286, 1289, 1292, 1295,  229, 1299, 1301,
     1304, 1307, 1310,  167, 1314, 1316, 1319, 1322, 1325, 1328,
     1331, 1334, 1337,   82, 1340, 1343, 1346, 1349,   52, 1352,
     1355, 1358, 1361, 1364, 1367, 1370, 1373, 1376, 1379, 1382,
     1385, 1388, 1391, 1394, 1397, 1400, 1403, 1406, 1409, 1412,
     1415, 1418, 1421, 1424, 1427, 1430, 1433, 1436, 1439, 1442,
     1445, 1448, 1451, 1454, 1457, 1460, 1463, 1466, 1469, 1472,

     1475, 1478, 1481, 1484, 1487, 1490, 1493, 1496, 1499, 1502,
     1505, 1508, 1511, 1514, 1517, 1520, 1523, 1526, 1529, 1532,
     1535, 1538, 1541, 1544, 1547, 1550, 1553, 1556, 1559, 1562,
     1565, 1568, 1571, 1574, 1577, 1580
    } ;

static yyconst flex_int16_t yy_def[837] =
    {   0,
      705,    1,  706,  706,  707,  707,  705,  705,  705,  705,
      705,  708,  709,  710,  705,  705,   16,  705,  705,   19,
       19,   19,   19,   19,   19,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,  705,  705,  705,
      705,  705,  705,  708,  705,  709,  710,  705,  705,  711,
      705,  712,  713,  705,  714,  715,   25,   19,   58,   58,
       25,   25,   58,   25,   25,   25,   25,   25,   58,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,  705,  711,  705,  716,

      717,  718,  714,  705,  719,   58,  106,  106,   25,  106,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,  705,  720,  721,  722,  705,  723,  724,
      705,  725,  726,  106,  154,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,  705,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,  144,  720,  727,  728,  729,  705,  730,

      731,  724,  705,  732,  705,  733,  154,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,  705,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,  705,  734,  735,
      729,  705,  736,  705,  737,  738,  739,  705,  705,  740,
      741,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
      705,  705,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,  742,  743,  744,  745,  705,  705,  746,  747,  738,
      739,  705,  748,  705,  749,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,  705,  705,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,  705,  750,  751,  744,  745,  705,  752,
      705,  753,  754,  311,  705,  705,  755,  756,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,  705,
      705,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   25,  757,  758,
      759,  358,  705,  705,  760,  761,  754,  705,  762,  705,
      763,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,  705,
      705,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,  705,  764,  765,  759,  705,
      766,  705,  767,  311,  705,  705,  768,  769,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,  705,  705,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,  770,  771,

      358,  705,  705,  772,  773,  705,  774,  705,  775,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,  705,  705,   25,   25,   25,   25,
       25,  705,  776,  777,  705,  778,  705,  779,  311,  705,
      705,  780,  781,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,  782,  783,
      358,  705,  705,  784,  785,  705,  786,  705,  787,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,  705,  788,  789,  705,  790,  705,  791,  311,  705,
      705,  792,  793,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,  794,  795,  796,  358,  705,  705,  797,
      798,  705,  799,  705,  800,   25,   25,   25,   25,   25,
       25,   25,   25,  705,  801,  705,  802,  705,  803,  705,
      804,  311,  705,  705,  805,  806,   25,   25,   25,   25,
       25,   25,   25,   25,  807,  705,  808,  809,  358,  705,
      705,  810,  705,  811,  812,   25,   25,   25,   25,   25,
       25,   25,  705,  813,  814,  705,  815,  311,  705,  816,
       25,   25,   25,   25,   25,  705,  817,  818,  358,  705,
      819,  820,  821,  705,  705,  822,  823,  824,  825,  705,
      826,  827,  828,  829,  705,  830,  831,  832,  833,  705,

      834,  835,  836,  705,    0,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,

      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705
    } ;

static yyconst flex_int16_t yy_nxt[2043] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   25,
       26,   25,   25,   27,   25,   28,   29,   30,   25,   31,
       32,   33,   34,   35,   36,   25,   37,   25,   41,   42,
       43,   42,   49,   41,   42,  459,   50,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   52,   53,   53,   53,
       53,   53,   53,   71,   54,   58,   58,   73,   75,   43,
       42,   72,   82,   74,   76,  417,   83,   41,   42,   77,
       55,   57,   57,   57,   58,   58,   58,   58,   58,   58,

       58,   58,   58,   52,   58,   58,   59,   60,   58,   58,
       57,   61,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   62,   57,   57,   57,   57,   57,
       63,   52,   58,   58,   58,   58,   58,   58,  574,   54,
       65,   64,   87,   88,  575,   66,   67,   79,   84,   85,
       57,   89,   57,   69,   57,   58,   58,   68,   80,   90,
       86,   81,   93,  111,   52,  131,   94,  132,   91,   70,
      357,  112,   54,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,  705,   57,   57,   57,   57,   57,   57,
      150,   57,  105,  105,  105,  105,  105,  105,  172,  173,

      369,  152,  120,  370,   57,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   52,  100,  100,  100,  100,  100,
      100,  121,   54,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  310,  106,  106,  106,  106,  106,  106,  149,
      149,  149,  149,  149,  149,  206,  206,  206,  206,  206,
      206,  251,  202,   57,  144,  144,  144,  144,  144,  144,
      144,  144,  144,   52,  145,  145,  145,  145,  145,  145,
      657,   54,  150,  658,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  152,  153,  153,  153,  153,  153,  153,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  176,

      154,  154,  154,  154,  154,  154,  702,  702,  177,  223,
      224,  225,  178,  194,  194,  194,  194,  194,  194,  194,
      194,  194,   52,  195,  195,  195,  195,  195,  195,   52,
       54,  705,  264,  265,  266,  702,  697,   54,  198,   54,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  200,
      201,  201,  201,  201,  201,  201,  150,  702,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  152,  204,  204,
      204,  204,  204,  204,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  227,  207,  207,  207,  207,  207,  207,
      239,  255,  255,  255,  255,  255,  255,  397,  228,  315,

      315,  315,  315,  315,  315,  240,  198,  398,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  200,  253,  253,
      253,  253,  253,  253,  150,  697,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  152,  258,  258,  258,  258,
      258,  258,  150,  697,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  260,  261,  261,  261,  261,  261,  261,
      281,  198,  362,  362,  362,  362,  362,  362,  692,  639,
      640,  641,  200,  642,  697,  282,  198,  692,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  200,  306,  306,
      306,  306,  306,  306,  198,  692,  307,  307,  307,  307,

      307,  307,  307,  307,  307,  308,  309,  309,  309,  309,
      309,  309,  150,  687,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  260,  313,  313,  313,  313,  313,  313,
      198,  692,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  308,  360,  360,  360,  360,  360,  360,  150,  378,
      198,  687,  687,  678,  687,  379,  678,  380,  678,  705,
      150,  705,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  260,  365,  365,  365,  365,  365,  365,  150,  648,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  367,
      368,  368,  368,  368,  368,  368,  198,  635,  412,  412,

      412,  412,  412,  412,  412,  412,  412,  308,  413,  413,
      413,  413,  413,  413,  198,  635,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  415,  416,  416,  416,  416,
      416,  416,  150,  678,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  367,  419,  419,  419,  419,  419,  419,
      421,  421,  421,  421,  421,  421,  198,  648,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  415,  461,  461,
      461,  461,  461,  461,  463,  463,  463,  463,  463,  463,
      150,  626,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  367,  465,  465,  465,  465,  465,  465,  150,  675,

      466,  466,  466,  466,  466,  466,  466,  466,  466,  467,
      468,  468,  468,  468,  468,  468,  198,  674,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  415,  502,  502,
      502,  502,  502,  502,  198,  673,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  504,  505,  505,  505,  505,
      505,  505,  150,  672,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  467,  507,  507,  507,  507,  507,  507,
      509,  509,  509,  509,  509,  509,  198,  671,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  504,  536,  536,
      536,  536,  536,  536,  538,  538,  538,  538,  538,  538,

      150,  635,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  467,  540,  540,  540,  540,  540,  540,  150,  610,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  542,
      543,  543,  543,  543,  543,  543,  198,  610,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  504,  562,  562,
      562,  562,  562,  562,  198,  648,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  564,  565,  565,  565,  565,
      565,  565,  150,  626,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  542,  567,  567,  567,  567,  567,  567,
      569,  569,  569,  569,  569,  569,  198,  662,  585,  585,

      585,  585,  585,  585,  585,  585,  585,  564,  586,  586,
      586,  586,  586,  586,  588,  588,  588,  588,  588,  588,
      150,  661,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  542,  590,  590,  590,  590,  590,  590,  150,  660,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  592,
      593,  593,  593,  593,  593,  593,  198,  659,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  564,  608,  608,
      608,  608,  608,  608,  198,  656,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  610,  611,  611,  611,  611,
      611,  611,  150,  635,  612,  612,  612,  612,  612,  612,

      612,  612,  612,  592,  613,  613,  613,  613,  613,  613,
      615,  615,  615,  615,  615,  615,  198,  592,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  610,  629,  629,
      629,  629,  629,  629,  631,  631,  631,  631,  631,  631,
      150,  592,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  592,  633,  633,  633,  633,  633,  633,  150,  610,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  635,
      636,  636,  636,  636,  636,  636,  198,  648,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  610,  650,  650,
      650,  650,  650,  650,  198,  646,  651,  651,  651,  651,

      651,  651,  651,  651,  651,  626,  652,  652,  652,  652,
      652,  652,  150,  584,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  635,  654,  654,  654,  654,  654,  654,
      198,  644,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  643,  667,  667,  667,  667,  667,  667,  150,  638,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  635,
      669,  669,  669,  669,  669,  669,  198,  637,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  635,  680,  680,
      680,  680,  680,  680,   38,   38,   38,   38,   38,   38,
       38,   40,   40,   40,   40,   40,   40,   40,   44,   44,

       44,   44,   44,   44,   44,   46,  592,   46,   46,   46,
       46,   46,   47,   47,   47,   47,   47,   47,   47,   98,
      610,   98,   98,   98,   98,   98,  101,  101,  101,  100,
      100,  100,  100,  103,  564,  103,  104,  564,  104,  145,
      145,  145,  145,  146,  146,  146,  148,  626,  148,  153,
      153,  153,  195,  195,  195,  195,  196,  196,  196,  197,
      197,  197,  201,  201,  201,  205,  584,  205,  204,  204,
      204,  248,  248,  248,  249,  249,  249,  254,  623,  254,
      253,  253,  253,  258,  258,  258,  261,  261,  261,  302,
      302,  302,  303,  303,  303,  306,  306,  306,  309,  309,

      309,  311,  311,  311,  314,  622,  314,  313,  313,  313,
      354,  354,  354,  355,  355,  355,  358,  358,  358,  361,
      621,  361,  360,  360,  360,  365,  365,  365,  368,  368,
      368,  409,  409,  409,  410,  410,  410,  413,  413,  413,
      416,  416,  416,  420,  620,  420,  419,  419,  419,  456,
      456,  456,  457,  457,  457,  462,  619,  462,  461,  461,
      461,  465,  465,  465,  468,  468,  468,  499,  499,  499,
      500,  500,  500,  502,  502,  502,  505,  505,  505,  508,
      618,  508,  507,  507,  507,  532,  532,  532,  533,  533,
      533,  537,  617,  537,  536,  536,  536,  540,  540,  540,

      543,  543,  543,  559,  559,  559,  560,  560,  560,  562,
      562,  562,  565,  565,  565,  568,  616,  568,  567,  567,
      567,  582,  582,  582,  583,  583,  583,  587,  592,  587,
      586,  586,  586,  590,  590,  590,  593,  593,  593,  604,
      604,  604,  605,  605,  605,  608,  608,  608,  611,  611,
      611,  614,  542,  614,  613,  613,  613,  624,  624,  624,
      625,  625,  625,  627,  542,  627,  630,  610,  630,  629,
      629,  629,  633,  633,  633,  636,  636,  636,  645,  645,
      645,  647,  647,  647,  650,  650,  650,  652,  564,  652,
      655,  606,  655,  654,  654,  654,  663,  663,  663,  664,

      664,  664,  665,  584,  665,  667,  534,  667,  669,  669,
      669,  670,  603,  670,  676,  676,  676,  677,  677,  677,
      680,  602,  680,  681,  601,  681,  682,  682,  682,  683,
      600,  683,  684,  599,  684,  685,  685,  685,  686,  686,
      686,  688,  688,  688,  689,  598,  689,  690,  690,  690,
      691,  691,  691,  693,  693,  693,  694,  597,  694,  695,
      695,  695,  696,  696,  696,  698,  698,  698,  699,  596,
      699,  700,  700,  700,  701,  701,  701,  703,  703,  703,
      631,  595,  631,  704,  704,  704,  594,  592,  542,  564,
      504,  504,  584,  534,  581,  580,  579,  578,  577,  576,

      573,  572,  571,  570,  542,  467,  467,  564,  504,  102,
      534,  458,  558,  557,  556,  555,  554,  553,  552,  551,
      550,  549,  548,  547,  546,  545,  544,  542,  467,  504,
      415,  415,  534,  458,  531,  530,  529,  528,  527,  526,
      525,  524,  523,  522,  521,  520,  519,  518,  517,  516,
      515,  514,  513,  512,  511,  510,  467,  367,  367,  504,
      415,  102,  458,  356,  498,  497,  496,  495,  494,  493,
      492,  491,  490,  489,  488,  487,  486,  485,  484,  483,
      482,  481,  480,  479,  478,  477,  476,  475,  474,  473,
      472,  471,  470,  469,  467,  367,  415,  308,  308,  458,

      356,  455,  454,  453,  452,  451,  450,  449,  448,  447,
      446,  445,  444,  443,  442,  441,  440,  439,  438,  437,
      436,  435,  434,  433,  432,  431,  430,  429,  428,  427,
      426,  425,  424,  423,  422,  367,  260,  260,  415,  308,
      411,  102,  356,  250,  408,  407,  406,  405,  404,  403,
      402,  401,  400,  399,  396,  395,  394,  393,  392,  391,
      390,  389,  388,  387,  386,  385,  384,  383,  382,  381,
      377,  376,  375,  374,  373,  372,  371,  367,  260,  363,
      308,  200,  356,  250,  353,  352,  351,  350,  349,  348,
      347,  346,  345,  344,  343,  342,  341,  340,  339,  338,

      337,  336,  335,  334,  333,  332,  331,  330,  329,  328,
      327,  326,  325,  324,  323,  322,  321,  320,  319,  318,
      317,  316,  260,  152,  308,  200,  304,  102,  250,  147,
      301,  300,  299,  298,  297,  296,  295,  294,  293,  292,
      291,  290,  289,  288,  287,  286,  285,  284,  283,  280,
      279,  278,  277,  276,  275,  274,  273,  272,  271,  270,
      269,  268,  267,  263,  262,  705,  260,  152,  256,  200,
      250,  147,  705,  247,  246,  245,  244,  243,  242,  241,
      238,  237,  236,  235,  234,  233,  232,  231,  230,  229,
      226,  222,  221,  220,  219,  218,  217,  216,  215,  214,

      213,  212,  211,  210,  209,  208,  152,  200,  102,  147,
      193,  192,  191,  190,  189,  188,  187,  186,  185,  184,
      183,  182,  181,  180,  179,  175,  174,  171,  170,  169,
      168,  167,  166,  165,  164,  163,  162,  161,  160,  159,
      158,  157,  156,  155,  152,  147,  143,  142,  141,  140,
      139,  138,  137,  136,  135,  134,  133,  130,  129,  128,
      127,  126,  125,  124,  123,  122,  119,  118,  117,  116,
      115,  114,  113,  110,  109,  108,  107,  102,   47,   48,
       45,   97,   96,   95,   92,   78,   56,  705,   48,   45,
      705,   39,   39,    7,  705,  705,  705,  705,  705,  705,

      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705
    } ;

static yyconst flex_int16_t yy_chk[2043] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   10,   10,
       11,   11,   15,   41,   41,  759,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   26,   16,   20,   20,   27,   28,   42,
       42,   26,   31,   27,   28,  754,   31,   43,   43,   28,
       16,   19,   19,   20,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       21,   53,   21,   21,   22,   22,   23,   23,  549,   53,
       22,   21,   33,   33,  549,   22,   22,   30,   32,   32,
       21,   33,   22,   24,   23,   24,   24,   23,   30,   33,
       32,   30,   35,   64,  100,   83,   35,   83,   33,   24,
      744,   64,  100,   24,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
      257,   25,   56,   56,   56,   56,   56,   56,  124,  124,

      316,  257,   72,  316,   25,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   72,   51,   58,   58,   58,   58,   58,   58,   58,
       58,   58,  738,   58,   58,   58,   58,   58,   58,  102,
      102,  102,  102,  102,  102,  152,  152,  152,  152,  152,
      152,  729,  724,   58,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
      640,   99,  104,  640,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  127,

      106,  106,  106,  106,  106,  106,  704,  703,  127,  171,
      171,  171,  127,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  145,
      144,  195,  210,  210,  210,  701,  700,  145,  148,  195,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  151,  699,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  173,  154,  154,  154,  154,  154,  154,
      185,  200,  200,  200,  200,  200,  200,  342,  173,  260,

      260,  260,  260,  260,  260,  185,  199,  342,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  203,  698,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  205,  696,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      226,  305,  308,  308,  308,  308,  308,  308,  695,  620,
      620,  620,  305,  620,  694,  226,  252,  693,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  254,  691,  254,  254,  254,  254,

      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  259,  690,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      307,  689,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  311,  324,
      358,  688,  686,  685,  683,  324,  682,  324,  677,  311,
      312,  358,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  314,  676,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  359,  669,  359,  359,

      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  361,  668,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  366,  665,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      367,  367,  367,  367,  367,  367,  414,  664,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  415,  415,  415,  415,  415,  415,
      418,  663,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  420,  661,

      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  460,  660,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  462,  659,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  466,  658,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      467,  467,  467,  467,  467,  467,  503,  657,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  504,  504,  504,  504,  504,  504,

      506,  654,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  508,  650,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  535,  649,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  537,  647,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  541,  645,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      542,  542,  542,  542,  542,  542,  563,  644,  563,  563,

      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  564,  564,  564,  564,  564,  564,
      566,  643,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  568,  642,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  585,  641,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  587,  637,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  591,  636,  591,  591,  591,  591,  591,  591,

      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      592,  592,  592,  592,  592,  592,  609,  633,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  610,  610,  610,  610,  610,  610,
      612,  632,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  614,  629,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  628,  627,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  630,  626,  630,  630,  630,  630,

      630,  630,  630,  630,  630,  625,  630,  630,  630,  630,
      630,  630,  634,  624,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      651,  623,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  622,  651,  651,  651,  651,  651,  651,  653,  618,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  666,  616,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  615,  666,  666,
      666,  666,  666,  666,  706,  706,  706,  706,  706,  706,
      706,  707,  707,  707,  707,  707,  707,  707,  708,  708,

      708,  708,  708,  708,  708,  709,  613,  709,  709,  709,
      709,  709,  710,  710,  710,  710,  710,  710,  710,  711,
      611,  711,  711,  711,  711,  711,  712,  712,  712,  713,
      713,  713,  713,  714,  608,  714,  715,  607,  715,  716,
      716,  716,  716,  717,  717,  717,  718,  605,  718,  719,
      719,  719,  720,  720,  720,  720,  721,  721,  721,  722,
      722,  722,  723,  723,  723,  725,  604,  725,  726,  726,
      726,  727,  727,  727,  728,  728,  728,  730,  601,  730,
      731,  731,  731,  732,  732,  732,  733,  733,  733,  734,
      734,  734,  735,  735,  735,  736,  736,  736,  737,  737,

      737,  739,  739,  739,  740,  600,  740,  741,  741,  741,
      742,  742,  742,  743,  743,  743,  745,  745,  745,  746,
      599,  746,  747,  747,  747,  748,  748,  748,  749,  749,
      749,  750,  750,  750,  751,  751,  751,  752,  752,  752,
      753,  753,  753,  755,  598,  755,  756,  756,  756,  757,
      757,  757,  758,  758,  758,  760,  597,  760,  761,  761,
      761,  762,  762,  762,  763,  763,  763,  764,  764,  764,
      765,  765,  765,  766,  766,  766,  767,  767,  767,  768,
      596,  768,  769,  769,  769,  770,  770,  770,  771,  771,
      771,  772,  595,  772,  773,  773,  773,  774,  774,  774,

      775,  775,  775,  776,  776,  776,  777,  777,  777,  778,
      778,  778,  779,  779,  779,  780,  594,  780,  781,  781,
      781,  782,  782,  782,  783,  783,  783,  784,  593,  784,
      785,  785,  785,  786,  786,  786,  787,  787,  787,  788,
      788,  788,  789,  789,  789,  790,  790,  790,  791,  791,
      791,  792,  590,  792,  793,  793,  793,  794,  794,  794,
      795,  795,  795,  796,  589,  796,  797,  588,  797,  798,
      798,  798,  799,  799,  799,  800,  800,  800,  801,  801,
      801,  802,  802,  802,  803,  803,  803,  804,  586,  804,
      805,  584,  805,  806,  806,  806,  807,  807,  807,  808,

      808,  808,  809,  583,  809,  810,  582,  810,  811,  811,
      811,  812,  581,  812,  813,  813,  813,  814,  814,  814,
      815,  580,  815,  816,  579,  816,  817,  817,  817,  818,
      578,  818,  819,  576,  819,  820,  820,  820,  821,  821,
      821,  822,  822,  822,  823,  575,  823,  824,  824,  824,
      825,  825,  825,  826,  826,  826,  827,  574,  827,  828,
      828,  828,  829,  829,  829,  830,  830,  830,  831,  573,
      831,  832,  832,  832,  833,  833,  833,  834,  834,  834,
      835,  572,  835,  836,  836,  836,  570,  569,  567,  565,
      562,  561,  560,  559,  558,  557,  555,  554,  553,  552,

      548,  547,  546,  544,  543,  540,  539,  538,  536,  534,
      533,  532,  530,  529,  528,  527,  524,  523,  522,  521,
      520,  518,  517,  516,  514,  513,  510,  509,  507,  505,
      502,  501,  500,  499,  498,  497,  494,  493,  491,  487,
      486,  485,  484,  483,  482,  480,  479,  478,  477,  476,
      474,  473,  472,  471,  470,  469,  468,  465,  464,  463,
      461,  458,  457,  456,  455,  454,  451,  450,  449,  448,
      447,  446,  444,  443,  442,  441,  440,  438,  437,  436,
      435,  434,  433,  432,  431,  430,  429,  428,  427,  426,
      425,  424,  423,  422,  421,  419,  416,  413,  412,  410,

      409,  407,  406,  405,  403,  402,  401,  400,  399,  398,
      397,  396,  394,  393,  392,  391,  390,  387,  385,  384,
      383,  382,  381,  380,  379,  378,  377,  376,  375,  374,
      373,  372,  371,  370,  369,  368,  365,  364,  362,  360,
      357,  356,  355,  354,  353,  352,  351,  349,  348,  347,
      346,  345,  344,  343,  340,  339,  338,  337,  336,  335,
      334,  333,  332,  331,  330,  329,  328,  327,  326,  325,
      323,  322,  321,  320,  319,  318,  317,  315,  313,  310,
      309,  306,  303,  302,  301,  300,  299,  298,  297,  296,
      295,  294,  293,  292,  291,  290,  289,  288,  287,  285,

      284,  283,  282,  281,  280,  279,  278,  277,  276,  275,
      274,  273,  271,  270,  269,  268,  267,  266,  265,  264,
      263,  262,  261,  258,  255,  253,  251,  250,  249,  248,
      247,  246,  245,  244,  243,  242,  241,  240,  239,  236,
      235,  234,  233,  232,  231,  230,  229,  228,  227,  225,
      224,  223,  222,  221,  220,  219,  217,  216,  215,  214,
      213,  212,  211,  209,  208,  207,  206,  204,  202,  201,
      197,  196,  194,  193,  192,  191,  190,  188,  187,  186,
      184,  183,  182,  181,  180,  178,  177,  176,  175,  174,
      172,  170,  169,  168,  167,  165,  164,  163,  162,  161,

      160,  159,  158,  157,  156,  155,  153,  149,  147,  146,
      142,  141,  140,  139,  138,  137,  136,  135,  134,  133,
      132,  131,  130,  129,  128,  126,  125,  123,  122,  121,
      120,  119,  118,  117,  116,  115,  114,  113,  112,  111,
      110,  109,  108,  107,  105,  101,   96,   95,   94,   93,
       92,   91,   90,   89,   86,   85,   84,   82,   81,   80,
       79,   78,   77,   75,   74,   73,   71,   70,   69,   68,
       67,   66,   65,   63,   62,   60,   59,   52,   48,   47,
       44,   39,   37,   36,   34,   29,   18,   17,   14,   12,
        7,    4,    3,  705,  705,  705,  705,  705,  705,  705,

      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[85] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 1166 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 1271 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 706 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1994 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 60 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 62 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 108 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 122 "SrvLexer.l"
;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno; 
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 130 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 131 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 71:
YY_RULE_SETUP
#line 138 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 147 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 156 "SrvLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 165 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 174 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 183 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 192 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 204 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 211 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 232 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd then no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 264 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd; 
      YYABORT; 
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 274 "SrvLexer.l"
{ 
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) { 
        Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd; 
        YYABORT; 
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 283 "SrvLexer.l"
{ return yytext[0]; } 
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 286 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 1919 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 706 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 706 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 705);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

yyFlexLexer::~yyFlexLexer()
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

	delete [] (yy_state_buf);
	yyfree((yy_start_stack)  );

}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 286 "SrvLexer.l"




