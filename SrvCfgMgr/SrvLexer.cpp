#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 89
#define YY_END_OF_BUFFER 90
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[739] =
    {   0,
        1,    1,    0,    0,    0,    0,   90,   88,    2,    1,
        1,   88,   71,   88,   88,   87,   87,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   75,   75,
       89,    1,    1,    1,    0,   83,   71,    0,   83,   73,
       72,   87,    0,    0,   86,    0,   80,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   68,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   16,
       17,   84,   84,   84,   84,   84,   84,   84,   84,   84,

       74,   72,   87,    0,    0,   79,   85,   78,   78,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       67,   87,    0,    0,    0,   77,   77,    0,   78,    0,
       78,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   29,   84,   84,   40,   84,   84,   84,   84,   84,
       84,    0,   84,   84,   84,   84,   84,   84,   22,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   69,

       84,   84,   84,   84,   84,   87,    0,    0,    0,    0,
       77,    0,   77,    0,   78,   78,   78,   78,   84,   84,
       84,   84,   84,   84,    4,   84,   84,   84,   84,   84,
       70,   84,    3,   84,   84,   84,   84,   84,   84,    0,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
        7,   84,   23,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,    0,    0,    0,    0,   77,   77,   77,
       77,    0,   78,   78,   78,    0,   78,   84,   84,   84,
       84,   84,   84,   84,   84,   28,   84,   84,   35,   84,
       84,   84,   84,   84,   84,   84,   84,   84,    0,    0,

       84,   84,   84,   33,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,    0,    0,    0,   77,   77,   77,    0,   77,    0,
        0,   78,   78,   78,   78,   84,   84,   31,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,    0,    0,   84,   84,   84,
       84,   84,   49,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   20,   84,   84,   84,    0,    0,    0,
        0,    0,   77,   77,   77,   77,    0,   78,   78,   78,
        0,   78,   84,   84,   84,   84,   84,   84,   84,   84,

       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       45,   84,   12,   10,    0,    0,   84,   84,   84,   47,
       84,   84,   84,   84,   84,   84,   84,   84,   84,    5,
       84,   84,   84,   84,   13,    0,    0,    0,   77,   77,
       77,    0,   77,   82,   78,   78,   78,   78,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   11,    0,    0,   84,
       84,   84,   48,   84,   84,   84,   84,   30,   84,   84,
        6,   37,   84,   84,   84,    0,    0,    0,   81,   77,
       77,   77,   77,   78,   78,   78,    0,   78,   84,   84,

       84,   84,   84,   84,   46,   84,   84,   84,   84,   84,
       34,   84,   32,   84,   84,   84,    0,    0,   42,   41,
       36,   84,   21,   84,   84,   39,   38,   84,   84,   84,
        0,    0,   77,   77,   77,    0,   77,   78,   78,   78,
       78,   84,   14,   51,   84,   84,   56,   84,   84,   84,
       59,   84,   84,   84,   84,   84,   44,   43,   84,   84,
       84,   53,   84,   50,    0,    0,    0,   77,   77,   77,
       77,   78,   78,   78,    0,   78,   84,   58,   84,   84,
       84,   84,   60,   52,   84,   84,    8,   84,   24,   84,
       84,    0,    0,   77,   77,   77,    0,   77,   78,   78,

       78,   78,   84,   57,   84,   84,   84,   84,   84,   54,
       84,   84,   84,   84,    0,    0,    0,   77,   77,   77,
       77,   78,   78,   78,    0,   78,   84,   84,   84,   84,
       84,   84,   84,   84,   15,   19,    0,   76,   79,   77,
       77,   77,    0,   77,   78,   78,   78,   78,   84,   26,
       84,   61,   84,   25,   84,   84,    0,   76,    0,   77,
       77,   77,   77,   77,   78,   78,   78,    0,   78,   84,
       27,   62,   84,   84,   84,   84,   84,   76,   79,   77,
        0,   77,   77,   77,   77,   78,   78,   78,   55,   84,
       84,   84,   84,   84,   18,   76,   77,   77,   77,   77,

       78,   78,   78,   63,   64,   65,   66,    9,   77,   77,
        0,   77,   77,   78,   77,   77,   78,   77,   77,    0,
       77,   77,   77,   77,    0,   77,   77,   77,   77,    0,
       77,   77,   77,   77,    0,   77,   77,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
        1,    1,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,    1,    1,    1,    1,    1,   49,   24,   50,   51,

       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[74] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        4,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    6,    7,    7,    7,    7,    7,    7,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    7,    7,
        7,    7,    7,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[806] =
    {   0,
        0,    0, 2007, 2005,    0,    0, 2012, 4041, 4041,   71,
       73, 2006,    0, 1969,   70,   70,   33, 1951,  129,  185,
       78,   72,   34,  193,   92, 1950,  192,  196,  217,  154,
      204,  109,  234,  288,   77,  141,  209,  143, 4041, 1959,
     4041,  103,  107,  114, 1965, 4041,    0, 1962, 1961, 4041,
        0,  344, 1907,  278, 4041,    0,  387, 1894,  428,  137,
      140, 1891,  152,  146,  283,  221,  241,  225,  252,  250,
      190,  278,  290,  298,  367,  287,  294,  311, 1887,  312,
      313,  163,  314,  327,  360,  428,  369,  395,  408, 1886,
     1881,  167,  437,  439,  447,  442,  452,  448,  449,  453,

     4041,    0,  507,  525, 1879,  550,    0,  593,  568,  634,
      234,  222,  446,  288,  495,  528,  570,  258,  443,  572,
      604,  641,  569,  647,  468,  614,  613,  644,  316,  410,
      363,  645,  655,  656,  646,  648,  670,  672,  669,  676,
      481,  678,  686,  690,  697,  687,  703,  704,  707,  705,
     1877,  751,  769, 1873, 1870,  796,  814,  778,  839,  880,
      857,  921,  509,  859,  490,  710,  739,  890,  861,  887,
      894, 1822,  786,  858, 1820,  902,  930,  688,  936,  933,
      943, 1805,  940,  939,  932,  961,  937,  962, 1780,  963,
      941,  971,  964,  965,  986,  988,  990,  975,  494, 1778,

      996, 1003, 1005, 1000,  615, 1667, 1665, 1664, 1663,  823,
     1052, 1093, 1070, 1111, 1136, 1154, 1179, 1197, 1662, 1073,
      997, 1197, 1187,  619,  724, 1201, 1202, 1006,  994, 1203,
     1661,  729,  730, 1204, 1029, 1205, 1071, 1211, 1217, 1211,
     1219, 1114, 1227, 1228, 1235, 1229, 1233, 1231,  734, 1245,
     1659, 1253, 1626, 1254, 1256, 1252, 1270, 1250, 1263, 1260,
      737, 1266, 1277, 1625, 1622, 1621, 1319, 1330, 1348, 1373,
     1391, 1163,  164, 1619, 1416, 1457, 1434, 1031, 1354, 1438,
     1394, 1464, 1435, 1470, 1282, 1037, 1039, 1472, 1618, 1466,
     1467, 1468, 1469, 1474, 1483, 1471, 1495, 1494, 1263, 1275,

     1497, 1502, 1508, 1590, 1492, 1512, 1513, 1517, 1500, 1299,
     1350, 1527, 1523, 1529, 1530, 1531, 1363, 1533, 1542, 1555,
     1539, 1576, 1567, 1589,  256, 1562, 1600, 1641, 1618, 1659,
     1684, 1695, 1713, 1738, 1756, 1746, 1623, 1561, 1624, 1756,
     1757, 1763, 1537, 1760, 1774, 1759, 1770, 1764, 1784, 1771,
     1789, 1791, 1794, 1803, 1805, 1539, 1642, 1818, 1809, 1812,
     1795, 1816, 1509, 1823, 1825, 1826, 1832, 1842, 1828, 1830,
     1838, 1844, 1847, 1478, 1846, 1848, 1853, 1477, 1476, 1442,
     1906, 1917, 1928, 1946, 1971, 1989, 1722,  259, 1441, 2014,
     2055, 2032, 1863, 2055, 1952, 1568, 1992, 2032, 2036, 2039,

     2037, 1851, 2066, 2067, 2068, 2075, 2070, 2071, 1569, 2072,
     1439, 2078, 1437, 1436,  202, 1681, 2091, 2092, 2096, 1434,
     2103, 1570, 2105, 2080, 2107, 2109, 2112, 2123, 2110, 1406,
     2127, 2116, 2124, 2134, 1398, 1397, 1396, 2167,  319, 1395,
     2187, 2228, 2205, 2214, 2271, 2246, 2314, 2289, 2140, 2135,
     2139, 2137, 2304, 2321, 2143, 1572, 2322, 2168, 2323, 2252,
     1918, 2327, 2325, 1575, 2326, 1620, 1393, 2108, 2140, 2334,
     2332, 2333, 1392, 2328, 2352, 2353, 2329, 1391, 2354, 2356,
     1356, 1353, 2331, 2378, 2379, 1352, 1349, 1348, 2298, 2421,
     2439, 2464, 2482,  413, 1307, 2507, 2548, 2525, 2358, 2404,

     2367, 2442, 2548, 2486, 1298, 2369, 1884, 2527, 2526, 2558,
     1293, 2532, 1292, 2560, 2565, 2561, 2222, 2352, 1288, 1272,
     1220, 2562, 1169, 2564, 2563, 1117, 1116, 2569, 2566, 2581,
     1113, 1112,  484, 1111, 2623, 2664, 2641, 2707, 2682, 2750,
     2725, 2583, 1078, 1077, 2726, 2757, 1075, 2601, 2759, 1888,
     1074, 2758, 2761, 2642, 2686, 2760, 4041, 4041, 2762, 2644,
     2769, 1072, 2766, 1070, 1042, 1028, 1024, 2820, 2838, 2863,
     2881,  488, 1023, 2906, 2947, 2924, 2786, 1022, 2841, 2887,
     2924, 2763, 1021, 1018, 2930, 2955, 1890, 2956,  976, 2927,
     2958,  966,  938,  491,  934, 3008, 3049, 3026, 3092, 3067,

     3135, 3110, 2359,  901, 3030, 2962, 2964, 2959, 3125,  900,
     3142, 3147, 3149, 2965,  898,  897,  896, 3205, 3181, 3248,
     3192,  616,  865, 3291, 3332, 3223, 3027, 3070, 3255,  108,
     3116, 3226, 2767, 2982,  862,  860,  857,  735,    0,  732,
      728, 3375, 3416, 3268, 3459, 3309, 3502, 3350, 3195,  681,
     3310,  680,  899,  659, 2969, 3352,  653,  651,  650,  612,
     3545, 3400, 3588, 3434, 1126,  611, 3631,    0, 3477, 3332,
      610,  606,  366,  200,  364, 3353, 3437,  602, 4041,  574,
        0, 1296,  573, 3674, 3520, 3717, 3563,    0,  571,  107,
      303,  166,  406, 3492,  568,  532,  531,  530, 3760, 3606,

     1302,  529,    0,  527,  526,  493,  483,  474,  445,  407,
        0, 3649, 4041,    0,  405,  404, 4041,  403,  400,    0,
      365,  361,  324,  323,    0,  305,  302,  255,  207,    0,
      201,  147,  145,  117,    0,   80,   59, 4041, 3813, 3820,
     3827, 3834, 3841, 3846, 3853, 3856, 3859, 3862, 3865, 3868,
     3871, 3874, 3877, 3880, 3884, 3886, 3889, 3893, 3895, 3898,
     3901, 3904, 3907, 3910, 3913, 3916, 3919, 3922, 3925, 3928,
     3931, 3934, 3937, 3940, 3943, 3946, 3949, 3952, 3955, 3958,
     3961, 3964, 3967, 3970, 3973, 3976, 3979, 3982, 3985, 3988,
     3991, 3994, 3997, 4000, 4003, 4006, 4009, 4012, 4015, 4018,

     4021, 4024, 4027, 4030, 4033
    } ;

static yyconst flex_int16_t yy_def[806] =
    {   0,
      738,    1,  739,  739,  740,  740,  738,  738,  738,  738,
      738,  741,  742,  743,  738,  738,   16,  738,  744,  744,
       20,   20,   20,   20,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  738,  738,
      738,  738,  738,  738,  741,  738,  742,  743,  738,  738,
      745,  738,  746,   52,  738,  747,  738,  744,   20,   59,
       59,  744,  744,   59,  744,  744,  744,  744,  744,  744,
       59,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,

      738,  745,  738,  103,  748,  738,  747,  738,  108,   59,
      110,  110,  744,  110,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  738,  152,  749,  750,  738,  156,  738,  738,  738,
      159,  110,  162,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  738,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,

      744,  744,  744,  744,  744,  152,  153,  751,  752,  738,
      738,  738,  211,  738,  738,  215,  738,  217,  162,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  738,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  738,  753,  754,  738,  738,  268,  738,
      270,  738,  755,  738,  738,  738,  275,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  738,  738,

      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  756,  757,  738,  758,  738,  738,  738,  327,  738,
      738,  738,  332,  738,  334,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  738,  738,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  738,  759,  760,
      738,  738,  738,  383,  738,  385,  738,  755,  738,  738,
      738,  390,  744,  744,  744,  744,  744,  744,  744,  744,

      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  738,  738,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  761,  762,  738,  758,  738,
      738,  738,  441,  738,  738,  445,  738,  447,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  738,  738,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  738,  763,  764,  738,  738,
      490,  738,  492,  755,  738,  738,  738,  496,  744,  744,

      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  738,  738,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      765,  766,  758,  738,  738,  738,  535,  738,  538,  738,
      540,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  738,  738,  744,  744,
      744,  744,  744,  744,  738,  767,  768,  738,  568,  738,
      570,  755,  738,  738,  738,  574,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  769,  770,  758,  738,  738,  738,  596,  738,  599,

      738,  601,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  738,  771,  772,  738,  618,  738,
      620,  755,  738,  738,  738,  624,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  773,  774,  775,  758,
      738,  738,  738,  642,  738,  645,  738,  647,  744,  744,
      744,  744,  744,  744,  744,  744,  738,  776,  738,  777,
      738,  661,  738,  663,  755,  738,  738,  778,  667,  744,
      744,  744,  744,  744,  744,  744,  744,  779,  738,  780,
      781,  758,  738,  738,  684,  738,  686,  782,  744,  744,
      744,  744,  744,  744,  744,  738,  783,  784,  738,  699,

      755,  738,  785,  744,  744,  744,  744,  744,  738,  786,
      787,  738,  738,  788,  789,  790,  738,  738,  791,  792,
      793,  794,  738,  795,  796,  797,  798,  738,  799,  800,
      801,  802,  738,  803,  804,  805,  738,    0,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,

      738,  738,  738,  738,  738
    } ;

static yyconst flex_int16_t yy_nxt[4115] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   26,   26,   28,   26,   29,   30,   31,   26,   32,
       33,   34,   35,   36,   37,   26,   38,   26,   19,   21,
       22,   23,   24,   25,   26,   27,   26,   26,   28,   26,
       29,   30,   31,   26,   32,   33,   34,   35,   36,   37,
       26,   38,   26,   42,   43,   44,   43,   50,  738,   70,
      735,   51,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   53,   54,   54,   54,   54,   54,   54,  738,   55,

       64,  735,   66,  738,   70,   42,   43,   67,   68,   44,
       43,   65,   96,  738,   69,   56,   42,   43,   54,   54,
       54,   54,   54,  704,   55,  652,   64,   66,  738,  738,
      738,   85,   67,   68,   73,   86,   65,   96,  735,   69,
       56,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       53,   59,   59,   60,   61,   59,   59,   85,   62,   73,
       86,  111,  738,   97,  738,  112,  730,   98,  735,  100,
      114,   63,  133,  738,  158,  738,  143,   59,   60,   61,
       59,   59,  706,   62,  738,  160,  111,  738,  738,   97,
      112,   81,   98,  113,  100,  114,   63,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   53,   59,   59,   59,
       59,   59,   59,  738,   62,   71,   81,  738,  113,   74,
      692,  738,  730,  122,  468,  738,   76,   75,  730,   82,
      738,   72,   77,   59,   59,   59,   59,   59,  738,   62,
       83,   71,  738,   84,   74,   99,  738,   78,  122,  117,
      468,   76,   75,   79,   82,  738,   72,   77,   80,  119,
      163,  164,  738,   87,   88,   83,  210,  170,   84,  158,
       99,  738,   78,  738,  117,   89,  725,  212,   79,  738,
      276,  118,  120,   80,  119,  163,  164,  121,   87,   88,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  738,

       89,   90,   91,  123,  738,  115,  118,  120,  738,  738,
       92,  738,  121,  116,  128,  738,  124,  166,   93,  738,
      125,  705,  129,  730,  738,  181,  725,   94,  123,  210,
       95,  115,  738,  738,  738,  738,   92,  738,  116,  128,
      328,  124,  166,   93,  725,  720,  125,  129,  738,  131,
      134,  130,   94,  135,  132,   95,  103,  103,  103,  103,
      103,  103,  103,  103,  103,   53,  104,  104,  104,  104,
      104,  104,  184,   55,  131,  134,  130,  693,  135,  132,
      690,  738,  725,  691,  738,  738,  720,  738,  738,  126,
      738,  140,  104,  104,  104,  104,  104,  136,   55,  108,

      108,  108,  108,  108,  108,  108,  108,  108,  127,  109,
      109,  109,  109,  109,  109,  126,  738,  140,  182,  183,
      707,  720,  136,  158,  711,  720,  711,  738,  711,  738,
      142,  738,  141,  127,  391,  109,  109,  109,  109,  109,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  738,
      110,  110,  110,  110,  110,  110,  142,  141,  738,  137,
      738,  138,  139,  738,  738,  171,  681,  738,  738,  738,
      738,  144,  147,  738,  738,  165,  110,  110,  110,  110,
      110,  145,  146,  149,  137,  148,  138,  139,  150,  738,
      196,  171,  177,  151,  210,  738,  144,  147,  158,  223,

      165,  210,  738,  258,  738,  442,  145,  146,  149,  497,
      148,  738,  536,  150,  738,  738,  738,  177,  151,  152,
      152,  152,  152,  152,  152,  152,  152,  152,   53,  153,
      153,  153,  153,  153,  153,  167,   55,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  220,  738,  738,  738,
      668,  711,  681,  659,  168,  153,  153,  153,  153,  153,
      167,   55,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  220,  157,  157,  157,  157,  157,  157,  738,  168,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  738,
      738,  738,  738,  738,  643,  681,  169,  172,  157,  157,

      157,  157,  157,  158,  175,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  160,  161,  161,  161,  161,  161,
      161,  169,  172,  659,  263,  738,  158,  738,  284,  175,
      173,  738,  625,  681,  738,  738,  738,  575,  178,  179,
      738,  161,  161,  161,  161,  161,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  173,  162,  162,  162,  162,
      162,  162,  738,  178,  179,  738,  738,  738,  738,  738,
      180,  679,  659,  190,  617,  185,  738,  738,  191,  186,
      738,  174,  162,  162,  162,  162,  162,  176,  187,  189,
      738,  738,  188,  738,  193,  180,  192,  738,  190,  738,

      185,  738,  738,  191,  186,  194,  174,  738,  738,  738,
      198,  738,  176,  187,  189,  195,  199,  188,  738,  197,
      193,  192,  201,  200,  738,  738,  738,  202,  738,  234,
      194,  738,  204,  285,  203,  198,  224,  205,  291,  292,
      195,  199,  210,  309,  197,  738,  319,  201,  200,  597,
      738,  738,  202,  597,  234,  738,  659,  204,  738,  203,
      738,  224,  205,  206,  206,  206,  206,  206,  206,  206,
      206,  206,   53,  207,  207,  207,  207,  207,  207,  225,
       55,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  207,

      207,  207,  207,  207,  225,   55,  210,  738,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  212,  213,  213,
      213,  213,  213,  213,  738,  230,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  213,  213,  213,  213,  213,  158,
      230,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      160,  216,  216,  216,  216,  216,  216,  738,  221,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  617,  738,
      738,  738,  738,  738,  231,  222,  575,  216,  216,  216,
      216,  216,  217,  217,  217,  217,  217,  217,  217,  217,

      217,  227,  218,  218,  218,  218,  218,  218,  738,  231,
      222,  738,  672,  673,  674,  738,  675,  639,  617,  567,
      738,  738,  738,  738,  229,  226,  227,  228,  218,  218,
      218,  218,  218,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  232,  219,  219,  219,  219,  219,  219,  229,
      226,  738,  228,  738,  738,  536,  233,  738,  738,  617,
      738,  738,  738,  246,  738,  241,  249,  232,  244,  219,
      219,  219,  219,  219,  236,  235,  237,  238,  239,  243,
      242,  233,  738,  738,  738,  738,  738,  567,  246,  248,
      241,  249,  738,  244,  245,  250,  738,  738,  247,  236,

      235,  237,  238,  239,  243,  242,  252,  738,  257,  738,
      251,  738,  253,  254,  248,  738,  256,  738,  738,  245,
      250,  738,  259,  247,  738,  260,  738,  738,  255,  289,
      261,  252,  288,  257,  279,  251,  262,  253,  254,  738,
      336,  256,  738,  738,  497,  106,  344,  259,  345,  567,
      738,  260,  738,  255,  289,  261,  294,  288,  738,  279,
      738,  262,  210,  488,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  212,  269,  269,  269,  269,  269,  269,
      738,  294,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  738,  738,  738,  738,  738,  738,  296,  738,  738,

      269,  269,  269,  269,  269,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  278,  271,  271,  271,  271,  271,
      271,  272,  296,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  442,  567,  488,  738,  158,  738,  738,  278,
      302,  271,  271,  271,  271,  271,  158,  625,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  160,  274,  274,
      274,  274,  274,  274,  738,  302,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  274,  274,  274,  274,  274,  158,
      738,  275,  275,  275,  275,  275,  275,  275,  275,  275,

      276,  277,  277,  277,  277,  277,  277,  738,  738,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  738,  281,
      282,  283,  738,  738,  738,  738,  738,  277,  277,  277,
      277,  277,  738,  290,  293,  295,  299,  280,  738,  298,
      738,  738,  286,  287,  281,  282,  283,  297,  738,  738,
      738,  300,  738,  303,  738,  301,  738,  305,  290,  293,
      295,  299,  280,  304,  306,  298,  738,  286,  287,  307,
      308,  738,  297,  738,  738,  738,  300,  738,  303,  311,
      301,  738,  313,  305,  738,  314,  310,  738,  304,  306,
      312,  738,  315,  738,  307,  308,  317,  316,  738,  356,

      318,  357,  321,  738,  311,  320,  210,  313,  366,  738,
      314,  310,  158,  738,  738,  312,  343,  643,  315,  738,
      738,  317,  316,  668,  356,  318,  357,  321,  391,  324,
      320,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      210,  343,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  212,  326,  326,  326,  326,  326,  326,  738,  367,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  106,
      488,  738,  373,  380,  738,  738,  337,  738,  326,  326,
      326,  326,  326,  210,  738,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  328,  329,  329,  329,  329,  329,

      329,  738,  337,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  738,  738,  738,  738,  328,  488,  380,  738,
      339,  329,  329,  329,  329,  329,  158,  738,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  276,  333,  333,
      333,  333,  333,  333,  738,  339,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  738,  738,  738,  738,  738,
      738,  341,  276,  106,  333,  333,  333,  333,  333,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  338,  335,
      335,  335,  335,  335,  335,  738,  341,  738,  738,  738,
      738,  738,  738,  738,  340,  738,  351,  380,  266,  738,

      347,  348,  349,  338,  738,  335,  335,  335,  335,  335,
      342,  346,  350,  738,  353,  738,  738,  352,  738,  340,
      354,  738,  351,  738,  365,  347,  348,  349,  355,  738,
      738,  358,  361,  738,  738,  342,  346,  350,  738,  353,
      362,  359,  352,  364,  738,  354,  363,  360,  738,  365,
      738,  738,  738,  355,  738,  370,  358,  361,  738,  400,
      738,  368,  369,  738,  376,  362,  359,  372,  364,  377,
      371,  363,  360,  415,  374,  375,  738,  452,  465,  474,
      370,  506,  738,  212,  514,  400,  368,  369,  380,  738,
      738,  738,  372,  738,  377,  371,  738,  266,  415,  374,

      375,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      210,  738,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  328,  384,  384,  384,  384,  384,  384,  738,  516,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  738,
      160,  738,  106,  266,  738,  738,  155,  738,  384,  384,
      384,  384,  384,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  395,  386,  386,  386,  386,  386,  386,  387,
      396,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      738,  416,  738,  738,  266,  155,  738,  395,  738,  386,
      386,  386,  386,  386,  158,  396,  331,  331,  331,  331,

      331,  331,  331,  331,  331,  158,  416,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  276,  389,  389,  389,
      389,  389,  389,  738,  469,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  389,  389,  389,  389,  389,  158,  469,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  391,
      392,  392,  392,  392,  392,  392,  738,  738,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  738,  738,  393,
      738,  738,  394,  397,  738,  738,  392,  392,  392,  392,
      392,  738,  738,  399,  401,  738,  406,  409,  398,  738,

      407,  738,  405,  402,  393,  738,  408,  394,  397,  403,
      738,  404,  738,  410,  240,  738,  738,  411,  399,  401,
      412,  406,  409,  398,  738,  407,  738,  405,  402,  413,
      738,  414,  408,  738,  403,  420,  404,  738,  410,  738,
      417,  738,  411,  738,  738,  412,  738,  738,  422,  738,
      425,  738,  418,  738,  413,  419,  414,  421,  423,  738,
      420,  424,  426,  738,  427,  738,  417,  738,  738,  738,
      429,  428,  738,  422,  738,  425,  433,  418,  430,  431,
      419,  432,  421,  423,  738,  458,  424,  426,  434,  449,
      427,  106,  435,  549,  155,  429,  428,  582,  738,  611,

      155,  433,  738,  430,  431,  738,  432,  738,  738,  738,
      458,  738,  738,  434,  449,  738,  438,  435,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  210,  106,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  210,  738,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  328,
      440,  440,  440,  440,  440,  440,  738,  511,  440,  440,
      440,  440,  440,  440,  440,  440,  440,   48,   49,   46,
      101,  738,   57,  738,  451,   49,  440,  440,  440,  440,
      440,  210,  511,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  442,  443,  443,  443,  443,  443,  443,  738,

      451,  443,  443,  443,  443,  443,  443,  443,  443,  443,
       46,  738,   40,  738,   40,  738,  738,  738,  453,  443,
      443,  443,  443,  443,  158,  738,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  391,  446,  446,  446,  446,
      446,  446,  738,  453,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  738,  738,  738,  738,  738,  738,  457,
      738,  454,  446,  446,  446,  446,  446,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  738,  448,  448,  448,
      448,  448,  448,  455,  456,  457,  454,  738,  738,  738,
      450,  738,  738,  738,  461,  463,  738,  738,  466,  738,

      460,  738,  459,  448,  448,  448,  448,  448,  455,  456,
      462,  467,  738,  738,  476,  450,  464,  738,  471,  461,
      463,  470,  472,  466,  738,  460,  738,  459,  738,  475,
      738,  738,  473,  738,  478,  462,  467,  738,  517,  476,
      477,  464,  479,  471,  738,  738,  470,  472,  738,  480,
      481,  484,  483,  482,  475,  738,  738,  473,  738,  478,
      738,  738,  499,  517,  738,  477,  518,  479,  500,  505,
      502,  485,  738,  501,  480,  481,  484,  483,  482,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  499,  738,
      508,  518,  738,  500,  505,  502,  485,  210,  501,  490,

      490,  490,  490,  490,  490,  490,  490,  490,  442,  491,
      491,  491,  491,  491,  491,  738,  508,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  491,  491,  491,  491,  491,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  738,
      493,  493,  493,  493,  493,  493,  738,  557,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  738,  738,  738,
      738,  738,  738,  738,  510,  738,  493,  493,  493,  493,
      493,  158,  557,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  391,  495,  495,  495,  495,  495,  495,  738,

      510,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  495,
      495,  495,  495,  495,  158,  738,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  497,  498,  498,  498,  498,
      498,  498,  738,  738,  738,  503,  738,  738,  738,  738,
      738,  513,  738,  738,  738,  738,  528,  504,  509,  525,
      515,  522,  498,  498,  498,  498,  498,  507,  512,  519,
      503,  520,  521,  738,  738,  738,  513,  738,  523,  738,
      738,  528,  504,  509,  525,  515,  522,  524,  738,  526,
      738,  558,  507,  512,  519,  527,  520,  521,  542,  738,

      738,  627,  548,  523,  529,  530,  738,  544,  738,  738,
      738,  738,  524,  738,  526,  738,  558,  738,  738,  738,
      527,  738,  738,  542,  738,  738,  627,  548,  738,  529,
      530,  210,  544,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  442,  534,  534,  534,  534,  534,  534,  738,
      543,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      738,  738,  738,  738,  738,  738,  738,  738,  545,  534,
      534,  534,  534,  534,  210,  543,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  536,  537,  537,  537,  537,
      537,  537,  738,  545,  537,  537,  537,  537,  537,  537,

      537,  537,  537,  738,  738,  738,  738,  738,  738,  738,
      738,  547,  537,  537,  537,  537,  537,  158,  738,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  497,  539,
      539,  539,  539,  539,  539,  738,  547,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  738,  738,  738,  738,
      738,  550,  551,  738,  553,  539,  539,  539,  539,  539,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  738,
      541,  541,  541,  541,  541,  541,  550,  551,  546,  738,
      553,  738,  738,  738,  738,  738,  738,  738,  552,  561,
      738,  556,  559,  554,  560,  562,  541,  541,  541,  541,

      541,  555,  738,  546,  738,  564,  738,  563,  738,  577,
      738,  738,  738,  552,  561,  738,  556,  559,  554,  560,
      562,  738,  738,  738,  738,  738,  555,  580,  738,  738,
      564,  738,  563,  210,  577,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  536,  569,  569,  569,  569,  569,
      569,  738,  580,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  738,  738,  738,  738,  738,  738,  585,  738,
      738,  569,  569,  569,  569,  569,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  589,  571,  571,  571,  571,
      571,  571,  738,  585,  573,  573,  573,  573,  573,  573,

      573,  573,  573,  738,  738,  738,  738,  738,  738,  738,
      589,  586,  571,  571,  571,  571,  571,  158,  738,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  497,  573,
      573,  573,  573,  573,  573,  738,  586,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  573,  573,  573,  573,  573,
      158,  578,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  575,  576,  576,  576,  576,  576,  576,  738,  738,
      738,  738,  738,  738,  738,  587,  578,  738,  738,  588,
      738,  579,  581,  583,  584,  738,  591,  607,  576,  576,

      576,  576,  576,  608,  590,  738,  655,  738,  738,  738,
      587,  738,  738,  738,  588,  738,  579,  581,  583,  584,
      738,  591,  607,  738,  603,  738,  738,  738,  608,  590,
      210,  655,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  536,  595,  595,  595,  595,  595,  595,  738,  603,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  738,
      738,  738,  738,  738,  738,  738,  738,  604,  595,  595,
      595,  595,  595,  210,  738,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  597,  598,  598,  598,  598,  598,
      598,  738,  604,  598,  598,  598,  598,  598,  598,  598,

      598,  598,  738,  738,  738,  738,  738,  738,  738,  605,
      738,  598,  598,  598,  598,  598,  158,  738,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  575,  600,  600,
      600,  600,  600,  600,  738,  605,  600,  600,  600,  600,
      600,  600,  600,  600,  600,  738,  738,  738,  738,  738,
      606,  738,  609,  738,  600,  600,  600,  600,  600,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  613,  602,
      602,  602,  602,  602,  602,  606,  738,  738,  609,  738,
      738,  610,  612,  738,  629,  738,  738,  738,  631,  630,
      738,  636,  614,  613,  676,  602,  602,  602,  602,  602,

      738,  738,  738,  738,  738,  738,  610,  612,  738,  738,
      629,  738,  656,  631,  630,  738,  636,  614,  210,  676,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  597,
      619,  619,  619,  619,  619,  619,  738,  656,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  738,  738,  738,
      738,  738,  738,  649,  738,  738,  619,  619,  619,  619,
      619,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      628,  621,  621,  621,  621,  621,  621,  738,  649,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  738,  738,
      738,  738,  738,  738,  738,  628,  650,  621,  621,  621,

      621,  621,  158,  738,  622,  622,  622,  622,  622,  622,
      622,  622,  622,  575,  623,  623,  623,  623,  623,  623,
      738,  650,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  738,  738,  738,  738,  738,  738,  738,  653,  738,
      623,  623,  623,  623,  623,  158,  738,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  625,  626,  626,  626,
      626,  626,  626,  738,  653,  632,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  633,  738,
      738,  738,  738,  626,  626,  626,  626,  626,  634,  635,
      632,  738,  738,  641,  641,  641,  641,  641,  641,  641,

      641,  641,  738,  633,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  634,  635,  210,  738,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  597,  641,  641,  641,
      641,  641,  641,  738,  670,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  738,  738,  738,  738,  738,  738,
      738,  738,  654,  641,  641,  641,  641,  641,  210,  670,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  643,
      644,  644,  644,  644,  644,  644,  738,  654,  738,  738,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  738,
      738,  738,  738,  738,  738,  651,  644,  644,  644,  644,

      644,  158,  738,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  625,  646,  646,  646,  646,  646,  646,  738,
      651,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      738,  738,  738,  738,  738,  738,  671,  738,  738,  646,
      646,  646,  646,  646,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  738,  648,  648,  648,  648,  648,  648,
      738,  671,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  738,  738,  738,  738,  738,  738,  738,  689,  694,
      648,  648,  648,  648,  648,  210,  677,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  643,  662,  662,  662,

      662,  662,  662,  689,  694,  738,  738,  738,  738,  738,
      738,  677,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  738,  738,  662,  662,  662,  662,  662,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  738,  664,  664,
      664,  664,  664,  664,  738,  738,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  738,  738,  738,  738,  738,
      738,  738,  738,  695,  664,  664,  664,  664,  664,  158,
      738,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      625,  666,  666,  666,  666,  666,  666,  738,  695,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  738,  738,

      738,  738,  738,  738,  738,  738,  738,  666,  666,  666,
      666,  666,  158,  738,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  668,  669,  669,  669,  669,  669,  669,
      738,  708,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      669,  669,  669,  669,  669,  210,  708,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  643,  683,  683,  683,
      683,  683,  683,  738,  738,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  683,  683,  683,  683,  683,  210,  738,

      684,  684,  684,  684,  684,  684,  684,  684,  684,  738,
      685,  685,  685,  685,  685,  685,  738,  738,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  685,  685,  685,  685,
      685,  158,  738,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  668,  687,  687,  687,  687,  687,  687,  210,
      738,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  687,
      687,  687,  687,  687,  210,  738,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  738,  700,  700,  700,  700,

      700,  700,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  700,  700,  700,  700,  700,  158,  738,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  668,  702,
      702,  702,  702,  702,  702,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  702,  702,  702,  702,  702,
      210,  738,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  738,  713,  713,  713,  713,  713,  713,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,

      738,  738,  738,  738,  738,  738,  738,  738,  713,  713,
      713,  713,  713,   39,   39,   39,   39,   39,   39,   39,
       41,   41,   41,   41,   41,   41,   41,   45,   45,   45,
       45,   45,   45,   45,   47,  738,   47,   47,   47,   47,
       47,   48,   48,   48,   48,   48,   48,   48,   58,   58,
       58,   58,   58,  102,  738,  102,  102,  102,  102,  102,
      105,  105,  105,  107,  738,  107,  154,  154,  154,  208,
      208,  208,  209,  209,  209,  264,  264,  264,  265,  265,
      265,  322,  322,  322,  323,  323,  323,  331,  331,  331,
      378,  378,  378,  379,  379,  379,  382,  382,  382,  436,

      436,  436,  437,  437,  437,  486,  486,  486,  487,  487,
      487,  531,  531,  531,  532,  532,  532,  565,  565,  565,
      566,  566,  566,  592,  592,  592,  593,  593,  593,  615,
      615,  615,  616,  616,  616,  637,  637,  637,  638,  638,
      638,  657,  657,  657,  658,  658,  658,  660,  738,  660,
      678,  678,  678,  680,  680,  680,  688,  738,  688,  696,
      696,  696,  697,  697,  697,  698,  738,  698,  703,  738,
      703,  709,  709,  709,  710,  710,  710,  714,  738,  714,
      715,  715,  715,  716,  738,  716,  717,  738,  717,  718,
      718,  718,  719,  719,  719,  721,  721,  721,  722,  738,

      722,  723,  723,  723,  724,  724,  724,  726,  726,  726,
      727,  738,  727,  728,  728,  728,  729,  729,  729,  731,
      731,  731,  732,  738,  732,  733,  733,  733,  734,  734,
      734,  736,  736,  736,  664,  738,  664,  737,  737,  737,
        7,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,

      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738
    } ;

static yyconst flex_int16_t yy_chk[4115] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   10,   10,   11,   11,   15,   17,   23,
      737,   15,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   35,   16,

       21,  736,   22,   17,   23,   42,   42,   22,   22,   43,
       43,   21,   35,   25,   22,   16,   44,   44,   16,   16,
       16,   16,   16,  690,   16,  630,   21,   22,  690,  630,
       32,   32,   22,   22,   25,   32,   21,   35,  734,   22,
       16,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   32,   19,   25,
       32,   60,   36,   36,   38,   61,  733,   36,  732,   38,
       64,   19,   82,   63,  273,   30,   92,   19,   19,   19,
       19,   19,  692,   19,   82,  273,   60,  692,   92,   36,
       61,   30,   36,   63,   38,   64,   19,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   27,   20,   24,   30,   28,   63,   27,
      674,  674,  731,   71,  415,   31,   28,   27,  729,   31,
       37,   24,   28,   20,   20,   20,   20,   20,   29,   20,
       31,   24,   66,   31,   27,   37,   68,   29,   71,   66,
      415,   28,   27,   29,   31,   33,   24,   28,   29,   68,
      111,  112,   67,   33,   33,   31,  325,  118,   31,  388,
       37,   70,   29,   69,   66,   33,  728,  325,   29,  118,
      388,   67,   69,   29,   68,  111,  112,   70,   33,   33,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   72,

       33,   34,   34,   72,   65,   65,   67,   69,   76,   34,
       34,   73,   70,   65,   76,   77,   73,  114,   34,   74,
       74,  691,   77,  727,  691,  129,  726,   34,   72,  439,
       34,   65,   78,   80,   81,   83,   34,  129,   65,   76,
      439,   73,  114,   34,  724,  723,   74,   77,   84,   80,
       83,   78,   34,   84,   81,   34,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,  131,   52,   80,   83,   78,  675,   84,   81,
      673,   85,  722,  673,  131,  675,  721,  673,   75,   75,
       87,   87,   52,   52,   52,   52,   52,   85,   52,   57,

       57,   57,   57,   57,   57,   57,   57,   57,   75,   57,
       57,   57,   57,   57,   57,   75,   88,   87,  130,  130,
      693,  719,   85,  494,  718,  716,  715,  693,  710,   89,
       89,  130,   88,   75,  494,   57,   57,   57,   57,   57,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   86,
       59,   59,   59,   59,   59,   59,   89,   88,   93,   86,
       94,   86,   86,   96,  119,  119,  709,  113,   95,   98,
       99,   93,   96,   97,  100,  113,   59,   59,   59,   59,
       59,   94,   95,   98,   86,   97,   86,   86,   99,  125,
      141,  119,  125,  100,  533,  708,   93,   96,  572,  165,

      113,  594,  141,  199,  707,  533,   94,   95,   98,  572,
       97,  165,  594,   99,  706,  199,  115,  125,  100,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  115,  103,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  163,  705,  704,  116,
      702,  698,  697,  696,  116,  103,  103,  103,  103,  103,
      115,  103,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  163,  106,  106,  106,  106,  106,  106,  109,  116,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  695,
      123,  117,  689,  120,  683,  680,  117,  120,  106,  106,

      106,  106,  106,  108,  123,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  117,  120,  678,  205,  121,  622,  672,  224,  123,
      121,  671,  666,  660,  127,  126,  205,  622,  126,  127,
      224,  108,  108,  108,  108,  108,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  121,  110,  110,  110,  110,
      110,  110,  122,  126,  127,  128,  132,  135,  124,  136,
      128,  659,  658,  135,  657,  132,  133,  134,  136,  133,
      654,  122,  110,  110,  110,  110,  110,  124,  133,  134,
      139,  137,  133,  138,  138,  128,  137,  140,  135,  142,

      132,  652,  650,  136,  133,  139,  122,  143,  146,  178,
      143,  144,  124,  133,  134,  140,  144,  133,  145,  142,
      138,  137,  146,  145,  147,  148,  150,  147,  149,  178,
      139,  166,  149,  225,  148,  143,  166,  150,  232,  233,
      140,  144,  640,  249,  142,  225,  261,  146,  145,  641,
      232,  233,  147,  640,  178,  249,  638,  149,  261,  148,
      167,  166,  150,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  167,
      152,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  152,

      152,  152,  152,  152,  167,  152,  156,  173,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  157,  173,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  156,  156,  156,  156,  156,  159,
      173,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  161,  164,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  637,  174,
      164,  636,  169,  635,  174,  164,  623,  159,  159,  159,
      159,  159,  160,  160,  160,  160,  160,  160,  160,  160,

      160,  169,  160,  160,  160,  160,  160,  160,  170,  174,
      164,  168,  653,  653,  653,  171,  653,  617,  616,  615,
      653,  610,  604,  176,  171,  168,  169,  170,  160,  160,
      160,  160,  160,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  176,  162,  162,  162,  162,  162,  162,  171,
      168,  177,  170,  185,  180,  595,  177,  179,  187,  593,
      184,  183,  191,  187,  181,  183,  191,  176,  185,  162,
      162,  162,  162,  162,  180,  179,  181,  181,  181,  184,
      183,  177,  186,  188,  190,  193,  194,  592,  187,  190,
      183,  191,  192,  185,  186,  192,  198,  589,  188,  180,

      179,  181,  181,  181,  184,  183,  194,  195,  198,  196,
      193,  197,  195,  196,  190,  229,  197,  201,  221,  186,
      192,  204,  201,  188,  202,  202,  203,  228,  196,  229,
      203,  194,  228,  198,  221,  193,  204,  195,  196,  584,
      278,  197,  583,  578,  573,  567,  286,  201,  287,  566,
      235,  202,  278,  196,  229,  203,  235,  228,  286,  221,
      287,  204,  211,  565,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      213,  235,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  564,  237,  562,  220,  551,  547,  237,  544,  543,

      211,  211,  211,  211,  211,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  220,  212,  212,  212,  212,  212,
      212,  214,  237,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  534,  532,  531,  242,  665,  527,  526,  220,
      242,  212,  212,  212,  212,  212,  215,  665,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  216,  242,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  215,  215,  215,  215,  215,  217,
      523,  217,  217,  217,  217,  217,  217,  217,  217,  217,

      217,  217,  217,  217,  217,  217,  217,  218,  223,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  222,  223,
      223,  223,  226,  227,  230,  234,  236,  217,  217,  217,
      217,  217,  238,  230,  234,  236,  240,  222,  239,  239,
      241,  521,  226,  227,  223,  223,  223,  238,  243,  244,
      246,  240,  248,  243,  247,  241,  245,  245,  230,  234,
      236,  240,  222,  244,  246,  239,  250,  226,  227,  247,
      248,  258,  238,  256,  252,  254,  240,  255,  243,  252,
      241,  260,  255,  245,  259,  256,  250,  262,  244,  246,
      254,  257,  257,  520,  247,  248,  259,  258,  263,  299,

      260,  300,  263,  285,  252,  262,  682,  255,  310,  519,
      256,  250,  701,  513,  511,  254,  285,  682,  257,  505,
      310,  259,  258,  701,  299,  260,  300,  263,  495,  267,
      262,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      268,  285,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  269,  311,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  488,
      487,  311,  317,  486,  482,  279,  279,  481,  268,  268,
      268,  268,  268,  270,  317,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,

      270,  271,  279,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  478,  473,  467,  281,  440,  437,  436,  435,
      281,  270,  270,  270,  270,  270,  275,  430,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  277,  281,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  420,  283,  414,  413,  280,
      411,  283,  389,  380,  275,  275,  275,  275,  275,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  280,  276,
      276,  276,  276,  276,  276,  282,  283,  290,  291,  292,
      293,  284,  296,  288,  282,  294,  294,  379,  378,  374,

      290,  291,  292,  280,  295,  276,  276,  276,  276,  276,
      284,  288,  293,  305,  296,  298,  297,  295,  301,  282,
      297,  309,  294,  302,  309,  290,  291,  292,  298,  303,
      363,  301,  305,  306,  307,  284,  288,  293,  308,  296,
      306,  302,  295,  308,  313,  297,  307,  303,  312,  309,
      314,  315,  316,  298,  318,  314,  301,  305,  343,  343,
      321,  312,  313,  319,  320,  306,  302,  316,  308,  321,
      315,  307,  303,  356,  318,  319,  320,  396,  409,  422,
      314,  456,  338,  326,  464,  343,  312,  313,  323,  396,
      409,  422,  316,  456,  321,  315,  464,  322,  356,  318,

      319,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      327,  304,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  329,  466,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  289,
      274,  466,  266,  265,  337,  339,  264,  253,  327,  327,
      327,  327,  327,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  337,  328,  328,  328,  328,  328,  328,  330,
      339,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      251,  357,  231,  219,  209,  208,  207,  337,  206,  328,
      328,  328,  328,  328,  331,  339,  331,  331,  331,  331,

      331,  331,  331,  331,  331,  332,  357,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  333,  416,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  332,  332,  332,  332,  332,  334,  416,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  335,  336,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  340,  341,  336,
      346,  344,  336,  340,  342,  348,  334,  334,  334,  334,
      334,  347,  350,  342,  344,  345,  347,  350,  341,  200,

      348,  189,  346,  345,  336,  349,  349,  336,  340,  345,
      351,  345,  352,  351,  182,  353,  361,  352,  342,  344,
      353,  347,  350,  341,  354,  348,  355,  346,  345,  354,
      359,  355,  349,  360,  345,  361,  345,  362,  351,  358,
      358,  175,  352,  172,  364,  353,  365,  366,  364,  369,
      366,  370,  359,  367,  354,  360,  355,  362,  364,  371,
      361,  365,  367,  368,  368,  372,  358,  375,  373,  376,
      370,  369,  402,  364,  377,  366,  375,  359,  371,  372,
      360,  373,  362,  364,  393,  402,  365,  367,  376,  393,
      368,  155,  377,  507,  154,  370,  369,  550,  151,  587,

      105,  375,   91,  371,  372,  507,  373,   90,   79,  550,
      402,  587,   62,  376,  393,   58,  381,  377,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  382,   53,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  383,  461,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  384,  461,  384,  384,
      384,  384,  384,  384,  384,  384,  384,   49,   48,   45,
       40,   26,   18,  395,  395,   14,  383,  383,  383,  383,
      383,  385,  461,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  386,

      395,  386,  386,  386,  386,  386,  386,  386,  386,  386,
       12,    7,    4,  397,    3,    0,    0,    0,  397,  385,
      385,  385,  385,  385,  390,    0,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  392,  397,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  398,    0,    0,    0,  399,  401,  401,
      400,  398,  390,  390,  390,  390,  390,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  394,  391,  391,  391,
      391,  391,  391,  399,  400,  401,  398,  403,  404,  405,
      394,  407,  408,  410,  405,  407,  406,    0,  410,  412,

      404,  424,  403,  391,  391,  391,  391,  391,  399,  400,
      406,  412,  417,  418,  424,  394,  408,  419,  418,  405,
      407,  417,  419,  410,  421,  404,  423,  403,  425,  423,
      426,  429,  421,  427,  426,  406,  412,  432,  468,  424,
      425,  408,  427,  418,  428,  433,  417,  419,  431,  428,
      429,  433,  432,  431,  423,  434,  450,  421,  452,  426,
      451,  449,  449,  468,  455,  425,  469,  427,  450,  455,
      452,  434,    0,  451,  428,  429,  433,  432,  431,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  449,  458,
      458,  469,    0,  450,  455,  452,  434,  441,  451,  441,

      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  443,  458,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  441,  441,  441,  441,  441,
      442,  442,  442,  442,  442,  442,  442,  442,  442,    0,
      442,  442,  442,  442,  442,  442,  446,  517,  446,  446,
      446,  446,  446,  446,  446,  446,  446,    0,    0,    0,
        0,    0,    0,  460,  460,    0,  442,  442,  442,  442,
      442,  445,  517,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  448,

      460,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  445,
      445,  445,  445,  445,  447,  453,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  454,  457,  459,  453,  463,  465,  462,  474,
      477,  463,  483,  471,  472,  470,  483,  454,  459,  477,
      465,  474,  447,  447,  447,  447,  447,  457,  462,  470,
      453,  471,  472,  475,  476,  479,  463,  480,  475,  499,
      603,  483,  454,  459,  477,  465,  474,  476,  501,  479,
      506,  518,  457,  462,  470,  480,  471,  472,  499,  484,

      485,  603,  506,  475,  484,  485,    0,  501,    0,    0,
        0,    0,  476,    0,  479,    0,  518,    0,    0,    0,
      480,    0,    0,  499,    0,  500,  603,  506,    0,  484,
      485,  490,  501,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  491,
      500,  491,  491,  491,  491,  491,  491,  491,  491,  491,
        0,    0,    0,  502,    0,    0,    0,    0,  502,  490,
      490,  490,  490,  490,  492,  500,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  493,  502,  493,  493,  493,  493,  493,  493,

      493,  493,  493,    0,    0,    0,    0,  504,    0,    0,
        0,  504,  492,  492,  492,  492,  492,  496,    0,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  498,  504,  498,  498,  498,
      498,  498,  498,  498,  498,  498,    0,  509,  508,    0,
        0,  508,  509,  512,  512,  496,  496,  496,  496,  496,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  503,
      497,  497,  497,  497,  497,  497,  508,  509,  503,  510,
      512,  514,  516,  522,  525,  524,  515,  529,  510,  525,
      528,  516,  522,  514,  524,  528,  497,  497,  497,  497,

      497,  515,  530,  503,  542,  530,    0,  529,    0,  542,
        0,    0,    0,  510,  525,    0,  516,  522,  514,  524,
      528,    0,  548,    0,    0,    0,  515,  548,    0,    0,
      530,    0,  529,  535,  542,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  537,  548,  537,  537,  537,  537,  537,  537,  537,
      537,  537,    0,  554,    0,  560,    0,    0,  554,    0,
        0,  535,  535,  535,  535,  535,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  560,  536,  536,  536,  536,
      536,  536,  539,  554,  539,  539,  539,  539,  539,  539,

      539,  539,  539,    0,    0,    0,    0,  555,    0,    0,
      560,  555,  536,  536,  536,  536,  536,  538,    0,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  541,  555,  541,  541,  541,
      541,  541,  541,  541,  541,  541,    0,  545,    0,    0,
        0,    0,    0,    0,    0,  538,  538,  538,  538,  538,
      540,  545,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  546,  552,
      549,  556,  553,  559,  582,  556,  545,  563,  633,  559,
      561,  546,  549,  552,  553,    0,  563,  582,  540,  540,

      540,  540,  540,  582,  561,    0,  633,  577,    0,    0,
      556,    0,    0,    0,  559,    0,  546,  549,  552,  553,
        0,  563,  582,    0,  577,    0,    0,    0,  582,  561,
      568,  633,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  569,  577,
      569,  569,  569,  569,  569,  569,  569,  569,  569,    0,
        0,    0,  579,    0,    0,    0,    0,  579,  568,  568,
      568,  568,  568,  570,    0,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  571,  579,  571,  571,  571,  571,  571,  571,  571,

      571,  571,    0,    0,    0,    0,    0,    0,  580,  580,
        0,  570,  570,  570,  570,  570,  574,    0,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  576,  580,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  581,    0,    0,  590,    0,
      581,  585,  585,    0,  574,  574,  574,  574,  574,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  590,  575,
      575,  575,  575,  575,  575,  581,  586,  588,  585,  591,
      608,  586,  588,  606,  606,  607,  614,    0,  608,  607,
      655,  614,  591,  590,  655,  575,  575,  575,  575,  575,

        0,    0,    0,  634,    0,    0,  586,  588,    0,    0,
      606,    0,  634,  608,  607,    0,  614,  591,  596,  655,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  598,  634,  598,  598,
      598,  598,  598,  598,  598,  598,  598,    0,  627,    0,
        0,  605,    0,  627,    0,    0,  596,  596,  596,  596,
      596,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      605,  597,  597,  597,  597,  597,  597,  600,  627,  600,
      600,  600,  600,  600,  600,  600,  600,  600,    0,    0,
        0,  628,    0,    0,    0,  605,  628,  597,  597,  597,

      597,  597,  599,    0,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      602,  628,  602,  602,  602,  602,  602,  602,  602,  602,
      602,    0,    0,    0,    0,    0,    0,  631,  631,    0,
      599,  599,  599,  599,  599,  601,  609,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  611,  631,  609,    0,    0,  612,    0,
      613,    0,    0,    0,    0,    0,    0,    0,  611,    0,
        0,    0,    0,  601,  601,  601,  601,  601,  612,  613,
      609,  619,    0,  619,  619,  619,  619,  619,  619,  619,

      619,  619,  621,  611,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  612,  613,  618,  649,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  626,  649,  626,  626,  626,  626,  626,
      626,  626,  626,  626,    0,    0,    0,  632,    0,    0,
        0,    0,  632,  618,  618,  618,  618,  618,  620,  649,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  629,  632,  644,    0,
      644,  644,  644,  644,  644,  644,  644,  644,  644,    0,
        0,    0,    0,    0,    0,  629,  620,  620,  620,  620,

      620,  624,    0,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  646,
      629,  646,  646,  646,  646,  646,  646,  646,  646,  646,
        0,  651,    0,    0,    0,    0,  651,    0,    0,  624,
      624,  624,  624,  624,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  670,  625,  625,  625,  625,  625,  625,
      648,  651,  648,  648,  648,  648,  648,  648,  648,  648,
      648,    0,    0,  656,  676,    0,    0,    0,  670,  676,
      625,  625,  625,  625,  625,  642,  656,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,

      642,  642,  642,  670,  676,    0,    0,    0,    0,    0,
      662,  656,  662,  662,  662,  662,  662,  662,  662,  662,
      662,    0,    0,  642,  642,  642,  642,  642,  643,  643,
      643,  643,  643,  643,  643,  643,  643,    0,  643,  643,
      643,  643,  643,  643,  664,    0,  664,  664,  664,  664,
      664,  664,  664,  664,  664,    0,    0,    0,  677,    0,
        0,    0,    0,  677,  643,  643,  643,  643,  643,  645,
        0,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  669,  677,  669,
      669,  669,  669,  669,  669,  669,  669,  669,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  645,  645,  645,
      645,  645,  647,  694,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      685,  694,  685,  685,  685,  685,  685,  685,  685,  685,
      685,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      647,  647,  647,  647,  647,  661,  694,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  687,    0,  687,  687,  687,  687,  687,
      687,  687,  687,  687,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  661,  661,  661,  661,  661,  663,    0,

      663,  663,  663,  663,  663,  663,  663,  663,  663,    0,
      663,  663,  663,  663,  663,  663,  700,    0,  700,  700,
      700,  700,  700,  700,  700,  700,  700,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  663,  663,  663,  663,
      663,  667,    0,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  712,
        0,  712,  712,  712,  712,  712,  712,  712,  712,  712,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  667,
      667,  667,  667,  667,  684,    0,  684,  684,  684,  684,
      684,  684,  684,  684,  684,    0,  684,  684,  684,  684,

      684,  684,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  684,  684,  684,  684,  684,  686,    0,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  686,  686,  686,  686,  686,
      699,    0,  699,  699,  699,  699,  699,  699,  699,  699,
      699,    0,  699,  699,  699,  699,  699,  699,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  699,  699,
      699,  699,  699,  739,  739,  739,  739,  739,  739,  739,
      740,  740,  740,  740,  740,  740,  740,  741,  741,  741,
      741,  741,  741,  741,  742,    0,  742,  742,  742,  742,
      742,  743,  743,  743,  743,  743,  743,  743,  744,  744,
      744,  744,  744,  745,    0,  745,  745,  745,  745,  745,
      746,  746,  746,  747,    0,  747,  748,  748,  748,  749,
      749,  749,  750,  750,  750,  751,  751,  751,  752,  752,
      752,  753,  753,  753,  754,  754,  754,  755,  755,  755,
      756,  756,  756,  757,  757,  757,  758,  758,  758,  759,

      759,  759,  760,  760,  760,  761,  761,  761,  762,  762,
      762,  763,  763,  763,  764,  764,  764,  765,  765,  765,
      766,  766,  766,  767,  767,  767,  768,  768,  768,  769,
      769,  769,  770,  770,  770,  771,  771,  771,  772,  772,
      772,  773,  773,  773,  774,  774,  774,  775,    0,  775,
      776,  776,  776,  777,  777,  777,  778,    0,  778,  779,
      779,  779,  780,  780,  780,  781,    0,  781,  782,    0,
      782,  783,  783,  783,  784,  784,  784,  785,    0,  785,
      786,  786,  786,  787,    0,  787,  788,    0,  788,  789,
      789,  789,  790,  790,  790,  791,  791,  791,  792,    0,

      792,  793,  793,  793,  794,  794,  794,  795,  795,  795,
      796,    0,  796,  797,  797,  797,  798,  798,  798,  799,
      799,  799,  800,    0,  800,  801,  801,  801,  802,  802,
      802,  803,  803,  803,  804,    0,  804,  805,  805,  805,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,

      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[90] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 1619 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 1724 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 739 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4041 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 60 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 62 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::TUNNEL_MODE_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 108 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 122 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 125 "SrvLexer.l"
;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno; 
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 134 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 135 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 136 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 76:
YY_RULE_SETUP
#line 143 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 152 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 161 "SrvLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 170 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 179 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 188 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 197 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 209 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 216 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 237 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd then no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 269 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd; 
      YYABORT; 
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 279 "SrvLexer.l"
{ 
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) { 
        Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd; 
        YYABORT; 
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 288 "SrvLexer.l"
{ return yytext[0]; } 
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 291 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 2397 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 739 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 739 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 738);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 291 "SrvLexer.l"




