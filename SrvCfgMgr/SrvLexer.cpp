#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 63
#define YY_END_OF_BUFFER 64
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[567] =
    {   0,
        1,    1,    0,    0,    0,    0,   64,   62,    2,    1,
        1,   62,   45,   62,   62,   61,   61,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   49,   49,   63,    1,
        1,    1,    0,   57,   45,    0,   57,   47,   46,   61,
        0,    0,   60,    0,   54,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       42,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       15,   16,   58,   58,   58,   58,   58,   58,   58,   48,
       46,   61,    0,    0,   53,   59,   52,   52,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   41,   61,
        0,    0,    0,   51,   51,    0,   52,    0,   52,   58,
       58,   58,   58,   58,   58,   58,   58,   34,   58,   58,
       58,   58,    0,   58,   58,   58,   21,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   43,   58,   58,   58,
       61,    0,    0,    0,    0,   51,    0,   51,    0,   52,
       52,   52,   52,   58,   58,   58,    4,   58,   58,   58,
       44,    3,   58,   58,   58,   58,   58,    0,   58,   58,

       58,   58,   58,   58,   58,    7,   22,   58,   58,   58,
       58,   58,   58,   58,   58,    0,    0,    0,    0,   51,
       51,   51,   51,    0,   52,   52,   52,    0,   52,   58,
       58,   58,   58,   58,   29,   58,   58,   58,   58,   58,
       58,    0,    0,   58,   58,   58,   27,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,    0,    0,
        0,   51,   51,   51,    0,   51,    0,    0,   52,   52,
       52,   52,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,    0,    0,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   19,   58,   58,    0,

        0,    0,    0,    0,   51,   51,   51,   51,    0,   52,
       52,   52,    0,   52,   58,   58,   58,   58,   58,   58,
       58,   39,   58,   11,    9,    0,    0,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,    5,   58,   58,
       12,    0,    0,    0,   51,   51,   51,    0,   51,   56,
       52,   52,   52,   52,   58,   58,   58,   58,   58,   58,
       58,   10,    0,    0,   58,   58,   58,   58,   58,   58,
       58,   58,   58,    6,   31,   58,    0,    0,    0,   55,
       51,   51,   51,   51,   52,   52,   52,    0,   52,   58,
       40,   58,   58,   28,   58,   58,    0,    0,   36,   35,

       30,   58,   20,   58,   58,   33,   32,   58,    0,    0,
       51,   51,   51,    0,   51,   52,   52,   52,   52,   13,
       58,   58,   58,   58,   38,   37,   58,   58,   58,   58,
        0,    0,    0,   51,   51,   51,   51,   52,   52,   52,
        0,   52,   58,   58,   58,    8,   58,   23,   58,   58,
        0,    0,   51,   51,   51,    0,   51,   52,   52,   52,
       52,   58,   58,   58,   58,   58,   58,    0,    0,    0,
       51,   51,   51,   51,   52,   52,   52,    0,   52,   58,
       58,   58,   58,   14,   18,    0,   50,   53,   51,   51,
       51,    0,   51,   52,   52,   52,   52,   25,   58,   24,

       58,    0,   50,    0,   51,   51,   51,   51,   51,   52,
       52,   52,    0,   52,   26,   58,   50,   53,   51,    0,
       51,   51,   51,   51,   52,   52,   52,   17,   50,   51,
       51,   51,   51,   52,   52,   52,   51,   51,    0,   51,
       51,   52,   51,   51,   52,   51,   51,    0,   51,   51,
       51,   51,    0,   51,   51,   51,   51,    0,   51,   51,
       51,   51,    0,   51,   51,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   16,   16,   16,   16,   16,   16,   17,    1,    1,
        1,    1,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
        1,    1,    1,    1,    1,    1,   18,   19,   20,   21,

       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[44] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        3,    1,    4,    4,    4,    4,    5,    4,    4,    4,
        4,    4,    4,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[646] =
    {   0,
        0,    0, 1876, 1875,    0,    0, 1882, 1885, 1885,   41,
       43, 1876,    0, 1873,   40,   40, 1838, 1861,   69,   82,
       46,   18,   33, 1860,   49,   89,   91,   60,   92,   51,
       93,  117,   94,   53,   97,   57, 1885, 1864, 1885,  109,
      133,  135, 1870, 1885,    0, 1867, 1866, 1885,    0,  140,
     1855,  131, 1885,    0,  135, 1854,  153, 1850, 1852, 1848,
      160,  105,  103, 1838,  162,  163,  147,  165,  168,  153,
     1849,  109,  170,  173,  174,  176,  177,  180,  178,  182,
     1848, 1847,  191,  185,  186,  193,  196,  195,  197, 1885,
        0,  221,  207, 1846,  213,    0,  236,  249,  253, 1840,

     1836,  244,  260,  268,  199,  253,  201,  228,  262,  264,
      273,  278,  281,  275,  276,  277,  280,  282,  285,  279,
      298,  290,  292,  294,  296,  300,  293,  304, 1843,  320,
      309, 1842, 1841,  335,  315,  346,  352,  363,  369,  373,
     1824,  380,  364,  373,  381,  382,  384, 1839,  388,  386,
      327,  394, 1845,  392,  390,  395, 1837,  397,  399,  398,
      405,  412,  414,  415,  413,  423, 1836,  421,  424,  426,
      438, 1835, 1834, 1833,  443,  449,  460,  466,  472,  478,
      491,  497,  510, 1832,  492,  517,  518,  505,  427,  513,
     1831,  521,  461,  515,  523,  429,  519,  512,  522,  529,

      530,  526,  532,  543,  533, 1830, 1829,  539,  541,  544,
      547,  538,  542,  552,  551, 1828, 1827, 1826,  569,  575,
      588,  594,  607,  561,  613, 1825,  620,  631,  637,  615,
      570,  473,  639,  637, 1824,  549,  640,  638,  642,  643,
      644, 1808, 1817,  645,  648,  649, 1821,  654,  650,  663,
      652,  660,  668,  583,  646,  662,  669,  670, 1820, 1819,
      678,  689, 1818,  696,  707,  713,  719,  725,  731,  744,
      750,  763,  758,  671,  763,  726,  745,  765,  768,  769,
      770,  772,  776, 1804, 1798,  778,  780,  782,  783,  784,
      785,  789,  786,  672,  791,  792, 1815,  794,  793, 1814,

     1813, 1812,  818,  824,  830,  843,  849,  862,  866,  872,
     1811,  879,  890,  896,  795,  874,   99,  800,  891,  684,
      897, 1810,  807, 1809, 1808, 1806, 1784,  796,  898,  899,
      908,  906,  825,  905,  907,  910,  911, 1805,  913,  714,
     1804, 1803, 1802,  923,  929, 1801,  937,  948,  954,  958,
      964,  977,  983,  996,  912,  991, 1004,  978,  914, 1005,
     1006, 1800, 1790, 1793, 1000, 1001, 1003, 1008, 1007,  844,
     1009, 1010, 1011, 1797, 1796, 1017, 1795, 1794, 1793, 1029,
     1036, 1049, 1055, 1068, 1074, 1792, 1081, 1092, 1098, 1044,
     1791, 1093, 1023, 1790, 1098, 1099, 1775, 1770, 1787, 1786,

     1785, 1100, 1784, 1102, 1101, 1783, 1782, 1103, 1781, 1780,
     1118, 1779, 1130, 1123, 1143, 1149, 1162, 1168, 1181, 1778,
     1176, 1113, 1182, 1184, 1885, 1885, 1138, 1163, 1185, 1186,
     1777, 1776, 1775, 1206, 1195, 1219, 1232, 1238, 1774, 1245,
     1256, 1262, 1196, 1257, 1263, 1773, 1265, 1772, 1266,  959,
     1771, 1770, 1275, 1769, 1293, 1280, 1286, 1306, 1319, 1325,
     1338, 1031, 1267, 1214, 1281, 1314, 1338, 1768, 1767, 1766,
     1350, 1363, 1369, 1382, 1388, 1765, 1395, 1343, 1408, 1403,
     1345, 1409, 1410, 1764, 1763, 1762, 1761,    0, 1424, 1760,
     1431, 1442, 1448, 1454, 1467, 1473, 1486, 1759, 1411, 1758,

     1063, 1757, 1756, 1755, 1754, 1492, 1505, 1511, 1524, 1530,
     1753, 1537,    0, 1550, 1752, 1412, 1656, 1885, 1643,    0,
     1556, 1622, 1563, 1576, 1582, 1595,    0, 1615, 1609, 1601,
     1596, 1601, 1614, 1620, 1590,    0, 1577, 1571,    0, 1627,
     1885,    0, 1563, 1558, 1885, 1551, 1545,    0, 1532, 1525,
     1519, 1511,    0, 1506, 1500, 1487, 1481,    0, 1468, 1462,
     1449, 1443,    0, 1426, 1415, 1885, 1643, 1648, 1653, 1658,
     1663, 1666, 1671, 1673, 1426, 1403, 1675, 1396, 1677, 1679,
     1390, 1681, 1683, 1371, 1685, 1687, 1333, 1689, 1691, 1301,
     1693, 1695, 1253, 1697, 1699, 1240, 1701, 1703, 1214, 1705,

     1707, 1211, 1709, 1711, 1203, 1713, 1715, 1170, 1717, 1719,
     1120, 1721, 1723, 1117, 1028, 1725, 1727, 1026, 1729, 1731,
      962,  880, 1733, 1735,  826, 1737,  811,  444, 1739, 1741,
     1743,  343, 1745, 1747, 1749,  227, 1751, 1753, 1755,   74,
     1757, 1759, 1761,   72, 1763
    } ;

static yyconst flex_int16_t yy_def[646] =
    {   0,
      566,    1,  567,  567,  568,  568,  566,  566,  566,  566,
      566,  569,  570,  571,  566,  566,   16,  566,  572,  572,
       20,   20,   20,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  566,  566,  566,  566,
      566,  566,  569,  566,  570,  571,  566,  566,  573,  566,
      574,   50,  566,  575,  576,  572,   20,   57,  572,   57,
      572,  572,  572,   57,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  566,
      573,  566,   92,  577,  578,  575,  566,   97,   57,   99,

       99,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  566,
      130,  579,  580,  566,  134,  566,  566,  581,  137,   99,
      140,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  566,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      131,  131,  582,  583,  566,  566,  584,  176,  566,  566,
      180,  566,  182,  140,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  566,  572,  572,

      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  566,  585,  586,  566,  566,
      220,  566,  222,  566,  566,  566,  566,  587,  227,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  566,  566,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  588,  589,
      566,  566,  566,  566,  590,  264,  566,  566,  566,  269,
      566,  271,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  566,  566,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  566,

      591,  592,  566,  566,  566,  305,  566,  307,  566,  566,
      566,  566,  593,  312,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  566,  566,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  594,  595,  566,  566,  566,  566,  596,  347,  566,
      566,  351,  566,  353,  572,  572,  572,  572,  572,  572,
      572,  572,  566,  566,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  566,  597,  598,  566,
      566,  381,  566,  383,  566,  566,  566,  599,  387,  572,
      572,  572,  572,  572,  572,  572,  566,  566,  572,  572,

      572,  572,  572,  572,  572,  572,  572,  572,  600,  601,
      566,  566,  566,  602,  413,  566,  416,  566,  418,  572,
      572,  572,  572,  572,  566,  566,  572,  572,  572,  572,
      566,  603,  604,  566,  434,  566,  436,  566,  566,  566,
      605,  440,  572,  572,  572,  572,  572,  572,  572,  572,
      606,  607,  566,  566,  566,  608,  455,  566,  458,  566,
      460,  572,  572,  572,  572,  572,  572,  566,  609,  610,
      566,  471,  566,  473,  566,  566,  566,  611,  477,  572,
      572,  572,  572,  572,  572,  612,  613,  614,  566,  566,
      566,  615,  491,  566,  494,  566,  496,  572,  572,  572,

      572,  566,  616,  566,  617,  566,  506,  566,  508,  566,
      566,  566,  618,  512,  572,  572,  619,  566,  620,  621,
      566,  566,  566,  523,  566,  525,  622,  572,  566,  623,
      624,  566,  532,  566,  566,  625,  566,  626,  627,  566,
      566,  628,  629,  630,  566,  566,  631,  632,  633,  634,
      566,  635,  636,  637,  638,  566,  639,  640,  641,  642,
      566,  643,  644,  645,  566,    0,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,

      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566
    } ;

static yyconst flex_int16_t yy_nxt[1929] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   18,   19,   20,   21,
       22,   20,   23,   24,   24,   25,   24,   24,   26,   24,
       27,   28,   29,   24,   30,   31,   32,   33,   34,   35,
       24,   36,   24,   40,   41,   42,   41,   48,   62,   63,
       64,   49,   50,   50,   50,   50,   51,   52,   52,   52,
       52,   52,   52,   60,   53,  566,   65,  566,   76,  566,
       87,   66,   77,  566,   61,  509,  566,  560,   89,   67,
       54,   57,   57,   57,   57,   51,   57,   57,   58,   57,
       57,   57,   73,   59,   57,   57,   57,   57,   51,   57,

       57,   57,   57,   57,   57,  566,   59,  566,  566,  566,
      566,   40,   41,  566,   68,  566,   70,   78,   79,  566,
       69,  566,   71,   74,   86,  566,   75,   72,   88,   80,
       81,   82,  105,  566,   83,   42,   41,   40,   41,  357,
      104,  113,   84,   93,   93,   93,   93,   97,   97,   97,
       97,   85,   92,   92,   92,   92,   51,   93,   93,   93,
       93,   93,   93,  566,   53,   99,   99,   99,   99,  566,
       99,   99,   99,   99,   99,   99,  566,  102,  566,  566,
      108,  566,  107,  109,  566,  103,  566,  110,  112,  566,
      566,  111,  566,  566,  566,  116,  566,  120,  566,  122,

      123,  566,  566,  118,  115,  119,  114,  566,  117,  566,
      121,  566,  566,  566,  124,  566,  146,  566,  126,  131,
      131,  131,  131,  125,  127,  134,  134,  134,  134,  128,
      555,  148,  129,  130,  130,  130,  130,   51,  131,  131,
      131,  131,  131,  131,  566,   53,  136,  149,  137,  137,
      137,  137,  138,  139,  139,  139,  139,  139,  139,  566,
      566,  139,  139,  139,  139,  140,  140,  140,  140,  566,
      140,  140,  140,  140,  140,  140,  566,  145,  566,  143,
      566,  144,  152,  150,  566,  151,  153,  154,  147,  566,
      155,  566,  566,  566,  566,  566,  566,  566,  566,  158,

      156,  566,  161,  160,  157,  159,  566,  163,  566,  566,
      566,  165,  566,  162,  566,  166,  566,  167,  169,  168,
      566,  172,  172,  172,  172,  566,  164,  178,  178,  178,
      178,  170,  171,  171,  171,  171,   51,  172,  172,  172,
      172,  172,  172,  566,   53,  175,  550,  176,  176,  176,
      176,  177,  178,  178,  178,  178,  178,  178,  179,  179,
      179,  179,  136,  194,  180,  180,  180,  180,  138,  181,
      181,  181,  181,  181,  181,  182,  182,  182,  182,  566,
      566,  181,  181,  181,  181,  184,  184,  184,  184,  566,
      184,  184,  184,  184,  184,  184,  566,  566,  566,  187,

      566,  186,  566,  188,  566,  191,  566,  190,  566,  192,
      566,  566,  199,  566,  566,  566,  189,  205,  203,  204,
      193,  566,  195,  196,  197,  201,  202,  200,  566,  566,
      566,  566,  212,  207,  208,  215,  210,  566,  213,  566,
      566,  211,  566,  566,  214,  566,  206,  545,  234,  209,
      171,  171,  171,  171,  566,  219,  219,  219,  219,  175,
      240,  220,  220,  220,  220,  177,  221,  221,  221,  221,
      221,  221,  222,  222,  222,  222,  566,  566,  221,  221,
      221,  221,  224,  237,  179,  179,  179,  179,  136,  566,
      225,  225,  225,  225,  138,  226,  226,  226,  226,  226,

      226,  566,  275,  226,  226,  226,  226,  136,  566,  227,
      227,  227,  227,  228,  229,  229,  229,  229,  229,  229,
      566,  566,  229,  229,  229,  229,  231,  232,  230,  566,
      236,  566,  242,  566,  566,  566,  241,  566,  566,  566,
      238,  233,  566,  235,  239,  566,  566,  243,  566,  566,
      245,  246,  249,  244,  566,  566,  247,  566,  566,  566,
      566,  257,  252,  566,  254,  566,  248,  566,  566,  250,
      251,  258,  253,  267,  267,  267,  267,  256,  278,  261,
      255,  219,  219,  219,  219,  175,  566,  262,  262,  262,
      262,  177,  263,  263,  263,  263,  263,  263,  566,  566,

      263,  263,  263,  263,  175,  274,  264,  264,  264,  264,
      265,  266,  266,  266,  266,  266,  266,  566,  295,  266,
      266,  266,  266,  136,  273,  268,  268,  268,  268,  138,
      136,  566,  269,  269,  269,  269,  228,  270,  270,  270,
      270,  270,  270,  271,  271,  271,  271,  566,  276,  270,
      270,  270,  270,  566,  566,  566,  566,  279,  566,  566,
      566,  566,  566,  282,  566,  566,  566,  280,  566,  290,
      566,  277,  291,  283,  286,  289,  566,  296,  566,  566,
      281,  292,  287,  288,  566,  566,  566,  566,  566,  294,
      303,  303,  303,  303,  293,  299,  316,  298,  297,  175,

      566,  304,  304,  304,  304,  177,  175,  337,  305,  305,
      305,  305,  265,  306,  306,  306,  306,  306,  306,  307,
      307,  307,  307,  566,  360,  306,  306,  306,  306,  309,
      566,  267,  267,  267,  267,  136,  376,  268,  268,  268,
      268,  136,  566,  310,  310,  310,  310,  228,  311,  311,
      311,  311,  311,  311,  566,  318,  311,  311,  311,  311,
      136,  566,  312,  312,  312,  312,  313,  314,  314,  314,
      314,  314,  314,  566,  566,  314,  314,  314,  314,  566,
      317,  566,  320,  319,  566,  566,  566,  321,  566,  315,
      322,  323,  566,  324,  566,  328,  566,  325,  566,  566,

      566,  566,  566,  331,  334,  566,  335,  566,  566,  566,
      566,  566,  566,  332,  544,  333,  566,  358,  329,  340,
      330,  365,  339,  566,  336,  355,  338,  341,  344,  542,
      303,  303,  303,  303,  175,  362,  304,  304,  304,  304,
      175,  566,  345,  345,  345,  345,  265,  346,  346,  346,
      346,  346,  346,  566,  370,  346,  346,  346,  346,  175,
      566,  347,  347,  347,  347,  348,  349,  349,  349,  349,
      349,  349,  566,  404,  349,  349,  349,  349,  350,  350,
      350,  350,  136,  536,  268,  268,  268,  268,  228,  136,
      566,  351,  351,  351,  351,  313,  352,  352,  352,  352,

      352,  352,  353,  353,  353,  353,  566,  566,  352,  352,
      352,  352,  359,  566,  566,  566,  356,  368,  361,  366,
      367,  566,  566,  566,  566,  369,  566,  566,  566,  566,
      566,  373,  372,  371,  375,  380,  380,  380,  380,  175,
      390,  304,  304,  304,  304,  265,  374,  175,  394,  381,
      381,  381,  381,  348,  382,  382,  382,  382,  382,  382,
      383,  383,  383,  383,  566,  531,  382,  382,  382,  382,
      350,  350,  350,  350,  136,  566,  385,  385,  385,  385,
      313,  386,  386,  386,  386,  386,  386,  566,  467,  386,
      386,  386,  386,  136,  566,  387,  387,  387,  387,  388,

      389,  389,  389,  389,  389,  389,  566,  566,  389,  389,
      389,  389,  391,  392,  395,  396,  566,  566,  393,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  403,  527,
      399,  509,  422,  566,  405,  400,  402,  401,  408,  566,
      406,  380,  380,  380,  380,  407,  175,  566,  411,  411,
      411,  411,  348,  412,  412,  412,  412,  412,  412,  566,
      566,  412,  412,  412,  412,  175,  480,  413,  413,  413,
      413,  414,  415,  415,  415,  415,  415,  415,  566,  566,
      415,  415,  415,  415,  136,  420,  268,  268,  268,  268,
      313,  136,  516,  416,  416,  416,  416,  388,  417,  417,

      417,  417,  417,  417,  418,  418,  418,  418,  566,  566,
      417,  417,  417,  417,  566,  566,  566,  566,  566,  566,
      505,  421,  429,  497,  424,  427,  423,  428,  175,  566,
      304,  304,  304,  304,  348,  436,  436,  436,  436,  430,
      175,  444,  434,  434,  434,  434,  414,  435,  435,  435,
      435,  435,  435,  566,  566,  435,  435,  435,  435,  136,
      447,  438,  438,  438,  438,  388,  439,  439,  439,  439,
      439,  439,  566,  474,  439,  439,  439,  439,  136,  566,
      440,  440,  440,  440,  441,  442,  442,  442,  442,  442,
      442,  566,  566,  442,  442,  442,  442,  443,  566,  448,

      566,  566,  566,  445,  446,  566,  461,  454,  454,  454,
      454,  450,  566,  462,  437,  449,  175,  419,  453,  453,
      453,  453,  414,  454,  454,  454,  454,  454,  454,  175,
      566,  455,  455,  455,  455,  456,  457,  457,  457,  457,
      457,  457,  566,  384,  457,  457,  457,  457,  136,  482,
      268,  268,  268,  268,  388,  136,  354,  458,  458,  458,
      458,  441,  459,  459,  459,  459,  459,  459,  460,  460,
      460,  460,  566,  566,  459,  459,  459,  459,  463,  566,
      464,  566,  566,  566,  481,  175,  465,  304,  304,  304,
      304,  414,  473,  473,  473,  473,  566,  566,  472,  472,

      472,  472,  466,  175,  308,  471,  471,  471,  471,  456,
      472,  472,  472,  472,  472,  472,  136,  483,  475,  475,
      475,  475,  441,  476,  476,  476,  476,  476,  476,  566,
      566,  476,  476,  476,  476,  136,  272,  477,  477,  477,
      477,  478,  479,  479,  479,  479,  479,  479,  566,  484,
      479,  479,  479,  479,  566,  496,  496,  496,  496,  485,
      175,  566,  489,  489,  489,  489,  456,  490,  490,  490,
      490,  490,  490,  566,  223,  490,  490,  490,  490,  175,
      499,  491,  491,  491,  491,  492,  493,  493,  493,  493,
      493,  493,  566,  183,  493,  493,  493,  493,  136,  135,

      268,  268,  268,  268,  441,  136,   98,  494,  494,  494,
      494,  478,  495,  495,  495,  495,  495,  495,  566,  566,
      495,  495,  495,  495,  498,  566,  566,  566,  566,   96,
      500,  563,  515,  528,  175,  501,  304,  304,  304,  304,
      456,  175,  563,  506,  506,  506,  506,  492,  507,  507,
      507,  507,  507,  507,  508,  508,  508,  508,  566,  563,
      507,  507,  507,  507,  136,  558,  510,  510,  510,  510,
      478,  511,  511,  511,  511,  511,  511,  566,  563,  511,
      511,  511,  511,  136,  558,  512,  512,  512,  512,  513,
      514,  514,  514,  514,  514,  514,  566,  558,  514,  514,

      514,  514,  175,  553,  521,  521,  521,  521,  492,  522,
      522,  522,  522,  522,  522,  566,  558,  522,  522,  522,
      522,  175,  553,  523,  523,  523,  523,  553,  524,  524,
      524,  524,  524,  524,  566,  548,  524,  524,  524,  524,
      136,  553,  268,  268,  268,  268,  478,  136,  548,  525,
      525,  525,  525,  513,  526,  526,  526,  526,  526,  526,
      566,  548,  526,  526,  526,  526,  175,  539,  304,  304,
      304,  304,  492,  175,  548,  532,  532,  532,  532,  539,
      533,  533,  533,  533,  533,  533,  566,  539,  533,  533,
      533,  533,  136,  520,  534,  534,  534,  534,  513,  535,

      535,  535,  535,  535,  535,  566,  513,  535,  535,  535,
      535,  175,  539,  540,  540,  540,  540,  520,  541,  541,
      541,  541,  541,  541,  566,  504,  541,  541,  541,  541,
      136,  566,  268,  268,  268,  268,  513,  175,  492,  304,
      304,  304,  304,   37,   37,   37,   37,   37,   39,   39,
       39,   39,   39,   43,   43,   43,   43,   43,   45,  520,
       45,   45,   45,   46,   46,   46,   46,   46,   56,   56,
       56,   91,  504,   91,   91,   91,   94,   94,  132,  132,
      173,  173,  174,  174,  216,  216,  217,  217,  259,  259,
      260,  260,  300,  300,  301,  301,  342,  342,  343,  343,

      377,  377,  378,  378,  409,  409,  410,  410,  431,  431,
      432,  432,  451,  451,  452,  452,  468,  468,  469,  469,
      486,  486,  487,  487,  502,  502,  503,  503,  517,  517,
      519,  519,  529,  529,  530,  530,  537,  537,  538,  538,
      543,  543,  546,  546,  547,  547,  549,  549,  551,  551,
      552,  552,  554,  554,  556,  556,  557,  557,  559,  559,
      561,  561,  562,  562,  564,  564,  565,  565,  566,  478,
      520,  518,  504,  470,  566,  566,  456,  504,  470,  566,
      566,  441,  488,  470,  433,  414,  470,  433,  566,  566,
      388,   95,  433,  379,  566,  348,  433,  379,  566,  566,

      566,  566,  566,  566,  426,  425,  566,  566,  313,   95,
      379,  302,  566,  566,  398,  397,  566,  265,  379,  302,
      566,  566,  364,  363,  566,  566,  566,  228,   95,  302,
      218,  566,  327,  326,  177,  302,  218,  566,  285,  284,
      566,  138,   95,  218,  133,  566,  566,  566,  566,  218,
      133,  566,  566,  566,  198,  566,  185,   95,  133,  566,
      142,  141,  133,  566,  566,  566,  106,  101,  566,  100,
      566,   95,   46,   47,   44,   90,  566,   55,  566,   47,
       44,  566,   38,   38,    7,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,

      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566
    } ;

static yyconst flex_int16_t yy_chk[1929] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   10,   10,   11,   11,   15,   22,   22,
       23,   15,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   21,   16,   25,   23,   30,   30,   34,
       34,   25,   30,   36,   21,  644,   28,  640,   36,   25,
       16,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   28,   19,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   26,   20,   27,   29,   31,
       33,   40,   40,   35,   26,  317,   27,   31,   31,   63,
       26,   62,   27,   29,   33,   72,   29,   27,   35,   31,
       32,   32,   63,   32,   32,   41,   41,   42,   42,  317,
       62,   72,   32,   52,   52,   52,   52,   55,   55,   55,
       55,   32,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   67,   50,   57,   57,   57,   57,   70,
       57,   57,   57,   57,   57,   57,   61,   61,   65,   66,
       66,   68,   65,   67,   69,   61,   73,   68,   70,   74,
       75,   69,   76,   77,   79,   75,   78,   78,   80,   80,

       83,   84,   85,   77,   74,   77,   73,   83,   76,   86,
       79,   88,   87,   89,   84,  105,  105,  107,   86,   93,
       93,   93,   93,   85,   87,   95,   95,   95,   95,   88,
      636,  107,   89,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,  108,   92,   97,  108,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   98,
      102,   98,   98,   98,   98,   99,   99,   99,   99,  106,
       99,   99,   99,   99,   99,   99,  103,  104,  109,  102,
      110,  103,  111,  109,  104,  110,  112,  112,  106,  111,
      113,  114,  115,  116,  112,  120,  117,  113,  118,  116,

      114,  119,  119,  118,  115,  117,  122,  121,  123,  127,
      124,  123,  125,  120,  121,  124,  126,  125,  127,  126,
      128,  131,  131,  131,  131,  135,  122,  135,  135,  135,
      135,  128,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  151,  130,  134,  632,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  136,  136,
      136,  136,  137,  151,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  138,  138,  138,  138,  139,
      143,  139,  139,  139,  139,  140,  140,  140,  140,  144,
      140,  140,  140,  140,  140,  140,  142,  145,  146,  143,

      147,  142,  150,  144,  149,  147,  155,  146,  154,  149,
      152,  156,  154,  158,  160,  159,  145,  160,  158,  159,
      150,  161,  152,  152,  152,  155,  156,  154,  162,  165,
      163,  164,  166,  162,  163,  170,  164,  168,  168,  166,
      169,  165,  170,  189,  169,  196,  161,  628,  189,  163,
      171,  171,  171,  171,  171,  175,  175,  175,  175,  176,
      196,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  177,  177,  177,  177,  178,  193,  178,  178,
      178,  178,  179,  193,  179,  179,  179,  179,  180,  232,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,

      180,  181,  232,  181,  181,  181,  181,  182,  185,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      183,  188,  183,  183,  183,  183,  186,  187,  185,  190,
      192,  194,  198,  186,  187,  197,  197,  192,  199,  195,
      194,  188,  202,  190,  195,  200,  201,  198,  203,  205,
      200,  201,  204,  199,  212,  208,  202,  209,  213,  204,
      210,  214,  209,  211,  211,  236,  203,  215,  214,  205,
      208,  215,  210,  224,  224,  224,  224,  213,  236,  219,
      212,  219,  219,  219,  219,  220,  231,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  221,  254,

      221,  221,  221,  221,  222,  231,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  223,  254,  223,
      223,  223,  223,  225,  230,  225,  225,  225,  225,  225,
      227,  230,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  228,  228,  228,  228,  229,  233,  229,
      229,  229,  229,  234,  238,  233,  237,  237,  239,  240,
      241,  244,  255,  240,  245,  246,  249,  238,  251,  249,
      248,  234,  250,  241,  244,  248,  252,  255,  256,  250,
      239,  251,  245,  246,  253,  257,  258,  274,  294,  253,
      261,  261,  261,  261,  252,  258,  274,  257,  256,  262,

      320,  262,  262,  262,  262,  262,  264,  294,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  265,
      265,  265,  265,  266,  320,  266,  266,  266,  266,  267,
      340,  267,  267,  267,  267,  268,  340,  268,  268,  268,
      268,  269,  276,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  270,  276,  270,  270,  270,  270,
      271,  277,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  272,  273,  272,  272,  272,  272,  275,
      275,  278,  278,  277,  279,  280,  281,  279,  282,  273,
      280,  281,  283,  282,  286,  286,  287,  283,  288,  289,

      290,  291,  293,  289,  291,  292,  292,  295,  296,  299,
      298,  315,  328,  289,  627,  290,  318,  318,  287,  298,
      288,  328,  296,  323,  293,  315,  295,  299,  303,  625,
      303,  303,  303,  303,  304,  323,  304,  304,  304,  304,
      305,  333,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  306,  333,  306,  306,  306,  306,  307,
      370,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  308,  370,  308,  308,  308,  308,  309,  309,
      309,  309,  310,  622,  310,  310,  310,  310,  310,  312,
      316,  312,  312,  312,  312,  312,  312,  312,  312,  312,

      312,  312,  313,  313,  313,  313,  314,  319,  314,  314,
      314,  314,  319,  321,  329,  330,  316,  331,  321,  329,
      330,  334,  332,  335,  331,  332,  336,  337,  355,  339,
      359,  336,  335,  334,  339,  344,  344,  344,  344,  345,
      355,  345,  345,  345,  345,  345,  337,  347,  359,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      348,  348,  348,  348,  349,  621,  349,  349,  349,  349,
      350,  350,  350,  350,  351,  450,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  352,  450,  352,
      352,  352,  352,  353,  358,  353,  353,  353,  353,  353,

      353,  353,  353,  353,  353,  353,  354,  356,  354,  354,
      354,  354,  356,  357,  360,  361,  365,  366,  358,  367,
      357,  360,  361,  369,  368,  371,  372,  373,  369,  618,
      365,  615,  393,  376,  371,  366,  368,  367,  376,  393,
      372,  380,  380,  380,  380,  373,  381,  462,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  382,
      390,  382,  382,  382,  382,  383,  462,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  384,  501,
      384,  384,  384,  384,  385,  390,  385,  385,  385,  385,
      385,  387,  501,  387,  387,  387,  387,  387,  387,  387,

      387,  387,  387,  387,  388,  388,  388,  388,  389,  392,
      389,  389,  389,  389,  395,  396,  402,  405,  404,  408,
      614,  392,  405,  611,  396,  402,  395,  404,  411,  422,
      411,  411,  411,  411,  411,  414,  414,  414,  414,  408,
      413,  422,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  415,  427,  415,  415,  415,  415,  416,
      427,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  417,  608,  417,  417,  417,  417,  418,  428,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  419,  421,  419,  419,  419,  419,  421,  423,  428,

      424,  429,  430,  423,  424,  435,  605,  435,  435,  435,
      435,  430,  443,  443,  602,  429,  434,  599,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  436,
      464,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  437,  596,  437,  437,  437,  437,  438,  464,
      438,  438,  438,  438,  438,  440,  593,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  441,  441,
      441,  441,  442,  444,  442,  442,  442,  442,  444,  445,
      445,  447,  449,  463,  463,  453,  447,  453,  453,  453,
      453,  453,  456,  456,  456,  456,  457,  465,  457,  457,

      457,  457,  449,  455,  590,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  458,  465,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  459,
      466,  459,  459,  459,  459,  460,  587,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  461,  466,
      461,  461,  461,  461,  467,  478,  478,  478,  478,  467,
      471,  481,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  472,  584,  472,  472,  472,  472,  473,
      481,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  474,  581,  474,  474,  474,  474,  475,  578,

      475,  475,  475,  475,  475,  477,  576,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  479,  480,
      479,  479,  479,  479,  480,  482,  483,  499,  516,  575,
      482,  565,  499,  516,  489,  483,  489,  489,  489,  489,
      489,  491,  564,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  492,  492,  492,  492,  493,  562,
      493,  493,  493,  493,  494,  561,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  495,  560,  495,
      495,  495,  495,  496,  559,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  497,  557,  497,  497,

      497,  497,  506,  556,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  507,  555,  507,  507,  507,
      507,  508,  554,  508,  508,  508,  508,  552,  508,  508,
      508,  508,  508,  508,  509,  551,  509,  509,  509,  509,
      510,  550,  510,  510,  510,  510,  510,  512,  549,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      514,  547,  514,  514,  514,  514,  521,  546,  521,  521,
      521,  521,  521,  523,  544,  523,  523,  523,  523,  543,
      523,  523,  523,  523,  523,  523,  524,  538,  524,  524,
      524,  524,  525,  537,  525,  525,  525,  525,  525,  525,

      525,  525,  525,  525,  525,  526,  535,  526,  526,  526,
      526,  532,  531,  532,  532,  532,  532,  530,  532,  532,
      532,  532,  532,  532,  533,  529,  533,  533,  533,  533,
      534,  528,  534,  534,  534,  534,  534,  540,  522,  540,
      540,  540,  540,  567,  567,  567,  567,  567,  568,  568,
      568,  568,  568,  569,  569,  569,  569,  569,  570,  519,
      570,  570,  570,  571,  571,  571,  571,  571,  572,  572,
      572,  573,  517,  573,  573,  573,  574,  574,  577,  577,
      579,  579,  580,  580,  582,  582,  583,  583,  585,  585,
      586,  586,  588,  588,  589,  589,  591,  591,  592,  592,

      594,  594,  595,  595,  597,  597,  598,  598,  600,  600,
      601,  601,  603,  603,  604,  604,  606,  606,  607,  607,
      609,  609,  610,  610,  612,  612,  613,  613,  616,  616,
      617,  617,  619,  619,  620,  620,  623,  623,  624,  624,
      626,  626,  629,  629,  630,  630,  631,  631,  633,  633,
      634,  634,  635,  635,  637,  637,  638,  638,  639,  639,
      641,  641,  642,  642,  643,  643,  645,  645,  515,  511,
      505,  504,  503,  502,  500,  498,  490,  487,  486,  485,
      484,  476,  470,  469,  468,  454,  452,  451,  448,  446,
      439,  433,  432,  431,  420,  412,  410,  409,  407,  406,

      403,  401,  400,  399,  398,  397,  394,  391,  386,  379,
      378,  377,  375,  374,  364,  363,  362,  346,  343,  342,
      341,  338,  327,  326,  325,  324,  322,  311,  302,  301,
      300,  297,  285,  284,  263,  260,  259,  247,  243,  242,
      235,  226,  218,  217,  216,  207,  206,  191,  184,  174,
      173,  172,  167,  157,  153,  148,  141,  133,  132,  129,
      101,  100,   94,   82,   81,   71,   64,   60,   59,   58,
       56,   51,   47,   46,   43,   38,   24,   18,   17,   14,
       12,    7,    4,    3,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,

      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[64] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
    0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 1081 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 1186 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 567 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1885 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 55 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 59 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 61 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 62 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 64 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 69 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno; 
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 108 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 109 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 50:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 125 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 134 "SrvLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 143 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 152 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 161 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 170 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 182 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 189 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 210 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd then no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 242 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd; 
      YYABORT; 
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 252 "SrvLexer.l"
{ 
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) { 
        Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd; 
        YYABORT; 
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 261 "SrvLexer.l"
{ return yytext[0]; } 
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 264 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 1729 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 567 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 567 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 566);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

yyFlexLexer::~yyFlexLexer()
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

	delete [] (yy_state_buf);
	yyfree((yy_start_stack)  );

}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 264 "SrvLexer.l"




