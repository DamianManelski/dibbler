#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 104
#define YY_END_OF_BUFFER 105
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[858] =
    {   0,
        1,    1,    0,    0,    0,    0,  105,  103,    2,    1,
        1,  103,   86,  103,  103,  102,  102,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
       90,   90,  104,    1,    1,    1,    0,   98,   86,    0,
       98,   88,   87,  102,    0,    0,  101,    0,   95,   71,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   83,   99,   99,
       73,   99,   99,   99,   99,   99,   99,   99,   99,   99,

       16,   17,   99,   99,   99,   99,   99,   99,   99,   99,
       89,   87,  102,    0,    0,   94,  100,   93,   93,   99,
       99,   99,   99,   72,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   82,  102,    0,
        0,    0,   92,   92,    0,   93,    0,   93,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   79,   99,   99,
       99,   99,   29,   99,   99,   99,   40,   99,   99,   99,

       99,   99,   99,   99,    0,   99,   99,   99,   99,   99,
       99,   22,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   84,   99,   99,   99,   99,  102,    0,
        0,    0,    0,   92,    0,   92,    0,   93,   93,   93,
       93,   99,   99,   99,   99,   78,   99,   99,    4,   99,
       99,   99,   99,   99,   99,   99,   47,   85,   99,    3,
       99,   99,   99,   99,   99,   99,   99,    0,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,    7,   99,
       23,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,    0,    0,    0,    0,   92,   92,   92,   92,    0,

       93,   93,   93,    0,   93,   99,   99,   99,   99,   99,
       99,   99,   99,   28,   99,   99,   99,   35,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,    0,
        0,   99,   99,   99,   33,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,    0,    0,    0,   92,   92,   92,    0,   92,
        0,    0,   93,   93,   93,   93,   99,   99,   31,   99,
       99,   99,   99,   99,    0,   99,   99,   81,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,    0,    0,   99,   99,   99,   99,   99,   51,   99,

       99,   99,   99,   99,   99,   99,   99,   99,   99,   20,
       99,   99,   99,    0,    0,    0,    0,    0,   92,   92,
       92,   92,    0,   93,   93,   93,    0,   93,   99,   99,
       99,   99,   99,   99,   99,   99,   99,    0,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   46,   99,   12,   10,   70,    0,    0,   99,   99,
       99,   49,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,    5,   99,   99,   99,   13,    0,    0,    0,
       92,   92,   92,    0,   92,   97,   93,   93,   93,   93,
       99,   99,   99,   99,   99,   99,   99,   99,   99,    0,

       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   11,    0,    0,   99,   99,   99,   50,
       99,   99,   99,   99,   30,   99,   99,    6,   80,   37,
       99,   99,    0,    0,    0,   96,   92,   92,   92,   92,
       93,   93,   93,    0,   93,   99,   99,   99,   99,   99,
       99,   99,   48,   99,    0,   99,   99,   99,   99,   99,
       99,   34,   99,   99,   32,   99,   99,   99,    0,    0,
       43,   42,   36,   99,   21,   99,   99,   39,   38,   99,
       99,    0,    0,   92,   92,   92,    0,   92,   93,   93,
       93,   93,   99,   14,   99,   53,   99,   99,   58,   99,

        0,   99,   99,   99,   99,   61,   99,   99,   99,   99,
       99,   99,   45,   44,   99,   99,   99,   99,   52,    0,
        0,    0,   92,   92,   92,   92,   93,   93,   93,    0,
       93,   99,   99,   60,   99,   99,    0,   69,   99,   99,
       99,   62,   99,   54,   99,   99,    8,   99,   24,   99,
       99,    0,    0,   92,   92,   92,    0,   92,   93,   93,
       93,   93,   99,   99,   59,   99,    0,   99,   99,   99,
       99,   99,   99,   56,   99,   99,   99,   99,    0,    0,
        0,   92,   92,   92,   92,   93,   93,   93,    0,   93,
       99,   99,   99,    0,   99,   99,   99,   99,   55,   99,

       99,   99,   15,   19,    0,   91,   94,   92,   92,   92,
        0,   92,   93,   93,   93,   93,   99,   99,   26,    0,
        0,   99,   99,   99,   63,   99,   25,   99,   99,    0,
       91,    0,   92,   92,   92,   92,   92,   93,   93,   93,
        0,   93,   99,   99,    0,    0,   27,   99,   99,   64,
       99,   99,   99,   99,   99,   91,   94,   92,    0,   92,
       92,   92,   92,   93,   93,   93,   57,   99,    0,    0,
       99,   99,   99,   99,   99,   99,   99,   18,   91,   92,
       92,   92,   92,   93,   93,   93,   99,    0,    0,   99,
       99,   65,   66,   67,   68,    9,   92,   92,    0,   92,

       92,   93,   41,    0,    0,   99,   99,   92,   92,   93,
        0,    0,    0,   99,   99,   99,   92,   92,    0,    0,
        0,    0,   74,   99,   99,   99,   74,   92,   92,    0,
       76,    0,   99,   76,   99,   92,   92,    0,    0,   75,
       99,   75,   92,   92,   77,   77,   92,   92,    0,   92,
       92,   92,   92,    0,   92,   92,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
       23,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        1,    1,    1,    1,    1,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    1,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[927] =
    {   0,
        0,    0,  805,  804,    0,    0,  811, 5322, 5322,   73,
       75,  805,    0,  802,   72,   72,   34,  750,  748,  136,
      186,  233,  280,   71,  208,  338,   38,   73,  197,   89,
      263,  175,  235,  350,  340,  391,   67,  357,  180,  256,
     5322,  758, 5322,  111,  137,  222,  764, 5322,    0,  761,
      760, 5322,    0,  449,  743,  468, 5322,    0,  494, 5322,
       61,  537,   86,   89,  183,  193,  343,  221,  226,  390,
      272,  229,  373,  269,  380,  270,  386,  382,  258,  489,
      384,  409,  536,  402,  461,  524,  527,  276,  534,  533,
      279,  526,  569,  556,  570,  583,  584,  573,  587,  597,

      375,  454,  605,  585,  576,  592,  616,  615,  617,  621,
     5322,    0,  679,  698,  713,  724,    0,  769,  743,  812,
      602,  623,  804,  632,  803,  652,  801,  807,  677,  802,
      826,  805,  834,  844,  854,  855,  815,  845,  729,  848,
      867,  868,  873,  878,  885,  882,  921,  892,  889,  914,
      900,  912,  910,  929,  927,  925,  937,  950,  942,  930,
      961,  948,  962,  970,  971,  966,  983,  711, 1041,  787,
      706,  705, 1088, 1031, 1060, 1133, 1176, 1107, 1219,  779,
     1154, 1179, 1020, 1213, 1208, 1093, 1218,  853, 1211, 1212,
     1231, 1233,  964, 1217, 1242, 1262,  965, 1251, 1266, 1137,

     1255, 1254, 1291, 1273,  716, 1287, 1269, 1300, 1298, 1306,
     1303, 1027, 1318, 1321, 1319, 1331, 1334, 1338, 1342, 1352,
     1350, 1346, 1075, 1129, 1373, 1356, 1377, 1341, 1196,  703,
      702,  701, 1414, 1437, 1480, 1456, 1499, 1525, 1544, 1570,
     1589,  700, 1355, 1374, 1569, 1215, 1582, 1458, 1512, 1571,
     1587, 1584, 1602, 1592, 1589, 1603, 1370, 1416, 1624, 1638,
     1606, 1622, 1631, 1637, 1636, 1643, 1639, 1642, 1641, 1642,
     1660, 1653, 1674, 1678, 1681, 1676, 1689, 1659, 1441, 1693,
     1459, 1688, 1706, 1692, 1694, 1725, 1721, 1698, 1729, 1713,
     1728,  666,  660,  659, 1789, 1800, 1819, 1845, 1864, 1553,

     1890,  658, 1902, 1945, 1921, 1779, 1844, 1907, 1939, 1936,
     1948, 1937, 1942, 2018, 1945, 1787, 1943, 1712, 1988, 1967,
     1995, 1999, 1989, 2012, 2002, 2000, 2022, 2011, 2019, 1729,
     1758, 2032, 1947, 2039, 1832, 2042, 2023, 2043, 2046, 2059,
     2044, 2081, 2061, 2054, 2073, 2064, 2076, 2088, 2092, 2084,
     2089, 2098,  657,  652, 2156, 2167,  651, 2179, 2222, 2198,
     2241, 2267, 2278, 2297, 2323, 2342, 2344, 2096, 2071, 2320,
     2109, 2201, 2322, 2341, 2094, 2357, 2325, 2158, 2373, 2327,
     2257, 2359, 2362, 2391, 2379, 2390, 2393, 2396, 2411, 2418,
     2415, 2191, 2223, 2401, 2408, 2412, 2425, 2430, 2265, 2431,

     2442, 2461, 2432, 2453, 2447, 2454, 2467, 2465, 2471, 2276,
     2482, 2477, 2484,  650,  649,  648, 2542, 2553, 2564, 2583,
     2609, 2628, 2592, 2654,  647, 2666, 2709, 2685, 2687, 2695,
     2703, 2608, 2506, 2723, 2711, 2699, 2702, 2394, 2709, 2732,
     2743, 2742, 2745, 2750, 2752, 2747, 2751, 2757, 2756, 2788,
     2764, 2466, 2784, 2476, 2495, 2551, 2616, 2754, 2791, 2796,
     2802, 2761, 2807, 2797, 2811, 2800, 2798, 2816, 2821, 2829,
     2832, 2841, 2808, 2852, 2846, 2843, 2840,  646,  644, 2910,
     2921,  610, 2933, 2976, 2952, 2961, 3021, 2995, 3066, 3040,
     2974, 3054, 3062, 2963, 3064, 2845, 3059, 3082, 3057, 2855,

     3087, 3060, 3065, 3114, 3102, 3116, 3100, 2849, 2851, 3115,
     3103, 3106, 3104, 2863, 3020, 3117, 3112, 3110, 3137, 3109,
     3148, 3159, 3152, 3157, 3146, 3154, 3153, 3149, 3151, 3155,
     3182, 3184,  603,  601,  563, 3226, 3244, 3263, 3289, 3308,
     3334,  561, 3346, 3389, 3365, 3164, 3375, 3383, 3380, 3367,
     3288, 3385, 3161, 3390, 3184, 3384, 3223, 3403, 3431, 3430,
     3427, 3186, 3424, 3438, 3205, 3428, 3426, 3433, 3249, 3425,
     3423, 3425, 3432, 3467, 3434, 3473, 3478, 3437, 3442, 3466,
     3489,  560,  559, 3536,  552, 3549, 3592, 3568, 3637, 3611,
     3682, 3656, 3677, 3469, 3476, 3472, 3675, 3579, 3474, 3685,

     3481, 3672, 3680, 3679, 3528, 3570, 3681, 3683, 3713, 3724,
     3727, 3729, 5322, 5322, 3731, 3715, 3725, 3732, 3590,  521,
      519,  518, 3792, 3811, 3837, 3856, 3882,  517, 3894, 3937,
     3913, 3721, 3726, 3624, 3915, 3836, 3722, 3722, 3932, 3926,
     3935, 3723, 3940, 3771, 3951, 3954, 3824, 3955, 3779, 3937,
     3968,  516,  515, 4026,  513, 4038, 4081, 4057, 4126, 4100,
     4171, 4145, 3930, 4131, 3991, 4160,  524, 4079, 4159, 4183,
     4174, 4171, 4165, 4042, 4170, 4168, 4175, 4211,  510,  508,
      507, 4271, 4243, 4316, 4255, 4290,  506, 4361, 4404, 4335,
     4356, 4269, 4399, 4408, 4393, 4420, 4329, 4421, 4060, 4423,

     4403, 4408, 4113, 4172,  505,  504,    0, 4481,  503, 4493,
     4536, 4512, 4581, 4555, 4626, 4600, 4615, 4594, 4176, 4216,
     4213, 4629, 4523, 4619, 4250, 4651, 4258, 4643, 4624,  475,
      474,  473,  472, 4711, 4687, 4756, 4730, 4775,  471, 4801,
        0, 4820, 4644, 4653, 4341, 4414, 4404, 4754, 4804, 4405,
     4827, 4515, 4472, 4815, 4816,  470, 5322,  468,    0, 4862,
      433, 4887, 4906, 4932, 4951,    0, 4435, 4819, 4536, 4664,
     4820, 4866, 4698, 4690, 4735, 4647, 4824, 4743,  417,  415,
      414, 4977, 4996, 5022,  364,    0, 4982, 4819,    0, 4978,
     5049, 4823, 4865, 4885, 4919, 4929,  358,  357,    0, 5049,

     5322,    0, 4930,    0, 5046, 5074, 5057,  355,  353, 5322,
     5060, 4984, 4984, 5062, 5068, 5054,  346,  339,    0, 4999,
     5040, 5050, 5322, 5078, 5086, 5051, 5061,  325,  323, 5064,
     5322, 5084, 5082, 5065, 5113,  314,  309,    0, 5105, 5322,
     5115, 5092,  307,  306, 5322, 5096,  303,  276,    0,  267,
      265,  260,  259,    0,  253,  229, 5322, 5185, 5189, 5193,
     5197, 5201, 5205, 5207,  233, 5209, 5211, 5213, 5215, 5217,
     5219, 5221, 5225, 5227, 5229, 5231, 5233, 5235, 5237, 5239,
     5241, 5243, 5245, 5247, 5249, 5251, 5253, 5255, 5257, 5259,
     5261,  231, 5263, 5265,  230, 5267, 5269,  228,  219, 5271,

     5273,  217, 5277, 5281, 5283,  214,  212, 5287, 5291, 5293,
     5295, 5297,  145, 5299, 5301, 5303,  131, 5305, 5307, 5309,
      117, 5311, 5313, 5315,   80, 5317
    } ;

static yyconst flex_int16_t yy_def[927] =
    {   0,
      857,    1,  858,  858,  859,  859,  857,  857,  857,  857,
      857,  860,  861,  862,  857,  857,   16,  857,  857,  857,
       20,   20,   22,   22,   22,   22,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      857,  857,  857,  857,  857,  857,  860,  857,  861,  862,
      857,  857,  863,  857,  864,   54,  857,  865,  857,  857,
       26,   22,   62,   62,   26,   26,   26,   26,   62,   26,
       26,   62,   26,   26,   26,   26,   26,   26,   62,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      857,  863,  857,  113,  866,  857,  865,  857,  118,   62,
      120,  120,   26,   26,   26,  120,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  857,  169,
      867,  868,  857,  173,  857,  857,  857,  176,  120,  179,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,  857,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  170,  170,
      869,  870,  857,  857,  857,  234,  857,  857,  238,  857,
      240,  179,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  857,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  857,  871,  872,  857,  857,  296,  857,  298,  857,

      857,  857,  857,  857,  303,   26,   26,   26,   26,   26,
       26,   26,   26,  873,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,  857,
      857,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  874,  875,  857,  857,  857,  857,  857,  358,
      857,  857,  857,  363,  857,  365,   26,   26,   26,   26,
       26,   26,   26,   26,  857,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  857,  857,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  857,  876,  877,  857,  857,  857,  419,
      857,  421,  857,  857,  857,  857,  857,  426,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  857,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,  857,  857,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  878,  879,  857,
      857,  857,  857,  857,  483,  857,  857,  487,  857,  489,
       26,   26,   26,   26,   26,   26,   26,   26,   26,  857,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  857,  857,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  857,  880,  881,  857,  857,  537,  857,  539,
      857,  857,  857,  857,  543,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  857,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  857,  857,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  882,  883,  857,  857,  857,  857,  586,  857,  589,
      857,  591,   26,   26,   26,   26,   26,   26,   26,   26,

      857,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  857,  857,   26,   26,   26,   26,   26,  857,
      884,  885,  857,  623,  857,  625,  857,  857,  857,  857,
      629,   26,   26,   26,   26,   26,  857,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  886,  887,  857,  857,  857,  857,  656,  857,  659,
      857,  661,   26,   26,   26,   26,  857,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  857,  888,
      889,  857,  682,  857,  684,  857,  857,  857,  857,  688,
       26,   26,   26,  857,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,  890,  891,  892,  857,  857,  857,
      857,  710,  857,  713,  857,  715,   26,   26,   26,  857,
      857,   26,   26,   26,   26,   26,   26,   26,   26,  857,
      893,  857,  894,  857,  734,  857,  736,  857,  857,  857,
      895,  740,   26,   26,  857,  857,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  896,  857,  897,  898,  857,
      857,  857,  762,  857,  764,  899,   26,   26,  857,  857,
       26,   26,   26,   26,   26,   26,   26,   26,  857,  900,
      901,  857,  782,  857,  857,  902,   26,  857,  903,   26,
      904,   26,   26,   26,   26,   26,  857,  905,  906,  857,

      857,  907,   26,  908,  857,  909,   26,  910,  911,  857,
      857,  857,  857,   26,   26,   26,  857,  912,  913,  857,
      857,  857,  857,   26,   26,   26,   26,  914,  915,  857,
      857,  857,   26,   26,   26,  857,  916,  917,  857,  857,
       26,   26,  918,  919,  857,   26,  857,  920,  921,  922,
      923,  857,  924,  925,  926,  857,    0,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,

      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857
    } ;

static yyconst flex_int16_t yy_nxt[5398] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   27,   27,   29,   30,   31,   32,   33,   27,
       34,   35,   36,   37,   38,   39,   27,   40,   27,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   27,   27,
       29,   30,   31,   32,   33,   27,   34,   35,   36,   37,
       38,   39,   27,   40,   27,   44,   45,   46,   45,   52,
      857,   61,  737,   53,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   55,   62,   56,   56,   56,   56,   56,

       56,   82,   57,  106,   61,   61,  857,   61,   61,   83,
       61,  121,   86,   44,   45,  122,   61,   78,   58,  851,
       62,   56,   56,   56,   56,   56,   56,   82,   57,  106,
       61,   61,   61,  844,   61,   83,   61,  121,   86,   46,
       45,  122,   61,   78,   58,   61,   61,  829,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   55,   61,   62,
       62,   63,   64,   62,   62,   61,   65,   61,   61,   61,
       66,   61,   67,   61,   61,   61,   61,   61,   61,   68,
       61,   61,   61,   61,   61,   62,   62,   63,   64,   62,
       62,   61,   65,   61,   61,   61,   66,   61,   67,   61,

       61,   61,   61,   61,   61,   68,   61,   61,   61,   61,
       61,   62,   62,   90,  810,   91,  809,  109,   61,  802,
       61,  786,   61,   61,   44,   45,   61,  123,   84,   61,
      781,   79,  766,  733,   85,  117,   61,   62,   62,   90,
       61,   91,   61,  109,   61,   61,   61,   80,   61,   61,
      854,  126,   61,  123,   84,   61,   69,   79,   62,   62,
       85,   92,   61,  125,   61,  130,   61,   70,   61,   61,
       71,   61,   93,   80,  854,   94,   61,  126,   61,  134,
      854,  849,   69,  110,   62,   62,  854,   92,  849,  125,
       61,  130,  138,   70,   87,   61,   71,  849,   93,   61,

       88,   94,   61,   62,   61,   89,   61,   72,  129,  110,
      132,   73,   61,   61,   61,   61,   74,   75,  138,   61,
       87,   76,   61,   77,  838,   61,   88,  849,  838,   62,
      838,   89,   61,   72,  129,  819,  132,   73,   61,   61,
       61,   61,   74,   75,  838,   61,  819,   76,   61,   77,
       61,   61,   61,   61,   61,   61,   61,   61,   61,  857,
      819,   61,   61,   61,   61,   61,   61,  799,   61,  124,
       97,   98,   61,   95,  819,   61,  799,   96,  799,  759,
      107,   81,   99,  100,  108,  741,   61,   61,   61,   61,
       61,   61,   61,   61,   61,  124,   97,   98,   61,   95,

       61,   61,  131,   96,  101,  102,  107,   81,   99,  100,
      108,  140,   61,  127,  103,  133,   61,  135,   61,   61,
      136,  128,  104,   61,  137,   61,   61,   61,  131,   61,
      144,  105,  141,   61,   61,  799,  759,  140,  732,  127,
      103,  133,   61,  135,   61,   61,  136,  128,  104,   61,
      137,   61,   61,   61,  711,   61,  144,  105,  141,   61,
       61,  113,  113,  113,  113,  113,  113,  113,  113,  113,
       55,   61,  114,  114,  114,  114,  114,  114,   61,   57,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  759,
      145,  732,  689,  759,  757,  732,  681,   61,  114,  114,

      114,  114,  114,  114,   61,   57,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  139,  145,  119,  119,  119,
      119,  119,  119,   61,  657,  732,  681,  630,  707,  681,
       61,  622,   61,  694,  587,  150,  681,  622,  544,  116,
      622,  139,  535,  119,  119,  119,  119,  119,  119,  120,
      120,  120,  120,  120,  120,  120,  120,  120,   61,  142,
      120,  120,  120,  120,  120,  120,  146,   61,  147,   61,
       61,   61,  148,  484,   61,  149,   61,   61,  143,   61,
      622,  535,  427,  152,  116,  142,  120,  120,  120,  120,
      120,  120,  146,   61,  147,   61,   61,   61,  148,   61,

       61,  149,   61,   61,  143,   61,  151,  157,  153,  152,
      159,  158,   61,   61,  161,  154,   61,  155,  156,  163,
      162,  160,  535,  164,  416,   61,   61,   61,   61,  180,
       61,  359,  151,  157,  153,   61,  159,  158,   61,   61,
       61,  154,   61,  155,  156,  163,  162,  160,   61,  164,
      165,  166,   61,   61,   61,  180,   61,  167,   61,   61,
       61,   61,  168,  181,   61,  535,   61,  416,  304,  116,
      416,  294,  235,  416,   61,   61,  165,  166,  294,  177,
      116,  294,  184,  167,   61,   61,   61,  172,  168,  181,
       61,  169,  169,  169,  169,  169,  169,  169,  169,  169,

       55,   61,  170,  170,  170,  170,  170,  170,  184,   57,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  187,
       61,  857,  294,  172,  857,  268,  116,  172,  170,  170,
      170,  170,  170,  170,  172,   57,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  187,   61,  174,  174,  174,
      174,  174,  174,  857,   61,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  116,  197,   50,   51,   48,  111,
       60,   59,   61,  174,  174,  174,  174,  174,  174,  175,
       61,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      177,  197,  178,  178,  178,  178,  178,  178,   61,  230,

      230,  230,  230,  230,  230,  230,  230,  230,   51,   48,
      857,   42,   42,  857,  190,  857,  857,  243,  178,  178,
      178,  178,  178,  178,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  183,  186,  179,  179,  179,  179,  179,
      179,  182,  185,  243,   61,   61,   61,   61,   61,  188,
       61,  857,  857,  189,  857,  195,  857,  191,   61,  183,
      186,  179,  179,  179,  179,  179,  179,  182,  185,   61,
       61,   61,   61,   61,   61,  188,   61,   61,  192,  189,
      193,  195,  194,  191,   61,  857,  196,   61,   61,  198,
      857,   61,  199,  200,  203,   61,   61,   61,   61,  857,

      201,  207,  857,   61,  192,  202,  193,  204,  194,  857,
       61,   61,  196,   61,   61,  198,   61,   61,  199,  200,
      208,   61,   61,   61,   61,   61,  201,  857,   61,  205,
      206,  202,   61,  204,  212,   61,   61,   61,  857,  209,
      213,  214,   61,   61,  857,  857,  208,   61,  210,  857,
      216,   61,  211,   61,   61,   61,  215,   61,   61,  219,
      212,   61,  217,  857,   61,  209,  213,  214,   61,   61,
       61,  221,   61,   61,  210,  223,  216,  218,  211,   61,
       61,   61,  215,   61,  220,   61,  222,  857,  217,  224,
       61,   61,  227,   61,   61,  225,   61,  221,   61,   61,

      857,  223,  226,  218,   61,   61,   61,   61,   61,   61,
      220,   61,  222,   61,   61,  224,  228,   61,  227,   61,
      857,  225,  857,  857,  857,  857,   61,  857,  226,  247,
       61,   61,  857,   61,   61,   61,  857,  857,  857,   61,
       61,  857,  228,  236,  236,  236,  236,  236,  236,  236,
      236,  236,   61,  229,  229,  229,  229,  229,  229,  229,
      229,  229,   55,   61,  230,  230,  230,  230,  230,  230,
       61,   57,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  857,  857,  857,  287,  857,  857,  857,  857,   61,
      230,  230,  230,  230,  230,  230,   61,   57,  233,  857,

      234,  234,  234,  234,  234,  234,  234,  234,  234,  235,
      857,  236,  236,  236,  236,  236,  236,  857,   61,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  857,  250,
      857,  857,  857,  857,  857,  857,   61,  236,  236,  236,
      236,  236,  236,  175,   61,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  177,  250,  239,  239,  239,  239,
      239,  239,   61,  244,  857,  857,  857,  857,  857,  857,
      857,  857,   61,  857,  857,  857,  857,  857,  857,  261,
       61,  245,  239,  239,  239,  239,  239,  239,  240,  240,
      240,  240,  240,  240,  240,  240,  240,   61,   61,  241,

      241,  241,  241,  241,  241,  261,   61,  245,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  857,  857,  857,
      857,  857,   61,   61,  246,  241,  241,  241,  241,  241,
      241,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      248,  251,  242,  242,  242,  242,  242,  242,   61,  249,
      246,   61,  252,  253,   61,   61,   61,  256,   61,  857,
       61,   61,  254,  857,  255,  257,  248,  251,  242,  242,
      242,  242,  242,  242,   61,  249,   61,   61,  252,  253,
       61,   61,   61,  256,   61,   61,   61,   61,  254,  258,
      255,  257,  259,  260,   61,  262,  263,   61,   61,  857,

       61,  857,   61,  267,  857,   61,  857,  857,  857,   61,
      271,   61,   61,  269,  857,  258,   61,  857,  259,  260,
       61,  262,  263,   61,   61,  264,  265,  266,  270,  267,
       61,   61,  273,  274,   61,   61,  271,  272,   61,  269,
      275,   61,   61,   61,  278,  276,   61,  277,  857,   61,
      291,  264,  265,  266,  270,  857,   61,  857,  273,  274,
       61,   61,   61,  272,   61,  281,  275,   61,  282,   61,
      278,  276,   61,  277,   61,   61,  280,   61,  279,  284,
      286,   61,  289,  283,   61,   61,  857,   61,   61,   61,
       61,  281,  285,   61,  282,   61,  288,  306,   61,   61,

       61,  857,  280,   61,  279,  284,  286,   61,  289,  283,
       61,   61,  307,   61,  290,   61,   61,   61,  285,   61,
       61,   61,  288,  306,   61,   61,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  857,  857,  857,  307,   61,
      290,  857,   61,   61,  857,  857,   61,  233,  857,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  235,   61,
      297,  297,  297,  297,  297,  297,  857,  312,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  857,  857,  857,
      857,  857,  857,  857,   61,   61,  297,  297,  297,  297,
      297,  297,  298,  298,  298,  298,  298,  298,  298,  298,

      298,   61,   61,  299,  299,  299,  299,  299,  299,  300,
       61,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      857,  313,  857,  857,  857,  857,  857,   61,   61,  299,
      299,  299,  299,  299,  299,  175,  857,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  177,  857,  302,  302,
      302,  302,  302,  302,  857,   61,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  302,  302,  302,  302,  302,  302,
      175,   61,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  304,  857,  305,  305,  305,  305,  305,  305,  857,

      857,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      308,  857,   61,  314,   61,  309,  310,  311,  315,  305,
      305,  305,  305,  305,  305,   61,  316,   61,  318,  317,
       61,  319,   61,  321,  320,   61,  308,  323,   61,  314,
       61,  309,  310,  311,  315,   61,   61,  322,  329,   61,
      324,   61,  316,   61,  318,  317,   61,  319,   61,  857,
      320,   61,  325,  323,  326,   61,  328,   61,  330,  333,
      857,   61,   61,  327,   61,   61,  324,  857,  332,   61,
       61,   61,   61,  331,   61,   61,   61,  334,  325,  335,
      326,   61,  328,   61,  330,  333,   61,  336,  340,  327,

       61,  341,   61,   61,  332,   61,   61,   61,   61,  331,
       61,   61,   61,  334,  337,  335,  339,   61,  338,   61,
      342,   61,   61,  336,   61,  343,  345,  341,   61,   61,
      857,   61,   61,  344,  346,   61,   61,   61,  350,  349,
      337,   61,  339,   61,  338,   61,  342,   61,  347,   61,
       61,  343,  345,  351,  352,   61,   61,   61,   61,  344,
      346,   61,   61,   61,   61,  349,  392,   61,   61,  348,
      857,   61,   61,  857,  347,   61,  857,  857,  857,  351,
      352,   61,   61,  857,  857,  393,  857,  857,  367,  857,
       61,  857,  392,  857,   61,  348,  379,   61,   61,  355,

      857,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      233,  393,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  235,   61,  357,  357,  357,  357,  357,  357,  857,
       61,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      857,  857,  857,  857,  857,  857,  857,  857,   61,  357,
      357,  357,  357,  357,  357,  233,   61,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  359,  368,  360,  360,
      360,  360,  360,  360,  857,   61,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  857,  857,   61,  857,  857,
      857,  857,  857,  368,  360,  360,  360,  360,  360,  360,

      175,   61,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  177,  175,   61,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  304,  857,  364,  364,  364,  364,  364,
      364,  857,  857,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  857,  857,  857,  857,  857,  857,  369,  857,
       61,  364,  364,  364,  364,  364,  364,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  370,  371,  366,  366,
      366,  366,  366,  366,  369,  372,   61,  374,  373,   61,
       61,  378,   61,  380,  857,   61,   61,  395,   61,  857,
       61,   61,  370,  371,  366,  366,  366,  366,  366,  366,

      857,  372,  382,  374,  373,   61,   61,  378,   61,  380,
       61,   61,   61,  395,   61,  381,   61,   61,  375,  375,
      857,  375,  375,  375,  375,  375,  375,  376,  382,  375,
      383,   61,   61,  385,  384,  386,   61,  387,   61,  375,
      375,  381,   61,   61,  388,   61,  390,  857,  389,  857,
      391,  857,  398,  402,   61,   61,  383,   61,   61,  385,
      384,  386,   61,  387,   61,   61,   61,  394,   61,   61,
      388,   61,  390,  400,  389,   61,  391,  399,  398,  396,
       61,   61,   61,  397,  401,   61,   61,   61,   61,   61,
      403,   61,   61,  394,  405,  407,  404,   61,  412,  400,

      406,   61,   61,  399,   61,  396,  857,   61,   61,  397,
      401,   61,   61,   61,   61,   61,   61,  408,  411,   61,
      405,  407,  404,   61,   61,  409,  406,   61,   61,  413,
       61,   61,   61,   61,  410,   61,  432,  434,  438,   61,
       61,   61,   61,  408,  411,   61,  857,  857,  857,  857,
       61,  409,   61,   61,  857,  413,  857,   61,   61,  857,
      410,   61,  432,  434,  438,   61,  857,   61,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  233,   61,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  235,  233,
      857,  419,  419,  419,  419,  419,  419,  419,  419,  419,

      359,   61,  420,  420,  420,  420,  420,  420,  857,  857,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  857,
      857,  857,  857,  857,  857,  857,  457,   61,  420,  420,
      420,  420,  420,  420,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  435,   61,  422,  422,  422,  422,  422,
      422,  423,  457,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  857,  458,  857,  857,  446,  857,  857,  435,
       61,  422,  422,  422,  422,  422,  422,  175,  857,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  175,  458,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  304,

       61,  425,  425,  425,  425,  425,  425,  857,   61,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  857,   61,
      857,  857,  857,  857,  857,  857,   61,  425,  425,  425,
      425,  425,  425,  175,   61,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  427,   61,  428,  428,  428,  428,
      428,  428,  857,  436,  428,  428,  428,  428,  428,  428,
      428,  428,  428,   61,  437,   61,  857,  433,   61,  441,
       61,  445,  428,  428,  428,  428,  428,  428,  429,  436,
      857,  430,  439,  857,   61,  857,  447,  431,  857,   61,
      437,   61,  440,  433,   61,  441,   61,  445,  857,  448,

       61,  441,   61,  442,  429,   61,  450,  430,  439,  443,
       61,  444,  447,  431,  449,  451,   61,  857,  440,  857,
      452,  500,   61,  453,  459,  448,   61,  441,   61,  442,
      857,   61,  450,   61,   61,  443,   61,  444,  454,   61,
      449,  451,   61,  456,   61,  455,  452,  500,   61,  453,
      459,   61,  460,  857,   61,   61,  461,  464,   61,   61,
       61,   61,   61,  468,  454,   61,  462,  465,   61,  456,
       61,  455,  463,   61,   61,   61,  469,   61,  460,  466,
       61,   61,  461,  464,   61,   61,  467,   61,  857,  468,
       61,  470,  462,  465,   61,  471,   61,   61,  463,   61,

       61,   61,  469,  472,   61,  466,  473,  474,   61,   61,
       61,   61,  467,  475,   61,  495,   61,  470,  476,   61,
       61,  471,   61,   61,  477,   61,  857,   61,  857,  472,
       61,  857,  473,  474,   61,   61,   61,  857,   61,  475,
       61,  857,  857,  857,  476,   61,   61,  857,  857,   61,
      477,   61,  480,   61,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  233,   61,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  233,   61,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  359,  857,  482,  482,  482,
      482,  482,  482,  857,   61,  482,  482,  482,  482,  482,

      482,  482,  482,  482,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  482,  482,  482,  482,  482,  482,  233,
       61,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      484,  494,  485,  485,  485,  485,  485,  485,  857,  515,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  857,
      857,   61,  857,  857,  857,  857,  857,  494,  485,  485,
      485,  485,  485,  485,  175,  515,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  304,  175,   61,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  427,  857,  488,
      488,  488,  488,  488,  488,  857,  857,  488,  488,  488,

      488,  488,  488,  488,  488,  488,  857,  857,  857,  857,
      857,  857,  857,  857,  491,  488,  488,  488,  488,  488,
      488,  489,  489,  489,  489,  489,  489,  489,  489,  489,
       61,  492,  490,  490,  490,  490,  490,  490,   61,  493,
      491,  497,   61,  501,  857,   61,   61,  498,  499,  857,
      496,  857,   61,  857,   61,  502,   61,  492,  490,  490,
      490,  490,  490,  490,   61,  493,   61,  497,   61,  501,
      503,   61,   61,  498,  499,   61,  496,  504,   61,  507,
       61,  502,  505,  510,  506,   61,   61,  509,   61,  508,
       61,  513,   61,   61,   61,   61,  503,  512,  516,   61,

       61,   61,  511,  504,   61,  507,  521,   61,  505,  510,
      506,   61,   61,  509,   61,  508,   61,  513,  514,   61,
       61,   61,  517,  518,  516,   61,   61,   61,  511,  519,
       61,   61,  524,   61,   61,  523,  522,  520,  857,   61,
       61,   61,  525,   61,  514,   61,  857,  857,  517,  518,
       61,   61,  526,   61,   61,  519,  527,   61,  524,   61,
       61,  523,  522,  520,   61,   61,   61,   61,  525,   61,
      529,   61,   61,  528,  531,   61,   61,   61,  526,  530,
       61,  532,  527,   61,   61,   61,   61,  551,   61,   61,
       61,  555,  563,  564,   61,   61,  529,  857,   61,  528,

      531,   61,  857,  857,  857,  530,   61,  532,  857,   61,
       61,  857,   61,  551,   61,   61,  857,  555,  563,  564,
       61,   61,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  233,   61,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  359,  233,  857,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  484,  857,  538,  538,  538,  538,
      538,  538,  857,  857,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  538,  538,  538,  538,  538,  538,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  546,  549,  540,

      540,  540,  540,  540,  540,  857,   61,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  857,   61,  857,  857,
      857,  857,  857,  546,  549,  540,  540,  540,  540,  540,
      540,  175,   61,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  427,   61,  542,  542,  542,  542,  542,  542,
      857,  569,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  857,  857,  857,  857,  857,  554,  857,  857,  857,
      542,  542,  542,  542,  542,  542,  175,  569,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  544,  547,  545,
      545,  545,  545,  545,  545,  548,  552,   61,  550,  857,

       61,  558,   61,   61,  857,   61,  557,   61,   61,  553,
      556,  857,  566,  568,  547,  545,  545,  545,  545,  545,
      545,  548,  552,   61,  550,   61,   61,  558,   61,   61,
       61,   61,  557,   61,   61,  553,  556,  559,  560,  561,
      562,  567,  565,   61,  570,   61,   61,   61,  571,   61,
      572,   61,   61,   61,  857,   61,   61,   61,   61,   61,
      857,  857,  857,  559,  560,  561,  562,  567,  565,   61,
      570,   61,   61,   61,  571,   61,  572,  573,   61,   61,
       61,   61,  574,   61,   61,   61,  575,  576,  577,   61,
      578,   61,   61,  579,   61,   61,   61,   61,   61,  857,

       61,  857,   61,  573,   61,  593,   61,   61,  574,  580,
      601,  581,  575,  576,  577,   61,  578,   61,   61,  579,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,  593,  603,   61,  857,  580,  601,  581,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  857,   61,  857,
      857,   61,  857,   61,  233,   61,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  484,   61,  585,  585,  585,
      585,  585,  585,  857,   61,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  857,  613,  857,  857,  857,  857,
      857,  857,   61,  585,  585,  585,  585,  585,  585,  233,

      857,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      587,  613,  588,  588,  588,  588,  588,  588,  857,  598,
      588,  588,  588,  588,  588,  588,  588,  588,  588,  857,
      857,   61,  857,  857,  857,  857,  857,  857,  588,  588,
      588,  588,  588,  588,  175,  598,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  427,  175,   61,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  544,  857,  590,
      590,  590,  590,  590,  590,  857,  857,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  857,  857,  857,  857,
      857,  857,  857,  857,  597,  590,  590,  590,  590,  590,

      590,  591,  591,  591,  591,  591,  591,  591,  591,  591,
       61,  599,  592,  592,  592,  592,  592,  592,   61,  595,
      597,  596,  594,   61,  600,  602,   61,   61,   61,  604,
      857,  857,  857,   61,  857,  857,   61,  599,  592,  592,
      592,  592,  592,  592,   61,  595,   61,  596,  594,   61,
      600,  602,   61,   61,   61,  604,  605,  606,  607,   61,
      608,  609,  610,  611,  612,  614,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,  857,  857,
       61,   61,  605,  606,  607,   61,  608,  609,  610,  611,
      612,  614,   61,   61,   61,   61,   61,   61,  615,   61,

       61,   61,   61,   61,  616,  617,   61,   61,  618,   61,
       61,   61,   61,  633,  619,   61,   61,   61,  637,   61,
      857,   61,  857,  857,  615,  857,  857,  857,  857,  857,
      616,  617,   61,  857,  618,   61,   61,  641,   61,  633,
      619,   61,   61,   61,  637,   61,  233,   61,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  484,   61,  233,
      857,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      587,   61,  624,  624,  624,  624,  624,  624,  857,  857,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  857,
      857,  857,  857,  857,  857,  857,  857,   61,  624,  624,

      624,  624,  624,  624,  625,  625,  625,  625,  625,  625,
      625,  625,  625,   61,  635,  626,  626,  626,  626,  626,
      626,  857,   61,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  857,   61,  857,  857,  857,  857,  857,   61,
      635,  626,  626,  626,  626,  626,  626,  175,   61,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  544,   61,
      628,  628,  628,  628,  628,  628,  857,   61,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  628,  628,  628,  628,
      628,  628,  175,   61,  629,  629,  629,  629,  629,  629,

      629,  629,  629,  630,  632,  631,  631,  631,  631,  631,
      631,  634,  636,  638,  639,   61,  640,  642,   61,  643,
       61,  857,   61,   61,   61,  857,   61,  857,   61,  857,
      632,  631,  631,  631,  631,  631,  631,  634,  636,  638,
      639,   61,  640,  642,   61,  643,   61,  644,   61,   61,
       61,  645,   61,  646,   61,  647,   61,  649,   61,  648,
      663,  650,  667,  651,   61,   61,   61,   61,   61,   61,
       61,  664,   61,  644,   61,   61,  857,  645,  857,  646,
      857,  647,   61,  649,   61,  648,  663,  650,  667,  651,
       61,   61,   61,   61,   61,   61,   61,  664,   61,  857,

       61,   61,  233,  857,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  587,   61,  655,  655,  655,  655,  655,
      655,  857,   61,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  857,  675,  857,  857,  857,  857,  857,  857,
       61,  655,  655,  655,  655,  655,  655,  233,   61,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  657,  666,
      658,  658,  658,  658,  658,  658,  857,   61,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  857,  857,   61,
      857,  857,  857,  857,  857,  666,  658,  658,  658,  658,
      658,  658,  175,   61,  362,  362,  362,  362,  362,  362,

      362,  362,  362,  544,  175,   61,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  630,  857,  660,  660,  660,
      660,  660,  660,  857,  857,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  857,  857,  857,  857,  857,  857,
      857,  857,  665,  660,  660,  660,  660,  660,  660,  661,
      661,  661,  661,  661,  661,  661,  661,  661,   61,  668,
      662,  662,  662,  662,  662,  662,  669,  672,  665,   61,
      670,  857,  857,  691,  673,   61,  671,  857,   61,  677,
       61,  674,  676,   61,   61,  668,  662,  662,  662,  662,
      662,  662,  669,  672,   61,   61,  670,   61,   61,  691,

      673,   61,  671,  678,   61,  677,   61,  674,  676,   61,
      857,   61,  857,  857,  857,  857,  857,  857,  857,  857,
       61,  857,  857,   61,   61,  857,  857,  857,  857,  678,
      857,  857,  857,  857,   61,  857,  233,   61,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  587,  233,  857,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  657,
       61,  683,  683,  683,  683,  683,  683,  857,  857,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  857,  857,
      857,  857,  857,  857,  857,   61,  857,  683,  683,  683,
      683,  683,  683,  684,  684,  684,  684,  684,  684,  684,

      684,  684,  695,   61,  685,  685,  685,  685,  685,  685,
      857,   61,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  857,   61,  857,  857,  857,  857,  857,  695,   61,
      685,  685,  685,  685,  685,  685,  175,  857,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  630,   61,  687,
      687,  687,  687,  687,  687,  857,   61,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  857,  692,  696,  857,
      857,  857,  857,  857,   61,  687,  687,  687,  687,  687,
      687,  175,   61,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  689,  692,  690,  690,  690,  690,  690,  690,

       61,  693,   61,   61,  698,  699,  700,  701,   61,  697,
      702,   61,  857,   61,   61,   61,  703,   61,   61,   61,
      690,  690,  690,  690,  690,  690,   61,  693,   61,   61,
      698,  699,  700,  701,   61,  697,  702,   61,  704,   61,
       61,   61,  703,   61,   61,   61,  857,  857,  857,  857,
      745,  746,   61,  857,   61,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  704,  857,  857,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  745,  746,  718,  857,
       61,  233,  857,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  657,   61,  709,  709,  709,  709,  709,  709,

      175,   61,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  630,   61,  857,  857,  857,  857,  857,  857,   61,
      709,  709,  709,  709,  709,  709,  233,   61,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  711,   61,  712,
      712,  712,  712,  712,  712,  857,  725,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  857,  857,  857,  857,
      857,  857,  857,  857,  769,  712,  712,  712,  712,  712,
      712,  175,   61,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  689,  717,  714,  714,  714,  714,  714,  714,
      769,  857,  857,  857,  857,  857,  857,  857,   61,   61,

      857,  857,  857,  857,  857,  857,  857,  857,  857,  717,
      714,  714,  714,  714,  714,  714,  715,  715,  715,  715,
      715,  715,  715,  715,  715,   61,  719,  716,  716,  716,
      716,  716,  716,  720,  722,  857,   61,  857,  857,  729,
      857,  770,   61,  728,  726,  723,   61,   61,   61,  721,
      727,   61,  719,  716,  716,  716,  716,  716,  716,  720,
      722,  724,   61,   61,   61,  729,   61,  770,   61,  728,
      726,  723,   61,   61,   61,  721,  727,   61,   61,  857,
      857,  857,  857,  857,  857,  776,  857,  724,  857,   61,
       61,  233,   61,  418,  418,  418,  418,  418,  418,  418,

      418,  418,  657,  233,   61,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  711,   61,  735,  735,  735,  735,
      735,  735,  857,  857,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  857,  857,  775,  857,  857,  857,  857,
      857,   61,  735,  735,  735,  735,  735,  735,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  748,   61,  737,
      737,  737,  737,  737,  737,  857,   61,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  857,  788,  857,  857,
      857,  857,  857,  748,   61,  737,  737,  737,  737,  737,
      737,  175,   61,  738,  738,  738,  738,  738,  738,  738,

      738,  738,  689,  788,  739,  739,  739,  739,  739,  739,
      857,  857,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  857,  744,  857,  857,  857,  857,  857,  857,  857,
      739,  739,  739,  739,  739,  739,  175,   61,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  741,  744,  742,
      742,  742,  742,  742,  742,  743,  747,  749,   61,  755,
      857,  795,   61,   61,  750,  751,  752,   61,  753,  754,
      857,  857,   61,  857,  857,  742,  742,  742,  742,  742,
      742,  743,  747,  749,   61,  755,   61,   61,   61,  789,
       61,  767,  768,   61,   61,  754,   61,  857,   61,  761,

      761,  761,  761,  761,  761,  761,  761,  761,  793,  857,
      857,  857,   61,   61,  792,  789,   61,  767,  768,  857,
       61,  233,   61,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  711,   61,  761,  761,  761,  761,  761,  761,
      857,   61,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  794,  857,  857,  857,  857,  857,  857,  857,   61,
      761,  761,  761,  761,  761,  761,  233,   61,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  771,   61,  763,
      763,  763,  763,  763,  763,  175,   61,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  689,   61,  857,  857,

      857,  857,  857,  771,   61,  763,  763,  763,  763,  763,
      763,  175,   61,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  741,   61,  765,  765,  765,  765,  765,  765,
      857,  772,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  773,  777,  778,  774,  787,  857,   61,  857,  857,
      765,  765,  765,  765,  765,  765,  857,  772,   61,   61,
      804,  790,   61,   61,  796,  857,   61,   61,  777,  778,
       61,  787,  233,   61,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  711,   61,   61,  804,  790,   61,   61,
      796,  791,   61,   61,  857,  857,   61,  233,  857,  782,

      782,  782,  782,  782,  782,  782,  782,  782,   61,   61,
      783,  783,  783,  783,  783,  783,  857,  791,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  857,   61,  857,
      857,  857,  857,  857,   61,   61,  783,  783,  783,  783,
      783,  783,  175,  857,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  741,   61,  785,  785,  785,  785,  785,
      785,  857,   61,  785,  785,  785,  785,  785,  785,  785,
      785,  785,   61,   61,  857,  857,  857,  857,  857,  857,
      857,  785,  785,  785,  785,  785,  785,  233,   61,  800,
      800,  800,  800,  800,  800,  800,  800,  800,   61,   61,

      801,  801,  801,  801,  801,  801,  857,  822,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  857,  803,  806,
      823,   61,  830,  857,  857,   61,  801,  801,  801,  801,
      801,  801,  175,  822,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  741,  803,  806,  823,   61,  830,  805,
      805,   61,  805,  805,  805,  805,  805,  805,  857,  233,
      805,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      805,  805,  812,  813,  811,  811,  831,  811,  811,  811,
      811,  811,  811,  815,  816,  811,  820,  821,  824,  825,
      827,  826,  832,  835,   61,  811,  811,   61,  812,  813,

       61,  833,  831,  857,   61,   61,  839,  840,   61,  815,
      816,   61,  820,  821,  824,  825,  827,  826,  832,  835,
       61,   61,  834,   61,  841,   61,   61,  833,  845,   61,
       61,   61,  839,  840,   61,   61,  842,   61,  846,   61,
      857,  857,  857,  857,  857,  857,  857,   61,  834,  857,
      841,   61,  857,  857,  845,   61,   61,  857,   61,  857,
      857,   61,  842,  857,  846,   61,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,   61,  857,   61,   41,   41,   41,   41,   43,
       43,   43,   43,   47,   47,   47,   47,   49,  857,   49,

       49,   50,   50,   50,   50,  112,  857,  112,  112,  115,
      115,  171,  171,  231,  231,  232,  232,  292,  292,  293,
      293,  353,  353,  354,  354,  377,  857,  377,  377,  414,
      414,  415,  415,  478,  478,  479,  479,  533,  533,  534,
      534,  582,  582,  583,  583,  620,  620,  621,  621,  652,
      652,  653,  653,  679,  679,  680,  680,  705,  705,  706,
      706,  730,  730,  731,  731,  756,  756,  758,  758,  779,
      779,  780,  780,  797,  797,  798,  798,  805,  857,  805,
      805,  807,  857,  807,  807,  808,  808,  811,  857,  811,
      811,  814,  857,  814,  814,  817,  817,  818,  818,  828,

      828,  836,  836,  837,  837,  843,  843,  847,  847,  848,
      848,  850,  850,  852,  852,  853,  853,  855,  855,  856,
      856,    7,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857

    } ;

static yyconst flex_int16_t yy_chk[5398] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   10,   10,   11,   11,   15,
       17,   27,  925,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   24,   16,   16,   16,   16,   16,

       16,   28,   16,   37,   61,   24,   17,   27,   24,   28,
       37,   63,   30,   44,   44,   64,   28,   24,   16,  921,
       24,   16,   16,   16,   16,   16,   16,   28,   16,   37,
       61,   24,   30,  917,   24,   28,   37,   63,   30,   45,
       45,   64,   28,   24,   16,   20,   20,  913,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   30,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   21,   21,   32,  907,   32,  906,   39,   32,  902,
       21,  899,   21,   39,   46,   46,   65,   66,   29,   21,
      898,   25,  895,  892,   29,  865,   66,   21,   21,   32,
       29,   32,   25,   39,   32,   25,   21,   25,   21,   39,
      856,   69,   65,   66,   29,   21,   22,   25,   22,   22,
       29,   33,   66,   68,   68,   72,   29,   22,   25,   22,
       22,   25,   33,   25,  855,   33,   22,   69,   33,   76,
      853,  852,   22,   40,   22,   22,  851,   33,  850,   68,
       68,   72,   79,   22,   31,   22,   22,  848,   33,   40,

       31,   33,   22,   23,   33,   31,   31,   23,   71,   40,
       74,   23,   74,   76,   23,   71,   23,   23,   79,   88,
       31,   23,   91,   23,  847,   40,   31,  844,  843,   23,
      837,   31,   31,   23,   71,  836,   74,   23,   74,   76,
       23,   71,   23,   23,  829,   88,  828,   23,   91,   23,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      818,   26,   26,   26,   26,   26,   26,  817,   26,   67,
       35,   35,   26,   34,  809,   26,  808,   34,  798,  797,
       38,   26,   35,   35,   38,  785,   67,   26,   26,   26,
       26,   26,   26,   34,   26,   67,   35,   35,   26,   34,

       38,   26,   73,   34,   36,   36,   38,   26,   35,   35,
       38,   81,   67,   70,   36,   75,   73,   77,  101,   34,
       78,   70,   36,   75,   78,   78,   38,   81,   73,   77,
       84,   36,   82,   70,   36,  781,  780,   81,  779,   70,
       36,   75,   73,   77,  101,   84,   78,   70,   36,   75,
       78,   78,   82,   81,  761,   77,   84,   36,   82,   70,
       36,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   84,   54,   54,   54,   54,   54,   54,   82,   54,
       56,   56,   56,   56,   56,   56,   56,   56,   56,  758,
       85,  756,  739,  733,  732,  731,  730,  102,   54,   54,

       54,   54,   54,   54,   85,   54,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   80,   85,   59,   59,   59,
       59,   59,   59,  102,  709,  706,  705,  687,  681,  680,
       85,  679,   80,  667,  655,   92,  653,  652,  628,  622,
      621,   80,  620,   59,   59,   59,   59,   59,   59,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   80,   83,
       62,   62,   62,   62,   62,   62,   86,   86,   87,   92,
       87,   62,   89,  585,   62,   90,   90,   89,   83,   83,
      583,  582,  542,   94,  535,   83,   62,   62,   62,   62,
       62,   62,   86,   86,   87,   92,   87,   62,   89,   94,

       62,   90,   90,   89,   83,   83,   93,   97,   95,   94,
       99,   98,   93,   95,  103,   96,   98,   96,   96,  105,
      104,  100,  534,  106,  533,   94,   96,   97,  104,  121,
       99,  482,   93,   97,   95,  106,   99,   98,   93,   95,
      100,   96,   98,   96,   96,  105,  104,  100,  103,  106,
      107,  108,   96,   97,  104,  121,   99,  109,  108,  107,
      109,  106,  110,  122,  110,  479,  100,  478,  425,  416,
      415,  414,  357,  354,  103,  124,  107,  108,  353,  302,
      294,  293,  126,  109,  108,  107,  109,  292,  110,  122,
      110,  113,  113,  113,  113,  113,  113,  113,  113,  113,

      113,  124,  113,  113,  113,  113,  113,  113,  126,  113,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  129,
      129,  242,  232,  231,  230,  205,  172,  171,  113,  113,
      113,  113,  113,  113,  115,  113,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  129,  129,  116,  116,  116,
      116,  116,  116,  119,  168,  119,  119,  119,  119,  119,
      119,  119,  119,  119,   55,  139,   51,   50,   47,   42,
       19,   18,  139,  116,  116,  116,  116,  116,  116,  118,
      168,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  139,  118,  118,  118,  118,  118,  118,  139,  170,

      170,  170,  170,  170,  170,  170,  170,  170,   14,   12,
        7,    4,    3,    0,  132,    0,    0,  180,  118,  118,
      118,  118,  118,  118,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  125,  128,  120,  120,  120,  120,  120,
      120,  123,  127,  180,  127,  130,  125,  123,  132,  130,
      128,    0,    0,  131,    0,  137,    0,  133,  137,  125,
      128,  120,  120,  120,  120,  120,  120,  123,  127,  131,
      127,  130,  125,  123,  132,  130,  128,  133,  134,  131,
      135,  137,  136,  133,  137,    0,  138,  134,  138,  140,
        0,  140,  141,  142,  145,  131,  188,  135,  136,    0,

      143,  148,    0,  133,  134,  144,  135,  146,  136,    0,
      141,  142,  138,  134,  138,  140,  143,  140,  141,  142,
      149,  144,  188,  135,  136,  146,  143,    0,  145,  147,
      147,  144,  149,  146,  151,  148,  141,  142,    0,  150,
      152,  153,  143,  151,    0,    0,  149,  144,  150,    0,
      155,  146,  150,  153,  145,  152,  154,  150,  149,  158,
      151,  148,  156,    0,  147,  150,  152,  153,  156,  151,
      155,  160,  154,  160,  150,  162,  155,  157,  150,  153,
      157,  152,  154,  150,  159,  159,  161,    0,  156,  163,
      147,  162,  166,  158,  156,  164,  155,  160,  154,  160,

        0,  162,  165,  157,  161,  163,  157,  193,  197,  166,
      159,  159,  161,  164,  165,  163,  167,  162,  166,  158,
        0,  164,    0,    0,    0,    0,  167,    0,  165,  183,
      161,  163,    0,  193,  197,  166,    0,    0,    0,  164,
      165,  174,  167,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  167,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  183,  169,  169,  169,  169,  169,  169,
      212,  169,  175,  175,  175,  175,  175,  175,  175,  175,
      175,    0,    0,    0,  223,    0,    0,    0,    0,  183,
      169,  169,  169,  169,  169,  169,  212,  169,  173,    0,

      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
        0,  173,  173,  173,  173,  173,  173,  178,  223,  178,
      178,  178,  178,  178,  178,  178,  178,  178,    0,  186,
        0,    0,    0,    0,    0,    0,  186,  173,  173,  173,
      173,  173,  173,  176,  223,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  186,  176,  176,  176,  176,
      176,  176,  186,  181,    0,    0,    0,    0,    0,    0,
        0,    0,  224,    0,    0,    0,    0,    0,    0,  200,
      200,  181,  176,  176,  176,  176,  176,  176,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  181,  224,  177,

      177,  177,  177,  177,  177,  200,  200,  181,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,    0,    0,
        0,    0,  182,  181,  182,  177,  177,  177,  177,  177,
      177,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      184,  187,  179,  179,  179,  179,  179,  179,  182,  185,
      182,  185,  189,  190,  189,  190,  184,  194,  246,    0,
      194,  187,  191,    0,  192,  195,  184,  187,  179,  179,
      179,  179,  179,  179,  191,  185,  192,  185,  189,  190,
      189,  190,  184,  194,  246,  195,  194,  187,  191,  196,
      192,  195,  198,  199,  198,  201,  202,  202,  201,    0,

      191,    0,  192,  204,    0,  196,    0,    0,    0,  199,
      207,  195,  207,  206,    0,  196,  204,    0,  198,  199,
      198,  201,  202,  202,  201,  203,  203,  203,  206,  204,
      206,  196,  209,  210,  203,  199,  207,  208,  207,  206,
      211,  209,  204,  208,  215,  213,  211,  214,    0,  210,
      228,  203,  203,  203,  206,    0,  206,    0,  209,  210,
      203,  213,  215,  208,  214,  218,  211,  209,  219,  208,
      215,  213,  211,  214,  216,  210,  217,  217,  216,  220,
      222,  218,  226,  219,  228,  219,    0,  213,  215,  222,
      214,  218,  221,  221,  219,  220,  225,  243,  243,  226,

      216,    0,  217,  217,  216,  220,  222,  218,  226,  219,
      228,  219,  244,  257,  227,  222,  225,  244,  221,  221,
      227,  220,  225,  243,  243,  226,  233,  233,  233,  233,
      233,  233,  233,  233,  233,    0,    0,    0,  244,  257,
      227,    0,  225,  244,    0,    0,  227,  234,    0,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  258,
      234,  234,  234,  234,  234,  234,  236,  248,  236,  236,
      236,  236,  236,  236,  236,  236,  236,    0,    0,    0,
        0,    0,    0,    0,  279,  258,  234,  234,  234,  234,
      234,  234,  235,  235,  235,  235,  235,  235,  235,  235,

      235,  248,  281,  235,  235,  235,  235,  235,  235,  237,
      279,  237,  237,  237,  237,  237,  237,  237,  237,  237,
        0,  249,    0,    0,    0,    0,    0,  248,  281,  235,
      235,  235,  235,  235,  235,  238,    0,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,    0,  238,  238,
      238,  238,  238,  238,  239,  249,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  238,  238,  238,  238,  238,  238,
      240,  249,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,    0,  240,  240,  240,  240,  240,  240,  241,

        0,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      245,    0,  245,  250,  250,  247,  247,  247,  251,  240,
      240,  240,  240,  240,  240,  247,  252,  252,  254,  253,
      251,  255,  255,  259,  256,  254,  245,  261,  245,  250,
      250,  247,  247,  247,  251,  253,  256,  260,  267,  261,
      262,  247,  252,  252,  254,  253,  251,  255,  255,    0,
      256,  254,  263,  261,  264,  262,  266,  259,  268,  270,
        0,  253,  256,  265,  263,  261,  262,    0,  269,  265,
      264,  260,  267,  268,  269,  270,  266,  271,  263,  272,
      264,  262,  266,  259,  268,  270,  272,  273,  277,  265,

      263,  278,  278,  271,  269,  265,  264,  260,  267,  268,
      269,  270,  266,  271,  274,  272,  276,  273,  275,  276,
      280,  274,  272,  273,  275,  282,  284,  278,  278,  271,
        0,  282,  277,  283,  285,  284,  280,  285,  289,  288,
      274,  288,  276,  273,  275,  276,  280,  274,  286,  283,
      275,  282,  284,  290,  291,  318,  290,  282,  277,  283,
      285,  284,  280,  285,  287,  288,  330,  288,  286,  287,
        0,  291,  289,    0,  286,  283,    0,    0,    0,  290,
      291,  318,  290,    0,    0,  331,    0,    0,  306,    0,
      287,    0,  330,    0,  286,  287,  316,  291,  289,  295,

        0,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      296,  331,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  306,  296,  296,  296,  296,  296,  296,  297,
      316,  297,  297,  297,  297,  297,  297,  297,  297,  297,
        0,    0,    0,    0,    0,    0,    0,    0,  306,  296,
      296,  296,  296,  296,  296,  298,  316,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  307,  298,  298,
      298,  298,  298,  298,  299,  335,  299,  299,  299,  299,
      299,  299,  299,  299,  299,    0,    0,  307,    0,    0,
        0,    0,    0,  307,  298,  298,  298,  298,  298,  298,

      301,  335,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  303,  307,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,    0,  303,  303,  303,  303,  303,
      303,  305,    0,  305,  305,  305,  305,  305,  305,  305,
      305,  305,    0,    0,    0,    0,    0,    0,  308,    0,
      308,  303,  303,  303,  303,  303,  303,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  309,  310,  304,  304,
      304,  304,  304,  304,  308,  311,  308,  313,  312,  310,
      312,  315,  309,  317,    0,  313,  317,  333,  315,    0,
      333,  311,  309,  310,  304,  304,  304,  304,  304,  304,

        0,  311,  320,  313,  312,  310,  312,  315,  309,  317,
      320,  313,  317,  333,  315,  319,  333,  311,  314,  314,
        0,  314,  314,  314,  314,  314,  314,  314,  320,  314,
      321,  319,  323,  323,  322,  324,  320,  325,  321,  314,
      314,  319,  322,  326,  326,  325,  328,    0,  327,    0,
      329,    0,  337,  341,  328,  324,  321,  319,  323,  323,
      322,  324,  329,  325,  321,  327,  337,  332,  322,  326,
      326,  325,  328,  339,  327,  332,  329,  338,  337,  334,
      328,  324,  334,  336,  340,  336,  338,  341,  329,  339,
      342,  327,  337,  332,  344,  346,  343,  344,  351,  339,

      345,  332,  340,  338,  343,  334,    0,  346,  334,  336,
      340,  336,  338,  341,  369,  339,  345,  347,  350,  347,
      344,  346,  343,  344,  342,  348,  345,  350,  340,  352,
      343,  348,  351,  346,  349,  349,  368,  371,  375,  368,
      369,  352,  345,  347,  350,  347,    0,    0,    0,    0,
      342,  348,  371,  350,    0,  352,    0,  348,  351,    0,
      349,  349,  368,  371,  375,  368,    0,  352,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  356,  371,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  358,
        0,  358,  358,  358,  358,  358,  358,  358,  358,  358,

      358,  378,  358,  358,  358,  358,  358,  358,  360,    0,
      360,  360,  360,  360,  360,  360,  360,  360,  360,    0,
        0,    0,    0,    0,    0,    0,  392,  378,  358,  358,
      358,  358,  358,  358,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  372,  372,  359,  359,  359,  359,  359,
      359,  361,  392,  361,  361,  361,  361,  361,  361,  361,
      361,  361,    0,  393,    0,    0,  381,    0,    0,  372,
      372,  359,  359,  359,  359,  359,  359,  362,    0,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  363,  393,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,

      381,  363,  363,  363,  363,  363,  363,  364,  399,  364,
      364,  364,  364,  364,  364,  364,  364,  364,    0,  410,
        0,    0,    0,    0,    0,    0,  381,  363,  363,  363,
      363,  363,  363,  365,  399,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  410,  365,  365,  365,  365,
      365,  365,  366,  373,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  370,  374,  373,    0,  370,  377,  377,
      380,  380,  365,  365,  365,  365,  365,  365,  367,  373,
        0,  367,  376,    0,  374,    0,  382,  367,    0,  370,
      374,  373,  376,  370,  377,  377,  380,  380,    0,  383,

      376,  376,  382,  379,  367,  383,  385,  367,  376,  379,
      374,  379,  382,  367,  384,  386,  379,    0,  376,    0,
      387,  438,  385,  388,  394,  383,  376,  376,  382,  379,
        0,  383,  385,  386,  384,  379,  387,  379,  389,  388,
      384,  386,  379,  391,  394,  390,  387,  438,  385,  388,
      394,  395,  395,    0,  389,  396,  396,  400,  391,  386,
      384,  390,  387,  403,  389,  388,  397,  400,  397,  391,
      394,  390,  398,  398,  400,  403,  404,  395,  395,  401,
      389,  396,  396,  400,  391,  401,  402,  390,    0,  403,
      405,  405,  397,  400,  397,  406,  404,  406,  398,  398,

      400,  403,  404,  407,  402,  401,  408,  409,  408,  452,
      407,  401,  402,  411,  409,  433,  405,  405,  412,  454,
      412,  406,  404,  406,  413,  411,    0,  413,    0,  407,
      402,    0,  408,  409,  408,  452,  407,    0,  455,  411,
      409,    0,    0,    0,  412,  454,  412,    0,    0,  433,
      413,  411,  417,  413,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  418,  455,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  419,  433,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,    0,  419,  419,  419,
      419,  419,  419,  420,  456,  420,  420,  420,  420,  420,

      420,  420,  420,  420,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  419,  419,  419,  419,  419,  419,  421,
      456,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  432,  421,  421,  421,  421,  421,  421,  422,  457,
      422,  422,  422,  422,  422,  422,  422,  422,  422,    0,
        0,  432,    0,    0,    0,    0,    0,  432,  421,  421,
      421,  421,  421,  421,  424,  457,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  426,  432,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,    0,  426,
      426,  426,  426,  426,  426,  428,    0,  428,  428,  428,

      428,  428,  428,  428,  428,  428,    0,    0,    0,    0,
        0,    0,    0,    0,  429,  426,  426,  426,  426,  426,
      426,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      429,  430,  427,  427,  427,  427,  427,  427,  430,  431,
      429,  435,  436,  439,    0,  437,  431,  436,  437,    0,
      434,    0,  439,    0,  435,  440,  429,  430,  427,  427,
      427,  427,  427,  427,  430,  431,  434,  435,  436,  439,
      441,  437,  431,  436,  437,  440,  434,  442,  439,  445,
      435,  440,  443,  448,  444,  442,  441,  447,  443,  446,
      446,  451,  434,  444,  447,  445,  441,  450,  458,  449,

      448,  440,  449,  442,  462,  445,  464,  451,  443,  448,
      444,  442,  441,  447,  443,  446,  446,  451,  453,  444,
      447,  445,  459,  460,  458,  449,  448,  453,  449,  461,
      462,  450,  467,  451,  459,  466,  465,  463,    0,  460,
      464,  467,  468,  466,  453,  461,    0,    0,  459,  460,
      463,  473,  469,  453,  465,  461,  470,  450,  467,  468,
      459,  466,  465,  463,  469,  460,  464,  467,  468,  466,
      472,  461,  470,  471,  475,  471,  463,  473,  469,  474,
      465,  476,  470,  477,  472,  468,  476,  496,  496,  475,
      469,  500,  508,  509,  509,  474,  472,    0,  470,  471,

      475,  471,    0,    0,    0,  474,  514,  476,    0,  477,
      472,    0,  476,  496,  496,  475,    0,  500,  508,  509,
      509,  474,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  481,  514,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  483,    0,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,    0,  483,  483,  483,  483,
      483,  483,  485,    0,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  483,  483,  483,  483,  483,  483,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  491,  494,  484,

      484,  484,  484,  484,  484,  488,  494,  488,  488,  488,
      488,  488,  488,  488,  488,  488,    0,  491,    0,    0,
        0,    0,    0,  491,  494,  484,  484,  484,  484,  484,
      484,  487,  494,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  491,  487,  487,  487,  487,  487,  487,
      490,  515,  490,  490,  490,  490,  490,  490,  490,  490,
      490,    0,    0,    0,    0,    0,  499,    0,    0,    0,
      487,  487,  487,  487,  487,  487,  489,  515,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  492,  489,
      489,  489,  489,  489,  489,  493,  497,  492,  495,    0,

      499,  503,  497,  502,    0,  493,  502,  495,  503,  498,
      501,    0,  511,  513,  492,  489,  489,  489,  489,  489,
      489,  493,  497,  492,  495,  498,  499,  503,  497,  502,
      501,  493,  502,  495,  503,  498,  501,  504,  505,  506,
      507,  512,  510,  507,  516,  505,  511,  513,  517,  512,
      518,  498,  520,  518,    0,  517,  501,  504,  510,  506,
        0,    0,    0,  504,  505,  506,  507,  512,  510,  507,
      516,  505,  511,  513,  517,  512,  518,  519,  520,  518,
      519,  517,  521,  504,  510,  506,  522,  523,  524,  525,
      526,  521,  528,  527,  529,  523,  527,  526,  530,    0,

      524,    0,  522,  519,  553,  546,  519,  546,  521,  531,
      555,  532,  522,  523,  524,  525,  526,  521,  528,  527,
      529,  523,  527,  526,  530,  531,  524,  532,  522,  562,
      553,  546,  557,  546,    0,  531,  555,  532,  536,  536,
      536,  536,  536,  536,  536,  536,  536,    0,  565,    0,
        0,  531,    0,  532,  537,  562,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  557,  537,  537,  537,
      537,  537,  537,  538,  565,  538,  538,  538,  538,  538,
      538,  538,  538,  538,    0,  569,    0,    0,    0,    0,
        0,    0,  557,  537,  537,  537,  537,  537,  537,  539,

        0,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  569,  539,  539,  539,  539,  539,  539,  540,  551,
      540,  540,  540,  540,  540,  540,  540,  540,  540,    0,
        0,  551,    0,    0,    0,    0,    0,    0,  539,  539,
      539,  539,  539,  539,  541,  551,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  543,  551,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,    0,  543,
      543,  543,  543,  543,  543,  545,    0,  545,  545,  545,
      545,  545,  545,  545,  545,  545,    0,    0,    0,    0,
        0,    0,    0,    0,  550,  543,  543,  543,  543,  543,

      543,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      550,  552,  544,  544,  544,  544,  544,  544,  547,  548,
      550,  549,  547,  549,  554,  556,  548,  556,  552,  558,
        0,    0,    0,  554,    0,    0,  550,  552,  544,  544,
      544,  544,  544,  544,  547,  548,  558,  549,  547,  549,
      554,  556,  548,  556,  552,  558,  559,  560,  561,  554,
      563,  564,  566,  567,  568,  570,  571,  563,  572,  567,
      561,  566,  558,  560,  559,  573,  568,  575,    0,    0,
      578,  564,  559,  560,  561,  579,  563,  564,  566,  567,
      568,  570,  571,  563,  572,  567,  561,  566,  574,  560,

      559,  573,  568,  575,  576,  577,  578,  564,  580,  580,
      574,  579,  594,  595,  581,  596,  576,  599,  601,  595,
        0,  577,    0,    0,  574,    0,    0,    0,    0,    0,
      576,  577,  581,    0,  580,  580,  574,  605,  594,  595,
      581,  596,  576,  599,  601,  595,  584,  577,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  581,  586,
        0,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  605,  586,  586,  586,  586,  586,  586,  588,    0,
      588,  588,  588,  588,  588,  588,  588,  588,  588,    0,
        0,    0,    0,    0,    0,    0,    0,  605,  586,  586,

      586,  586,  586,  586,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  606,  598,  587,  587,  587,  587,  587,
      587,  590,  598,  590,  590,  590,  590,  590,  590,  590,
      590,  590,    0,  619,    0,    0,    0,    0,    0,  606,
      598,  587,  587,  587,  587,  587,  587,  589,  598,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  619,
      589,  589,  589,  589,  589,  589,  592,  634,  592,  592,
      592,  592,  592,  592,  592,  592,  592,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  589,  589,  589,  589,
      589,  589,  591,  634,  591,  591,  591,  591,  591,  591,

      591,  591,  591,  591,  593,  591,  591,  591,  591,  591,
      591,  597,  600,  602,  603,  602,  604,  607,  597,  608,
      593,    0,  604,  603,  607,    0,  608,    0,  600,    0,
      593,  591,  591,  591,  591,  591,  591,  597,  600,  602,
      603,  602,  604,  607,  597,  608,  593,  609,  604,  603,
      607,  610,  608,  611,  600,  612,  609,  616,  616,  615,
      632,  617,  637,  618,  632,  638,  642,  610,  617,  633,
      611,  633,  612,  609,  615,  618,    0,  610,    0,  611,
        0,  612,  609,  616,  616,  615,  632,  617,  637,  618,
      632,  638,  642,  610,  617,  633,  611,  633,  612,    0,

      615,  618,  623,    0,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  644,  623,  623,  623,  623,  623,
      623,  624,  649,  624,  624,  624,  624,  624,  624,  624,
      624,  624,    0,  647,    0,    0,    0,    0,    0,    0,
      644,  623,  623,  623,  623,  623,  623,  625,  649,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  636,
      625,  625,  625,  625,  625,  625,  626,  647,  626,  626,
      626,  626,  626,  626,  626,  626,  626,    0,    0,  636,
        0,    0,    0,    0,    0,  636,  625,  625,  625,  625,
      625,  625,  627,  647,  627,  627,  627,  627,  627,  627,

      627,  627,  627,  627,  629,  636,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,    0,  629,  629,  629,
      629,  629,  629,  631,    0,  631,  631,  631,  631,  631,
      631,  631,  631,  631,    0,    0,    0,    0,    0,    0,
        0,    0,  635,  629,  629,  629,  629,  629,  629,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  635,  639,
      630,  630,  630,  630,  630,  630,  640,  643,  635,  640,
      641,    0,    0,  663,  645,  639,  641,    0,  641,  650,
      650,  646,  648,  643,  635,  639,  630,  630,  630,  630,
      630,  630,  640,  643,  645,  640,  641,  646,  648,  663,

      645,  639,  641,  651,  641,  650,  650,  646,  648,  643,
        0,  651,    0,    0,    0,    0,    0,    0,    0,    0,
      645,    0,    0,  646,  648,    0,    0,    0,    0,  651,
        0,    0,    0,    0,  665,    0,  654,  651,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  656,    0,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      665,  656,  656,  656,  656,  656,  656,  658,    0,  658,
      658,  658,  658,  658,  658,  658,  658,  658,    0,    0,
        0,    0,    0,    0,    0,  674,    0,  656,  656,  656,
      656,  656,  656,  657,  657,  657,  657,  657,  657,  657,

      657,  657,  668,  699,  657,  657,  657,  657,  657,  657,
      660,  674,  660,  660,  660,  660,  660,  660,  660,  660,
      660,    0,  668,    0,    0,    0,    0,    0,  668,  699,
      657,  657,  657,  657,  657,  657,  659,    0,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  668,  659,
      659,  659,  659,  659,  659,  662,  703,  662,  662,  662,
      662,  662,  662,  662,  662,  662,    0,  664,  669,    0,
        0,    0,    0,    0,  664,  659,  659,  659,  659,  659,
      659,  661,  703,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  664,  661,  661,  661,  661,  661,  661,

      664,  666,  669,  666,  671,  672,  673,  675,  673,  670,
      676,  676,    0,  675,  672,  704,  677,  671,  677,  719,
      661,  661,  661,  661,  661,  661,  670,  666,  669,  666,
      671,  672,  673,  675,  673,  670,  676,  676,  678,  675,
      672,  704,  677,  671,  677,  719,    0,    0,    0,    0,
      720,  721,  670,  683,  678,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  678,  685,    0,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  720,  721,  692,    0,
      678,  682,    0,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  725,  682,  682,  682,  682,  682,  682,

      686,  727,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  692,    0,    0,    0,    0,    0,    0,  725,
      682,  682,  682,  682,  682,  682,  684,  727,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  692,  684,
      684,  684,  684,  684,  684,  690,  697,  690,  690,  690,
      690,  690,  690,  690,  690,  690,    0,    0,    0,    0,
        0,    0,    0,    0,  745,  684,  684,  684,  684,  684,
      684,  688,  697,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  691,  688,  688,  688,  688,  688,  688,
      745,    0,    0,    0,    0,    0,    0,    0,  697,  691,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  691,
      688,  688,  688,  688,  688,  688,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  691,  693,  689,  689,  689,
      689,  689,  689,  694,  695,    0,  695,    0,    0,  702,
        0,  746,  693,  701,  698,  696,  701,  747,  750,  694,
      700,  702,  693,  689,  689,  689,  689,  689,  689,  694,
      695,  696,  695,  696,  698,  702,  700,  746,  693,  701,
      698,  696,  701,  747,  750,  694,  700,  702,  767,    0,
        0,    0,    0,    0,    0,  753,    0,  696,    0,  696,
      698,  708,  700,  708,  708,  708,  708,  708,  708,  708,

      708,  708,  708,  710,  767,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  753,  710,  710,  710,  710,
      710,  710,  712,    0,  712,  712,  712,  712,  712,  712,
      712,  712,  712,    0,    0,  752,    0,    0,    0,    0,
        0,  753,  710,  710,  710,  710,  710,  710,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  723,  752,  711,
      711,  711,  711,  711,  711,  714,  723,  714,  714,  714,
      714,  714,  714,  714,  714,  714,    0,  769,    0,    0,
        0,    0,    0,  723,  752,  711,  711,  711,  711,  711,
      711,  713,  723,  713,  713,  713,  713,  713,  713,  713,

      713,  713,  713,  769,  713,  713,  713,  713,  713,  713,
      716,    0,  716,  716,  716,  716,  716,  716,  716,  716,
      716,    0,  718,    0,    0,    0,    0,    0,    0,    0,
      713,  713,  713,  713,  713,  713,  715,  718,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  718,  715,
      715,  715,  715,  715,  715,  717,  722,  724,  717,  729,
        0,  776,  724,  718,  726,  726,  726,  729,  726,  728,
        0,    0,  722,    0,    0,  715,  715,  715,  715,  715,
      715,  717,  722,  724,  717,  729,  728,  743,  724,  770,
      776,  743,  744,  729,  726,  728,  744,  735,  722,  735,

      735,  735,  735,  735,  735,  735,  735,  735,  774,    0,
        0,    0,  728,  743,  773,  770,  776,  743,  744,    0,
      726,  734,  744,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  774,  734,  734,  734,  734,  734,  734,
      737,  773,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  775,    0,    0,    0,    0,    0,    0,    0,  774,
      734,  734,  734,  734,  734,  734,  736,  773,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  748,  775,  736,
      736,  736,  736,  736,  736,  738,  778,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  748,    0,    0,

        0,    0,    0,  748,  775,  736,  736,  736,  736,  736,
      736,  740,  778,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  748,  740,  740,  740,  740,  740,  740,
      742,  749,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  751,  754,  755,  751,  768,    0,  749,    0,    0,
      740,  740,  740,  740,  740,  740,    0,  749,  754,  755,
      788,  771,  768,  771,  777,    0,  792,  777,  754,  755,
      751,  768,  760,  749,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  754,  755,  788,  771,  768,  771,
      777,  772,  792,  777,    0,    0,  751,  762,    0,  762,

      762,  762,  762,  762,  762,  762,  762,  762,  793,  772,
      762,  762,  762,  762,  762,  762,  763,  772,  763,  763,
      763,  763,  763,  763,  763,  763,  763,    0,  794,    0,
        0,    0,    0,    0,  793,  772,  762,  762,  762,  762,
      762,  762,  764,    0,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  794,  764,  764,  764,  764,  764,
      764,  765,  795,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  796,  803,    0,    0,    0,    0,    0,    0,
        0,  764,  764,  764,  764,  764,  764,  782,  795,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  796,  803,

      782,  782,  782,  782,  782,  782,  783,  812,  783,  783,
      783,  783,  783,  783,  783,  783,  783,    0,  787,  790,
      813,  790,  820,    0,    0,  787,  782,  782,  782,  782,
      782,  782,  784,  812,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  787,  790,  813,  790,  820,  791,
      791,  787,  791,  791,  791,  791,  791,  791,    0,  800,
      791,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      791,  791,  805,  805,  806,  806,  821,  806,  806,  806,
      806,  806,  806,  807,  807,  806,  811,  811,  814,  814,
      816,  815,  822,  826,  826,  806,  806,  816,  805,  805,

      807,  824,  821,    0,  827,  814,  830,  832,  834,  807,
      807,  815,  811,  811,  814,  814,  816,  815,  822,  826,
      826,  824,  825,  816,  833,  833,  807,  824,  839,  825,
      827,  814,  830,  832,  834,  842,  835,  815,  841,  846,
        0,    0,    0,    0,    0,    0,    0,  824,  825,    0,
      833,  833,    0,    0,  839,  825,  835,    0,  841,    0,
        0,  842,  835,    0,  841,  846,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  835,    0,  841,  858,  858,  858,  858,  859,
      859,  859,  859,  860,  860,  860,  860,  861,    0,  861,

      861,  862,  862,  862,  862,  863,    0,  863,  863,  864,
      864,  866,  866,  867,  867,  868,  868,  869,  869,  870,
      870,  871,  871,  872,  872,  873,    0,  873,  873,  874,
      874,  875,  875,  876,  876,  877,  877,  878,  878,  879,
      879,  880,  880,  881,  881,  882,  882,  883,  883,  884,
      884,  885,  885,  886,  886,  887,  887,  888,  888,  889,
      889,  890,  890,  891,  891,  893,  893,  894,  894,  896,
      896,  897,  897,  900,  900,  901,  901,  903,    0,  903,
      903,  904,    0,  904,  904,  905,  905,  908,    0,  908,
      908,  909,    0,  909,  909,  910,  910,  911,  911,  912,

      912,  914,  914,  915,  915,  916,  916,  918,  918,  919,
      919,  920,  920,  922,  922,  923,  923,  924,  924,  926,
      926,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857

    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[105] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 1950 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 2060 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 858 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5322 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 60 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 62 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::ACCEPT_UNKNOWN_FQDN_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::EXTRA_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::DS_LITE_TUNNEL_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 108 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ return SrvParser::CLIENT_CLASS_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 122 "SrvLexer.l"
{ return SrvParser::MATCH_IF_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{ return SrvParser::EQ_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
{ return SrvParser::AND_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 125 "SrvLexer.l"
{ return SrvParser::OR_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 126 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_DATA_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_EN_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_DATA_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 130 "SrvLexer.l"
{ return SrvParser::ALLOW_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 131 "SrvLexer.l"
{ return SrvParser::DENY_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
{ return SrvParser::SUBSTRING_; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
{ return SrvParser::CONTAIN_; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 136 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 137 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 138 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 139 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 141 "SrvLexer.l"
;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 143 "SrvLexer.l"
;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 145 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno; 
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 150 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 151 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 152 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 91:
YY_RULE_SETUP
#line 159 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 168 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 177 "SrvLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 186 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 195 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 204 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 213 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 225 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 232 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 253 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd then no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 285 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd; 
      YYABORT; 
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 295 "SrvLexer.l"
{ 
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) { 
        Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd; 
        YYABORT; 
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 304 "SrvLexer.l"
{ return yytext[0]; } 
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 307 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 2808 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 858 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 858 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 857);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 307 "SrvLexer.l"




