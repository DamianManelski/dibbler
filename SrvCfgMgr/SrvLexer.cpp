#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 104
#define YY_END_OF_BUFFER 105
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[859] =
    {   0,
        1,    1,    0,    0,    0,    0,  105,  103,    2,    1,
        1,  103,   86,  103,  103,  102,  102,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
       90,   90,  104,    1,    1,    1,    0,   98,   86,    0,
       98,   88,   87,  102,    0,    0,  101,    0,   95,   70,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   83,   99,   99,
       72,   99,   99,   99,   99,   99,   99,   99,   99,   99,

       16,   17,   99,   99,   99,   99,   99,   99,   99,   99,
       89,   87,  102,    0,    0,   94,  100,   93,   93,   99,
       99,   99,   99,   71,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   82,  102,    0,
        0,    0,   92,   92,    0,   93,    0,   93,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   78,   99,   99,
       99,   99,   29,   99,   99,   40,   99,   99,   99,   99,

       99,   99,   99,    0,   99,   99,   99,   99,   99,   99,
       22,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   84,   99,   99,   99,   99,  102,    0,
        0,    0,    0,   92,    0,   92,    0,   93,   93,   93,
       93,   99,   99,   99,   99,   77,   99,   99,    4,   99,
       99,   99,   99,   99,   99,   99,   85,   99,    3,   99,
       99,   99,   99,   99,   99,   99,    0,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,    7,   99,   23,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,    0,    0,    0,    0,   92,   92,   92,   92,    0,

       93,   93,   93,    0,   93,   99,   99,   99,   99,   99,
       99,   99,   99,   28,   99,   99,   99,   35,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,    0,
        0,   99,   99,   99,   33,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   81,   99,   99,   99,   99,
       99,   99,   99,    0,    0,    0,   92,   92,   92,    0,
       92,    0,    0,   93,   93,   93,   93,   99,   99,   31,
       99,   99,   99,   99,   99,    0,   99,   99,   80,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,    0,    0,   99,   99,   99,   99,   99,   50,

       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       20,   99,   99,   99,    0,    0,    0,    0,    0,   92,
       92,   92,   92,    0,   93,   93,   93,    0,   93,   99,
       99,   99,   99,   99,   99,   99,   99,   99,    0,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   46,   99,   12,   10,   69,    0,    0,   99,
       99,   99,   48,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,    5,   99,   99,   99,   13,    0,    0,
        0,   92,   92,   92,    0,   92,   97,   93,   93,   93,
       93,   99,   99,   99,   99,   99,   99,   99,   99,   99,

        0,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   11,    0,    0,   99,   99,   99,
       49,   99,   99,   99,   99,   30,   99,   99,    6,   79,
       37,   99,   99,    0,    0,    0,   96,   92,   92,   92,
       92,   93,   93,   93,    0,   93,   99,   99,   99,   99,
       99,   99,   99,   47,   99,    0,   99,   99,   99,   99,
       99,   99,   34,   99,   99,   32,   99,   99,   99,    0,
        0,   43,   42,   36,   99,   21,   99,   99,   39,   38,
       99,   99,    0,    0,   92,   92,   92,    0,   92,   93,
       93,   93,   93,   99,   14,   99,   52,   99,   99,   57,

       99,    0,   99,   99,   99,   99,   60,   99,   99,   99,
       99,   99,   99,   45,   44,   99,   99,   99,   99,   51,
        0,    0,    0,   92,   92,   92,   92,   93,   93,   93,
        0,   93,   99,   99,   59,   99,   99,    0,   68,   99,
       99,   99,   61,   99,   53,   99,   99,    8,   99,   24,
       99,   99,    0,    0,   92,   92,   92,    0,   92,   93,
       93,   93,   93,   99,   99,   58,   99,    0,   99,   99,
       99,   99,   99,   99,   55,   99,   99,   99,   99,    0,
        0,    0,   92,   92,   92,   92,   93,   93,   93,    0,
       93,   99,   99,   99,    0,   99,   99,   99,   99,   54,

       99,   99,   99,   15,   19,    0,   91,   94,   92,   92,
       92,    0,   92,   93,   93,   93,   93,   99,   99,   26,
        0,    0,   99,   99,   99,   62,   99,   25,   99,   99,
        0,   91,    0,   92,   92,   92,   92,   92,   93,   93,
       93,    0,   93,   99,   99,    0,    0,   27,   99,   99,
       63,   99,   99,   99,   99,   99,   91,   94,   92,    0,
       92,   92,   92,   92,   93,   93,   93,   56,   99,    0,
        0,   99,   99,   99,   99,   99,   99,   99,   18,   91,
       92,   92,   92,   92,   93,   93,   93,   99,    0,    0,
       99,   99,   64,   65,   66,   67,    9,   92,   92,    0,

       92,   92,   93,   41,    0,    0,   99,   99,   92,   92,
       93,    0,    0,    0,   99,   99,   99,   92,   92,    0,
        0,    0,    0,   73,   99,   99,   99,   73,   92,   92,
        0,   75,    0,   99,   75,   99,   92,   92,    0,    0,
       74,   99,   74,   92,   92,   76,   76,   92,   92,    0,
       92,   92,   92,   92,    0,   92,   92,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
       23,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        1,    1,    1,    1,    1,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    1,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[928] =
    {   0,
        0,    0,  807,  806,    0,    0,  813, 5325, 5325,   73,
       75,  807,    0,  804,   72,   72,   34,  788,  750,  136,
      186,  233,  280,   71,  208,  338,   38,   73,  197,   89,
      263,  175,  235,  350,  340,  391,   67,  357,  180,  256,
     5325,  760, 5325,  111,  137,  222,  766, 5325,    0,  763,
      762, 5325,    0,  449,  746,  468, 5325,    0,  494, 5325,
       61,  537,   86,   89,  183,  193,  343,  221,  226,  390,
      272,  229,  373,  269,  380,  270,  386,  382,  258,  489,
      384,  409,  536,  402,  461,  524,  527,  276,  534,  533,
      279,  526,  381,  556,  568,  578,  584,  576,  601,  592,

      454,  539,  606,  585,  574,  591,  621,  615,  616,  622,
     5325,    0,  680,  699,  744,  725,    0,  770,  744,  813,
      599,  591,  805,  619,  804,  646,  802,  808,  678,  803,
      827,  806,  835,  845,  855,  856,  844,  730,  848,  857,
      867,  859,  863,  850,  878,  914,  892,  896,  908,  900,
      902,  906,  911,  927,  915,  939,  931,  924,  942,  945,
      964,  960,  963,  966,  967,  975,  961,  640, 1033,  788,
      714,  707, 1080, 1052, 1061, 1125, 1168, 1099, 1211,  717,
     1146,  952, 1093, 1163, 1199, 1085, 1210,  775, 1200, 1203,
     1214, 1242,  851, 1208, 1248,  912, 1209, 1253, 1129, 1215,

     1244, 1254, 1252,  718, 1266, 1257, 1267, 1259, 1298, 1294,
      959, 1300, 1277, 1307, 1291, 1297, 1318, 1329, 1325, 1311,
     1306, 1343, 1347, 1316, 1339, 1357, 1352, 1370, 1415,  705,
      704,  703, 1428, 1439, 1482, 1458, 1501, 1527, 1546, 1572,
     1591,  702, 1349, 1574, 1356, 1341, 1585, 1460, 1514, 1571,
     1584, 1587, 1589, 1614, 1591, 1604, 1350, 1593, 1622, 1606,
     1623, 1621, 1641, 1637, 1644, 1639, 1644, 1652, 1645, 1654,
     1643, 1676, 1666, 1679, 1661, 1660, 1675, 1368, 1693, 1381,
     1689, 1697, 1704, 1708, 1691, 1710, 1706, 1698, 1746, 1728,
     1735,  701,  666,  665, 1793, 1806, 1825, 1851, 1870, 1467,

     1896,  659, 1908, 1951, 1927, 1793, 1850, 1729, 1929, 1942,
     1953, 1940, 1469, 2023, 1948, 1838, 1748, 1506, 1993, 1952,
     1990, 2000, 1945, 1969, 2004, 1997, 2011, 2007, 2017, 1531,
     1729, 2014, 1950, 2012, 1726, 2015, 2042, 2036, 2045, 2052,
     2044, 2080, 2056, 2050, 2065, 1731, 2063, 2059, 2064, 2067,
     2081, 2095, 2099,  658,  657, 2157, 2168,  653, 2180, 2223,
     2199, 2242, 2268, 2279, 2298, 2324, 2343, 2345, 2097, 1785,
     2321, 2326, 2202, 2122, 2323, 2078, 2356, 2327, 2086, 2368,
     2340, 2258, 2359, 2350, 2378, 2388, 2391, 2393, 2395, 2396,
     2402, 2390, 2096, 2162, 2420, 2407, 2409, 2413, 2424, 2184,

     2432, 2444, 2445, 2442, 2460, 2447, 2431, 2459, 2463, 2469,
     2221, 2477, 2481, 2475,  652,  651,  650, 2539, 2550, 2561,
     2580, 2606, 2625, 2589, 2651,  648, 2663, 2706, 2682, 2492,
     2692, 2700, 2605, 2642, 2710, 2467, 2696, 2695, 2282, 2706,
     2725, 2744, 2737, 2739, 2743, 2746, 2741, 2742, 2762, 2747,
     2738, 2774, 2392, 2786, 2548, 2593, 2749, 2772, 2752, 2792,
     2797, 2798, 2757, 2802, 2819, 2805, 2799, 2804, 2811, 2822,
     2832, 2829, 2840, 2809, 2849, 2854, 2843, 2834,  647,  645,
     2912, 2923,  609, 2935, 2978, 2954, 2963, 3023, 2997, 3068,
     3042, 2976, 2850, 3057, 2965, 3063, 2847, 3061, 3072, 3058,

     2851, 3085, 3064, 3069, 3086, 3101, 3116, 3100, 2851, 3103,
     3115, 3104, 3113, 3140, 3010, 3119, 3124, 3117, 3121, 3135,
     3119, 3146, 3154, 3156, 3162, 3149, 3159, 3160, 3151, 3153,
     3155, 3184, 3187,  608,  602,  597, 3229, 3247, 3266, 3292,
     3311, 3337,  563, 3349, 3392, 3368, 3167, 3378, 3386, 3383,
     3370, 3291, 3388, 3169, 3393, 3187, 3387, 3226, 3406, 3434,
     3433, 3430, 3189, 3427, 3441, 3208, 3431, 3429, 3436, 3252,
     3428, 3426, 3428, 3435, 3470, 3437, 3476, 3481, 3440, 3445,
     3469, 3492,  560,  559, 3539,  552, 3552, 3595, 3571, 3640,
     3614, 3685, 3659, 3680, 3472, 3479, 3475, 3678, 3582, 3477,

     3688, 3484, 3675, 3683, 3682, 3531, 3573, 3684, 3686, 3716,
     3727, 3730, 3732, 5325, 5325, 3734, 3718, 3728, 3735, 3593,
      521,  519,  518, 3795, 3814, 3840, 3859, 3885,  517, 3897,
     3940, 3916, 3724, 3729, 3627, 3918, 3839, 3725, 3725, 3935,
     3929, 3938, 3726, 3943, 3774, 3954, 3957, 3827, 3958, 3782,
     3940, 3971,  516,  515, 4029,  513, 4041, 4084, 4060, 4129,
     4103, 4174, 4148, 3933, 4134, 3994, 4163,  524, 4082, 4162,
     4186, 4177, 4174, 4168, 4045, 4173, 4171, 4178, 4214,  510,
      508,  507, 4274, 4246, 4319, 4258, 4293,  506, 4364, 4407,
     4338, 4359, 4272, 4402, 4411, 4396, 4423, 4332, 4424, 4063,

     4426, 4406, 4411, 4116, 4175,  505,  504,    0, 4484,  503,
     4496, 4539, 4515, 4584, 4558, 4629, 4603, 4618, 4597, 4179,
     4219, 4216, 4632, 4526, 4622, 4253, 4654, 4261, 4646, 4627,
      475,  474,  473,  472, 4714, 4690, 4759, 4733, 4778,  471,
     4804,    0, 4823, 4647, 4656, 4344, 4417, 4407, 4757, 4807,
     4408, 4830, 4518, 4475, 4818, 4819,  470, 5325,  468,    0,
     4865,  433, 4890, 4909, 4935, 4954,    0, 4438, 4822, 4539,
     4667, 4823, 4869, 4701, 4693, 4738, 4650, 4827, 4746,  417,
      415,  414, 4980, 4999, 5025,  364,    0, 4985, 4822,    0,
     4981, 5052, 4826, 4868, 4888, 4922, 4932,  358,  357,    0,

     5052, 5325,    0, 4933,    0, 5049, 5077, 5060,  355,  353,
     5325, 5063, 4987, 4987, 5065, 5071, 5057,  346,  339,    0,
     5002, 5043, 5053, 5325, 5081, 5089, 5054, 5064,  325,  323,
     5067, 5325, 5087, 5085, 5068, 5116,  314,  309,    0, 5108,
     5325, 5118, 5095,  307,  306, 5325, 5099,  303,  276,    0,
      267,  265,  260,  259,    0,  253,  229, 5325, 5188, 5192,
     5196, 5200, 5204, 5208, 5210,  233, 5212, 5214, 5216, 5218,
     5220, 5222, 5224, 5228, 5230, 5232, 5234, 5236, 5238, 5240,
     5242, 5244, 5246, 5248, 5250, 5252, 5254, 5256, 5258, 5260,
     5262, 5264,  231, 5266, 5268,  230, 5270, 5272,  228,  219,

     5274, 5276,  217, 5280, 5284, 5286,  214,  212, 5290, 5294,
     5296, 5298, 5300,  145, 5302, 5304, 5306,  131, 5308, 5310,
     5312,  117, 5314, 5316, 5318,   80, 5320
    } ;

static yyconst flex_int16_t yy_def[928] =
    {   0,
      858,    1,  859,  859,  860,  860,  858,  858,  858,  858,
      858,  861,  862,  863,  858,  858,   16,  858,  858,  858,
       20,   20,   22,   22,   22,   22,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      858,  858,  858,  858,  858,  858,  861,  858,  862,  863,
      858,  858,  864,  858,  865,   54,  858,  866,  858,  858,
       26,   22,   62,   62,   26,   26,   26,   26,   62,   26,
       26,   62,   26,   26,   26,   26,   26,   26,   62,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      858,  864,  858,  113,  867,  858,  866,  858,  118,   62,
      120,  120,   26,   26,   26,  120,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  858,  169,
      868,  869,  858,  173,  858,  858,  858,  176,  120,  179,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,  858,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  170,  170,
      870,  871,  858,  858,  858,  234,  858,  858,  238,  858,
      240,  179,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,  858,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  858,  872,  873,  858,  858,  296,  858,  298,  858,

      858,  858,  858,  858,  303,   26,   26,   26,   26,   26,
       26,   26,   26,  874,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,  858,
      858,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  875,  876,  858,  858,  858,  858,  858,
      359,  858,  858,  858,  364,  858,  366,   26,   26,   26,
       26,   26,   26,   26,   26,  858,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  858,  858,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  858,  877,  878,  858,  858,  858,
      420,  858,  422,  858,  858,  858,  858,  858,  427,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  858,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  858,  858,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  879,  880,
      858,  858,  858,  858,  858,  484,  858,  858,  488,  858,
      490,   26,   26,   26,   26,   26,   26,   26,   26,   26,

      858,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  858,  858,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  858,  881,  882,  858,  858,  538,  858,
      540,  858,  858,  858,  858,  544,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  858,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,  858,
      858,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  883,  884,  858,  858,  858,  858,  587,  858,
      590,  858,  592,   26,   26,   26,   26,   26,   26,   26,

       26,  858,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  858,  858,   26,   26,   26,   26,   26,
      858,  885,  886,  858,  624,  858,  626,  858,  858,  858,
      858,  630,   26,   26,   26,   26,   26,  858,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  887,  888,  858,  858,  858,  858,  657,  858,
      660,  858,  662,   26,   26,   26,   26,  858,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,  858,
      889,  890,  858,  683,  858,  685,  858,  858,  858,  858,
      689,   26,   26,   26,  858,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,  891,  892,  893,  858,  858,
      858,  858,  711,  858,  714,  858,  716,   26,   26,   26,
      858,  858,   26,   26,   26,   26,   26,   26,   26,   26,
      858,  894,  858,  895,  858,  735,  858,  737,  858,  858,
      858,  896,  741,   26,   26,  858,  858,   26,   26,   26,
       26,   26,   26,   26,   26,   26,  897,  858,  898,  899,
      858,  858,  858,  763,  858,  765,  900,   26,   26,  858,
      858,   26,   26,   26,   26,   26,   26,   26,   26,  858,
      901,  902,  858,  783,  858,  858,  903,   26,  858,  904,
       26,  905,   26,   26,   26,   26,   26,  858,  906,  907,

      858,  858,  908,   26,  909,  858,  910,   26,  911,  912,
      858,  858,  858,  858,   26,   26,   26,  858,  913,  914,
      858,  858,  858,  858,   26,   26,   26,   26,  915,  916,
      858,  858,  858,   26,   26,   26,  858,  917,  918,  858,
      858,   26,   26,  919,  920,  858,   26,  858,  921,  922,
      923,  924,  858,  925,  926,  927,  858,    0,  858,  858,
      858,  858,  858,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  858,  858,  858,  858,  858,

      858,  858,  858,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  858,  858
    } ;

static yyconst flex_int16_t yy_nxt[5401] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   27,   27,   29,   30,   31,   32,   33,   27,
       34,   35,   36,   37,   38,   39,   27,   40,   27,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   27,   27,
       29,   30,   31,   32,   33,   27,   34,   35,   36,   37,
       38,   39,   27,   40,   27,   44,   45,   46,   45,   52,
      858,   61,  738,   53,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   55,   62,   56,   56,   56,   56,   56,

       56,   82,   57,  106,   61,   61,  858,   61,   61,   83,
       61,  121,   86,   44,   45,  122,   61,   78,   58,  852,
       62,   56,   56,   56,   56,   56,   56,   82,   57,  106,
       61,   61,   61,  845,   61,   83,   61,  121,   86,   46,
       45,  122,   61,   78,   58,   61,   61,  830,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   55,   61,   62,
       62,   63,   64,   62,   62,   61,   65,   61,   61,   61,
       66,   61,   67,   61,   61,   61,   61,   61,   61,   68,
       61,   61,   61,   61,   61,   62,   62,   63,   64,   62,
       62,   61,   65,   61,   61,   61,   66,   61,   67,   61,

       61,   61,   61,   61,   61,   68,   61,   61,   61,   61,
       61,   62,   62,   90,  811,   91,  810,  109,   61,  803,
       61,  787,   61,   61,   44,   45,   61,  123,   84,   61,
      782,   79,  767,  734,   85,  117,   61,   62,   62,   90,
       61,   91,   61,  109,   61,   61,   61,   80,   61,   61,
      855,  126,   61,  123,   84,   61,   69,   79,   62,   62,
       85,   92,   61,  125,   61,  130,   61,   70,   61,   61,
       71,   61,   93,   80,  855,   94,   61,  126,   61,  134,
      855,  850,   69,  110,   62,   62,  855,   92,  850,  125,
       61,  130,  137,   70,   87,   61,   71,  850,   93,   61,

       88,   94,   61,   62,   61,   89,   61,   72,  129,  110,
      132,   73,   61,   61,   61,   61,   74,   75,  137,   61,
       87,   76,   61,   77,  839,   61,   88,  850,  839,   62,
      839,   89,   61,   72,  129,  820,  132,   73,   61,   61,
       61,   61,   74,   75,  839,   61,  820,   76,   61,   77,
       61,   61,   61,   61,   61,   61,   61,   61,   61,  858,
      820,   61,   61,   61,   61,   61,   61,  800,   61,  124,
       97,   98,   61,   95,  820,   61,  800,   96,  800,  760,
      107,   81,   99,  100,  108,  742,   61,   61,   61,   61,
       61,   61,   61,   61,   61,  124,   97,   98,   61,   95,

       61,   61,  131,   96,  101,  102,  107,   81,   99,  100,
      108,  139,   61,  127,  103,  133,   61,  135,  150,   61,
      136,  128,  104,   61,   61,   61,   61,   61,  131,   61,
      143,  105,  140,   61,   61,  800,  760,  139,  733,  127,
      103,  133,   61,  135,  150,   61,  136,  128,  104,   61,
       61,   61,   61,   61,  712,   61,  143,  105,  140,   61,
       61,  113,  113,  113,  113,  113,  113,  113,  113,  113,
       55,   61,  114,  114,  114,  114,  114,  114,   61,   57,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  760,
      144,  733,  690,  760,  758,  733,  682,   61,  114,  114,

      114,  114,  114,  114,   61,   57,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  138,  144,  119,  119,  119,
      119,  119,  119,   61,  658,  733,  682,  631,  708,  682,
       61,  623,   61,  695,  588,  149,  682,  623,  545,  116,
      623,  138,  536,  119,  119,  119,  119,  119,  119,  120,
      120,  120,  120,  120,  120,  120,  120,  120,   61,  141,
      120,  120,  120,  120,  120,  120,  145,   61,  146,   61,
       61,   61,  147,  485,   61,  148,   61,   61,  142,   61,
      623,  536,   61,  151,  428,  141,  120,  120,  120,  120,
      120,  120,  145,   61,  146,   61,   61,   61,  147,   61,

       61,  148,   61,   61,  142,   61,  152,  156,   61,  151,
      153,   61,  154,  155,  157,  161,  160,  163,  116,   61,
      162,   61,  164,  536,  158,   61,  180,   61,   61,  417,
      360,  181,  152,  156,   61,   61,  153,   61,  154,  155,
      157,  159,  160,  163,   61,   61,  162,   61,  164,   61,
      158,  166,  180,   61,   61,  165,  167,  181,   61,   61,
       61,   61,   61,  168,   61,   61,  536,  159,  417,  304,
       61,  116,  417,  294,  235,   61,  184,  166,  417,  294,
      177,  165,  167,   61,   61,   61,  116,  294,   61,  168,
       61,   61,  169,  169,  169,  169,  169,  169,  169,  169,

      169,   55,  184,  170,  170,  170,  170,  170,  170,   61,
       57,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      187,   61,  172,  858,  294,  172,  858,  267,  116,  170,
      170,  170,  170,  170,  170,  172,   57,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  187,   61,  174,  174,
      174,  174,  174,  174,  858,  243,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  172,  196,  116,   50,   51,
       48,  111,   60,   61,  174,  174,  174,  174,  174,  174,
      175,  243,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  177,  196,  178,  178,  178,  178,  178,  178,   61,

      230,  230,  230,  230,  230,  230,  230,  230,  230,   59,
       51,   48,  858,   42,   42,  190,  858,  858,   61,  178,
      178,  178,  178,  178,  178,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  183,  186,  179,  179,  179,  179,
      179,  179,  182,  185,   61,   61,   61,   61,   61,   61,
      188,   61,  858,  858,  189,  858,  858,  858,  191,  202,
      183,  186,  179,  179,  179,  179,  179,  179,  182,  185,
       61,   61,   61,   61,   61,   61,  188,   61,   61,  192,
      189,  193,  198,  194,  191,  195,  200,   61,   61,  197,
      201,   61,  199,   61,   61,  858,   61,  858,   61,   61,

       61,  206,   61,  203,   61,  192,   61,  193,  198,  194,
       61,  195,  200,   61,   61,  197,  201,   61,  199,   61,
       61,   61,  204,  205,   61,   61,   61,  207,   61,  203,
      212,  858,   61,  208,  211,   61,   61,  213,  214,   61,
      218,  858,  209,   61,  858,   61,  210,   61,  858,   61,
      215,   61,  216,  207,   61,   61,  212,   61,   61,  208,
      211,   61,  858,  213,  214,   61,  219,   61,  209,   61,
       61,   61,  210,  220,   61,   61,  215,   61,  216,  217,
       61,   61,   61,   61,   61,   61,  221,  223,   61,  222,
      224,  225,  219,   61,  228,   61,   61,  246,  226,  220,

       61,  227,   61,   61,   61,  217,   61,   61,   61,   61,
       61,   61,  221,  223,   61,  222,  224,  225,   61,  858,
      228,   61,  858,  246,  226,  858,  858,  227,   61,   61,
       61,  858,   61,   61,  858,   61,   61,  858,  858,  858,
      858,  858,  858,  858,   61,  229,  229,  229,  229,  229,
      229,  229,  229,  229,   55,  858,  230,  230,  230,  230,
      230,  230,  858,   57,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  230,  230,  230,  230,  230,  230,  858,   57,
      233,  858,  234,  234,  234,  234,  234,  234,  234,  234,

      234,  235,  247,  236,  236,  236,  236,  236,  236,  858,
      858,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      858,  250,  858,  858,  858,  858,  858,  858,   61,  236,
      236,  236,  236,  236,  236,  175,   61,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  177,  250,  239,  239,
      239,  239,  239,  239,   61,  244,  858,  858,  858,  858,
      858,  858,   61,  858,  858,  858,  858,  858,  858,  858,
      858,  260,   61,  245,  239,  239,  239,  239,  239,  239,
      240,  240,  240,  240,  240,  240,  240,  240,  240,   61,
      248,  241,  241,  241,  241,  241,  241,  260,   61,  245,

      858,  858,  858,  858,  858,  858,   61,  858,  858,  858,
      858,  858,  858,  858,  858,   61,  248,  241,  241,  241,
      241,  241,  241,  242,  242,  242,  242,  242,  242,  242,
      242,  242,   61,  251,  242,  242,  242,  242,  242,  242,
      249,  252,   61,   61,  253,  254,   61,  858,  256,  858,
      258,   61,   61,   61,  858,  261,  858,   61,   61,  251,
      242,  242,  242,  242,  242,  242,  249,  252,   61,   61,
      253,  254,   61,  255,  256,  257,  258,   61,   61,   61,
      259,  261,  266,   61,   61,   61,  262,   61,  263,  264,
      265,   61,  268,  272,  858,   61,   61,   61,  270,  255,

       61,  257,   61,  276,  271,  858,  259,  269,  266,   61,
       61,   61,  262,   61,  263,  264,  265,   61,  268,  272,
       61,   61,   61,   61,  270,  273,   61,  275,   61,  276,
      271,  274,  277,  269,   61,   61,   61,   61,  278,  279,
       61,   61,  858,   61,  858,  280,   61,  284,  285,   61,
       61,  273,  283,  275,   61,  281,  287,  274,  277,   61,
       61,   61,  288,   61,  278,  279,   61,   61,   61,   61,
      282,  280,   61,  284,  285,   61,   61,  286,  283,  291,
       61,  281,   61,  289,   61,   61,   61,   61,  288,  290,
       61,  306,   61,   61,   61,   61,  282,  308,   61,   61,

       61,  858,  858,  286,  858,  858,  858,  858,   61,  289,
       61,   61,   61,   61,  858,  290,   61,  306,   61,   61,
      858,   61,  858,  308,   61,   61,   61,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  858,   61,  858,   61,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  233,
       61,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      235,  858,  297,  297,  297,  297,  297,  297,  858,  312,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  297,  297,
      297,  297,  297,  297,  298,  298,  298,  298,  298,  298,

      298,  298,  298,   61,  375,  299,  299,  299,  299,  299,
      299,  300,   61,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  858,  313,  858,  858,  858,  858,  858,   61,
      375,  299,  299,  299,  299,  299,  299,  175,   61,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  177,   61,
      302,  302,  302,  302,  302,  302,  858,   61,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  858,  393,  858,
      858,  858,  858,  858,  858,   61,  302,  302,  302,  302,
      302,  302,  175,   61,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  304,  393,  305,  305,  305,  305,  305,

      305,  858,  321,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  307,  314,   61,  315,  317,   61,  309,  310,
      311,  305,  305,  305,  305,  305,  305,   61,   61,  316,
       61,  322,   61,  319,   61,  320,   61,  323,  307,  314,
       61,  315,  317,   61,  309,  310,  311,   61,  329,   61,
      318,  324,  325,   61,   61,  316,   61,   61,   61,  319,
       61,  320,   61,  323,   61,   61,   61,  328,  326,  340,
      330,  858,  333,   61,  327,   61,  318,  324,  325,  335,
       61,  334,   61,   61,   61,  331,   61,   61,   61,  332,
       61,   61,   61,  328,  326,   61,  330,   61,  333,  336,

      327,  339,  337,   61,   61,  335,   61,  334,   61,   61,
       61,  331,   61,   61,   61,  332,  338,  341,   61,   61,
      342,   61,   61,   61,  344,  336,  343,  339,  337,   61,
       61,  347,   61,  348,   61,   61,   61,  346,  345,  350,
       61,   61,  338,  341,   61,   61,  342,   61,   61,   61,
      344,   61,  343,   61,  349,  351,  394,  347,   61,  348,
       61,  353,   61,  346,  345,  350,   61,   61,  352,   61,
      370,   61,   61,   61,   61,   61,  858,   61,   61,   61,
      349,  858,  394,  858,  858,  858,  858,  353,  381,   61,
      858,   61,  858,  858,  352,   61,  370,   61,   61,  858,

       61,  858,  368,  356,   61,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  381,   61,  233,   61,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  235,   61,  358,
      358,  358,  358,  358,  358,  858,   61,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  858,  380,  858,  858,
      858,  858,  858,  858,   61,  358,  358,  358,  358,  358,
      358,  233,   61,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  360,  369,  361,  361,  361,  361,  361,  361,
      858,   61,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  858,  858,   61,  858,  858,  858,  858,  858,  369,

      361,  361,  361,  361,  361,  361,  175,   61,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  177,  175,   61,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  304,
      858,  365,  365,  365,  365,  365,  365,  858,  858,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  858,  858,
      858,  858,  858,  858,  858,  858,  371,  365,  365,  365,
      365,  365,  365,  366,  366,  366,  366,  366,  366,  366,
      366,  366,   61,  372,  367,  367,  367,  367,  367,  367,
      373,  374,  371,   61,  379,   61,  858,  383,   61,  386,
      396,   61,  387,   61,  858,   61,   61,  858,   61,  372,

      367,  367,  367,  367,  367,  367,  373,  374,  858,   61,
      379,   61,   61,  383,   61,  386,  396,   61,  387,   61,
      382,   61,   61,  376,  376,  384,  376,  376,  376,  376,
      376,  376,  377,   61,  376,  385,   61,  390,   61,  388,
       61,  389,  391,   61,  376,  376,  382,   61,  392,  395,
       61,  384,  397,  403,   61,   61,  398,   61,   61,   61,
       61,  385,   61,  390,  858,  388,   61,  389,  391,   61,
      400,  399,  401,   61,  392,  395,   61,  402,  397,   61,
       61,   61,  398,   61,   61,   61,   61,   61,   61,  404,
      406,  405,  407,   61,  408,   61,  400,  399,  401,   61,

      409,  410,   61,  402,  413,   61,   61,   61,   61,  411,
       61,   61,  858,   61,   61,  412,  406,  405,  407,   61,
      408,   61,  439,   61,   61,   61,  409,  410,   61,   61,
      414,  458,   61,   61,   61,  411,   61,  433,   61,  858,
       61,  412,   61,  858,  858,  858,  858,  858,  439,   61,
       61,  858,  858,  437,  858,   61,  414,  458,  858,  858,
      858,  858,  858,  433,   61,   61,   61,  858,   61,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  233,  437,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  235,
      233,   61,  420,  420,  420,  420,  420,  420,  420,  420,

      420,  360,  459,  421,  421,  421,  421,  421,  421,  858,
      858,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      858,  858,  858,  858,  858,  858,  858,   61,  459,  421,
      421,  421,  421,  421,  421,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  436,   61,  423,  423,  423,  423,
      423,  423,  424,   61,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  858,   61,  858,  858,  447,  858,  858,
      436,   61,  423,  423,  423,  423,  423,  423,  175,  858,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  175,
       61,  425,  425,  425,  425,  425,  425,  425,  425,  425,

      304,   61,  426,  426,  426,  426,  426,  426,  858,  501,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  858,
      858,  858,  858,  858,  858,  858,  858,   61,  426,  426,
      426,  426,  426,  426,  175,  501,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  428,  438,  429,  429,  429,
      429,  429,  429,  858,  435,  429,  429,  429,  429,  429,
      429,  429,  429,  429,   61,  858,   61,  858,  434,   61,
       61,  442,  438,  429,  429,  429,  429,  429,  429,  430,
      435,  440,  431,   61,  446,  858,  448,  449,  432,  858,
       61,  441,   61,   61,  434,   61,   61,  442,  443,   61,

      442,  450,   61,  858,  444,  430,  445,  440,  431,   61,
      446,   61,  448,  449,  432,  451,  452,  441,  457,   61,
      453,   61,  454,  455,  443,   61,  442,  450,   61,  456,
      444,   61,  445,   61,   61,   61,   61,   61,   61,   61,
      858,  451,  452,  460,  457,   61,  453,   61,  454,  455,
       61,  461,   61,  462,  463,  456,   61,   61,  465,   61,
       61,   61,   61,   61,   61,   61,  464,   61,  466,  460,
      468,   61,  472,  469,   61,   61,   61,  461,   61,  462,
      463,  467,   61,  470,  465,   61,  858,   61,   61,   61,
       61,  471,  464,   61,  466,  473,  468,  498,  472,  469,

       61,   61,   61,   61,  474,  475,   61,  467,  476,  470,
       61,   61,   61,   61,   61,  478,   61,  471,   61,  492,
       61,  473,  477,  498,   61,  858,  858,  858,   61,   61,
      474,  475,   61,  858,  476,   61,   61,  858,   61,  858,
      858,  478,  858,  858,   61,  492,   61,  858,  477,  481,
       61,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      233,   61,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  233,  858,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  360,  858,  483,  483,  483,  483,  483,  483,
      858,   61,  483,  483,  483,  483,  483,  483,  483,  483,

      483,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      483,  483,  483,  483,  483,  483,  233,   61,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  485,  495,  486,
      486,  486,  486,  486,  486,  858,   61,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  858,  858,   61,  858,
      858,  496,  858,  858,  495,  486,  486,  486,  486,  486,
      486,  175,   61,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  304,  175,   61,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  428,   61,  489,  489,  489,  489,
      489,  489,  858,  858,  489,  489,  489,  489,  489,  489,

      489,  489,  489,  858,  858,  858,  858,  858,  858,  858,
      858,   61,  489,  489,  489,  489,  489,  489,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  858,  493,  491,
      491,  491,  491,  491,  491,   61,  494,  497,   61,   61,
      502,  500,  858,   61,  499,  858,  858,  513,  503,   61,
      858,  858,  858,   61,  493,  491,  491,  491,  491,  491,
      491,   61,  494,  497,   61,   61,  502,  500,   61,   61,
      499,  504,  505,  508,  503,   61,  506,  507,  510,   61,
       61,   61,   61,  509,   61,   61,   61,   61,  511,   61,
       61,  858,   61,  512,   61,  516,  517,  504,  505,  508,

       61,  514,  506,  507,  510,   61,   61,   61,   61,  509,
       61,   61,   61,   61,  511,   61,   61,   61,   61,  512,
      515,  516,  517,  518,  519,  520,   61,  514,  522,   61,
      523,   61,  521,  858,  524,   61,  858,  526,  525,  858,
       61,   61,   61,   61,  858,   61,  515,   61,   61,  518,
      519,  520,   61,  527,   61,   61,  523,  858,  521,  528,
      524,   61,   61,  526,  525,   61,   61,   61,   61,  530,
      529,   61,   61,   61,   61,   61,  531,   61,   61,  527,
       61,  533,  532,   61,  548,  528,   61,  556,   61,  552,
       61,   61,   61,   61,  564,  530,  529,   61,   61,  858,

      858,   61,  531,   61,  858,  858,  858,  533,  532,   61,
      548,  858,   61,  556,  858,  552,   61,  858,   61,   61,
      564,  858,  858,   61,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  233,  858,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  360,  233,  858,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  485,  858,  539,  539,
      539,  539,  539,  539,  858,  858,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  539,  539,  539,  539,  539,  539,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  547,

      550,  541,  541,  541,  541,  541,  541,  858,   61,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  858,   61,
      858,  858,  858,  858,  858,  547,  550,  541,  541,  541,
      541,  541,  541,  175,   61,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  428,   61,  543,  543,  543,  543,
      543,  543,  858,   61,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  858,  858,  858,  858,  555,  858,  858,
      858,  858,  543,  543,  543,  543,  543,  543,  175,   61,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  545,
      549,  546,  546,  546,  546,  546,  546,  551,  553,  554,

       61,   61,  858,  858,   61,  559,   61,   61,  557,  560,
      558,  858,   61,  567,  858,   61,  549,  546,  546,  546,
      546,  546,  546,  551,  553,  554,   61,   61,   61,   61,
       61,  559,   61,   61,  557,  560,  558,  561,   61,  562,
      563,   61,  566,   61,   61,  565,   61,   61,  568,  569,
      570,  571,  858,  572,   61,   61,   61,  858,   61,   61,
       61,  573,   61,  561,   61,  562,  563,  858,  566,   61,
       61,  565,   61,   61,  568,  574,  570,  571,   61,  572,
      575,  576,   61,   61,   61,   61,   61,  573,   61,   61,
       61,  577,   61,  578,   61,  579,   61,   61,   61,   61,

      580,  574,   61,   61,   61,   61,  575,  576,  594,   61,
       61,  581,   61,  602,  582,   61,  858,  577,   61,  578,
       61,  579,   61,   61,   61,   61,  580,   61,   61,   61,
       61,   61,   61,  858,  594,  604,   61,  581,   61,  602,
      582,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      858,   61,  858,   61,  858,  858,   61,  233,   61,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  485,   61,
      586,  586,  586,  586,  586,  586,  858,   61,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  858,  614,  858,
      858,  858,  858,  858,  858,   61,  586,  586,  586,  586,

      586,  586,  233,  858,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  588,  614,  589,  589,  589,  589,  589,
      589,  858,  599,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  858,  858,   61,  858,  858,  858,  858,  858,
      858,  589,  589,  589,  589,  589,  589,  175,  599,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  428,  175,
       61,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      545,  858,  591,  591,  591,  591,  591,  591,  858,  858,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  858,
      858,  858,  858,  858,  858,  858,  858,  598,  591,  591,

      591,  591,  591,  591,  592,  592,  592,  592,  592,  592,
      592,  592,  592,   61,  600,  593,  593,  593,  593,  593,
      593,   61,  596,  598,  597,  595,   61,  601,  603,   61,
       61,   61,  605,  858,  858,  858,   61,  858,  858,   61,
      600,  593,  593,  593,  593,  593,  593,   61,  596,   61,
      597,  595,   61,  601,  603,   61,   61,   61,  605,  606,
      607,  608,   61,  609,  610,  611,  612,  613,  615,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,  858,  858,   61,   61,  606,  607,  608,   61,  609,
      610,  611,  612,  613,  615,   61,   61,   61,   61,   61,

       61,  616,   61,   61,   61,   61,   61,  617,  618,   61,
       61,  619,   61,   61,   61,   61,  634,  620,   61,   61,
       61,  638,   61,  858,   61,  858,  858,  616,  858,  858,
      858,  858,  858,  617,  618,   61,  858,  619,   61,   61,
      642,   61,  634,  620,   61,   61,   61,  638,   61,  233,
       61,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      485,   61,  233,  858,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  588,   61,  625,  625,  625,  625,  625,
      625,  858,  858,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  858,  858,  858,  858,  858,  858,  858,  858,

       61,  625,  625,  625,  625,  625,  625,  626,  626,  626,
      626,  626,  626,  626,  626,  626,   61,  636,  627,  627,
      627,  627,  627,  627,  858,   61,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  858,   61,  858,  858,  858,
      858,  858,   61,  636,  627,  627,  627,  627,  627,  627,
      175,   61,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  545,   61,  629,  629,  629,  629,  629,  629,  858,
       61,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      858,  858,  858,  858,  858,  858,  858,  858,  858,  629,
      629,  629,  629,  629,  629,  175,   61,  630,  630,  630,

      630,  630,  630,  630,  630,  630,  631,  633,  632,  632,
      632,  632,  632,  632,  635,  637,  639,  640,   61,  641,
      643,   61,  644,   61,  858,   61,   61,   61,  858,   61,
      858,   61,  858,  633,  632,  632,  632,  632,  632,  632,
      635,  637,  639,  640,   61,  641,  643,   61,  644,   61,
      645,   61,   61,   61,  646,   61,  647,   61,  648,   61,
      650,   61,  649,  664,  651,  668,  652,   61,   61,   61,
       61,   61,   61,   61,  665,   61,  645,   61,   61,  858,
      646,  858,  647,  858,  648,   61,  650,   61,  649,  664,
      651,  668,  652,   61,   61,   61,   61,   61,   61,   61,

      665,   61,  858,   61,   61,  233,  858,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  588,   61,  656,  656,
      656,  656,  656,  656,  858,   61,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  858,  676,  858,  858,  858,
      858,  858,  858,   61,  656,  656,  656,  656,  656,  656,
      233,   61,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  658,  667,  659,  659,  659,  659,  659,  659,  858,
       61,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      858,  858,   61,  858,  858,  858,  858,  858,  667,  659,
      659,  659,  659,  659,  659,  175,   61,  363,  363,  363,

      363,  363,  363,  363,  363,  363,  545,  175,   61,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  631,  858,
      661,  661,  661,  661,  661,  661,  858,  858,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  858,  858,  858,
      858,  858,  858,  858,  858,  666,  661,  661,  661,  661,
      661,  661,  662,  662,  662,  662,  662,  662,  662,  662,
      662,   61,  669,  663,  663,  663,  663,  663,  663,  670,
      673,  666,   61,  671,  858,  858,  692,  674,   61,  672,
      858,   61,  678,   61,  675,  677,   61,   61,  669,  663,
      663,  663,  663,  663,  663,  670,  673,   61,   61,  671,

       61,   61,  692,  674,   61,  672,  679,   61,  678,   61,
      675,  677,   61,  858,   61,  858,  858,  858,  858,  858,
      858,  858,  858,   61,  858,  858,   61,   61,  858,  858,
      858,  858,  679,  858,  858,  858,  858,   61,  858,  233,
       61,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      588,  233,  858,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  658,   61,  684,  684,  684,  684,  684,  684,
      858,  858,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  858,  858,  858,  858,  858,  858,  858,   61,  858,
      684,  684,  684,  684,  684,  684,  685,  685,  685,  685,

      685,  685,  685,  685,  685,  696,   61,  686,  686,  686,
      686,  686,  686,  858,   61,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  858,   61,  858,  858,  858,  858,
      858,  696,   61,  686,  686,  686,  686,  686,  686,  175,
      858,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      631,   61,  688,  688,  688,  688,  688,  688,  858,   61,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  858,
      693,  697,  858,  858,  858,  858,  858,   61,  688,  688,
      688,  688,  688,  688,  175,   61,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  690,  693,  691,  691,  691,

      691,  691,  691,   61,  694,   61,   61,  699,  700,  701,
      702,   61,  698,  703,   61,  858,   61,   61,   61,  704,
       61,   61,   61,  691,  691,  691,  691,  691,  691,   61,
      694,   61,   61,  699,  700,  701,  702,   61,  698,  703,
       61,  705,   61,   61,   61,  704,   61,   61,   61,  858,
      858,  858,  858,  746,  747,   61,  858,   61,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  705,  858,  858,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  746,
      747,  719,  858,   61,  233,  858,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  658,   61,  710,  710,  710,

      710,  710,  710,  175,   61,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  631,   61,  858,  858,  858,  858,
      858,  858,   61,  710,  710,  710,  710,  710,  710,  233,
       61,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      712,   61,  713,  713,  713,  713,  713,  713,  858,  726,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  858,
      858,  858,  858,  858,  858,  858,  858,  770,  713,  713,
      713,  713,  713,  713,  175,   61,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  690,  718,  715,  715,  715,
      715,  715,  715,  770,  858,  858,  858,  858,  858,  858,

      858,   61,   61,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  718,  715,  715,  715,  715,  715,  715,  716,
      716,  716,  716,  716,  716,  716,  716,  716,   61,  720,
      717,  717,  717,  717,  717,  717,  721,  723,  858,   61,
      858,  858,  730,  858,  771,   61,  729,  727,  724,   61,
       61,   61,  722,  728,   61,  720,  717,  717,  717,  717,
      717,  717,  721,  723,  725,   61,   61,   61,  730,   61,
      771,   61,  729,  727,  724,   61,   61,   61,  722,  728,
       61,   61,  858,  858,  858,  858,  858,  858,  777,  858,
      725,  858,   61,   61,  233,   61,  419,  419,  419,  419,

      419,  419,  419,  419,  419,  658,  233,   61,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  712,   61,  736,
      736,  736,  736,  736,  736,  858,  858,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  858,  858,  776,  858,
      858,  858,  858,  858,   61,  736,  736,  736,  736,  736,
      736,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      749,   61,  738,  738,  738,  738,  738,  738,  858,   61,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  858,
      789,  858,  858,  858,  858,  858,  749,   61,  738,  738,
      738,  738,  738,  738,  175,   61,  739,  739,  739,  739,

      739,  739,  739,  739,  739,  690,  789,  740,  740,  740,
      740,  740,  740,  858,  858,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  858,  745,  858,  858,  858,  858,
      858,  858,  858,  740,  740,  740,  740,  740,  740,  175,
       61,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      742,  745,  743,  743,  743,  743,  743,  743,  744,  748,
      750,   61,  756,  858,  796,   61,   61,  751,  752,  753,
       61,  754,  755,  858,  858,   61,  858,  858,  743,  743,
      743,  743,  743,  743,  744,  748,  750,   61,  756,   61,
       61,   61,  790,   61,  768,  769,   61,   61,  755,   61,

      858,   61,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  794,  858,  858,  858,   61,   61,  793,  790,   61,
      768,  769,  858,   61,  233,   61,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  712,   61,  762,  762,  762,
      762,  762,  762,  858,   61,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  795,  858,  858,  858,  858,  858,
      858,  858,   61,  762,  762,  762,  762,  762,  762,  233,
       61,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      772,   61,  764,  764,  764,  764,  764,  764,  175,   61,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  690,

       61,  858,  858,  858,  858,  858,  772,   61,  764,  764,
      764,  764,  764,  764,  175,   61,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  742,   61,  766,  766,  766,
      766,  766,  766,  858,  773,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  774,  778,  779,  775,  788,  858,
       61,  858,  858,  766,  766,  766,  766,  766,  766,  858,
      773,   61,   61,  805,  791,   61,   61,  797,  858,   61,
       61,  778,  779,   61,  788,  233,   61,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  712,   61,   61,  805,
      791,   61,   61,  797,  792,   61,   61,  858,  858,   61,

      233,  858,  783,  783,  783,  783,  783,  783,  783,  783,
      783,   61,   61,  784,  784,  784,  784,  784,  784,  858,
      792,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      858,   61,  858,  858,  858,  858,  858,   61,   61,  784,
      784,  784,  784,  784,  784,  175,  858,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  742,   61,  786,  786,
      786,  786,  786,  786,  858,   61,  786,  786,  786,  786,
      786,  786,  786,  786,  786,   61,   61,  858,  858,  858,
      858,  858,  858,  858,  786,  786,  786,  786,  786,  786,
      233,   61,  801,  801,  801,  801,  801,  801,  801,  801,

      801,   61,   61,  802,  802,  802,  802,  802,  802,  858,
      823,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      858,  804,  807,  824,   61,  831,  858,  858,   61,  802,
      802,  802,  802,  802,  802,  175,  823,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  742,  804,  807,  824,
       61,  831,  806,  806,   61,  806,  806,  806,  806,  806,
      806,  858,  233,  806,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  806,  806,  813,  814,  812,  812,  832,
      812,  812,  812,  812,  812,  812,  816,  817,  812,  821,
      822,  825,  826,  828,  827,  833,  836,   61,  812,  812,

       61,  813,  814,   61,  834,  832,  858,   61,   61,  840,
      841,   61,  816,  817,   61,  821,  822,  825,  826,  828,
      827,  833,  836,   61,   61,  835,   61,  842,   61,   61,
      834,  846,   61,   61,   61,  840,  841,   61,   61,  843,
       61,  847,   61,  858,  858,  858,  858,  858,  858,  858,
       61,  835,  858,  842,   61,  858,  858,  846,   61,   61,
      858,   61,  858,  858,   61,  843,  858,  847,   61,  858,
      858,  858,  858,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,   61,  858,   61,   41,   41,
       41,   41,   43,   43,   43,   43,   47,   47,   47,   47,

       49,  858,   49,   49,   50,   50,   50,   50,  112,  858,
      112,  112,  115,  115,  171,  171,  231,  231,  232,  232,
      292,  292,  293,  293,  354,  354,  355,  355,  378,  858,
      378,  378,  415,  415,  416,  416,  479,  479,  480,  480,
      534,  534,  535,  535,  583,  583,  584,  584,  621,  621,
      622,  622,  653,  653,  654,  654,  680,  680,  681,  681,
      706,  706,  707,  707,  731,  731,  732,  732,  757,  757,
      759,  759,  780,  780,  781,  781,  798,  798,  799,  799,
      806,  858,  806,  806,  808,  858,  808,  808,  809,  809,
      812,  858,  812,  812,  815,  858,  815,  815,  818,  818,

      819,  819,  829,  829,  837,  837,  838,  838,  844,  844,
      848,  848,  849,  849,  851,  851,  853,  853,  854,  854,
      856,  856,  857,  857,    7,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  858,  858,  858,  858,  858

    } ;

static yyconst flex_int16_t yy_chk[5401] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   10,   10,   11,   11,   15,
       17,   27,  926,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   24,   16,   16,   16,   16,   16,

       16,   28,   16,   37,   61,   24,   17,   27,   24,   28,
       37,   63,   30,   44,   44,   64,   28,   24,   16,  922,
       24,   16,   16,   16,   16,   16,   16,   28,   16,   37,
       61,   24,   30,  918,   24,   28,   37,   63,   30,   45,
       45,   64,   28,   24,   16,   20,   20,  914,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   30,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   21,   21,   32,  908,   32,  907,   39,   32,  903,
       21,  900,   21,   39,   46,   46,   65,   66,   29,   21,
      899,   25,  896,  893,   29,  866,   66,   21,   21,   32,
       29,   32,   25,   39,   32,   25,   21,   25,   21,   39,
      857,   69,   65,   66,   29,   21,   22,   25,   22,   22,
       29,   33,   66,   68,   68,   72,   29,   22,   25,   22,
       22,   25,   33,   25,  856,   33,   22,   69,   33,   76,
      854,  853,   22,   40,   22,   22,  852,   33,  851,   68,
       68,   72,   79,   22,   31,   22,   22,  849,   33,   40,

       31,   33,   22,   23,   33,   31,   31,   23,   71,   40,
       74,   23,   74,   76,   23,   71,   23,   23,   79,   88,
       31,   23,   91,   23,  848,   40,   31,  845,  844,   23,
      838,   31,   31,   23,   71,  837,   74,   23,   74,   76,
       23,   71,   23,   23,  830,   88,  829,   23,   91,   23,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      819,   26,   26,   26,   26,   26,   26,  818,   26,   67,
       35,   35,   26,   34,  810,   26,  809,   34,  799,  798,
       38,   26,   35,   35,   38,  786,   67,   26,   26,   26,
       26,   26,   26,   34,   26,   67,   35,   35,   26,   34,

       38,   26,   73,   34,   36,   36,   38,   26,   35,   35,
       38,   81,   67,   70,   36,   75,   73,   77,   93,   34,
       78,   70,   36,   75,   93,   78,   38,   81,   73,   77,
       84,   36,   82,   70,   36,  782,  781,   81,  780,   70,
       36,   75,   73,   77,   93,   84,   78,   70,   36,   75,
       93,   78,   82,   81,  762,   77,   84,   36,   82,   70,
       36,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   84,   54,   54,   54,   54,   54,   54,   82,   54,
       56,   56,   56,   56,   56,   56,   56,   56,   56,  759,
       85,  757,  740,  734,  733,  732,  731,  101,   54,   54,

       54,   54,   54,   54,   85,   54,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   80,   85,   59,   59,   59,
       59,   59,   59,  101,  710,  707,  706,  688,  682,  681,
       85,  680,   80,  668,  656,   92,  654,  653,  629,  623,
      622,   80,  621,   59,   59,   59,   59,   59,   59,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   80,   83,
       62,   62,   62,   62,   62,   62,   86,   86,   87,   92,
       87,   62,   89,  586,   62,   90,   90,   89,   83,   83,
      584,  583,  102,   94,  543,   83,   62,   62,   62,   62,
       62,   62,   86,   86,   87,   92,   87,   62,   89,   94,

       62,   90,   90,   89,   83,   83,   95,   97,  102,   94,
       96,   95,   96,   96,   98,  103,  100,  105,  536,   98,
      104,   96,  106,  535,   99,   94,  121,   97,  104,  534,
      483,  122,   95,   97,  106,  100,   96,   95,   96,   96,
       98,   99,  100,  105,   99,   98,  104,   96,  106,  103,
       99,  108,  121,   97,  104,  107,  109,  122,  108,  109,
      106,  100,  124,  110,  107,  110,  480,   99,  479,  426,
       99,  417,  416,  415,  358,  103,  126,  108,  355,  354,
      302,  107,  109,  168,  108,  109,  294,  293,  124,  110,
      107,  110,  113,  113,  113,  113,  113,  113,  113,  113,

      113,  113,  126,  113,  113,  113,  113,  113,  113,  168,
      113,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      129,  129,  292,  242,  232,  231,  230,  204,  172,  113,
      113,  113,  113,  113,  113,  171,  113,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  129,  129,  116,  116,
      116,  116,  116,  116,  119,  180,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  115,  138,   55,   51,   50,
       47,   42,   19,  138,  116,  116,  116,  116,  116,  116,
      118,  180,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  138,  118,  118,  118,  118,  118,  118,  138,

      170,  170,  170,  170,  170,  170,  170,  170,  170,   18,
       14,   12,    7,    4,    3,  132,    0,    0,  188,  118,
      118,  118,  118,  118,  118,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  125,  128,  120,  120,  120,  120,
      120,  120,  123,  127,  188,  127,  130,  125,  123,  132,
      130,  128,    0,    0,  131,    0,    0,    0,  133,  144,
      125,  128,  120,  120,  120,  120,  120,  120,  123,  127,
      131,  127,  130,  125,  123,  132,  130,  128,  133,  134,
      131,  135,  140,  136,  133,  137,  142,  137,  134,  139,
      143,  139,  141,  144,  193,    0,  131,    0,  135,  136,

      140,  147,  142,  145,  133,  134,  143,  135,  140,  136,
      141,  137,  142,  137,  134,  139,  143,  139,  141,  144,
      193,  145,  146,  146,  135,  136,  140,  148,  142,  145,
      151,    0,  143,  149,  150,  147,  141,  152,  153,  148,
      157,    0,  149,  150,    0,  151,  149,  145,    0,  152,
      154,  149,  155,  148,  153,  196,  151,  146,  155,  149,
      150,  147,    0,  152,  153,  148,  158,  158,  149,  150,
      154,  151,  149,  159,  157,  152,  154,  149,  155,  156,
      153,  196,  156,  146,  155,  159,  160,  162,  160,  161,
      163,  164,  158,  158,  167,  182,  154,  182,  165,  159,

      157,  166,  211,  162,  167,  156,  163,  161,  156,  164,
      165,  159,  160,  162,  160,  161,  163,  164,  166,    0,
      167,  182,    0,  182,  165,    0,    0,  166,  211,  162,
      167,    0,  163,  161,    0,  164,  165,    0,    0,    0,
        0,    0,    0,    0,  166,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,    0,  169,  169,  169,  169,
      169,  169,  174,  169,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  169,  169,  169,  169,  169,  169,    0,  169,
      173,    0,  173,  173,  173,  173,  173,  173,  173,  173,

      173,  173,  183,  173,  173,  173,  173,  173,  173,  178,
        0,  178,  178,  178,  178,  178,  178,  178,  178,  178,
        0,  186,    0,    0,    0,    0,    0,    0,  186,  173,
      173,  173,  173,  173,  173,  176,  183,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  186,  176,  176,
      176,  176,  176,  176,  186,  181,    0,    0,    0,    0,
        0,    0,  183,    0,    0,    0,    0,    0,    0,    0,
        0,  199,  199,  181,  176,  176,  176,  176,  176,  176,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  181,
      184,  177,  177,  177,  177,  177,  177,  199,  199,  181,

        0,    0,    0,    0,    0,    0,  184,    0,    0,    0,
        0,    0,    0,    0,    0,  181,  184,  177,  177,  177,
      177,  177,  177,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  184,  187,  179,  179,  179,  179,  179,  179,
      185,  189,  185,  189,  190,  191,  190,    0,  194,    0,
      197,  194,  197,  187,    0,  200,    0,  191,  200,  187,
      179,  179,  179,  179,  179,  179,  185,  189,  185,  189,
      190,  191,  190,  192,  194,  195,  197,  194,  197,  187,
      198,  200,  203,  191,  200,  192,  201,  201,  202,  202,
      202,  195,  205,  208,    0,  203,  198,  202,  206,  192,

      206,  195,  208,  213,  207,    0,  198,  205,  203,  205,
      207,  192,  201,  201,  202,  202,  202,  195,  205,  208,
      213,  203,  198,  202,  206,  209,  206,  212,  208,  213,
      207,  210,  214,  205,  215,  205,  207,  210,  215,  216,
      216,  209,    0,  212,    0,  217,  213,  220,  221,  221,
      214,  209,  219,  212,  220,  218,  223,  210,  214,  224,
      215,  217,  225,  210,  215,  216,  216,  209,  219,  212,
      218,  217,  218,  220,  221,  221,  214,  222,  219,  228,
      220,  218,  225,  226,  246,  224,  222,  217,  225,  227,
      223,  243,  243,  257,  219,  227,  218,  245,  218,  245,

      226,    0,    0,  222,    0,    0,    0,    0,  225,  226,
      246,  278,  222,  228,    0,  227,  223,  243,  243,  257,
        0,  227,    0,  245,  280,  245,  226,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  278,    0,  228,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  234,
      280,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,    0,  234,  234,  234,  234,  234,  234,  236,  248,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  234,  234,
      234,  234,  234,  234,  235,  235,  235,  235,  235,  235,

      235,  235,  235,  248,  313,  235,  235,  235,  235,  235,
      235,  237,  313,  237,  237,  237,  237,  237,  237,  237,
      237,  237,    0,  249,    0,    0,    0,    0,    0,  248,
      313,  235,  235,  235,  235,  235,  235,  238,  313,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  318,
      238,  238,  238,  238,  238,  238,  239,  249,  239,  239,
      239,  239,  239,  239,  239,  239,  239,    0,  330,    0,
        0,    0,    0,    0,    0,  318,  238,  238,  238,  238,
      238,  238,  240,  249,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  330,  240,  240,  240,  240,  240,

      240,  241,  258,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  244,  250,  250,  251,  253,  244,  247,  247,
      247,  240,  240,  240,  240,  240,  240,  251,  247,  252,
      252,  259,  253,  255,  255,  256,  258,  260,  244,  250,
      250,  251,  253,  244,  247,  247,  247,  256,  266,  260,
      254,  261,  262,  251,  247,  252,  252,  254,  253,  255,
      255,  256,  258,  260,  262,  259,  261,  265,  263,  276,
      267,    0,  269,  256,  264,  260,  254,  261,  262,  271,
      264,  270,  266,  254,  263,  267,  271,  265,  269,  268,
      262,  259,  261,  265,  263,  268,  267,  270,  269,  272,

      264,  275,  273,  276,  275,  271,  264,  270,  266,  273,
      263,  267,  271,  265,  269,  268,  274,  277,  277,  272,
      279,  268,  274,  270,  282,  272,  281,  275,  273,  276,
      275,  285,  281,  286,  285,  273,  279,  284,  283,  288,
      282,  288,  274,  277,  277,  272,  279,  283,  274,  287,
      282,  284,  281,  286,  287,  289,  331,  285,  281,  286,
      285,  291,  279,  284,  283,  288,  282,  288,  290,  335,
      308,  290,  308,  283,  346,  287,    0,  284,  291,  286,
      287,    0,  331,    0,    0,    0,    0,  291,  317,  289,
        0,  317,    0,    0,  290,  335,  308,  290,  308,    0,

      346,    0,  306,  295,  291,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  317,  289,  296,  317,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  370,  296,
      296,  296,  296,  296,  296,  297,  306,  297,  297,  297,
      297,  297,  297,  297,  297,  297,    0,  316,    0,    0,
        0,    0,    0,    0,  370,  296,  296,  296,  296,  296,
      296,  298,  306,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  307,  298,  298,  298,  298,  298,  298,
      299,  316,  299,  299,  299,  299,  299,  299,  299,  299,
      299,    0,    0,  307,    0,    0,    0,    0,    0,  307,

      298,  298,  298,  298,  298,  298,  301,  316,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  303,  307,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
        0,  303,  303,  303,  303,  303,  303,  305,    0,  305,
      305,  305,  305,  305,  305,  305,  305,  305,    0,    0,
        0,    0,    0,    0,    0,    0,  309,  303,  303,  303,
      303,  303,  303,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  309,  310,  304,  304,  304,  304,  304,  304,
      311,  312,  309,  312,  315,  310,    0,  320,  323,  323,
      333,  315,  324,  333,    0,  320,  311,    0,  309,  310,

      304,  304,  304,  304,  304,  304,  311,  312,    0,  312,
      315,  310,  324,  320,  323,  323,  333,  315,  324,  333,
      319,  320,  311,  314,  314,  321,  314,  314,  314,  314,
      314,  314,  314,  321,  314,  322,  319,  327,  324,  325,
      326,  326,  328,  322,  314,  314,  319,  325,  329,  332,
      328,  321,  334,  341,  327,  334,  336,  332,  336,  321,
      329,  322,  319,  327,    0,  325,  326,  326,  328,  322,
      338,  337,  339,  325,  329,  332,  328,  340,  334,  338,
      327,  334,  336,  332,  336,  337,  329,  341,  339,  342,
      344,  343,  345,  344,  347,  340,  338,  337,  339,  343,

      348,  349,  348,  340,  352,  338,  347,  349,  345,  350,
      350,  337,    0,  341,  339,  351,  344,  343,  345,  344,
      347,  340,  376,  342,  351,  343,  348,  349,  348,  379,
      353,  393,  347,  349,  345,  350,  350,  369,  352,    0,
      369,  351,  353,    0,    0,    0,    0,    0,  376,  342,
      351,    0,    0,  374,    0,  379,  353,  393,    0,    0,
        0,    0,    0,  369,  352,  374,  369,    0,  353,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  357,  374,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      359,  374,  359,  359,  359,  359,  359,  359,  359,  359,

      359,  359,  394,  359,  359,  359,  359,  359,  359,  361,
        0,  361,  361,  361,  361,  361,  361,  361,  361,  361,
        0,    0,    0,    0,    0,    0,    0,  400,  394,  359,
      359,  359,  359,  359,  359,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  373,  373,  360,  360,  360,  360,
      360,  360,  362,  400,  362,  362,  362,  362,  362,  362,
      362,  362,  362,    0,  411,    0,    0,  382,    0,    0,
      373,  373,  360,  360,  360,  360,  360,  360,  363,    0,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  364,
      411,  364,  364,  364,  364,  364,  364,  364,  364,  364,

      364,  382,  364,  364,  364,  364,  364,  364,  365,  439,
      365,  365,  365,  365,  365,  365,  365,  365,  365,    0,
        0,    0,    0,    0,    0,    0,    0,  382,  364,  364,
      364,  364,  364,  364,  366,  439,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  375,  366,  366,  366,
      366,  366,  366,  367,  372,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  371,    0,  375,    0,  371,  372,
      378,  378,  375,  366,  366,  366,  366,  366,  366,  368,
      372,  377,  368,  381,  381,    0,  383,  384,  368,    0,
      371,  377,  375,  384,  371,  372,  378,  378,  380,  377,

      377,  385,  383,    0,  380,  368,  380,  377,  368,  381,
      381,  380,  383,  384,  368,  386,  387,  377,  392,  384,
      388,  385,  389,  390,  380,  377,  377,  385,  383,  391,
      380,  386,  380,  392,  387,  453,  388,  380,  389,  390,
        0,  386,  387,  395,  392,  391,  388,  385,  389,  390,
      396,  396,  397,  397,  398,  391,  398,  386,  401,  392,
      387,  453,  388,  395,  389,  390,  399,  399,  401,  395,
      403,  391,  407,  404,  407,  401,  396,  396,  397,  397,
      398,  402,  398,  405,  401,  404,    0,  402,  403,  395,
      406,  406,  399,  399,  401,  408,  403,  436,  407,  404,

      407,  401,  408,  405,  409,  410,  409,  402,  412,  405,
      436,  404,  410,  402,  403,  414,  406,  406,  414,  430,
      412,  408,  413,  436,  413,    0,    0,    0,  408,  405,
      409,  410,  409,    0,  412,  430,  436,    0,  410,    0,
        0,  414,    0,    0,  414,  430,  412,    0,  413,  418,
      413,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      419,  430,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  420,    0,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,    0,  420,  420,  420,  420,  420,  420,
      421,  455,  421,  421,  421,  421,  421,  421,  421,  421,

      421,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      420,  420,  420,  420,  420,  420,  422,  455,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  433,  422,
      422,  422,  422,  422,  422,  423,  456,  423,  423,  423,
      423,  423,  423,  423,  423,  423,    0,    0,  433,    0,
        0,  434,    0,    0,  433,  422,  422,  422,  422,  422,
      422,  425,  456,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  427,  433,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  434,  427,  427,  427,  427,
      427,  427,  429,    0,  429,  429,  429,  429,  429,  429,

      429,  429,  429,    0,    0,    0,    0,    0,    0,    0,
        0,  434,  427,  427,  427,  427,  427,  427,  428,  428,
      428,  428,  428,  428,  428,  428,  428,    0,  431,  428,
      428,  428,  428,  428,  428,  431,  432,  435,  438,  437,
      440,  438,    0,  432,  437,    0,    0,  451,  441,  440,
        0,    0,    0,  435,  431,  428,  428,  428,  428,  428,
      428,  431,  432,  435,  438,  437,  440,  438,  441,  432,
      437,  442,  443,  446,  441,  440,  444,  445,  448,  435,
      443,  451,  444,  447,  447,  448,  445,  442,  449,  446,
      450,    0,  457,  450,  441,  458,  459,  442,  443,  446,

      463,  452,  444,  445,  448,  449,  443,  451,  444,  447,
      447,  448,  445,  442,  449,  446,  450,  452,  457,  450,
      454,  458,  459,  460,  461,  462,  463,  452,  465,  454,
      466,  449,  464,    0,  467,  460,    0,  469,  468,    0,
      461,  462,  467,  452,    0,  464,  454,  468,  466,  460,
      461,  462,  474,  470,  469,  454,  466,    0,  464,  471,
      467,  460,  465,  469,  468,  470,  461,  462,  467,  473,
      472,  464,  472,  468,  466,  471,  475,  478,  474,  470,
      469,  477,  476,  473,  493,  471,  477,  501,  465,  497,
      497,  470,  475,  493,  509,  473,  472,  476,  472,    0,

        0,  471,  475,  478,    0,    0,    0,  477,  476,  473,
      493,    0,  477,  501,    0,  497,  497,    0,  475,  493,
      509,    0,    0,  476,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  482,    0,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  484,    0,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,    0,  484,  484,
      484,  484,  484,  484,  486,    0,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  484,  484,  484,  484,  484,  484,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  492,

      495,  485,  485,  485,  485,  485,  485,  489,  495,  489,
      489,  489,  489,  489,  489,  489,  489,  489,    0,  492,
        0,    0,    0,    0,    0,  492,  495,  485,  485,  485,
      485,  485,  485,  488,  495,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  492,  488,  488,  488,  488,
      488,  488,  491,  515,  491,  491,  491,  491,  491,  491,
      491,  491,  491,    0,    0,    0,    0,  500,    0,    0,
        0,    0,  488,  488,  488,  488,  488,  488,  490,  515,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      494,  490,  490,  490,  490,  490,  490,  496,  498,  499,

      494,  500,    0,    0,  498,  504,  496,  503,  502,  505,
      503,    0,  504,  512,    0,  499,  494,  490,  490,  490,
      490,  490,  490,  496,  498,  499,  494,  500,  502,  505,
      498,  504,  496,  503,  502,  505,  503,  506,  504,  507,
      508,  499,  511,  508,  506,  510,  510,  512,  513,  514,
      516,  517,    0,  518,  502,  505,  513,    0,  511,  507,
      518,  519,  521,  506,  519,  507,  508,    0,  511,  508,
      506,  510,  510,  512,  513,  520,  516,  517,  520,  518,
      522,  523,  513,  514,  511,  507,  518,  519,  521,  522,
      519,  524,  526,  525,  529,  527,  530,  523,  531,  524,

      528,  520,  527,  528,  520,  525,  522,  523,  547,  514,
      547,  532,  554,  556,  533,  522,    0,  524,  526,  525,
      529,  527,  530,  523,  531,  524,  528,  532,  527,  528,
      533,  525,  563,    0,  547,  558,  547,  532,  554,  556,
      533,  537,  537,  537,  537,  537,  537,  537,  537,  537,
        0,  566,    0,  532,    0,    0,  533,  538,  563,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  558,
      538,  538,  538,  538,  538,  538,  539,  566,  539,  539,
      539,  539,  539,  539,  539,  539,  539,    0,  570,    0,
        0,    0,    0,    0,    0,  558,  538,  538,  538,  538,

      538,  538,  540,    0,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  570,  540,  540,  540,  540,  540,
      540,  541,  552,  541,  541,  541,  541,  541,  541,  541,
      541,  541,    0,    0,  552,    0,    0,    0,    0,    0,
        0,  540,  540,  540,  540,  540,  540,  542,  552,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  544,
      552,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,    0,  544,  544,  544,  544,  544,  544,  546,    0,
      546,  546,  546,  546,  546,  546,  546,  546,  546,    0,
        0,    0,    0,    0,    0,    0,    0,  551,  544,  544,

      544,  544,  544,  544,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  551,  553,  545,  545,  545,  545,  545,
      545,  548,  549,  551,  550,  548,  550,  555,  557,  549,
      557,  553,  559,    0,    0,    0,  555,    0,    0,  551,
      553,  545,  545,  545,  545,  545,  545,  548,  549,  559,
      550,  548,  550,  555,  557,  549,  557,  553,  559,  560,
      561,  562,  555,  564,  565,  567,  568,  569,  571,  572,
      564,  573,  568,  562,  567,  559,  561,  560,  574,  569,
      576,    0,    0,  579,  565,  560,  561,  562,  580,  564,
      565,  567,  568,  569,  571,  572,  564,  573,  568,  562,

      567,  575,  561,  560,  574,  569,  576,  577,  578,  579,
      565,  581,  581,  575,  580,  595,  596,  582,  597,  577,
      600,  602,  596,    0,  578,    0,    0,  575,    0,    0,
        0,    0,    0,  577,  578,  582,    0,  581,  581,  575,
      606,  595,  596,  582,  597,  577,  600,  602,  596,  585,
      578,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  582,  587,    0,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  606,  587,  587,  587,  587,  587,
      587,  589,    0,  589,  589,  589,  589,  589,  589,  589,
      589,  589,    0,    0,    0,    0,    0,    0,    0,    0,

      606,  587,  587,  587,  587,  587,  587,  588,  588,  588,
      588,  588,  588,  588,  588,  588,  607,  599,  588,  588,
      588,  588,  588,  588,  591,  599,  591,  591,  591,  591,
      591,  591,  591,  591,  591,    0,  620,    0,    0,    0,
        0,    0,  607,  599,  588,  588,  588,  588,  588,  588,
      590,  599,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  620,  590,  590,  590,  590,  590,  590,  593,
      635,  593,  593,  593,  593,  593,  593,  593,  593,  593,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  590,
      590,  590,  590,  590,  590,  592,  635,  592,  592,  592,

      592,  592,  592,  592,  592,  592,  592,  594,  592,  592,
      592,  592,  592,  592,  598,  601,  603,  604,  603,  605,
      608,  598,  609,  594,    0,  605,  604,  608,    0,  609,
        0,  601,    0,  594,  592,  592,  592,  592,  592,  592,
      598,  601,  603,  604,  603,  605,  608,  598,  609,  594,
      610,  605,  604,  608,  611,  609,  612,  601,  613,  610,
      617,  617,  616,  633,  618,  638,  619,  633,  639,  643,
      611,  618,  634,  612,  634,  613,  610,  616,  619,    0,
      611,    0,  612,    0,  613,  610,  617,  617,  616,  633,
      618,  638,  619,  633,  639,  643,  611,  618,  634,  612,

      634,  613,    0,  616,  619,  624,    0,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  645,  624,  624,
      624,  624,  624,  624,  625,  650,  625,  625,  625,  625,
      625,  625,  625,  625,  625,    0,  648,    0,    0,    0,
        0,    0,    0,  645,  624,  624,  624,  624,  624,  624,
      626,  650,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  637,  626,  626,  626,  626,  626,  626,  627,
      648,  627,  627,  627,  627,  627,  627,  627,  627,  627,
        0,    0,  637,    0,    0,    0,    0,    0,  637,  626,
      626,  626,  626,  626,  626,  628,  648,  628,  628,  628,

      628,  628,  628,  628,  628,  628,  628,  630,  637,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,    0,
      630,  630,  630,  630,  630,  630,  632,    0,  632,  632,
      632,  632,  632,  632,  632,  632,  632,    0,    0,    0,
        0,    0,    0,    0,    0,  636,  630,  630,  630,  630,
      630,  630,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  636,  640,  631,  631,  631,  631,  631,  631,  641,
      644,  636,  641,  642,    0,    0,  664,  646,  640,  642,
        0,  642,  651,  651,  647,  649,  644,  636,  640,  631,
      631,  631,  631,  631,  631,  641,  644,  646,  641,  642,

      647,  649,  664,  646,  640,  642,  652,  642,  651,  651,
      647,  649,  644,    0,  652,    0,    0,    0,    0,    0,
        0,    0,    0,  646,    0,    0,  647,  649,    0,    0,
        0,    0,  652,    0,    0,    0,    0,  666,    0,  655,
      652,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  657,    0,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  666,  657,  657,  657,  657,  657,  657,
      659,    0,  659,  659,  659,  659,  659,  659,  659,  659,
      659,    0,    0,    0,    0,    0,    0,    0,  675,    0,
      657,  657,  657,  657,  657,  657,  658,  658,  658,  658,

      658,  658,  658,  658,  658,  669,  700,  658,  658,  658,
      658,  658,  658,  661,  675,  661,  661,  661,  661,  661,
      661,  661,  661,  661,    0,  669,    0,    0,    0,    0,
        0,  669,  700,  658,  658,  658,  658,  658,  658,  660,
        0,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  669,  660,  660,  660,  660,  660,  660,  663,  704,
      663,  663,  663,  663,  663,  663,  663,  663,  663,    0,
      665,  670,    0,    0,    0,    0,    0,  665,  660,  660,
      660,  660,  660,  660,  662,  704,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  665,  662,  662,  662,

      662,  662,  662,  665,  667,  670,  667,  672,  673,  674,
      676,  674,  671,  677,  677,    0,  676,  673,  705,  678,
      672,  678,  720,  662,  662,  662,  662,  662,  662,  671,
      667,  670,  667,  672,  673,  674,  676,  674,  671,  677,
      677,  679,  676,  673,  705,  678,  672,  678,  720,    0,
        0,    0,    0,  721,  722,  671,  684,  679,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  679,  686,    0,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  721,
      722,  693,    0,  679,  683,    0,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  726,  683,  683,  683,

      683,  683,  683,  687,  728,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  693,    0,    0,    0,    0,
        0,    0,  726,  683,  683,  683,  683,  683,  683,  685,
      728,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  693,  685,  685,  685,  685,  685,  685,  691,  698,
      691,  691,  691,  691,  691,  691,  691,  691,  691,    0,
        0,    0,    0,    0,    0,    0,    0,  746,  685,  685,
      685,  685,  685,  685,  689,  698,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  692,  689,  689,  689,
      689,  689,  689,  746,    0,    0,    0,    0,    0,    0,

        0,  698,  692,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  692,  689,  689,  689,  689,  689,  689,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  692,  694,
      690,  690,  690,  690,  690,  690,  695,  696,    0,  696,
        0,    0,  703,    0,  747,  694,  702,  699,  697,  702,
      748,  751,  695,  701,  703,  694,  690,  690,  690,  690,
      690,  690,  695,  696,  697,  696,  697,  699,  703,  701,
      747,  694,  702,  699,  697,  702,  748,  751,  695,  701,
      703,  768,    0,    0,    0,    0,    0,    0,  754,    0,
      697,    0,  697,  699,  709,  701,  709,  709,  709,  709,

      709,  709,  709,  709,  709,  709,  711,  768,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  754,  711,
      711,  711,  711,  711,  711,  713,    0,  713,  713,  713,
      713,  713,  713,  713,  713,  713,    0,    0,  753,    0,
        0,    0,    0,    0,  754,  711,  711,  711,  711,  711,
      711,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      724,  753,  712,  712,  712,  712,  712,  712,  715,  724,
      715,  715,  715,  715,  715,  715,  715,  715,  715,    0,
      770,    0,    0,    0,    0,    0,  724,  753,  712,  712,
      712,  712,  712,  712,  714,  724,  714,  714,  714,  714,

      714,  714,  714,  714,  714,  714,  770,  714,  714,  714,
      714,  714,  714,  717,    0,  717,  717,  717,  717,  717,
      717,  717,  717,  717,    0,  719,    0,    0,    0,    0,
        0,    0,    0,  714,  714,  714,  714,  714,  714,  716,
      719,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  719,  716,  716,  716,  716,  716,  716,  718,  723,
      725,  718,  730,    0,  777,  725,  719,  727,  727,  727,
      730,  727,  729,    0,    0,  723,    0,    0,  716,  716,
      716,  716,  716,  716,  718,  723,  725,  718,  730,  729,
      744,  725,  771,  777,  744,  745,  730,  727,  729,  745,

      736,  723,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  775,    0,    0,    0,  729,  744,  774,  771,  777,
      744,  745,    0,  727,  735,  745,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  775,  735,  735,  735,
      735,  735,  735,  738,  774,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  776,    0,    0,    0,    0,    0,
        0,    0,  775,  735,  735,  735,  735,  735,  735,  737,
      774,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      749,  776,  737,  737,  737,  737,  737,  737,  739,  779,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,

      749,    0,    0,    0,    0,    0,  749,  776,  737,  737,
      737,  737,  737,  737,  741,  779,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  749,  741,  741,  741,
      741,  741,  741,  743,  750,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  752,  755,  756,  752,  769,    0,
      750,    0,    0,  741,  741,  741,  741,  741,  741,    0,
      750,  755,  756,  789,  772,  769,  772,  778,    0,  793,
      778,  755,  756,  752,  769,  761,  750,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  755,  756,  789,
      772,  769,  772,  778,  773,  793,  778,    0,    0,  752,

      763,    0,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  794,  773,  763,  763,  763,  763,  763,  763,  764,
      773,  764,  764,  764,  764,  764,  764,  764,  764,  764,
        0,  795,    0,    0,    0,    0,    0,  794,  773,  763,
      763,  763,  763,  763,  763,  765,    0,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  795,  765,  765,
      765,  765,  765,  765,  766,  796,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  797,  804,    0,    0,    0,
        0,    0,    0,    0,  765,  765,  765,  765,  765,  765,
      783,  796,  783,  783,  783,  783,  783,  783,  783,  783,

      783,  797,  804,  783,  783,  783,  783,  783,  783,  784,
      813,  784,  784,  784,  784,  784,  784,  784,  784,  784,
        0,  788,  791,  814,  791,  821,    0,    0,  788,  783,
      783,  783,  783,  783,  783,  785,  813,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  788,  791,  814,
      791,  821,  792,  792,  788,  792,  792,  792,  792,  792,
      792,    0,  801,  792,  801,  801,  801,  801,  801,  801,
      801,  801,  801,  792,  792,  806,  806,  807,  807,  822,
      807,  807,  807,  807,  807,  807,  808,  808,  807,  812,
      812,  815,  815,  817,  816,  823,  827,  827,  807,  807,

      817,  806,  806,  808,  825,  822,    0,  828,  815,  831,
      833,  835,  808,  808,  816,  812,  812,  815,  815,  817,
      816,  823,  827,  827,  825,  826,  817,  834,  834,  808,
      825,  840,  826,  828,  815,  831,  833,  835,  843,  836,
      816,  842,  847,    0,    0,    0,    0,    0,    0,    0,
      825,  826,    0,  834,  834,    0,    0,  840,  826,  836,
        0,  842,    0,    0,  843,  836,    0,  842,  847,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  836,    0,  842,  859,  859,
      859,  859,  860,  860,  860,  860,  861,  861,  861,  861,

      862,    0,  862,  862,  863,  863,  863,  863,  864,    0,
      864,  864,  865,  865,  867,  867,  868,  868,  869,  869,
      870,  870,  871,  871,  872,  872,  873,  873,  874,    0,
      874,  874,  875,  875,  876,  876,  877,  877,  878,  878,
      879,  879,  880,  880,  881,  881,  882,  882,  883,  883,
      884,  884,  885,  885,  886,  886,  887,  887,  888,  888,
      889,  889,  890,  890,  891,  891,  892,  892,  894,  894,
      895,  895,  897,  897,  898,  898,  901,  901,  902,  902,
      904,    0,  904,  904,  905,    0,  905,  905,  906,  906,
      909,    0,  909,  909,  910,    0,  910,  910,  911,  911,

      912,  912,  913,  913,  915,  915,  916,  916,  917,  917,
      919,  919,  920,  920,  921,  921,  923,  923,  924,  924,
      925,  925,  927,  927,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  858,  858,  858,  858,  858

    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[105] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 1950 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 2060 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 859 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5325 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 60 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 62 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::ACCEPT_UNKNOWN_FQDN_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::DS_LITE_TUNNEL_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ return SrvParser::CLIENT_CLASS_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ return SrvParser::MATCH_IF_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 122 "SrvLexer.l"
{ return SrvParser::EQ_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{ return SrvParser::AND_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
{ return SrvParser::OR_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 125 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 126 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_DATA_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_EN_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_DATA_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{ return SrvParser::ALLOW_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 130 "SrvLexer.l"
{ return SrvParser::DENY_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 131 "SrvLexer.l"
{ return SrvParser::SUBSTRING_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
{ return SrvParser::CONTAIN_; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
{ return SrvParser::STRING_KEYWORD_; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 136 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 137 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 138 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 139 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 141 "SrvLexer.l"
;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 143 "SrvLexer.l"
;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 145 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno; 
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 150 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 151 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 152 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 91:
YY_RULE_SETUP
#line 159 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 168 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 177 "SrvLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 186 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 195 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 204 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 213 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 225 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 232 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 253 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd then no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 285 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd; 
      YYABORT; 
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 295 "SrvLexer.l"
{ 
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) { 
        Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd; 
        YYABORT; 
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 304 "SrvLexer.l"
{ return yytext[0]; } 
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 307 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 2808 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 859 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 859 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 858);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 307 "SrvLexer.l"




