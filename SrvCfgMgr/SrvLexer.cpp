
#line 3 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 49
#define YY_END_OF_BUFFER 50
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[473] =
    {   0,
        0,    0,    0,    0,    0,    0,   50,   48,   47,   47,
       48,   30,   48,   48,   46,   46,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   34,   34,   49,    0,   42,   30,
        0,   42,   32,   31,   46,    0,    0,   45,    0,   39,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       27,   43,   43,   43,   43,   43,   43,   15,   16,   43,
       43,   43,   43,   43,   43,   33,   31,   46,    0,    0,
       38,   44,   37,   37,   43,   43,   43,   43,   43,   43,
       43,   43,   43,    0,   43,   43,   43,   43,   43,   43,

       43,   43,   43,   43,   43,   26,   46,    0,    0,    0,
       36,   36,    0,   37,    0,   37,   43,   43,   43,   43,
        0,   43,   43,   43,    0,    0,    0,   43,   21,   43,
       43,   43,   43,   28,   43,   43,   43,   46,    0,    0,
        0,    0,   36,    0,   36,    0,   37,   37,   37,   37,
       43,   43,    3,   43,    0,   43,   29,    1,    0,    0,
        0,    0,    0,   43,   43,   43,   43,    0,   43,   43,
        0,    0,    0,    0,    0,   36,   36,   36,   36,    0,
       37,   37,   37,    0,   37,   43,    0,   43,    0,   10,
        0,    0,    0,    0,    0,    0,    8,   43,    0,   43,

        0,   43,    0,    0,    0,    0,    0,   36,   36,   36,
        0,   36,    0,    0,   37,   37,   37,   37,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   43,    0,
        0,    0,   19,    0,    0,    0,    0,    0,    0,    0,
       36,   36,   36,   36,    0,   37,   37,   37,    0,   37,
        0,    0,    0,    0,    0,    0,    6,    4,    0,    0,
       43,   43,    0,    0,    0,    0,    7,    0,    0,    0,
       36,   36,   36,    0,   36,   41,   37,   37,   37,   37,
        0,    0,    0,    0,    0,    5,    2,    0,    0,   43,
        0,    0,   12,    0,    0,    0,    0,   40,   36,   36,

       36,   36,   37,   37,   37,    0,   37,    0,    0,    0,
        9,    0,   11,    0,   20,    0,    0,    0,    0,    0,
       36,   36,   36,    0,   36,   37,   37,   37,   37,   13,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       36,   36,   36,   36,   37,   37,   37,    0,   37,    0,
        0,    0,    0,   22,    0,    0,    0,    0,   36,   36,
       36,    0,   36,   37,   37,   37,   37,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   36,   36,   36,   36,
       37,   37,   37,    0,   37,    0,    0,    0,    0,   14,
       18,    0,   35,   38,   36,   36,   36,    0,   36,   37,

       37,   37,   37,   24,    0,   23,    0,    0,   35,    0,
       36,   36,   36,   36,   36,   37,   37,   37,    0,   37,
       25,    0,   35,   38,   36,    0,   36,   36,   36,   36,
       37,   37,   37,   17,   35,   36,   36,   36,   36,   37,
       37,   37,   36,   36,    0,   36,   36,   37,   36,   36,
       37,   36,   36,    0,   36,   36,   36,   36,    0,   36,
       36,   36,   36,    0,   36,   36,   36,   36,    0,   36,
       36,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    6,    1,
        1,    7,    1,    1,    8,    9,   10,   11,   12,   13,
       14,   14,   14,   14,   14,   14,   14,   15,    1,    1,
        1,    1,    1,    1,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
        1,    1,    1,    1,    1,    1,   16,   17,   18,   19,

       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[42] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    1,
        4,    4,    4,    4,    5,    4,    4,    4,    4,    4,
        4,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3
    } ;

static yyconst flex_int16_t yy_base[551] =
    {   0,
        0,    0, 1589, 1588,    0,    0, 1594, 1597, 1597, 1597,
     1589,    0, 1586,   35,   35, 1552, 1575,   64,   77, 1562,
       14, 1572, 1572,   42,   56,   84,   86,   88,   44,   92,
       91,   46,   93,   50, 1597, 1576, 1597, 1581, 1597,    0,
     1578, 1577, 1597,    0,  115, 1567,   55, 1597,    0,   98,
     1566,  128, 1562, 1564,  135,  109,   87, 1551,   57,  138,
      146,  137,  122,  140,  143,  141,  149, 1562, 1561,  147,
      150,   98,  151,  152,  154, 1597,    0,  178,  168, 1560,
      191,    0,  197,  210,  214, 1554,  205,  156,  169,  221,
      214,  223,  192, 1555,  232,  227,  228,  229,  230,  237,

      238,  241,  231,  244,  245, 1557,  261,  251, 1556, 1555,
      276,  289,  293,  299,  310,  316,  320, 1538,  252,  158,
     1534,  311,  327,  328,  317, 1537, 1532,  334, 1550,  335,
      251,  336,  344, 1549,  341,  343,  345,  354, 1548, 1547,
     1546,  359,  365,  376,  382,  388,  394,  407,  413,  426,
     1545,  408,  433,  421, 1539,  254, 1543,  434, 1537, 1526,
     1539, 1525, 1533,  346,  429,  437,  431, 1511,  383,  439,
     1532, 1535, 1534, 1533,  446,  458,  471,  477,  490,  494,
      500, 1532,  507,  518,  524,  453, 1518,  502, 1512, 1529,
     1515, 1505, 1522, 1512, 1518, 1505, 1522,  519, 1518,  532,

     1505,  526, 1507, 1509, 1517, 1516,  531,  537, 1515,  553,
      542,  566,  572,  578,  584,  597,  603,  616, 1499, 1512,
     1499, 1489, 1509, 1504, 1503, 1502, 1497, 1483,  616, 1489,
     1500, 1488, 1501, 1491, 1481, 1498, 1497, 1496,  625,  635,
      641,  654,  660,  673,  546,  679, 1495,  686,  629,  699,
     1480, 1469, 1491, 1486, 1466, 1477, 1597, 1597, 1481, 1482,
      618,  435, 1473, 1473, 1479, 1477, 1597, 1482, 1481,  703,
      709, 1480,  716,  727,  733,  737,  743,  756,  762,  775,
     1467, 1485, 1453, 1458, 1482, 1597, 1597, 1456, 1461,  770,
     1459, 1462, 1597, 1465, 1469, 1468, 1467,  780,  786,  799,

      805,  818,  824, 1466,  831,  842,  848, 1440, 1452, 1470,
     1597, 1450, 1597, 1452, 1460, 1450, 1453, 1437, 1456, 1455,
      854, 1454,  861,  872,  878,  884,  897,  903,  916, 1597,
     1353, 1333, 1319, 1311, 1291, 1289, 1289, 1292, 1279, 1273,
      922,  935,  941,  954,  960, 1265,  967,  978,  984, 1259,
     1248, 1246, 1229, 1597, 1207, 1208, 1213, 1208,  990, 1202,
      997, 1008, 1014, 1020, 1033, 1039, 1052, 1170, 1182, 1151,
     1144, 1132, 1140, 1128, 1121, 1115, 1058, 1071, 1077, 1090,
     1096, 1098, 1103, 1114, 1120, 1086, 1066, 1067, 1057, 1597,
     1597, 1053, 1047,    0, 1126, 1034, 1133, 1144, 1150, 1156,

     1169, 1175, 1188, 1597, 1023, 1597, 1002, 1009,  992,  985,
      979, 1194, 1207, 1213, 1226, 1232,  962, 1239,    0, 1252,
     1597,  950,  949, 1597,  936,    0, 1258,  930, 1265, 1278,
     1284, 1297,    0, 1597,  917,  911,  898, 1303, 1316, 1322,
      892,    0,  879,  873,    0, 1329, 1597,    0,  856,  849,
     1597,  843,  826,    0,  819,  813,  800,  794,    0,  781,
      757,  751,  738,    0,  728,  711,  704,  694,    0,  681,
      674, 1597, 1343, 1348, 1353, 1358, 1363, 1366, 1371, 1373,
      679,  666, 1375,  660, 1377, 1379,  647, 1381, 1383,  628,
     1385, 1387,  609, 1389, 1391,  603, 1393, 1395,  590, 1397,

     1399,  584, 1401, 1403,  578, 1405, 1407,  572, 1409, 1411,
      559, 1413, 1415,  496, 1417, 1419,  483, 1421, 1423,  477,
      461, 1425, 1427,  460, 1429, 1431,  459,  447, 1433, 1435,
      400, 1437,  388,  359, 1439, 1441, 1443,  305, 1445, 1447,
     1449,  295, 1451, 1453, 1455,  179, 1457, 1459, 1461, 1463
    } ;

static yyconst flex_int16_t yy_def[551] =
    {   0,
      472,    1,  473,  473,  474,  474,  472,  472,  472,  472,
      475,  476,  477,  472,  472,   15,  472,  478,  478,   19,
       19,   19,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  472,  472,  472,  475,  472,  476,
      477,  472,  472,  479,  472,  480,   45,  472,  481,  482,
      478,   19,   52,  478,  478,  478,  478,   52,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  472,  479,  472,   78,  483,
      484,  481,  472,   83,   52,   85,  478,  478,  478,  478,
      478,  478,  478,  472,  478,  478,  478,  478,  478,  478,

      478,  478,  478,  478,  478,  478,  472,  107,  485,  486,
      472,  111,  472,  472,  487,  114,   85,  117,  478,  478,
      472,  478,  478,  478,  472,  472,  472,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  108,  108,  488,
      489,  472,  472,  490,  143,  472,  472,  147,  472,  149,
      117,  478,  478,  478,  472,  478,  478,  478,  472,  472,
      472,  472,  472,  478,  478,  478,  478,  472,  478,  478,
      472,  472,  491,  492,  472,  472,  176,  472,  178,  472,
      472,  472,  472,  493,  183,  478,  472,  478,  472,  478,
      472,  472,  472,  472,  472,  472,  478,  478,  472,  478,

      472,  478,  472,  472,  494,  495,  472,  472,  472,  472,
      496,  210,  472,  472,  472,  215,  472,  217,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  478,  472,
      472,  472,  478,  472,  472,  472,  497,  498,  472,  472,
      472,  241,  472,  243,  472,  472,  472,  472,  499,  248,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      478,  478,  472,  472,  472,  472,  472,  500,  501,  472,
      472,  472,  472,  502,  273,  472,  472,  277,  472,  279,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  478,
      472,  472,  472,  472,  472,  503,  504,  472,  472,  299,

      472,  301,  472,  472,  472,  505,  305,  472,  472,  472,
      472,  472,  472,  472,  478,  472,  472,  472,  506,  507,
      472,  472,  472,  508,  323,  472,  326,  472,  328,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  509,  510,
      472,  341,  472,  343,  472,  472,  472,  511,  347,  472,
      472,  472,  472,  472,  472,  472,  512,  513,  472,  472,
      472,  514,  361,  472,  364,  472,  366,  472,  472,  472,
      472,  472,  472,  472,  515,  516,  472,  377,  472,  379,
      472,  472,  472,  517,  383,  472,  472,  472,  472,  472,
      472,  518,  519,  520,  472,  472,  472,  521,  397,  472,

      400,  472,  402,  472,  472,  472,  472,  472,  522,  472,
      523,  472,  412,  472,  414,  472,  472,  472,  524,  418,
      472,  472,  525,  472,  526,  527,  472,  472,  472,  429,
      472,  431,  528,  472,  472,  529,  530,  472,  438,  472,
      472,  531,  472,  532,  533,  472,  472,  534,  535,  536,
      472,  472,  537,  538,  539,  540,  472,  541,  542,  543,
      544,  472,  545,  546,  547,  548,  472,  549,  521,  550,
      472,    0,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,

      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472
    } ;

static yyconst flex_int16_t yy_nxt[1639] =
    {   0,
        8,    9,   10,   11,   12,   13,    8,    8,    8,   14,
       15,   16,   16,   16,   17,   18,   19,   20,   21,   19,
       22,   23,   23,   24,   23,   23,   25,   23,   26,   27,
       28,   23,   29,   23,   30,   31,   32,   33,   23,   34,
       23,   43,   56,   57,   44,   45,   45,   45,   45,   46,
       47,   47,   47,   47,   47,   47,  472,   48,  472,   66,
      472,   73,   59,   67,  472,   79,   79,   79,   79,   75,
      472,  472,   92,   49,   52,   52,   52,   52,   46,   52,
       52,   53,   52,   52,   52,   60,   54,   52,   52,   52,
       52,   46,   52,   52,   52,   52,   52,   52,  472,   54,

      472,  472,  472,   68,   69,  472,  472,  472,   83,   83,
       83,   83,  472,   61,   90,   70,   63,   64,   62,   72,
       65,  103,   74,  472,   71,   78,   78,   78,   78,   46,
       79,   79,   79,   79,   79,   79,  472,   48,   85,   85,
       85,   85,   89,   85,   85,   85,   85,   85,   85,  472,
       87,  472,  472,   94,  472,  472,   96,  472,   88,   93,
      472,  472,   98,  472,  472,  472,  472,   95,  472,   97,
      472,   99,  472,  100,  101,  120,  121,  104,  108,  108,
      108,  108,  466,  472,  105,  102,  154,  106,  107,  107,
      107,  107,   46,  108,  108,  108,  108,  108,  108,  125,

       48,  111,  111,  111,  111,  113,  472,  114,  114,  114,
      114,  115,  116,  116,  116,  116,  116,  116,  472,  472,
      116,  116,  116,  116,  117,  117,  117,  117,  472,  117,
      117,  117,  117,  117,  117,  472,  122,  472,  119,  127,
      124,  472,  472,  472,  472,  472,  472,  123,  135,  130,
      128,  472,  472,  131,  129,  472,  132,  133,  472,  472,
      134,  139,  139,  139,  139,  472,  472,  136,  472,  166,
      137,  138,  138,  138,  138,   46,  139,  139,  139,  139,
      139,  139,  190,   48,  142,  153,  143,  143,  143,  143,
      144,  145,  145,  145,  145,  145,  145,  472,  461,  145,

      145,  145,  145,  146,  146,  146,  146,  113,  456,  147,
      147,  147,  147,  115,  148,  148,  148,  148,  148,  148,
      149,  149,  149,  149,  472,  472,  148,  148,  148,  148,
      151,  151,  151,  151,  156,  151,  151,  151,  151,  151,
      151,  472,  472,  159,  160,  161,  157,  158,  472,  472,
      472,  168,  171,  167,  165,  472,  169,  472,  472,  472,
      472,  170,  451,  164,  138,  138,  138,  138,  472,  175,
      175,  175,  175,  142,  197,  176,  176,  176,  176,  144,
      177,  177,  177,  177,  177,  177,  178,  178,  178,  178,
      472,  450,  177,  177,  177,  177,  180,  472,  146,  146,

      146,  146,  113,  448,  181,  181,  181,  181,  115,  182,
      182,  182,  182,  182,  182,  472,  202,  182,  182,  182,
      182,  113,  472,  183,  183,  183,  183,  184,  185,  185,
      185,  185,  185,  185,  472,  472,  185,  185,  185,  185,
      187,  191,  186,  472,  199,  472,  203,  472,  472,  472,
      442,  472,  290,  472,  207,  188,  175,  175,  175,  175,
      219,  198,  437,  433,  415,  200,  142,  472,  208,  208,
      208,  208,  144,  209,  209,  209,  209,  209,  209,  472,
      411,  209,  209,  209,  209,  142,  403,  210,  210,  210,
      210,  211,  212,  212,  212,  212,  212,  212,  472,  380,

      212,  212,  212,  212,  213,  213,  213,  213,  113,  221,
      214,  214,  214,  214,  115,  113,  472,  215,  215,  215,
      215,  184,  216,  216,  216,  216,  216,  216,  217,  217,
      217,  217,  472,  472,  216,  216,  216,  216,  229,  231,
      472,  239,  239,  239,  239,  142,  472,  240,  240,  240,
      240,  144,  243,  243,  243,  243,  276,  276,  276,  276,
      233,  142,  367,  241,  241,  241,  241,  211,  242,  242,
      242,  242,  242,  242,  472,  344,  242,  242,  242,  242,
      245,  329,  213,  213,  213,  213,  113,  302,  214,  214,
      214,  214,  113,  280,  246,  246,  246,  246,  184,  247,

      247,  247,  247,  247,  247,  472,  244,  247,  247,  247,
      247,  113,  218,  248,  248,  248,  248,  249,  250,  250,
      250,  250,  250,  250,  472,  289,  250,  250,  250,  250,
      472,  179,  472,  270,  261,  239,  239,  239,  239,  279,
      279,  279,  279,  142,  262,  240,  240,  240,  240,  142,
      150,  271,  271,  271,  271,  211,  272,  272,  272,  272,
      272,  272,  472,  112,  272,  272,  272,  272,  142,   84,
      273,  273,  273,  273,  274,  275,  275,  275,  275,  275,
      275,  472,   82,  275,  275,  275,  275,  113,  469,  214,
      214,  214,  214,  184,  113,  469,  277,  277,  277,  277,

      249,  278,  278,  278,  278,  278,  278,  472,  469,  278,
      278,  278,  278,  298,  298,  298,  298,  142,  464,  240,
      240,  240,  240,  211,  142,  469,  299,  299,  299,  299,
      274,  300,  300,  300,  300,  300,  300,  301,  301,  301,
      301,  472,  464,  300,  300,  300,  300,  276,  276,  276,
      276,  113,  464,  303,  303,  303,  303,  249,  304,  304,
      304,  304,  304,  304,  472,  459,  304,  304,  304,  304,
      113,  464,  305,  305,  305,  305,  306,  307,  307,  307,
      307,  307,  307,  472,  472,  307,  307,  307,  307,  315,
      298,  298,  298,  298,  142,  459,  321,  321,  321,  321,

      274,  322,  322,  322,  322,  322,  322,  472,  459,  322,
      322,  322,  322,  142,  454,  323,  323,  323,  323,  324,
      325,  325,  325,  325,  325,  325,  472,  459,  325,  325,
      325,  325,  113,  454,  214,  214,  214,  214,  249,  113,
      454,  326,  326,  326,  326,  306,  327,  327,  327,  327,
      327,  327,  328,  328,  328,  328,  472,  445,  327,  327,
      327,  327,  142,  454,  240,  240,  240,  240,  274,  142,
      445,  341,  341,  341,  341,  324,  342,  342,  342,  342,
      342,  342,  343,  343,  343,  343,  472,  445,  342,  342,
      342,  342,  113,  426,  345,  345,  345,  345,  306,  346,

      346,  346,  346,  346,  346,  472,  419,  346,  346,  346,
      346,  113,  445,  347,  347,  347,  347,  348,  349,  349,
      349,  349,  349,  349,  472,  426,  349,  349,  349,  349,
      142,  410,  359,  359,  359,  359,  324,  360,  360,  360,
      360,  360,  360,  472,  398,  360,  360,  360,  360,  142,
      426,  361,  361,  361,  361,  362,  363,  363,  363,  363,
      363,  363,  472,  410,  363,  363,  363,  363,  113,  434,
      214,  214,  214,  214,  306,  113,  384,  364,  364,  364,
      364,  348,  365,  365,  365,  365,  365,  365,  366,  366,
      366,  366,  472,  426,  365,  365,  365,  365,  142,  424,

      240,  240,  240,  240,  324,  142,  410,  377,  377,  377,
      377,  362,  378,  378,  378,  378,  378,  378,  379,  379,
      379,  379,  472,  376,  378,  378,  378,  378,  113,  422,
      381,  381,  381,  381,  348,  382,  382,  382,  382,  382,
      382,  472,  421,  382,  382,  382,  382,  113,  362,  383,
      383,  383,  383,  384,  385,  385,  385,  385,  385,  385,
      472,  410,  385,  385,  385,  385,  142,  376,  395,  395,
      395,  395,  362,  396,  396,  396,  396,  396,  396,  472,
      407,  396,  396,  396,  396,  142,  406,  397,  397,  397,
      397,  398,  399,  399,  399,  399,  399,  399,  472,  405,

      399,  399,  399,  399,  113,  404,  214,  214,  214,  214,
      348,  113,  348,  400,  400,  400,  400,  384,  401,  401,
      401,  401,  401,  401,  402,  402,  402,  402,  472,  394,
      401,  401,  401,  401,  142,  376,  240,  240,  240,  240,
      362,  142,  340,  412,  412,  412,  412,  398,  413,  413,
      413,  413,  413,  413,  414,  414,  414,  414,  472,  391,
      413,  413,  413,  413,  113,  390,  416,  416,  416,  416,
      384,  417,  417,  417,  417,  417,  417,  472,  389,  417,
      417,  417,  417,  113,  388,  418,  418,  418,  418,  419,
      420,  420,  420,  420,  420,  420,  472,  387,  420,  420,

      420,  420,  142,  386,  427,  427,  427,  427,  398,  428,
      428,  428,  428,  428,  428,  472,  324,  428,  428,  428,
      428,  142,  376,  429,  429,  429,  429,  340,  430,  430,
      430,  430,  430,  430,  472,  373,  430,  430,  430,  430,
      113,  372,  214,  214,  214,  214,  384,  113,  371,  431,
      431,  431,  431,  419,  432,  432,  432,  432,  432,  432,
      472,  370,  432,  432,  432,  432,  142,  369,  240,  240,
      240,  240,  398,  142,  368,  438,  438,  438,  438,  306,
      439,  439,  439,  439,  439,  439,  472,   81,  439,  439,
      439,  439,  113,  340,  440,  440,  440,  440,  419,  441,

      441,  441,  441,  441,  441,  472,  297,  441,  441,  441,
      441,  142,  356,  446,  446,  446,  446,  355,  447,  447,
      447,  447,  447,  447,  472,  354,  447,  447,  447,  447,
      113,  353,  214,  214,  214,  214,  419,  142,  352,  240,
      240,  240,  240,   35,   35,   35,   35,   35,   37,   37,
       37,   37,   37,   38,   38,   38,   38,   38,   40,  351,
       40,   40,   40,   41,   41,   41,   41,   41,   51,   51,
       51,   77,  350,   77,   77,   77,   80,   80,  109,  109,
      140,  140,  141,  141,  172,  172,  173,  173,  205,  205,
      206,  206,  236,  236,  237,  237,  268,  268,  269,  269,

      295,  295,  296,  296,  319,  319,  320,  320,  338,  338,
      339,  339,  357,  357,  358,  358,  374,  374,  375,  375,
      392,  392,  393,  393,  408,  408,  409,  409,  423,  423,
      425,  425,  435,  435,  436,  436,  443,  443,  444,  444,
      449,  449,  452,  452,  453,  453,  455,  455,  457,  457,
      458,  458,  460,  460,  462,  462,  463,  463,  465,  465,
      467,  467,  468,  468,  470,  470,  471,  471,  274,  340,
      297,  337,  336,  335,  472,  334,  333,  332,  331,  330,
      249,   81,  297,  238,  318,  317,  316,  314,  313,  312,
      311,  310,  309,  308,  211,  297,  238,  294,  293,  292,

      291,  288,  287,  286,  285,  284,  283,  282,  281,  184,
       81,  238,  174,  267,  266,  472,  265,  264,  263,  260,
      259,  258,  257,  256,  255,  254,  253,  252,  251,  144,
      238,  174,  235,  234,  232,  230,  472,  228,  227,  226,
      225,  224,  223,  472,  222,  220,  115,   81,  174,  110,
      204,  201,  196,  195,  194,  193,  192,  472,  189,  472,
      174,  110,  472,  472,  472,  163,  162,  155,  152,   81,
      110,  472,  126,  118,  110,  472,  472,   91,  472,   86,
      472,   81,   41,   42,   39,   76,  472,   58,   55,   50,
      472,   42,   39,  472,   36,   36,    7,  472,  472,  472,

      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472
    } ;

static yyconst flex_int16_t yy_chk[1639] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   14,   21,   21,   14,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   24,   15,   29,   29,
       32,   32,   24,   29,   34,   47,   47,   47,   47,   34,
       25,   59,   59,   15,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   25,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   26,   19,

       27,   57,   28,   30,   30,   31,   30,   33,   50,   50,
       50,   50,   72,   26,   57,   30,   27,   28,   26,   31,
       28,   72,   33,   56,   30,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   63,   45,   52,   52,
       52,   52,   56,   52,   52,   52,   52,   52,   52,   55,
       55,   62,   60,   61,   64,   66,   63,   65,   55,   60,
       61,   70,   65,   67,   71,   73,   74,   62,   75,   64,
       88,   66,  120,   67,   70,   88,   89,   73,   79,   79,
       79,   79,  546,   89,   74,   71,  120,   75,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   93,

       78,   81,   81,   81,   81,   83,   93,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   84,   87,
       84,   84,   84,   84,   85,   85,   85,   85,   91,   85,
       85,   85,   85,   85,   85,   90,   90,   92,   87,   95,
       92,   96,   97,   98,   99,  103,   95,   91,  103,   98,
       96,  100,  101,   99,   97,  102,  100,  101,  104,  105,
      102,  108,  108,  108,  108,  131,  119,  104,  156,  131,
      105,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  156,  107,  111,  119,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  112,  542,  112,

      112,  112,  112,  113,  113,  113,  113,  114,  538,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      115,  115,  115,  115,  116,  122,  116,  116,  116,  116,
      117,  117,  117,  117,  122,  117,  117,  117,  117,  117,
      117,  123,  124,  125,  125,  125,  123,  124,  128,  130,
      132,  133,  137,  132,  130,  135,  135,  136,  133,  137,
      164,  136,  534,  128,  138,  138,  138,  138,  138,  142,
      142,  142,  142,  143,  164,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  144,  144,  144,  144,
      145,  533,  145,  145,  145,  145,  146,  169,  146,  146,

      146,  146,  147,  531,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  148,  169,  148,  148,  148,
      148,  149,  152,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  150,  154,  150,  150,  150,  150,
      153,  158,  152,  165,  166,  167,  170,  153,  158,  262,
      528,  166,  262,  170,  175,  154,  175,  175,  175,  175,
      186,  165,  527,  524,  521,  167,  176,  186,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  177,
      520,  177,  177,  177,  177,  178,  517,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  179,  514,

      179,  179,  179,  179,  180,  180,  180,  180,  181,  188,
      181,  181,  181,  181,  181,  183,  188,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  184,  184,
      184,  184,  185,  198,  185,  185,  185,  185,  198,  200,
      202,  207,  207,  207,  207,  208,  200,  208,  208,  208,
      208,  208,  211,  211,  211,  211,  245,  245,  245,  245,
      202,  210,  511,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  212,  508,  212,  212,  212,  212,
      213,  505,  213,  213,  213,  213,  214,  502,  214,  214,
      214,  214,  215,  499,  215,  215,  215,  215,  215,  215,

      215,  215,  215,  215,  215,  216,  496,  216,  216,  216,
      216,  217,  493,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  218,  261,  218,  218,  218,  218,
      229,  490,  261,  239,  229,  239,  239,  239,  239,  249,
      249,  249,  249,  240,  229,  240,  240,  240,  240,  241,
      487,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  242,  484,  242,  242,  242,  242,  243,  482,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  244,  481,  244,  244,  244,  244,  246,  471,  246,
      246,  246,  246,  246,  248,  470,  248,  248,  248,  248,

      248,  248,  248,  248,  248,  248,  248,  250,  468,  250,
      250,  250,  250,  270,  270,  270,  270,  271,  467,  271,
      271,  271,  271,  271,  273,  466,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  274,  274,  274,
      274,  275,  465,  275,  275,  275,  275,  276,  276,  276,
      276,  277,  463,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  278,  462,  278,  278,  278,  278,
      279,  461,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  280,  290,  280,  280,  280,  280,  290,
      298,  298,  298,  298,  299,  460,  299,  299,  299,  299,

      299,  299,  299,  299,  299,  299,  299,  300,  458,  300,
      300,  300,  300,  301,  457,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  302,  456,  302,  302,
      302,  302,  303,  455,  303,  303,  303,  303,  303,  305,
      453,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  306,  306,  306,  306,  307,  452,  307,  307,
      307,  307,  321,  450,  321,  321,  321,  321,  321,  323,
      449,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  324,  324,  324,  324,  325,  444,  325,  325,
      325,  325,  326,  443,  326,  326,  326,  326,  326,  326,

      326,  326,  326,  326,  326,  327,  441,  327,  327,  327,
      327,  328,  437,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  329,  436,  329,  329,  329,  329,
      341,  435,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  342,  428,  342,  342,  342,  342,  343,
      425,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  344,  423,  344,  344,  344,  344,  345,  422,
      345,  345,  345,  345,  345,  347,  417,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  348,  348,
      348,  348,  349,  411,  349,  349,  349,  349,  359,  410,

      359,  359,  359,  359,  359,  361,  409,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  362,  362,
      362,  362,  363,  408,  363,  363,  363,  363,  364,  407,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  365,  405,  365,  365,  365,  365,  366,  396,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      367,  393,  367,  367,  367,  367,  377,  392,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  378,
      389,  378,  378,  378,  378,  379,  388,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  380,  387,

      380,  380,  380,  380,  381,  386,  381,  381,  381,  381,
      381,  383,  382,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  384,  384,  384,  384,  385,  376,
      385,  385,  385,  385,  395,  375,  395,  395,  395,  395,
      395,  397,  374,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  398,  398,  398,  398,  399,  373,
      399,  399,  399,  399,  400,  372,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  401,  371,  401,
      401,  401,  401,  402,  370,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  403,  369,  403,  403,

      403,  403,  412,  368,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  413,  360,  413,  413,  413,
      413,  414,  358,  414,  414,  414,  414,  357,  414,  414,
      414,  414,  414,  414,  415,  356,  415,  415,  415,  415,
      416,  355,  416,  416,  416,  416,  416,  418,  353,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      420,  352,  420,  420,  420,  420,  427,  351,  427,  427,
      427,  427,  427,  429,  350,  429,  429,  429,  429,  346,
      429,  429,  429,  429,  429,  429,  430,  340,  430,  430,
      430,  430,  431,  339,  431,  431,  431,  431,  431,  431,

      431,  431,  431,  431,  431,  432,  338,  432,  432,  432,
      432,  438,  337,  438,  438,  438,  438,  336,  438,  438,
      438,  438,  438,  438,  439,  335,  439,  439,  439,  439,
      440,  334,  440,  440,  440,  440,  440,  446,  333,  446,
      446,  446,  446,  473,  473,  473,  473,  473,  474,  474,
      474,  474,  474,  475,  475,  475,  475,  475,  476,  332,
      476,  476,  476,  477,  477,  477,  477,  477,  478,  478,
      478,  479,  331,  479,  479,  479,  480,  480,  483,  483,
      485,  485,  486,  486,  488,  488,  489,  489,  491,  491,
      492,  492,  494,  494,  495,  495,  497,  497,  498,  498,

      500,  500,  501,  501,  503,  503,  504,  504,  506,  506,
      507,  507,  509,  509,  510,  510,  512,  512,  513,  513,
      515,  515,  516,  516,  518,  518,  519,  519,  522,  522,
      523,  523,  525,  525,  526,  526,  529,  529,  530,  530,
      532,  532,  535,  535,  536,  536,  537,  537,  539,  539,
      540,  540,  541,  541,  543,  543,  544,  544,  545,  545,
      547,  547,  548,  548,  549,  549,  550,  550,  322,  320,
      319,  318,  317,  316,  315,  314,  312,  310,  309,  308,
      304,  297,  296,  295,  294,  292,  291,  289,  288,  285,
      284,  283,  282,  281,  272,  269,  268,  266,  265,  264,

      263,  260,  259,  256,  255,  254,  253,  252,  251,  247,
      238,  237,  236,  235,  234,  233,  232,  231,  230,  228,
      227,  226,  225,  224,  223,  222,  221,  220,  219,  209,
      206,  205,  204,  203,  201,  199,  197,  196,  195,  194,
      193,  192,  191,  190,  189,  187,  182,  174,  173,  172,
      171,  168,  163,  162,  161,  160,  159,  157,  155,  151,
      141,  140,  139,  134,  129,  127,  126,  121,  118,  110,
      109,  106,   94,   86,   80,   69,   68,   58,   54,   53,
       51,   46,   42,   41,   38,   36,   23,   22,   20,   17,
       16,   13,   11,    7,    4,    3,  472,  472,  472,  472,

      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[50] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
    0, 0, 1, 0, 0, 0, 0, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
/* <Linux> */
/* </Linux> */
#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

using namespace std;
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of '::'
  char Address[16]; //address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
};

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( (yy_init) )
		{
		(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 473 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1597 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{ return SrvParser::IFACE_;}
	YY_BREAK
case 2:
YY_RULE_SETUP
{ return SrvParser::NO_CONFIG_;}
	YY_BREAK
case 3:
YY_RULE_SETUP
{ return SrvParser::CLASS_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 8:
YY_RULE_SETUP
{ return SrvParser::OPTION_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 13:
YY_RULE_SETUP
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
{ return SrvParser::T1_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
{ return SrvParser::T2_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
{ return SrvParser::POOL_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 24:
YY_RULE_SETUP
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 25:
YY_RULE_SETUP
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 26:
YY_RULE_SETUP
{yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 27:
YY_RULE_SETUP
{yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 28:
YY_RULE_SETUP
{yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 29:
YY_RULE_SETUP
{yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
 //[Nn][Ii][Ss]-[Ss][Ee][Rr][Vv][Ee][Rr] {return SrvParser::NIS_SERVER_;}

 //COMMENTS

case 30:
YY_RULE_SETUP
;
	YY_BREAK
case 31:
YY_RULE_SETUP
;
	YY_BREAK
case 32:
YY_RULE_SETUP
{
  BEGIN(COMMENT);
  ComBeg=yylineno; 
}
	YY_BREAK
case 33:
YY_RULE_SETUP
BEGIN(INITIAL);
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 35:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
	Log(Error) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT; 
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 36:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
	Log(Error) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT; 
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 37:
YY_RULE_SETUP
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
	Log(Error) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT; 
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 38:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
	Log(Error) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT; 
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 39:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
	Log(Error) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT; 
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 40:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
	Log(Error) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT; 
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 41:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
	Log(Error) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT; 
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
{
    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
 
//DUID

case 44:
YY_RULE_SETUP
{
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Error) << "DUID parsing failed." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return SrvParser::DUID_;
}
	YY_BREAK
 //HEXADECIMAL NUMBER (interface id, option's values etc.)

case 45:
YY_RULE_SETUP
{
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival)))
      { Log(Error) << "Hex value [" << yytext << " parsing failed." << LogEnd; YYABORT; }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
 //DECIMAL NUMBER (as for HEXNUMBER)

case 46:
YY_RULE_SETUP
{ 
    //FIXME:Check if number appropriate
    if(!sscanf(yytext,"%u",&(yylval.ival)))
      { Log(Error) << "Decimal value [" << yytext << " parsing failed." << LogEnd; YYABORT; }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
 //WHITE CHARS should be omitted

case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
; 
	YY_BREAK
 //OTHER CHARS are directly passed to parser

case 48:
YY_RULE_SETUP
{return yytext[0];}
	YY_BREAK
case 49:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 473 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 473 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 472);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
    	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
    	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef yytext_ptr
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
#endif

/////////////////////////////////////////////////////////////////////////////
// programs section

