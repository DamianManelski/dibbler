#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 122
#define YY_END_OF_BUFFER 123
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1010] =
    {   0,
        1,    1,    0,    0,    0,    0,  123,  121,    2,    1,
        1,  121,  103,  121,  121,  120,  120,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      107,  107,  122,    1,    1,    1,    0,  115,  103,    0,
      115,  105,  104,  120,    0,    0,  119,    0,  112,   86,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      100,  116,  116,   88,  116,  116,  116,  116,  116,  116,

      116,  116,  116,  116,  116,   19,   20,  116,  116,  116,
      116,  116,  116,  116,  116,  106,  104,  120,    0,    0,
        0,  111,  117,  110,  110,  116,  116,  116,  116,  116,
       87,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
       99,  120,    0,    0,    0,    0,  109,  109,    0,  110,
        0,  110,  116,  116,  116,   66,  116,  116,  116,  116,

      116,  116,  116,  116,   94,  116,  116,  116,   33,  116,
       15,  116,   46,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,    0,  116,  116,  116,  116,  116,  116,
       26,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  101,  116,  116,  116,  116,
      120,    0,  118,    0,    0,    0,  109,    0,  109,    0,
      110,  110,  110,  110,  116,  116,  116,  116,   93,  116,
      116,  116,    4,  116,  116,  116,  116,  116,  116,  116,
      102,  116,  116,    3,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,    0,  116,  116,  116,

      116,  116,  116,  116,  116,  116,  116,    7,  116,   45,
      116,   27,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,    0,    0,    0,    0,    0,  109,  109,
      109,  109,    0,  110,  110,  110,    0,  110,  116,  116,
      116,  116,  116,  116,  116,  116,  116,   32,  116,  116,
      116,  116,  116,   39,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
        0,    0,  116,  116,  116,   37,  116,  116,  116,  116,
      116,  116,  116,   62,  116,  116,  116,   97,  116,  116,
      116,  116,  116,  116,  116,    0,    0,    0,    0,  109,

      109,  109,    0,  109,    0,    0,  110,  110,  110,  110,
      116,  116,   35,  116,  116,  116,  116,  116,  116,    0,
      116,  116,   96,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,    0,    0,  116,  116,  116,  116,  116,
       60,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,   24,  116,  116,  116,  118,    0,    0,    0,
        0,    0,  109,  109,  109,  109,    0,  110,  110,  110,
        0,  110,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,    0,  116,  116,  116,  116,  116,  116,

      116,  116,  116,  116,  116,  116,  116,  116,   47,  116,
       56,  116,  116,  116,   12,   10,   85,  116,   44,    0,
        0,  116,  116,  116,   58,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,    5,  116,  116,  116,
       16,    0,    0,    0,    0,  109,  109,  109,    0,  109,
      114,  110,  110,  110,  110,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,    0,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,   11,   65,    0,    0,  116,  116,
      116,   59,  116,  116,  116,  116,  116,   34,  116,  116,

        6,   95,   41,  116,  116,    0,    0,    0,    0,  113,
      109,  109,  109,  109,  110,  110,  110,    0,  110,  116,
      116,  116,  116,  116,  116,  116,  116,  116,   57,  116,
        0,  116,  116,  116,  116,  116,  116,  116,  116,   38,
      116,  116,   36,  116,  116,  116,   13,  116,    0,    0,
       53,   52,   40,  116,   25,  116,  116,  116,   43,   42,
      116,  116,  118,    0,    0,  109,  109,  109,    0,  109,
      110,  110,  110,  110,  116,   17,  116,   64,  116,  116,
      116,   73,  116,  116,    0,  116,  116,  116,  116,  116,
      116,   76,  116,  116,  116,  116,  116,  116,   14,   55,

       54,  116,  116,  116,  116,  116,   61,    0,    0,    0,
        0,  109,  109,  109,  109,  110,  110,  110,    0,  110,
      116,  116,   98,   75,  116,  116,  116,    0,   84,  116,
      116,  116,   51,  116,   77,   63,  116,  116,  116,    8,
      116,  116,   28,  116,  116,    0,    0,    0,  109,  109,
      109,    0,  109,  110,  110,  110,  110,  116,  116,   74,
      116,  116,    0,  116,  116,   50,  116,  116,  116,  116,
       67,  116,  116,  116,  116,  116,  118,    0,    0,    0,
      109,  109,  109,  109,  110,  110,  110,    0,  110,  116,
      116,  116,  116,    0,  116,  116,  116,  116,  116,  116,

      116,  116,  116,   18,   23,    0,    0,  108,  111,  109,
      109,  109,    0,  109,  110,  110,  110,  110,  116,  116,
      116,   30,    0,    0,  116,  116,  116,   78,  116,  116,
       29,  116,  116,  116,    0,    0,  108,    0,  109,  109,
      109,  109,  109,  110,  110,  110,    0,  110,  116,  116,
      116,    0,    0,   31,  116,  116,   79,  116,  116,  116,
      116,  116,  116,  116,  118,  108,  111,  109,    0,  109,
      109,  109,  109,  110,  110,  110,   68,  116,  116,  116,
      116,    0,    0,  116,  116,  116,  116,  116,  116,   49,
      116,   22,  116,    0,  108,  109,  109,  109,  109,  110,

      110,  110,  116,  116,  116,  116,  116,    0,    0,  116,
      116,   80,   81,   82,   83,    9,   21,    0,  109,  109,
        0,  109,  109,  110,   48,  116,  116,  116,  116,    0,
        0,  116,  116,  118,  109,  109,  110,  116,  116,  116,
      116,    0,    0,    0,  116,  116,  116,    0,  109,  109,
        0,  116,  116,  116,  116,    0,    0,    0,   89,  116,
      116,  116,   89,  108,  109,  109,   69,  116,  116,  116,
        0,   91,    0,  116,   91,  116,  108,  109,  109,    0,
      116,  116,   72,    0,   90,  116,   90,    0,  109,  109,
      116,   70,   92,   92,    0,  109,  109,    0,   71,  118,

      109,  109,    0,  109,  109,    0,  109,  109,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
       23,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        1,    1,    1,    1,    1,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    1,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1100] =
    {   0,
        0,    0, 1140, 1139,    0,    0, 1146, 5826, 5826,   73,
       75, 1140,    0, 1136,   72,   72,   34, 1120, 1118,  136,
      186,  233,  280,   71,  208,  338,   38,   73,  223,   89,
      267,  175,  275,  356,  372,  399,   67,  357,  180,  209,
     5826, 1099, 5826,  111,  137,  222, 1104, 5826,    0, 1101,
     1100, 5826,    0,  457, 1084,  476, 5826,    0,  502, 5826,
       61,  545,   86,   89,  185,  208,  231,  279,  221,  265,
      288,  559,  342,  283,  285,  388,  377,  389,  339,  395,
      326,  410,  394,  544,  561,  469,  557,  392,  574,  507,
      326,  542,  576,  455,  538,  584,  582,  594,  606,  462,

      593,  599,  596,  629,  630,  581,  612,  614,  636,  613,
      643,  627,  641,  645,  648, 5826,    0,  706, 1080,  725,
     1077,  751,    0,  796,  770,  839,  649,  650,  828,  832,
      666,  831,  837,  698,  835,  855,  704,  836,  838,  856,
      875,  887,  886,  888,  873,  756,  876,  896,  907,  891,
      906,  908,  877,  927,  924,  920,  960,  928,  941,  948,
      940,  938,  959,  958,  971,  976,  962,  975,  981, 1006,
      983,  991,  992, 1011, 1010, 1014, 1013, 1012, 1042, 1033,
      738, 1100,  814, 1074, 1072, 1069, 1147, 1119,  823, 1192,
     1235, 1166, 1278, 1008, 1213, 1015, 1028, 1079, 1100, 1230,

     1266, 1034, 1277, 1265, 1022, 1269, 1270, 1309, 1031, 1275,
     1035, 1315, 1305, 1276, 1320, 1196, 1152, 1310, 1312, 1365,
     1319, 1326, 1314, 1080, 1344, 1351, 1328, 1317, 1371, 1366,
     1134, 1378, 1380, 1379, 1390, 1396, 1401, 1372, 1415, 1419,
     1423, 1410, 1409, 1439, 1446, 1374, 1438, 1431, 1432, 1447,
     1211, 1066, 1065, 1021, 1002, 1505, 1516, 1559, 1535, 1578,
     1604, 1623, 1649, 1668,  974, 1538, 1442, 1648, 1424, 1661,
     1663, 1495, 1591, 1650, 1681, 1667, 1665, 1684, 1703, 1683,
     1520, 1699, 1704, 1719, 1698, 1713, 1715, 1714, 1711, 1732,
     1733, 1744, 1754, 1752, 1602, 1736, 1737, 1753, 1766, 1767,

     1755, 1783, 1772, 1775, 1771, 1790, 1785, 1647, 1802, 1782,
     1788, 1796, 1805, 1819, 1815, 1818, 1820, 1827, 1821, 1836,
     1857, 1838, 1854,  966,  959,  943,  906, 1898, 1917, 1936,
     1962, 1981, 1945, 2007,  905, 2019, 2062, 2038, 1998, 1961,
     2050, 1840, 2052, 2057, 2065, 2053, 1859, 2135, 2061, 2058,
     2094, 2090, 2062, 1855, 2110, 2106, 2112, 2117, 2118, 2122,
     2125, 2134, 2133, 2149, 2139, 2154, 2161, 2158, 2162, 2170,
     1862, 1894, 2176, 2174, 2181, 1949, 2169, 2191, 2192, 2189,
     2216, 2219, 2235, 2060, 2213, 2211, 2222, 2210, 2226, 2223,
     2233, 2229, 2250, 2264, 2256,  902,  892,  852, 2322, 2333,

      851, 2345, 2388, 2364, 2407, 2433, 2444, 2463, 2489, 2508,
     2510, 2246, 2366, 2258, 2275, 2487, 2488, 2263, 2509, 2256,
     2524, 2491, 2287, 2508, 2375, 2544, 2519, 2523, 2529, 2547,
     2558, 2556, 2559, 2571, 2568, 2560, 2562, 2590, 2591, 2592,
     2596, 2598, 2604, 2332, 2389, 2603, 2605, 2610, 2614, 2620,
     2423, 2650, 2639, 2634, 2644, 2627, 2655, 2647, 2658, 2664,
     2668, 2678, 2431, 2663, 2687, 2675,  823,  777,  776,  775,
     2745, 2756, 2767, 2786, 2812, 2831, 2795, 2857,  774, 2869,
     2912, 2888, 2890, 2898, 2906, 2811, 2910, 2902, 2929, 2680,
     2907, 2904, 2908, 2678, 2947, 2946, 2956, 2942, 2959, 2953,

     2950, 2957, 2965, 2958, 2962, 2978, 2989, 2997, 2679, 2996,
     2709, 2993, 2754, 3003, 2799, 2981, 2995, 3000, 2999, 3021,
     3001, 3017, 3030, 3048, 3008, 3046, 3044, 3053, 3054, 3047,
     3045, 3055, 3069, 3066, 3051, 3082, 3041, 3100, 3093, 3090,
     3060,  773,  772,  770, 3158, 3169,  740, 3181, 3224, 3200,
     3209, 3269, 3243, 3314, 3288, 3222, 3096, 3098, 3097, 3305,
     3309, 3302, 3310, 3329, 3332, 3307, 3098, 3334, 3312, 3318,
     3349, 3351, 3366, 3354, 3368, 3353, 3357, 3386, 3378, 3393,
     3211, 3395, 3365, 3384, 3099, 3256, 3376, 3386, 3405, 3400,
     3402, 3385, 3415, 3403, 3401, 3416, 3430, 3409, 3440, 3420,

     3422, 3436, 3437, 3454, 3455,  732,  731,  730,  729, 3498,
     3515, 3534, 3560, 3579, 3605,  728, 3617, 3660, 3636, 3452,
     3453, 3646, 3649, 3650, 3654, 3559, 3677, 3656, 3451, 3662,
     3511, 3657, 3596, 3701, 3705, 3502, 3707, 3706, 3697, 3513,
     3712, 3714, 3691, 3702, 3704, 3708, 3695, 3725, 3707, 3732,
     3736, 3737, 3739, 3753, 3742, 3752, 3756, 3761, 3746, 3747,
     3749, 3776,  727,  692,  687, 3819,  686, 3836, 3879, 3855,
     3924, 3898, 3969, 3943, 3964, 3754, 3961, 3757, 3858, 3963,
     3911, 3759, 3815, 3973, 3846, 3960, 3968, 3971, 3972, 3970,
     3962, 3967, 4007, 4010, 4019, 4020, 4022, 4023, 4003, 5826,

     5826, 4024, 4025, 4012, 4015, 4052, 4016,  685,  683,  680,
      673, 4112, 4086, 4157, 4098, 4131,  672, 4202, 4245, 4176,
     4021, 4205, 4018, 4054, 4239, 4240, 4257, 4094, 4099, 4248,
     4238, 4243, 4110, 4244, 4144, 4155, 4276, 4267, 4287, 4275,
     4288, 4292, 4162, 4279, 4289,  671,  571,  570, 4222,  562,
     4352, 4395, 4371, 4440, 4414, 4485, 4459, 4280, 4291, 4282,
     4474, 4475,  570, 4393, 4472, 4286, 4481, 4489, 4480, 4484,
     4290, 4485, 4487, 4504, 4518, 4525,  557,  556,  528,  525,
     4585, 4604, 4630, 4649, 4675,  524, 4687, 4730, 4706, 4538,
     4517, 4519, 4708, 4727, 4719, 4744, 4382, 4629, 4746, 4747,

     4524, 4760, 4724, 4294, 4331,  523,  522,  521,    0, 4818,
      520, 4830, 4873, 4849, 4918, 4892, 4963, 4937, 4732, 4931,
     4617, 4374, 4436, 4525, 4965, 4860, 4733, 4527, 4809, 4952,
     4572, 4968, 4961, 4966,  519,  518,  516,  515,  514, 5028,
     5047, 5073, 5092, 5118,  513, 5130,    0, 5149, 4955, 4960,
     5150, 4710, 4743, 4852, 5072, 5133, 4871, 5157, 5007, 5060,
     4964, 5145, 5148, 5135,  512,  511, 5826,  483,    0, 5215,
      482, 5227, 5246, 5272, 5291,    0, 4963, 5151, 5269, 5290,
     5303, 4969, 5033, 5146, 5289, 5179, 5051, 5286, 5301, 5147,
     5276, 5154, 5300,  481,  480,  479,  478, 5363, 5382, 5408,

      465,    0, 5294, 5342, 5361, 5293, 5214, 5171,    0, 5365,
     5435, 5292, 5305, 5341, 5362, 5376, 5394,  446,  445,  434,
        0, 5452, 5826,    0, 5404, 5431, 5435, 5439, 5432,    0,
     5424, 5488, 5454,  433,  431,  430, 5826, 5460, 5436, 5473,
     5475, 5487, 5437, 5466, 5493, 5492, 5489,  428,  424,  406,
        0, 5479, 5490, 5506, 5483, 5507, 5495, 5492, 5826, 5527,
     5528, 5512, 5520,  395,  356,  355, 5522, 5530, 5534, 5525,
     5530, 5826, 5555, 5540, 5536, 5563,  353,  352,  350,    0,
     5552, 5542, 5544, 5578, 5826, 5579, 5564,  346,  325,  307,
     5574, 5573, 5826, 5575,    0,  305,  276,    0, 5576,  267,

      262,  260,  258,  254,  251,    0,  229,  214, 5826, 5649,
     5653, 5657, 5661, 5665, 5669, 5671,  232, 5673, 5675, 5677,
     5679, 5681, 5683, 5685, 5687, 5689, 5691, 5695, 5697, 5699,
     5701, 5703, 5705, 5707, 5709, 5711, 5713, 5715, 5717, 5719,
     5721, 5723, 5725, 5727, 5729, 5731, 5733, 5735, 5737, 5739,
     5741, 5743, 5745, 5747,  231, 5749, 5751, 5753,  230, 5755,
     5757, 5759,  228,  226, 5761, 5763, 5765,  224, 5769, 5773,
     5775, 5777,  219,  217, 5781, 5785, 5787, 5789, 5791, 5793,
     5795,  214, 5797, 5799, 5801, 5803, 5805,  145, 5807, 5809,
     5811,  131, 5813,  117, 5815, 5817, 5819,   80, 5821

    } ;

static yyconst flex_int16_t yy_def[1100] =
    {   0,
     1009,    1, 1010, 1010, 1011, 1011, 1009, 1009, 1009, 1009,
     1009, 1012, 1013, 1014, 1009, 1009,   16, 1009, 1009, 1009,
       20,   20,   22,   22,   22,   22,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1009, 1009, 1009, 1009, 1009, 1009, 1012, 1009, 1013, 1014,
     1009, 1009, 1015, 1009, 1016,   54, 1009, 1017, 1009, 1009,
       26,   26,   62,   62,   62,   26,   26,   26,   26,   26,
       62,   26,   26,   62,   62,   26,   26,   26,   26,   26,
       62,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1009, 1015, 1009, 1018,  118,
     1019, 1009, 1017, 1009,  124,   62,  126,  126,   26,   26,
       26,   26,   26,  126,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1009,  182, 1020, 1021, 1022, 1009,  187, 1009, 1009,
     1009,  190,  126,  193,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1009,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      183,  183, 1021, 1023, 1024, 1009, 1009, 1009,  257, 1009,
     1009,  261, 1009,  263,  193,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1009,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1025, 1009, 1026, 1027, 1009, 1009,  329,
     1009,  331, 1009, 1009, 1009, 1009, 1009,  336,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1028,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1009, 1009,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1029, 1030, 1031, 1009, 1009,

     1009, 1009, 1009,  402, 1009, 1009, 1009,  407, 1009,  409,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1009,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1009, 1009,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1026, 1009, 1032, 1033,
     1009, 1009, 1009,  473, 1009,  475, 1009, 1009, 1009, 1009,
     1009,  480,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1009,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1009,
     1009,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1034, 1035, 1036, 1009, 1009, 1009, 1009, 1009,  548,
     1009, 1009,  552, 1009,  554,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1009,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1009, 1009,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26, 1037, 1009, 1038, 1039, 1009,
     1009,  611, 1009,  613, 1009, 1009, 1009, 1009,  617,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1009,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1009, 1009,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1040, 1041, 1042, 1009, 1009, 1009, 1009,  668,
     1009,  671, 1009,  673,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1009,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1009,

     1009,   26,   26,   26,   26,   26,   26, 1043, 1009, 1044,
     1045, 1009,  712, 1009,  714, 1009, 1009, 1009, 1009,  718,
       26,   26,   26,   26,   26,   26,   26, 1009,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1046, 1047, 1048, 1009, 1009,
     1009, 1009,  751, 1009,  754, 1009,  756,   26,   26,   26,
       26,   26, 1009,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1049, 1009, 1050, 1051,
     1009,  781, 1009,  783, 1009, 1009, 1009, 1009,  787,   26,
       26,   26,   26, 1009,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26, 1052, 1053, 1054, 1055, 1009,
     1009, 1009, 1009,  812, 1009,  815, 1009,  817,   26,   26,
       26,   26, 1009, 1009,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1056, 1009, 1057, 1009, 1058, 1009,
      840, 1009,  842, 1009, 1009, 1009, 1059,  846,   26,   26,
       26, 1009, 1009,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1060, 1061, 1009, 1062, 1063, 1009,
     1009, 1009,  872, 1009,  874, 1064,   26,   26,   26,   26,
       26, 1009, 1009,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1065, 1009, 1066, 1067, 1009,  898, 1009,

     1009, 1068,   26,   26,   26,   26,   26, 1009, 1069,   26,
     1070,   26,   26,   26,   26,   26,   26, 1071, 1009, 1072,
     1073, 1009, 1009, 1074,   26,   26,   26,   26,   26, 1075,
     1009, 1076,   26, 1077, 1078, 1079, 1009,   26,   26,   26,
       26, 1009, 1009, 1009,   26,   26,   26, 1080, 1009, 1081,
     1082,   26,   26,   26,   26, 1009, 1009, 1009, 1009,   26,
       26,   26,   26, 1083, 1084, 1085,   26,   26,   26,   26,
     1009, 1009, 1009,   26,   26,   26, 1086, 1009, 1087, 1088,
       26,   26,   26, 1009, 1009,   26,   26, 1089, 1090, 1091,
       26,   26, 1009,   26, 1092, 1009, 1093, 1094,   26, 1009,

     1095, 1096, 1089, 1009, 1097, 1098, 1099, 1009,    0, 1009,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009

    } ;

static yyconst flex_int16_t yy_nxt[5902] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   27,   27,   29,   30,   31,   32,   33,   27,
       34,   35,   36,   37,   38,   39,   27,   40,   27,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   27,   27,
       29,   30,   31,   32,   33,   27,   34,   35,   36,   37,
       38,   39,   27,   40,   27,   44,   45,   46,   45,   52,
     1009,   61,  843,   53,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   55,   62,   56,   56,   56,   56,   56,

       56,   84,   57,  111,   61,   61, 1009,   61,   61,   85,
       61,  127,   88,   44,   45,  128,   61,   80,   58, 1002,
       62,   56,   56,   56,   56,   56,   56,   84,   57,  111,
       61,   61,   61, 1000,   61,   85,   61,  127,   88,   46,
       45,  128,   61,   80,   58,   61,   61,  990,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   55,   61,   62,
       62,   63,   64,   62,   65,   61,   66,   61,   61,   61,
       67,   61,   68,   61,   61,   61,   61,   61,   61,   69,
       61,   61,   61,   61,   61,   62,   62,   63,   64,   62,
       65,   61,   66,   61,   61,   61,   67,   61,   68,   61,

       61,   61,   61,   61,   61,   69,   61,   61,   61,   61,
       61,   62,   62,   93,   62,   94,  966,  114,   61,  937,
       61,  936,   61,   61,   44,   45,  924,  129,  902,   70,
      897,   81,  876,  839,  123, 1006,  115,   62,   62,   93,
       62,   94,   61,  114,   61,   61,   61,   82,   61,   61,
     1006,   61,   61,  129,   86,   70,   71,   81,   62,   62,
       87,   62,  115,  132,   61,  130,   61,   72,   61,   61,
       73,   61, 1006,   82,   61,  998,   61,   61,   61, 1009,
       86, 1006,   71,  998,   62,   62,   87,   62, 1003,  132,
       61,  130,   61,   72,   89,   61,   73,  998,   90,  133,

       61,   95,   61,   62,   91,  131,   74,   75,   61,   92,
       61,   76,   96,  134,   61,   97,   77,   78,   61,  138,
       89,  139,   61,   79,   90,  133,  980,   95,  998,   62,
       91,  131,   74,   75,   61,   92,   61,   76,   96,  134,
       61,   97,   77,   78,   61,  138,  980,  139,   61,   79,
       61,   61,   61,   61,   61,   61,   61,   61,   61, 1009,
      145,   61,   61,   61,   61,   61,   61,  867,   61,   61,
      143,  980,   61,  951,  988,   61,  980,  951,  137,   98,
      112,   83,   61,   99,  113,   61,  145,   61,   61,   61,
       61,   61,   61,  100,   61,   61,  143,  101,   61,   61,

       61,   61,  102,  103,  137,   98,  112,   83,   61,   99,
      113,   61,  106,  107,  104,  105,  838,  140,  141,  100,
       61,  147,  108,  101,  142,   61,   61,  951,  102,  103,
      109,   61,   61,  144,  154,   61,  146,   61,   61,  110,
      104,  105,   61,  140,  141,  921,   61,  147,  108,  809,
      142,  951,  921,   61,  948,  921,  109,   61,   61,  144,
      154,   61,  146,   61,   61,  110,  869,  780,   61,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  119,   61,
      120,  120,  120,  120,  120,  120,  847,   57,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  152,   61,  921,

      869,  838,  122,  813,  869,  167,  120,  120,  120,  120,
      120,  120,   61,   57,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  152,   61,  125,  125,  125,  125,  125,
      125,  167,  838,  894,  788,  869,  867,  838,   61,  780,
      711,  752,  838,  780,  122,  719,  809,  160,  157,  780,
       61,  125,  125,  125,  125,  125,  125,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  119,  148,  126,  126,
      126,  126,  126,  126,  157,   66,   61,  711,  806,  794,
      158,   61,  135,  669,  149,   61,  153,   61,   61,  150,
      136,  780,  711,  148,  126,  126,  126,  126,  126,  126,

       61,   66,   61,  151,   61,  155,  158,   61,  135,  162,
      149,   61,  153,   61,   61,  150,  136,   61,  159,   61,
      156,  161,  169,  174,   61,   61,   61,   61,   61,  151,
       61,  155,  163,  168,  170,  162,   61,   61,  164,   61,
      165,  166,   61,   61,  159,   61,  156,  161,  169,   61,
       61,   61,  171,   61,  173,   61,  176,   61,  163,  168,
      170,  178,   61,   61,  164,   61,  165,  166,   61,  172,
       61,  175,   61,   61,  177,   61,  194,  179,  171,   61,
      173,   61,  176,   61,   61,  180,   61,  178,   61,  181,
      195,   61,  609,  618,  122,  172,   61,  175,   61,   61,

      177,  711,  194,  179,  609,   61,  122,  549,  711,   61,
       61,  180,   61,  609,   61,  181,  195,   61,  182,  182,
      182,  182,  182,  182,  182,  182,  182,   55,  200,  183,
      183,  183,  183,  183,  183,   61,   57,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  203,   61,  708,  481,
      122,  609,  470,  470,  200,  183,  183,  183,  183,  183,
      183,  403,   57,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  203,   61,  188,  188,  188,  188,  188,  188,
     1009,   61,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  609,  213,  470,  122,  337,  122,  470,  327,   61,

      188,  188,  188,  188,  188,  188,  189,   61,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  191,  213,  192,
      192,  192,  192,  192,  192,   61,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  542,  192,  192,  192,  192,  192,
      192,  193,  193,  193,  193,  193,  193,  193,  193,  193,
       55,  198,  193,  193,  193,  193,  193,  193,  196,  197,
      199,   61,  258,  470,   61,   61,  201,  204,   61,   61,
       61,   61,  202,  206,  207,  205,  220,  198,  193,  193,
      193,  193,  193,  193,  196,  197,  199,   61,   61,   61,

       61,   61,  201,  204,   61,   61,   61,   61,  202,  206,
      208,  205,  209,  327,  212,  210,   61,  214,   61,   61,
       61,  215,  217,  327,   61,   61,  191,  122,  211,   61,
       61,   61,  216,  218,   61,  219,  208,  226,  209,   61,
      212,  210,   61,  214,   61,   61,   61,  215,  217,   61,
       61,   61,  221,  222,  211,   61,   61,   61,  216,  218,
       61,  219,  223,   61,  327,   61,  232,   61,  224,  225,
       61,   61,  227,  228,  231,   61,   61,   61,  221,  222,
      186,   61,  229,   61,   61,  234,  230,  122,  223,   61,
      233,   61,  232,   61,  235, 1009,   61,   61,  227,  228,

      231,   61,   61,   61,  237,   61,  238,   61,  229,   61,
       61,  234,  230,  236,   61,  240,  233,   61,   61,   61,
      235,  239,  242,  327,   61,  241,   61,   61,   61,   61,
      237,   61,  238,  243,   61,   61,  244,  245,  247,  236,
       61,  246,  186,  248,   61,   61,  266,  239,  242,   61,
       61,  241,   61,   61,   61,   61,   61,   61,   61,  243,
       61,   61,  244,  245,  247,   61,  250,  246,  249,  248,
      274,   61,  266,  269,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,  324, 1009,  270,  297,
      122,   61,  250,  186,  249,  186,  274,   61,  186,  269,

       61,  122,   61,   61,   61,  122,   50,   51,   48,  271,
      116,   61,  251,  251,  251,  251,  251,  251,  251,  251,
      251,   55,   61,  252,  252,  252,  252,  252,  252, 1009,
       57,  259,  259,  259,  259,  259,  259,  259,  259,  259,
       60,   59,   51,   61,   48, 1009,   42,   42,   61,  252,
      252,  252,  252,  252,  252, 1009,   57,  256, 1009,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  258,   61,
      259,  259,  259,  259,  259,  259, 1009,   61,  262,  262,
      262,  262,  262,  262,  262,  262,  262, 1009,  286, 1009,
     1009, 1009, 1009, 1009, 1009,   61,  259,  259,  259,  259,

      259,  259,  189,   61,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  191,  286,  262,  262,  262,  262,  262,
      262,   61,  267,  251,  251,  251,  251,  251,  251,  251,
      251,  251, 1009, 1009, 1009, 1009, 1009, 1009,  285,   61,
      268,  262,  262,  262,  262,  262,  262,  263,  263,  263,
      263,  263,  263,  263,  263,  263,   61,  272,  264,  264,
      264,  264,  264,  264,  285,   61,  268, 1009, 1009, 1009,
     1009, 1009, 1009,   61,  276, 1009, 1009, 1009, 1009, 1009,
     1009, 1009,   61,  272,  264,  264,  264,  264,  264,  264,
      265,  265,  265,  265,  265,  265,  265,  265,  265,   61,

      275,  265,  265,  265,  265,  265,  265,  273,   61,   61,
      277,  278,   61,   61,  282,  280, 1009,  283,   61,   61,
       61, 1009, 1009,  296, 1009, 1009,  275,  265,  265,  265,
      265,  265,  265,  273,   61,   61,  277,  278,   61,   61,
      279,  280,  281,  283,   61,   61,   61,  284,   61,  294,
      287,  302,   61,   61,  288,   61,  295,   61,   61, 1009,
       61, 1009,   61,   61, 1009,  301,  279, 1009,  281,   61,
      298,   61, 1009,  284,   61,  294,  287,  302,   61,   61,
      288,   61,  295,   61,   61,  299,   61,   61,   61,   61,
      289,  301,  300,  290,   61,   61,  298,   61,  303,  291,

      292,  293, 1009,  304,  307,  305,  306, 1009,   61,   61,
      311,  299, 1009,   61,   61,   61,  289,   61,  300,  290,
       61,   61,   61,   61,  303,  291,  292,  293,  310,  304,
      307,  305,  306,   61,   61,   61,  311,  308,  309,   61,
       61,   61,  312,   61,   61,  313,  316,   61,   61,   61,
      315,  317,   61,   61,  310,  319,  323,  321,   61,   61,
      314,  320,   61,  308,  309,   61,   61,   61,  312,  322,
       61,  313,  316,  318,   61,   61,  315,  317,   61,   61,
      340,   61,   61,  321,   61,   61,  314,  320,   61,   61,
       61, 1009,   61,   61, 1009,  322, 1009, 1009, 1009,  318,

       61,   61, 1009, 1009,  346, 1009,  340,   61,   61, 1009,
     1009,   61, 1009, 1009, 1009,   61,   61,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  256, 1009,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  258,   61,  330,
      330,  330,  330,  330,  330, 1009, 1009,  330,  330,  330,
      330,  330,  330,  330,  330,  330, 1009, 1009, 1009, 1009,
     1009, 1009, 1009,   61,   61,  330,  330,  330,  330,  330,
      330,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      339,   61,  332,  332,  332,  332,  332,  332,  333,   61,
      260,  260,  260,  260,  260,  260,  260,  260,  260, 1009,

      347, 1009, 1009, 1009, 1009, 1009,  339,   61,  332,  332,
      332,  332,  332,  332,  189, 1009,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  191,  369,  335,  335,  335,
      335,  335,  335, 1009,   61,  335,  335,  335,  335,  335,
      335,  335,  335,  335, 1009,   61, 1009, 1009, 1009, 1009,
     1009, 1009,  369,  335,  335,  335,  335,  335,  335,  189,
       61,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      337,   61,  338,  338,  338,  338,  338,  338, 1009, 1009,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  341,
       61,   61,  348,   61,  342,  343,  344,  345,  338,  338,

      338,  338,  338,  338,   61,  350,   61,  352,   61,  351,
       61,  353,  349,  357,  355,  341,   61,   61,  348,   61,
      342,  343,  344,  345,   61,  356,   61,   61,  358,  359,
       61,  350,   61,  352,   61,  351,   61,  353,  349,  354,
      355,   61,   61,  361,  360,  362,   61,   61,  363, 1009,
       61,  356,   61,   61,   61,  359,   61,   61,   61,  364,
      365,  368,   61,  371, 1009,  354,  370,   61,   61,  361,
      360,  362,   61,   61,  363,   61,   61,  367,  372,   61,
       61,  366,   61,   61,   61,  364,  365,   61,   61,  371,
      373,  376,  370,  374,  375,   61,   61,   61,   61,  381,

     1009,   61,   61,  367,  372,   61,  377,  366,  378,   61,
       61,  380,  379,   61,   61,   61,  373,  376,   61,  374,
      375,   61,   61,   61,   61,   61,   61,  382,   61,  383,
      384,   61,  377,   61,  378,   61,   61,  380,  379,   61,
       61,   61,  385, 1009,   61,   61,  386,  388,   61,  387,
      390,   61,   61,  382,   61,  383,  384,   61,   61,   61,
      389,   61,   61,   61,   61,   61,  393,  414,  385,  391,
       61,   61,  386,  388,   61,  387,  390,  392,  394,   61,
      395,   61, 1009,   61,   61, 1009,  389,   61,   61,   61,
       61, 1009, 1009,  414,  419,  391,   61,   61,   61,  444,

       61, 1009,   61,  392,  394,   61,  395,   61,  399,   61,
      328,  328,  328,  328,  328,  328,  328,  328,  328, 1009,
      419,  445, 1009,   61,   61,  444,   61,  256,   61,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  258, 1009,
      401,  401,  401,  401,  401,  401, 1009,  445,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  401,  401,  401,  401,
      401,  401,  256, 1009,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  403,  412,  404,  404,  404,  404,  404,
      404, 1009,   61,  404,  404,  404,  404,  404,  404,  404,

      404,  404, 1009, 1009,   61, 1009, 1009,  411, 1009, 1009,
      412,  404,  404,  404,  404,  404,  404,  189,   61,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  191,  189,
       61,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      337,   61,  408,  408,  408,  408,  408,  408, 1009, 1009,
      408,  408,  408,  408,  408,  408,  408,  408,  408, 1009,
     1009, 1009, 1009, 1009, 1009, 1009, 1009,   61,  408,  408,
      408,  408,  408,  408,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  415,  416,  410,  410,  410,  410,  410,
      410,  413,  417,   61,  418,   61,   61,  423,  424,  426,

       61,   61,  427,   61,   61,   61, 1009, 1009,   61,  415,
      416,  410,  410,  410,  410,  410,  410,  413,  417,   61,
      418,   61,   61,  423,  424,  425,   61,   61,  427,   61,
       61,   61,  429,   61,   61,  420,  420,   61,  420,  420,
      420,  420,  420,  420,  421,  428,  420,  430,  434,   61,
     1009,  425,  431,   61, 1009,   61,  420,  420,  429,   61,
       61,   61,  432,   61,  433,   61, 1009,  436,   61,  435,
     1009,  428,  437,  430,  434,   61,   61,   61,  431,   61,
      439,   61,   61,  438, 1009, 1009,   61,   61,  432,  441,
      433,   61,   61,  436,   61,  435,  440,   61,  437,  442,

     1009,   61,   61,   61,   61,   61,  439,  443,   61,  438,
      449,  446,   61,   61,  447,  441,  452,   61,   61,   61,
      450,  448,  440,   61,   61,  442,  451,   61,  455,  453,
       61,   61,   61,  443,   61,   61,  449,  446,   61,   61,
      447,  454,  452,   61,  456,   61,  450,  448,  457,  459,
       61,  458,  451,   61,   61,  453,   61,  460,   61,   61,
       61,   61,   61, 1009,  461,   61,   61,  454, 1009,   61,
      462,  463,   61,  465,  457,  459,   61,  458,   61,   61,
       61, 1009,   61,  460,  464,   61,  486,  466,   61,   61,
      461,   61,   61,   61,  492,   61,  462,  463,   61,   61,

      494,   61,   61,  489,   61,  488,   61,   61, 1009, 1009,
      464, 1009,  486,  466, 1009,   61, 1009, 1009,   61,   61,
      492, 1009, 1009, 1009, 1009,   61,  494,   61, 1009,  489,
       61,  488,   61,   61,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  256,   61,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  258,  256,   61,  473,  473,  473,
      473,  473,  473,  473,  473,  473,  403,  520,  474,  474,
      474,  474,  474,  474, 1009,  487,  474,  474,  474,  474,
      474,  474,  474,  474,  474, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1009,  520,  474,  474,  474,  474,  474,  474,

      475,  475,  475,  475,  475,  475,  475,  475,  475,   61,
      499,  476,  476,  476,  476,  476,  476,  477,   61,  405,
      405,  405,  405,  405,  405,  405,  405,  405, 1009,  521,
     1009, 1009, 1009, 1009, 1009,   61,  499,  476,  476,  476,
      476,  476,  476,  189,   61,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  189,  521,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  337,   61,  479,  479,  479,
      479,  479,  479, 1009,   61,  479,  479,  479,  479,  479,
      479,  479,  479,  479, 1009, 1009, 1009, 1009, 1009, 1009,
     1009, 1009,   61,  479,  479,  479,  479,  479,  479,  189,

       61,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      481,  491,  482,  482,  482,  482,  482,  482, 1009, 1009,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  490,
       61,   61,  493, 1009,   61,  497, 1009,  491,  482,  482,
      482,  482,  482,  482,  483,  498, 1009,  484, 1009,  495,
      504,   61,   61,  485, 1009,  490,   61,   61,  493,  496,
       61,  497,   61,  503, 1009,  505,   61,   61,  497, 1009,
      483,  498,   61,  484,  500,  495,  504,   61,   61,  485,
      501,  507,  502,  508,  506,  496,  509,   61,   61,  503,
       61,  505,   61,   61,  497,  511,  510,  512,   61,   61,

      500,   61,   61,   61,  513,   61,  501,  507,  502,  508,
      506,   61,  509,   61,   61, 1009,   61,  514,  515,  516,
     1009,  511,  510,  512,  517,   61,  522,   61,   61,   61,
      513,   61, 1009,   61,   61,   61, 1009,   61,  518,   61,
       61,   61,  519,  514,  515,  516,   61,   61,   61,  523,
      517, 1009,  522,   61,  524,  525, 1009,   61,  532,   61,
       61,   61,  526,   61,  518,   61,  529,   61,  519,  531,
       61,  530,   61,   61,   61,  523,  527,   61,  533,   61,
      524,  525,   61,   61,  532, 1009,  528,   61,  526,   61,
       61,  534,  529,   61,  539,  531,   61,  530,   61,  535,

      536,   61,  527,   61,  533,  567,   61,   61,   61,  537,
      563,   61,  528,   61,  538,  541,   61,  534,   61,   61,
      539,   61,   61,   61,   61,  535,  536,   61,  540, 1009,
       61,  567,   61,   61, 1009,  537,  563,   61, 1009, 1009,
      538,  541, 1009, 1009,   61, 1009, 1009,   61,   61,   61,
     1009, 1009,   61, 1009,  540,  545,   61,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  256, 1009,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  256,   61,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  403, 1009,
      547,  547,  547,  547,  547,  547, 1009,  584,  547,  547,

      547,  547,  547,  547,  547,  547,  547,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  547,  547,  547,  547,
      547,  547,  256,  584,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  549,  559,  550,  550,  550,  550,  550,
      550, 1009,   61,  550,  550,  550,  550,  550,  550,  550,
      550,  550, 1009, 1009,   61, 1009, 1009, 1009, 1009, 1009,
      559,  550,  550,  550,  550,  550,  550,  189,   61,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  337,  189,
       61,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      481, 1009,  553,  553,  553,  553,  553,  553, 1009, 1009,

      553,  553,  553,  553,  553,  553,  553,  553,  553, 1009,
     1009,  561, 1009, 1009, 1009, 1009, 1009,  556,  553,  553,
      553,  553,  553,  553,  554,  554,  554,  554,  554,  554,
      554,  554,  554,   61,  557,  555,  555,  555,  555,  555,
      555,   61,  558,  556,  560,   61, 1009,   61,  564,   61,
       61,   61,  565,   61,  566, 1009,  562, 1009, 1009,   61,
      557,  555,  555,  555,  555,  555,  555,   61,  558,  569,
      560,   61,   61,   61,  564,   61,   61,   61,  565,   61,
      566,  568,  562,  570,  571,   61,  572,  574,  573,   61,
       61,  575,  576,   61,  577,  569,   61, 1009,   61,   61,

       61,   61,   61,  578,  579,   61,  581,  568,   61,  570,
      571,   61,  572,  574,  573,   61,   61,  575,  576,   61,
      577,   61,   61,  582,   61,   61,   61,   61,   61,  578,
      579,   61,   61,  583,   61,  580,   61,  585,   61,   61,
       61,  586,   61,   61,  587,  588,   61,   61,  589,  582,
       61,   61, 1009,  593, 1009, 1009, 1009,  590,   61,  583,
       61,  580,   61,  585,   61,   61,   61,  586,   61,   61,
      587,  588,   61,   61,  589,  591,  592,   61,  594,  597,
      595,  598,  596,  590,   61, 1009,   61,   61,   61,   61,
       61,   61,  601,  600,   61, 1009,   61,   61,   61,   61,

      599,  591,  592,   61,  594,  597,  595,  598,  596,   61,
       61,  602,   61,   61,   61,   61,   61,   61,  601,  600,
       61,  604,   61,   61,   61,   61,  599,  603,  605,   61,
      621,  622,  623,   61,  631,   61,   61,  602,   61,   61,
       61,   61,   61,   61, 1009, 1009, 1009,  604, 1009, 1009,
     1009,   61, 1009,  603,  605, 1009,  621,  622,  623,   61,
      631, 1009,   61, 1009, 1009,   61,   61,   61,   61,   61,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  256,
     1009,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      403,  256, 1009,  611,  611,  611,  611,  611,  611,  611,

      611,  611,  549, 1009,  612,  612,  612,  612,  612,  612,
     1009, 1009,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      612,  612,  612,  612,  612,  612,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  620,  645,  614,  614,  614,
      614,  614,  614, 1009,   61,  616,  616,  616,  616,  616,
      616,  616,  616,  616, 1009,   61, 1009, 1009, 1009, 1009,
     1009,  620,  645,  614,  614,  614,  614,  614,  614,  189,
       61,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      481,   61,  616,  616,  616,  616,  616,  616, 1009,   61,

      619,  619,  619,  619,  619,  619,  619,  619,  619, 1009,
     1009, 1009, 1009, 1009, 1009, 1009,  630, 1009,  616,  616,
      616,  616,  616,  616,  189,   61,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  618,  624,  619,  619,  619,
      619,  619,  619,  625,  626,   61, 1009,  627,   61, 1009,
       61, 1009,   61,   61,  634,   61,  628,  632,  633,  629,
     1009,   61,  624,  619,  619,  619,  619,  619,  619,  625,
      626,   61,   61,  627,   61,   61,   61,   61,   61,   61,
      634,   61,  628,  632,  633,  629,  635,   61,  636,  637,
      638,  639,   61,  640,   61,  642,   61,   61,   61,  641,

       61,   61,  644,   61,  646,  643,  647,  649,   61,   61,
      656,   61,  635,  650,  636,  637,  638,  639,   61,  640,
       61,   61,   61,   61,  648,  641,   61,   61,   61,   61,
      655,  643,  647,  649,   61,   61,   61,   61,   61,  650,
      652,  651,  653,   61,   61,   61,   61,   61,   61,  654,
      648,  657,   61,   61,   61,   61,  655, 1009,   61,   61,
      660,  658,   61,   61,   61,   61,  652,  651,  653,   61,
       61,   61,   61,   61,   61,  654,  659,  657,   61,   61,
       61,  661,  662,   61,   61,   61,  660,  658, 1009,   61,
     1009,   61, 1009,  675,   61,   61,   61,   61,   61,   61,

      676, 1009,  659, 1009, 1009,   61,   61,  661,  662,   61,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  675,
       61,   61,   61,   61,   61,  256,  676,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  549,  685,  667,  667,
      667,  667,  667,  667, 1009,  690,  667,  667,  667,  667,
      667,  667,  667,  667,  667, 1009,   61, 1009, 1009, 1009,
     1009, 1009, 1009,  685,  667,  667,  667,  667,  667,  667,
      256,  690,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  669,   61,  670,  670,  670,  670,  670,  670, 1009,
      681,  670,  670,  670,  670,  670,  670,  670,  670,  670,

     1009, 1009,   61, 1009, 1009,  687, 1009, 1009, 1009,  670,
      670,  670,  670,  670,  670,  189,  681,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  481,  189,   61,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  618,   61,
      672,  672,  672,  672,  672,  672, 1009, 1009,  672,  672,
      672,  672,  672,  672,  672,  672,  672, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009,   61,  672,  672,  672,  672,
      672,  672,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  680,  677,  674,  674,  674,  674,  674,  674,   61,
      678,  679,   61,   61, 1009,  683,  684,   61,  686,   61,

       61, 1009, 1009,  682, 1009,   61, 1009,  680,  677,  674,
      674,  674,  674,  674,  674,   61,  678,  679,   61,   61,
       61,  683,  684,   61,  686,   61,   61,  688,  693,  682,
      689,   61,  691,  692,   61,  694,  696,  695,   61,  698,
       61,  697, 1009,  700,   61,   61,   61,   61,   61,   61,
       61,   61,  699,  688,  693,   61,  689,   61,  691,  692,
       61,  694,  696,  695,   61,  698,   61,  697,   61,  700,
       61,   61,  701,   61,   61,   61,   61,   61,  699,   61,
       61,   61,   61,   61,  702,   61,  703,  704,  705,   61,
       61,  706,   61, 1009,   61,   61,   61,   61,  701,   61,

       61,  707,   61, 1009,   61,   61,   61, 1009,   61, 1009,
      702,   61,  703,  704,  705,   61,   61,  706,   61,   61,
     1009,   61,   61,   61, 1009,   61,   61,  707,   61,  256,
       61,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      549, 1009, 1009, 1009, 1009,   61,  256, 1009,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  669,  726,  713,
      713,  713,  713,  713,  713, 1009, 1009,  713,  713,  713,
      713,  713,  713,  713,  713,  713, 1009, 1009, 1009, 1009,
     1009, 1009, 1009,  728,  726,  713,  713,  713,  713,  713,
      713,  714,  714,  714,  714,  714,  714,  714,  714,  714,

      723,   61,  715,  715,  715,  715,  715,  715, 1009,  728,
      717,  717,  717,  717,  717,  717,  717,  717,  717, 1009,
     1009, 1009, 1009, 1009, 1009, 1009,  723,   61,  715,  715,
      715,  715,  715,  715,  189, 1009,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  618,  725,  717,  717,  717,
      717,  717,  717, 1009,   61,  720,  720,  720,  720,  720,
      720,  720,  720,  720, 1009, 1009, 1009, 1009, 1009, 1009,
     1009,  734,  725,  717,  717,  717,  717,  717,  717,  189,
       61,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      719,  721,  720,  720,  720,  720,  720,  720,  722,  724,

      727,  729,  730,   61,   61,   61,   61,   61,  731,  732,
       61,   61,  733,   61,   61,   61,   61,  721,  720,  720,
      720,  720,  720,  720,  722,  724,  727,  729,  730,   61,
       61,   61,   61,   61,  731,  732,   61,   61,  733,   61,
       61,   61,   61,  735,  736,  737,   61,  738,  739,  740,
       61,  744,  741,   61,  743,   61,  742, 1009,   61,   61,
      758,   61,   61,   61,   61,   61,   61,   61,   61,  735,
      736,  737,   61,  738,  739,  740,   61,  744,  741,   61,
      743,   61,  742,  745,   61,   61,  758,   61,   61,   61,
       61,   61,   61,   61,   61,   61, 1009,   61,  750,  750,

      750,  750,  750,  750,  750,  750,  750, 1009, 1009,  745,
      753,  753,  753,  753,  753,  753,  753,  753,  753, 1009,
     1009,   61,  256,   61,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  669,  763,  750,  750,  750,  750,  750,
      750,  189,   61,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  618,   61, 1009, 1009, 1009, 1009, 1009, 1009,
      763,  750,  750,  750,  750,  750,  750,  256,   61,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  752,   61,
      753,  753,  753,  753,  753,  753, 1009,   61,  755,  755,
      755,  755,  755,  755,  755,  755,  755, 1009,   61, 1009,

     1009, 1009, 1009, 1009, 1009,   61,  753,  753,  753,  753,
      753,  753,  189,   61,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  719,   61,  755,  755,  755,  755,  755,
      755,   61,  256, 1009,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  669, 1009, 1009, 1009, 1009,   61, 1009,
      759,  755,  755,  755,  755,  755,  755,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  760,  761,  757,  757,
      757,  757,  757,  757,   61,  764,  759,  766,  765,  767,
      762,   61,   61,   61,  772,  768,   61,   61, 1009, 1009,
      770,   61,  760,  761,  757,  757,  757,  757,  757,  757,

       61,  764,  769,  766,  765,  767,  762,   61,   61,   61,
       61,  768,   61,   61,  771,  773,  770,   61,   61,   61,
      774,  775,   61,  790,  776,   61,   61,  791,  769,   61,
       61,   61,   61,   61,   61,   61,   61,   61, 1009, 1009,
      771,  773, 1009, 1009,   61,   61,  774,  775,   61,  790,
      776,   61, 1009,  791, 1009,   61,   61,   61,   61,   61,
       61,   61,  256,   61,  781,  781,  781,  781,  781,  781,
      781,  781,  781,  752,   61,  782,  782,  782,  782,  782,
      782, 1009, 1009,  782,  782,  782,  782,  782,  782,  782,
      782,  782, 1009, 1009, 1009, 1009, 1009, 1009, 1009,  828,

       61,  782,  782,  782,  782,  782,  782,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  795,   61,  784,  784,
      784,  784,  784,  784, 1009,   61,  786,  786,  786,  786,
      786,  786,  786,  786,  786, 1009,   61, 1009, 1009, 1009,
     1009, 1009,  795,   61,  784,  784,  784,  784,  784,  784,
      189,   61,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  719,   61,  786,  786,  786,  786,  786,  786, 1009,
      852,  789,  789,  789,  789,  789,  789,  789,  789,  789,
     1009,  796, 1009, 1009, 1009, 1009, 1009, 1009, 1009,  786,
      786,  786,  786,  786,  786,  189,  852,  787,  787,  787,

      787,  787,  787,  787,  787,  787,  788,  797,  789,  789,
      789,  789,  789,  789,  792,   61,  793,   61,   61,  798,
      799, 1009,  801,   61,   61,  800,  820,   61,   61,  802,
       61,  803,   61,  797,  789,  789,  789,  789,  789,  789,
      792,   61,  793,   61,   61,  798,  799,   61,  801,   61,
       61,  800,  805,   61,   61,  802,   61,  803,   61,  804,
       61,   61,   61,  853,  832,  819,  821,   61,   61, 1009,
       61, 1009, 1009,   61, 1009, 1009, 1009, 1009,  805, 1009,
     1009,   61, 1009, 1009, 1009,  804,   61,   61,   61,  853,
      832,  819,  821,   61,   61,  256,   61,  810,  810,  810,

      810,  810,  810,  810,  810,  810,  752,   61,  811,  811,
      811,  811,  811,  811, 1009,   61,  811,  811,  811,  811,
      811,  811,  811,  811,  811, 1009,  851, 1009, 1009, 1009,
     1009, 1009, 1009, 1009,  811,  811,  811,  811,  811,  811,
      256,   61,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  813,  829,  814,  814,  814,  814,  814,  814, 1009,
       61,  814,  814,  814,  814,  814,  814,  814,  814,  814,
     1009, 1009,   61, 1009, 1009, 1009, 1009, 1009,  829,  814,
      814,  814,  814,  814,  814,  189,   61,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  719,  189,   61,  815,

      815,  815,  815,  815,  815,  815,  815,  815,  788, 1009,
      816,  816,  816,  816,  816,  816, 1009, 1009,  816,  816,
      816,  816,  816,  816,  816,  816,  816, 1009, 1009, 1009,
     1009, 1009, 1009,  882, 1009,  822,  816,  816,  816,  816,
      816,  816,  817,  817,  817,  817,  817,  817,  817,  817,
      817,   61,  823,  818,  818,  818,  818,  818,  818,  882,
      825,  822,   61, 1009, 1009, 1009,  834,   61,  824,  826,
      883,  856,  849,  830,  831,   61,   61,   61,  823,  818,
      818,  818,  818,  818,  818,  827,  825,   61,   61,   61,
       61,  833,  834,   61,  824,  826,  883,  856,  849,  830,

      831,   61,   61,   61, 1009, 1009, 1009, 1009, 1009, 1009,
     1009,  827, 1009,   61, 1009,   61,   61,  833, 1009, 1009,
     1009, 1009,  857,  858,  859, 1009,  860, 1009,  256,   61,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  752,
      256, 1009,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  813,   61,  841,  841,  841,  841,  841,  841, 1009,
     1009,  841,  841,  841,  841,  841,  841,  841,  841,  841,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,   61,  841,
      841,  841,  841,  841,  841,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  855,   61,  843,  843,  843,  843,

      843,  843, 1009,   61,  845,  845,  845,  845,  845,  845,
      845,  845,  845, 1009,   61, 1009, 1009, 1009, 1009, 1009,
      855,   61,  843,  843,  843,  843,  843,  843,  189,   61,
      844,  844,  844,  844,  844,  844,  844,  844,  844,  788,
       61,  845,  845,  845,  845,  845,  845, 1009, 1009,  848,
      848,  848,  848,  848,  848,  848,  848,  848, 1009,  850,
     1009, 1009, 1009, 1009, 1009, 1009, 1009,  845,  845,  845,
      845,  845,  845,  189,   61,  846,  846,  846,  846,  846,
      846,  846,  846,  846,  847,  850,  848,  848,  848,  848,
      848,  848,  854,  861,  862,   61,  863,  864,   61,  878,

       61, 1009,  877,   61,   61,  890,   61,   61,   61,   61,
      908,   61,  848,  848,  848,  848,  848,  848,  854,  861,
      862,   61,  863,  864,   61,  878, 1009,  888,  877,   61,
       61,  890,   61,   61,   61,   61,  908,   61,  256, 1009,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  813,
       61,  871,  871,  871,  871,  871,  871, 1009,  909,  871,
      871,  871,  871,  871,  871,  871,  871,  871, 1009,  913,
     1009, 1009, 1009,  889, 1009, 1009,   61,  871,  871,  871,
      871,  871,  871,  256,  909,  872,  872,  872,  872,  872,
      872,  872,  872,  872,   61,  884,  873,  873,  873,  873,

      873,  873, 1009,   61,  873,  873,  873,  873,  873,  873,
      873,  873,  873, 1009, 1009,   61, 1009, 1009, 1009, 1009,
       61,  884,  873,  873,  873,  873,  873,  873,  189,   61,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  788,
      189,   61,  874,  874,  874,  874,  874,  874,  874,  874,
      874,  847, 1009,  875,  875,  875,  875,  875,  875, 1009,
      885,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      893,  886,  891,  879,  887,  892,   61,  903,   61,  875,
      875,  875,  875,  875,  875,  880,  885,  910,   61,   61,
       61,   61,  881,   61,   61,  912,  893,   61,  891,  879,

       61,  892,   61,  903,   61, 1009, 1009, 1009, 1009, 1009,
     1009,  880,  930,  910,   61,   61,   61,   61,  881,   61,
       61, 1009,   61,   61, 1009,  256,   61,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  813,  256,  930,  898,
      898,  898,  898,  898,  898,  898,  898,  898,   61,  929,
      899,  899,  899,  899,  899,  899, 1009,   61,  899,  899,
      899,  899,  899,  899,  899,  899,  899, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009,  929,  899,  899,  899,  899,
      899,  899,  189,   61,  900,  900,  900,  900,  900,  900,
      900,  900,  900,  847,  904,  901,  901,  901,  901,  901,

      901, 1009,  914,  901,  901,  901,  901,  901,  901,  901,
      901,  901,   61,  905,  911,  915,  916, 1009, 1009,   61,
      904,  901,  901,  901,  901,  901,  901,  917,  906,   61,
      925,  928,   61,   61,  907,   61,   61,   61,   61,  905,
      911, 1009,  916,   61,   61,   61,   61, 1009,   61, 1009,
     1009, 1009, 1009,  917,  906,   61,  925,  928,   61,   61,
      907,   61,   61,   61, 1009, 1009, 1009,  926, 1009,   61,
       61, 1009,   61,  256,   61,  922,  922,  922,  922,  922,
      922,  922,  922,  922,   61,   61,  923,  923,  923,  923,
      923,  923, 1009,  926,  923,  923,  923,  923,  923,  923,

      923,  923,  923, 1009,   61,   61,  932,  927,   61, 1009,
       61,   61,  923,  923,  923,  923,  923,  923,  189,   61,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  847,
       61,   61,  932,  927,   61,  931,  931,   61,  931,  931,
      931,  931,  931,  931,  939,   61,  931,   61,  940, 1009,
      943,  944, 1009, 1009, 1009, 1009,  931,  931,  938,  941,
      958,  953,  256,   61,  472,  472,  472,  472,  472,  472,
      472,  472,  472,   61,   61,   61,  943,  944,   61,   61,
      946,  947,   61, 1009,  938,  941,  958,  953,  942,  942,
     1009,  942,  942,  942,  942,  942,  942,   61,  952,  942,

       61,   61,  959,   61,   61,   61,  946,  947,   61,  942,
      942,  954,  955,  956,  957,  962,   61, 1009,   61,  960,
      961,  967,   61,   61,  952,  963,  970,  968,  959,   61,
      971,  972,   61,   61,  973,   61,   61,  954,  955,  956,
      957,  962,   61,  969,   61,  960,  961,  967,   61,   61,
      974,  963,  970,  968,  976,   61,  971,  972,   61,   61,
      973,   61,   61,   61,  975,   61,  981,  983,   61,  969,
       61,   61,  984,   61,  982,   61,  974,   61,  985,   61,
      976,   61,  986,   61,  992,   61,  987,   61,  991,   61,
      975,   61,  981,  983,   61,   61,   61,   61,  984,   61,

      982,  993,  994,   61,  985,   61,   61,   61,  986,   61,
      992,   61,  987,   61,  991,  999,   61,   61,   61,   61,
     1009,   61,   61, 1009, 1009, 1009, 1009,  993,  994, 1009,
     1009, 1009,   61,   61, 1009, 1009, 1009, 1009, 1009, 1009,
     1009,  999,   61,   61,   61,   61, 1009, 1009,   61,   41,
       41,   41,   41,   43,   43,   43,   43,   47,   47,   47,
       47,   49, 1009,   49,   49,   50,   50,   50,   50,  117,
     1009,  117,  117,  121,  121,  184,  184,  185,  185,  253,
      253,  254,  254,  255,  255,  325,  325,  326,  326,  396,
      396,  397,  397,  398,  398,  422, 1009,  422,  422,  467,

      467,  468,  468,  469,  469,  543,  543,  544,  544,  606,
      606,  607,  607,  608,  608,  663,  663,  664,  664,  665,
      665,  543,  543,  709,  709,  710,  710,  746,  746,  747,
      747,  748,  748,  777,  777,  778,  778,  779,  779,  664,
      664,  807,  807,  808,  808,  835,  835,  836,  836,  837,
      837,  865,  865,  866,  866,  868,  868,  747,  747,  895,
      895,  896,  896,  918,  918,  919,  919,  920,  920,  931,
     1009,  931,  931,  933, 1009,  933,  933,  934,  934,  935,
      935,  942, 1009,  942,  942,  945, 1009,  945,  945,  807,
      807,  949,  949,  950,  950,  964,  964,  965,  965,  977,

      977,  978,  978,  979,  979,  866,  866,  989,  989,  995,
      995,  996,  996,  997,  997, 1001, 1001, 1004, 1004, 1005,
     1005, 1007, 1007, 1008, 1008,    7, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,

     1009
    } ;

static yyconst flex_int16_t yy_chk[5902] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   10,   10,   11,   11,   15,
       17,   27, 1098,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   24,   16,   16,   16,   16,   16,

       16,   28,   16,   37,   61,   24,   17,   27,   24,   28,
       37,   63,   30,   44,   44,   64,   28,   24,   16, 1094,
       24,   16,   16,   16,   16,   16,   16,   28,   16,   37,
       61,   24,   30, 1092,   24,   28,   37,   63,   30,   45,
       45,   64,   28,   24,   16,   20,   20, 1088,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   30,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   21,   21,   32,   21,   32, 1082,   39,   32, 1074,
       21, 1073,   21,   39,   46,   46, 1068,   65, 1064,   21,
     1063,   25, 1059, 1055, 1017, 1008,   40,   21,   21,   32,
       21,   32,   25,   39,   32,   25,   21,   25,   21,   39,
     1007,   66,   40,   65,   29,   21,   22,   25,   22,   22,
       29,   22,   40,   69,   69,   67,   29,   22,   25,   22,
       22,   25, 1005,   25,   67, 1004,   22,   66,   40, 1003,
       29, 1002,   22, 1001,   22,   22,   29,   22, 1000,   69,
       69,   67,   29,   22,   31,   22,   22,  997,   31,   70,

       67,   33,   22,   23,   31,   68,   23,   23,   70,   31,
       31,   23,   33,   71,   23,   33,   23,   23,   33,   74,
       31,   75,   68,   23,   31,   70,  996,   33,  990,   23,
       31,   68,   23,   23,   70,   31,   31,   23,   33,   71,
       23,   33,   23,   23,   33,   74,  989,   75,   68,   23,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       81,   26,   26,   26,   26,   26,   26,  988,   26,   91,
       79,  979,   26,  978,  977,   26,  966,  965,   73,   34,
       38,   26,   79,   34,   38,   73,   81,   26,   26,   26,
       26,   26,   26,   34,   26,   91,   79,   35,   26,   34,

       38,   26,   35,   35,   73,   34,   38,   26,   79,   34,
       38,   73,   36,   36,   35,   35,  964,   76,   77,   34,
       77,   83,   36,   35,   78,   34,   38,  950,   35,   35,
       36,   76,   78,   80,   88,   88,   82,   83,   80,   36,
       35,   35,   36,   76,   77,  949,   77,   83,   36,  948,
       78,  936,  935,   82,  934,  920,   36,   76,   78,   80,
       88,   88,   82,   83,   80,   36,  919,  918,   36,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   82,
       54,   54,   54,   54,   54,   54,  901,   54,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   86,   94,  897,

      896,  895,  894,  871,  868,  100,   54,   54,   54,   54,
       54,   54,   86,   54,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   86,   94,   59,   59,   59,   59,   59,
       59,  100,  866,  865,  845,  839,  838,  837,   86,  836,
      835,  811,  808,  807,  806,  786,  780,   95,   90,  779,
       90,   59,   59,   59,   59,   59,   59,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   84,   62,   62,
       62,   62,   62,   62,   90,   62,   90,  778,  777,  763,
       92,   95,   72,  750,   85,   92,   87,   84,   62,   85,
       72,  748,  747,   84,   62,   62,   62,   62,   62,   62,

       87,   62,   72,   85,   85,   89,   92,   95,   72,   97,
       85,   92,   87,   84,   62,   85,   72,   89,   93,   93,
       89,   96,  102,  108,  106,   97,   87,   96,   72,   85,
       85,   89,   98,  101,  103,   97,  101,   98,   99,  103,
       99,   99,  102,   89,   93,   93,   89,   96,  102,   99,
      106,   97,  104,   96,  105,  107,  110,  108,   98,  101,
      103,  112,  101,   98,   99,  103,   99,   99,  102,  104,
      112,  109,  104,  105,  111,   99,  127,  113,  104,  109,
      105,  107,  110,  108,  113,  114,  111,  112,  114,  115,
      128,  115,  746,  717,  711,  104,  112,  109,  104,  105,

      111,  710,  127,  113,  709,  109,  708,  667,  665,  131,
      113,  114,  111,  664,  114,  115,  128,  115,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  134,  118,
      118,  118,  118,  118,  118,  131,  118,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  137,  137,  663,  616,
      609,  608,  607,  606,  134,  118,  118,  118,  118,  118,
      118,  547,  118,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  137,  137,  122,  122,  122,  122,  122,  122,
      125,  181,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  544,  146,  543,  542,  479,  470,  469,  468,  146,

      122,  122,  122,  122,  122,  122,  124,  181,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  146,  124,
      124,  124,  124,  124,  124,  146,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  467,  124,  124,  124,  124,  124,
      124,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  132,  126,  126,  126,  126,  126,  126,  129,  130,
      133,  129,  401,  398,  132,  130,  135,  138,  135,  138,
      133,  139,  136,  140,  141,  139,  153,  132,  126,  126,
      126,  126,  126,  126,  129,  130,  133,  129,  136,  140,

      132,  130,  135,  138,  135,  138,  133,  139,  136,  140,
      142,  139,  143,  397,  145,  144,  145,  147,  141,  147,
      153,  148,  150,  396,  136,  140,  335,  327,  144,  143,
      142,  144,  149,  151,  150,  152,  142,  158,  143,  148,
      145,  144,  145,  147,  141,  147,  153,  148,  150,  151,
      149,  152,  154,  155,  144,  143,  142,  144,  149,  151,
      150,  152,  156,  156,  326,  148,  162,  155,  157,  157,
      154,  158,  159,  160,  161,  151,  149,  152,  154,  155,
      325,  162,  160,  161,  159,  164,  160,  324,  156,  156,
      163,  160,  162,  155,  165,  265,  154,  158,  159,  160,

      161,  164,  163,  157,  167,  167,  168,  162,  160,  161,
      159,  164,  160,  166,  165,  170,  163,  160,  168,  166,
      165,  169,  172,  255,  169,  171,  171,  164,  163,  157,
      167,  167,  168,  173,  172,  173,  174,  175,  177,  166,
      165,  176,  254,  178,  168,  166,  194,  169,  172,  170,
      169,  171,  171,  175,  174,  178,  177,  176,  196,  173,
      172,  173,  174,  175,  177,  205,  180,  176,  179,  178,
      202,  197,  194,  197,  209,  170,  180,  202,  211,  175,
      174,  178,  177,  176,  196,  179,  253,  252,  198,  224,
      186,  205,  180,  185,  179,  184,  202,  197,  121,  197,

      209,  119,  180,  202,  211,   55,   51,   50,   47,  199,
       42,  179,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  198,  182,  182,  182,  182,  182,  182,  188,
      182,  188,  188,  188,  188,  188,  188,  188,  188,  188,
       19,   18,   14,  199,   12,    7,    4,    3,  198,  182,
      182,  182,  182,  182,  182,    0,  182,  187,    0,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  199,
      187,  187,  187,  187,  187,  187,  192,  231,  192,  192,
      192,  192,  192,  192,  192,  192,  192,    0,  217,    0,
        0,    0,    0,    0,    0,  217,  187,  187,  187,  187,

      187,  187,  190,  231,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  217,  190,  190,  190,  190,  190,
      190,  217,  195,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,    0,    0,    0,    0,    0,  216,  216,
      195,  190,  190,  190,  190,  190,  190,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  195,  200,  191,  191,
      191,  191,  191,  191,  216,  216,  195,    0,    0,    0,
        0,    0,    0,  200,  204,    0,    0,    0,    0,    0,
        0,    0,  195,  200,  191,  191,  191,  191,  191,  191,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  200,

      203,  193,  193,  193,  193,  193,  193,  201,  204,  201,
      206,  207,  206,  207,  213,  210,    0,  214,  210,  214,
      203,    0,    0,  223,    0,    0,  203,  193,  193,  193,
      193,  193,  193,  201,  204,  201,  206,  207,  206,  207,
      208,  210,  212,  214,  210,  214,  203,  215,  213,  221,
      218,  228,  208,  218,  219,  219,  222,  223,  212,    0,
      228,    0,  221,  215,    0,  227,  208,    0,  212,  222,
      225,  227,    0,  215,  213,  221,  218,  228,  208,  218,
      219,  219,  222,  223,  212,  225,  228,  225,  221,  215,
      220,  227,  226,  220,  226,  222,  225,  227,  229,  220,

      220,  220,    0,  230,  234,  232,  233,    0,  220,  230,
      238,  225,    0,  225,  229,  238,  220,  246,  226,  220,
      226,  232,  234,  233,  229,  220,  220,  220,  237,  230,
      234,  232,  233,  235,  220,  230,  238,  235,  236,  236,
      229,  238,  239,  246,  237,  240,  242,  232,  234,  233,
      241,  243,  243,  242,  237,  245,  250,  248,  239,  235,
      240,  247,  240,  235,  236,  236,  241,  269,  239,  249,
      237,  240,  242,  244,  248,  249,  241,  243,  243,  242,
      267,  247,  244,  248,  239,  267,  240,  247,  240,  245,
      250,    0,  241,  269,    0,  249,    0,    0,    0,  244,

      248,  249,    0,    0,  272,    0,  267,  247,  244,    0,
        0,  267,    0,    0,    0,  245,  250,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  257,    0,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  272,  257,
      257,  257,  257,  257,  257,  259,    0,  259,  259,  259,
      259,  259,  259,  259,  259,  259,    0,    0,    0,    0,
        0,    0,    0,  281,  272,  257,  257,  257,  257,  257,
      257,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      266,  266,  258,  258,  258,  258,  258,  258,  260,  281,
      260,  260,  260,  260,  260,  260,  260,  260,  260,    0,

      273,    0,    0,    0,    0,    0,  266,  266,  258,  258,
      258,  258,  258,  258,  261,    0,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  295,  261,  261,  261,
      261,  261,  261,  262,  273,  262,  262,  262,  262,  262,
      262,  262,  262,  262,    0,  295,    0,    0,    0,    0,
        0,    0,  295,  261,  261,  261,  261,  261,  261,  263,
      273,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  295,  263,  263,  263,  263,  263,  263,  264,    0,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  268,
      308,  268,  274,  274,  270,  270,  270,  271,  263,  263,

      263,  263,  263,  263,  270,  276,  271,  277,  277,  276,
      276,  278,  275,  283,  280,  268,  308,  268,  274,  274,
      270,  270,  270,  271,  275,  282,  280,  278,  284,  285,
      270,  276,  271,  277,  277,  276,  276,  278,  275,  279,
      280,  285,  282,  287,  286,  288,  279,  283,  289,    0,
      275,  282,  280,  278,  289,  285,  286,  288,  287,  290,
      291,  294,  284,  297,    0,  279,  296,  285,  282,  287,
      286,  288,  279,  283,  289,  290,  291,  293,  297,  296,
      289,  292,  286,  288,  287,  290,  291,  292,  284,  297,
      298,  301,  296,  299,  300,  294,  298,  293,  301,  306,

        0,  290,  291,  293,  297,  296,  302,  292,  303,  299,
      300,  305,  304,  292,  305,  303,  298,  301,  304,  299,
      300,  294,  298,  293,  301,  310,  302,  307,  307,  309,
      311,  311,  302,  306,  303,  299,  300,  305,  304,  312,
      305,  303,  313,    0,  304,  309,  314,  316,  313,  315,
      318,  310,  302,  307,  307,  309,  311,  311,  315,  306,
      317,  316,  314,  317,  319,  312,  321,  342,  313,  319,
      318,  309,  314,  316,  313,  315,  318,  320,  322,  320,
      323,  322,    0,  342,  315,    0,  317,  316,  314,  317,
      319,    0,    0,  342,  347,  319,  318,  323,  354,  371,

      321,    0,  347,  320,  322,  320,  323,  322,  328,  342,
      328,  328,  328,  328,  328,  328,  328,  328,  328,    0,
      347,  372,    0,  323,  354,  371,  321,  329,  347,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,    0,
      329,  329,  329,  329,  329,  329,  330,  372,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  329,  329,  329,  329,
      329,  329,  331,    0,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  340,  331,  331,  331,  331,  331,
      331,  332,  376,  332,  332,  332,  332,  332,  332,  332,

      332,  332,    0,    0,  340,    0,    0,  339,    0,    0,
      340,  331,  331,  331,  331,  331,  331,  334,  376,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  336,
      340,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  339,  336,  336,  336,  336,  336,  336,  338,    0,
      338,  338,  338,  338,  338,  338,  338,  338,  338,    0,
        0,    0,    0,    0,    0,    0,    0,  339,  336,  336,
      336,  336,  336,  336,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  343,  344,  337,  337,  337,  337,  337,
      337,  341,  345,  341,  346,  343,  346,  349,  350,  352,

      344,  350,  353,  384,  349,  353,    0,    0,  345,  343,
      344,  337,  337,  337,  337,  337,  337,  341,  345,  341,
      346,  343,  346,  349,  350,  351,  344,  350,  353,  384,
      349,  353,  356,  352,  345,  348,  348,  351,  348,  348,
      348,  348,  348,  348,  348,  355,  348,  357,  361,  356,
        0,  351,  358,  355,    0,  357,  348,  348,  356,  352,
      358,  359,  359,  351,  360,  360,    0,  363,  361,  362,
        0,  355,  364,  357,  361,  356,  363,  362,  358,  355,
      366,  357,  365,  365,    0,    0,  358,  359,  359,  368,
      360,  360,  364,  363,  361,  362,  367,  366,  364,  369,

        0,  368,  363,  362,  367,  369,  366,  370,  365,  365,
      377,  373,  377,  370,  374,  368,  380,  374,  364,  373,
      378,  375,  367,  366,  375,  369,  379,  368,  382,  380,
      367,  369,  380,  370,  378,  379,  377,  373,  377,  370,
      374,  381,  380,  374,  383,  373,  378,  375,  385,  387,
      375,  386,  379,  388,  386,  380,  385,  389,  380,  381,
      378,  379,  382,    0,  390,  387,  390,  381,    0,  389,
      391,  392,  392,  394,  385,  387,  391,  386,  383,  388,
      386,    0,  385,  389,  393,  381,  412,  395,  382,  412,
      390,  387,  390,  393,  418,  389,  391,  392,  392,  395,

      420,  414,  391,  415,  383,  414,  418,  394,    0,    0,
      393,    0,  412,  395,    0,  412,    0,    0,  415,  393,
      418,    0,    0,    0,    0,  395,  420,  414,    0,  415,
      423,  414,  418,  394,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  400,  415,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  402,  423,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  444,  402,  402,
      402,  402,  402,  402,  404,  413,  404,  404,  404,  404,
      404,  404,  404,  404,  404,    0,    0,    0,    0,    0,
        0,    0,    0,  444,  402,  402,  402,  402,  402,  402,

      403,  403,  403,  403,  403,  403,  403,  403,  403,  413,
      425,  403,  403,  403,  403,  403,  403,  405,  425,  405,
      405,  405,  405,  405,  405,  405,  405,  405,    0,  445,
        0,    0,    0,    0,    0,  413,  425,  403,  403,  403,
      403,  403,  403,  406,  425,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  407,  445,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  451,  407,  407,  407,
      407,  407,  407,  408,  463,  408,  408,  408,  408,  408,
      408,  408,  408,  408,    0,    0,    0,    0,    0,    0,
        0,    0,  451,  407,  407,  407,  407,  407,  407,  409,

      463,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  417,  409,  409,  409,  409,  409,  409,  410,    0,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  416,
      416,  417,  419,    0,  422,  422,    0,  417,  409,  409,
      409,  409,  409,  409,  411,  424,    0,  411,    0,  421,
      428,  424,  419,  411,    0,  416,  416,  417,  419,  421,
      422,  422,  427,  427,    0,  429,  428,  421,  421,    0,
      411,  424,  429,  411,  426,  421,  428,  424,  419,  411,
      426,  431,  426,  432,  430,  421,  433,  426,  427,  427,
      430,  429,  428,  421,  421,  435,  434,  436,  429,  432,

      426,  431,  433,  436,  437,  437,  426,  431,  426,  432,
      430,  435,  433,  426,  434,    0,  430,  438,  439,  440,
        0,  435,  434,  436,  441,  432,  446,  431,  433,  436,
      437,  437,    0,  438,  439,  440,    0,  435,  442,  441,
      434,  442,  443,  438,  439,  440,  446,  443,  447,  447,
      441,    0,  446,  448,  448,  449,    0,  449,  456,  438,
      439,  440,  450,  450,  442,  441,  453,  442,  443,  455,
      456,  454,  446,  443,  447,  447,  452,  454,  457,  448,
      448,  449,  453,  449,  456,    0,  452,  455,  450,  450,
      458,  458,  453,  452,  464,  455,  456,  454,  457,  459,

      460,  459,  452,  454,  457,  494,  464,  460,  453,  461,
      490,  461,  452,  455,  462,  466,  458,  458,  466,  452,
      464,  462,  509,  490,  457,  459,  460,  459,  465,    0,
      465,  494,  464,  460,    0,  461,  490,  461,    0,    0,
      462,  466,    0,    0,  466,    0,    0,  462,  509,  490,
        0,    0,  511,    0,  465,  471,  465,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  472,    0,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  473,  511,  473,
      473,  473,  473,  473,  473,  473,  473,  473,  473,    0,
      473,  473,  473,  473,  473,  473,  474,  513,  474,  474,

      474,  474,  474,  474,  474,  474,  474,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  473,  473,  473,  473,
      473,  473,  475,  513,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  486,  475,  475,  475,  475,  475,
      475,  476,  515,  476,  476,  476,  476,  476,  476,  476,
      476,  476,    0,    0,  486,    0,    0,    0,    0,    0,
      486,  475,  475,  475,  475,  475,  475,  478,  515,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  480,
      486,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,    0,  480,  480,  480,  480,  480,  480,  482,    0,

      482,  482,  482,  482,  482,  482,  482,  482,  482,    0,
        0,  488,    0,    0,    0,    0,    0,  483,  480,  480,
      480,  480,  480,  480,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  483,  484,  481,  481,  481,  481,  481,
      481,  484,  485,  483,  487,  488,    0,  492,  491,  485,
      491,  493,  492,  487,  493,    0,  489,    0,    0,  483,
      484,  481,  481,  481,  481,  481,  481,  484,  485,  496,
      487,  488,  489,  492,  491,  485,  491,  493,  492,  487,
      493,  495,  489,  497,  498,  498,  499,  501,  500,  496,
      495,  502,  503,  501,  504,  496,  500,    0,  489,  497,

      502,  504,  499,  505,  506,  505,  508,  495,  503,  497,
      498,  498,  499,  501,  500,  496,  495,  502,  503,  501,
      504,  506,  500,  510,  516,  497,  502,  504,  499,  505,
      506,  505,  507,  512,  503,  507,  512,  514,  517,  510,
      508,  518,  519,  518,  520,  521,  514,  506,  522,  510,
      516,  525,    0,  527,    0,    0,    0,  523,  507,  512,
      522,  507,  512,  514,  517,  510,  508,  518,  519,  518,
      520,  521,  514,  523,  522,  524,  526,  525,  528,  531,
      529,  532,  530,  523,  537,    0,  522,  527,  531,  526,
      530,  524,  535,  534,  535,    0,  528,  529,  532,  523,

      533,  524,  526,  541,  528,  531,  529,  532,  530,  534,
      537,  536,  533,  527,  531,  526,  530,  524,  535,  534,
      535,  539,  528,  529,  532,  536,  533,  538,  540,  541,
      557,  558,  559,  540,  567,  534,  539,  536,  533,  557,
      559,  558,  585,  538,    0,    0,    0,  539,    0,    0,
        0,  536,    0,  538,  540,    0,  557,  558,  559,  540,
      567,    0,  539,    0,    0,  557,  559,  558,  585,  538,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  546,
        0,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  548,    0,  548,  548,  548,  548,  548,  548,  548,

      548,  548,  548,    0,  548,  548,  548,  548,  548,  548,
      550,    0,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      548,  548,  548,  548,  548,  548,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  556,  581,  549,  549,  549,
      549,  549,  549,  553,  581,  553,  553,  553,  553,  553,
      553,  553,  553,  553,    0,  556,    0,    0,    0,    0,
        0,  556,  581,  549,  549,  549,  549,  549,  549,  552,
      581,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  556,  552,  552,  552,  552,  552,  552,  555,  586,

      555,  555,  555,  555,  555,  555,  555,  555,  555,    0,
        0,    0,    0,    0,    0,    0,  566,    0,  552,  552,
      552,  552,  552,  552,  554,  586,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  560,  554,  554,  554,
      554,  554,  554,  561,  562,  562,    0,  563,  560,    0,
      566,    0,  561,  563,  570,  569,  564,  568,  569,  565,
        0,  570,  560,  554,  554,  554,  554,  554,  554,  561,
      562,  562,  564,  563,  560,  565,  566,  568,  561,  563,
      570,  569,  564,  568,  569,  565,  571,  570,  572,  573,
      574,  575,  571,  576,  572,  578,  576,  574,  564,  577,

      577,  565,  580,  568,  582,  579,  583,  587,  583,  573,
      595,  575,  571,  588,  572,  573,  574,  575,  571,  576,
      572,  579,  576,  574,  584,  577,  577,  584,  592,  578,
      594,  579,  583,  587,  583,  573,  580,  575,  582,  588,
      590,  589,  591,  590,  595,  591,  594,  579,  589,  593,
      584,  596,  598,  584,  592,  578,  594,    0,  593,  596,
      600,  597,  580,  600,  582,  601,  590,  589,  591,  590,
      595,  591,  594,  597,  589,  593,  599,  596,  598,  602,
      603,  604,  605,  599,  593,  596,  600,  597,    0,  600,
        0,  601,    0,  620,  629,  620,  621,  604,  605,  597,

      621,    0,  599,    0,    0,  602,  603,  604,  605,  599,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  620,
      629,  620,  621,  604,  605,  611,  621,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  631,  611,  611,
      611,  611,  611,  611,  612,  636,  612,  612,  612,  612,
      612,  612,  612,  612,  612,    0,  640,    0,    0,    0,
        0,    0,    0,  631,  611,  611,  611,  611,  611,  611,
      613,  636,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  640,  613,  613,  613,  613,  613,  613,  614,
      626,  614,  614,  614,  614,  614,  614,  614,  614,  614,

        0,    0,  626,    0,    0,  633,    0,    0,    0,  613,
      613,  613,  613,  613,  613,  615,  626,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  617,  626,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  633,
      617,  617,  617,  617,  617,  617,  619,    0,  619,  619,
      619,  619,  619,  619,  619,  619,  619,    0,    0,    0,
        0,    0,    0,    0,    0,  633,  617,  617,  617,  617,
      617,  617,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  625,  622,  618,  618,  618,  618,  618,  618,  622,
      623,  624,  623,  624,    0,  628,  630,  625,  632,  628,

      632,    0,    0,  627,    0,  630,    0,  625,  622,  618,
      618,  618,  618,  618,  618,  622,  623,  624,  623,  624,
      627,  628,  630,  625,  632,  628,  632,  634,  639,  627,
      635,  630,  637,  638,  643,  641,  644,  642,  647,  646,
      639,  645,    0,  649,  634,  644,  627,  645,  635,  638,
      637,  646,  648,  634,  639,  641,  635,  642,  637,  638,
      643,  641,  644,  642,  647,  646,  639,  645,  648,  649,
      634,  644,  650,  645,  635,  638,  637,  646,  648,  651,
      652,  641,  653,  642,  654,  655,  656,  657,  658,  659,
      660,  661,  661,    0,  648,  656,  654,  676,  650,  657,

      678,  662,  682,    0,  658,  651,  652,    0,  653,    0,
      654,  655,  656,  657,  658,  659,  660,  661,  661,  662,
        0,  656,  654,  676,    0,  657,  678,  662,  682,  666,
      658,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,    0,    0,    0,    0,  662,  668,    0,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  683,  668,
      668,  668,  668,  668,  668,  670,    0,  670,  670,  670,
      670,  670,  670,  670,  670,  670,    0,    0,    0,    0,
        0,    0,    0,  685,  683,  668,  668,  668,  668,  668,
      668,  669,  669,  669,  669,  669,  669,  669,  669,  669,

      679,  679,  669,  669,  669,  669,  669,  669,  672,  685,
      672,  672,  672,  672,  672,  672,  672,  672,  672,    0,
        0,    0,    0,    0,    0,    0,  679,  679,  669,  669,
      669,  669,  669,  669,  671,    0,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  681,  671,  671,  671,
      671,  671,  671,  674,  681,  674,  674,  674,  674,  674,
      674,  674,  674,  674,    0,    0,    0,    0,    0,    0,
        0,  691,  681,  671,  671,  671,  671,  671,  671,  673,
      681,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  675,  673,  673,  673,  673,  673,  673,  677,  680,

      684,  686,  687,  686,  677,  691,  680,  675,  688,  689,
      692,  687,  690,  690,  688,  689,  684,  675,  673,  673,
      673,  673,  673,  673,  677,  680,  684,  686,  687,  686,
      677,  691,  680,  675,  688,  689,  692,  687,  690,  690,
      688,  689,  684,  693,  694,  695,  699,  696,  697,  698,
      693,  705,  702,  694,  704,  704,  703,    0,  705,  707,
      721,  723,  695,  696,  721,  697,  698,  702,  703,  693,
      694,  695,  699,  696,  697,  698,  693,  705,  702,  694,
      704,  704,  703,  706,  705,  707,  721,  723,  695,  696,
      721,  697,  698,  702,  703,  706,  713,  724,  713,  713,

      713,  713,  713,  713,  713,  713,  713,    0,  715,  706,
      715,  715,  715,  715,  715,  715,  715,  715,  715,    0,
        0,  706,  712,  724,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  728,  712,  712,  712,  712,  712,
      712,  716,  729,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  733,    0,    0,    0,    0,    0,    0,
      728,  712,  712,  712,  712,  712,  712,  714,  729,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  733,
      714,  714,  714,  714,  714,  714,  720,  735,  720,  720,
      720,  720,  720,  720,  720,  720,  720,    0,  736,    0,

        0,    0,    0,    0,    0,  743,  714,  714,  714,  714,
      714,  714,  718,  735,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  736,  718,  718,  718,  718,  718,
      718,  743,  749,    0,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,    0,    0,    0,    0,  722,    0,
      722,  718,  718,  718,  718,  718,  718,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  725,  726,  719,  719,
      719,  719,  719,  719,  722,  730,  722,  732,  731,  734,
      727,  731,  725,  726,  740,  734,  732,  734,    0,    0,
      738,  730,  725,  726,  719,  719,  719,  719,  719,  719,

      727,  730,  737,  732,  731,  734,  727,  731,  725,  726,
      738,  734,  732,  734,  739,  741,  738,  730,  740,  737,
      742,  744,  744,  758,  745,  760,  727,  759,  737,  766,
      739,  741,  745,  771,  759,  742,  738,  804,    0,    0,
      739,  741,    0,    0,  740,  737,  742,  744,  744,  758,
      745,  760,    0,  759,    0,  766,  739,  741,  745,  771,
      759,  742,  751,  804,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  805,  751,  751,  751,  751,  751,
      751,  753,    0,  753,  753,  753,  753,  753,  753,  753,
      753,  753,    0,    0,    0,    0,    0,    0,    0,  797,

      805,  751,  751,  751,  751,  751,  751,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  764,  822,  752,  752,
      752,  752,  752,  752,  755,  797,  755,  755,  755,  755,
      755,  755,  755,  755,  755,    0,  764,    0,    0,    0,
        0,    0,  764,  822,  752,  752,  752,  752,  752,  752,
      754,  797,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  764,  754,  754,  754,  754,  754,  754,  757,
      823,  757,  757,  757,  757,  757,  757,  757,  757,  757,
        0,  765,    0,    0,    0,    0,    0,    0,    0,  754,
      754,  754,  754,  754,  754,  756,  823,  756,  756,  756,

      756,  756,  756,  756,  756,  756,  756,  767,  756,  756,
      756,  756,  756,  756,  761,  765,  762,  761,  762,  768,
      769,    0,  772,  769,  767,  770,  791,  770,  772,  773,
      773,  774,  768,  767,  756,  756,  756,  756,  756,  756,
      761,  765,  762,  761,  762,  768,  769,  774,  772,  769,
      767,  770,  776,  770,  772,  773,  773,  774,  768,  775,
      791,  775,  792,  824,  801,  790,  792,  801,  776,    0,
      828,    0,    0,  774,    0,    0,    0,    0,  776,    0,
        0,  790,    0,    0,    0,  775,  791,  775,  792,  824,
      801,  790,  792,  801,  776,  781,  828,  781,  781,  781,

      781,  781,  781,  781,  781,  781,  781,  790,  781,  781,
      781,  781,  781,  781,  782,  831,  782,  782,  782,  782,
      782,  782,  782,  782,  782,    0,  821,    0,    0,    0,
        0,    0,    0,    0,  781,  781,  781,  781,  781,  781,
      783,  831,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  798,  783,  783,  783,  783,  783,  783,  784,
      821,  784,  784,  784,  784,  784,  784,  784,  784,  784,
        0,    0,  798,    0,    0,    0,    0,    0,  798,  783,
      783,  783,  783,  783,  783,  785,  821,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  787,  798,  787,

      787,  787,  787,  787,  787,  787,  787,  787,  787,    0,
      787,  787,  787,  787,  787,  787,  789,    0,  789,  789,
      789,  789,  789,  789,  789,  789,  789,    0,    0,    0,
        0,    0,    0,  852,    0,  793,  787,  787,  787,  787,
      787,  787,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  793,  794,  788,  788,  788,  788,  788,  788,  852,
      795,  793,  795,    0,    0,    0,  803,  803,  794,  796,
      853,  827,  819,  799,  800,  819,  827,  793,  794,  788,
      788,  788,  788,  788,  788,  796,  795,  796,  795,  799,
      800,  802,  803,  803,  794,  796,  853,  827,  819,  799,

      800,  819,  827,  802,    0,    0,    0,    0,    0,    0,
        0,  796,    0,  796,    0,  799,  800,  802,    0,    0,
        0,    0,  829,  829,  829,    0,  829,    0,  810,  802,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      812,    0,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  829,  812,  812,  812,  812,  812,  812,  814,
        0,  814,  814,  814,  814,  814,  814,  814,  814,  814,
        0,    0,    0,    0,    0,    0,    0,    0,  829,  812,
      812,  812,  812,  812,  812,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  826,  854,  813,  813,  813,  813,

      813,  813,  816,  826,  816,  816,  816,  816,  816,  816,
      816,  816,  816,    0,  857,    0,    0,    0,    0,    0,
      826,  854,  813,  813,  813,  813,  813,  813,  815,  826,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      857,  815,  815,  815,  815,  815,  815,  818,    0,  818,
      818,  818,  818,  818,  818,  818,  818,  818,    0,  820,
        0,    0,    0,    0,    0,    0,    0,  815,  815,  815,
      815,  815,  815,  817,  820,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  820,  817,  817,  817,  817,
      817,  817,  825,  830,  832,  830,  833,  834,  849,  850,

      820,    0,  849,  850,  833,  861,  877,  861,  825,  834,
      882,  832,  817,  817,  817,  817,  817,  817,  825,  830,
      832,  830,  833,  834,  849,  850,    0,  859,  849,  850,
      833,  861,  877,  861,  825,  834,  882,  832,  840,    0,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      859,  840,  840,  840,  840,  840,  840,  841,  883,  841,
      841,  841,  841,  841,  841,  841,  841,  841,    0,  887,
        0,    0,    0,  860,    0,    0,  859,  840,  840,  840,
      840,  840,  840,  842,  883,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  887,  855,  842,  842,  842,  842,

      842,  842,  843,  860,  843,  843,  843,  843,  843,  843,
      843,  843,  843,    0,    0,  855,    0,    0,    0,    0,
      887,  855,  842,  842,  842,  842,  842,  842,  844,  860,
      844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
      846,  855,  846,  846,  846,  846,  846,  846,  846,  846,
      846,  846,    0,  846,  846,  846,  846,  846,  846,  848,
      856,  848,  848,  848,  848,  848,  848,  848,  848,  848,
      864,  858,  862,  851,  858,  863,  856,  878,  864,  846,
      846,  846,  846,  846,  846,  851,  856,  884,  862,  884,
      890,  863,  851,  851,  878,  886,  864,  892,  862,  851,

      858,  863,  856,  878,  864,    0,    0,    0,    0,    0,
        0,  851,  908,  884,  862,  884,  890,  863,  851,  851,
      878,    0,  886,  892,    0,  870,  858,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  872,  908,  872,
      872,  872,  872,  872,  872,  872,  872,  872,  886,  907,
      872,  872,  872,  872,  872,  872,  873,  907,  873,  873,
      873,  873,  873,  873,  873,  873,  873,    0,    0,    0,
        0,    0,    0,    0,    0,  907,  872,  872,  872,  872,
      872,  872,  874,  907,  874,  874,  874,  874,  874,  874,
      874,  874,  874,  874,  879,  874,  874,  874,  874,  874,

      874,  875,  888,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  879,  880,  885,  889,  891,    0,    0,  891,
      879,  874,  874,  874,  874,  874,  874,  893,  881,  888,
      903,  906,  885,  880,  881,  912,  906,  903,  879,  880,
      885,    0,  891,  893,  889,  891,  881,    0,  913,    0,
        0,    0,    0,  893,  881,  888,  903,  906,  885,  880,
      881,  912,  906,  903,    0,    0,    0,  904,    0,  893,
      889,    0,  881,  898,  913,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  914,  904,  898,  898,  898,  898,
      898,  898,  899,  904,  899,  899,  899,  899,  899,  899,

      899,  899,  899,    0,  905,  915,  910,  905,  910,    0,
      914,  904,  898,  898,  898,  898,  898,  898,  900,  916,
      900,  900,  900,  900,  900,  900,  900,  900,  900,  900,
      905,  915,  910,  905,  910,  911,  911,  917,  911,  911,
      911,  911,  911,  911,  927,  916,  911,  925,  928,    0,
      931,  931,    0,    0,    0,    0,  911,  911,  926,  929,
      943,  939,  922,  917,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  925,  926,  929,  931,  931,  927,  939,
      933,  933,  928,    0,  926,  929,  943,  939,  932,  932,
        0,  932,  932,  932,  932,  932,  932,  933,  938,  932,

      926,  929,  944,  938,  927,  939,  933,  933,  928,  932,
      932,  940,  941,  942,  942,  946,  940,    0,  941,  945,
      945,  952,  952,  933,  938,  947,  955,  953,  944,  938,
      956,  957,  947,  953,  958,  946,  945,  940,  941,  942,
      942,  946,  940,  954,  941,  945,  945,  952,  952,  954,
      960,  947,  955,  953,  962,  962,  956,  957,  947,  953,
      958,  946,  945,  963,  961,  967,  968,  970,  970,  954,
      960,  961,  971,  968,  969,  954,  960,  969,  973,  975,
      962,  962,  974,  974,  982,  982,  976,  983,  981,  963,
      961,  967,  968,  970,  970,  981,  960,  961,  971,  968,

      969,  984,  986,  969,  973,  975,  976,  987,  974,  974,
      982,  982,  976,  983,  981,  991,  992,  991,  994,  999,
        0,  981,  986,    0,    0,    0,    0,  984,  986,    0,
        0,    0,  976,  987,    0,    0,    0,    0,    0,    0,
        0,  991,  992,  991,  994,  999,    0,    0,  986, 1010,
     1010, 1010, 1010, 1011, 1011, 1011, 1011, 1012, 1012, 1012,
     1012, 1013,    0, 1013, 1013, 1014, 1014, 1014, 1014, 1015,
        0, 1015, 1015, 1016, 1016, 1018, 1018, 1019, 1019, 1020,
     1020, 1021, 1021, 1022, 1022, 1023, 1023, 1024, 1024, 1025,
     1025, 1026, 1026, 1027, 1027, 1028,    0, 1028, 1028, 1029,

     1029, 1030, 1030, 1031, 1031, 1032, 1032, 1033, 1033, 1034,
     1034, 1035, 1035, 1036, 1036, 1037, 1037, 1038, 1038, 1039,
     1039, 1040, 1040, 1041, 1041, 1042, 1042, 1043, 1043, 1044,
     1044, 1045, 1045, 1046, 1046, 1047, 1047, 1048, 1048, 1049,
     1049, 1050, 1050, 1051, 1051, 1052, 1052, 1053, 1053, 1054,
     1054, 1056, 1056, 1057, 1057, 1058, 1058, 1060, 1060, 1061,
     1061, 1062, 1062, 1065, 1065, 1066, 1066, 1067, 1067, 1069,
        0, 1069, 1069, 1070,    0, 1070, 1070, 1071, 1071, 1072,
     1072, 1075,    0, 1075, 1075, 1076,    0, 1076, 1076, 1077,
     1077, 1078, 1078, 1079, 1079, 1080, 1080, 1081, 1081, 1083,

     1083, 1084, 1084, 1085, 1085, 1086, 1086, 1087, 1087, 1089,
     1089, 1090, 1090, 1091, 1091, 1093, 1093, 1095, 1095, 1096,
     1096, 1097, 1097, 1099, 1099, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,

     1009
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[123] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
    0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 2108 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 2213 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1010 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5826 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 59 "SrvLexer.l"
{ return SrvParser::LOGCOLORS_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 60 "SrvLexer.l"
{ return SrvParser::LOGFEATURE_; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 62 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::FEATURE_EXPR_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 64 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 69 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::NEXT_HOP_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::ROUTE_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::INFINITE_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::ACCEPT_UNKNOWN_FQDN_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::FQDN_DDNS_ADDRESS_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::DDNS_PROTOCOL_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::DDNS_TIMEOUT_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 108 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::SCRIPT_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ return SrvParser::REMOTE_AUTOCONF_NEIGHBORS_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ return SrvParser::AFTR_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 122 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{ return SrvParser::BULKLQ_ACCEPT_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
{ return SrvParser::BULKLQ_TCPPORT_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 125 "SrvLexer.l"
{ return SrvParser::BULKLQ_MAX_CONNS_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 126 "SrvLexer.l"
{ return SrvParser::BULKLQ_TIMEOUT_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 130 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 131 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 134 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 135 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 136 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 137 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 138 "SrvLexer.l"
{ return SrvParser::CLIENT_CLASS_; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 139 "SrvLexer.l"
{ return SrvParser::MATCH_IF_; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 140 "SrvLexer.l"
{ return SrvParser::EQ_; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 141 "SrvLexer.l"
{ return SrvParser::AND_; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 142 "SrvLexer.l"
{ return SrvParser::OR_; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 143 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 144 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_DATA_; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 145 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_EN_; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 146 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_DATA_; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 147 "SrvLexer.l"
{ return SrvParser::ALLOW_; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 148 "SrvLexer.l"
{ return SrvParser::DENY_; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 149 "SrvLexer.l"
{ return SrvParser::SUBSTRING_; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 150 "SrvLexer.l"
{ return SrvParser::CONTAIN_; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 151 "SrvLexer.l"
{ return SrvParser::STRING_KEYWORD_; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 152 "SrvLexer.l"
{ return SrvParser::ADDRESS_LIST_; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 155 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 156 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 157 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 158 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 160 "SrvLexer.l"
;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 162 "SrvLexer.l"
;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 164 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 169 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 170 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 171 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 108:
YY_RULE_SETUP
#line 178 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 187 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 196 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 205 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 214 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 223 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 232 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 244 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 251 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
	 ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
	 ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 272 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
	yytext[1]='0'; //if odd then no-meaning zero at the beginning
	len = strlen(yytext)-1;
	ptr = yytext+1;
    } else {
	len = strlen(yytext)-2;
	ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
	yylval.duidval.duid[i>>1]<<=4;
	if (!isxdigit(ptr[i])) {
	     Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
	     YYABORT;
	}
	if (isalpha(ptr[i])) {
	    yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
	} else {
	    yylval.duidval.duid[i>>1]|=ptr[i]-'0';
	}
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 304 "SrvLexer.l"
{
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   // Log(Crit) << "#### Detected [" << yytext << "] as DUID [len=" << len << "]" << LogEnd;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
	x = (toupper(*pos)-'A' + 10);
      else
	x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))
	x += (toupper(*(pos+1))-'A' + 10);
      else
	x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }

   return SrvParser::DUID_;
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 332 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd;
      YYABORT;
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 342 "SrvLexer.l"
{
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) {
	Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd;
	YYABORT;
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 351 "SrvLexer.l"
{ return yytext[0]; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 354 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 3077 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1010 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1010 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1009);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 354 "SrvLexer.l"



