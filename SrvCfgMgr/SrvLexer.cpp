#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 67
#define YY_END_OF_BUFFER 68
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[594] =
    {   0,
        1,    1,    0,    0,    0,    0,   68,   66,    2,    1,
        1,   66,   49,   66,   66,   65,   65,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   53,   53,   67,    1,
        1,    1,    0,   61,   49,    0,   61,   51,   50,   65,
        0,    0,   64,    0,   58,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       46,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   15,   16,   62,   62,   62,   62,   62,   62,   62,
       62,   52,   50,   65,    0,    0,   57,   63,   56,   56,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   45,   65,    0,    0,    0,   55,   55,    0,
       56,    0,   56,   62,   62,   62,   62,   62,   62,   62,
       62,   34,   62,   62,   62,   62,    0,   62,   62,   62,
       62,   62,   62,   21,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   47,   62,   62,   62,   62,   65,    0,
        0,    0,    0,   55,    0,   55,    0,   56,   56,   56,
       56,   62,   62,   62,    4,   62,   62,   62,   48,    3,

       62,   62,   62,   62,   62,    0,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,    7,   22,   62,   62,
       62,   62,   62,   62,   62,   62,   62,    0,    0,    0,
        0,   55,   55,   55,   55,    0,   56,   56,   56,    0,
       56,   62,   62,   62,   62,   62,   29,   62,   62,   62,
       62,   62,   62,    0,    0,   62,   62,   62,   27,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,    0,    0,    0,   55,   55,   55,
        0,   55,    0,    0,   56,   56,   56,   56,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,    0,

        0,   62,   62,   62,   62,   62,   43,   62,   62,   62,
       62,   62,   62,   62,   62,   19,   62,   62,   62,    0,
        0,    0,    0,    0,   55,   55,   55,   55,    0,   56,
       56,   56,    0,   56,   62,   62,   62,   62,   62,   62,
       62,   39,   62,   11,    9,    0,    0,   62,   62,   62,
       41,   62,   62,   62,   62,   62,   62,   62,   62,    5,
       62,   62,   62,   12,    0,    0,    0,   55,   55,   55,
        0,   55,   60,   56,   56,   56,   56,   62,   62,   62,
       62,   62,   62,   62,   10,    0,    0,   62,   62,   62,
       42,   62,   62,   62,   62,   62,   62,    6,   31,   62,

       62,    0,    0,    0,   59,   55,   55,   55,   55,   56,
       56,   56,    0,   56,   62,   40,   62,   62,   28,   62,
       62,    0,    0,   36,   35,   30,   62,   20,   62,   62,
       33,   32,   62,   62,    0,    0,   55,   55,   55,    0,
       55,   56,   56,   56,   56,   13,   62,   62,   62,   62,
       38,   37,   62,   62,   62,   62,   44,    0,    0,    0,
       55,   55,   55,   55,   56,   56,   56,    0,   56,   62,
       62,   62,    8,   62,   23,   62,   62,    0,    0,   55,
       55,   55,    0,   55,   56,   56,   56,   56,   62,   62,
       62,   62,   62,   62,    0,    0,    0,   55,   55,   55,

       55,   56,   56,   56,    0,   56,   62,   62,   62,   62,
       14,   18,    0,   54,   57,   55,   55,   55,    0,   55,
       56,   56,   56,   56,   25,   62,   24,   62,    0,   54,
        0,   55,   55,   55,   55,   55,   56,   56,   56,    0,
       56,   26,   62,   54,   57,   55,    0,   55,   55,   55,
       55,   56,   56,   56,   17,   54,   55,   55,   55,   55,
       56,   56,   56,   55,   55,    0,   55,   55,   56,   55,
       55,   56,   55,   55,    0,   55,   55,   55,   55,    0,
       55,   55,   55,   55,    0,   55,   55,   55,   55,    0,
       55,   55,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   16,   16,   16,   16,   16,   16,   17,    1,    1,
        1,    1,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
        1,    1,    1,    1,    1,    1,   18,   19,   20,   21,

       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[44] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        3,    1,    4,    4,    4,    4,    5,    4,    4,    4,
        4,    4,    4,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[673] =
    {   0,
        0,    0, 1930, 1929,    0,    0, 1936, 1939, 1939,   41,
       43, 1930,    0, 1927,   40,   40, 1892, 1915,   69,   82,
       46,   18,   33, 1914,   49,   89,   91,   60,   92,   51,
       93,  117,   94,  119,   97,   54, 1939, 1918, 1939,   75,
      135,  141, 1924, 1939,    0, 1921, 1920, 1939,    0,  140,
     1909,  133, 1939,    0,  153, 1908,  157, 1904, 1906, 1902,
      164,  147,  103, 1892,   53,  133,  105,  168,  169,  167,
     1903,  171,  157,  179,  170,  175,  178,  181,  182,  184,
      188, 1902, 1901,  197,  192,  195,  198,  196,   95,  199,
      201, 1939,    0,  225,  213, 1900,  238,    0,  244,  257,

      261, 1894, 1890,  213,  214,  268,  202,  252,  204,  269,
      270,  273,  281,  284,  286,  206,  280,  282,  285,  288,
      290,  298,  287,  300,  289,  301,  302,  303,  310,  306,
      312,  311, 1897,  327,  321, 1896, 1895,  342,  355,  359,
      365,  376,  382,  386, 1878,  393,  377,  386,  394,  395,
      397, 1893,  401,  399,  314,  407, 1899,  405,  403,  408,
      414,  410,  412, 1891,  411,  425,  428,  418,  430,  432,
      433,  434,  444, 1890,  439,  441,  442,  454,  462, 1889,
     1888, 1887,  467,  473,  484,  490,  496,  502,  515,  521,
      534, 1886,  448,  456,  536,  534,  450,  535, 1885,  544,

      485,  538,  540,  541,  452,  538,  543,  546,  548,  550,
      559,  552,  555,  561,  569,  563, 1884, 1883,  565,  567,
      573,  574,  568,  497,  578,  577,  582, 1882, 1881, 1880,
      593,  602,  615,  621,  634,  638,  644, 1879,  651,  662,
      668,  588,  597,  337,  646,  663, 1878,  669,  670,  672,
      668,  673,  674, 1862, 1871,  675,  676,  678, 1875,  610,
      679,  680,  684,  695,  700,  691,  683,  697,  699,  705,
      703,  707,  713,  584, 1874, 1873,  712,  728, 1872,  735,
      718,  748,  754,  760,  766,  779,  785,  798,  793,  712,
      798,  730,  780,  800,  803,  804,  805,  807,  811, 1858,

     1852,  813,  815,  817,  755,  818, 1869,  819,  820,  821,
      825,  822,  827,  828,  829, 1868,  831,  830,  832, 1867,
     1866, 1865,  857,  863,  869,  882,  888,  901,  905,  911,
     1864,  918,  929,  935,  834,  913,   99,  841,  930,  936,
      937, 1863,  749, 1862, 1861, 1859, 1837,  836,  938,  940,
     1858,  941,  951,  947,  864,  946,  948,  954,  952, 1857,
      956,  852,  953, 1856, 1855, 1854,  966,  976, 1853,  983,
      994, 1000, 1004, 1010, 1023, 1029, 1042,  955, 1037, 1050,
     1024, 1044, 1052, 1053, 1852, 1842, 1845, 1047, 1049, 1051,
     1849,  966, 1054,  883, 1055, 1056, 1057, 1848, 1847, 1058,

     1060, 1846, 1845, 1844, 1075, 1082, 1095, 1101, 1114, 1120,
     1843, 1127, 1138, 1144, 1090, 1842, 1139, 1152, 1841, 1144,
     1068, 1826, 1821, 1838, 1837, 1836, 1146, 1835, 1148, 1149,
     1834, 1833, 1147, 1150, 1832, 1831, 1164, 1830, 1174, 1185,
     1191, 1197, 1210, 1216, 1229, 1829, 1224, 1230, 1231, 1165,
     1939, 1939, 1186, 1232, 1233, 1234, 1828, 1827, 1826, 1825,
     1259, 1241, 1272, 1252, 1285, 1824, 1292, 1303, 1309, 1244,
     1304, 1310, 1823, 1312, 1822, 1267, 1005, 1821, 1820, 1322,
     1819, 1329, 1340, 1346, 1352, 1365, 1371, 1384, 1341, 1313,
     1347, 1379, 1384, 1385, 1818, 1817, 1816, 1410, 1395, 1423,

     1436, 1442, 1815, 1449, 1399, 1462, 1400, 1418, 1457, 1315,
     1814, 1813, 1812, 1811,    0, 1469, 1810, 1476, 1487, 1493,
     1499, 1512, 1518, 1531, 1809, 1526, 1808, 1096, 1807, 1806,
     1805, 1804, 1538, 1551, 1557, 1570, 1576, 1803, 1583,    0,
     1596, 1802, 1552, 1801, 1939, 1800,    0, 1602, 1799, 1609,
     1622, 1628, 1641,    0, 1798, 1702, 1689, 1668, 1647, 1660,
     1666, 1661,    0, 1655, 1647,    0, 1673, 1939,    0, 1642,
     1636, 1939, 1623, 1617,    0, 1609, 1604, 1597, 1591,    0,
     1578, 1571, 1565, 1546,    0, 1533, 1513, 1507, 1494,    0,
     1488, 1471, 1939, 1689, 1694, 1699, 1704, 1709, 1712, 1717,

     1719, 1477, 1457, 1721, 1444, 1723, 1725, 1415, 1727, 1729,
     1414, 1731, 1733, 1401, 1735, 1737, 1400, 1739, 1741, 1399,
     1743, 1745, 1293, 1747, 1749, 1267, 1751, 1753, 1254, 1755,
     1757, 1224, 1759, 1761, 1218, 1763, 1765, 1179, 1767, 1769,
     1172, 1135, 1771, 1773, 1079, 1775, 1777, 1008,  981, 1779,
     1781,  919, 1783,  589,  552, 1785, 1787, 1789,  523, 1791,
     1793, 1795,  373, 1797, 1799, 1801,  334, 1803, 1805, 1807,
      252, 1809
    } ;

static yyconst flex_int16_t yy_def[673] =
    {   0,
      593,    1,  594,  594,  595,  595,  593,  593,  593,  593,
      593,  596,  597,  598,  593,  593,   16,  593,  599,  599,
       20,   20,   20,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  593,  593,  593,  593,
      593,  593,  596,  593,  597,  598,  593,  593,  600,  593,
      601,   50,  593,  602,  603,  599,   20,   57,  599,   57,
      599,  599,  599,   57,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  593,  600,  593,   94,  604,  605,  602,  593,   99,

       57,  101,  101,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  593,  134,  606,  607,  593,  138,  593,
      593,  608,  141,  101,  144,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  593,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  135,  135,
      609,  610,  593,  593,  611,  184,  593,  593,  188,  593,
      190,  144,  599,  599,  599,  599,  599,  599,  599,  599,

      599,  599,  599,  599,  599,  593,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  593,  612,  613,
      593,  593,  232,  593,  234,  593,  593,  593,  593,  614,
      239,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  593,  593,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  615,  616,  593,  593,  593,  593,
      617,  280,  593,  593,  593,  285,  593,  287,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  593,

      593,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  593,
      618,  619,  593,  593,  593,  325,  593,  327,  593,  593,
      593,  593,  620,  332,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  593,  593,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  621,  622,  593,  593,  593,  593,
      623,  370,  593,  593,  374,  593,  376,  599,  599,  599,
      599,  599,  599,  599,  599,  593,  593,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,

      599,  593,  624,  625,  593,  593,  406,  593,  408,  593,
      593,  593,  626,  412,  599,  599,  599,  599,  599,  599,
      599,  593,  593,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  627,  628,  593,  593,  593,  629,
      439,  593,  442,  593,  444,  599,  599,  599,  599,  599,
      593,  593,  599,  599,  599,  599,  599,  593,  630,  631,
      593,  461,  593,  463,  593,  593,  593,  632,  467,  599,
      599,  599,  599,  599,  599,  599,  599,  633,  634,  593,
      593,  593,  635,  482,  593,  485,  593,  487,  599,  599,
      599,  599,  599,  599,  593,  636,  637,  593,  498,  593,

      500,  593,  593,  593,  638,  504,  599,  599,  599,  599,
      599,  599,  639,  640,  641,  593,  593,  593,  642,  518,
      593,  521,  593,  523,  599,  599,  599,  599,  593,  643,
      593,  644,  593,  533,  593,  535,  593,  593,  593,  645,
      539,  599,  599,  646,  593,  647,  648,  593,  593,  593,
      550,  593,  552,  649,  599,  593,  650,  651,  593,  559,
      593,  593,  652,  593,  653,  654,  593,  593,  655,  656,
      657,  593,  593,  658,  659,  660,  661,  593,  662,  663,
      664,  665,  593,  666,  667,  668,  669,  593,  670,  671,
      672,  593,    0,  593,  593,  593,  593,  593,  593,  593,

      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593
    } ;

static yyconst flex_int16_t yy_nxt[1983] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   18,   19,   20,   21,
       22,   20,   23,   24,   24,   25,   24,   24,   26,   24,
       27,   28,   29,   24,   30,   31,   32,   33,   34,   35,
       24,   36,   24,   40,   41,   42,   41,   48,   62,   63,
       64,   49,   50,   50,   50,   50,   51,   52,   52,   52,
       52,   52,   52,   60,   53,  593,   65,  593,   77,  593,
      593,   66,   78,  109,   61,   91,  593,   40,   41,   67,
       54,   57,   57,   57,   57,   51,   57,   57,   58,   57,
       57,   57,   73,   59,   57,   57,   57,   57,   51,   57,

       57,   57,   57,   57,   57,  593,   59,  593,  593,  593,
      593,  593,   74,  593,   68,  593,   70,   79,   80,  593,
       69,  593,   71,   75,   87,  131,   76,   72,   90,   81,
       82,   83,  107,  593,   84,  593,   88,   42,   41,  380,
       89,  111,   85,   40,   41,   95,   95,   95,   95,  593,
      110,   86,   94,   94,   94,   94,   51,   95,   95,   95,
       95,   95,   95,  593,   53,   99,   99,   99,   99,  101,
      101,  101,  101,  593,  101,  101,  101,  101,  101,  101,
      593,  104,  106,  593,  593,  593,  593,  593,  117,  105,
      112,  593,  113,  116,  593,  593,  119,  593,  593,  123,

      593,  118,  114,  115,  593,  125,  126,  121,  593,  122,
      120,  593,  593,  593,  593,  593,  124,  593,  593,  150,
      593,  127,  593,  129,  130,  135,  135,  135,  135,  593,
      593,  160,  128,  132,  152,  148,  133,  134,  134,  134,
      134,   51,  135,  135,  135,  135,  135,  135,  147,   53,
      138,  138,  138,  138,  140,  536,  141,  141,  141,  141,
      142,  143,  143,  143,  143,  143,  143,  593,  593,  143,
      143,  143,  143,  144,  144,  144,  144,  149,  144,  144,
      144,  144,  144,  144,  593,  593,  593,  151,  153,  593,
      156,  154,  157,  158,  155,  159,  593,  593,  593,  161,

      593,  593,  593,  593,  593,  593,  593,  165,  162,  170,
      164,  167,  163,  166,  593,  168,  593,  593,  593,  593,
      172,  169,  593,  173,  174,  171,  593,  593,  593,  175,
      593,  176,  177,  180,  180,  180,  180,  587,  178,  179,
      179,  179,  179,   51,  180,  180,  180,  180,  180,  180,
      202,   53,  183,  593,  184,  184,  184,  184,  185,  186,
      186,  186,  186,  186,  186,  593,  291,  186,  186,  186,
      186,  187,  187,  187,  187,  140,  582,  188,  188,  188,
      188,  142,  189,  189,  189,  189,  189,  189,  190,  190,
      190,  190,  593,  593,  189,  189,  189,  189,  192,  192,

      192,  192,  593,  192,  192,  192,  192,  192,  192,  593,
      593,  593,  195,  593,  194,  593,  196,  593,  199,  593,
      198,  593,  200,  593,  593,  207,  593,  593,  593,  197,
      593,  212,  214,  201,  593,  203,  204,  205,  209,  210,
      208,  593,  211,  213,  593,  215,  593,  216,  593,  593,
      593,  218,  219,  223,  221,  593,  224,  593,  593,  217,
      593,  225,  222,  227,  593,  243,  593,  220,  593,  253,
      593,  246,  593,  226,  179,  179,  179,  179,  593,  231,
      231,  231,  231,  183,  242,  232,  232,  232,  232,  185,
      233,  233,  233,  233,  233,  233,  234,  234,  234,  234,

      593,  593,  233,  233,  233,  233,  236,  249,  187,  187,
      187,  187,  140,  593,  237,  237,  237,  237,  142,  238,
      238,  238,  238,  238,  238,  593,  577,  238,  238,  238,
      238,  140,  271,  239,  239,  239,  239,  240,  241,  241,
      241,  241,  241,  241,  593,  244,  241,  241,  241,  241,
      593,  593,  593,  248,  593,  572,  593,  593,  254,  593,
      593,  251,  593,  250,  593,  247,  593,  257,  593,  258,
      245,  593,  252,  255,  256,  593,  260,  593,  264,  593,
      259,  593,  261,  593,  593,  593,  262,  272,  267,  593,
      593,  269,  571,  593,  593,  263,  266,  289,  593,  265,

      593,  268,  274,  277,  593,  231,  231,  231,  231,  319,
      270,  273,  183,  593,  278,  278,  278,  278,  185,  279,
      279,  279,  279,  279,  279,  593,  593,  279,  279,  279,
      279,  183,  290,  280,  280,  280,  280,  281,  282,  282,
      282,  282,  282,  282,  593,  305,  282,  282,  282,  282,
      283,  283,  283,  283,  140,  292,  284,  284,  284,  284,
      142,  140,  593,  285,  285,  285,  285,  240,  286,  286,
      286,  286,  286,  286,  287,  287,  287,  287,  593,  593,
      286,  286,  286,  286,  593,  593,  593,  295,  593,  593,
      593,  593,  593,  298,  593,  593,  593,  293,  294,  593,

      593,  296,  306,  299,  302,  308,  297,  593,  307,  310,
      303,  593,  304,  593,  309,  593,  593,  312,  313,  593,
      311,  593,  318,  593,  323,  323,  323,  323,  593,  593,
      327,  327,  327,  327,  314,  317,  315,  336,  183,  316,
      324,  324,  324,  324,  185,  183,  593,  325,  325,  325,
      325,  281,  326,  326,  326,  326,  326,  326,  593,  338,
      326,  326,  326,  326,  329,  593,  283,  283,  283,  283,
      140,  593,  284,  284,  284,  284,  140,  385,  330,  330,
      330,  330,  240,  331,  331,  331,  331,  331,  331,  593,
      351,  331,  331,  331,  331,  140,  593,  332,  332,  332,

      332,  333,  334,  334,  334,  334,  334,  334,  593,  593,
      334,  334,  334,  334,  593,  337,  593,  340,  339,  593,
      593,  593,  341,  593,  335,  342,  343,  593,  344,  593,
      348,  593,  345,  593,  593,  593,  593,  593,  593,  353,
      356,  593,  357,  593,  593,  593,  593,  593,  593,  354,
      593,  355,  593,  349,  352,  350,  362,  593,  381,  361,
      358,  388,  359,  360,  378,  363,  364,  367,  593,  323,
      323,  323,  323,  183,  400,  324,  324,  324,  324,  183,
      593,  368,  368,  368,  368,  281,  369,  369,  369,  369,
      369,  369,  593,  394,  369,  369,  369,  369,  183,  593,

      370,  370,  370,  370,  371,  372,  372,  372,  372,  372,
      372,  593,  429,  372,  372,  372,  372,  373,  373,  373,
      373,  140,  569,  284,  284,  284,  284,  240,  140,  593,
      374,  374,  374,  374,  333,  375,  375,  375,  375,  375,
      375,  376,  376,  376,  376,  593,  593,  375,  375,  375,
      375,  382,  593,  593,  593,  379,  593,  593,  384,  389,
      392,  390,  593,  593,  593,  391,  393,  593,  593,  593,
      593,  593,  593,  396,  395,  397,  383,  399,  405,  405,
      405,  405,  593,  415,  563,  401,  183,  398,  324,  324,
      324,  324,  281,  183,  427,  406,  406,  406,  406,  371,

      407,  407,  407,  407,  407,  407,  408,  408,  408,  408,
      593,  558,  407,  407,  407,  407,  373,  373,  373,  373,
      140,  593,  410,  410,  410,  410,  333,  411,  411,  411,
      411,  411,  411,  593,  494,  411,  411,  411,  411,  140,
      593,  412,  412,  412,  412,  413,  414,  414,  414,  414,
      414,  414,  593,  593,  414,  414,  414,  414,  416,  417,
      593,  420,  421,  593,  418,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  428,  593,  424,  419,  433,
      430,  434,  554,  425,  593,  426,  431,  405,  405,  405,
      405,  432,  183,  450,  437,  437,  437,  437,  371,  438,

      438,  438,  438,  438,  438,  593,  593,  438,  438,  438,
      438,  183,  593,  439,  439,  439,  439,  440,  441,  441,
      441,  441,  441,  441,  593,  543,  441,  441,  441,  441,
      140,  446,  284,  284,  284,  284,  333,  140,  536,  442,
      442,  442,  442,  413,  443,  443,  443,  443,  443,  443,
      444,  444,  444,  444,  593,  593,  443,  443,  443,  443,
      593,  448,  593,  593,  593,  593,  593,  447,  593,  457,
      455,  453,  449,  454,  183,  532,  324,  324,  324,  324,
      371,  593,  524,  456,  183,  473,  461,  461,  461,  461,
      440,  462,  462,  462,  462,  462,  462,  463,  463,  463,

      463,  593,  593,  462,  462,  462,  462,  140,  474,  465,
      465,  465,  465,  413,  466,  466,  466,  466,  466,  466,
      593,  501,  466,  466,  466,  466,  140,  488,  467,  467,
      467,  467,  468,  469,  469,  469,  469,  469,  469,  593,
      593,  469,  469,  469,  469,  470,  593,  593,  593,  593,
      593,  593,  472,  481,  481,  481,  481,  464,  471,  477,
      593,  489,  593,  476,  484,  484,  484,  484,  475,  183,
      445,  480,  480,  480,  480,  440,  481,  481,  481,  481,
      481,  481,  183,  593,  482,  482,  482,  482,  483,  484,
      484,  484,  484,  484,  484,  140,  409,  284,  284,  284,

      284,  413,  140,  493,  485,  485,  485,  485,  468,  486,
      486,  486,  486,  486,  486,  487,  487,  487,  487,  593,
      593,  486,  486,  486,  486,  490,  593,  491,  593,  593,
      508,  593,  183,  492,  324,  324,  324,  324,  440,  183,
      528,  498,  498,  498,  498,  483,  499,  499,  499,  499,
      499,  499,  500,  500,  500,  500,  593,  593,  499,  499,
      499,  499,  140,  593,  502,  502,  502,  502,  468,  503,
      503,  503,  503,  503,  503,  593,  507,  503,  503,  503,
      503,  140,  509,  504,  504,  504,  504,  505,  506,  506,
      506,  506,  506,  506,  593,  593,  506,  506,  506,  506,

      593,  593,  377,  328,  288,  593,  512,  517,  517,  517,
      517,  523,  523,  523,  523,  510,  593,  235,  191,  511,
      183,  525,  516,  516,  516,  516,  483,  517,  517,  517,
      517,  517,  517,  183,  593,  518,  518,  518,  518,  519,
      520,  520,  520,  520,  520,  520,  593,  139,  520,  520,
      520,  520,  140,  526,  284,  284,  284,  284,  468,  140,
      100,  521,  521,  521,  521,  505,  522,  522,  522,  522,
      522,  522,  593,  593,  522,  522,  522,  522,  527,  183,
       98,  324,  324,  324,  324,  483,  183,  590,  533,  533,
      533,  533,  519,  534,  534,  534,  534,  534,  534,  535,

      535,  535,  535,  593,  590,  534,  534,  534,  534,  140,
      590,  537,  537,  537,  537,  505,  538,  538,  538,  538,
      538,  538,  593,  585,  538,  538,  538,  538,  140,  590,
      539,  539,  539,  539,  540,  541,  541,  541,  541,  541,
      541,  593,  593,  541,  541,  541,  541,  542,  183,  585,
      548,  548,  548,  548,  519,  549,  549,  549,  549,  549,
      549,  593,  585,  549,  549,  549,  549,  183,  593,  550,
      550,  550,  550,  555,  551,  551,  551,  551,  551,  551,
      593,  580,  551,  551,  551,  551,  140,  585,  284,  284,
      284,  284,  505,  140,  580,  552,  552,  552,  552,  540,

      553,  553,  553,  553,  553,  553,  593,  580,  553,  553,
      553,  553,  183,  575,  324,  324,  324,  324,  519,  183,
      580,  559,  559,  559,  559,  575,  560,  560,  560,  560,
      560,  560,  593,  575,  560,  560,  560,  560,  140,  566,
      561,  561,  561,  561,  540,  562,  562,  562,  562,  562,
      562,  593,  575,  562,  562,  562,  562,  183,  566,  567,
      567,  567,  567,  566,  568,  568,  568,  568,  568,  568,
      593,  547,  568,  568,  568,  568,  140,  540,  284,  284,
      284,  284,  540,  183,  566,  324,  324,  324,  324,   37,
       37,   37,   37,   37,   39,   39,   39,   39,   39,   43,

       43,   43,   43,   43,   45,  547,   45,   45,   45,   46,
       46,   46,   46,   46,   56,   56,   56,   93,  531,   93,
       93,   93,   96,   96,  136,  136,  181,  181,  182,  182,
      228,  228,  229,  229,  275,  275,  276,  276,  320,  320,
      321,  321,  365,  365,  366,  366,  402,  402,  403,  403,
      435,  435,  436,  436,  458,  458,  459,  459,  478,  478,
      479,  479,  495,  495,  496,  496,  513,  513,  514,  514,
      529,  529,  530,  530,  544,  544,  546,  546,  556,  556,
      557,  557,  564,  564,  565,  565,  570,  570,  573,  573,
      574,  574,  576,  576,  578,  578,  579,  579,  581,  581,

      583,  583,  584,  584,  586,  586,  588,  588,  589,  589,
      591,  591,  592,  592,  593,  519,  547,  531,  593,  505,
      547,  545,  531,  497,  593,  593,  483,  531,  497,  593,
      593,  468,  515,  497,  460,  440,  497,  460,  593,  593,
      413,   97,  460,  404,  593,  593,  371,  460,  404,  593,
      593,  593,  593,  593,  593,  452,  451,  593,  593,  333,
       97,  404,  322,  593,  593,  593,  423,  422,  593,  281,
      404,  322,  593,  593,  593,  387,  386,  593,  593,  593,
      240,   97,  322,  230,  593,  593,  347,  346,  185,  322,
      230,  593,  301,  300,  593,  142,   97,  230,  137,  593,

      593,  593,  593,  230,  137,  593,  593,  593,  206,  593,
      193,   97,  137,  593,  146,  145,  137,  593,  593,  593,
      108,  103,  593,  102,  593,   97,   46,   47,   44,   92,
      593,   55,  593,   47,   44,  593,   38,   38,    7,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593
    } ;

static yyconst flex_int16_t yy_chk[1983] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   10,   10,   11,   11,   15,   22,   22,
       23,   15,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   21,   16,   25,   23,   30,   30,   65,
       36,   25,   30,   65,   21,   36,   28,   40,   40,   25,
       16,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   28,   19,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   26,   20,   27,   29,   31,
       33,   89,   29,   35,   26,  337,   27,   31,   31,   63,
       26,   67,   27,   29,   33,   89,   29,   27,   35,   31,
       32,   32,   63,   32,   32,   34,   34,   41,   41,  337,
       34,   67,   32,   42,   42,   52,   52,   52,   52,   66,
       66,   32,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   62,   50,   55,   55,   55,   55,   57,
       57,   57,   57,   73,   57,   57,   57,   57,   57,   57,
       61,   61,   62,   70,   68,   69,   75,   72,   74,   61,
       68,   76,   69,   73,   77,   74,   76,   78,   79,   79,

       80,   75,   70,   72,   81,   81,   84,   78,   85,   78,
       77,   86,   88,   84,   87,   90,   80,   91,  107,  107,
      109,   85,  116,   87,   88,   95,   95,   95,   95,  104,
      105,  116,   86,   90,  109,  105,   91,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,  104,   94,
       97,   97,   97,   97,   99,  671,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,  100,  108,  100,
      100,  100,  100,  101,  101,  101,  101,  106,  101,  101,
      101,  101,  101,  101,  106,  110,  111,  108,  110,  112,
      113,  111,  114,  114,  112,  115,  117,  113,  118,  117,

      114,  119,  115,  123,  120,  125,  121,  119,  117,  124,
      118,  121,  117,  120,  122,  122,  124,  126,  127,  128,
      126,  123,  130,  127,  128,  125,  129,  132,  131,  129,
      155,  130,  131,  135,  135,  135,  135,  667,  132,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      155,  134,  138,  244,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  139,  244,  139,  139,  139,
      139,  140,  140,  140,  140,  141,  663,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  142,  142,
      142,  142,  143,  147,  143,  143,  143,  143,  144,  144,

      144,  144,  148,  144,  144,  144,  144,  144,  144,  146,
      149,  150,  147,  151,  146,  154,  148,  153,  151,  159,
      150,  158,  153,  156,  160,  158,  162,  165,  163,  149,
      161,  162,  165,  154,  168,  156,  156,  156,  159,  160,
      158,  166,  161,  163,  167,  166,  169,  167,  170,  171,
      172,  169,  170,  173,  171,  175,  175,  176,  177,  168,
      173,  176,  172,  178,  193,  194,  197,  170,  205,  205,
      178,  197,  194,  177,  179,  179,  179,  179,  179,  183,
      183,  183,  183,  184,  193,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  185,  185,  185,  185,

      186,  201,  186,  186,  186,  186,  187,  201,  187,  187,
      187,  187,  188,  224,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  189,  659,  189,  189,  189,
      189,  190,  224,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  191,  195,  191,  191,  191,  191,
      196,  198,  195,  200,  202,  655,  203,  204,  206,  207,
      200,  203,  208,  202,  209,  198,  210,  208,  212,  209,
      196,  213,  204,  206,  207,  211,  211,  214,  215,  216,
      210,  219,  212,  220,  223,  215,  213,  225,  220,  221,
      222,  222,  654,  226,  225,  214,  219,  242,  227,  216,

      274,  221,  227,  231,  242,  231,  231,  231,  231,  274,
      223,  226,  232,  243,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  233,  260,  233,  233,  233,
      233,  234,  243,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  235,  260,  235,  235,  235,  235,
      236,  236,  236,  236,  237,  245,  237,  237,  237,  237,
      237,  239,  245,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  240,  240,  240,  240,  241,  246,
      241,  241,  241,  241,  251,  248,  249,  249,  250,  252,
      253,  256,  257,  252,  258,  261,  262,  246,  248,  267,

      263,  250,  261,  253,  256,  263,  251,  266,  262,  265,
      257,  264,  258,  268,  264,  269,  265,  267,  268,  271,
      266,  270,  273,  272,  277,  277,  277,  277,  290,  273,
      281,  281,  281,  281,  269,  272,  270,  290,  278,  271,
      278,  278,  278,  278,  278,  280,  292,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  282,  292,
      282,  282,  282,  282,  283,  343,  283,  283,  283,  283,
      284,  305,  284,  284,  284,  284,  285,  343,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  286,
      305,  286,  286,  286,  286,  287,  293,  287,  287,  287,

      287,  287,  287,  287,  287,  287,  287,  287,  288,  289,
      288,  288,  288,  288,  291,  291,  294,  294,  293,  295,
      296,  297,  295,  298,  289,  296,  297,  299,  298,  302,
      302,  303,  299,  304,  306,  308,  309,  310,  312,  308,
      310,  311,  311,  313,  314,  315,  318,  317,  319,  308,
      335,  309,  348,  303,  306,  304,  317,  338,  338,  315,
      312,  348,  313,  314,  335,  318,  319,  323,  362,  323,
      323,  323,  323,  324,  362,  324,  324,  324,  324,  325,
      355,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  326,  355,  326,  326,  326,  326,  327,  394,

      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  328,  394,  328,  328,  328,  328,  329,  329,  329,
      329,  330,  652,  330,  330,  330,  330,  330,  332,  336,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  333,  333,  333,  333,  334,  339,  334,  334,  334,
      334,  339,  340,  341,  349,  336,  350,  352,  341,  349,
      353,  350,  356,  354,  357,  352,  354,  353,  359,  363,
      358,  378,  361,  357,  356,  358,  340,  361,  367,  367,
      367,  367,  392,  378,  649,  363,  368,  359,  368,  368,
      368,  368,  368,  370,  392,  370,  370,  370,  370,  370,

      370,  370,  370,  370,  370,  370,  371,  371,  371,  371,
      372,  648,  372,  372,  372,  372,  373,  373,  373,  373,
      374,  477,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  375,  477,  375,  375,  375,  375,  376,
      381,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  377,  379,  377,  377,  377,  377,  379,  380,
      382,  383,  384,  388,  381,  389,  380,  390,  383,  384,
      393,  395,  396,  397,  400,  393,  401,  388,  382,  400,
      395,  401,  645,  389,  421,  390,  396,  405,  405,  405,
      405,  397,  406,  421,  406,  406,  406,  406,  406,  406,

      406,  406,  406,  406,  406,  407,  415,  407,  407,  407,
      407,  408,  528,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  409,  528,  409,  409,  409,  409,
      410,  415,  410,  410,  410,  410,  410,  412,  642,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      413,  413,  413,  413,  414,  417,  414,  414,  414,  414,
      420,  418,  427,  433,  429,  430,  434,  417,  418,  434,
      430,  427,  420,  429,  437,  641,  437,  437,  437,  437,
      437,  450,  638,  433,  439,  450,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  440,  440,  440,

      440,  441,  453,  441,  441,  441,  441,  442,  453,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      443,  635,  443,  443,  443,  443,  444,  632,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  445,
      447,  445,  445,  445,  445,  447,  448,  449,  454,  455,
      456,  462,  449,  462,  462,  462,  462,  629,  448,  456,
      470,  470,  464,  455,  464,  464,  464,  464,  454,  461,
      626,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  463,  476,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  465,  623,  465,  465,  465,

      465,  465,  467,  476,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  468,  468,  468,  468,  469,
      471,  469,  469,  469,  469,  471,  472,  472,  474,  490,
      490,  510,  480,  474,  480,  480,  480,  480,  480,  482,
      510,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  483,  483,  483,  483,  484,  489,  484,  484,
      484,  484,  485,  491,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  486,  489,  486,  486,  486,
      486,  487,  491,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  488,  492,  488,  488,  488,  488,

      493,  494,  620,  617,  614,  499,  494,  499,  499,  499,
      499,  505,  505,  505,  505,  492,  507,  611,  608,  493,
      498,  507,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  500,  508,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  501,  605,  501,  501,
      501,  501,  502,  508,  502,  502,  502,  502,  502,  504,
      603,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  506,  509,  506,  506,  506,  506,  509,  516,
      602,  516,  516,  516,  516,  516,  518,  592,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  519,

      519,  519,  519,  520,  591,  520,  520,  520,  520,  521,
      589,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  522,  588,  522,  522,  522,  522,  523,  587,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  524,  526,  524,  524,  524,  524,  526,  533,  586,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  534,  584,  534,  534,  534,  534,  535,  543,  535,
      535,  535,  535,  543,  535,  535,  535,  535,  535,  535,
      536,  583,  536,  536,  536,  536,  537,  582,  537,  537,
      537,  537,  537,  539,  581,  539,  539,  539,  539,  539,

      539,  539,  539,  539,  539,  539,  541,  579,  541,  541,
      541,  541,  548,  578,  548,  548,  548,  548,  548,  550,
      577,  550,  550,  550,  550,  576,  550,  550,  550,  550,
      550,  550,  551,  574,  551,  551,  551,  551,  552,  573,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  553,  571,  553,  553,  553,  553,  559,  570,  559,
      559,  559,  559,  565,  559,  559,  559,  559,  559,  559,
      560,  564,  560,  560,  560,  560,  561,  562,  561,  561,
      561,  561,  561,  567,  558,  567,  567,  567,  567,  594,
      594,  594,  594,  594,  595,  595,  595,  595,  595,  596,

      596,  596,  596,  596,  597,  557,  597,  597,  597,  598,
      598,  598,  598,  598,  599,  599,  599,  600,  556,  600,
      600,  600,  601,  601,  604,  604,  606,  606,  607,  607,
      609,  609,  610,  610,  612,  612,  613,  613,  615,  615,
      616,  616,  618,  618,  619,  619,  621,  621,  622,  622,
      624,  624,  625,  625,  627,  627,  628,  628,  630,  630,
      631,  631,  633,  633,  634,  634,  636,  636,  637,  637,
      639,  639,  640,  640,  643,  643,  644,  644,  646,  646,
      647,  647,  650,  650,  651,  651,  653,  653,  656,  656,
      657,  657,  658,  658,  660,  660,  661,  661,  662,  662,

      664,  664,  665,  665,  666,  666,  668,  668,  669,  669,
      670,  670,  672,  672,  555,  549,  546,  544,  542,  538,
      532,  531,  530,  529,  527,  525,  517,  514,  513,  512,
      511,  503,  497,  496,  495,  481,  479,  478,  475,  473,
      466,  460,  459,  458,  457,  446,  438,  436,  435,  432,
      431,  428,  426,  425,  424,  423,  422,  419,  416,  411,
      404,  403,  402,  399,  398,  391,  387,  386,  385,  369,
      366,  365,  364,  360,  351,  347,  346,  345,  344,  342,
      331,  322,  321,  320,  316,  307,  301,  300,  279,  276,
      275,  259,  255,  254,  247,  238,  230,  229,  228,  218,

      217,  199,  192,  182,  181,  180,  174,  164,  157,  152,
      145,  137,  136,  133,  103,  102,   96,   83,   82,   71,
       64,   60,   59,   58,   56,   51,   47,   46,   43,   38,
       24,   18,   17,   14,   12,    7,    4,    3,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[68] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 1088 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 1193 "SrvLexer.cpp"

	if ( (yy_init) )
		{
		(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 594 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1939 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 55 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 59 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 61 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 62 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 64 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 69 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno; 
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 112 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 113 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 54:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 138 "SrvLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 147 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 156 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 165 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 174 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 186 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 193 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 214 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd then no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 246 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd; 
      YYABORT; 
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 256 "SrvLexer.l"
{ 
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) { 
        Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd; 
        YYABORT; 
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 265 "SrvLexer.l"
{ return yytext[0]; } 
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 268 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 1756 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 594 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 594 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 593);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
    	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
    	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef yytext_ptr
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
#endif
#line 268 "SrvLexer.l"




