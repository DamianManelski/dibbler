#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 113
#define YY_END_OF_BUFFER 114
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[953] =
    {   0,
        1,    1,    0,    0,    0,    0,  114,  112,    2,    1,
        1,  112,   94,  112,  112,  111,  111,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
       98,   98,  113,    1,    1,    1,    0,  106,   94,    0,
      106,   96,   95,  111,    0,    0,  110,    0,  103,   77,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,   91,
      107,  107,   79,  107,  107,  107,  107,  107,  107,  107,

      107,  107,   17,   18,  107,  107,  107,  107,  107,  107,
      107,  107,   97,   95,  111,    0,    0,    0,  102,  108,
      101,  101,  107,  107,  107,  107,   78,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,   90,  111,    0,    0,    0,    0,  100,  100,
        0,  101,    0,  101,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,   85,  107,  107,  107,  107,   30,

      107,  107,   41,  107,  107,  107,  107,  107,  107,  107,
      107,    0,  107,  107,  107,  107,  107,  107,   23,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,   92,  107,  107,  107,  107,  111,    0,  109,    0,
        0,    0,  100,    0,  100,    0,  101,  101,  101,  101,
      107,  107,  107,  107,   84,  107,  107,  107,    4,  107,
      107,  107,  107,  107,  107,  107,   93,  107,  107,    3,
      107,  107,  107,  107,  107,  107,  107,  107,  107,    0,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
        7,  107,   24,  107,  107,  107,  107,  107,  107,  107,

      107,  107,  107,  107,    0,    0,    0,    0,    0,  100,
      100,  100,  100,    0,  101,  101,  101,    0,  101,  107,
      107,  107,  107,  107,  107,  107,  107,  107,   29,  107,
      107,  107,   36,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,    0,    0,  107,
      107,  107,   34,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,   88,  107,  107,  107,  107,  107,  107,
      107,    0,    0,    0,    0,  100,  100,  100,    0,  100,
        0,    0,  101,  101,  101,  101,  107,  107,   32,  107,
      107,  107,  107,  107,  107,    0,  107,  107,   87,  107,

      107,   57,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,    0,    0,  107,  107,  107,
      107,  107,   52,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,   21,  107,  107,  107,  109,    0,    0,
        0,    0,    0,  100,  100,  100,  100,    0,  101,  101,
      101,    0,  101,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,    0,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,   48,  107,
      107,   12,   10,   76,  107,    0,    0,  107,  107,  107,
       50,  107,  107,  107,  107,  107,  107,  107,  107,  107,

      107,    5,  107,  107,  107,   14,    0,    0,    0,    0,
      100,  100,  100,    0,  100,  105,  101,  101,  101,  101,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,    0,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,   11,   56,    0,    0,
      107,  107,  107,   51,  107,  107,  107,  107,   31,  107,
      107,    6,   86,   38,  107,  107,    0,    0,    0,    0,
      104,  100,  100,  100,  100,  101,  101,  101,    0,  101,
      107,  107,  107,  107,  107,  107,  107,  107,  107,   49,
      107,    0,  107,  107,  107,  107,  107,  107,   35,  107,

      107,   33,  107,  107,  107,   13,    0,    0,   45,   44,
       37,  107,   22,  107,  107,   40,   39,  107,  107,  109,
        0,    0,  100,  100,  100,    0,  100,  101,  101,  101,
      101,  107,   15,  107,   55,  107,  107,  107,   64,  107,
      107,    0,  107,  107,  107,  107,   67,  107,  107,  107,
      107,  107,  107,   47,   46,  107,  107,  107,  107,   53,
        0,    0,    0,    0,  100,  100,  100,  100,  101,  101,
      101,    0,  101,  107,  107,   89,   66,  107,  107,  107,
        0,   75,  107,  107,  107,   68,   54,  107,  107,  107,
        8,  107,   25,  107,  107,    0,    0,    0,  100,  100,

      100,    0,  100,  101,  101,  101,  101,  107,  107,   65,
      107,  107,    0,  107,  107,  107,  107,  107,  107,   58,
      107,  107,  107,  107,  109,    0,    0,    0,  100,  100,
      100,  100,  101,  101,  101,    0,  101,  107,  107,  107,
      107,    0,  107,  107,  107,  107,  107,  107,  107,  107,
       16,   20,    0,    0,   99,  102,  100,  100,  100,    0,
      100,  101,  101,  101,  101,  107,  107,  107,   27,    0,
        0,  107,  107,  107,   69,  107,  107,   26,  107,  107,
        0,    0,   99,    0,  100,  100,  100,  100,  100,  101,
      101,  101,    0,  101,  107,  107,  107,    0,    0,   28,

      107,  107,   70,  107,  107,  107,  107,  107,  107,  109,
       99,  102,  100,    0,  100,  100,  100,  100,  101,  101,
      101,   59,  107,  107,  107,  107,    0,    0,  107,  107,
      107,  107,  107,  107,   43,  107,   19,    0,   99,  100,
      100,  100,  100,  101,  101,  101,  107,  107,  107,  107,
      107,    0,    0,  107,  107,   71,   72,   73,   74,    9,
        0,  100,  100,    0,  100,  100,  101,   42,  107,  107,
      107,  107,    0,    0,  107,  107,  109,  100,  100,  101,
      107,  107,  107,  107,    0,    0,    0,  107,  107,  107,
        0,  100,  100,    0,  107,  107,  107,  107,    0,    0,

        0,   80,  107,  107,  107,   80,   99,  100,  100,   60,
      107,  107,  107,    0,   82,    0,  107,   82,  107,   99,
      100,  100,    0,  107,  107,   63,    0,   81,  107,   81,
        0,  100,  100,  107,   61,   83,   83,    0,  100,  100,
        0,   62,  109,  100,  100,    0,  100,  100,    0,  100,
      100,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
       23,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        1,    1,    1,    1,    1,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    1,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1043] =
    {   0,
        0,    0, 1128, 1127,    0,    0, 1133, 5636, 5636,   73,
       75, 1121,    0, 1097,   72,   72,   34, 1081, 1079,  136,
      186,  233,  280,   71,  208,  338,   38,   73,  197,   89,
      267,  175,  249,  350,  193,  382,   67,  357,  237,  317,
     5636, 1089, 5636,  111,  137,  214, 1094, 5636,    0, 1091,
     1090, 5636,    0,  440, 1035,  459, 5636,    0,  485, 5636,
       61,  528,   86,   89,  182,  265,  279,  184,  342,  239,
      381,  372,  229,  354,  373,  445,  270,  438,  519,  285,
      507,  393,  542,  544,  546,  561,  375,  563,  529,  298,
      564,  566,  378,  523,  532,  576,  567,  605,  595,  583,

      618,  599,  530,  574,  613,  611,  581,  626,  617,  619,
      630,  635, 5636,    0,  693, 1032,  503, 1028,  738,    0,
      783,  712,  826,  600,  619,  818,  628,  826,  815,  645,
      816,  843,  691,  819,  846,  762,  725,  857,  864,  866,
      860,  861,  865,  877,  888,  871,  894,  901,  900,  893,
      933,  902,  918,  930,  922,  924,  923,  931,  936,  940,
      946,  929,  953,  970,  963,  982,  981,  983,  986,  985,
      971,  998,  646, 1056,  763, 1027, 1026, 1017, 1103,  802,
     1046, 1148, 1191, 1075, 1234,  703, 1169,  974, 1035, 1090,
     1186, 1222, 1108, 1233,  825, 1223, 1226, 1237, 1265,  977,

     1071, 1254, 1261, 1231, 1272, 1152, 1269, 1268, 1308, 1271,
     1283, 1026, 1305, 1236, 1310, 1285, 1322, 1313, 1286, 1335,
     1337, 1341, 1317, 1351, 1344, 1355, 1356, 1359, 1358, 1369,
     1396, 1289, 1388, 1389, 1371, 1407, 1167,  997,  967,  939,
      932, 1454, 1467, 1510, 1486, 1529, 1555, 1574, 1600, 1619,
      929, 1375, 1392, 1599, 1380, 1612, 1497, 1446, 1542, 1601,
     1617, 1614, 1409, 1622, 1619, 1632, 1390, 1633, 1621, 1668,
     1636, 1652, 1661, 1657, 1669, 1660, 1676, 1689, 1553, 1683,
     1670, 1688, 1700, 1704, 1685, 1706, 1709, 1708, 1701, 1713,
     1489, 1733, 1693, 1722, 1736, 1737, 1755, 1721, 1760, 1745,

     1751, 1758, 1756, 1769,  897,  884,  851,  850, 1827, 1838,
     1857, 1883, 1902, 1866, 1928,  846, 1940, 1983, 1959, 1791,
     1882, 1945, 1780, 1973, 1978, 1986, 1974, 1983, 2056, 1984,
     1976, 1982, 1761, 1997, 2033, 2028, 2038, 2039, 2026, 2049,
     2040, 2045, 2041, 2060, 2078, 2073, 2080, 1831, 1886, 2084,
     2082, 2088, 1980, 2083, 2077, 2101, 2113, 2090, 2125, 2128,
     2120, 2122, 2131, 2095, 2129, 2126, 2136, 2133, 2144, 2168,
     2149,  844,  843,  842, 2207, 2226,  839, 2238, 2281, 2257,
     2300, 2326, 2337, 2356, 2382, 2401, 2403, 2382, 2259, 2160,
     2384, 2166, 2381, 2398, 2400, 2146, 2417, 2401, 2217, 2445,

     2415, 2242, 2437, 2446, 2436, 2451, 2449, 2452, 2469, 2454,
     2483, 2484, 2486, 2476, 2485, 2268, 2282, 2501, 2488, 2490,
     2499, 2504, 2316, 2535, 2506, 2531, 2533, 2540, 2536, 2524,
     2541, 2545, 2549, 2324, 2564, 2553, 2558,  809,  808,  807,
      806, 2622, 2633, 2644, 2663, 2689, 2708, 2672, 2734,  805,
     2746, 2789, 2765, 2767, 2775, 2783, 2688, 2787, 2779, 2806,
     2820, 2784, 2786, 2785, 2401, 2824, 2823, 2834, 2827, 2828,
     2830, 2842, 2838, 2837, 2872, 2836, 2859, 2867, 2396, 2843,
     2879, 2556, 2586, 2631, 2873, 2696, 2857, 2886, 2891, 2892,
     2878, 2895, 2914, 2907, 2911, 2919, 2923, 2925, 2938, 2926,

     2930, 2883, 2943, 2935, 2959, 2931,  804,  803,  802, 3001,
     3017,  792, 3029, 3072, 3048, 3057, 3117, 3091, 3162, 3136,
     3070, 3150, 3158, 3059, 3161, 3160, 3153, 3162, 3180, 3181,
     3189, 2941, 3203, 3192, 3200, 3205, 3201, 3216, 3202, 3198,
     3238, 3230, 3244, 3241, 3246, 3234, 2941, 2955, 2994, 3120,
     3243, 3248, 3250, 3213, 3261, 3253, 3257, 3266, 3251, 3288,
     3268, 3282, 3284, 3285, 3302, 3305,  765,  764,  763,  752,
     3145, 3365, 3349, 3410, 3384, 3429,  751, 3455, 3498, 3474,
     3303, 3484, 3492, 3489, 3493, 3476, 3512, 3494, 3499, 3304,
     3531, 3361, 3529, 3397, 3533, 3541, 3540, 3544, 3352, 3554,

     3556, 3389, 3546, 3545, 3547, 3408, 3550, 3554, 3552, 3564,
     3568, 3586, 3575, 3588, 3595, 3581, 3583, 3585, 3615,  749,
      748,  719, 3655,  718, 3675, 3718, 3694, 3763, 3737, 3808,
     3782, 3608, 3587, 3800, 3591, 3697, 3802, 3750, 3593, 3636,
     3803, 3660, 3798, 3806, 3805, 3801, 3679, 3811, 3842, 3851,
     3852, 3855, 3856, 5636, 5636, 3850, 3841, 3853, 3857, 3843,
      717,  716,  715,  714, 3917, 3936, 3962, 3981, 4007,  682,
     4019, 4062, 4038, 3848, 3847, 3854, 3896, 4040, 4057, 3961,
     3907, 3949, 4064, 4052, 4061, 4051, 4054, 4082, 4096, 4097,
     4089, 4100, 4060, 4093, 4103,  679,  677,  673, 4161,  672,

     4173, 4216, 4192, 4261, 4235, 4306, 4280, 4062, 4101, 4098,
     4295, 4296,  683, 4214, 4293, 4302, 4310, 4301, 4305, 4099,
     4306, 4308, 4337, 4341,  670,  669,  658,  604, 4401, 4373,
     4446, 4420, 4465,  593, 4491, 4534, 4510, 4354, 4399, 4520,
     4512, 4531, 4523, 4553, 4203, 4548, 4552, 4572, 4534, 4570,
     4152, 4195,  547,  543,  542,    0, 4616,  540, 4632, 4675,
     4651, 4720, 4694, 4765, 4739, 4754, 4733, 4571, 4248, 4313,
     4367, 4768, 4662, 4758, 4433, 4790, 4757, 4444, 4782, 4793,
      539,  510,  509,  508,  507, 4853, 4828, 4898, 4872, 4917,
      506, 4943,    0, 4962, 4766, 4944, 4963, 4553, 4585, 4611,

     4806, 4946, 4654, 4971, 4699, 4840, 4789, 4957, 4964,  505,
      504, 5636,  503,    0, 5029,  466, 5041, 5060, 5086, 5105,
        0, 4788, 5090, 4965, 4896, 5101, 4853, 4903, 4960, 5102,
     5019, 5020, 5065, 5114, 4959, 5103, 4961,  465,  464,  463,
      462, 5174, 5193, 5219,  461,    0, 5105, 5104, 5108, 5177,
     5161, 4970,    0, 5175, 5247, 5028, 5087, 5106, 5107, 5152,
      428,  424,  416,    0, 5247, 5636,    0, 5174, 5229, 5176,
     5240, 5243,    0, 5247, 5284, 5250,  414,  412,  411, 5636,
     5270, 5272, 5273, 5238, 5291, 5255, 5258, 5295, 5287, 5288,
      408,  407,  406,    0, 5283, 5290, 5292, 5271, 5305, 5296,

     5303, 5636, 5323, 5324, 5320, 5306,  361,  358,  357, 5322,
     5333, 5330, 5335, 5326, 5636, 5351, 5337, 5338, 5367,  353,
      350,  348,    0, 5365, 5355, 5340, 5362, 5636, 5389, 5344,
      325,  317,  311, 5374, 5371, 5636, 5375,    0,  307,  306,
        0, 5376,  305,  276,  267,  266,  262,  260,    0,  257,
      256, 5636, 5459, 5463, 5467, 5471, 5475, 5479, 5481,  270,
     5483, 5485, 5487, 5489, 5491, 5493, 5495, 5497, 5499, 5501,
     5505, 5507, 5509, 5511, 5513, 5515, 5517, 5519, 5521, 5523,
     5525, 5527, 5529, 5531, 5533, 5535, 5537, 5539, 5541, 5543,
     5545, 5547, 5549, 5551, 5553, 5555, 5557,  261, 5559, 5561,

     5563,  241, 5565, 5567, 5569,  231,  230, 5571, 5573, 5575,
      228, 5579, 5583, 5585, 5587,  219,  217, 5591, 5595, 5597,
     5599, 5601, 5603, 5605,  212, 5607, 5609, 5611, 5613, 5615,
      145, 5617, 5619, 5621,  131, 5623,  117, 5625, 5627, 5629,
       80, 5631
    } ;

static yyconst flex_int16_t yy_def[1043] =
    {   0,
      952,    1,  953,  953,  954,  954,  952,  952,  952,  952,
      952,  955,  956,  957,  952,  952,   16,  952,  952,  952,
       20,   20,   22,   22,   22,   22,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      952,  952,  952,  952,  952,  952,  955,  952,  956,  957,
      952,  952,  958,  952,  959,   54,  952,  960,  952,  952,
       26,   26,   62,   62,   26,   26,   26,   26,   26,   62,
       26,   26,   62,   26,   26,   26,   26,   26,   26,   62,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  952,  958,  952,  961,  115,  962,  952,  960,
      952,  121,   62,  123,  123,   26,   26,   26,   26,  123,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  952,  174,  963,  964,  965,  952,  179,
      952,  952,  952,  182,  123,  185,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  952,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,  175,  175,  964,  966,
      967,  952,  952,  952,  243,  952,  952,  247,  952,  249,
      185,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,  952,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,  968,  952,  969,  970,  952,  952,
      310,  952,  312,  952,  952,  952,  952,  952,  317,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  971,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  952,  952,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  972,  973,  974,  952,  952,  952,  952,  952,  378,
      952,  952,  952,  383,  952,  385,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  952,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  952,  952,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  969,  952,  975,
      976,  952,  952,  952,  444,  952,  446,  952,  952,  952,
      952,  952,  451,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  952,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  952,  952,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,  977,  978,  979,  952,
      952,  952,  952,  952,  513,  952,  952,  517,  952,  519,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  952,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  952,  952,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,  980,  952,  981,  982,
      952,  952,  572,  952,  574,  952,  952,  952,  952,  578,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  952,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,  952,  952,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,  983,
      984,  985,  952,  952,  952,  952,  625,  952,  628,  952,
      630,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  952,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  952,  952,   26,   26,   26,   26,   26,
      986,  952,  987,  988,  952,  665,  952,  667,  952,  952,
      952,  952,  671,   26,   26,   26,   26,   26,   26,   26,
      952,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  989,  990,  991,  952,  952,

      952,  952,  701,  952,  704,  952,  706,   26,   26,   26,
       26,   26,  952,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  992,  952,  993,  994,  952,  729,
      952,  731,  952,  952,  952,  952,  735,   26,   26,   26,
       26,  952,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  995,  996,  997,  998,  952,  952,  952,  952,
      759,  952,  762,  952,  764,   26,   26,   26,   26,  952,
      952,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      999,  952, 1000,  952, 1001,  952,  786,  952,  788,  952,
      952,  952, 1002,  792,   26,   26,   26,  952,  952,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26, 1003,
     1004,  952, 1005, 1006,  952,  952,  952,  817,  952,  819,
     1007,   26,   26,   26,   26,   26,  952,  952,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1008,  952, 1009,
     1010,  952,  842,  952,  952, 1011,   26,   26,   26,   26,
       26,  952, 1012,   26, 1013,   26,   26,   26,   26,   26,
     1014,  952, 1015, 1016,  952,  952, 1017,   26,   26,   26,
       26,   26, 1018,  952, 1019,   26, 1020, 1021, 1022,  952,
       26,   26,   26,   26,  952,  952,  952,   26,   26,   26,
     1023,  952, 1024, 1025,   26,   26,   26,   26,  952,  952,

      952,  952,   26,   26,   26,   26, 1026, 1027, 1028,   26,
       26,   26,   26,  952,  952,  952,   26,   26,   26, 1029,
      952, 1030, 1031,   26,   26,   26,  952,  952,   26,   26,
     1032, 1033, 1034,   26,   26,  952,   26, 1035,  952, 1036,
     1037,   26,  952, 1038, 1039, 1032,  952, 1040, 1041, 1042,
      952,    0,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,

      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952
    } ;

static yyconst flex_int16_t yy_nxt[5712] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   27,   27,   29,   30,   31,   32,   33,   27,
       34,   35,   36,   37,   38,   39,   27,   40,   27,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   27,   27,
       29,   30,   31,   32,   33,   27,   34,   35,   36,   37,
       38,   39,   27,   40,   27,   44,   45,   46,   45,   52,
      952,   61,  789,   53,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   55,   62,   56,   56,   56,   56,   56,

       56,   83,   57,  108,   61,   61,  952,   61,   61,   84,
       61,  124,   87,   44,   45,  125,   61,   79,   58,  945,
       62,   56,   56,   56,   56,   56,   56,   83,   57,  108,
       61,   61,   61,  943,   61,   84,   61,  124,   87,   46,
       45,  125,   61,   79,   58,   61,   61,  933,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   55,   61,   62,
       62,   63,   64,   62,   62,   61,   65,   61,   61,   61,
       66,   61,   67,   61,   61,   61,   61,   61,   61,   68,
       61,   61,   61,   61,   61,   62,   62,   63,   64,   62,
       62,   61,   65,   61,   61,   61,   66,   61,   67,   61,

       61,   61,   61,   61,   61,   68,   61,   61,   61,   61,
       61,   62,   62,   92,  909,   93,   44,   45,   61,  880,
       61,  879,   61,   99,  100,   61,  128,   61,   85,   69,
      867,   80,  846,  841,   86,  101,  102,   62,   62,   92,
       61,   93,   61,  821,   61,   61,   61,   81,   61,   99,
      100,   61,  128,   61,   85,   69,   70,   80,   62,   62,
       86,  101,  102,  785,  130,  134,   61,   71,   61,   61,
       72,   61,  120,   81,  111,   94,   61,  949,  949,  138,
       61,  949,   70,  941,   62,   62,   95,  952,  949,   96,
      130,  134,   61,   71,   88,   61,   72,  941,   89,  126,

      111,   94,   61,   62,   90,  127,   61,   73,   61,   91,
       61,   74,   95,   61,   61,   96,   75,   76,   61,  141,
       88,   77,   61,   78,   89,  126,  946,  941,  923,   62,
       90,  127,  941,   73,   61,   91,   61,   74,  923,   61,
       61,   61,   75,   76,  112,  141,  812,   77,   61,   78,
       61,   61,   61,   61,   61,   61,   61,   61,   61,  952,
       61,   61,   61,   61,   61,   61,   61,   61,   61,  923,
      112,  894,   61,   97,  931,   61,  129,   98,  923,  894,
      109,   82,  784,  135,  110,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,  103,  104,   61,   61,   97,

       61,   61,  129,   98,  131,  105,  109,   82,  133,  135,
      110,   61,  132,  106,  136,   61,   61,  149,   61,   61,
      143,   61,  107,   61,   61,   61,   61,  894,  864,  756,
      131,  105,  894,  864,  133,  891,   61,  864,  132,  106,
      136,   61,   61,  149,   61,  814,  143,   61,  107,  728,
       61,   61,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  116,   61,  117,  117,  117,  117,  117,  117,  139,
       57,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      137,   61,  793,  864,  814,  784,  119,  760,   61,  117,
      117,  117,  117,  117,  117,  139,   57,  121,  121,  121,

      121,  121,  121,  121,  121,  121,  137,   61,  122,  122,
      122,  122,  122,  122,   61,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  814,  784,  838,  736,  814,  812,
      784,  728,  154,  142,  122,  122,  122,  122,  122,  122,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  116,
       61,  123,  123,  123,  123,  123,  123,  140,   65,  142,
      664,  702,   61,  784,  728,  144,   61,  145,  119,  155,
      151,   61,   61,   61,  147,   61,   61,  123,  123,  123,
      123,  123,  123,  140,   65,   61,  146,   61,   61,   61,
      148,  144,   61,  145,  150,  155,  151,   61,   61,   61,

      147,   61,  152,  156,   61,  157,   61,   61,  153,   61,
       61,   61,  146,   61,  672,   61,  148,   61,  161,   61,
      150,  162,  166,  165,  168,  756,   61,  186,  152,  156,
       61,  157,   61,   61,  153,   61,   61,  158,   61,  159,
      160,  163,   61,   61,  161,   61,  167,  162,   61,  165,
      168,  170,   61,  186,   61,  171,   61,  169,  164,  187,
       61,   61,   61,  158,   61,  159,  160,  163,   61,   61,
      172,   61,  167,   61,   61,  191,  173,  170,   61,  728,
       61,  171,   61,  169,  164,  187,   61,   61,   61,   61,
      664,  753,  742,  626,  728,   61,  172,   61,  664,   61,

      570,  191,  173,  579,   61,  174,  174,  174,  174,  174,
      174,  174,  174,  174,   55,   61,  175,  175,  175,  175,
      175,  175,  952,   57,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  194,   61,  119,  664,  570,  119,  514,
      664,  252,  175,  175,  175,  175,  175,  175,  198,   57,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  194,
       61,  180,  180,  180,  180,  180,  180,  252,   61,  570,
      661,  197,  452,  119,  198,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  570,  441,  441,  180,  180,  180,
      180,  180,  180,  181,   61,  182,  182,  182,  182,  182,

      182,  182,  182,  182,  183,   61,  184,  184,  184,  184,
      184,  184,  952,  379,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  570,  441,  119,  318,  119,  441,  308,
      507,   61,  184,  184,  184,  184,  184,  184,  185,  185,
      185,  185,  185,  185,  185,  185,  185,   55,  190,  185,
      185,  185,  185,  185,  185,  188,  189,  192,   61,   61,
      244,   61,   61,  441,  308,  308,  195,  183,   61,   61,
      193,  119,  308,  196,  190,  185,  185,  185,  185,  185,
      185,  188,  189,  192,   61,   61,   61,   61,   61,   61,
      200,  199,  195,  201,   61,   61,  193,  203,  207,  196,

       61,  202,  205,   61,   61,  178,  204,   61,   61,   61,
      209,  214,   61,  206,   61,   61,  200,  199,  119,  201,
       61,  208,  211,  203,  207,  210,   61,  202,  205,   61,
       61,   61,  204,   61,   61,   61,   61,   61,  226,  206,
       61,  212,  213,   61,   61,   61,   61,  208,  211,  215,
      952,  210,  220,  308,  221,  216,  219,   61,  222,  223,
      178,   61,   61,   61,  217,   61,   61,   61,  218,   61,
       61,   61,   61,   61,   61,  215,   61,  224,  220,   61,
      221,  216,  219,   61,  222,  223,  225,   61,  305,   61,
      217,   61,   61,   61,  218,  227,   61,  235,   61,   61,

       61,  228,   61,  224,  229,   61,   61,  230,  231,   61,
      232,  233,  225,   61,   61,   61,  234,   61,  952,  255,
       61,  227,   61,  235,   61,   61,   61,  228,   61,   61,
      229,  236,   61,  230,  231,  280,  232,  233,  119,   61,
       61,   61,  234,   61,  256,  255,   61,  178,  178,  178,
       61,   61,   61,  119,   61,   61,  119,  236,  246,  246,
      246,  246,  246,  246,  246,  246,  246,   61,  237,  237,
      237,  237,  237,  237,  237,  237,  237,   55,   61,  238,
      238,  238,  238,  238,  238,  952,   57,  248,  248,  248,
      248,  248,  248,  248,  248,  248,   50,   51,   48,  257,

      113,   60,   59,   51,   61,  238,  238,  238,  238,  238,
      238,  266,   57,  242,   61,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  244,   48,  245,  245,  245,  245,
      245,  245,  952,   61,   42,   42,  952,  266,  952,  952,
       61,  952,  952,  952,  260,  952,  952,  952,  952,  952,
      952,   61,  245,  245,  245,  245,  245,  245,  181,   61,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  183,
      260,  248,  248,  248,  248,  248,  248,   61,  253,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  952,  952,
      952,  952,  952,  952,  271,   61,  254,  248,  248,  248,

      248,  248,  248,  249,  249,  249,  249,  249,  249,  249,
      249,  249,   61,  258,  250,  250,  250,  250,  250,  250,
      271,   61,  254,  952,  952,  952,  952,  952,  952,   61,
      952,  952,  952,  952,  952,  952,  952,  952,   61,  258,
      250,  250,  250,  250,  250,  250,  251,  251,  251,  251,
      251,  251,  251,  251,  251,   61,  261,  251,  251,  251,
      251,  251,  251,  259,  262,   61,   61,  263,  264,   61,
      268,  952,  269,  952,   61,  952,   61,  283,  952,   61,
       61,  267,  261,  251,  251,  251,  251,  251,  251,  259,
      262,   61,   61,  263,  264,   61,  265,   61,  269,  270,

       61,  278,   61,  283,   61,   61,   61,  267,   61,  272,
      273,   61,   61,  279,   61,   61,  952,  952,  952,  285,
      952,  952,  265,   61,  952,  270,   61,  278,   61,   61,
       61,  281,   61,  274,   61,  272,  273,   61,   61,  279,
       61,   61,  275,  276,  277,  285,  282,  284,   61,  286,
      287,   61,   61,   61,   61,   61,   61,  281,   61,  274,
       61,  952,  288,  289,  291,   61,  290,  952,  275,  276,
      277,  293,  282,  284,   61,  286,  287,   61,   61,   61,
       61,  294,   61,  296,   61,  952,   61,   61,  288,  289,
      291,   61,  290,  292,   61,  297,  295,  293,   61,   61,

      298,   61,   61,  299,   61,  300,   61,  294,  303,  296,
       61,  301,   61,   61,   61,  302,  304,  320,   61,  292,
       61,  297,  295,   61,   61,   61,  298,   61,   61,  299,
      321,   61,   61,   61,  303,   61,  332,  301,   61,   61,
       61,  302,  952,  320,   61,  952,  952,  952,  952,   61,
       61,  952,   61,  952,  952,  327,  321,   61,   61,   61,
      952,   61,  332,  952,  952,   61,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  952,   61,  242,   61,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  244,   61,
      311,  311,  311,  311,  311,  311,  952,  952,  311,  311,

      311,  311,  311,  311,  311,  311,  311,  952,  952,  952,
      952,  952,  952,  952,  952,   61,  311,  311,  311,  311,
      311,  311,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  326,   61,  313,  313,  313,  313,  313,  313,  314,
       61,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      952,  328,  952,  952,  952,  952,  952,  326,   61,  313,
      313,  313,  313,  313,  313,  181,   61,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  183,  347,  316,  316,
      316,  316,  316,  316,  952,   61,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  952,   61,  952,  952,  952,

      952,  952,  952,  347,  316,  316,  316,  316,  316,  316,
      181,   61,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  318,   61,  319,  319,  319,  319,  319,  319,  952,
      337,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      322,  952,   61,  329,   61,  323,  324,  325,  330,  319,
      319,  319,  319,  319,  319,   61,  331,   61,  333,  336,
       61,  334,   61,  335,   61,   61,  322,  339,   61,  329,
       61,  323,  324,  325,  330,   61,   61,  338,  952,   61,
      340,   61,  331,   61,  333,  336,   61,  334,   61,  335,
       61,   61,  341,  339,  342,   61,  343,  344,  346,  345,

       61,   61,   61,   61,   61,   61,  340,  350,  354,  348,
      358,   61,   61,   61,  952,  351,  952,  952,  341,   61,
      342,   61,  343,  344,  349,  345,   61,  352,   61,   61,
       61,   61,   61,  350,  354,  348,   61,   61,   61,   61,
      353,  351,  355,   61,   61,   61,  356,   61,  357,   61,
      349,   61,   61,  352,   61,  359,   61,   61,   61,  361,
      360,  365,   61,  362,   61,   61,  353,  369,  355,   61,
       61,  363,  356,   61,  357,   61,   61,   61,   61,   61,
       61,  359,   61,  366,  364,  361,  360,  365,   61,  362,
       61,   61,  368,  367,   61,  371,  370,  363,   61,   61,

      387,   61,   61,   61,   61,   61,   61,  390,  952,  366,
      364,  952,   61,  952,   61,  952,  952,  952,  368,  367,
       61,  371,  370,   61,   61,   61,  952,   61,  952,   61,
       61,  952,  952,  390,   61,  952,  952,  375,   61,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  242,   61,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  244,
       61,  377,  377,  377,  377,  377,  377,  952,  416,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  377,  377,  377,
      377,  377,  377,  242,  416,  378,  378,  378,  378,  378,

      378,  378,  378,  378,  379,  388,  380,  380,  380,  380,
      380,  380,  952,  417,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  952,  952,   61,  952,  952,  952,  952,
      952,  388,  380,  380,  380,  380,  380,  380,  181,  417,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  183,
      181,   61,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  318,  952,  384,  384,  384,  384,  384,  384,  952,
      952,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      952,  952,  952,  952,  952,  400,  389,  952,   61,  384,
      384,  384,  384,  384,  384,  385,  385,  385,  385,  385,

      385,  385,  385,  385,  391,  392,  386,  386,  386,  386,
      386,  386,  389,  393,   61,  394,   61,   61,  395,   61,
      399,   61,  401,   61,  402,   61,   61,   61,  952,   61,
      391,  392,  386,  386,  386,  386,  386,  386,  952,  393,
       61,  394,   61,   61,  395,   61,  399,   61,  401,   61,
      402,   61,   61,   61,  404,   61,  396,  396,  952,  396,
      396,  396,  396,  396,  396,  397,   61,  396,  403,   61,
      407,   61,  408,  405,  406,  409,   61,  396,  396,  410,
      404,   61,   61,   61,   61,  411,  412,  952,   61,  952,
      952,  952,   61,  952,  403,   61,  407,   61,  408,  405,

      406,  409,   61,   61,  414,  410,  422,   61,   61,   61,
       61,  411,  412,  413,   61,  425,   61,  415,   61,  418,
       61,   61,  419,   61,  421,   61,   61,   61,  420,   61,
      414,   61,  422,   61,  426,  423,  952,  427,   61,  413,
      424,  425,   61,  415,   61,  418,   61,   61,  419,   61,
      421,   61,   61,   61,  420,  428,   61,   61,  430,   61,
      431,  423,  429,   61,   61,   61,  424,  432,   61,   61,
       61,   61,   61,  433,   61,  434,   61,  436,  435,   61,
      437,  428,   61,  952,  430,  952,  431,   61,  429,   61,
      465,   61,   61,  432,   61,   61,  952,   61,   61,  433,

       61,  434,   61,   61,  435,   61,  437,  459,  461,   61,
      952,   61,  952,   61,  952,  952,  465,  952,   61,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  952,   61,
      952,  952,  952,  459,  461,   61,  242,   61,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  244,  242,  952,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  379,
       61,  445,  445,  445,  445,  445,  445,  952,  458,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  952,  952,
      952,  952,  952,  952,  952,   61,   61,  445,  445,  445,
      445,  445,  445,  446,  446,  446,  446,  446,  446,  446,

      446,  446,   61,  486,  447,  447,  447,  447,  447,  447,
      448,   61,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  952,  487,  952,  952,  952,  952,  952,   61,  486,
      447,  447,  447,  447,  447,  447,  181,  952,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  181,  487,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  318,   61,
      450,  450,  450,  450,  450,  450,  952,   61,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  952,  952,  952,
      952,  952,  952,  952,  952,   61,  450,  450,  450,  450,
      450,  450,  181,   61,  451,  451,  451,  451,  451,  451,

      451,  451,  451,  452,  462,  453,  453,  453,  453,  453,
      453,  952,  460,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  457,  464,   61,   61,  952,   61,  532,  463,
      462,  453,  453,  453,  453,  453,  453,  454,  460,   61,
      455,   61,  466,   61,   61,  468,  456,  952,  457,  464,
       61,   61,  467,   61,  532,  463,  952,  952,   61,  472,
       61,  468,  952,  454,  473,   61,  455,   61,  466,   61,
       61,  468,  456,  475,  476,  469,  477,  478,  467,   61,
       61,  470,  474,  471,   61,  472,   61,  468,   61,   61,
      473,  480,   61,  952,   61,   61,  479,   61,  952,  475,

      476,  469,  477,  478,  484,   61,   61,  470,  474,  471,
      481,  482,   61,  483,   61,   61,  952,  480,   61,   61,
       61,   61,  479,   61,  488,  485,   61,   61,   61,   61,
      484,   61,  489,   61,  490,  952,  481,  482,   61,  483,
      491,  952,   61,  495,   61,   61,  492,   61,  952,   61,
      488,  485,   61,   61,   61,   61,  496,   61,  489,   61,
      490,  493,  952,  498,  497,  500,  491,   61,   61,  495,
       61,  494,  492,   61,   61,   61,   61,  501,   61,   61,
      499,  952,  496,   61,   61,  503,  502,  493,   61,  498,
      497,  500,   61,   61,  505,  504,   61,  494,  506,   61,

       61,   61,   61,  501,   61,   61,  499,   61,  952,   61,
       61,  503,  502,  952,   61,  952,  952,  952,   61,  952,
      505,  504,   61,  952,  506,   61,  952,   61,  952,   61,
      952,  952,  510,   61,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  242,  952,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  242,   61,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  379,  952,  512,  512,  512,
      512,  512,  512,  952,   61,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  512,  512,  512,  512,  512,  512,  242,

       61,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      514,  524,  515,  515,  515,  515,  515,  515,  952,  549,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  952,
      952,   61,  952,  952,  952,  952,  952,  524,  515,  515,
      515,  515,  515,  515,  181,  549,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  318,  181,   61,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  452,  952,  518,
      518,  518,  518,  518,  518,  952,  952,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  952,  952,  526,  952,
      952,  952,  952,  952,  521,  518,  518,  518,  518,  518,

      518,  519,  519,  519,  519,  519,  519,  519,  519,  519,
       61,  522,  520,  520,  520,  520,  520,  520,   61,  523,
      521,  525,   61,  952,  952,  529,   61,   61,   61,   61,
       61,  531,  952,  527,  530,  952,   61,  522,  520,  520,
      520,  520,  520,  520,   61,  523,  534,  525,   61,   61,
      528,  529,   61,   61,   61,   61,   61,  531,  533,  527,
      530,  535,  536,   61,  538,  537,   61,   61,  544,  539,
       61,   61,  534,   61,  540,   61,  528,   61,  541,   61,
       61,   61,  543,  546,  533,   61,   61,  535,  536,   61,
      538,  537,   61,   61,  545,  539,   61,   61,  542,   61,

      540,  550,   61,   61,  541,   61,   61,   61,  543,  546,
       61,   61,   61,  547,  548,   61,   61,  551,  552,  553,
      545,   61,   61,  555,  542,  554,   61,  550,   61,   61,
      952,  952,  556,  952,   61,   61,   61,  952,   61,  547,
      548,   61,   61,  551,  552,  553,  557,   61,   61,  559,
       61,  554,   61,  558,   61,   61,  560,   61,  556,  563,
       61,   61,   61,  565,   61,  561,   61,  562,   61,   61,
      564,  952,  557,   61,   61,  559,   61,  592,   61,  558,
       61,   61,  560,   61,   61,  563,   61,  952,   61,  565,
      952,  561,   61,  562,   61,   61,  564,  566,   61,   61,

       61,  952,   61,  592,   61,  952,  952,   61,  952,  952,
       61,  952,   61,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  952,  566,   61,  607,  952,  242,   61,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  379,  242,
      952,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      514,  607,  573,  573,  573,  573,  573,  573,  952,  952,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  573,  573,
      573,  573,  573,  573,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  581,  584,  575,  575,  575,  575,  575,

      575,  952,   61,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  952,   61,  952,  952,  952,  952,  952,  581,
      584,  575,  575,  575,  575,  575,  575,  181,   61,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  452,   61,
      577,  577,  577,  577,  577,  577,  952,  608,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  577,  577,  577,  577,
      577,  577,  181,  608,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  579,  582,  580,  580,  580,  580,  580,
      580,  583,  585,   61,  586,  587,   61,  952,  591,  588,

      952,   61,  952,   61,   61,   61,  952,  589,  590,  952,
      582,  580,  580,  580,  580,  580,  580,  583,  585,   61,
      586,  587,   61,   61,   61,  588,  593,   61,  596,   61,
       61,   61,   61,  589,  590,   61,  595,  597,  594,  598,
      600,   61,  599,   61,   61,   61,   61,  601,   61,   61,
       61,  952,  593,  603,  596,  605,   61,  602,   61,   61,
      952,   61,  595,  597,  594,  598,  600,   61,  599,   61,
       61,   61,   61,   61,   61,  606,  604,   61,  952,  609,
      613,   61,   61,  602,   61,   61,   61,   61,  610,   61,
      611,   61,  614,   61,   61,  612,   61,  615,  952,   61,

       61,  606,  604,   61,   61,  609,  613,   61,  617,   61,
       61,   61,   61,   61,  610,   61,  611,   61,  614,   61,
       61,  612,   61,  615,  616,   61,   61,   61,   61,  618,
       61,   61,  619,  952,  617,   61,  952,   61,  952,  952,
      952,  952,  952,  952,  632,   61,   61,   61,   61,  952,
      616,   61,  952,   61,   61,  618,  952,   61,  619,  952,
      952,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      632,   61,   61,   61,   61,  242,  952,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  514,  642,  624,  624,
      624,  624,  624,  624,  952,   61,  627,  627,  627,  627,

      627,  627,  627,  627,  627,  952,  644,  952,  952,  952,
      952,  952,  952,  642,  624,  624,  624,  624,  624,  624,
      242,   61,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  626,   61,  627,  627,  627,  627,  627,  627,  181,
       61,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      452,   61,  952,  952,  952,  952,  952,  952,   61,  627,
      627,  627,  627,  627,  627,  181,   61,  628,  628,  628,
      628,  628,  628,  628,  628,  628,  579,   61,  629,  629,
      629,  629,  629,  629,  952,  952,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  952,  952,  952,  952,  952,

      952,  952,  952,  637,  629,  629,  629,  629,  629,  629,
      630,  630,  630,  630,  630,  630,  630,  630,  630,   61,
      639,  631,  631,  631,  631,  631,  631,   61,  634,  637,
      635,  633,   61,  952,  636,   61,   61,   61,  640,  952,
      952,  952,   61,  638,  952,   61,  639,  631,  631,  631,
      631,  631,  631,   61,  634,   61,  635,  633,   61,  645,
      636,   61,   61,   61,  640,  641,  646,  647,   61,  638,
      643,  952,   61,  952,   61,  648,   61,  649,  653,  650,
      651,   61,  652,   61,   61,  645,  654,   61,   61,   61,
       61,  641,  646,  647,  655,   61,  643,   61,   61,   61,

       61,  648,   61,  649,  653,  650,  651,   61,  652,   61,
       61,   61,  654,   61,   61,   61,   61,  656,   61,  657,
      655,   61,  658,   61,   61,   61,   61,  659,   61,   61,
       61,   61,  952,   61,   61,  674,   61,   61,   61,  952,
      660,  952,  952,  656,   61,  657,  952,  952,  658,  952,
       61,   61,   61,  659,   61,   61,   61,   61,   61,  952,
       61,  674,   61,  952,   61,  242,  660,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  514,   61,  952,  679,
      952,  952,  952,  952,   61,  242,  952,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  626,  681,  666,  666,

      666,  666,  666,  666,  952,  679,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  952,  952,  952,  952,  952,
      952,  952,   61,  681,  666,  666,  666,  666,  666,  666,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  676,
       61,  668,  668,  668,  668,  668,  668,  952,   61,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  952,  952,
      952,  952,  952,  952,  952,  676,   61,  668,  668,  668,
      668,  668,  668,  181,  952,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  579,  678,  670,  670,  670,  670,
      670,  670,  952,   61,  673,  673,  673,  673,  673,  673,

      673,  673,  673,  952,  952,  952,  952,  952,  952,  952,
      685,  678,  670,  670,  670,  670,  670,  670,  181,   61,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  672,
      680,  673,  673,  673,  673,  673,  673,  675,  677,  682,
      683,   61,  684,   61,   61,   61,   61,  686,   61,   61,
      952,  952,  952,  952,   61,  952,  680,  673,  673,  673,
      673,  673,  673,  675,  677,  682,  683,   61,  684,   61,
       61,   61,   61,  686,   61,   61,  687,  688,  692,  689,
       61,  690,  691,  693,   61,   61,   61,  708,  695,  694,
       61,   61,  709,   61,   61,   61,   61,   61,   61,   61,

       61,  952,  687,  688,  692,  689,  952,  690,  691,  693,
       61,   61,   61,  708,  695,  694,   61,   61,  709,   61,
       61,   61,   61,   61,   61,   61,   61,  242,  952,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  626,   61,
      700,  700,  700,  700,  700,  700,  952,  713,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  952,  952,  952,
      952,  952,  952,  952,  952,   61,  700,  700,  700,  700,
      700,  700,  242,  713,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  702,  712,  703,  703,  703,  703,  703,
      703,  952,   61,  703,  703,  703,  703,  703,  703,  703,

      703,  703,  952,  952,   61,  952,  952,  952,  952,  952,
      712,  703,  703,  703,  703,  703,  703,  181,   61,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  579,  181,
       61,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      672,  952,  705,  705,  705,  705,  705,  705,  952,  952,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  952,
      952,  952,  952,  952,  952,  952,  952,  710,  705,  705,
      705,  705,  705,  705,  706,  706,  706,  706,  706,  706,
      706,  706,  706,   61,  711,  707,  707,  707,  707,  707,
      707,  714,  715,  710,   61,   61,  716,   61,  721,  952,

       61,  952,  717,   61,   61,  738,  952,   61,  718,   61,
      711,  707,  707,  707,  707,  707,  707,  714,  715,  719,
       61,   61,  716,   61,  720,   61,   61,  722,  717,   61,
       61,  738,   61,   61,  718,  723,   61,  739,  724,   61,
       61,   61,   61,   61,   61,  719,   61,  952,  952,  952,
      720,   61,  952,  722,  952,  952,  952,  952,   61,  952,
      952,  723,   61,  739,  724,   61,   61,   61,   61,   61,
       61,  242,   61,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  626,  242,  952,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  702,   61,  730,  730,  730,  730,

      730,  730,  952,  952,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  952,  952,  952,  952,  952,  952,  952,
      775,   61,  730,  730,  730,  730,  730,  730,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  743,   61,  732,
      732,  732,  732,  732,  732,  952,   61,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  952,   61,  952,  952,
      952,  952,  952,  743,   61,  732,  732,  732,  732,  732,
      732,  181,   61,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  672,   61,  734,  734,  734,  734,  734,  734,
      952,   61,  737,  737,  737,  737,  737,  737,  737,  737,

      737,  952,  744,  952,  952,  952,  952,  952,  952,  952,
      734,  734,  734,  734,  734,  734,  181,   61,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  736,  745,  737,
      737,  737,  737,  737,  737,  740,   61,  741,   61,   61,
      746,  747,  952,  749,   61,   61,  748,  798,   61,   61,
      750,   61,  952,   61,  745,  737,  737,  737,  737,  737,
      737,  740,   61,  741,   61,   61,  746,  747,  752,  749,
       61,   61,  748,  798,   61,   61,  750,   61,  751,   61,
       61,  766,  952,  952,   61,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  752,  952,  952,   61,  952,  952,

      952,  952,  952,  952,  751,  799,   61,  766,  767,  952,
       61,  242,  952,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  702,   61,  758,  758,  758,  758,  758,  758,
      952,  799,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  952,   61,  952,  952,  952,  952,  952,  952,  952,
      758,  758,  758,  758,  758,  758,  242,  952,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  760,   61,  761,
      761,  761,  761,  761,  761,  181,   61,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  672,   61,  952,  952,
      952,  952,  952,  952,  952,  761,  761,  761,  761,  761,

      761,  181,   61,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  736,   61,  763,  763,  763,  763,  763,  763,
      952,  952,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  952,  952,  952,  952,  952,  952,  952,  952,  769,
      763,  763,  763,  763,  763,  763,  764,  764,  764,  764,
      764,  764,  764,  764,  764,   61,  770,  765,  765,  765,
      765,  765,  765,   61,  772,  769,   61,  768,  952,  952,
      952,  776,  771,  952,  779,  952,  827,   61,  773,  777,
      797,   61,  770,  765,  765,  765,  765,  765,  765,   61,
      772,   61,   61,  768,  774,   61,   61,  776,  771,  778,

      779,  780,  827,   61,  773,  777,  952,  952,  952,  952,
      952,  952,  828,   61,   61,   61,  952,   61,  952,  952,
      774,   61,   61,  952,  952,  778,  242,  780,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  702,  828,   61,
       61,   61,  242,  952,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  760,   61,  787,  787,  787,  787,  787,
      787,  952,  952,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  952,  952,  952,  952,  952,  952,  952,  952,
       61,  787,  787,  787,  787,  787,  787,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  801,   61,  789,  789,

      789,  789,  789,  789,  952,   61,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  952,  952,  952,  952,  833,
      952,  952,  801,   61,  789,  789,  789,  789,  789,  789,
      181,   61,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  736,   61,  791,  791,  791,  791,  791,  791,  952,
      952,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      952,  796,  952,  952,  952,  952,  952,  952,   61,  791,
      791,  791,  791,  791,  791,  181,   61,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  793,  796,  794,  794,
      794,  794,  794,  794,  795,  800,  802,   61,  807,  952,

       61,   61,   61,  803,  804,  805,  952,  806,  808,   61,
      952,   61,  952,  822,  794,  794,  794,  794,  794,  794,
      795,  800,  802,   61,  807,   61,   61,   61,  809,  829,
      835,   61,   61,   61,  808,   61,   61,   61,  952,  822,
      816,  816,  816,  816,  816,  816,  816,  816,  816,   61,
      952,   61,  952,  834,  809,  829,  835,   61,   61,   61,
      952,  952,   61,  242,  952,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  760,   61,  816,  816,  816,  816,
      816,  816,  952,   61,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  952,  852,  952,  952,  952,  952,  952,

      952,  952,  816,  816,  816,  816,  816,  816,  242,   61,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  849,
      852,  818,  818,  818,  818,  818,  818,  181,  853,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  736,   61,
      952,  952,  952,  952,  952,  849,  952,  818,  818,  818,
      818,  818,  818,  181,  853,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  793,   61,  820,  820,  820,  820,
      820,  820,  952,  830,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  823,  836,  831,  824,   61,  832,   61,
      848,  837,  820,  820,  820,  820,  820,  820,  825,  830,

       61,  854,   61,   61,   61,  826,   61,   61,   61,  823,
      836,  873,  824,   61,   61,   61,  848,  837,  952,  952,
      952,  952,  952,  952,  825,  952,   61,  854,   61,   61,
       61,  826,   61,   61,   61,  856,  952,  873,  857,  242,
       61,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      760,  242,  952,  842,  842,  842,  842,  842,  842,  842,
      842,  842,   61,   61,  843,  843,  843,  843,  843,  843,
      952,   61,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  858,  952,  952,  952,  952,  952,  952,   61,   61,
      843,  843,  843,  843,  843,  843,  181,   61,  844,  844,

      844,  844,  844,  844,  844,  844,  844,  793,   61,  845,
      845,  845,  845,  845,  845,  952,  847,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  850,  855,  859,  869,
       61,  952,  851,   61,   61,  845,  845,  845,  845,  845,
      845,  868,  847,  860,   61,   61,   61,   61,   61,   61,
       61,   61,  850,  855,  870,  869,   61,   61,  851,   61,
      952,  952,  952,  952,  952,  952,  952,  868,  952,  860,
       61,   61,   61,   61,   61,   61,   61,   61,  952,  952,
      870,  952,  952,   61,  242,  882,  865,  865,  865,  865,
      865,  865,  865,  865,  865,   61,  872,  866,  866,  866,

      866,  866,  866,  952,   61,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  952,  871,  875,   61,   61,   61,
       61,   61,  872,  866,  866,  866,  866,  866,  866,  181,
       61,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      793,  871,  875,   61,   61,   61,   61,  874,  874,  883,
      874,  874,  874,  874,  874,  874,  881,  242,  874,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  874,  874,
      884,  952,   61,  886,  887,  898,  889,  890,  901,  952,
      952,   61,  881,   61,  885,  885,   61,  885,  885,  885,
      885,  885,  885,   61,  902,  885,  884,  896,   61,  886,

      887,  898,  889,  890,  901,  885,  885,   61,  895,   61,
      905,  897,   61,   61,  913,   61,   61,  899,  900,   61,
      902,  903,  904,  896,  906,  910,   61,  911,  914,  912,
       61,   61,  915,   61,  895,   61,  905,  897,   61,   61,
      913,   61,   61,  899,  900,  916,  917,  903,  904,   61,
      906,  910,   61,  911,  914,  912,   61,   61,  915,   61,
      918,   61,  919,   61,   61,   61,   61,   61,  927,  924,
      925,  916,  917,   61,  928,   61,   61,  926,   61,  929,
       61,   61,  952,   61,  952,  936,  918,   61,  919,   61,
      930,   61,   61,   61,  927,  924,  925,  935,   61,   61,

      928,  934,   61,  926,   61,  929,   61,   61,   61,   61,
       61,  936,  937,   61,   61,  942,  930,   61,   61,   61,
      952,  952,  952,  935,   61,  952,  952,  934,  952,  952,
      952,  952,   61,  952,   61,  952,   61,  952,  937,  952,
       61,  942,  952,   61,   61,   61,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,   61,   41,
       41,   41,   41,   43,   43,   43,   43,   47,   47,   47,
       47,   49,  952,   49,   49,   50,   50,   50,   50,  114,
      952,  114,  114,  118,  118,  176,  176,  177,  177,  239,
      239,  240,  240,  241,  241,  306,  306,  307,  307,  372,

      372,  373,  373,  374,  374,  398,  952,  398,  398,  438,
      438,  439,  439,  440,  440,  508,  508,  509,  509,  567,
      567,  568,  568,  569,  569,  620,  620,  621,  621,  622,
      622,  508,  508,  662,  662,  663,  663,  696,  696,  697,
      697,  698,  698,  725,  725,  726,  726,  727,  727,  621,
      621,  754,  754,  755,  755,  781,  781,  782,  782,  783,
      783,  810,  810,  811,  811,  813,  813,  697,  697,  839,
      839,  840,  840,  861,  861,  862,  862,  863,  863,  874,
      952,  874,  874,  876,  952,  876,  876,  877,  877,  878,
      878,  885,  952,  885,  885,  888,  952,  888,  888,  754,

      754,  892,  892,  893,  893,  907,  907,  908,  908,  920,
      920,  921,  921,  922,  922,  811,  811,  932,  932,  938,
      938,  939,  939,  940,  940,  944,  944,  947,  947,  948,
      948,  950,  950,  951,  951,    7,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,

      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952
    } ;

static yyconst flex_int16_t yy_chk[5712] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   10,   10,   11,   11,   15,
       17,   27, 1041,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   24,   16,   16,   16,   16,   16,

       16,   28,   16,   37,   61,   24,   17,   27,   24,   28,
       37,   63,   30,   44,   44,   64,   28,   24,   16, 1037,
       24,   16,   16,   16,   16,   16,   16,   28,   16,   37,
       61,   24,   30, 1035,   24,   28,   37,   63,   30,   45,
       45,   64,   28,   24,   16,   20,   20, 1031,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   30,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   21,   21,   32, 1025,   32,   46,   46,   32, 1017,
       21, 1016,   21,   35,   35,   65,   68,   68,   29,   21,
     1011,   25, 1007, 1006,   29,   35,   35,   21,   21,   32,
       29,   32,   25, 1002,   32,   25,   21,   25,   21,   35,
       35,   65,   68,   68,   29,   21,   22,   25,   22,   22,
       29,   35,   35,  998,   70,   73,   29,   22,   25,   22,
       22,   25,  960,   25,   39,   33,   22,  951,  950,   77,
       39,  948,   22,  947,   22,   22,   33,  946,  945,   33,
       70,   73,   33,   22,   31,   22,   22,  944,   31,   66,

       39,   33,   22,   23,   31,   67,   39,   23,   66,   31,
       31,   23,   33,   77,   23,   33,   23,   23,   33,   80,
       31,   23,   67,   23,   31,   66,  943,  940,  939,   23,
       31,   67,  933,   23,   66,   31,   31,   23,  932,   77,
       23,   90,   23,   23,   40,   80,  931,   23,   67,   23,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       40,   26,   26,   26,   26,   26,   26,   90,   26,  922,
       40,  921,   26,   34,  920,   26,   69,   34,  909,  908,
       38,   26,  907,   74,   38,   69,   40,   26,   26,   26,
       26,   26,   26,   34,   26,   36,   36,   74,   26,   34,

       38,   26,   69,   34,   71,   36,   38,   26,   72,   74,
       38,   69,   71,   36,   75,   72,   75,   87,   87,   34,
       82,   93,   36,   74,   71,   36,   38,  893,  892,  891,
       71,   36,  879,  878,   72,  877,   82,  863,   71,   36,
       75,   72,   75,   87,   87,  862,   82,   93,   36,  861,
       71,   36,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   82,   54,   54,   54,   54,   54,   54,   78,
       54,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       76,   78,  845,  841,  840,  839,  838,  816,   76,   54,
       54,   54,   54,   54,   54,   78,   54,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   76,   78,   59,   59,
       59,   59,   59,   59,   76,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  813,  811,  810,  791,  785,  784,
      783,  782,   94,   81,   59,   59,   59,   59,   59,   59,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       81,   62,   62,   62,   62,   62,   62,   79,   62,   81,
      781,  758,   79,  755,  754,   83,   94,   84,  753,   95,
       89,   62,   89,  103,   85,   95,   81,   62,   62,   62,
       62,   62,   62,   79,   62,   83,   84,   84,   79,   85,
       86,   83,   94,   84,   88,   95,   89,   62,   89,  103,

       85,   95,   91,   96,   86,   97,   88,   91,   92,   92,
       97,   83,   84,   84,  734,   85,   86,  104,   99,   96,
       88,  100,  105,  102,  107,  728,  100,  124,   91,   96,
       86,   97,   88,   91,   92,   92,   97,   98,   99,   98,
       98,  101,  102,  104,   99,   96,  106,  100,   98,  102,
      107,  109,  100,  124,  106,  110,  105,  108,  101,  125,
      109,  101,  110,   98,   99,   98,   98,  101,  102,  108,
      111,  127,  106,  111,   98,  130,  112,  109,  112,  727,
      106,  110,  105,  108,  101,  125,  109,  101,  110,  173,
      726,  725,  713,  700,  698,  108,  111,  127,  697,  111,

      696,  130,  112,  670,  112,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  173,  115,  115,  115,  115,
      115,  115,  122,  115,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  133,  133,  664,  663,  662,  661,  624,
      622,  186,  115,  115,  115,  115,  115,  115,  137,  115,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  133,
      133,  119,  119,  119,  119,  119,  119,  186,  137,  621,
      620,  136,  577,  570,  137,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  569,  568,  567,  119,  119,  119,
      119,  119,  119,  121,  137,  121,  121,  121,  121,  121,

      121,  121,  121,  121,  121,  136,  121,  121,  121,  121,
      121,  121,  180,  512,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  509,  508,  507,  450,  441,  440,  439,
      438,  136,  121,  121,  121,  121,  121,  121,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  129,  123,
      123,  123,  123,  123,  123,  126,  128,  131,  129,  131,
      377,  126,  134,  374,  373,  372,  134,  316,  195,  128,
      132,  308,  307,  135,  129,  123,  123,  123,  123,  123,
      123,  126,  128,  131,  129,  131,  132,  126,  134,  135,
      139,  138,  134,  140,  195,  128,  132,  142,  146,  135,

      138,  141,  144,  141,  142,  306,  143,  139,  143,  140,
      148,  152,  132,  145,  146,  135,  139,  138,  305,  140,
      144,  147,  150,  142,  146,  149,  138,  141,  144,  141,
      142,  145,  143,  139,  143,  140,  150,  147,  162,  145,
      146,  151,  151,  149,  148,  152,  144,  147,  150,  153,
      251,  149,  156,  241,  157,  154,  155,  145,  158,  159,
      240,  153,  150,  147,  154,  155,  157,  156,  154,  149,
      148,  152,  162,  154,  158,  153,  151,  160,  156,  159,
      157,  154,  155,  160,  158,  159,  161,  153,  239,  161,
      154,  155,  157,  156,  154,  163,  163,  171,  162,  154,

      158,  164,  151,  160,  165,  159,  165,  166,  167,  160,
      168,  169,  161,  164,  171,  161,  170,  188,  238,  188,
      200,  163,  163,  171,  167,  166,  168,  164,  170,  169,
      165,  172,  165,  166,  167,  212,  168,  169,  178,  164,
      171,  172,  170,  188,  189,  188,  200,  177,  176,  118,
      167,  166,  168,  116,  170,  169,   55,  172,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  172,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  189,  174,
      174,  174,  174,  174,  174,  184,  174,  184,  184,  184,
      184,  184,  184,  184,  184,  184,   51,   50,   47,  190,

       42,   19,   18,   14,  189,  174,  174,  174,  174,  174,
      174,  201,  174,  179,  201,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,   12,  179,  179,  179,  179,
      179,  179,    7,  190,    4,    3,    0,  201,    0,    0,
      201,    0,    0,    0,  193,    0,    0,    0,    0,    0,
        0,  193,  179,  179,  179,  179,  179,  179,  182,  190,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      193,  182,  182,  182,  182,  182,  182,  193,  187,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,    0,
        0,    0,    0,    0,  206,  206,  187,  182,  182,  182,

      182,  182,  182,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  187,  191,  183,  183,  183,  183,  183,  183,
      206,  206,  187,    0,    0,    0,    0,    0,    0,  191,
        0,    0,    0,    0,    0,    0,    0,    0,  187,  191,
      183,  183,  183,  183,  183,  183,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  191,  194,  185,  185,  185,
      185,  185,  185,  192,  196,  192,  196,  197,  198,  197,
      203,    0,  204,    0,  204,    0,  194,  214,    0,  214,
      198,  202,  194,  185,  185,  185,  185,  185,  185,  192,
      196,  192,  196,  197,  198,  197,  199,  202,  204,  205,

      204,  210,  194,  214,  203,  214,  198,  202,  199,  207,
      208,  208,  207,  211,  210,  205,    0,    0,    0,  216,
        0,    0,  199,  202,    0,  205,  211,  210,  216,  219,
      203,  213,  232,  209,  199,  207,  208,  208,  207,  211,
      210,  205,  209,  209,  209,  216,  213,  215,  213,  217,
      218,  209,  211,  215,  216,  219,  218,  213,  232,  209,
      223,    0,  220,  221,  223,  217,  222,    0,  209,  209,
      209,  225,  213,  215,  213,  217,  218,  209,  220,  215,
      221,  226,  218,  227,  222,    0,  223,  225,  220,  221,
      223,  217,  222,  224,  224,  228,  226,  225,  226,  227,

      229,  229,  228,  230,  220,  231,  221,  226,  235,  227,
      222,  233,  230,  225,  235,  234,  236,  252,  252,  224,
      224,  228,  226,  255,  226,  227,  229,  229,  228,  230,
      253,  233,  234,  267,  235,  253,  263,  233,  230,  231,
      235,  234,    0,  252,  252,    0,    0,    0,    0,  255,
      236,    0,  263,    0,    0,  258,  253,  233,  234,  267,
        0,  253,  263,    0,    0,  231,  242,  242,  242,  242,
      242,  242,  242,  242,  242,    0,  236,  243,  263,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  258,
      243,  243,  243,  243,  243,  243,  245,    0,  245,  245,

      245,  245,  245,  245,  245,  245,  245,    0,    0,    0,
        0,    0,    0,    0,    0,  258,  243,  243,  243,  243,
      243,  243,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  257,  291,  244,  244,  244,  244,  244,  244,  246,
      257,  246,  246,  246,  246,  246,  246,  246,  246,  246,
        0,  259,    0,    0,    0,    0,    0,  257,  291,  244,
      244,  244,  244,  244,  244,  247,  257,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  279,  247,  247,
      247,  247,  247,  247,  248,  259,  248,  248,  248,  248,
      248,  248,  248,  248,  248,    0,  279,    0,    0,    0,

        0,    0,    0,  279,  247,  247,  247,  247,  247,  247,
      249,  259,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  279,  249,  249,  249,  249,  249,  249,  250,
      269,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      254,    0,  254,  260,  260,  256,  256,  256,  261,  249,
      249,  249,  249,  249,  249,  256,  262,  262,  264,  268,
      261,  265,  265,  266,  269,  264,  254,  271,  254,  260,
      260,  256,  256,  256,  261,  266,  268,  270,    0,  271,
      272,  256,  262,  262,  264,  268,  261,  265,  265,  266,
      269,  264,  273,  271,  274,  272,  275,  276,  278,  277,

      274,  266,  268,  276,  273,  271,  272,  281,  285,  280,
      289,  270,  275,  281,    0,  282,    0,    0,  273,  277,
      274,  272,  275,  276,  280,  277,  274,  283,  285,  276,
      273,  282,  278,  281,  285,  280,  293,  270,  275,  281,
      284,  282,  286,  283,  289,  277,  287,  284,  288,  286,
      280,  288,  287,  283,  285,  290,  290,  282,  278,  294,
      292,  298,  293,  295,  298,  294,  284,  302,  286,  283,
      289,  296,  287,  284,  288,  286,  292,  288,  287,  295,
      296,  290,  290,  299,  297,  294,  292,  298,  300,  295,
      298,  294,  301,  300,  301,  304,  303,  296,  297,  303,

      320,  302,  292,  299,  333,  295,  296,  323,    0,  299,
      297,    0,  304,    0,  300,    0,    0,    0,  301,  300,
      301,  304,  303,  323,  297,  303,    0,  302,    0,  299,
      333,    0,    0,  323,  320,    0,    0,  309,  304,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  310,  323,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      320,  310,  310,  310,  310,  310,  310,  311,  348,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  310,  310,  310,
      310,  310,  310,  312,  348,  312,  312,  312,  312,  312,

      312,  312,  312,  312,  312,  321,  312,  312,  312,  312,
      312,  312,  313,  349,  313,  313,  313,  313,  313,  313,
      313,  313,  313,    0,    0,  321,    0,    0,    0,    0,
        0,  321,  312,  312,  312,  312,  312,  312,  315,  349,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      317,  321,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,    0,  317,  317,  317,  317,  317,  317,  319,
        0,  319,  319,  319,  319,  319,  319,  319,  319,  319,
        0,    0,    0,    0,    0,  331,  322,    0,  322,  317,
      317,  317,  317,  317,  317,  318,  318,  318,  318,  318,

      318,  318,  318,  318,  324,  325,  318,  318,  318,  318,
      318,  318,  322,  326,  322,  327,  324,  327,  328,  331,
      330,  325,  332,  353,  334,  332,  328,  330,    0,  326,
      324,  325,  318,  318,  318,  318,  318,  318,    0,  326,
      334,  327,  324,  327,  328,  331,  330,  325,  332,  353,
      334,  332,  328,  330,  336,  326,  329,  329,    0,  329,
      329,  329,  329,  329,  329,  329,  334,  329,  335,  339,
      339,  336,  340,  337,  338,  341,  335,  329,  329,  342,
      336,  337,  338,  341,  343,  343,  344,    0,  342,    0,
        0,    0,  340,    0,  335,  339,  339,  336,  340,  337,

      338,  341,  335,  344,  346,  342,  355,  337,  338,  341,
      343,  343,  344,  345,  342,  358,  346,  347,  340,  350,
      355,  345,  351,  347,  354,  351,  354,  350,  352,  344,
      346,  352,  355,  358,  359,  356,    0,  360,  364,  345,
      357,  358,  346,  347,  356,  350,  355,  345,  351,  347,
      354,  351,  354,  350,  352,  361,  357,  352,  363,  358,
      365,  356,  362,  361,  364,  362,  357,  366,  359,  366,
      356,  360,  365,  367,  363,  368,  368,  370,  369,  367,
      371,  361,  357,    0,  363,    0,  365,  369,  362,  361,
      396,  362,  371,  366,  359,  366,    0,  360,  365,  367,

      363,  368,  368,  390,  369,  367,  371,  390,  392,  392,
        0,  370,    0,  369,    0,    0,  396,    0,  371,  375,
      375,  375,  375,  375,  375,  375,  375,  375,    0,  390,
        0,    0,    0,  390,  392,  392,  376,  370,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  378,    0,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      399,  378,  378,  378,  378,  378,  378,  380,  389,  380,
      380,  380,  380,  380,  380,  380,  380,  380,    0,    0,
        0,    0,    0,    0,    0,  402,  399,  378,  378,  378,
      378,  378,  378,  379,  379,  379,  379,  379,  379,  379,

      379,  379,  389,  416,  379,  379,  379,  379,  379,  379,
      381,  402,  381,  381,  381,  381,  381,  381,  381,  381,
      381,    0,  417,    0,    0,    0,    0,    0,  389,  416,
      379,  379,  379,  379,  379,  379,  382,    0,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  383,  417,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  423,
      383,  383,  383,  383,  383,  383,  384,  434,  384,  384,
      384,  384,  384,  384,  384,  384,  384,    0,    0,    0,
        0,    0,    0,    0,    0,  423,  383,  383,  383,  383,
      383,  383,  385,  434,  385,  385,  385,  385,  385,  385,

      385,  385,  385,  385,  393,  385,  385,  385,  385,  385,
      385,  386,  391,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  388,  395,  393,  388,    0,  391,  465,  394,
      393,  385,  385,  385,  385,  385,  385,  387,  391,  479,
      387,  394,  397,  395,  398,  398,  387,    0,  388,  395,
      393,  388,  397,  391,  465,  394,    0,    0,  401,  401,
      397,  397,    0,  387,  403,  479,  387,  394,  397,  395,
      398,  398,  387,  405,  406,  400,  407,  408,  397,  405,
      403,  400,  404,  400,  401,  401,  397,  397,  400,  404,
      403,  410,  407,    0,  406,  408,  409,  410,    0,  405,

      406,  400,  407,  408,  414,  405,  403,  400,  404,  400,
      411,  412,  409,  413,  400,  404,    0,  410,  407,  414,
      406,  408,  409,  410,  418,  415,  411,  412,  415,  413,
      414,  419,  419,  420,  420,    0,  411,  412,  409,  413,
      421,    0,  421,  425,  418,  414,  422,  422,    0,  425,
      418,  415,  411,  412,  415,  413,  426,  419,  419,  420,
      420,  424,    0,  428,  427,  430,  421,  430,  421,  425,
      418,  424,  422,  422,  426,  425,  427,  431,  424,  429,
      429,    0,  426,  428,  431,  433,  432,  424,  432,  428,
      427,  430,  433,  430,  436,  435,  436,  424,  437,  482,

      426,  437,  427,  431,  424,  429,  429,  435,    0,  428,
      431,  433,  432,    0,  432,    0,    0,    0,  433,    0,
      436,  435,  436,    0,  437,  482,    0,  437,    0,  483,
        0,    0,  442,  435,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  443,    0,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  444,  483,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,    0,  444,  444,  444,
      444,  444,  444,  445,  484,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  444,  444,  444,  444,  444,  444,  446,

      484,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  457,  446,  446,  446,  446,  446,  446,  447,  486,
      447,  447,  447,  447,  447,  447,  447,  447,  447,    0,
        0,  457,    0,    0,    0,    0,    0,  457,  446,  446,
      446,  446,  446,  446,  449,  486,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  451,  457,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,    0,  451,
      451,  451,  451,  451,  451,  453,    0,  453,  453,  453,
      453,  453,  453,  453,  453,  453,    0,    0,  459,    0,
        0,    0,    0,    0,  454,  451,  451,  451,  451,  451,

      451,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      454,  455,  452,  452,  452,  452,  452,  452,  455,  456,
      454,  458,  459,    0,    0,  462,  456,  462,  464,  463,
      458,  464,    0,  460,  463,    0,  454,  455,  452,  452,
      452,  452,  452,  452,  455,  456,  467,  458,  459,  460,
      461,  462,  456,  462,  464,  463,  458,  464,  466,  460,
      463,  468,  469,  461,  471,  470,  467,  466,  477,  472,
      469,  470,  467,  471,  473,  460,  461,  468,  474,  476,
      474,  473,  476,  480,  466,  472,  480,  468,  469,  461,
      471,  470,  467,  466,  478,  472,  469,  470,  475,  471,

      473,  487,  477,  468,  474,  476,  474,  473,  476,  480,
      478,  472,  480,  481,  485,  475,  485,  488,  489,  490,
      478,  491,  481,  493,  475,  492,  502,  487,  477,  488,
        0,    0,  494,    0,  489,  490,  478,    0,  492,  481,
      485,  475,  485,  488,  489,  490,  495,  491,  481,  497,
      494,  492,  502,  496,  495,  488,  498,  493,  494,  501,
      489,  490,  496,  504,  492,  499,  497,  500,  498,  500,
      503,    0,  495,  501,  506,  497,  494,  532,  504,  496,
      495,  499,  498,  493,  547,  501,  503,    0,  496,  504,
        0,  499,  497,  500,  498,  500,  503,  505,  548,  501,

      506,    0,  505,  532,  504,    0,    0,  499,    0,    0,
      547,    0,  503,  510,  510,  510,  510,  510,  510,  510,
      510,  510,    0,  505,  548,  549,    0,  511,  505,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  513,
        0,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  549,  513,  513,  513,  513,  513,  513,  515,    0,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  513,  513,
      513,  513,  513,  513,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  521,  524,  514,  514,  514,  514,  514,

      514,  518,  524,  518,  518,  518,  518,  518,  518,  518,
      518,  518,    0,  521,    0,    0,    0,    0,    0,  521,
      524,  514,  514,  514,  514,  514,  514,  517,  524,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  521,
      517,  517,  517,  517,  517,  517,  520,  550,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  517,  517,  517,  517,
      517,  517,  519,  550,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  522,  519,  519,  519,  519,  519,
      519,  523,  525,  522,  526,  527,  527,    0,  531,  528,

        0,  523,    0,  526,  525,  528,    0,  529,  530,    0,
      522,  519,  519,  519,  519,  519,  519,  523,  525,  522,
      526,  527,  527,  529,  530,  528,  533,  523,  536,  526,
      525,  528,  531,  529,  530,  534,  535,  537,  534,  538,
      540,  540,  539,  535,  537,  539,  533,  541,  536,  529,
      530,    0,  533,  543,  536,  545,  554,  542,  531,  538,
        0,  534,  535,  537,  534,  538,  540,  540,  539,  535,
      537,  539,  533,  542,  536,  546,  544,  546,    0,  551,
      556,  541,  554,  542,  544,  538,  551,  543,  552,  545,
      553,  552,  557,  553,  559,  555,  556,  558,    0,  542,

      557,  546,  544,  546,  555,  551,  556,  541,  561,  558,
      544,  561,  551,  543,  552,  545,  553,  552,  557,  553,
      559,  555,  556,  558,  560,  562,  557,  563,  564,  565,
      555,  560,  566,    0,  561,  558,    0,  561,    0,    0,
        0,    0,    0,    0,  581,  565,  581,  590,  566,    0,
      560,  562,    0,  563,  564,  565,    0,  560,  566,  573,
        0,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      581,  565,  581,  590,  566,  572,    0,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  592,  572,  572,
      572,  572,  572,  572,  575,  599,  575,  575,  575,  575,

      575,  575,  575,  575,  575,    0,  594,    0,    0,    0,
        0,    0,    0,  592,  572,  572,  572,  572,  572,  572,
      574,  599,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  602,  574,  574,  574,  574,  574,  574,  576,
      594,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  606,    0,    0,    0,    0,    0,    0,  602,  574,
      574,  574,  574,  574,  574,  578,  594,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  606,  578,  578,
      578,  578,  578,  578,  580,    0,  580,  580,  580,  580,
      580,  580,  580,  580,  580,    0,    0,    0,    0,    0,

        0,    0,    0,  586,  578,  578,  578,  578,  578,  578,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  586,
      588,  579,  579,  579,  579,  579,  579,  582,  583,  586,
      584,  582,  584,    0,  585,  583,  585,  588,  589,    0,
        0,    0,  589,  587,    0,  586,  588,  579,  579,  579,
      579,  579,  579,  582,  583,  587,  584,  582,  584,  595,
      585,  583,  585,  588,  589,  591,  596,  597,  589,  587,
      593,    0,  593,    0,  591,  598,  595,  600,  605,  601,
      603,  587,  604,  597,  596,  595,  607,  598,  604,  603,
      605,  591,  596,  597,  608,  609,  593,  600,  593,  601,

      591,  598,  595,  600,  605,  601,  603,  610,  604,  597,
      596,  611,  607,  598,  604,  603,  605,  612,  613,  614,
      608,  609,  615,  600,  616,  601,  617,  618,  618,  612,
      633,  614,    0,  610,  635,  632,  639,  611,  615,    0,
      619,    0,    0,  612,  613,  614,    0,    0,  615,    0,
      616,  632,  617,  618,  618,  612,  633,  614,  619,    0,
      635,  632,  639,    0,  615,  623,  619,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  632,    0,  640,
        0,    0,    0,    0,  619,  625,    0,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  642,  625,  625,

      625,  625,  625,  625,  627,  640,  627,  627,  627,  627,
      627,  627,  627,  627,  627,    0,    0,    0,    0,    0,
        0,    0,  647,  642,  625,  625,  625,  625,  625,  625,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  636,
      636,  626,  626,  626,  626,  626,  626,  629,  647,  629,
      629,  629,  629,  629,  629,  629,  629,  629,    0,    0,
        0,    0,    0,    0,    0,  636,  636,  626,  626,  626,
      626,  626,  626,  628,    0,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  628,  638,  628,  628,  628,  628,
      628,  628,  631,  638,  631,  631,  631,  631,  631,  631,

      631,  631,  631,    0,    0,    0,    0,    0,    0,    0,
      646,  638,  628,  628,  628,  628,  628,  628,  630,  638,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      641,  630,  630,  630,  630,  630,  630,  634,  637,  643,
      644,  643,  645,  634,  646,  637,  641,  648,  645,  644,
        0,    0,    0,    0,  648,    0,  641,  630,  630,  630,
      630,  630,  630,  634,  637,  643,  644,  643,  645,  634,
      646,  637,  641,  648,  645,  644,  649,  650,  656,  651,
      648,  652,  653,  657,  657,  649,  660,  674,  659,  658,
      675,  674,  675,  656,  650,  651,  658,  676,  652,  653,

      659,    0,  649,  650,  656,  651,    0,  652,  653,  657,
      657,  649,  660,  674,  659,  658,  675,  674,  675,  656,
      650,  651,  658,  676,  652,  653,  659,  665,    0,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  677,
      665,  665,  665,  665,  665,  665,  666,  681,  666,  666,
      666,  666,  666,  666,  666,  666,  666,    0,    0,    0,
        0,    0,    0,    0,    0,  677,  665,  665,  665,  665,
      665,  665,  667,  681,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  680,  667,  667,  667,  667,  667,
      667,  668,  682,  668,  668,  668,  668,  668,  668,  668,

      668,  668,    0,    0,  680,    0,    0,    0,    0,    0,
      680,  667,  667,  667,  667,  667,  667,  669,  682,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  671,
      680,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,    0,  671,  671,  671,  671,  671,  671,  673,    0,
      673,  673,  673,  673,  673,  673,  673,  673,  673,    0,
        0,    0,    0,    0,    0,    0,    0,  678,  671,  671,
      671,  671,  671,  671,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  678,  679,  672,  672,  672,  672,  672,
      672,  683,  684,  678,  686,  684,  685,  687,  691,    0,

      679,    0,  685,  693,  685,  708,    0,  683,  688,  678,
      679,  672,  672,  672,  672,  672,  672,  683,  684,  689,
      686,  684,  685,  687,  690,  688,  679,  692,  685,  693,
      685,  708,  691,  683,  688,  694,  694,  709,  695,  689,
      690,  710,  720,  692,  709,  689,  695,    0,    0,    0,
      690,  688,    0,  692,    0,    0,    0,    0,  691,    0,
        0,  694,  694,  709,  695,  689,  690,  710,  720,  692,
      709,  699,  695,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  701,    0,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  751,  701,  701,  701,  701,

      701,  701,  703,    0,  703,  703,  703,  703,  703,  703,
      703,  703,  703,    0,    0,    0,    0,    0,    0,    0,
      745,  751,  701,  701,  701,  701,  701,  701,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  714,  752,  702,
      702,  702,  702,  702,  702,  705,  745,  705,  705,  705,
      705,  705,  705,  705,  705,  705,    0,  714,    0,    0,
        0,    0,    0,  714,  752,  702,  702,  702,  702,  702,
      702,  704,  745,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  714,  704,  704,  704,  704,  704,  704,
      707,  769,  707,  707,  707,  707,  707,  707,  707,  707,

      707,    0,  715,    0,    0,    0,    0,    0,    0,    0,
      704,  704,  704,  704,  704,  704,  706,  769,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  716,  706,
      706,  706,  706,  706,  706,  711,  715,  712,  711,  712,
      717,  718,    0,  721,  718,  716,  719,  770,  719,  721,
      722,  722,    0,  717,  716,  706,  706,  706,  706,  706,
      706,  711,  715,  712,  711,  712,  717,  718,  724,  721,
      718,  716,  719,  770,  719,  721,  722,  722,  723,  717,
      723,  738,    0,  730,  724,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  724,    0,    0,  738,    0,    0,

        0,    0,    0,    0,  723,  771,  723,  738,  739,    0,
      724,  729,    0,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  738,  729,  729,  729,  729,  729,  729,
      732,  771,  732,  732,  732,  732,  732,  732,  732,  732,
      732,    0,  739,    0,    0,    0,    0,    0,    0,    0,
      729,  729,  729,  729,  729,  729,  731,    0,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  739,  731,
      731,  731,  731,  731,  731,  733,  775,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  778,    0,    0,
        0,    0,    0,    0,    0,  731,  731,  731,  731,  731,

      731,  735,  775,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  778,  735,  735,  735,  735,  735,  735,
      737,    0,  737,  737,  737,  737,  737,  737,  737,  737,
      737,    0,    0,    0,    0,    0,    0,    0,    0,  741,
      735,  735,  735,  735,  735,  735,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  741,  742,  736,  736,  736,
      736,  736,  736,  740,  743,  741,  743,  740,    0,    0,
        0,  746,  742,    0,  749,    0,  798,  749,  744,  747,
      768,  741,  742,  736,  736,  736,  736,  736,  736,  740,
      743,  746,  743,  740,  744,  747,  744,  746,  742,  748,

      749,  750,  798,  749,  744,  747,    0,    0,    0,    0,
        0,    0,  799,  750,  768,  748,    0,  746,    0,    0,
      744,  747,  744,    0,    0,  748,  757,  750,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  799,  750,
      768,  748,  759,    0,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  800,  759,  759,  759,  759,  759,
      759,  761,    0,  761,  761,  761,  761,  761,  761,  761,
      761,  761,    0,    0,    0,    0,    0,    0,    0,    0,
      800,  759,  759,  759,  759,  759,  759,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  773,  803,  760,  760,

      760,  760,  760,  760,  763,  773,  763,  763,  763,  763,
      763,  763,  763,  763,  763,    0,    0,    0,    0,  805,
        0,    0,  773,  803,  760,  760,  760,  760,  760,  760,
      762,  773,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  805,  762,  762,  762,  762,  762,  762,  765,
        0,  765,  765,  765,  765,  765,  765,  765,  765,  765,
        0,  767,    0,    0,    0,    0,    0,    0,  805,  762,
      762,  762,  762,  762,  762,  764,  767,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  767,  764,  764,
      764,  764,  764,  764,  766,  772,  774,  766,  777,    0,

      777,  774,  767,  776,  776,  776,    0,  776,  779,  795,
        0,  772,    0,  795,  764,  764,  764,  764,  764,  764,
      766,  772,  774,  766,  777,  779,  777,  774,  780,  801,
      807,  822,  807,  776,  779,  795,  780,  772,  787,  795,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  801,
        0,  779,    0,  806,  780,  801,  807,  822,  807,  776,
        0,    0,  780,  786,    0,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  801,  786,  786,  786,  786,
      786,  786,  789,  806,  789,  789,  789,  789,  789,  789,
      789,  789,  789,    0,  827,    0,    0,    0,    0,    0,

        0,    0,  786,  786,  786,  786,  786,  786,  788,  806,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  825,
      827,  788,  788,  788,  788,  788,  788,  790,  828,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  825,
        0,    0,    0,    0,    0,  825,    0,  788,  788,  788,
      788,  788,  788,  792,  828,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  825,  792,  792,  792,  792,
      792,  792,  794,  802,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  796,  808,  804,  797,  796,  804,  802,
      824,  809,  792,  792,  792,  792,  792,  792,  797,  802,

      808,  829,  835,  829,  837,  797,  797,  809,  824,  796,
      808,  852,  797,  796,  804,  802,  824,  809,    0,    0,
        0,    0,    0,    0,  797,    0,  808,  829,  835,  829,
      837,  797,  797,  809,  824,  831,    0,  852,  832,  815,
      804,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  817,    0,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  831,  832,  817,  817,  817,  817,  817,  817,
      818,  856,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  833,    0,    0,    0,    0,    0,    0,  831,  832,
      817,  817,  817,  817,  817,  817,  819,  856,  819,  819,

      819,  819,  819,  819,  819,  819,  819,  819,  833,  819,
      819,  819,  819,  819,  819,  820,  823,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  826,  830,  834,  848,
      857,    0,  826,  823,  833,  819,  819,  819,  819,  819,
      819,  847,  823,  836,  826,  830,  836,  848,  847,  858,
      859,  849,  826,  830,  849,  848,  857,  834,  826,  823,
        0,    0,    0,    0,    0,    0,    0,  847,    0,  836,
      826,  830,  836,  848,  847,  858,  859,  849,    0,    0,
      849,    0,    0,  834,  842,  870,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  860,  851,  842,  842,  842,

      842,  842,  842,  843,  851,  843,  843,  843,  843,  843,
      843,  843,  843,  843,    0,  850,  854,  868,  854,  870,
      850,  860,  851,  842,  842,  842,  842,  842,  842,  844,
      851,  844,  844,  844,  844,  844,  844,  844,  844,  844,
      844,  850,  854,  868,  854,  870,  850,  855,  855,  871,
      855,  855,  855,  855,  855,  855,  869,  865,  855,  865,
      865,  865,  865,  865,  865,  865,  865,  865,  855,  855,
      872,    0,  869,  874,  874,  884,  876,  876,  886,    0,
        0,  884,  869,  871,  875,  875,  872,  875,  875,  875,
      875,  875,  875,  876,  887,  875,  872,  882,  869,  874,

      874,  884,  876,  876,  886,  875,  875,  884,  881,  871,
      889,  883,  872,  881,  898,  882,  883,  885,  885,  876,
      887,  888,  888,  882,  890,  895,  895,  896,  899,  897,
      889,  890,  900,  896,  881,  897,  889,  883,  888,  881,
      898,  882,  883,  885,  885,  901,  903,  888,  888,  906,
      890,  895,  895,  896,  899,  897,  889,  890,  900,  896,
      904,  897,  905,  905,  888,  910,  903,  904,  914,  911,
      912,  901,  903,  912,  916,  906,  911,  913,  913,  917,
      917,  918,    0,  926,    0,  927,  904,  930,  905,  905,
      919,  910,  903,  904,  914,  911,  912,  925,  925,  912,

      916,  924,  911,  913,  913,  917,  917,  918,  924,  926,
      919,  927,  929,  930,  935,  934,  919,  934,  937,  942,
        0,    0,    0,  925,  925,    0,    0,  924,    0,    0,
        0,    0,  929,    0,  924,    0,  919,    0,  929,    0,
      935,  934,    0,  934,  937,  942,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  929,  953,
      953,  953,  953,  954,  954,  954,  954,  955,  955,  955,
      955,  956,    0,  956,  956,  957,  957,  957,  957,  958,
        0,  958,  958,  959,  959,  961,  961,  962,  962,  963,
      963,  964,  964,  965,  965,  966,  966,  967,  967,  968,

      968,  969,  969,  970,  970,  971,    0,  971,  971,  972,
      972,  973,  973,  974,  974,  975,  975,  976,  976,  977,
      977,  978,  978,  979,  979,  980,  980,  981,  981,  982,
      982,  983,  983,  984,  984,  985,  985,  986,  986,  987,
      987,  988,  988,  989,  989,  990,  990,  991,  991,  992,
      992,  993,  993,  994,  994,  995,  995,  996,  996,  997,
      997,  999,  999, 1000, 1000, 1001, 1001, 1003, 1003, 1004,
     1004, 1005, 1005, 1008, 1008, 1009, 1009, 1010, 1010, 1012,
        0, 1012, 1012, 1013,    0, 1013, 1013, 1014, 1014, 1015,
     1015, 1018,    0, 1018, 1018, 1019,    0, 1019, 1019, 1020,

     1020, 1021, 1021, 1022, 1022, 1023, 1023, 1024, 1024, 1026,
     1026, 1027, 1027, 1028, 1028, 1029, 1029, 1030, 1030, 1032,
     1032, 1033, 1033, 1034, 1034, 1036, 1036, 1038, 1038, 1039,
     1039, 1040, 1040, 1042, 1042,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,

      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[114] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 2057 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 2167 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 953 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5636 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 59 "SrvLexer.l"
{ return SrvParser::LOGCOLORS_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 61 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 64 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 69 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::ACCEPT_UNKNOWN_FQDN_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::FQDN_DDNS_ADDRESS_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 108 "SrvLexer.l"
{ return SrvParser::REMOTE_AUTOCONF_NEIGHBORS_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::DS_LITE_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::BULKLQ_ACCEPT_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::BULKLQ_TCPPORT_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::BULKLQ_MAX_CONNS_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::BULKLQ_TIMEOUT_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 122 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 125 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 126 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{ return SrvParser::CLIENT_CLASS_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{ return SrvParser::MATCH_IF_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 130 "SrvLexer.l"
{ return SrvParser::EQ_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 131 "SrvLexer.l"
{ return SrvParser::AND_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
{ return SrvParser::OR_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 134 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_DATA_; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 135 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_EN_; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 136 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_DATA_; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 137 "SrvLexer.l"
{ return SrvParser::ALLOW_; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 138 "SrvLexer.l"
{ return SrvParser::DENY_; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 139 "SrvLexer.l"
{ return SrvParser::SUBSTRING_; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 140 "SrvLexer.l"
{ return SrvParser::CONTAIN_; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 141 "SrvLexer.l"
{ return SrvParser::STRING_KEYWORD_; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 142 "SrvLexer.l"
{ return SrvParser::ADDRESS_LIST_; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 145 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 146 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 147 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 148 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 150 "SrvLexer.l"
;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 152 "SrvLexer.l"
;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 154 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno; 
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 159 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 160 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 161 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 99:
YY_RULE_SETUP
#line 168 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 177 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 186 "SrvLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 195 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 204 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 213 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 222 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 234 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 241 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 262 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd then no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 294 "SrvLexer.l"
{
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   // Log(Crit) << "#### Detected [" << yytext << "] as DUID [len=" << len << "]" << LogEnd;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
        x = (toupper(*pos)-'A' + 10);
      else
        x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))	
        x += (toupper(*(pos+1))-'A' + 10);
      else
        x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }
   
   return SrvParser::DUID_;
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 322 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd; 
      YYABORT; 
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 332 "SrvLexer.l"
{ 
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) { 
        Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd; 
        YYABORT; 
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 341 "SrvLexer.l"
{ return yytext[0]; } 
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 344 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 2986 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 953 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 953 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 952);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 344 "SrvLexer.l"




