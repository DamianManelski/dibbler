#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 61
#define YY_END_OF_BUFFER 62
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[551] =
    {   0,
        1,    1,    0,    0,    0,    0,   62,   60,    2,    1,
        1,   60,   43,   60,   60,   59,   59,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   47,   47,   61,    1,
        1,    1,    0,   55,   43,    0,   55,   45,   44,   59,
        0,    0,   58,    0,   52,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   40,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   14,
       15,   56,   56,   56,   56,   56,   56,   46,   44,   59,
        0,    0,   51,   57,   50,   50,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   39,   59,    0,    0,    0,   49,
       49,    0,   50,    0,   50,   56,   56,   56,   56,   56,
       56,   56,   33,   56,   56,   56,   56,    0,   56,   56,
       56,   20,   56,   56,   56,   56,   56,   56,   56,   56,
       41,   56,   56,   56,   59,    0,    0,    0,    0,   49,
        0,   49,    0,   50,   50,   50,   50,   56,   56,    4,
       56,   56,   56,   42,    3,   56,   56,   56,   56,   56,
        0,   56,   56,   56,   56,   56,   56,   56,    6,   21,

       56,   56,   56,   56,   56,   56,   56,    0,    0,    0,
        0,   49,   49,   49,   49,    0,   50,   50,   50,    0,
       50,   56,   56,   56,   56,   28,   56,   56,   56,   56,
       56,   56,    0,    0,   56,   56,   56,   26,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,    0,    0,
        0,   49,   49,   49,    0,   49,    0,    0,   50,   50,
       50,   50,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,    0,    0,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   18,   56,   56,    0,    0,    0,
        0,    0,   49,   49,   49,   49,    0,   50,   50,   50,

        0,   50,   56,   56,   56,   56,   56,   56,   38,   56,
       10,    8,    0,    0,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   11,    0,    0,    0,
       49,   49,   49,    0,   49,   54,   50,   50,   50,   50,
       56,   56,   56,   56,   56,   56,    9,    0,    0,   56,
       56,   56,   56,   56,   56,   56,   56,   56,    5,   30,
       56,    0,    0,    0,   53,   49,   49,   49,   49,   50,
       50,   50,    0,   50,   56,   56,   56,   27,   56,   56,
        0,    0,   35,   34,   29,   56,   19,   56,   56,   32,
       31,   56,    0,    0,   49,   49,   49,    0,   49,   50,

       50,   50,   50,   12,   56,   56,   56,   56,   37,   36,
       56,   56,   56,   56,    0,    0,    0,   49,   49,   49,
       49,   50,   50,   50,    0,   50,   56,   56,   56,    7,
       56,   22,   56,   56,    0,    0,   49,   49,   49,    0,
       49,   50,   50,   50,   50,   56,   56,   56,   56,   56,
       56,    0,    0,    0,   49,   49,   49,   49,   50,   50,
       50,    0,   50,   56,   56,   56,   56,   13,   17,    0,
       48,   51,   49,   49,   49,    0,   49,   50,   50,   50,
       50,   24,   56,   23,   56,    0,   48,    0,   49,   49,
       49,   49,   49,   50,   50,   50,    0,   50,   25,   56,

       48,   51,   49,    0,   49,   49,   49,   49,   50,   50,
       50,   16,   48,   49,   49,   49,   49,   50,   50,   50,
       49,   49,    0,   49,   49,   50,   49,   49,   50,   49,
       49,    0,   49,   49,   49,   49,    0,   49,   49,   49,
       49,    0,   49,   49,   49,   49,    0,   49,   49,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   16,   16,   16,   16,   16,   16,   17,    1,    1,
        1,    1,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
        1,    1,    1,    1,    1,    1,   18,   19,   20,   21,

       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[44] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        3,    1,    4,    4,    4,    4,    5,    4,    4,    4,
        4,    4,    4,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[630] =
    {   0,
        0,    0, 1846, 1845,    0,    0, 1852, 1855, 1855,   41,
       43, 1846,    0, 1843,   40,   40, 1808, 1831,   69,   82,
     1818,   18,   33, 1829,   47,   89,   91,   60,   92,   51,
       93,   99,   49,   54,   94,   57, 1855, 1833, 1855,   72,
      128,  132, 1839, 1855,    0, 1836, 1835, 1855,    0,  124,
     1824,  137, 1855,    0,  141, 1823,  145, 1819, 1821,  152,
      112,  103, 1808,  154,  155,  145,  157,  159,  160, 1819,
      162,  164,  167,  168,  169,  171,  174,  170,  176, 1818,
     1817,  180,  187,  188,  189,  172,  191, 1855,    0,  215,
      206, 1816,  228,    0,  234,  247,  251, 1810,  242,  194,

      207,  195,  251,  192,  259,  258,  260,  229,  274,  271,
      268,  269,  272,  273,  275,  283,  276,  286,  285,  287,
      288,  295,  290,  198, 1814,  310,  304, 1813, 1812,  325,
      338,  342,  348,  359,  365,  369, 1795,  360,  369,  376,
      377,  291, 1810,  380,  378,  297,  387, 1816,  384,  389,
      289, 1808,  392,  390,  402,  381,  393,  407,  404,  417,
     1807,  412,  414,  422,  431, 1806, 1805, 1804,  436,  442,
      453,  459,  465,  471,  484,  490,  503, 1803,  485,  423,
      498,  419,  503, 1802,  511,  454,  382,  420,  506,  507,
      505,  510,  514,  515,  512,  513,  523,  522, 1801, 1800,

      528,  527,  529,  530,  533,  544,  534, 1799, 1798, 1797,
      551,  563,  576,  582,  595,  599,  605, 1796,  612,  623,
      629,  546,  320,  558,  535, 1795,  466,  554,  577,  607,
      536,  624, 1779, 1788,  630,  631,  632, 1792,  633,  636,
      641,  635,  640,  642,  644,  645,  651,  646, 1791, 1790,
      670,  676, 1789,  683,  694,  700,  706,  712,  718,  731,
      737,  750,  656,  652,  713,  732,  660,  654,  745,  751,
      752,  753, 1775, 1769,  759,  755,  761,  762,  763,  764,
      768,  765,  770,  664, 1786,  771,  772, 1785, 1784, 1783,
      797,  803,  809,  822,  828,  841,  845,  851, 1782,  858,

      869,  875,  774,  846,  781,  779,  853,  875, 1781,  695,
     1780, 1779, 1777, 1755,  876,  878,  879,  792,  886,  773,
      881,  882,  887,  798,  890,  888, 1776, 1775, 1774,  900,
      906, 1773,  913,  924,  930,  934,  940,  953,  959,  972,
      967,  908,  948,  973,  981,  982, 1772, 1762, 1765,  976,
      977,  978,  980,  983,  823,  984,  985,  986, 1769, 1768,
      989, 1767, 1766, 1765, 1004, 1011, 1024, 1030, 1043, 1049,
     1764, 1056, 1067, 1073, 1019, 1068, 1081, 1763, 1073,  997,
     1748, 1743, 1760, 1759, 1758, 1075, 1757, 1077, 1078, 1756,
     1755, 1076, 1754, 1753, 1093, 1752, 1103, 1114, 1120, 1126,

     1139, 1145, 1158, 1751, 1153, 1082, 1159, 1161, 1855, 1855,
     1115, 1140, 1162, 1079, 1750, 1749, 1748, 1183, 1172, 1196,
     1209, 1215, 1747, 1222, 1176, 1235, 1235, 1237, 1238, 1746,
     1240, 1745, 1210, 1025, 1744, 1743, 1250, 1742, 1257, 1268,
     1274, 1280, 1293, 1299, 1312,  935, 1312, 1269, 1294, 1307,
     1315, 1741, 1740, 1739, 1333, 1325, 1346, 1359, 1365, 1738,
     1372, 1383, 1389, 1384, 1341, 1390, 1243, 1737, 1736, 1735,
     1734,    0, 1400, 1733, 1407, 1418, 1424, 1430, 1443, 1449,
     1462, 1732, 1457, 1731, 1178, 1730, 1729, 1633, 1620, 1469,
     1482, 1488, 1501, 1507, 1599, 1514,    0, 1527, 1592, 1483,

     1586, 1855, 1578,    0, 1533, 1573, 1540, 1553, 1559, 1572,
        0, 1567, 1554, 1548, 1540, 1578, 1591, 1597, 1535,    0,
     1528, 1522,    0, 1604, 1855,    0, 1509, 1502, 1855, 1496,
     1477,    0, 1464, 1444, 1438, 1425,    0, 1419, 1402, 1393,
     1392,    0, 1391, 1367, 1354, 1328,    0, 1325, 1318, 1855,
     1620, 1625, 1630, 1635, 1640, 1643, 1648, 1650, 1330, 1329,
     1652, 1288, 1654, 1656, 1254, 1658, 1660, 1230, 1662, 1664,
     1217, 1666, 1668, 1180, 1670, 1672, 1176, 1674, 1676, 1147,
     1678, 1680, 1111, 1682, 1684, 1108, 1686, 1688, 1064, 1690,
     1692, 1011, 1694, 1696, 1000, 1698, 1700,  938,  817, 1702,

     1704,  788, 1706, 1708,  714,  675, 1710, 1712,  613, 1714,
      584,  450, 1716, 1718, 1720,  434, 1722, 1724, 1726,  356,
     1728, 1730, 1732,  118, 1734, 1736, 1738,  108, 1740
    } ;

static yyconst flex_int16_t yy_def[630] =
    {   0,
      550,    1,  551,  551,  552,  552,  550,  550,  550,  550,
      550,  553,  554,  555,  550,  550,   16,  550,  556,  556,
       20,   20,   20,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  550,  550,  550,  550,
      550,  550,  553,  550,  554,  555,  550,  550,  557,  550,
      558,   50,  550,  559,  560,  556,   20,   57,  556,  556,
      556,  556,   57,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  550,  557,  550,
       90,  561,  562,  559,  550,   95,   57,   97,  556,  556,

      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  550,  126,  563,  564,  550,
      130,  550,  550,  565,  133,   97,  136,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  550,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  127,  127,  566,  567,  550,  550,
      568,  170,  550,  550,  174,  550,  176,  136,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      550,  556,  556,  556,  556,  556,  556,  556,  556,  556,

      556,  556,  556,  556,  556,  556,  556,  550,  569,  570,
      550,  550,  212,  550,  214,  550,  550,  550,  550,  571,
      219,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  550,  550,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  572,  573,
      550,  550,  550,  550,  574,  254,  550,  550,  550,  259,
      550,  261,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  550,  550,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  550,  575,  576,
      550,  550,  550,  293,  550,  295,  550,  550,  550,  550,

      577,  300,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  550,  550,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  578,  579,  550,
      550,  550,  550,  580,  333,  550,  550,  337,  550,  339,
      556,  556,  556,  556,  556,  556,  556,  550,  550,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  550,  581,  582,  550,  550,  366,  550,  368,  550,
      550,  550,  583,  372,  556,  556,  556,  556,  556,  556,
      550,  550,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  584,  585,  550,  550,  550,  586,  397,  550,

      400,  550,  402,  556,  556,  556,  556,  556,  550,  550,
      556,  556,  556,  556,  550,  587,  588,  550,  418,  550,
      420,  550,  550,  550,  589,  424,  556,  556,  556,  556,
      556,  556,  556,  556,  590,  591,  550,  550,  550,  592,
      439,  550,  442,  550,  444,  556,  556,  556,  556,  556,
      556,  550,  593,  594,  550,  455,  550,  457,  550,  550,
      550,  595,  461,  556,  556,  556,  556,  556,  556,  596,
      597,  598,  550,  550,  550,  599,  475,  550,  478,  550,
      480,  556,  556,  556,  556,  550,  600,  550,  601,  550,
      490,  550,  492,  550,  550,  550,  602,  496,  556,  556,

      603,  550,  604,  605,  550,  550,  550,  507,  550,  509,
      606,  556,  550,  607,  608,  550,  516,  550,  550,  609,
      550,  610,  611,  550,  550,  612,  613,  614,  550,  550,
      615,  616,  617,  618,  550,  619,  620,  621,  622,  550,
      623,  624,  625,  626,  550,  627,  628,  629,  550,    0,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,

      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550
    } ;

static yyconst flex_int16_t yy_nxt[1899] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   18,   19,   20,   21,
       22,   20,   23,   24,   24,   25,   24,   24,   26,   24,
       27,   28,   29,   24,   30,   31,   32,   33,   34,   35,
       24,   36,   24,   40,   41,   42,   41,   48,   61,   62,
       63,   49,   50,   50,   50,   50,   51,   52,   52,   52,
       52,   52,   52,  550,   53,  550,   64,  550,   75,   65,
      550,   85,   76,  550,   40,   41,  550,   66,   87,   84,
       54,   57,   57,   57,   57,   51,   57,   57,   58,   57,
       57,   57,   72,   59,   57,   57,   57,   57,   51,   57,

       57,   57,   57,   57,   57,  550,   59,  550,  550,  550,
      550,  493,   80,   81,   67,  550,   69,   77,   78,  550,
       68,  544,   70,   73,   82,   86,   74,   71,  550,   79,
       42,   41,  102,   83,   40,   41,   90,   90,   90,   90,
       51,   91,   91,   91,   91,   91,   91,  101,   53,   91,
       91,   91,   91,   95,   95,   95,   95,   97,   97,   97,
       97,  550,   97,   97,   97,   97,   97,   97,  550,   99,
      550,  550,  105,  550,  104,  550,  550,  100,  550,  107,
      550,  106,  108,  550,  550,  550,  550,  550,  550,  113,
      550,  117,  550,  119,  110,  109,  550,  115,  112,  116,

      111,  114,  118,  550,  550,  550,  124,  550,  550,  120,
      550,  550,  141,  122,  550,  139,  140,  123,  127,  127,
      127,  127,  143,  550,  121,  164,  125,  126,  126,  126,
      126,   51,  127,  127,  127,  127,  127,  127,  147,   53,
      130,  130,  130,  130,  132,  550,  133,  133,  133,  133,
      134,  135,  135,  135,  135,  135,  135,  550,  550,  135,
      135,  135,  135,  136,  136,  136,  136,  550,  136,  136,
      136,  136,  136,  136,  550,  550,  550,  138,  144,  145,
      150,  146,  148,  149,  550,  550,  142,  550,  550,  550,
      550,  550,  550,  151,  153,  158,  155,  152,  154,  550,

      156,  550,  550,  550,  550,  550,  550,  550,  160,  161,
      157,  550,  184,  550,  162,  163,  166,  166,  166,  166,
      195,  159,  165,  165,  165,  165,   51,  166,  166,  166,
      166,  166,  166,  187,   53,  169,  550,  170,  170,  170,
      170,  171,  172,  172,  172,  172,  172,  172,  550,  264,
      172,  172,  172,  172,  173,  173,  173,  173,  132,  539,
      174,  174,  174,  174,  134,  175,  175,  175,  175,  175,
      175,  176,  176,  176,  176,  550,  550,  175,  175,  175,
      175,  178,  178,  178,  178,  550,  178,  178,  178,  178,
      178,  178,  550,  550,  550,  180,  550,  550,  550,  181,

      550,  185,  183,  550,  192,  550,  550,  229,  550,  550,
      197,  182,  186,  196,  200,  188,  189,  190,  550,  193,
      550,  198,  199,  550,  194,  203,  204,  201,  550,  205,
      550,  207,  223,  550,  206,  550,  550,  534,  550,  550,
      225,  230,  202,  165,  165,  165,  165,  550,  211,  211,
      211,  211,  169,  529,  212,  212,  212,  212,  171,  213,
      213,  213,  213,  213,  213,  214,  214,  214,  214,  550,
      550,  213,  213,  213,  213,  216,  228,  173,  173,  173,
      173,  132,  550,  217,  217,  217,  217,  134,  218,  218,
      218,  218,  218,  218,  550,  267,  218,  218,  218,  218,

      132,  550,  219,  219,  219,  219,  220,  221,  221,  221,
      221,  221,  221,  550,  550,  221,  221,  221,  221,  550,
      227,  222,  550,  550,  232,  233,  550,  550,  550,  550,
      550,  550,  240,  226,  224,  236,  237,  231,  550,  550,
      234,  235,  238,  550,  550,  550,  550,  239,  243,  550,
      550,  550,  550,  247,  248,  263,  271,  244,  241,  242,
      550,  251,  550,  211,  211,  211,  211,  265,  246,  266,
      550,  268,  245,  169,  550,  252,  252,  252,  252,  171,
      253,  253,  253,  253,  253,  253,  550,  528,  253,  253,
      253,  253,  169,  550,  254,  254,  254,  254,  255,  256,

      256,  256,  256,  256,  256,  550,  269,  256,  256,  256,
      256,  257,  257,  257,  257,  132,  526,  258,  258,  258,
      258,  134,  132,  550,  259,  259,  259,  259,  220,  260,
      260,  260,  260,  260,  260,  261,  261,  261,  261,  550,
      550,  260,  260,  260,  260,  270,  550,  550,  550,  550,
      280,  550,  550,  272,  278,  279,  550,  550,  550,  275,
      550,  550,  550,  283,  281,  276,  277,  550,  550,  304,
      550,  287,  550,  308,  282,  284,  550,  307,  520,  286,
      550,  285,  291,  291,  291,  291,  169,  303,  292,  292,
      292,  292,  171,  169,  325,  293,  293,  293,  293,  255,

      294,  294,  294,  294,  294,  294,  295,  295,  295,  295,
      550,  550,  294,  294,  294,  294,  297,  515,  257,  257,
      257,  257,  132,  347,  258,  258,  258,  258,  132,  550,
      298,  298,  298,  298,  220,  299,  299,  299,  299,  299,
      299,  550,  305,  299,  299,  299,  299,  132,  550,  300,
      300,  300,  300,  301,  302,  302,  302,  302,  302,  302,
      550,  550,  302,  302,  302,  302,  309,  550,  550,  550,
      306,  550,  310,  311,  312,  550,  315,  550,  550,  550,
      550,  550,  318,  321,  550,  322,  550,  550,  550,  550,
      550,  511,  319,  316,  320,  550,  326,  550,  343,  317,

      344,  353,  355,  323,  341,  324,  327,  330,  550,  291,
      291,  291,  291,  169,  550,  292,  292,  292,  292,  169,
      493,  331,  331,  331,  331,  255,  332,  332,  332,  332,
      332,  332,  550,  359,  332,  332,  332,  332,  169,  550,
      333,  333,  333,  333,  334,  335,  335,  335,  335,  335,
      335,  550,  388,  335,  335,  335,  335,  336,  336,  336,
      336,  132,  550,  258,  258,  258,  258,  220,  132,  550,
      337,  337,  337,  337,  301,  338,  338,  338,  338,  338,
      338,  339,  339,  339,  339,  550,  342,  338,  338,  338,
      338,  550,  550,  345,  550,  550,  346,  550,  550,  351,

      352,  350,  550,  550,  550,  354,  550,  357,  358,  356,
      361,  360,  365,  365,  365,  365,  169,  376,  292,  292,
      292,  292,  255,  169,  550,  366,  366,  366,  366,  334,
      367,  367,  367,  367,  367,  367,  368,  368,  368,  368,
      550,  489,  367,  367,  367,  367,  336,  336,  336,  336,
      132,  550,  370,  370,  370,  370,  301,  371,  371,  371,
      371,  371,  371,  550,  550,  371,  371,  371,  371,  132,
      464,  372,  372,  372,  372,  373,  374,  374,  374,  374,
      374,  374,  550,  550,  374,  374,  374,  374,  377,  550,
      379,  380,  550,  550,  550,  375,  550,  550,  550,  550,

      550,  550,  550,  481,  387,  550,  383,  378,  386,  389,
      392,  384,  385,  550,  458,  390,  365,  365,  365,  365,
      391,  169,  408,  395,  395,  395,  395,  334,  396,  396,
      396,  396,  396,  396,  550,  550,  396,  396,  396,  396,
      169,  550,  397,  397,  397,  397,  398,  399,  399,  399,
      399,  399,  399,  550,  451,  399,  399,  399,  399,  132,
      404,  258,  258,  258,  258,  301,  132,  445,  400,  400,
      400,  400,  373,  401,  401,  401,  401,  401,  401,  402,
      402,  402,  402,  550,  550,  401,  401,  401,  401,  550,
      406,  550,  550,  550,  550,  550,  405,  550,  550,  413,

      411,  407,  412,  169,  434,  292,  292,  292,  292,  334,
      428,  421,  414,  169,  403,  418,  418,  418,  418,  398,
      419,  419,  419,  419,  419,  419,  420,  420,  420,  420,
      550,  550,  419,  419,  419,  419,  132,  431,  422,  422,
      422,  422,  373,  423,  423,  423,  423,  423,  423,  550,
      369,  423,  423,  423,  423,  132,  550,  424,  424,  424,
      424,  425,  426,  426,  426,  426,  426,  426,  550,  550,
      426,  426,  426,  426,  427,  550,  432,  550,  550,  340,
      429,  430,  550,  296,  438,  438,  438,  438,  444,  444,
      444,  444,  433,  169,  550,  437,  437,  437,  437,  398,

      438,  438,  438,  438,  438,  438,  169,  500,  439,  439,
      439,  439,  440,  441,  441,  441,  441,  441,  441,  550,
      262,  441,  441,  441,  441,  132,  550,  258,  258,  258,
      258,  373,  132,  215,  442,  442,  442,  442,  425,  443,
      443,  443,  443,  443,  443,  550,  450,  443,  443,  443,
      443,  550,  446,  550,  550,  448,  550,  177,  447,  550,
      169,  449,  292,  292,  292,  292,  398,  169,  485,  455,
      455,  455,  455,  440,  456,  456,  456,  456,  456,  456,
      457,  457,  457,  457,  550,  550,  456,  456,  456,  456,
      132,  131,  459,  459,  459,  459,  425,  460,  460,  460,

      460,  460,  460,  550,  466,  460,  460,  460,  460,  132,
      550,  461,  461,  461,  461,  462,  463,  463,  463,  463,
      463,  463,  550,  550,  463,  463,  463,  463,  550,  465,
      467,  550,   96,   94,  547,  550,  469,  474,  474,  474,
      474,  547,  468,  169,  547,  473,  473,  473,  473,  440,
      474,  474,  474,  474,  474,  474,  169,  550,  475,  475,
      475,  475,  476,  477,  477,  477,  477,  477,  477,  550,
      542,  477,  477,  477,  477,  132,  483,  258,  258,  258,
      258,  425,  132,  547,  478,  478,  478,  478,  462,  479,
      479,  479,  479,  479,  479,  480,  480,  480,  480,  550,

      550,  479,  479,  479,  479,  482,  550,  542,  542,  537,
      169,  484,  292,  292,  292,  292,  440,  169,  542,  490,
      490,  490,  490,  476,  491,  491,  491,  491,  491,  491,
      492,  492,  492,  492,  550,  537,  491,  491,  491,  491,
      132,  537,  494,  494,  494,  494,  462,  495,  495,  495,
      495,  495,  495,  550,  532,  495,  495,  495,  495,  132,
      537,  496,  496,  496,  496,  497,  498,  498,  498,  498,
      498,  498,  550,  550,  498,  498,  498,  498,  499,  169,
      532,  505,  505,  505,  505,  476,  506,  506,  506,  506,
      506,  506,  550,  532,  506,  506,  506,  506,  169,  550,

      507,  507,  507,  507,  512,  508,  508,  508,  508,  508,
      508,  550,  523,  508,  508,  508,  508,  132,  532,  258,
      258,  258,  258,  462,  132,  523,  509,  509,  509,  509,
      497,  510,  510,  510,  510,  510,  510,  550,  523,  510,
      510,  510,  510,  169,  504,  292,  292,  292,  292,  476,
      169,  497,  516,  516,  516,  516,  523,  517,  517,  517,
      517,  517,  517,  550,  504,  517,  517,  517,  517,  132,
      488,  518,  518,  518,  518,  497,  519,  519,  519,  519,
      519,  519,  550,  550,  519,  519,  519,  519,  169,  476,
      524,  524,  524,  524,  504,  525,  525,  525,  525,  525,

      525,  550,  488,  525,  525,  525,  525,  132,  550,  258,
      258,  258,  258,  497,  169,  462,  292,  292,  292,  292,
       37,   37,   37,   37,   37,   39,   39,   39,   39,   39,
       43,   43,   43,   43,   43,   45,  504,   45,   45,   45,
       46,   46,   46,   46,   46,   56,   56,   56,   89,  502,
       89,   89,   89,   92,   92,  128,  128,  167,  167,  168,
      168,  208,  208,  209,  209,  249,  249,  250,  250,  288,
      288,  289,  289,  328,  328,  329,  329,  362,  362,  363,
      363,  393,  393,  394,  394,  415,  415,  416,  416,  435,
      435,  436,  436,  452,  452,  453,  453,  470,  470,  471,

      471,  486,  486,  487,  487,  501,  501,  503,  503,  513,
      513,  514,  514,  521,  521,  522,  522,  527,  527,  530,
      530,  531,  531,  533,  533,  535,  535,  536,  536,  538,
      538,  540,  540,  541,  541,  543,  543,  545,  545,  546,
      546,  548,  548,  549,  549,  488,  454,  550,  550,  440,
      488,  454,  550,  550,  425,  472,  454,  417,  398,  454,
      417,  550,  550,  373,   93,  417,  364,  550,  334,  417,
      364,  550,  550,  550,  550,  550,  550,  410,  409,  550,
      301,   93,  364,  290,  550,  550,  382,  381,  550,  255,
      364,  290,  550,  349,  348,  550,  550,  550,  220,   93,

      290,  210,  550,  314,  313,  171,  290,  210,  550,  274,
      273,  550,  134,   93,  210,  129,  550,  550,  550,  550,
      210,  129,  550,  550,  550,  191,  550,  179,   93,  129,
      550,  137,  129,  550,  550,  550,  103,  550,   98,  550,
       93,   46,   47,   44,   88,  550,   60,   55,  550,   47,
       44,  550,   38,   38,    7,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550

    } ;

static yyconst flex_int16_t yy_chk[1899] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   10,   10,   11,   11,   15,   22,   22,
       23,   15,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   25,   16,   33,   23,   30,   30,   25,
       34,   34,   30,   36,   40,   40,   28,   25,   36,   33,
       16,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   28,   19,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   26,   20,   27,   29,   31,
       35,  628,   32,   32,   26,   32,   27,   31,   31,   62,
       26,  624,   27,   29,   32,   35,   29,   27,   61,   31,
       41,   41,   62,   32,   42,   42,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   61,   50,   52,
       52,   52,   52,   55,   55,   55,   55,   57,   57,   57,
       57,   66,   57,   57,   57,   57,   57,   57,   60,   60,
       64,   65,   65,   67,   64,   68,   69,   60,   71,   67,
       72,   66,   68,   73,   74,   75,   78,   76,   86,   74,
       77,   77,   79,   79,   71,   69,   82,   76,   73,   76,

       72,   75,   78,   83,   84,   85,   86,   87,  104,   82,
      100,  102,  102,   84,  124,  100,  101,   85,   91,   91,
       91,   91,  104,  101,   83,  124,   87,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,  108,   90,
       93,   93,   93,   93,   95,  108,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   96,   99,   96,
       96,   96,   96,   97,   97,   97,   97,  103,   97,   97,
       97,   97,   97,   97,  106,  105,  107,   99,  105,  106,
      110,  107,  109,  109,  111,  112,  103,  110,  113,  114,
      109,  115,  117,  111,  113,  118,  115,  112,  114,  116,

      116,  119,  118,  120,  121,  151,  123,  142,  120,  121,
      117,  122,  142,  146,  122,  123,  127,  127,  127,  127,
      151,  119,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  146,  126,  130,  223,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  131,  223,
      131,  131,  131,  131,  132,  132,  132,  132,  133,  620,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  134,  134,  134,  134,  135,  138,  135,  135,  135,
      135,  136,  136,  136,  136,  139,  136,  136,  136,  136,
      136,  136,  140,  141,  145,  138,  144,  156,  187,  139,

      149,  144,  141,  147,  149,  150,  154,  187,  153,  157,
      154,  140,  145,  153,  157,  147,  147,  147,  155,  149,
      159,  155,  156,  158,  150,  159,  160,  158,  162,  162,
      163,  164,  180,  160,  163,  182,  188,  616,  164,  180,
      182,  188,  158,  165,  165,  165,  165,  165,  169,  169,
      169,  169,  170,  612,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  171,  171,  171,  171,  172,
      186,  172,  172,  172,  172,  173,  186,  173,  173,  173,
      173,  174,  227,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  175,  227,  175,  175,  175,  175,

      176,  179,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  177,  181,  177,  177,  177,  177,  183,
      185,  179,  189,  190,  190,  191,  192,  185,  195,  196,
      193,  194,  197,  183,  181,  193,  194,  189,  198,  197,
      191,  192,  195,  202,  201,  203,  204,  196,  202,  205,
      207,  225,  231,  206,  207,  222,  231,  203,  198,  201,
      206,  211,  222,  211,  211,  211,  211,  224,  205,  225,
      228,  228,  204,  212,  224,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  213,  611,  213,  213,
      213,  213,  214,  229,  214,  214,  214,  214,  214,  214,

      214,  214,  214,  214,  214,  215,  229,  215,  215,  215,
      215,  216,  216,  216,  216,  217,  609,  217,  217,  217,
      217,  217,  219,  230,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  220,  220,  220,  220,  221,
      232,  221,  221,  221,  221,  230,  235,  236,  237,  239,
      241,  242,  240,  232,  239,  240,  243,  241,  244,  235,
      245,  246,  248,  244,  242,  236,  237,  247,  264,  264,
      268,  248,  263,  268,  243,  245,  267,  267,  606,  247,
      284,  246,  251,  251,  251,  251,  252,  263,  252,  252,
      252,  252,  252,  254,  284,  254,  254,  254,  254,  254,

      254,  254,  254,  254,  254,  254,  255,  255,  255,  255,
      256,  310,  256,  256,  256,  256,  257,  605,  257,  257,
      257,  257,  258,  310,  258,  258,  258,  258,  259,  265,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  260,  265,  260,  260,  260,  260,  261,  266,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      262,  269,  262,  262,  262,  262,  269,  270,  271,  272,
      266,  276,  270,  271,  272,  275,  275,  277,  278,  279,
      280,  282,  278,  280,  281,  281,  283,  286,  287,  320,
      303,  602,  278,  276,  279,  306,  286,  305,  305,  277,

      306,  318,  320,  282,  303,  283,  287,  291,  318,  291,
      291,  291,  291,  292,  324,  292,  292,  292,  292,  293,
      599,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  294,  324,  294,  294,  294,  294,  295,  355,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  296,  355,  296,  296,  296,  296,  297,  297,  297,
      297,  298,  304,  298,  298,  298,  298,  298,  300,  307,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  301,  301,  301,  301,  302,  304,  302,  302,  302,
      302,  308,  315,  307,  316,  317,  308,  321,  322,  316,

      317,  315,  319,  323,  326,  319,  325,  322,  323,  321,
      326,  325,  330,  330,  330,  330,  331,  342,  331,  331,
      331,  331,  331,  333,  342,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  334,  334,  334,  334,
      335,  598,  335,  335,  335,  335,  336,  336,  336,  336,
      337,  446,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  338,  343,  338,  338,  338,  338,  339,
      446,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  340,  341,  340,  340,  340,  340,  343,  344,
      345,  346,  350,  351,  352,  341,  353,  345,  346,  354,

      356,  357,  358,  595,  354,  361,  350,  344,  353,  356,
      361,  351,  352,  380,  592,  357,  365,  365,  365,  365,
      358,  366,  380,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  367,  375,  367,  367,  367,  367,
      368,  434,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  369,  434,  369,  369,  369,  369,  370,
      375,  370,  370,  370,  370,  370,  372,  589,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  373,
      373,  373,  373,  374,  376,  374,  374,  374,  374,  379,
      377,  386,  392,  388,  389,  414,  376,  377,  406,  389,

      386,  379,  388,  395,  414,  395,  395,  395,  395,  395,
      406,  586,  392,  397,  583,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  398,  398,  398,  398,
      399,  411,  399,  399,  399,  399,  400,  411,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  401,
      580,  401,  401,  401,  401,  402,  412,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  403,  405,
      403,  403,  403,  403,  405,  407,  412,  408,  413,  577,
      407,  408,  419,  574,  419,  419,  419,  419,  425,  425,
      425,  425,  413,  418,  485,  418,  418,  418,  418,  418,

      418,  418,  418,  418,  418,  418,  420,  485,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  421,
      571,  421,  421,  421,  421,  422,  433,  422,  422,  422,
      422,  422,  424,  568,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  426,  433,  426,  426,  426,
      426,  427,  427,  428,  429,  429,  431,  565,  428,  467,
      437,  431,  437,  437,  437,  437,  437,  439,  467,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      440,  440,  440,  440,  441,  448,  441,  441,  441,  441,
      442,  562,  442,  442,  442,  442,  442,  442,  442,  442,

      442,  442,  442,  443,  448,  443,  443,  443,  443,  444,
      449,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  445,  450,  445,  445,  445,  445,  447,  447,
      449,  451,  560,  559,  549,  456,  451,  456,  456,  456,
      456,  548,  450,  455,  546,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  457,  465,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  458,
      545,  458,  458,  458,  458,  459,  465,  459,  459,  459,
      459,  459,  461,  544,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  462,  462,  462,  462,  463,

      464,  463,  463,  463,  463,  464,  466,  543,  541,  540,
      473,  466,  473,  473,  473,  473,  473,  475,  539,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      476,  476,  476,  476,  477,  538,  477,  477,  477,  477,
      478,  536,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  479,  535,  479,  479,  479,  479,  480,
      534,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  481,  483,  481,  481,  481,  481,  483,  490,
      533,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  491,  531,  491,  491,  491,  491,  492,  500,

      492,  492,  492,  492,  500,  492,  492,  492,  492,  492,
      492,  493,  530,  493,  493,  493,  493,  494,  528,  494,
      494,  494,  494,  494,  496,  527,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  498,  522,  498,
      498,  498,  498,  505,  521,  505,  505,  505,  505,  505,
      507,  519,  507,  507,  507,  507,  515,  507,  507,  507,
      507,  507,  507,  508,  514,  508,  508,  508,  508,  509,
      513,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  510,  512,  510,  510,  510,  510,  516,  506,
      516,  516,  516,  516,  503,  516,  516,  516,  516,  516,

      516,  517,  501,  517,  517,  517,  517,  518,  499,  518,
      518,  518,  518,  518,  524,  495,  524,  524,  524,  524,
      551,  551,  551,  551,  551,  552,  552,  552,  552,  552,
      553,  553,  553,  553,  553,  554,  489,  554,  554,  554,
      555,  555,  555,  555,  555,  556,  556,  556,  557,  488,
      557,  557,  557,  558,  558,  561,  561,  563,  563,  564,
      564,  566,  566,  567,  567,  569,  569,  570,  570,  572,
      572,  573,  573,  575,  575,  576,  576,  578,  578,  579,
      579,  581,  581,  582,  582,  584,  584,  585,  585,  587,
      587,  588,  588,  590,  590,  591,  591,  593,  593,  594,

      594,  596,  596,  597,  597,  600,  600,  601,  601,  603,
      603,  604,  604,  607,  607,  608,  608,  610,  610,  613,
      613,  614,  614,  615,  615,  617,  617,  618,  618,  619,
      619,  621,  621,  622,  622,  623,  623,  625,  625,  626,
      626,  627,  627,  629,  629,  487,  486,  484,  482,  474,
      471,  470,  469,  468,  460,  454,  453,  452,  438,  436,
      435,  432,  430,  423,  417,  416,  415,  404,  396,  394,
      393,  391,  390,  387,  385,  384,  383,  382,  381,  378,
      371,  364,  363,  362,  360,  359,  349,  348,  347,  332,
      329,  328,  327,  314,  313,  312,  311,  309,  299,  290,

      289,  288,  285,  274,  273,  253,  250,  249,  238,  234,
      233,  226,  218,  210,  209,  208,  200,  199,  184,  178,
      168,  167,  166,  161,  152,  148,  143,  137,  129,  128,
      125,   98,   92,   81,   80,   70,   63,   59,   58,   56,
       51,   47,   46,   43,   38,   24,   21,   18,   17,   14,
       12,    7,    4,    3,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550

    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[62] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
    0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
};
#line 1054 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 1159 "SrvLexer.cpp"

	if ( (yy_init) )
		{
		(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 551 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1855 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 54 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 55 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 60 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 61 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 64 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 69 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno; 
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 106 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 107 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 48:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 141 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 150 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 159 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 168 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 180 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 187 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 208 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd then no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 240 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd; 
      YYABORT; 
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 250 "SrvLexer.l"
{ 
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) { 
        Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd; 
        YYABORT; 
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 259 "SrvLexer.l"
{ return yytext[0]; } 
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 262 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 1692 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 551 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 551 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 550);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
    	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
    	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef yytext_ptr
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
#endif
#line 262 "SrvLexer.l"




