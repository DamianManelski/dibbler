#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 118
#define YY_END_OF_BUFFER 119
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[985] =
    {   0,
        1,    1,    0,    0,    0,    0,  119,  117,    2,    1,
        1,  117,   99,  117,  117,  116,  116,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      103,  103,  118,    1,    1,    1,    0,  111,   99,    0,
      111,  101,  100,  116,    0,    0,  115,    0,  108,   82,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
       96,  112,  112,   84,  112,  112,  112,  112,  112,  112,

      112,  112,  112,  112,   17,   18,  112,  112,  112,  112,
      112,  112,  112,  112,  102,  100,  116,    0,    0,    0,
      107,  113,  106,  106,  112,  112,  112,  112,  112,   83,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,   95,  116,
        0,    0,    0,    0,  105,  105,    0,  106,    0,  106,
      112,  112,  112,   62,  112,  112,  112,  112,  112,  112,

      112,  112,   90,  112,  112,  112,   30,  112,  112,   43,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
        0,  112,  112,  112,  112,  112,  112,   23,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,   97,  112,  112,  112,  112,  116,    0,  114,    0,
        0,    0,  105,    0,  105,    0,  106,  106,  106,  106,
      112,  112,  112,  112,   89,  112,  112,  112,    4,  112,
      112,  112,  112,  112,  112,  112,   98,  112,  112,    3,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,    0,  112,  112,  112,  112,  112,  112,  112,  112,

      112,  112,    7,  112,   42,   24,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,    0,    0,    0,
        0,    0,  105,  105,  105,  105,    0,  106,  106,  106,
        0,  106,  112,  112,  112,  112,  112,  112,  112,  112,
      112,   29,  112,  112,  112,  112,  112,   36,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,    0,    0,  112,  112,  112,   34,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,   93,
      112,  112,  112,  112,  112,  112,  112,    0,    0,    0,
        0,  105,  105,  105,    0,  105,    0,    0,  106,  106,

      106,  106,  112,  112,   32,  112,  112,  112,  112,  112,
      112,    0,  112,  112,   92,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,    0,    0,  112,  112,  112,  112,
      112,   57,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,   21,  112,  112,  112,  114,    0,    0,    0,
        0,    0,  105,  105,  105,  105,    0,  106,  106,  106,
        0,  106,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,    0,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,   44,  112,

       53,  112,  112,   12,   10,   81,  112,   41,    0,    0,
      112,  112,  112,   55,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,    5,  112,  112,  112,   14,    0,
        0,    0,    0,  105,  105,  105,    0,  105,  110,  106,
      106,  106,  106,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,    0,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,   11,   61,    0,    0,  112,  112,  112,   56,  112,
      112,  112,  112,   31,  112,  112,    6,   91,   38,  112,
      112,    0,    0,    0,    0,  109,  105,  105,  105,  105,

      106,  106,  106,    0,  106,  112,  112,  112,  112,  112,
      112,  112,  112,  112,   54,  112,    0,  112,  112,  112,
      112,  112,  112,  112,  112,   35,  112,  112,   33,  112,
      112,  112,   13,    0,    0,   50,   49,   37,  112,   22,
      112,  112,   40,   39,  112,  112,  114,    0,    0,  105,
      105,  105,    0,  105,  106,  106,  106,  106,  112,   15,
      112,   60,  112,  112,  112,   69,  112,  112,    0,  112,
      112,  112,  112,  112,  112,   72,  112,  112,  112,  112,
      112,  112,   52,   51,  112,  112,  112,  112,   58,    0,
        0,    0,    0,  105,  105,  105,  105,  106,  106,  106,

        0,  106,  112,  112,   94,   71,  112,  112,  112,    0,
       80,  112,  112,  112,   48,  112,   73,   59,  112,  112,
      112,    8,  112,   25,  112,  112,    0,    0,    0,  105,
      105,  105,    0,  105,  106,  106,  106,  106,  112,  112,
       70,  112,  112,    0,  112,  112,   47,  112,  112,  112,
      112,   63,  112,  112,  112,  112,  114,    0,    0,    0,
      105,  105,  105,  105,  106,  106,  106,    0,  106,  112,
      112,  112,  112,    0,  112,  112,  112,  112,  112,  112,
      112,  112,   16,   20,    0,    0,  104,  107,  105,  105,
      105,    0,  105,  106,  106,  106,  106,  112,  112,  112,

       27,    0,    0,  112,  112,  112,   74,  112,  112,   26,
      112,  112,    0,    0,  104,    0,  105,  105,  105,  105,
      105,  106,  106,  106,    0,  106,  112,  112,  112,    0,
        0,   28,  112,  112,   75,  112,  112,  112,  112,  112,
      112,  114,  104,  107,  105,    0,  105,  105,  105,  105,
      106,  106,  106,   64,  112,  112,  112,  112,    0,    0,
      112,  112,  112,  112,  112,  112,   46,  112,   19,    0,
      104,  105,  105,  105,  105,  106,  106,  106,  112,  112,
      112,  112,  112,    0,    0,  112,  112,   76,   77,   78,
       79,    9,    0,  105,  105,    0,  105,  105,  106,   45,

      112,  112,  112,  112,    0,    0,  112,  112,  114,  105,
      105,  106,  112,  112,  112,  112,    0,    0,    0,  112,
      112,  112,    0,  105,  105,    0,  112,  112,  112,  112,
        0,    0,    0,   85,  112,  112,  112,   85,  104,  105,
      105,   65,  112,  112,  112,    0,   87,    0,  112,   87,
      112,  104,  105,  105,    0,  112,  112,   68,    0,   86,
      112,   86,    0,  105,  105,  112,   66,   88,   88,    0,
      105,  105,    0,   67,  114,  105,  105,    0,  105,  105,
        0,  105,  105,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
       23,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        1,    1,    1,    1,    1,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    1,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1075] =
    {   0,
        0,    0, 1114, 1113,    0,    0, 1120, 5770, 5770,   73,
       75, 1114,    0, 1110,   72,   72,   34, 1094, 1092,  136,
      186,  233,  280,   71,  208,  338,   38,   73,  223,   89,
      267,  175,  275,  356,  221,  372,   67,  353,  180,  278,
     5770, 1069, 5770,  111,  137,  222, 1075, 5770,    0, 1071,
     1070, 5770,    0,  430, 1054,  449, 5770,    0,  475, 5770,
       61,  518,   86,   89,  185,  193,  231,  371,  368,  265,
      288,  532,  390,  283,  286,  442,  480,  339,  509,  513,
      344,  533,  530,  537,  565,  536,  555,  549,  566,  553,
      370,  557,  561,  427,  602,  588,  589,  598,  605,  435,

      604,  606,  629,  636,  585,  607,  634,  621,  612,  637,
      649,  648,  645,  646, 5770,    0,  707, 1050,  500, 1041,
      752,    0,  797,  726,  840,  702,  707,  829,  833,  705,
      832,  838,  732,  836,  856,  842,  837,  839,  873,  776,
      890,  888,  891,  874,  884,  878,  757,  905,  892,  909,
      911,  915,  912,  922,  924,  960,  961,  940,  951,  939,
      944,  957,  952,  963,  953,  975,  967,  992,  981,  988,
      984, 1003, 1012, 1013, 1009, 1016, 1015, 1005,  994, 1074,
      777,  954,  929,  911, 1121,  817, 1093, 1166, 1209, 1140,
     1252, 1004, 1187, 1027, 1212, 1060, 1074, 1246, 1241, 1126,

     1251, 1242, 1108, 1245, 1249, 1264, 1162, 1253, 1270, 1282,
     1283, 1300, 1170, 1292, 1289, 1288, 1337, 1333, 1334, 1325,
      920, 1340, 1324, 1341, 1336, 1332, 1371, 1305, 1368, 1374,
     1387, 1372, 1380, 1386, 1389, 1392, 1393, 1388, 1385, 1417,
     1438, 1317, 1429, 1437, 1427, 1456, 1229,  907,  901,  866,
      853, 1496, 1516, 1559, 1535, 1578, 1604, 1623, 1649, 1668,
      852, 1424, 1431, 1648, 1425, 1661, 1546, 1495, 1591, 1433,
     1448, 1667, 1650, 1663, 1671, 1680, 1428, 1682, 1670, 1703,
     1695, 1698, 1699, 1713, 1711, 1716, 1720, 1722, 1715, 1602,
     1717, 1735, 1738, 1735, 1750, 1754, 1756, 1770, 1755, 1768,

     1757, 1752, 1477, 1769, 1538, 1766, 1790, 1787, 1802, 1786,
     1788, 1820, 1799, 1803, 1808, 1809, 1822,  823,  822,  821,
      820, 1880, 1891, 1910, 1936, 1955, 1867, 1981,  819, 1993,
     2036, 2012, 1923, 1935, 1998, 2030, 2027, 2039, 2048, 2028,
     1878, 2118, 2036, 2034, 2037, 2067, 2038, 1807, 2077, 2085,
     2098, 2099, 2087, 2101, 2109, 2110, 2121, 2104, 2123, 2137,
     2119, 2140, 2148, 2072, 2134, 2151, 2153, 2157, 2120, 2141,
     2170, 2161, 2175, 2189, 2192, 2198, 2181, 2191, 2200, 2186,
     2202, 2195, 2209, 2205, 2220, 2206, 2225,  818,  817,  807,
     2283, 2294,  778, 2306, 2349, 2325, 2368, 2394, 2405, 2424,

     2450, 2469, 2471, 2450, 2327, 2448, 2223, 2454, 2449, 2248,
     2483, 2284, 2485, 2468, 2310, 2470, 2392, 2505, 2481, 2515,
     2513, 2510, 2521, 2533, 2535, 2520, 2538, 2529, 2550, 2553,
     2556, 2557, 2554, 2567, 2336, 2350, 2572, 2569, 2573, 2586,
     2590, 2565, 2592, 2587, 2620, 2609, 2624, 2605, 2619, 2621,
     2627, 2629, 2608, 2638, 2639, 2636,  777,  766,  765,  763,
     2699, 2710, 2721, 2740, 2766, 2785, 2749, 2811,  762, 2823,
     2866, 2842, 2844, 2852, 2860, 2765, 2864, 2856, 2883, 2897,
     2861, 2863, 2862, 2657, 2901, 2900, 2911, 2899, 2912, 2913,
     2908, 2916, 2919, 2943, 2932, 2952, 2941, 2948, 2708, 2963,

     2753, 2949, 2959, 2940, 2951, 2953, 2957, 2954, 2980, 2963,
     2994, 2987, 3000, 2965, 3001, 3002, 3011, 3003, 3005, 3009,
     3016, 3015, 3034, 3012, 3007, 3039, 3051, 3045, 3017,  760,
      733,  732, 3109, 3120,  731, 3132, 3175, 3151, 3160, 3220,
     3194, 3265, 3239, 3173, 3253, 3261, 3162, 3264, 3263, 3047,
     3050, 3281, 3282, 3257, 3055, 3288, 3293, 3302, 3303, 3304,
     3305, 3306, 3320, 3312, 3316, 3258, 3317, 3344, 3345, 3347,
     3336, 3207, 3260, 3345, 3355, 3355, 3352, 3353, 3340, 3367,
     3372, 3369, 3380, 3351, 3364, 3388, 3386, 3389, 3391, 3408,
     3413,  730,  729,  728,  695, 3455, 3473, 3492, 3518, 3537,

     3563,  691, 3575, 3618, 3594, 3409, 3604, 3612, 3609, 3613,
     3596, 3517, 3614, 3619, 3396, 3651, 3427, 3620, 3471, 3649,
     3654, 3452, 3661, 3663, 3660, 3460, 3670, 3672, 3653, 3664,
     3665, 3683, 3656, 3673, 3670, 3684, 3688, 3694, 3707, 3699,
     3712, 3717, 3702, 3703, 3705, 3724,  687,  686,  683, 3782,
      681, 3794, 3837, 3813, 3882, 3856, 3927, 3901, 3922, 3708,
     3719, 3711, 3716, 3920, 3824, 3718, 3722, 3930, 3742, 3917,
     3925, 3924, 3927, 3929, 3815, 3747, 3926, 3958, 3974, 3976,
     3978, 3979, 5770, 5770, 3980, 3964, 3966, 3981, 3835,  680,
      679,  678,  676, 4041, 4060, 4086, 4105, 4131,  675, 4143,

     4186, 4162, 3971, 3968, 3869, 3972, 4164, 4181, 4085, 3976,
     3977, 4188, 4176, 4184, 4020, 4185, 4028, 4073, 4204, 4200,
     4205, 4212, 4224, 4216, 4218, 4227,  672,  640,  638, 4285,
      625, 4297, 4340, 4316, 4385, 4359, 4430, 4404, 4220, 4390,
     4221, 4225, 4419,  606, 4338, 4418, 4223, 4442, 4433, 4424,
     4428, 4239, 4429, 4431, 4434, 4464,  592,  544,  541,  537,
     4524, 4506, 4569, 4543, 4588,  533, 4614, 4657, 4633, 4635,
     4461, 4462, 4652, 4661, 4646, 4673, 4327, 4674, 4676, 4691,
     4656, 4689, 4276, 4319,  532,  529,  501,    0, 4749,  489,
     4761, 4804, 4737, 4849, 4780, 4894, 4823, 4883, 4817, 4503,

     4372, 4472, 4490, 4889, 4890, 4887, 4522, 4914, 4893, 4556,
     4782, 4918,  488,  487,  486,  485,  484, 4978, 4875, 5023,
     4953, 4997,  456, 5068,    0, 5042, 5054, 5059, 5090, 4587,
     4673, 4658, 4931, 5073, 4740, 5091, 4783, 4836, 5068, 5087,
     5088,  455,  454, 5770,  453,    0, 5151,  452, 5163, 5182,
     5208, 5227,    0, 4895, 5086, 5205, 5021, 5224, 4914, 4957,
     5209, 5226, 5010, 5002, 5195, 5093, 5105, 5223, 5141,  451,
      414,  413,  411, 5286, 5305, 5331,  410,    0, 5291, 5228,
     5222, 5290, 5247, 5152,    0, 5288, 5361, 5211, 5287, 5289,
     5320, 5327,  409,  407,  406,    0, 5361, 5770,    0, 5341,

     5358, 5377, 5378, 5361,    0, 5364, 5428, 5372,  403,  399,
      397, 5770, 5354, 5394, 5400, 5405, 5425, 5377, 5404, 5427,
     5432, 5422,  396,  395,  363,    0, 5414, 5424, 5449, 5416,
     5439, 5435, 5430, 5770, 5466, 5459, 5457, 5447,  356,  352,
      350, 5451, 5467, 5464, 5463, 5466, 5770, 5488, 5471, 5474,
     5499,  349,  348,  346,    0, 5502, 5481, 5484, 5518, 5770,
     5523, 5501,  339,  325,  307, 5511, 5504, 5770, 5508,    0,
      305,  276,    0, 5512,  267,  262,  260,  258,  254,  251,
        0,  229,  214, 5770, 5593, 5597, 5601, 5605, 5609, 5613,
     5615,  232, 5617, 5619, 5621, 5623, 5625, 5627, 5629, 5631,

     5633, 5635, 5639, 5641, 5643, 5645, 5647, 5649, 5651, 5653,
     5655, 5657, 5659, 5661, 5663, 5665, 5667, 5669, 5671, 5673,
     5675, 5677, 5679, 5681, 5683, 5685, 5687, 5689, 5691,  231,
     5693, 5695, 5697,  230, 5699, 5701, 5703,  228,  226, 5705,
     5707, 5709,  224, 5713, 5717, 5719, 5721,  219,  217, 5725,
     5729, 5731, 5733, 5735, 5737, 5739,  214, 5741, 5743, 5745,
     5747, 5749,  145, 5751, 5753, 5755,  131, 5757,  117, 5759,
     5761, 5763,   80, 5765
    } ;

static yyconst flex_int16_t yy_def[1075] =
    {   0,
      984,    1,  985,  985,  986,  986,  984,  984,  984,  984,
      984,  987,  988,  989,  984,  984,   16,  984,  984,  984,
       20,   20,   22,   22,   22,   22,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      984,  984,  984,  984,  984,  984,  987,  984,  988,  989,
      984,  984,  990,  984,  991,   54,  984,  992,  984,  984,
       26,   26,   62,   62,   62,   26,   26,   26,   26,   26,
       62,   26,   26,   62,   62,   26,   26,   26,   26,   26,
       62,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  984,  990,  984,  993,  117,  994,
      984,  992,  984,  123,   62,  125,  125,   26,   26,   26,
       26,   26,  125,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,  984,
      180,  995,  996,  997,  984,  185,  984,  984,  984,  188,
      125,  191,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      984,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,  181,  181,  996,  998,
      999,  984,  984,  984,  253,  984,  984,  257,  984,  259,
      191,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  984,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1000,  984, 1001,
     1002,  984,  984,  323,  984,  325,  984,  984,  984,  984,
      984,  330,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1003,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  984,  984,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1004, 1005, 1006,
      984,  984,  984,  984,  984,  394,  984,  984,  984,  399,

      984,  401,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  984,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  984,  984,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1001,  984, 1007, 1008,
      984,  984,  984,  463,  984,  465,  984,  984,  984,  984,
      984,  470,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  984,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,  984,  984,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1009,
     1010, 1011,  984,  984,  984,  984,  984,  536,  984,  984,
      540,  984,  542,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  984,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  984,  984,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1012,  984, 1013, 1014,  984,  984,  597,  984,  599,

      984,  984,  984,  984,  603,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,  984,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  984,  984,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1015, 1016, 1017,  984,
      984,  984,  984,  652,  984,  655,  984,  657,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  984,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  984,  984,   26,   26,   26,   26,   26, 1018,
      984, 1019, 1020,  984,  694,  984,  696,  984,  984,  984,

      984,  700,   26,   26,   26,   26,   26,   26,   26,  984,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1021, 1022, 1023,  984,
      984,  984,  984,  732,  984,  735,  984,  737,   26,   26,
       26,   26,   26,  984,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1024,  984, 1025, 1026,
      984,  761,  984,  763,  984,  984,  984,  984,  767,   26,
       26,   26,   26,  984,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1027, 1028, 1029, 1030,  984,  984,
      984,  984,  791,  984,  794,  984,  796,   26,   26,   26,

       26,  984,  984,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1031,  984, 1032,  984, 1033,  984,  818,  984,
      820,  984,  984,  984, 1034,  824,   26,   26,   26,  984,
      984,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1035, 1036,  984, 1037, 1038,  984,  984,  984,  849,
      984,  851, 1039,   26,   26,   26,   26,   26,  984,  984,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1040,
      984, 1041, 1042,  984,  874,  984,  984, 1043,   26,   26,
       26,   26,   26,  984, 1044,   26, 1045,   26,   26,   26,
       26,   26, 1046,  984, 1047, 1048,  984,  984, 1049,   26,

       26,   26,   26,   26, 1050,  984, 1051,   26, 1052, 1053,
     1054,  984,   26,   26,   26,   26,  984,  984,  984,   26,
       26,   26, 1055,  984, 1056, 1057,   26,   26,   26,   26,
      984,  984,  984,  984,   26,   26,   26,   26, 1058, 1059,
     1060,   26,   26,   26,   26,  984,  984,  984,   26,   26,
       26, 1061,  984, 1062, 1063,   26,   26,   26,  984,  984,
       26,   26, 1064, 1065, 1066,   26,   26,  984,   26, 1067,
      984, 1068, 1069,   26,  984, 1070, 1071, 1064,  984, 1072,
     1073, 1074,  984,    0,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,

      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984
    } ;

static yyconst flex_int16_t yy_nxt[5846] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   27,   27,   29,   30,   31,   32,   33,   27,
       34,   35,   36,   37,   38,   39,   27,   40,   27,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   27,   27,
       29,   30,   31,   32,   33,   27,   34,   35,   36,   37,
       38,   39,   27,   40,   27,   44,   45,   46,   45,   52,
      984,   61,  821,   53,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   55,   62,   56,   56,   56,   56,   56,

       56,   84,   57,  110,   61,   61,  984,   61,   61,   85,
       61,  126,   88,   44,   45,  127,   61,   80,   58,  977,
       62,   56,   56,   56,   56,   56,   56,   84,   57,  110,
       61,   61,   61,  975,   61,   85,   61,  126,   88,   46,
       45,  127,   61,   80,   58,   61,   61,  965,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   55,   61,   62,
       62,   63,   64,   62,   65,   61,   66,   61,   61,   61,
       67,   61,   68,   61,   61,   61,   61,   61,   61,   69,
       61,   61,   61,   61,   61,   62,   62,   63,   64,   62,
       65,   61,   66,   61,   61,   61,   67,   61,   68,   61,

       61,   61,   61,   61,   61,   69,   61,   61,   61,   61,
       61,   62,   62,   93,   62,   94,  941,  113,   61,  912,
       61,  911,   61,   61,   44,   45,  899,  128,  878,   70,
      873,   81,  853,  817,  122,  981,   61,   62,   62,   93,
       62,   94,   61,  113,   61,   61,   61,   82,   61,   61,
      981,  101,  102,  128,   86,   70,   71,   81,   62,   62,
       87,   62,   61,  103,  104,  129,   61,   72,   61,   61,
       73,   61,  981,   82,   61,  973,   61,  101,  102,  984,
       86,  981,   71,  973,   62,   62,   87,   62,  978,  103,
      104,  129,   61,   72,   89,   61,   73,  973,   90,  132,

       61,   95,   61,   62,   91,  114,   74,   75,   61,   92,
       61,   76,   96,  133,   61,   97,   77,   78,   61,  137,
       89,   61,  138,   79,   90,  132,  955,   95,  973,   62,
       91,  114,   74,   75,   61,   92,   61,   76,   96,  133,
       61,   97,   77,   78,   61,  137,  955,   61,  138,   79,
       61,   61,   61,   61,   61,   61,   61,   61,   61,  984,
      844,   61,   61,   61,   61,   61,   61,  955,   61,  926,
      963,  955,   61,  926,  141,   61,  111,  816,  144,   98,
      112,   83,   61,   99,  926,  105,  106,   61,   61,   61,
       61,   61,   61,  100,   61,  107,   61,  130,   61,   61,

      141,   61,  111,  108,  144,   98,  112,   83,   61,   99,
      131,   61,  109,   61,   61,   61,  896,  788,  926,  100,
      896,  107,   61,  130,  923,   61,  136,  896,  846,  108,
      760,  825,  896,   61,  846,  816,  131,   61,  109,   61,
       61,   61,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  118,  136,  119,  119,  119,  119,  119,  119,   61,
       57,  119,  119,  119,  119,  119,  119,  119,  119,  119,
       61,  139,  121,  792,  846,  816,  870,  768,  166,  119,
      119,  119,  119,  119,  119,   61,   57,  123,  123,  123,
      123,  123,  123,  123,  123,  123,   61,  139,  124,  124,

      124,  124,  124,  124,  166,  846,  844,  816,  760,  693,
      733,   61,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  140,  816,   61,  124,  124,  124,  124,  124,  124,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  118,
      142,  125,  125,  125,  125,  125,  125,  140,   66,   61,
      760,  143,   61,  121,  701,  134,   61,  146,  788,  145,
      147,   61,  760,  135,  151,  693,  142,  125,  125,  125,
      125,  125,  125,   61,   66,   61,   61,  143,   61,   61,
       61,  134,   61,  146,  152,  145,  147,   61,  148,  135,
      151,  153,   61,  149,  156,  157,   61,  154,   61,   61,

       61,   61,   61,  158,   61,   61,   61,  150,   61,   61,
      152,  159,  155,  785,  148,  774,  161,  153,   61,  149,
      156,  157,   61,  154,   61,  160,   61,  167,   61,  158,
       61,   61,   61,  150,   61,   61,  162,  163,  155,  164,
      165,   61,  161,  172,  168,   61,  653,   61,   61,   61,
       61,  160,  169,  167,   61,  174,  173,   61,   61,  760,
      171,  693,  162,  163,   61,  164,  165,   61,  175,  170,
      168,   61,   61,   61,   61,   61,   61,   61,  169,   61,
       61,  174,  173,  176,  177,  178,  171,  179,   61,   61,
       61,   61,   61,  595,  175,  170,  604,  121,   61,  693,

      595,  121,  537,   61,  693,   61,   61,  595,  690,  176,
      177,  178,  471,  179,   61,   61,  121,   61,   61,  180,
      180,  180,  180,  180,  180,  180,  180,  180,   55,  192,
      181,  181,  181,  181,  181,  181,  984,   57,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  193,   61,  595,
      460,  460,  395,  595,  460,  192,  181,  181,  181,  181,
      181,  181,  198,   57,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  193,   61,  186,  186,  186,  186,  186,
      186,  121,  212,  331,  121,  205,  460,  321,  198,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  530,  254,

       61,  186,  186,  186,  186,  186,  186,  187,  212,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  189,   61,
      190,  190,  190,  190,  190,  190,   61,  984,  460,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  321,  321,
      189,  121,  321,  184,  121,   61,  190,  190,  190,  190,
      190,  190,  191,  191,  191,  191,  191,  191,  191,  191,
      191,   55,  196,  191,  191,  191,  191,  191,  191,  194,
      195,  197,   61,  984,  321,   61,   61,  199,  202,   61,
       61,   61,   61,  200,  201,   61,  203,  184,  196,  191,
      191,  191,  191,  191,  191,  194,  195,  197,   61,   61,

      204,   61,   61,  199,  202,   61,   61,   61,   61,  200,
      201,   61,  203,  206,  207,  209,   61,   61,  208,  211,
      210,   61,  318,  214,  217,   61,  204,   61,  984,  292,
      213,   61,  121,   61,   61,   61,  215,  218,  216,  206,
      207,  209,   61,   61,  208,  211,  210,   61,   61,  214,
      184,  219,   61,   61,   61,   61,  213,   61,   61,   61,
       61,   61,  215,  218,  216,   61,  220,   61,  221,  222,
      223,  224,  229,  228,   61,  184,  225,  219,   61,  231,
       61,   61,   61,   61,   61,  226,  232,   61,  230,  227,
      233,   61,  220,   61,   61,   61,   61,  224,  229,  228,

       61,  236,  225,   61,   61,  231,   61,  235,   61,   61,
       61,  226,  232,   61,  230,  227,  233,  234,   61,  238,
       61,   61,   61,  237,   61,  239,   61,   61,  240,   61,
       61,   61,   61,  235,  243,   61,   61,   61,  246,  241,
      242,  245,  262,  234,   61,  238,   61,  244,   61,  237,
       61,  239,   61,   61,  240,   61,   61,   61,   61,   61,
      243,   61,  184,   61,  246,  241,  242,  245,  262,  266,
       61,  121,   61,  244,   61,  121,   50,   51,   61,   48,
      115,   61,   61,  267,   61,   61,  247,  247,  247,  247,
      247,  247,  247,  247,  247,   55,   61,  248,  248,  248,

      248,  248,  248,   61,   57,  256,  256,  256,  256,  256,
      256,  256,  256,  256,   60,   59,   51,   61,   48,  984,
       42,   42,  984,  248,  248,  248,  248,  248,  248,   61,
       57,  252,  984,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  254,   61,  255,  255,  255,  255,  255,  255,
      984,   61,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  984,  270,  984,  984,  984,  984,  984,  984,   61,
      255,  255,  255,  255,  255,  255,  187,   61,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  189,  270,  258,
      258,  258,  258,  258,  258,   61,  263,  984,  984,  984,

      984,  984,  984,  984,  984,   61,  984,  984,  984,  984,
      984,  984,  281,   61,  264,  258,  258,  258,  258,  258,
      258,  259,  259,  259,  259,  259,  259,  259,  259,  259,
       61,   61,  260,  260,  260,  260,  260,  260,  281,   61,
      264,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      984,  272,  984,  984,  984,   61,   61,  265,  260,  260,
      260,  260,  260,  260,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  268,  271,  261,  261,  261,  261,  261,
      261,   61,  269,  265,   61,   61,  273,  984,   61,   61,
      274,  278,   61,  276,   61,  275,   61,  277,  984,  268,

      271,  261,  261,  261,  261,  261,  261,   61,  269,  984,
       61,   61,  273,   61,   61,   61,  274,  984,   61,  276,
       61,  275,   61,  277,  279,   61,   61,  280,  282,  283,
      284,   61,   61,   61,  291,   61,  984,  984,  984,   61,
      984,  984,  984,   61,  984,  984,  984,  984,   61,  984,
      279,   61,   61,  280,  282,  283,  284,   61,   61,  298,
       61,   61,  285,  289,  290,  295,  293,   61,   61,   61,
      297,  286,  287,  288,   61,   61,   61,   61,  296,   61,
       61,  294,  984,   61,   61,  298,   61,  984,  285,  289,
      290,  295,  293,   61,   61,  300,  297,  286,  287,  288,

      301,   61,   61,   61,  296,   61,   61,  294,  299,   61,
       61,   61,  302,  305,   61,   61,  306,   61,  307,  303,
      309,  300,  304,   61,  310,  984,  301,  311,   61,   61,
       61,   61,   61,  308,  299,   61,   61,   61,  302,  305,
       61,   61,  306,   61,  307,  303,  309,  313,  304,   61,
      310,  312,  314,  311,   61,   61,   61,   61,   61,  308,
       61,   61,   61,  315,  316,  317,  333,   61,   61,  334,
       61,   61,   61,  984,   61,  342,   61,  312,  314,  343,
       61,   61,  984,  984,  984,  984,   61,  984,  984,  315,
      316,   61,  333,   61,   61,  334,   61,   61,   61,   61,

       61,  342,   61,  984,  340,  343,   61,   61,  322,  322,
      322,  322,  322,  322,  322,  322,  322,   61,  984,  984,
       61,  984,  984,  984,  984,   61,  252,  984,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  254,   61,  324,
      324,  324,  324,  324,  324,  984,   61,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  984,  984,  984,  984,
      984,  984,  984,  984,   61,  324,  324,  324,  324,  324,
      324,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      339,   61,  326,  326,  326,  326,  326,  326,  327,   61,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  984,

      341,  984,  984,  984,  984,  984,  339,   61,  326,  326,
      326,  326,  326,  326,  187,   61,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  189,  362,  329,  329,  329,
      329,  329,  329,  984,   61,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  984,   61,  984,  984,  984,  984,
      984,  984,  362,  329,  329,  329,  329,  329,  329,  187,
       61,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      331,   61,  332,  332,  332,  332,  332,  332,  984,  351,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  335,
      347,   61,  346,   61,  336,  337,  338,  984,  332,  332,

      332,  332,  332,  332,   61,  344,   61,  348,  350,  345,
       61,  349,  352,   61,   61,  335,  347,   61,  346,   61,
      336,  337,  338,   61,  361,   61,  353,  355,  984,  354,
       61,  344,   61,  348,  350,  345,   61,  349,   61,   61,
       61,   61,   61,  358,  356,  360,   61,  363,  357,   61,
      984,   61,  353,  355,   61,  354,   61,  359,   61,   61,
       61,  364,  367,   61,   61,   61,  374,   61,   61,  358,
      356,  360,   61,  363,  357,  366,  365,  368,   61,  370,
       61,   61,   61,  359,   61,   61,   61,  364,  367,   61,
      369,   61,  372,   61,  375,   61,  376,   61,   61,   61,

       61,  366,  365,  368,   61,  370,  371,   61,  373,   61,
      984,   61,   61,   61,  378,  380,  369,  385,  372,   61,
      375,   61,  376,   61,   61,   61,   61,  377,  381,   61,
       61,   61,  371,   61,  373,   61,  379,   61,   61,   61,
      378,  380,   61,  382,  384,   61,   61,  383,  387,  386,
       61,   61,   61,  377,  381,   61,   61,   61,  984,   61,
      984,  984,  379,   61,  984,   61,  984,  984,   61,  382,
      384,   61,   61,  383,  387,  386,   61,   61,   61,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  984,   61,
      391,   61,  322,  322,  322,  322,  322,  322,  322,  322,

      322,  252,  984,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  254,  411,  393,  393,  393,  393,  393,  393,
      984,   61,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  984,  403,  984,  984,  984,  984,  984,  984,  411,
      393,  393,  393,  393,  393,  393,  252,   61,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  395,  404,  396,
      396,  396,  396,  396,  396,  984,   61,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  984,  984,   61,  984,
      984,  984,  984,  984,  404,  396,  396,  396,  396,  396,
      396,  187,   61,  398,  398,  398,  398,  398,  398,  398,

      398,  398,  189,  187,   61,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  331,  984,  400,  400,  400,  400,
      400,  400,  984,  984,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  984,  984,  984,  984,  984,  984,  405,
      984,   61,  400,  400,  400,  400,  400,  400,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  406,  407,  402,
      402,  402,  402,  402,  402,  405,  408,   61,  417,  410,
       61,   61,  415,   61,  416,  409,  418,   61,  419,   61,
       61,   61,   61,  406,  407,  402,  402,  402,  402,  402,
      402,   61,  408,  984,  417,  410,   61,   61,  415,   61,

      416,  409,  984,   61,  419,   61,   61,   61,   61,  435,
       61,  421,  420,  984,  984,  984,  984,   61,  412,  412,
       61,  412,  412,  412,  412,  412,  412,  413,   61,  412,
       61,  424,  426,  422,  423,  435,   61,  421,  420,  412,
      412,   61,   61,  425,   61,  427,   61,   61,  429,  430,
      432,  984,   61,   61,   61,  428,   61,  424,  426,  422,
      423,  436,   61,   61,   61,  984,   61,   61,   61,  425,
       61,  427,  431,   61,  429,  430,  432,  433,   61,   61,
       61,  428,  440,   61,   61,  434,  437,  436,   61,   61,
       61,   61,   61,  438,   61,  442,   61,  439,  431,  441,

       61,  445,  443,  433,   61,  984,   61,  446,  440,   61,
       61,  434,  437,   61,  444,  455,  447,   61,   61,  438,
       61,  442,   61,  439,   61,  441,   61,  449,  443,   61,
       61,  448,   61,  450,   61,   61,  451,  984,   61,   61,
      444,   61,  447,   61,   61,   61,  452,  453,   61,   61,
       61,  479,   61,  449,  454,   61,  456,  448,   61,  450,
       61,   61,  451,   61,   61,  984,   61,   61,   61,   61,
      984,   61,  452,  453,   61,   61,  984,  479,   61,  482,
      454,  984,  456,  984,  984,  984,  984,  984,  984,   61,
      984,   61,   61,  984,   61,  461,  461,  461,  461,  461,

      461,  461,  461,  461,  252,  482,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  254,  252,   61,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  395,  484,  464,
      464,  464,  464,  464,  464,  984,  477,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  984,  984,  984,  984,
      984,  984,  984,   61,  484,  464,  464,  464,  464,  464,
      464,  465,  465,  465,  465,  465,  465,  465,  465,  465,
       61,  509,  466,  466,  466,  466,  466,  466,  467,   61,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  984,
      510,  984,  984,  984,  984,  984,   61,  509,  466,  466,

      466,  466,  466,  466,  187,  984,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  187,  510,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  331,  489,  469,  469,
      469,  469,  469,  469,  984,   61,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  984,  984,  984,  984,  984,
      984,  984,  984,  489,  469,  469,  469,  469,  469,  469,
      187,   61,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  471,  481,  472,  472,  472,  472,  472,  472,  984,
      984,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      476,   61,   61,   61,  984,  478,  480,   61,  481,  472,

      472,  472,  472,  472,  472,  473,  483,  488,  474,  984,
      485,   61,  487,   61,  475,  984,  476,   61,   61,   61,
      486,  478,  480,   61,   61,  493,   61,  984,   61,  487,
      984,  473,  483,  488,  474,  490,  485,   61,  487,   61,
      475,  491,  494,  492,  497,  500,  486,  496,   61,  495,
       61,  493,   61,   61,   61,  487,   61,  984,   61,  984,
      498,  490,  499,   61,   61,  501,  502,  491,  494,  492,
      497,  500,   61,  496,   61,  495,   61,  503,   61,   61,
      504,   61,   61,  505,   61,  506,  498,  984,  499,   61,
       61,  501,  502,   61,  507,  511,   61,   61,   61,   61,

       61,  984,   61,  503,   61,  508,  504,   61,   61,  505,
       61,  506,   61,  512,  984,   61,   61,  513,  516,   61,
      507,  511,   61,   61,  518,   61,   61,  514,  517,   61,
       61,  508,  515,   61,   61,   61,   61,  984,   61,  512,
      520,   61,   61,  513,  516,  519,  984,  521,   61,  522,
      518,   61,   61,  514,  517,   61,   61,  524,  515,   61,
      523,   61,   61,   61,   61,  526,  520,   61,  525,  527,
       61,  519,   61,  521,   61,  522,  529,   61,   61,   61,
      528,   61,   61,  524,  555,  984,  523,  984,   61,   61,
       61,  526,  984,   61,  525,  527,   61,  984,   61,  984,

      984,  984,  529,  984,  984,   61,  528,   61,   61,  533,
      555,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      252,  984,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  252,  984,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  395,  984,  535,  535,  535,  535,  535,  535,
      984,   61,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      535,  535,  535,  535,  535,  535,  252,   61,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  537,  547,  538,
      538,  538,  538,  538,  538,  984,   61,  538,  538,  538,

      538,  538,  538,  538,  538,  538,  984,  984,   61,  984,
      984,  984,  984,  984,  547,  538,  538,  538,  538,  538,
      538,  187,   61,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  331,  187,   61,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  471,  984,  541,  541,  541,  541,
      541,  541,  984,  984,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  984,  984,  549,  984,  984,  984,  984,
      984,  544,  541,  541,  541,  541,  541,  541,  542,  542,
      542,  542,  542,  542,  542,  542,  542,   61,  545,  543,
      543,  543,  543,  543,  543,   61,  546,  544,  548,   61,

      984,  984,  552,   61,   61,   61,   61,   61,  554,  984,
      550,  553,  984,   61,  545,  543,  543,  543,  543,  543,
      543,   61,  546,  557,  548,   61,   61,  551,  552,   61,
       61,   61,   61,   61,  554,  556,  550,  553,  558,  560,
       61,  559,   61,   61,   61,  562,  564,  984,  561,  557,
      563,   61,   61,  551,   61,   61,   61,  569,  984,   61,
      984,  556,   61,  984,  558,  560,   61,  559,   61,   61,
       61,  562,  564,  566,  561,   61,  563,   61,  567,  565,
       61,   61,   61,   61,   61,   61,   61,  568,   61,  571,
      570,   61,   61,  572,   61,   61,   61,   61,  573,  566,

       61,   61,   61,  574,  567,  565,   61,  575,   61,   61,
       61,  580,   61,  568,  577,  571,  570,   61,   61,  572,
       61,   61,   61,   61,  573,  576,   61,  578,   61,  574,
       61,  579,   61,  575,   61,  584,  581,   61,  582,  583,
      577,  588,  586,   61,   61,   61,   61,  585,   61,  984,
       61,  576,   61,  578,   61,   61,   61,  579,   61,   61,
       61,  584,  581,   61,  582,  583,  589,  588,  586,   61,
       61,   61,   61,  585,   61,  587,   61,   61,   61,  590,
       61,   61,   61,  591,   61,   61,   61,  613,   61,  612,
       61,  617,  589,   61,   61,  984,  984,  984,  984,  984,

      984,  587,  984,   61,  984,  590,  984,  984,   61,  591,
      984,  984,  984,  613,   61,  612,   61,  617,  984,   61,
       61,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      252,  984,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  395,  252,  984,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  537,  984,  598,  598,  598,  598,  598,
      598,  984,  984,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  598,  598,  598,  598,  598,  598,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  606,  609,  600,  600,

      600,  600,  600,  600,  984,   61,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  984,   61,  984,  984,  984,
      984,  984,  606,  609,  600,  600,  600,  600,  600,  600,
      187,   61,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  471,   61,  602,  602,  602,  602,  602,  602,  984,
       61,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      984,  984,  984,  984,  984,  984,  616,  628,  984,  602,
      602,  602,  602,  602,  602,  187,   61,  603,  603,  603,
      603,  603,  603,  603,  603,  603,  604,  607,  605,  605,
      605,  605,  605,  605,  608,  610,   61,  611,  984,  984,

       61,   61,  984,   61,   61,  984,   61,   61,  614,  615,
      984,  618,  984,  607,  605,  605,  605,  605,  605,  605,
      608,  610,   61,  611,   61,   61,   61,   61,  623,   61,
       61,   61,   61,   61,  614,  615,   61,  618,  620,  619,
      621,  622,  624,  625,  629,   61,   61,   61,   61,   61,
       61,   61,  626,  630,  623,   61,  632,   61,  627,   61,
       61,  984,   61,   61,  620,  619,  621,  622,  624,  625,
      629,   61,   61,   61,   61,   61,  634,  633,  626,   61,
      631,   61,  635,   61,  627,   61,   61,   61,   61,   61,
       61,  636,  637,  638,   61,   61,   61,  984,   61,  640,

      643,  639,  634,  633,  641,   61,  631,   61,  635,   61,
       61,  642,   61,   61,   61,   61,   61,  636,  637,  638,
       61,   61,   61,   61,   61,  640,  643,  639,  644,   61,
      641,   61,   61,   61,   61,  645,   61,  642,   61,   61,
      646,   61,  984,  984,  984,  984,  984,  984,  984,   61,
      659,   61,   61,  669,  644,   61,   61,   61,   61,  984,
       61,  645,  984,  984,  984,   61,  646,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  659,   61,   61,  669,
      671,  984,   61,  252,  984,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  537,  674,  651,  651,  651,  651,

      651,  651,  984,   61,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  984,   61,  984,  984,  984,  984,  984,
      984,  674,  651,  651,  651,  651,  651,  651,  252,   61,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  653,
       61,  654,  654,  654,  654,  654,  654,  984,  665,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  984,  984,
       61,  984,  984,  984,  984,  984,  984,  654,  654,  654,
      654,  654,  654,  187,  665,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  471,  187,   61,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  604,  984,  656,  656,

      656,  656,  656,  656,  984,  984,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  984,  984,  984,  984,  984,
      984,  984,  984,  664,  656,  656,  656,  656,  656,  656,
      657,  657,  657,  657,  657,  657,  657,  657,  657,   61,
      666,  658,  658,  658,  658,  658,  658,   61,  661,  664,
      662,  660,   61,  984,  663,   61,   61,   61,  667,  984,
      984,  670,   61,   61,  984,   61,  666,  658,  658,  658,
      658,  658,  658,   61,  661,  672,  662,  660,   61,  673,
      663,   61,   61,   61,  667,  668,  675,  670,   61,   61,
      676,  677,   61,  678,   61,  679,   61,   61,  680,   61,

      984,  672,  681,   61,   61,  673,   61,   61,   61,  683,
      684,  668,  675,   61,  682,   61,  676,  677,   61,  678,
       61,  679,   61,   61,  680,   61,   61,   61,  681,   61,
       61,   61,   61,   61,   61,  683,  684,   61,  685,   61,
      682,   61,   61,  686,  687,   61,   61,  688,   61,  689,
       61,   61,   61,   61,   61,   61,  704,   61,  705,   61,
       61,   61,   61,   61,  685,  708,  984,   61,   61,  686,
      687,   61,   61,  688,   61,  689,   61,   61,  984,  710,
       61,   61,  704,  984,  705,   61,   61,   61,   61,  984,
       61,  708,  252,   61,  462,  462,  462,  462,  462,  462,

      462,  462,  462,  537,  252,  710,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  653,   61,  695,  695,  695,
      695,  695,  695,  984,  716,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  695,  695,  695,  695,  695,  695,  696,
      696,  696,  696,  696,  696,  696,  696,  696,   61,  707,
      697,  697,  697,  697,  697,  697,  984,   61,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  984,   61,  984,
      984,  984,  984,  984,   61,  707,  697,  697,  697,  697,
      697,  697,  187,   61,  698,  698,  698,  698,  698,  698,

      698,  698,  698,  604,   61,  699,  699,  699,  699,  699,
      699,  984,   61,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  699,  699,  699,  699,  699,  699,  187,   61,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  701,  703,
      702,  702,  702,  702,  702,  702,  706,  709,  711,  712,
       61,  713,  717,   61,  714,   61,  984,   61,   61,   61,
       61,  715,   61,   61,  984,  703,  702,  702,  702,  702,
      702,  702,  706,  709,  711,  712,   61,  713,  717,   61,
      714,   61,  718,   61,   61,   61,   61,  715,   61,   61,

      719,   61,  725,  720,  721,  722,  724,   61,  723,   61,
      739,   61,  726,  740,   61,   61,  744,   61,  718,   61,
       61,   61,   61,   61,   61,  984,  719,   61,  725,  720,
      721,  722,  724,   61,  723,   61,  739,   61,  726,  740,
       61,   61,  744,   61,  984,   61,   61,   61,   61,   61,
       61,  252,  984,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  653,   61,  731,  731,  731,  731,  731,  731,
      984,   61,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  984,  984,  984,  984,  984,  984,  984,  984,   61,
      731,  731,  731,  731,  731,  731,  252,   61,  732,  732,

      732,  732,  732,  732,  732,  732,  732,  733,  743,  734,
      734,  734,  734,  734,  734,  984,   61,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  984,  984,   61,  984,
      984,  984,  984,  984,  743,  734,  734,  734,  734,  734,
      734,  187,   61,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  604,  187,   61,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  701,  984,  736,  736,  736,  736,
      736,  736,  984,  984,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  984,  984,  984,  984,  984,  984,  984,
      984,  741,  736,  736,  736,  736,  736,  736,  737,  737,

      737,  737,  737,  737,  737,  737,  737,   61,  742,  738,
      738,  738,  738,  738,  738,  745,  746,  741,  747,   61,
      748,  753,  984,  751,   61,  984,  749,   61,   61,  984,
      750,   61,  752,   61,  742,  738,  738,  738,  738,  738,
      738,  745,  746,   61,  747,   61,  748,   61,   61,  751,
       61,  754,  749,   61,   61,   61,  750,   61,  752,   61,
      755,   61,  756,  770,   61,  772,   61,   61,   61,   61,
       61,  984,  984,   61,   61,  984,  984,  754,  984,  984,
      984,   61,   61,  984,  984,   61,  755,   61,  756,  770,
       61,  772,   61,   61,   61,  252,   61,  462,  462,  462,

      462,  462,  462,  462,  462,  462,  653,  252,   61,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  733,   61,
      762,  762,  762,  762,  762,  762,  984,  984,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  984,  984,  984,
      984,  984,  984,  984,  807,   61,  762,  762,  762,  762,
      762,  762,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  775,   61,  764,  764,  764,  764,  764,  764,  984,
       61,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      984,   61,  984,  984,  984,  984,  984,  775,   61,  764,
      764,  764,  764,  764,  764,  187,   61,  765,  765,  765,

      765,  765,  765,  765,  765,  765,  701,   61,  766,  766,
      766,  766,  766,  766,  984,   61,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  984,  771,  776,  984,  984,
      984,  984,  984,   61,  766,  766,  766,  766,  766,  766,
      187,   61,  767,  767,  767,  767,  767,  767,  767,  767,
      767,  768,  771,  769,  769,  769,  769,  769,  769,   61,
      773,   61,   61,  778,  779,  984,  781,   61,  777,  780,
      799,   61,   61,  782,   61,  783,   61,   61,  984,  769,
      769,  769,  769,  769,  769,   61,  773,   61,   61,  778,
      779,  784,  781,   61,  777,  780,  984,   61,   61,  782,

       61,  783,   61,   61,   61,   61,  830,   61,  984,  800,
      984,   61,  829,  984,  984,  984,  984,  784,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  984,  831,  984,
       61,   61,  830,   61,  252,  800,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  733,   61,  790,  790,  790,
      790,  790,  790,  984,  831,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  984,   61,  984,  984,  984,  984,
      984,  984,   61,  790,  790,  790,  790,  790,  790,  252,
      984,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      792,   61,  793,  793,  793,  793,  793,  793,  187,   61,

      398,  398,  398,  398,  398,  398,  398,  398,  398,  701,
      859,  984,  984,  984,  984,  984,  984,  984,  793,  793,
      793,  793,  793,  793,  187,   61,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  768,  859,  795,  795,  795,
      795,  795,  795,  984,  984,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  984,  984,  984,  984,  984,  984,
      984,  984,  798,  795,  795,  795,  795,  795,  795,  796,
      796,  796,  796,  796,  796,  796,  796,  796,   61,  801,
      797,  797,  797,  797,  797,  797,  802,  804,  798,   61,
      984,  984,  984,  984,  984,   61,  811,  808,  805,   61,

      860,   61,  803,  809,   61,  801,  797,  797,  797,  797,
      797,  797,  802,  804,  806,   61,   61,   61,  810,   61,
      812,   61,  811,  808,  805,   61,  860,   61,  803,  809,
      984,  984,   61,  984,   61,  984,  984,  984,  984,  984,
      806,  984,   61,   61,  810,   61,  812,  984,  984,  819,
      819,  819,  819,  819,  819,  819,  819,  819,   61,  252,
       61,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      733,  252,  984,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  792,   61,  819,  819,  819,  819,  819,  819,
      984,  984,  823,  823,  823,  823,  823,  823,  823,  823,

      823,  984,  984,  865,  984,  984,  984,  984,  840,   61,
      819,  819,  819,  819,  819,  819,  820,  820,  820,  820,
      820,  820,  820,  820,  820,   61,   61,  821,  821,  821,
      821,  821,  821,  984,  840,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  984,  828,  984,  984,  984,  866,
      984,   61,   61,  821,  821,  821,  821,  821,  821,  187,
       61,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      768,  828,  823,  823,  823,  823,  823,  823,  984,   61,
      984,  984,  984,  984,  984,  984,   61,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  984,  984,  823,  823,

      823,  823,  823,  823,  187,   61,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  825,  832,  826,  826,  826,
      826,  826,  826,  827,  833,  834,   61,  835,  836,  837,
       61,  838,   61,   61,  839,  984,   61,  984,   61,  984,
      984,  984,  832,  826,  826,  826,  826,  826,  826,  827,
      833,  834,   61,  841,  861,  884,   61,   61,   61,   61,
      839,   61,   61,  984,   61,  850,  850,  850,  850,  850,
      850,  850,  850,  850,   61,  984,  984,  984,  984,  841,
      861,  884,  885,   61,  984,  984,  984,   61,  252,  984,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  792,

       61,  848,  848,  848,  848,  848,  848,  187,  885,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  768,  984,
      889,  984,  984,  984,  984,  984,  888,  848,  848,  848,
      848,  848,  848,  252,  984,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  881,   61,  850,  850,  850,  850,
      850,  850,  984,   61,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  984,   61,  984,  984,  984,  984,  984,
      881,   61,  850,  850,  850,  850,  850,  850,  187,   61,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  825,
       61,  852,  852,  852,  852,  852,  852,   61,  855,  984,

      862,  854,   61,  984,  984,  863,  984,  891,  864,  867,
      984,   61,  879,  856,  868,  869,   61,  852,  852,  852,
      852,  852,  852,   61,  855,  857,  862,  854,   61,   61,
       61,   61,  858,   61,   61,  867,   61,   61,  879,  856,
      868,  869,   61,  984,  984,  984,  984,  984,   61,  984,
      984,  857,  984,  984,  984,   61,   61,   61,  858,   61,
       61,  252,   61,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  792,  252,   61,  874,  874,  874,  874,  874,
      874,  874,  874,  874,   61,  984,  875,  875,  875,  875,
      875,  875,  984,  905,  875,  875,  875,  875,  875,  875,

      875,  875,  875,  984,  984,  984,  984,  984,  984,  984,
       61,  890,  875,  875,  875,  875,  875,  875,  187,  905,
      876,  876,  876,  876,  876,  876,  876,  876,  876,  825,
      880,  877,  877,  877,  877,  877,  877,  984,   61,  877,
      877,  877,  877,  877,  877,  877,  877,  877,   61,  882,
      886,  887,   61,  901,   61,  883,  880,  877,  877,  877,
      877,  877,  877,  892,   61,   61,   61,   61,  902,   61,
      984,   61,  984,  984,   61,  882,  886,  887,   61,  901,
       61,  883,  904,  984,  984,  984,  984,  984,  984,  892,
       61,   61,   61,   61,  902,   61,  252,   61,  897,  897,

      897,  897,  897,  897,  897,  897,  897,  984,  904,  898,
      898,  898,  898,  898,  898,  984,   61,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  984,  900,  903,  907,
       61,   61,   61,   61,   61,  898,  898,  898,  898,  898,
      898,  187,  984,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  825,  900,  903,  907,   61,   61,   61,   61,
       61,  906,  906,   61,  906,  906,  906,  906,  906,  906,
       61,  252,  906,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  906,  906,   61,  913,  914,  915,  916,   61,
      918,  919,  927,  984,  984,  984,   61,   61,  921,  922,

      933,   61,  984,  984,   61,  984,  984,  984,  984,  984,
       61,  913,  984,  984,  916,   61,  918,  919,  927,  928,
       61,   61,  984,   61,  921,  922,  933,   61,  917,  917,
       61,  917,  917,  917,  917,  917,  917,   61,  929,  917,
      934,   61,  930,   61,  984,  928,   61,   61,   61,  917,
      917,  931,  932,  935,  936,  937,  942,   61,  938,  945,
      984,  943,  946,   61,  929,   61,  934,   61,  930,   61,
       61,  947,  948,  984,   61,   61,  984,  931,  932,  935,
      936,  937,  942,   61,  938,  945,  944,  943,  946,  949,
       61,   61,   61,   61,   61,  950,   61,  947,  948,  951,

       61,   61,   61,  956,  957,  958,   61,   61,  959,   61,
       61,  960,  944,  961,   61,  949,   61,   61,   61,  984,
       61,  950,  962,  967,   61,  951,   61,   61,   61,  956,
      957,  958,   61,   61,  959,   61,   61,  960,  966,  961,
       61,  968,   61,   61,   61,   61,  969,   61,  962,  967,
       61,   61,  974,   61,   61,   61,  984,  984,  984,  984,
      984,  984,  984,  984,  966,  984,   61,  968,   61,  984,
       61,   61,  969,   61,  984,  984,  984,   61,  974,  984,
       61,   61,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,   61,   41,   41,   41,   41,   43,   43,   43,

       43,   47,   47,   47,   47,   49,  984,   49,   49,   50,
       50,   50,   50,  116,  984,  116,  116,  120,  120,  182,
      182,  183,  183,  249,  249,  250,  250,  251,  251,  319,
      319,  320,  320,  388,  388,  389,  389,  390,  390,  414,
      984,  414,  414,  457,  457,  458,  458,  459,  459,  531,
      531,  532,  532,  592,  592,  593,  593,  594,  594,  647,
      647,  648,  648,  649,  649,  531,  531,  691,  691,  692,
      692,  727,  727,  728,  728,  729,  729,  757,  757,  758,
      758,  759,  759,  648,  648,  786,  786,  787,  787,  813,
      813,  814,  814,  815,  815,  842,  842,  843,  843,  845,

      845,  728,  728,  871,  871,  872,  872,  893,  893,  894,
      894,  895,  895,  906,  984,  906,  906,  908,  984,  908,
      908,  909,  909,  910,  910,  917,  984,  917,  917,  920,
      984,  920,  920,  786,  786,  924,  924,  925,  925,  939,
      939,  940,  940,  952,  952,  953,  953,  954,  954,  843,
      843,  964,  964,  970,  970,  971,  971,  972,  972,  976,
      976,  979,  979,  980,  980,  982,  982,  983,  983,    7,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,

      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984
    } ;

static yyconst flex_int16_t yy_chk[5846] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   10,   10,   11,   11,   15,
       17,   27, 1073,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   24,   16,   16,   16,   16,   16,

       16,   28,   16,   37,   61,   24,   17,   27,   24,   28,
       37,   63,   30,   44,   44,   64,   28,   24,   16, 1069,
       24,   16,   16,   16,   16,   16,   16,   28,   16,   37,
       61,   24,   30, 1067,   24,   28,   37,   63,   30,   45,
       45,   64,   28,   24,   16,   20,   20, 1063,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   30,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   21,   21,   32,   21,   32, 1057,   39,   32, 1049,
       21, 1048,   21,   39,   46,   46, 1043,   65, 1039,   21,
     1038,   25, 1034, 1030,  992,  983,   66,   21,   21,   32,
       21,   32,   25,   39,   32,   25,   21,   25,   21,   39,
      982,   35,   35,   65,   29,   21,   22,   25,   22,   22,
       29,   22,   66,   35,   35,   67,   29,   22,   25,   22,
       22,   25,  980,   25,   67,  979,   22,   35,   35,  978,
       29,  977,   22,  976,   22,   22,   29,   22,  975,   35,
       35,   67,   29,   22,   31,   22,   22,  972,   31,   70,

       67,   33,   22,   23,   31,   40,   23,   23,   70,   31,
       31,   23,   33,   71,   23,   33,   23,   23,   33,   74,
       31,   40,   75,   23,   31,   70,  971,   33,  965,   23,
       31,   40,   23,   23,   70,   31,   31,   23,   33,   71,
       23,   33,   23,   23,   33,   74,  964,   40,   75,   23,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      963,   26,   26,   26,   26,   26,   26,  954,   26,  953,
      952,  941,   26,  940,   78,   26,   38,  939,   81,   34,
       38,   26,   78,   34,  925,   36,   36,   26,   26,   26,
       26,   26,   26,   34,   26,   36,   38,   68,   26,   34,

       78,   26,   38,   36,   81,   34,   38,   26,   78,   34,
       69,   69,   36,   91,   68,   36,  924,  923,  911,   34,
      910,   36,   38,   68,  909,   34,   73,  895,  894,   36,
      893,  877,  873,   73,  872,  871,   69,   69,   36,   91,
       68,   36,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   73,   54,   54,   54,   54,   54,   54,   73,
       54,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       94,   76,  870,  848,  845,  843,  842,  823,  100,   54,
       54,   54,   54,   54,   54,   76,   54,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   94,   76,   59,   59,

       59,   59,   59,   59,  100,  817,  816,  815,  814,  813,
      790,   76,  119,  119,  119,  119,  119,  119,  119,  119,
      119,   77,  787,   77,   59,   59,   59,   59,   59,   59,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       79,   62,   62,   62,   62,   62,   62,   77,   62,   77,
      786,   80,   79,  785,  766,   72,   80,   83,  760,   82,
       84,   62,  759,   72,   86,  758,   79,   62,   62,   62,
       62,   62,   62,   83,   62,   72,   82,   80,   79,   86,
       84,   72,   80,   83,   87,   82,   84,   62,   85,   72,
       86,   88,   88,   85,   90,   92,   90,   89,   87,   83,

       92,   72,   82,   93,   93,   86,   84,   85,   85,   89,
       87,   95,   89,  757,   85,  744,   97,   88,   88,   85,
       90,   92,   90,   89,   87,   96,   92,  101,  105,   93,
       93,   96,   97,   85,   85,   89,   98,   99,   89,   99,
       99,   98,   97,  107,  102,   95,  731,  101,   99,  102,
      106,   96,  103,  101,  105,  109,  108,   96,   97,  729,
      104,  728,   98,   99,  108,   99,   99,   98,  110,  103,
      102,   95,  103,  101,   99,  102,  106,  107,  103,  104,
      110,  109,  108,  111,  112,  113,  104,  114,  113,  114,
      108,  112,  111,  727,  110,  103,  699,  693,  103,  692,

      691,  690,  651,  107,  649,  104,  110,  648,  647,  111,
      112,  113,  602,  114,  113,  114,  595,  112,  111,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  126,
      117,  117,  117,  117,  117,  117,  124,  117,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  127,  130,  594,
      593,  592,  535,  532,  531,  126,  117,  117,  117,  117,
      117,  117,  133,  117,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  127,  130,  121,  121,  121,  121,  121,
      121,  530,  147,  469,  460,  140,  459,  458,  133,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  457,  393,

      147,  121,  121,  121,  121,  121,  121,  123,  147,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  140,
      123,  123,  123,  123,  123,  123,  147,  186,  390,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  389,  388,
      329,  321,  320,  319,  318,  140,  123,  123,  123,  123,
      123,  123,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  131,  125,  125,  125,  125,  125,  125,  128,
      129,  132,  128,  261,  251,  131,  129,  134,  137,  134,
      137,  132,  138,  135,  136,  136,  138,  250,  131,  125,
      125,  125,  125,  125,  125,  128,  129,  132,  128,  135,

      139,  131,  129,  134,  137,  134,  137,  132,  138,  135,
      136,  136,  138,  141,  142,  144,  139,  144,  143,  146,
      145,  146,  249,  149,  152,  135,  139,  145,  248,  221,
      148,  142,  184,  141,  143,  149,  150,  153,  151,  141,
      142,  144,  139,  144,  143,  146,  145,  146,  148,  149,
      183,  154,  150,  145,  151,  153,  148,  142,  152,  141,
      143,  149,  150,  153,  151,  154,  155,  155,  156,  156,
      157,  158,  161,  160,  148,  182,  159,  154,  150,  163,
      151,  153,  160,  158,  152,  159,  164,  161,  162,  159,
      165,  154,  155,  155,  159,  163,  165,  158,  161,  160,

      162,  168,  159,  156,  157,  163,  164,  167,  160,  158,
      167,  159,  164,  161,  162,  159,  165,  166,  166,  170,
      159,  163,  165,  169,  169,  171,  162,  171,  172,  156,
      157,  170,  164,  167,  175,  168,  167,  179,  178,  173,
      174,  177,  192,  166,  166,  170,  172,  176,  178,  169,
      169,  171,  175,  171,  172,  173,  174,  170,  177,  176,
      175,  168,  120,  179,  178,  173,  174,  177,  192,  196,
      194,  118,  172,  176,  178,   55,   51,   50,  175,   47,
       42,  173,  174,  197,  177,  176,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  194,  180,  180,  180,

      180,  180,  180,  196,  180,  187,  187,  187,  187,  187,
      187,  187,  187,  187,   19,   18,   14,  197,   12,    7,
        4,    3,    0,  180,  180,  180,  180,  180,  180,  196,
      180,  185,    0,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  197,  185,  185,  185,  185,  185,  185,
      190,  203,  190,  190,  190,  190,  190,  190,  190,  190,
      190,    0,  200,    0,    0,    0,    0,    0,    0,  200,
      185,  185,  185,  185,  185,  185,  188,  203,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  200,  188,
      188,  188,  188,  188,  188,  200,  193,    0,    0,    0,

        0,    0,    0,    0,    0,  207,    0,    0,    0,    0,
        0,    0,  213,  213,  193,  188,  188,  188,  188,  188,
      188,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      193,  207,  189,  189,  189,  189,  189,  189,  213,  213,
      193,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  202,    0,    0,    0,  195,  193,  195,  189,  189,
      189,  189,  189,  189,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  198,  201,  191,  191,  191,  191,  191,
      191,  195,  199,  195,  199,  202,  204,    0,  204,  198,
      205,  210,  205,  208,  201,  206,  208,  209,    0,  198,

      201,  191,  191,  191,  191,  191,  191,  206,  199,    0,
      199,  202,  204,  209,  204,  198,  205,    0,  205,  208,
      201,  206,  208,  209,  211,  210,  211,  212,  214,  215,
      216,  216,  215,  206,  220,  214,    0,    0,    0,  209,
        0,    0,    0,  212,    0,    0,    0,    0,  228,    0,
      211,  210,  211,  212,  214,  215,  216,  216,  215,  226,
      242,  214,  217,  218,  219,  223,  222,  223,  220,  212,
      225,  217,  217,  217,  228,  226,  218,  219,  224,  225,
      217,  222,    0,  222,  224,  226,  242,    0,  217,  218,
      219,  223,  222,  223,  220,  229,  225,  217,  217,  217,

      230,  226,  218,  219,  224,  225,  217,  222,  227,  222,
      224,  229,  231,  234,  227,  232,  235,  230,  236,  232,
      237,  229,  233,  233,  238,    0,  230,  239,  239,  234,
      231,  238,  235,  236,  227,  236,  237,  229,  231,  234,
      227,  232,  235,  230,  236,  232,  237,  241,  233,  233,
      238,  240,  243,  239,  239,  234,  231,  238,  235,  236,
      240,  236,  237,  244,  245,  246,  262,  262,  265,  263,
      245,  277,  243,    0,  263,  270,  270,  240,  243,  271,
      244,  241,    0,    0,    0,    0,  240,    0,    0,  244,
      245,  271,  262,  262,  265,  263,  245,  277,  243,  246,

      263,  270,  270,    0,  268,  271,  244,  241,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  271,    0,    0,
      303,    0,    0,    0,    0,  246,  253,    0,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  268,  253,
      253,  253,  253,  253,  253,  255,  303,  255,  255,  255,
      255,  255,  255,  255,  255,  255,    0,    0,    0,    0,
        0,    0,    0,    0,  268,  253,  253,  253,  253,  253,
      253,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      267,  305,  254,  254,  254,  254,  254,  254,  256,  267,
      256,  256,  256,  256,  256,  256,  256,  256,  256,    0,

      269,    0,    0,    0,    0,    0,  267,  305,  254,  254,
      254,  254,  254,  254,  257,  267,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  290,  257,  257,  257,
      257,  257,  257,  258,  269,  258,  258,  258,  258,  258,
      258,  258,  258,  258,    0,  290,    0,    0,    0,    0,
        0,    0,  290,  257,  257,  257,  257,  257,  257,  259,
      269,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  290,  259,  259,  259,  259,  259,  259,  260,  279,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  264,
      274,  264,  273,  273,  266,  266,  266,    0,  259,  259,

      259,  259,  259,  259,  266,  272,  274,  275,  278,  272,
      272,  276,  280,  279,  275,  264,  274,  264,  273,  273,
      266,  266,  266,  276,  289,  278,  281,  283,    0,  282,
      266,  272,  274,  275,  278,  272,  272,  276,  281,  279,
      275,  282,  283,  286,  284,  288,  280,  291,  285,  276,
        0,  278,  281,  283,  285,  282,  284,  287,  289,  286,
      291,  292,  294,  287,  281,  288,  301,  282,  283,  286,
      284,  288,  280,  291,  285,  293,  292,  295,  294,  297,
      285,  293,  284,  287,  289,  286,  291,  292,  294,  287,
      296,  288,  299,  295,  302,  302,  304,  296,  299,  297,

      301,  293,  292,  295,  294,  297,  298,  293,  300,  306,
        0,  300,  304,  298,  308,  310,  296,  315,  299,  295,
      302,  302,  304,  296,  299,  297,  301,  307,  311,  310,
      308,  311,  298,  307,  300,  306,  309,  300,  304,  298,
      308,  310,  313,  312,  314,  309,  314,  313,  317,  316,
      348,  315,  316,  307,  311,  310,  308,  311,    0,  307,
        0,    0,  309,  312,    0,  317,    0,    0,  313,  312,
      314,  309,  314,  313,  317,  316,  348,  315,  316,  327,
      327,  327,  327,  327,  327,  327,  327,  327,    0,  312,
      322,  317,  322,  322,  322,  322,  322,  322,  322,  322,

      322,  323,    0,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  341,  323,  323,  323,  323,  323,  323,
      324,  341,  324,  324,  324,  324,  324,  324,  324,  324,
      324,    0,  333,    0,    0,    0,    0,    0,    0,  341,
      323,  323,  323,  323,  323,  323,  325,  341,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  334,  325,
      325,  325,  325,  325,  325,  326,  333,  326,  326,  326,
      326,  326,  326,  326,  326,  326,    0,    0,  334,    0,
        0,    0,    0,    0,  334,  325,  325,  325,  325,  325,
      325,  328,  333,  328,  328,  328,  328,  328,  328,  328,

      328,  328,  328,  330,  334,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,    0,  330,  330,  330,  330,
      330,  330,  332,    0,  332,  332,  332,  332,  332,  332,
      332,  332,  332,    0,    0,    0,    0,    0,    0,  335,
        0,  335,  330,  330,  330,  330,  330,  330,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  336,  337,  331,
      331,  331,  331,  331,  331,  335,  338,  335,  345,  340,
      337,  340,  343,  336,  344,  339,  346,  344,  347,  343,
      345,  347,  338,  336,  337,  331,  331,  331,  331,  331,
      331,  339,  338,    0,  345,  340,  337,  340,  343,  336,

      344,  339,    0,  344,  347,  343,  345,  347,  338,  364,
      346,  350,  349,    0,    0,    0,    0,  339,  342,  342,
      349,  342,  342,  342,  342,  342,  342,  342,  350,  342,
      353,  353,  355,  351,  352,  364,  346,  350,  349,  342,
      342,  351,  352,  354,  354,  356,  349,  358,  358,  359,
      361,    0,  355,  356,  350,  357,  353,  353,  355,  351,
      352,  365,  361,  369,  357,    0,  359,  351,  352,  354,
      354,  356,  360,  358,  358,  359,  361,  362,  355,  356,
      360,  357,  370,  362,  370,  363,  366,  365,  361,  369,
      357,  363,  359,  367,  366,  372,  367,  368,  360,  371,

      368,  375,  373,  362,  372,    0,  360,  376,  370,  362,
      370,  363,  366,  371,  374,  386,  377,  363,  373,  367,
      366,  372,  367,  368,  377,  371,  368,  379,  373,  380,
      372,  378,  374,  381,  378,  375,  382,    0,  382,  371,
      374,  376,  377,  379,  373,  381,  383,  384,  384,  386,
      377,  407,  383,  379,  385,  380,  387,  378,  374,  381,
      378,  375,  382,  385,  382,    0,  407,  376,  387,  379,
        0,  381,  383,  384,  384,  386,    0,  407,  383,  410,
      385,    0,  387,    0,    0,    0,    0,    0,    0,  385,
        0,  410,  407,    0,  387,  391,  391,  391,  391,  391,

      391,  391,  391,  391,  392,  410,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  394,  410,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  412,  394,
      394,  394,  394,  394,  394,  396,  405,  396,  396,  396,
      396,  396,  396,  396,  396,  396,    0,    0,    0,    0,
        0,    0,    0,  415,  412,  394,  394,  394,  394,  394,
      394,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      405,  435,  395,  395,  395,  395,  395,  395,  397,  415,
      397,  397,  397,  397,  397,  397,  397,  397,  397,    0,
      436,    0,    0,    0,    0,    0,  405,  435,  395,  395,

      395,  395,  395,  395,  398,    0,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  399,  436,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  417,  399,  399,
      399,  399,  399,  399,  400,  417,  400,  400,  400,  400,
      400,  400,  400,  400,  400,    0,    0,    0,    0,    0,
        0,    0,    0,  417,  399,  399,  399,  399,  399,  399,
      401,  417,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  409,  401,  401,  401,  401,  401,  401,  402,
        0,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      404,  406,  409,  404,    0,  406,  408,  408,  409,  401,

      401,  401,  401,  401,  401,  403,  411,  416,  403,    0,
      413,  414,  414,  416,  403,    0,  404,  406,  409,  404,
      413,  406,  408,  408,  419,  419,  411,    0,  413,  413,
        0,  403,  411,  416,  403,  418,  413,  414,  414,  416,
      403,  418,  420,  418,  423,  426,  413,  422,  418,  421,
      419,  419,  411,  422,  413,  413,  421,    0,  420,    0,
      424,  418,  425,  426,  423,  427,  428,  418,  420,  418,
      423,  426,  428,  422,  418,  421,  424,  429,  425,  422,
      430,  427,  421,  431,  420,  432,  424,    0,  425,  426,
      423,  427,  428,  429,  433,  437,  430,  433,  428,  431,

      432,    0,  424,  429,  425,  434,  430,  427,  442,  431,
      434,  432,  438,  438,    0,  437,  439,  439,  443,  429,
      433,  437,  430,  433,  444,  431,  432,  440,  443,  440,
      444,  434,  441,  441,  442,  443,  434,    0,  438,  438,
      446,  437,  439,  439,  443,  445,    0,  447,  448,  448,
      444,  453,  446,  440,  443,  440,  444,  450,  441,  441,
      449,  443,  449,  445,  450,  452,  446,  447,  451,  454,
      451,  445,  452,  447,  448,  448,  456,  453,  446,  456,
      455,  454,  455,  450,  484,    0,  449,    0,  449,  445,
      450,  452,    0,  447,  451,  454,  451,    0,  452,    0,

        0,    0,  456,    0,    0,  456,  455,  454,  455,  461,
      484,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      462,    0,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  463,    0,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,    0,  463,  463,  463,  463,  463,  463,
      464,  499,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      463,  463,  463,  463,  463,  463,  465,  499,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  476,  465,
      465,  465,  465,  465,  465,  466,  501,  466,  466,  466,

      466,  466,  466,  466,  466,  466,    0,    0,  476,    0,
        0,    0,    0,    0,  476,  465,  465,  465,  465,  465,
      465,  468,  501,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  470,  476,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  470,    0,  470,  470,  470,  470,
      470,  470,  472,    0,  472,  472,  472,  472,  472,  472,
      472,  472,  472,    0,    0,  478,    0,    0,    0,    0,
        0,  473,  470,  470,  470,  470,  470,  470,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  473,  474,  471,
      471,  471,  471,  471,  471,  474,  475,  473,  477,  478,

        0,    0,  481,  475,  481,  483,  482,  477,  483,    0,
      479,  482,    0,  473,  474,  471,  471,  471,  471,  471,
      471,  474,  475,  486,  477,  478,  479,  480,  481,  475,
      481,  483,  482,  477,  483,  485,  479,  482,  487,  489,
      480,  488,  488,  486,  485,  491,  493,    0,  490,  486,
      492,  491,  479,  480,  487,  489,  490,  498,    0,  492,
        0,  485,  493,    0,  487,  489,  480,  488,  488,  486,
      485,  491,  493,  495,  490,  495,  492,  491,  496,  494,
      487,  489,  490,  504,  497,  492,  494,  497,  493,  502,
      500,  498,  502,  503,  505,  496,  506,  508,  507,  495,

      507,  495,  503,  509,  496,  494,  500,  510,  514,  504,
      497,  516,  494,  497,  512,  502,  500,  498,  502,  503,
      505,  496,  506,  508,  507,  511,  507,  513,  503,  509,
      512,  515,  500,  510,  514,  520,  517,  511,  518,  519,
      512,  524,  522,  513,  515,  516,  518,  521,  519,    0,
      525,  511,  520,  513,  517,  524,  512,  515,  522,  521,
      529,  520,  517,  511,  518,  519,  526,  524,  522,  513,
      515,  516,  518,  521,  519,  523,  525,  523,  520,  527,
      517,  524,  526,  528,  522,  521,  529,  551,  528,  550,
      550,  555,  526,  551,  527,    0,    0,    0,    0,    0,

        0,  523,    0,  523,    0,  527,    0,    0,  526,  528,
        0,    0,    0,  551,  528,  550,  550,  555,    0,  551,
      527,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      534,    0,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  536,    0,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,    0,  536,  536,  536,  536,  536,
      536,  538,    0,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  536,  536,  536,  536,  536,  536,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  544,  547,  537,  537,

      537,  537,  537,  537,  541,  547,  541,  541,  541,  541,
      541,  541,  541,  541,  541,    0,  544,    0,    0,    0,
        0,    0,  544,  547,  537,  537,  537,  537,  537,  537,
      540,  547,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  544,  540,  540,  540,  540,  540,  540,  543,
      572,  543,  543,  543,  543,  543,  543,  543,  543,  543,
        0,    0,    0,    0,    0,    0,  554,  566,    0,  540,
      540,  540,  540,  540,  540,  542,  572,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  545,  542,  542,
      542,  542,  542,  542,  546,  548,  545,  549,    0,    0,

      554,  566,    0,  573,  546,    0,  549,  548,  552,  553,
        0,  556,    0,  545,  542,  542,  542,  542,  542,  542,
      546,  548,  545,  549,  552,  553,  554,  566,  561,  573,
      546,  556,  549,  548,  552,  553,  557,  556,  558,  557,
      559,  560,  562,  563,  567,  558,  559,  560,  561,  562,
      552,  553,  564,  568,  561,  564,  570,  556,  565,  565,
      567,    0,  557,  563,  558,  557,  559,  560,  562,  563,
      567,  558,  559,  560,  561,  562,  574,  571,  564,  571,
      569,  564,  575,  579,  565,  565,  567,  568,  569,  563,
      570,  576,  577,  578,  584,  577,  578,    0,  576,  581,

      585,  580,  574,  571,  582,  571,  569,  585,  575,  579,
      580,  583,  582,  568,  569,  581,  570,  576,  577,  578,
      584,  577,  578,  583,  576,  581,  585,  580,  586,  587,
      582,  586,  588,  585,  589,  590,  580,  583,  582,  615,
      591,  581,    0,    0,    0,    0,    0,    0,    0,  583,
      606,  590,  606,  617,  586,  587,  591,  586,  588,    0,
      589,  590,    0,    0,    0,  615,  591,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  606,  590,  606,  617,
      619,    0,  591,  597,    0,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  622,  597,  597,  597,  597,

      597,  597,  598,  626,  598,  598,  598,  598,  598,  598,
      598,  598,  598,    0,  619,    0,    0,    0,    0,    0,
        0,  622,  597,  597,  597,  597,  597,  597,  599,  626,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      619,  599,  599,  599,  599,  599,  599,  600,  612,  600,
      600,  600,  600,  600,  600,  600,  600,  600,    0,    0,
      612,    0,    0,    0,    0,    0,    0,  599,  599,  599,
      599,  599,  599,  601,  612,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  603,  612,  603,  603,  603,
      603,  603,  603,  603,  603,  603,  603,    0,  603,  603,

      603,  603,  603,  603,  605,    0,  605,  605,  605,  605,
      605,  605,  605,  605,  605,    0,    0,    0,    0,    0,
        0,    0,    0,  611,  603,  603,  603,  603,  603,  603,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  611,
      613,  604,  604,  604,  604,  604,  604,  607,  608,  611,
      609,  607,  609,    0,  610,  608,  610,  613,  614,    0,
        0,  618,  614,  618,    0,  611,  613,  604,  604,  604,
      604,  604,  604,  607,  608,  620,  609,  607,  609,  621,
      610,  608,  610,  613,  614,  616,  623,  618,  614,  618,
      624,  625,  620,  627,  616,  628,  629,  621,  630,  633,

        0,  620,  631,  625,  623,  621,  624,  630,  631,  634,
      635,  616,  623,  627,  632,  628,  624,  625,  620,  627,
      616,  628,  629,  621,  630,  633,  632,  636,  631,  625,
      623,  637,  624,  630,  631,  634,  635,  638,  639,  627,
      632,  628,  640,  641,  642,  643,  644,  645,  645,  646,
      639,  660,  632,  636,  662,  641,  661,  637,  663,  663,
      642,  666,  661,  638,  639,  667,    0,  646,  640,  641,
      642,  643,  644,  645,  645,  646,  639,  660,    0,  669,
      662,  641,  661,    0,  663,  663,  642,  666,  661,    0,
      676,  667,  650,  646,  650,  650,  650,  650,  650,  650,

      650,  650,  650,  650,  652,  669,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  676,  652,  652,  652,
      652,  652,  652,  654,  675,  654,  654,  654,  654,  654,
      654,  654,  654,  654,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  652,  652,  652,  652,  652,  652,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  675,  665,
      653,  653,  653,  653,  653,  653,  656,  665,  656,  656,
      656,  656,  656,  656,  656,  656,  656,    0,  689,    0,
        0,    0,    0,    0,  675,  665,  653,  653,  653,  653,
      653,  653,  655,  665,  655,  655,  655,  655,  655,  655,

      655,  655,  655,  655,  689,  655,  655,  655,  655,  655,
      655,  658,  705,  658,  658,  658,  658,  658,  658,  658,
      658,  658,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  655,  655,  655,  655,  655,  655,  657,  705,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  659,
      657,  657,  657,  657,  657,  657,  664,  668,  670,  671,
      670,  672,  677,  664,  673,  659,    0,  672,  671,  677,
      673,  674,  674,  668,    0,  659,  657,  657,  657,  657,
      657,  657,  664,  668,  670,  671,  670,  672,  677,  664,
      673,  659,  678,  672,  671,  677,  673,  674,  674,  668,

      679,  678,  687,  680,  681,  682,  686,  686,  685,  687,
      703,  704,  688,  704,  703,  706,  710,  679,  678,  680,
      711,  681,  682,  685,  688,    0,  679,  678,  687,  680,
      681,  682,  686,  686,  685,  687,  703,  704,  688,  704,
      703,  706,  710,  679,    0,  680,  711,  681,  682,  685,
      688,  694,    0,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  715,  694,  694,  694,  694,  694,  694,
      695,  717,  695,  695,  695,  695,  695,  695,  695,  695,
      695,    0,    0,    0,    0,    0,    0,    0,    0,  715,
      694,  694,  694,  694,  694,  694,  696,  717,  696,  696,

      696,  696,  696,  696,  696,  696,  696,  696,  709,  696,
      696,  696,  696,  696,  696,  697,  718,  697,  697,  697,
      697,  697,  697,  697,  697,  697,    0,    0,  709,    0,
        0,    0,    0,    0,  709,  696,  696,  696,  696,  696,
      696,  698,  718,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  700,  709,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,    0,  700,  700,  700,  700,
      700,  700,  702,    0,  702,  702,  702,  702,  702,  702,
      702,  702,  702,    0,    0,    0,    0,    0,    0,    0,
        0,  707,  700,  700,  700,  700,  700,  700,  701,  701,

      701,  701,  701,  701,  701,  701,  701,  707,  708,  701,
      701,  701,  701,  701,  701,  712,  713,  707,  714,  713,
      716,  722,    0,  720,  708,    0,  716,  714,  716,    0,
      719,  712,  721,  707,  708,  701,  701,  701,  701,  701,
      701,  712,  713,  720,  714,  713,  716,  719,  721,  720,
      708,  723,  716,  714,  716,  722,  719,  712,  721,  724,
      725,  725,  726,  739,  741,  742,  747,  723,  742,  720,
      726,    0,    0,  719,  721,    0,    0,  723,    0,    0,
        0,  722,  752,    0,    0,  724,  725,  725,  726,  739,
      741,  742,  747,  723,  742,  730,  726,  730,  730,  730,

      730,  730,  730,  730,  730,  730,  730,  732,  752,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  783,
      732,  732,  732,  732,  732,  732,  734,    0,  734,  734,
      734,  734,  734,  734,  734,  734,  734,    0,    0,    0,
        0,    0,    0,    0,  777,  783,  732,  732,  732,  732,
      732,  732,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  745,  784,  733,  733,  733,  733,  733,  733,  736,
      777,  736,  736,  736,  736,  736,  736,  736,  736,  736,
        0,  745,    0,    0,    0,    0,    0,  745,  784,  733,
      733,  733,  733,  733,  733,  735,  777,  735,  735,  735,

      735,  735,  735,  735,  735,  735,  735,  745,  735,  735,
      735,  735,  735,  735,  738,  801,  738,  738,  738,  738,
      738,  738,  738,  738,  738,    0,  740,  746,    0,    0,
        0,    0,    0,  740,  735,  735,  735,  735,  735,  735,
      737,  801,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  740,  737,  737,  737,  737,  737,  737,  740,
      743,  746,  743,  749,  750,    0,  753,  750,  748,  751,
      771,  751,  753,  754,  754,  755,  749,  755,    0,  737,
      737,  737,  737,  737,  737,  748,  743,  746,  743,  749,
      750,  756,  753,  750,  748,  751,    0,  751,  753,  754,

      754,  755,  749,  755,  771,  772,  802,  756,    0,  772,
        0,  748,  800,    0,    0,    0,  762,  756,  762,  762,
      762,  762,  762,  762,  762,  762,  762,    0,  803,    0,
      771,  772,  802,  756,  761,  772,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  800,  761,  761,  761,
      761,  761,  761,  764,  803,  764,  764,  764,  764,  764,
      764,  764,  764,  764,    0,  807,    0,    0,    0,    0,
        0,    0,  800,  761,  761,  761,  761,  761,  761,  763,
        0,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  807,  763,  763,  763,  763,  763,  763,  765,  810,

      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      830,    0,    0,    0,    0,    0,    0,    0,  763,  763,
      763,  763,  763,  763,  767,  810,  767,  767,  767,  767,
      767,  767,  767,  767,  767,  767,  830,  767,  767,  767,
      767,  767,  767,  769,    0,  769,  769,  769,  769,  769,
      769,  769,  769,  769,    0,    0,    0,    0,    0,    0,
        0,    0,  770,  767,  767,  767,  767,  767,  767,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  770,  773,
      768,  768,  768,  768,  768,  768,  774,  775,  770,  775,
        0,    0,    0,    0,    0,  773,  781,  778,  776,  781,

      831,  832,  774,  779,  770,  773,  768,  768,  768,  768,
      768,  768,  774,  775,  776,  775,  776,  778,  780,  779,
      782,  773,  781,  778,  776,  781,  831,  832,  774,  779,
        0,    0,  782,    0,  780,    0,    0,    0,    0,    0,
      776,    0,  776,  778,  780,  779,  782,  793,    0,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  782,  789,
      780,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  791,    0,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  835,  791,  791,  791,  791,  791,  791,
      795,    0,  795,  795,  795,  795,  795,  795,  795,  795,

      795,    0,    0,  837,    0,    0,    0,    0,  811,  835,
      791,  791,  791,  791,  791,  791,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  811,  837,  792,  792,  792,
      792,  792,  792,  797,  811,  797,  797,  797,  797,  797,
      797,  797,  797,  797,    0,  799,    0,    0,    0,  838,
        0,  811,  837,  792,  792,  792,  792,  792,  792,  794,
      799,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  799,  794,  794,  794,  794,  794,  794,    0,  838,
        0,    0,    0,    0,    0,  819,  799,  819,  819,  819,
      819,  819,  819,  819,  819,  819,    0,    0,  794,  794,

      794,  794,  794,  794,  796,  838,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  804,  796,  796,  796,
      796,  796,  796,  798,  805,  806,  798,  808,  808,  808,
      806,  808,  804,  805,  809,    0,  809,    0,  854,    0,
        0,    0,  804,  796,  796,  796,  796,  796,  796,  798,
      805,  806,  798,  812,  833,  859,  806,  808,  804,  805,
      809,  812,  809,  821,  854,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  833,    0,    0,    0,    0,  812,
      833,  859,  860,  808,    0,    0,    0,  812,  818,    0,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,

      833,  818,  818,  818,  818,  818,  818,  822,  860,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,    0,
      864,    0,    0,    0,    0,    0,  863,  818,  818,  818,
      818,  818,  818,  820,    0,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  857,  864,  820,  820,  820,  820,
      820,  820,  826,  863,  826,  826,  826,  826,  826,  826,
      826,  826,  826,    0,  857,    0,    0,    0,    0,    0,
      857,  864,  820,  820,  820,  820,  820,  820,  824,  863,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      857,  824,  824,  824,  824,  824,  824,  827,  828,    0,

      834,  827,  828,    0,    0,  836,    0,  866,  836,  839,
        0,  839,  855,  829,  840,  841,  834,  824,  824,  824,
      824,  824,  824,  827,  828,  829,  834,  827,  828,  855,
      840,  841,  829,  829,  836,  839,  866,  839,  855,  829,
      840,  841,  834,    0,    0,    0,    0,    0,  867,    0,
        0,  829,    0,    0,    0,  855,  840,  841,  829,  829,
      836,  847,  866,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  849,  867,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  869,    0,  849,  849,  849,  849,
      849,  849,  850,  884,  850,  850,  850,  850,  850,  850,

      850,  850,  850,    0,    0,    0,    0,    0,    0,    0,
      869,  865,  849,  849,  849,  849,  849,  849,  851,  884,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      856,  851,  851,  851,  851,  851,  851,  852,  865,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  856,  858,
      861,  862,  861,  880,  888,  858,  856,  851,  851,  851,
      851,  851,  851,  868,  865,  881,  868,  858,  881,  862,
        0,  880,    0,    0,  856,  858,  861,  862,  861,  880,
      888,  858,  883,    0,    0,    0,    0,    0,    0,  868,
      883,  881,  868,  858,  881,  862,  874,  880,  874,  874,

      874,  874,  874,  874,  874,  874,  874,    0,  883,  874,
      874,  874,  874,  874,  874,  875,  883,  875,  875,  875,
      875,  875,  875,  875,  875,  875,    0,  879,  882,  886,
      889,  886,  890,  882,  879,  874,  874,  874,  874,  874,
      874,  876,    0,  876,  876,  876,  876,  876,  876,  876,
      876,  876,  876,  879,  882,  886,  889,  886,  890,  882,
      879,  887,  887,  891,  887,  887,  887,  887,  887,  887,
      892,  897,  887,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  887,  887,  900,  901,  902,  903,  904,  891,
      906,  906,  913,    0,    0,    0,  892,  913,  908,  908,

      918,  901,    0,    0,  904,    0,    0,    0,    0,    0,
      900,  901,    0,    0,  904,  908,  906,  906,  913,  914,
      902,  903,    0,  913,  908,  908,  918,  901,  907,  907,
      904,  907,  907,  907,  907,  907,  907,  914,  915,  907,
      919,  908,  916,  915,    0,  914,  902,  903,  916,  907,
      907,  917,  917,  920,  920,  921,  927,  927,  922,  930,
        0,  928,  931,  914,  915,  922,  919,  928,  916,  915,
      920,  932,  933,    0,  916,  921,    0,  917,  917,  920,
      920,  921,  927,  927,  922,  930,  929,  928,  931,  935,
      938,  922,  929,  928,  942,  936,  920,  932,  933,  937,

      937,  921,  936,  943,  944,  945,  945,  944,  946,  935,
      943,  948,  929,  949,  949,  935,  938,  950,  929,    0,
      942,  936,  951,  957,  957,  937,  937,  958,  936,  943,
      944,  945,  945,  944,  946,  935,  943,  948,  956,  949,
      949,  959,  951,  950,  962,  956,  961,  967,  951,  957,
      957,  969,  966,  958,  966,  974,    0,    0,    0,    0,
        0,    0,    0,    0,  956,    0,  961,  959,  951,    0,
      962,  956,  961,  967,    0,    0,    0,  969,  966,    0,
      966,  974,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  961,  985,  985,  985,  985,  986,  986,  986,

      986,  987,  987,  987,  987,  988,    0,  988,  988,  989,
      989,  989,  989,  990,    0,  990,  990,  991,  991,  993,
      993,  994,  994,  995,  995,  996,  996,  997,  997,  998,
      998,  999,  999, 1000, 1000, 1001, 1001, 1002, 1002, 1003,
        0, 1003, 1003, 1004, 1004, 1005, 1005, 1006, 1006, 1007,
     1007, 1008, 1008, 1009, 1009, 1010, 1010, 1011, 1011, 1012,
     1012, 1013, 1013, 1014, 1014, 1015, 1015, 1016, 1016, 1017,
     1017, 1018, 1018, 1019, 1019, 1020, 1020, 1021, 1021, 1022,
     1022, 1023, 1023, 1024, 1024, 1025, 1025, 1026, 1026, 1027,
     1027, 1028, 1028, 1029, 1029, 1031, 1031, 1032, 1032, 1033,

     1033, 1035, 1035, 1036, 1036, 1037, 1037, 1040, 1040, 1041,
     1041, 1042, 1042, 1044,    0, 1044, 1044, 1045,    0, 1045,
     1045, 1046, 1046, 1047, 1047, 1050,    0, 1050, 1050, 1051,
        0, 1051, 1051, 1052, 1052, 1053, 1053, 1054, 1054, 1055,
     1055, 1056, 1056, 1058, 1058, 1059, 1059, 1060, 1060, 1061,
     1061, 1062, 1062, 1064, 1064, 1065, 1065, 1066, 1066, 1068,
     1068, 1070, 1070, 1071, 1071, 1072, 1072, 1074, 1074,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,

      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[119] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 2084 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 2189 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 985 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5770 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 59 "SrvLexer.l"
{ return SrvParser::LOGCOLORS_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 61 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 64 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 69 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::NEXT_HOP_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::ROUTE_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::INFINITE_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::ACCEPT_UNKNOWN_FQDN_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::FQDN_DDNS_ADDRESS_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::DDNS_PROTOCOL_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::DDNS_TIMEOUT_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 108 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::REMOTE_AUTOCONF_NEIGHBORS_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::AFTR_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ return SrvParser::BULKLQ_ACCEPT_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ return SrvParser::BULKLQ_TCPPORT_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ return SrvParser::BULKLQ_MAX_CONNS_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ return SrvParser::BULKLQ_TIMEOUT_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 122 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 125 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 126 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 130 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 131 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
{ return SrvParser::CLIENT_CLASS_; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 134 "SrvLexer.l"
{ return SrvParser::MATCH_IF_; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 135 "SrvLexer.l"
{ return SrvParser::EQ_; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 136 "SrvLexer.l"
{ return SrvParser::AND_; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 137 "SrvLexer.l"
{ return SrvParser::OR_; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 138 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 139 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_DATA_; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 140 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_EN_; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 141 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_DATA_; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 142 "SrvLexer.l"
{ return SrvParser::ALLOW_; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 143 "SrvLexer.l"
{ return SrvParser::DENY_; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 144 "SrvLexer.l"
{ return SrvParser::SUBSTRING_; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 145 "SrvLexer.l"
{ return SrvParser::CONTAIN_; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 146 "SrvLexer.l"
{ return SrvParser::STRING_KEYWORD_; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 147 "SrvLexer.l"
{ return SrvParser::ADDRESS_LIST_; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 150 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 151 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 152 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 153 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 155 "SrvLexer.l"
;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 157 "SrvLexer.l"
;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 159 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 164 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 165 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 166 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 104:
YY_RULE_SETUP
#line 173 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 182 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 191 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 200 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 209 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 218 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 227 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 239 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 246 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
	 ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
	 ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 267 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
	yytext[1]='0'; //if odd then no-meaning zero at the beginning
	len = strlen(yytext)-1;
	ptr = yytext+1;
    } else {
	len = strlen(yytext)-2;
	ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
	yylval.duidval.duid[i>>1]<<=4;
	if (!isxdigit(ptr[i])) {
	     Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
	     YYABORT;
	}
	if (isalpha(ptr[i])) {
	    yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
	} else {
	    yylval.duidval.duid[i>>1]|=ptr[i]-'0';
	}
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 299 "SrvLexer.l"
{
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   // Log(Crit) << "#### Detected [" << yytext << "] as DUID [len=" << len << "]" << LogEnd;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
	x = (toupper(*pos)-'A' + 10);
      else
	x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))
	x += (toupper(*(pos+1))-'A' + 10);
      else
	x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }

   return SrvParser::DUID_;
}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 327 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd;
      YYABORT;
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 337 "SrvLexer.l"
{
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) {
	Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd;
	YYABORT;
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 346 "SrvLexer.l"
{ return yytext[0]; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 349 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 3033 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 985 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 985 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 984);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 349 "SrvLexer.l"



