#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 70
#define YY_END_OF_BUFFER 71
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[616] =
    {   0,
        1,    1,    0,    0,    0,    0,   71,   69,    2,    1,
        1,   69,   52,   69,   69,   68,   68,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   56,   56,   70,    1,
        1,    1,    0,   64,   52,    0,   64,   54,   53,   68,
        0,    0,   67,    0,   61,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   49,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   15,   16,   65,   65,   65,   65,   65,
       65,   65,   65,   55,   53,   68,    0,    0,   60,   66,

       59,   59,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   48,   68,    0,    0,
        0,   58,   58,    0,   59,    0,   59,   65,   65,   45,
       65,   65,   65,   65,   65,   65,   65,   34,   65,   65,
       65,   65,    0,   65,   65,   65,   65,   65,   65,   21,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   50,
       65,   65,   65,   65,   68,    0,    0,    0,    0,   58,
        0,   58,    0,   59,   59,   59,   59,   65,   65,   65,

        4,   65,   65,   65,   65,   51,    3,   65,   65,   65,
       65,   65,    0,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,    7,   22,   65,   65,   65,   65,   65,
       65,   65,   65,   65,    0,    0,    0,    0,   58,   58,
       58,   58,    0,   59,   59,   59,    0,   59,   65,   65,
       65,   65,   65,   65,   29,   65,   65,   65,   65,   65,
       65,    0,    0,   65,   65,   65,   27,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,    0,    0,    0,   58,   58,   58,    0,   58,
        0,    0,   59,   59,   59,   59,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,    0,    0,
       65,   65,   65,   65,   65,   43,   65,   65,   65,   65,
       65,   65,   65,   65,   19,   65,   65,   65,    0,    0,
        0,    0,    0,   58,   58,   58,   58,    0,   59,   59,
       59,    0,   59,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   39,   65,   11,    9,    0,    0,   65,   65,
       65,   41,   65,   65,   65,   65,   65,   65,   65,   65,
        5,   65,   65,   65,   12,    0,    0,    0,   58,   58,
       58,    0,   58,   63,   59,   59,   59,   59,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   10,    0,    0,

       65,   65,   65,   42,   65,   65,   65,   65,   65,   65,
        6,   31,   65,   65,    0,    0,    0,   62,   58,   58,
       58,   58,   59,   59,   59,    0,   59,   65,   40,   65,
       65,   65,   65,   28,   65,   65,    0,    0,   36,   35,
       30,   65,   20,   65,   65,   33,   32,   65,   65,    0,
        0,   58,   58,   58,    0,   58,   59,   59,   59,   59,
       13,   65,   65,   65,   46,   65,   65,   38,   37,   65,
       65,   65,   65,   44,    0,    0,    0,   58,   58,   58,
       58,   59,   59,   59,    0,   59,   65,   65,   65,   65,
        8,   65,   23,   65,   65,    0,    0,   58,   58,   58,

        0,   58,   59,   59,   59,   59,   65,   65,   65,   65,
       65,   65,   65,    0,    0,    0,   58,   58,   58,   58,
       59,   59,   59,    0,   59,   65,   65,   65,   65,   65,
       14,   18,    0,   57,   60,   58,   58,   58,    0,   58,
       59,   59,   59,   59,   25,   65,   65,   24,   65,    0,
       57,    0,   58,   58,   58,   58,   58,   59,   59,   59,
        0,   59,   26,   47,   65,   57,   60,   58,    0,   58,
       58,   58,   58,   59,   59,   59,   17,   57,   58,   58,
       58,   58,   59,   59,   59,   58,   58,    0,   58,   58,
       59,   58,   58,   59,   58,   58,    0,   58,   58,   58,

       58,    0,   58,   58,   58,   58,    0,   58,   58,   58,
       58,    0,   58,   58,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   16,   16,   16,   16,   16,   16,   17,    1,    1,
        1,    1,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
        1,    1,    1,    1,    1,    1,   18,   19,   20,   21,

       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[44] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        3,    1,    4,    4,    4,    4,    5,    4,    4,    4,
        4,    4,    4,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[695] =
    {   0,
        0,    0, 1974, 1973,    0,    0, 1980, 1983, 1983,   41,
       43, 1974,    0, 1971,   40,   40, 1936, 1959,   69,   95,
       46,   40,   33, 1958,  102,  104,  105,   60,  106,   51,
      109,  130,  112,   78,  107,   57, 1983, 1962, 1983,   46,
       94,   98, 1968, 1983,    0, 1965, 1964, 1983,    0,  153,
     1953,   90, 1983,    0,  136, 1952,  166, 1948, 1950,  123,
     1946,  136,  140,   63,  160, 1936,  111,  141,  146,   53,
      174,  175, 1947,  176,  177,  185,  180,  179,  182,  189,
      186,  188,  190, 1946, 1945,  200,  183,  202,  203,  205,
      206,  207,  208, 1983,    0,  232,  217, 1944,  245,    0,

      251,  264,  268, 1938,  210, 1934,  259,  219,  221,  246,
      275,  268,  277,  279,  280,  281,  290,  296,  299,  284,
      294,  295,  138,  300,  298,  301,  304,  312,  308,  311,
      313,  315,  316,  317,  321,  211, 1941,  333,  346, 1940,
     1939,  352,  365,  369,  375,  386,  392,  396, 1922, 1937,
      403,  387,  396,  404,  405,  407,  409, 1936,  412,  411,
      327,  413, 1942,  415,  418,  420,  421,  431,  428, 1934,
      439,  438,  445,  422,  441,  449,  450,  440,  458, 1933,
      323,  456,  454,  464,  474, 1932, 1931, 1930,  479,  485,
      496,  502,  508,  514,  527,  533,  546, 1929,  340,  466,

      548,  546,  547,  462,  549, 1928,  557,  497,  551,  553,
      465,  554,  552,  559,  564,  565,  561,  572,  562,  568,
      577,  585,  579, 1927, 1926,  581,  582,  580,  588,  584,
      509,  593,  590,  594, 1925, 1924, 1923,  606,  617,  630,
      636,  649,  653,  659, 1922,  666,  677,  683,  661,  606,
      631,  685,  690,  591, 1921,  684,  686,  688,  689,  597,
      691, 1905, 1914,  692,  694,  695, 1918,  696,  693,  698,
      607,  699,  714,  703,  706,  717,  708,  718,  709,  719,
      728,  723, 1917, 1916,  738,  744, 1915,  751,  762,  768,
      774,  780,  786,  799,  805,  818,  813,  730,  725,  781,

      818,  800,  819,  821,  825,  829,  831,  833, 1901, 1895,
      839,  823,  827,  835,  837, 1912,  842,  843,  841,  847,
      850,  851,  852,  853, 1911,  855,  859,  861, 1910, 1909,
     1908,  886,  892,  898,  911,  917,  930,  877,  936, 1907,
      943,  954,  960,  863,  720,  869,  865,  868,  955,  960,
      938,  961, 1906,  763, 1905, 1904, 1902, 1880,  963,  964,
      968, 1901,  967,  978,  974,  912,  976,  980,  979,  887,
     1900,  981,  985,  982, 1899, 1898, 1897,  996, 1003, 1896,
     1010, 1021, 1027, 1031, 1037, 1050, 1056, 1069, 1064, 1069,
      990, 1051, 1070, 1072,  987, 1080, 1084, 1895, 1885, 1888,

     1078, 1079, 1081, 1892, 1082, 1083, 1032, 1087, 1089, 1090,
     1891, 1890, 1093, 1095, 1889, 1888, 1887, 1108, 1115, 1128,
     1134, 1147, 1153, 1886, 1160, 1171, 1177, 1085, 1885, 1172,
     1155, 1177, 1178, 1884, 1179, 1181, 1869, 1864, 1881, 1880,
     1879, 1185, 1878, 1186, 1182, 1877, 1876, 1188, 1189, 1875,
     1874, 1202, 1873, 1215, 1207, 1228, 1234, 1247, 1253, 1266,
     1872, 1261, 1267, 1275, 1871, 1269, 1193, 1983, 1983, 1123,
     1270, 1271, 1272, 1870, 1869, 1868, 1867, 1297, 1290, 1310,
     1323, 1329, 1866, 1336, 1347, 1353, 1101, 1273, 1210, 1276,
     1865, 1348, 1864, 1354, 1292, 1863, 1862, 1361, 1861, 1381,

     1366, 1372, 1394, 1407, 1413, 1426, 1223, 1282, 1421, 1389,
     1356, 1426, 1367, 1860, 1859, 1858, 1452, 1434, 1465, 1440,
     1478, 1857, 1485, 1444, 1498, 1493, 1480, 1500, 1502, 1435,
     1856, 1855, 1854, 1853,    0, 1512, 1852, 1519, 1530, 1536,
     1542, 1555, 1561, 1574, 1851, 1569, 1578, 1850, 1318, 1849,
     1848, 1847, 1846, 1585, 1598, 1604, 1617, 1623, 1845, 1630,
        0, 1643, 1749, 1736, 1599, 1715, 1983, 1708,    0, 1649,
     1702, 1656, 1669, 1675, 1688,    0, 1694, 1689, 1683, 1670,
     1694, 1707, 1713, 1664,    0, 1656, 1651,    0, 1720, 1983,
        0, 1644, 1638, 1983, 1625, 1618,    0, 1612, 1593, 1580,

     1577,    0, 1576, 1556, 1550, 1537,    0, 1531, 1514, 1505,
     1504,    0, 1503, 1473, 1983, 1736, 1741, 1746, 1751, 1756,
     1759, 1764, 1766, 1473, 1460, 1768, 1440, 1770, 1772, 1415,
     1774, 1776, 1386, 1778, 1780, 1337, 1782, 1784, 1293, 1786,
     1788, 1261, 1790, 1792, 1220, 1794, 1796, 1155, 1798, 1800,
     1104, 1802, 1804, 1035, 1806, 1808, 1009, 1810, 1812,  944,
     1814, 1816,  875,  873, 1818, 1820,  782, 1822, 1824,  565,
      535, 1826, 1828,  476, 1830,  474,  445, 1832, 1834, 1836,
      443, 1838, 1840, 1842,  383, 1844, 1846, 1848,  222, 1850,
     1852, 1854,   74, 1856

    } ;

static yyconst flex_int16_t yy_def[695] =
    {   0,
      615,    1,  616,  616,  617,  617,  615,  615,  615,  615,
      615,  618,  619,  620,  615,  615,   16,  615,  621,  621,
       20,   20,   20,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  615,  615,  615,  615,
      615,  615,  618,  615,  619,  620,  615,  615,  622,  615,
      623,   50,  615,  624,  625,  621,   20,   57,  621,  621,
       57,  621,  621,  621,  621,   57,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  615,  622,  615,   96,  626,  627,  624,

      615,  101,   57,  103,  621,  103,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  615,  138,  628,
      629,  615,  142,  615,  615,  630,  145,  103,  148,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  615,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  139,  139,  631,  632,  615,  615,
      633,  190,  615,  615,  194,  615,  196,  148,  621,  621,

      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  615,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  615,  634,  635,  615,  615,  239,
      615,  241,  615,  615,  615,  615,  636,  246,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  615,  615,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  637,  638,  615,  615,  615,  615,  639,  288,
      615,  615,  615,  293,  615,  295,  621,  621,  621,  621,

      621,  621,  621,  621,  621,  621,  621,  621,  615,  615,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  615,  640,
      641,  615,  615,  615,  334,  615,  336,  615,  615,  615,
      615,  642,  341,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  615,  615,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  643,  644,  615,  615,  615,
      615,  645,  381,  615,  615,  385,  615,  387,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  615,  615,

      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  615,  646,  647,  615,  615,  419,
      615,  421,  615,  615,  615,  648,  425,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  615,  615,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  649,
      650,  615,  615,  615,  651,  454,  615,  457,  615,  459,
      621,  621,  621,  621,  621,  621,  621,  615,  615,  621,
      621,  621,  621,  621,  615,  652,  653,  615,  478,  615,
      480,  615,  615,  615,  654,  484,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  655,  656,  615,  615,  615,

      657,  500,  615,  503,  615,  505,  621,  621,  621,  621,
      621,  621,  621,  615,  658,  659,  615,  517,  615,  519,
      615,  615,  615,  660,  523,  621,  621,  621,  621,  621,
      621,  621,  661,  662,  663,  615,  615,  615,  664,  538,
      615,  541,  615,  543,  621,  621,  621,  621,  621,  615,
      665,  615,  666,  615,  554,  615,  556,  615,  615,  615,
      667,  560,  621,  621,  621,  668,  615,  669,  670,  615,
      615,  615,  572,  615,  574,  671,  621,  615,  672,  673,
      615,  581,  615,  615,  674,  615,  675,  676,  615,  615,
      677,  678,  679,  615,  615,  680,  681,  682,  683,  615,

      684,  685,  686,  687,  615,  688,  689,  690,  691,  615,
      692,  693,  694,  615,    0,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615

    } ;

static yyconst flex_int16_t yy_nxt[2027] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   18,   19,   20,   21,
       22,   20,   23,   24,   24,   25,   24,   24,   26,   24,
       27,   28,   29,   24,   30,   31,   32,   33,   34,   35,
       24,   36,   24,   40,   41,   42,   41,   48,   40,   41,
       66,   49,   50,   50,   50,   50,   51,   52,   52,   52,
       52,   52,   52,   61,   53,   63,   67,  615,   79,  615,
       64,   65,   80,  615,   62,  116,  615,  557,   93,  615,
       54,   57,   57,   57,   57,   51,   57,   57,   58,   57,
       57,   57,   75,   59,  615,   90,   42,   41,  110,   91,

       40,   41,   97,   97,   97,   97,   60,   57,   57,   57,
       57,   51,   57,   57,   57,   57,   57,   57,  615,   59,
      615,  615,  615,  615,   68,  615,   76,  615,  615,   70,
       72,  113,   69,   81,   82,   71,   73,   77,   92,  615,
       78,   74,   89,   84,   85,   83,  615,   86,  101,  101,
      101,  101,  615,  107,  615,   87,  615,  615,  114,  105,
      171,  108,  615,  109,   88,   96,   96,   96,   96,   51,
       97,   97,   97,   97,   97,   97,  615,   53,  103,  103,
      103,  103,  115,  103,  103,  103,  103,  103,  103,  111,
      615,  615,  615,  615,  121,  615,  615,  117,  615,  615,

      123,  615,  615,  127,  615,  615,  615,  129,  119,  130,
      118,  122,  131,  120,  124,  125,  615,  126,  615,  615,
      128,  615,  615,  615,  615,  609,  615,  615,  133,  139,
      139,  139,  139,  134,  150,  615,  135,  615,  184,  132,
      153,  136,  154,  137,  138,  138,  138,  138,   51,  139,
      139,  139,  139,  139,  139,  155,   53,  142,  142,  142,
      142,  144,  615,  145,  145,  145,  145,  146,  147,  147,
      147,  147,  147,  147,  615,  615,  147,  147,  147,  147,
      148,  148,  148,  148,  615,  148,  148,  148,  148,  148,
      148,  615,  156,  615,  152,  615,  615,  615,  159,  162,

      615,  160,  161,  157,  163,  164,  615,  158,  165,  166,
      615,  615,  615,  167,  615,  615,  615,  615,  174,  173,
      615,  176,  168,  170,  615,  172,  169,  615,  615,  615,
      178,  615,  615,  615,  179,  181,  180,  615,  175,  615,
      231,  183,  182,  615,  177,  185,  185,  185,  185,   51,
      186,  186,  186,  186,  186,  186,  615,   53,  186,  186,
      186,  186,  189,  209,  190,  190,  190,  190,  191,  192,
      192,  192,  192,  192,  192,  615,  249,  192,  192,  192,
      192,  193,  193,  193,  193,  144,  604,  194,  194,  194,
      194,  146,  195,  195,  195,  195,  195,  195,  196,  196,

      196,  196,  615,  615,  195,  195,  195,  195,  198,  198,
      198,  198,  615,  198,  198,  198,  198,  198,  198,  615,
      615,  615,  201,  615,  200,  615,  202,  615,  615,  615,
      206,  615,  205,  207,  615,  214,  615,  615,  615,  203,
      204,  210,  211,  212,  615,  208,  599,  615,  594,  218,
      215,  217,  219,  216,  615,  615,  615,  615,  222,  220,
      221,  615,  225,  224,  223,  615,  615,  230,  229,  226,
      615,  228,  615,  234,  615,  250,  232,  593,  615,  591,
      615,  615,  615,  254,  227,  233,  185,  185,  185,  185,
      615,  238,  238,  238,  238,  189,  260,  239,  239,  239,

      239,  191,  240,  240,  240,  240,  240,  240,  241,  241,
      241,  241,  615,  615,  240,  240,  240,  240,  243,  257,
      193,  193,  193,  193,  144,  615,  244,  244,  244,  244,
      146,  245,  245,  245,  245,  245,  245,  615,  585,  245,
      245,  245,  245,  144,  279,  246,  246,  246,  246,  247,
      248,  248,  248,  248,  248,  248,  615,  251,  248,  248,
      248,  248,  615,  615,  615,  615,  256,  615,  580,  615,
      615,  261,  262,  615,  259,  615,  258,  615,  615,  255,
      615,  615,  252,  253,  615,  265,  266,  263,  615,  268,
      264,  267,  269,  615,  272,  615,  615,  615,  615,  270,

      615,  615,  280,  275,  615,  277,  615,  615,  276,  615,
      615,  271,  274,  615,  282,  273,  285,  307,  238,  238,
      238,  238,  615,  615,  281,  302,  278,  189,  317,  286,
      286,  286,  286,  191,  287,  287,  287,  287,  287,  287,
      615,  298,  287,  287,  287,  287,  189,  615,  288,  288,
      288,  288,  289,  290,  290,  290,  290,  290,  290,  615,
      299,  290,  290,  290,  290,  291,  291,  291,  291,  144,
      297,  292,  292,  292,  292,  146,  144,  615,  293,  293,
      293,  293,  247,  294,  294,  294,  294,  294,  294,  295,
      295,  295,  295,  615,  300,  294,  294,  294,  294,  301,

      615,  615,  615,  304,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  303,  615,  615,  315,  305,  318,  615,
      308,  311,  615,  319,  615,  615,  316,  306,  312,  313,
      615,  314,  320,  615,  615,  615,  615,  327,  322,  615,
      321,  615,  346,  323,  615,  325,  615,  326,  328,  324,
      332,  332,  332,  332,  189,  345,  333,  333,  333,  333,
      191,  189,  390,  334,  334,  334,  334,  289,  335,  335,
      335,  335,  335,  335,  336,  336,  336,  336,  615,  615,
      335,  335,  335,  335,  338,  576,  291,  291,  291,  291,
      144,  398,  292,  292,  292,  292,  144,  615,  339,  339,

      339,  339,  247,  340,  340,  340,  340,  340,  340,  615,
      347,  340,  340,  340,  340,  144,  615,  341,  341,  341,
      341,  342,  343,  343,  343,  343,  343,  343,  615,  615,
      343,  343,  343,  343,  615,  615,  351,  615,  350,  615,
      352,  615,  348,  615,  344,  615,  353,  615,  349,  615,
      354,  615,  355,  615,  356,  615,  359,  615,  615,  615,
      367,  360,  364,  615,  368,  361,  615,  615,  615,  615,
      362,  615,  365,  363,  366,  615,  557,  615,  553,  615,
      373,  615,  392,  372,  615,  615,  370,  371,  369,  384,
      384,  384,  384,  389,  374,  375,  378,  393,  332,  332,

      332,  332,  189,  615,  333,  333,  333,  333,  189,  391,
      379,  379,  379,  379,  289,  380,  380,  380,  380,  380,
      380,  615,  411,  380,  380,  380,  380,  189,  615,  381,
      381,  381,  381,  382,  383,  383,  383,  383,  383,  383,
      615,  407,  383,  383,  383,  383,  144,  544,  292,  292,
      292,  292,  247,  144,  615,  385,  385,  385,  385,  342,
      386,  386,  386,  386,  386,  386,  387,  387,  387,  387,
      615,  615,  386,  386,  386,  386,  615,  615,  396,  615,
      615,  395,  397,  615,  615,  402,  394,  405,  401,  403,
      615,  404,  615,  406,  615,  615,  615,  615,  615,  430,

      410,  615,  412,  615,  408,  409,  615,  413,  418,  418,
      418,  418,  520,  189,  414,  333,  333,  333,  333,  289,
      189,  434,  419,  419,  419,  419,  382,  420,  420,  420,
      420,  420,  420,  421,  421,  421,  421,  615,  506,  420,
      420,  420,  420,  384,  384,  384,  384,  144,  615,  423,
      423,  423,  423,  342,  424,  424,  424,  424,  424,  424,
      615,  444,  424,  424,  424,  424,  144,  615,  425,  425,
      425,  425,  426,  427,  427,  427,  427,  427,  427,  615,
      615,  427,  427,  427,  427,  615,  615,  432,  615,  435,
      429,  431,  428,  436,  615,  615,  615,  615,  615,  615,

      615,  615,  433,  615,  443,  615,  615,  481,  439,  615,
      442,  615,  445,  440,  448,  441,  449,  615,  507,  446,
      418,  418,  418,  418,  447,  189,  461,  452,  452,  452,
      452,  382,  453,  453,  453,  453,  453,  453,  615,  615,
      453,  453,  453,  453,  189,  492,  454,  454,  454,  454,
      455,  456,  456,  456,  456,  456,  456,  615,  460,  456,
      456,  456,  456,  144,  463,  292,  292,  292,  292,  342,
      144,  615,  457,  457,  457,  457,  426,  458,  458,  458,
      458,  458,  458,  459,  459,  459,  459,  615,  615,  458,
      458,  458,  458,  615,  615,  615,  464,  615,  615,  465,

      462,  615,  615,  472,  615,  615,  467,  466,  474,  615,
      470,  471,  189,  491,  333,  333,  333,  333,  382,  480,
      480,  480,  480,  422,  473,  189,  615,  478,  478,  478,
      478,  455,  479,  479,  479,  479,  479,  479,  615,  615,
      479,  479,  479,  479,  144,  509,  482,  482,  482,  482,
      426,  483,  483,  483,  483,  483,  483,  615,  526,  483,
      483,  483,  483,  144,  388,  484,  484,  484,  484,  485,
      486,  486,  486,  486,  486,  486,  615,  615,  486,  486,
      486,  486,  487,  615,  489,  615,  615,  615,  615,  615,
      490,  615,  615,  510,  508,  488,  337,  495,  615,  527,

      615,  494,  499,  499,  499,  499,  493,  189,  615,  498,
      498,  498,  498,  455,  499,  499,  499,  499,  499,  499,
      189,  513,  500,  500,  500,  500,  501,  502,  502,  502,
      502,  502,  502,  615,  615,  502,  502,  502,  502,  144,
      296,  292,  292,  292,  292,  426,  144,  565,  503,  503,
      503,  503,  485,  504,  504,  504,  504,  504,  504,  505,
      505,  505,  505,  615,  615,  504,  504,  504,  504,  511,
      615,  189,  615,  333,  333,  333,  333,  455,  519,  519,
      519,  519,  615,  615,  518,  518,  518,  518,  532,  242,
      512,  189,  530,  517,  517,  517,  517,  501,  518,  518,

      518,  518,  518,  518,  144,  615,  521,  521,  521,  521,
      485,  522,  522,  522,  522,  522,  522,  615,  197,  522,
      522,  522,  522,  144,  529,  523,  523,  523,  523,  524,
      525,  525,  525,  525,  525,  525,  615,  615,  525,  525,
      525,  525,  615,  143,  615,  528,  537,  537,  537,  537,
      615,  615,  540,  540,  540,  540,  543,  543,  543,  543,
      549,  531,  189,  102,  536,  536,  536,  536,  501,  537,
      537,  537,  537,  537,  537,  189,  100,  538,  538,  538,
      538,  539,  540,  540,  540,  540,  540,  540,  144,  612,
      292,  292,  292,  292,  485,  144,  615,  541,  541,  541,

      541,  524,  542,  542,  542,  542,  542,  542,  615,  615,
      542,  542,  542,  542,  545,  546,  615,  547,  615,  612,
      612,  607,  189,  548,  333,  333,  333,  333,  501,  189,
      612,  554,  554,  554,  554,  539,  555,  555,  555,  555,
      555,  555,  556,  556,  556,  556,  615,  607,  555,  555,
      555,  555,  144,  607,  558,  558,  558,  558,  524,  559,
      559,  559,  559,  559,  559,  615,  602,  559,  559,  559,
      559,  144,  607,  560,  560,  560,  560,  561,  562,  562,
      562,  562,  562,  562,  615,  615,  562,  562,  562,  562,
      563,  564,  602,  602,  615,  189,  597,  570,  570,  570,

      570,  539,  571,  571,  571,  571,  571,  571,  615,  602,
      571,  571,  571,  571,  189,  615,  572,  572,  572,  572,
      577,  573,  573,  573,  573,  573,  573,  615,  597,  573,
      573,  573,  573,  144,  597,  292,  292,  292,  292,  524,
      144,  588,  574,  574,  574,  574,  561,  575,  575,  575,
      575,  575,  575,  615,  597,  575,  575,  575,  575,  189,
      588,  333,  333,  333,  333,  539,  189,  588,  581,  581,
      581,  581,  569,  582,  582,  582,  582,  582,  582,  615,
      561,  582,  582,  582,  582,  144,  588,  583,  583,  583,
      583,  561,  584,  584,  584,  584,  584,  584,  615,  569,

      584,  584,  584,  584,  189,  552,  589,  589,  589,  589,
      615,  590,  590,  590,  590,  590,  590,  615,  539,  590,
      590,  590,  590,  144,  569,  292,  292,  292,  292,  561,
      189,  552,  333,  333,  333,  333,   37,   37,   37,   37,
       37,   39,   39,   39,   39,   39,   43,   43,   43,   43,
       43,   45,  615,   45,   45,   45,   46,   46,   46,   46,
       46,   56,   56,   56,   95,  615,   95,   95,   95,   98,
       98,  140,  140,  187,  187,  188,  188,  235,  235,  236,
      236,  283,  283,  284,  284,  329,  329,  330,  330,  376,
      376,  377,  377,  415,  415,  416,  416,  450,  450,  451,

      451,  475,  475,  476,  476,  496,  496,  497,  497,  514,
      514,  515,  515,  533,  533,  534,  534,  550,  550,  551,
      551,  566,  566,  568,  568,  578,  578,  579,  579,  586,
      586,  587,  587,  592,  592,  595,  595,  596,  596,  598,
      598,  600,  600,  601,  601,  603,  603,  605,  605,  606,
      606,  608,  608,  610,  610,  611,  611,  613,  613,  614,
      614,  524,  569,  567,  552,  516,  615,  615,  501,  552,
      516,  615,  615,  485,  535,  516,  477,  455,  516,  477,
      615,  615,  426,   99,  477,  417,  615,  615,  615,  382,
      477,  417,  615,  615,  615,  615,  615,  615,  469,  468,

      615,  615,  342,   99,  417,  331,  615,  615,  615,  438,
      437,  615,  289,  417,  331,  615,  615,  615,  400,  399,
      615,  615,  615,  247,   99,  331,  237,  615,  615,  358,
      357,  191,  331,  237,  615,  310,  309,  615,  146,   99,
      237,  141,  615,  615,  615,  615,  237,  141,  615,  615,
      615,  213,  615,  615,  199,   99,  141,  615,  151,  149,
      141,  615,  615,  615,  112,  106,  615,  104,  615,   99,
       46,   47,   44,   94,  615,   55,  615,   47,   44,  615,
       38,   38,    7,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,

      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615
    } ;

static yyconst flex_int16_t yy_chk[2027] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   10,   10,   11,   11,   15,   40,   40,
       23,   15,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   21,   16,   22,   23,   30,   30,   70,
       22,   22,   30,   36,   21,   70,   28,  693,   36,   64,
       16,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   28,   19,   34,   34,   41,   41,   64,   34,

       42,   42,   52,   52,   52,   52,   19,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   25,   20,
       26,   27,   29,   35,   25,   31,   29,   67,   33,   26,
       27,   67,   25,   31,   31,   26,   27,   29,   35,   60,
       29,   27,   33,   32,   32,   31,   32,   32,   55,   55,
       55,   55,   62,   62,  123,   32,   63,   68,   68,   60,
      123,   62,   69,   63,   32,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   65,   50,   57,   57,
       57,   57,   69,   57,   57,   57,   57,   57,   57,   65,
       71,   72,   74,   75,   76,   78,   77,   71,   79,   87,

       78,   76,   81,   81,   82,   80,   83,   83,   74,   86,
       72,   77,   87,   75,   79,   80,   86,   80,   88,   89,
       82,   90,   91,   92,   93,  689,  105,  136,   89,   97,
       97,   97,   97,   90,  105,  108,   91,  109,  136,   88,
      108,   92,  109,   93,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,  110,   96,   99,   99,   99,
       99,  101,  110,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  102,  107,  102,  102,  102,  102,
      103,  103,  103,  103,  112,  103,  103,  103,  103,  103,
      103,  111,  111,  113,  107,  114,  115,  116,  114,  117,

      120,  115,  116,  112,  118,  118,  117,  113,  119,  120,
      121,  122,  118,  121,  125,  119,  124,  126,  126,  125,
      127,  128,  121,  122,  129,  124,  121,  130,  128,  131,
      130,  132,  133,  134,  131,  133,  132,  135,  127,  181,
      181,  135,  134,  161,  129,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  199,  138,  139,  139,
      139,  139,  142,  161,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  143,  199,  143,  143,  143,
      143,  144,  144,  144,  144,  145,  685,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  146,  146,

      146,  146,  147,  152,  147,  147,  147,  147,  148,  148,
      148,  148,  153,  148,  148,  148,  148,  148,  148,  151,
      154,  155,  152,  156,  151,  157,  153,  160,  159,  162,
      157,  164,  156,  159,  165,  164,  166,  167,  174,  154,
      155,  162,  162,  162,  169,  160,  681,  168,  677,  167,
      164,  166,  168,  165,  172,  171,  178,  175,  172,  169,
      171,  173,  175,  174,  173,  176,  177,  179,  178,  176,
      183,  177,  182,  184,  179,  200,  182,  676,  204,  674,
      184,  211,  200,  204,  176,  183,  185,  185,  185,  185,
      185,  189,  189,  189,  189,  190,  211,  190,  190,  190,

      190,  190,  190,  190,  190,  190,  190,  190,  191,  191,
      191,  191,  192,  208,  192,  192,  192,  192,  193,  208,
      193,  193,  193,  193,  194,  231,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  195,  671,  195,
      195,  195,  195,  196,  231,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  197,  201,  197,  197,
      197,  197,  202,  203,  201,  205,  207,  209,  670,  210,
      212,  212,  213,  207,  210,  214,  209,  217,  219,  205,
      215,  216,  202,  203,  220,  215,  216,  213,  218,  218,
      214,  217,  219,  221,  222,  223,  228,  226,  227,  220,

      230,  222,  232,  227,  229,  229,  233,  254,  228,  232,
      234,  221,  226,  260,  234,  223,  238,  260,  238,  238,
      238,  238,  250,  271,  233,  254,  230,  239,  271,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      240,  250,  240,  240,  240,  240,  241,  251,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  242,
      251,  242,  242,  242,  242,  243,  243,  243,  243,  244,
      249,  244,  244,  244,  244,  244,  246,  249,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  247,
      247,  247,  247,  248,  252,  248,  248,  248,  248,  253,

      256,  252,  257,  257,  258,  259,  253,  261,  264,  269,
      265,  266,  268,  256,  270,  272,  269,  258,  272,  274,
      261,  264,  275,  273,  277,  279,  270,  259,  265,  266,
      273,  268,  274,  276,  278,  280,  345,  281,  276,  282,
      275,  299,  299,  277,  281,  279,  298,  280,  282,  278,
      285,  285,  285,  285,  286,  298,  286,  286,  286,  286,
      286,  288,  345,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  289,  289,  289,  289,  290,  354,
      290,  290,  290,  290,  291,  667,  291,  291,  291,  291,
      292,  354,  292,  292,  292,  292,  293,  300,  293,  293,

      293,  293,  293,  293,  293,  293,  293,  293,  293,  294,
      300,  294,  294,  294,  294,  295,  302,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  296,  297,
      296,  296,  296,  296,  301,  303,  303,  304,  302,  312,
      304,  305,  301,  313,  297,  306,  305,  307,  301,  308,
      306,  314,  307,  315,  308,  311,  311,  319,  317,  318,
      319,  312,  317,  320,  320,  313,  321,  322,  323,  324,
      314,  326,  317,  315,  318,  327,  664,  328,  663,  344,
      326,  347,  347,  324,  348,  346,  322,  323,  321,  338,
      338,  338,  338,  344,  327,  328,  332,  348,  332,  332,

      332,  332,  333,  370,  333,  333,  333,  333,  334,  346,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  335,  370,  335,  335,  335,  335,  336,  366,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      337,  366,  337,  337,  337,  337,  339,  660,  339,  339,
      339,  339,  339,  341,  351,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  342,  342,  342,  342,
      343,  349,  343,  343,  343,  343,  350,  352,  351,  359,
      360,  350,  352,  363,  361,  360,  349,  364,  359,  361,
      365,  363,  367,  365,  364,  369,  368,  372,  374,  391,

      369,  373,  372,  395,  367,  368,  391,  373,  378,  378,
      378,  378,  657,  379,  374,  379,  379,  379,  379,  379,
      381,  395,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  382,  382,  382,  382,  383,  654,  383,
      383,  383,  383,  384,  384,  384,  384,  385,  407,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      386,  407,  386,  386,  386,  386,  387,  392,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  388,
      389,  388,  388,  388,  388,  390,  393,  393,  394,  396,
      390,  392,  389,  397,  401,  402,  396,  403,  405,  406,

      397,  428,  394,  408,  406,  409,  410,  651,  401,  413,
      405,  414,  408,  402,  413,  403,  414,  487,  487,  409,
      418,  418,  418,  418,  410,  419,  428,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  420,  470,
      420,  420,  420,  420,  421,  470,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  422,  648,  422,
      422,  422,  422,  423,  431,  423,  423,  423,  423,  423,
      425,  431,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  426,  426,  426,  426,  427,  430,  427,
      427,  427,  427,  432,  433,  435,  432,  436,  445,  433,

      430,  442,  444,  445,  448,  449,  436,  435,  449,  467,
      442,  444,  452,  467,  452,  452,  452,  452,  452,  455,
      455,  455,  455,  645,  448,  454,  489,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  456,  507,
      456,  456,  456,  456,  457,  489,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  458,  507,  458,
      458,  458,  458,  459,  642,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  460,  462,  460,  460,
      460,  460,  462,  463,  464,  466,  471,  472,  473,  488,
      466,  464,  490,  490,  488,  463,  639,  473,  508,  508,

      479,  472,  479,  479,  479,  479,  471,  478,  495,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      480,  495,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  481,  549,  481,  481,  481,  481,  482,
      636,  482,  482,  482,  482,  482,  484,  549,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  485,
      485,  485,  485,  486,  492,  486,  486,  486,  486,  492,
      494,  498,  511,  498,  498,  498,  498,  498,  501,  501,
      501,  501,  502,  513,  502,  502,  502,  502,  513,  633,
      494,  500,  511,  500,  500,  500,  500,  500,  500,  500,

      500,  500,  500,  500,  503,  510,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  504,  630,  504,
      504,  504,  504,  505,  510,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  506,  509,  506,  506,
      506,  506,  512,  627,  518,  509,  518,  518,  518,  518,
      520,  530,  520,  520,  520,  520,  524,  524,  524,  524,
      530,  512,  517,  625,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  519,  624,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  521,  614,
      521,  521,  521,  521,  521,  523,  527,  523,  523,  523,

      523,  523,  523,  523,  523,  523,  523,  523,  525,  526,
      525,  525,  525,  525,  526,  527,  528,  528,  529,  613,
      611,  610,  536,  529,  536,  536,  536,  536,  536,  538,
      609,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  539,  539,  539,  539,  540,  608,  540,  540,
      540,  540,  541,  606,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  542,  605,  542,  542,  542,
      542,  543,  604,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  544,  546,  544,  544,  544,  544,
      546,  547,  603,  601,  547,  554,  600,  554,  554,  554,

      554,  554,  554,  554,  554,  554,  554,  554,  555,  599,
      555,  555,  555,  555,  556,  565,  556,  556,  556,  556,
      565,  556,  556,  556,  556,  556,  556,  557,  598,  557,
      557,  557,  557,  558,  596,  558,  558,  558,  558,  558,
      560,  595,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  560,  560,  562,  593,  562,  562,  562,  562,  570,
      592,  570,  570,  570,  570,  570,  572,  587,  572,  572,
      572,  572,  586,  572,  572,  572,  572,  572,  572,  573,
      584,  573,  573,  573,  573,  574,  580,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  575,  579,

      575,  575,  575,  575,  581,  578,  581,  581,  581,  581,
      577,  581,  581,  581,  581,  581,  581,  582,  571,  582,
      582,  582,  582,  583,  568,  583,  583,  583,  583,  583,
      589,  566,  589,  589,  589,  589,  616,  616,  616,  616,
      616,  617,  617,  617,  617,  617,  618,  618,  618,  618,
      618,  619,  564,  619,  619,  619,  620,  620,  620,  620,
      620,  621,  621,  621,  622,  563,  622,  622,  622,  623,
      623,  626,  626,  628,  628,  629,  629,  631,  631,  632,
      632,  634,  634,  635,  635,  637,  637,  638,  638,  640,
      640,  641,  641,  643,  643,  644,  644,  646,  646,  647,

      647,  649,  649,  650,  650,  652,  652,  653,  653,  655,
      655,  656,  656,  658,  658,  659,  659,  661,  661,  662,
      662,  665,  665,  666,  666,  668,  668,  669,  669,  672,
      672,  673,  673,  675,  675,  678,  678,  679,  679,  680,
      680,  682,  682,  683,  683,  684,  684,  686,  686,  687,
      687,  688,  688,  690,  690,  691,  691,  692,  692,  694,
      694,  559,  553,  552,  551,  550,  548,  545,  537,  534,
      533,  532,  531,  522,  516,  515,  514,  499,  497,  496,
      493,  491,  483,  477,  476,  475,  474,  465,  461,  453,
      451,  450,  447,  446,  443,  441,  440,  439,  438,  437,

      434,  429,  424,  417,  416,  415,  412,  411,  404,  400,
      399,  398,  380,  377,  376,  375,  371,  362,  358,  357,
      356,  355,  353,  340,  331,  330,  329,  325,  316,  310,
      309,  287,  284,  283,  267,  263,  262,  255,  245,  237,
      236,  235,  225,  224,  206,  198,  188,  187,  186,  180,
      170,  163,  158,  150,  149,  141,  140,  137,  106,  104,
       98,   85,   84,   73,   66,   61,   59,   58,   56,   51,
       47,   46,   43,   38,   24,   18,   17,   14,   12,    7,
        4,    3,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,

      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[71] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 1121 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 1226 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 616 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1983 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 55 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 59 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 61 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 62 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 64 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 69 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::AUTH_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno; 
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 115 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 116 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 57:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 141 "SrvLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 150 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 159 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 168 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 177 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 189 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 196 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 217 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd then no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 249 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd; 
      YYABORT; 
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 259 "SrvLexer.l"
{ 
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) { 
        Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd; 
        YYABORT; 
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 268 "SrvLexer.l"
{ return yytext[0]; } 
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 271 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 1804 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 616 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 616 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 615);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

yyFlexLexer::~yyFlexLexer()
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

	delete [] (yy_state_buf);
	yyfree((yy_start_stack)  );

}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 271 "SrvLexer.l"




