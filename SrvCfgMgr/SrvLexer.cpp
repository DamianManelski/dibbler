#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 106
#define YY_END_OF_BUFFER 107
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[889] =
    {   0,
        1,    1,    0,    0,    0,    0,  107,  105,    2,    1,
        1,  105,   87,  105,  105,  104,  104,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
       91,   91,  106,    1,    1,    1,    0,   99,   87,    0,
       99,   89,   88,  104,    0,    0,  103,    0,   96,   70,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,   84,  100,  100,
       72,  100,  100,  100,  100,  100,  100,  100,  100,  100,

       16,   17,  100,  100,  100,  100,  100,  100,  100,  100,
       90,   88,  104,    0,    0,    0,   95,  101,   94,   94,
      100,  100,  100,  100,   71,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,   83,  104,
        0,    0,    0,    0,   93,   93,    0,   94,    0,   94,
      100,  100,  100,  100,  100,  100,  100,  100,  100,   78,
      100,  100,  100,  100,   29,  100,  100,   40,  100,  100,

      100,  100,  100,  100,  100,    0,  100,  100,  100,  100,
      100,  100,   22,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,   85,  100,  100,  100,  100,
      104,    0,  102,    0,    0,    0,   93,    0,   93,    0,
       94,   94,   94,   94,  100,  100,  100,  100,   77,  100,
      100,    4,  100,  100,  100,  100,  100,  100,  100,   86,
      100,    3,  100,  100,  100,  100,  100,  100,  100,    0,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
        7,  100,   23,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,    0,    0,    0,    0,    0,   93,

       93,   93,   93,    0,   94,   94,   94,    0,   94,  100,
      100,  100,  100,  100,  100,  100,  100,   28,  100,  100,
      100,   35,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,    0,    0,  100,  100,  100,   33,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,   81,
      100,  100,  100,  100,  100,  100,  100,    0,    0,    0,
        0,   93,   93,   93,    0,   93,    0,    0,   94,   94,
       94,   94,  100,  100,   31,  100,  100,  100,  100,  100,
        0,  100,  100,   80,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,    0,    0,  100,

      100,  100,  100,  100,   50,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,   20,  100,  100,  100,  102,
        0,    0,    0,    0,    0,   93,   93,   93,   93,    0,
       94,   94,   94,    0,   94,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,    0,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,   46,
      100,   12,   10,   69,    0,    0,  100,  100,  100,   48,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
        5,  100,  100,  100,   13,    0,    0,    0,    0,   93,
       93,   93,    0,   93,   98,   94,   94,   94,   94,  100,

      100,  100,  100,  100,  100,  100,  100,  100,  100,    0,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,   11,    0,    0,  100,  100,  100,   49,
      100,  100,  100,  100,   30,  100,  100,    6,   79,   37,
      100,  100,    0,    0,    0,    0,   97,   93,   93,   93,
       93,   94,   94,   94,    0,   94,  100,  100,  100,  100,
      100,  100,  100,  100,   47,  100,    0,  100,  100,  100,
      100,  100,  100,   34,  100,  100,   32,  100,  100,  100,
        0,    0,   43,   42,   36,  100,   21,  100,  100,   39,
       38,  100,  100,  102,    0,    0,   93,   93,   93,    0,

       93,   94,   94,   94,   94,  100,   14,  100,   52,  100,
      100,  100,   57,  100,    0,  100,  100,  100,  100,   60,
      100,  100,  100,  100,  100,  100,   45,   44,  100,  100,
      100,  100,   51,    0,    0,    0,    0,   93,   93,   93,
       93,   94,   94,   94,    0,   94,  100,  100,   82,   59,
      100,  100,    0,   68,  100,  100,  100,   61,  100,   53,
      100,  100,    8,  100,   24,  100,  100,    0,    0,    0,
       93,   93,   93,    0,   93,   94,   94,   94,   94,  100,
      100,   58,  100,    0,  100,  100,  100,  100,  100,  100,
       55,  100,  100,  100,  100,  102,    0,    0,    0,   93,

       93,   93,   93,   94,   94,   94,    0,   94,  100,  100,
      100,    0,  100,  100,  100,  100,   54,  100,  100,  100,
       15,   19,    0,    0,   92,   95,   93,   93,   93,    0,
       93,   94,   94,   94,   94,  100,  100,   26,    0,    0,
      100,  100,  100,   62,  100,   25,  100,  100,    0,    0,
       92,    0,   93,   93,   93,   93,   93,   94,   94,   94,
        0,   94,  100,  100,    0,    0,   27,  100,  100,   63,
      100,  100,  100,  100,  100,  102,   92,   95,   93,    0,
       93,   93,   93,   93,   94,   94,   94,   56,  100,    0,
        0,  100,  100,  100,  100,  100,  100,  100,   18,    0,

       92,   93,   93,   93,   93,   94,   94,   94,  100,    0,
        0,  100,  100,   64,   65,   66,   67,    9,    0,   93,
       93,    0,   93,   93,   94,   41,    0,    0,  100,  100,
      102,   93,   93,   94,    0,    0,    0,  100,  100,  100,
        0,   93,   93,    0,    0,    0,    0,   73,  100,  100,
      100,   73,   92,   93,   93,    0,   75,    0,  100,   75,
      100,   92,   93,   93,    0,    0,   74,  100,   74,    0,
       93,   93,   76,   76,    0,   93,   93,    0,  102,   93,
       93,    0,   93,   93,    0,   93,   93,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
       23,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        1,    1,    1,    1,    1,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    1,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[979] =
    {   0,
        0,    0, 1077, 1070,    0,    0, 1077, 5360, 5360,   73,
       75, 1071,    0, 1068,   72,   72,   34, 1052, 1049,  136,
      186,  233,  280,   71,  208,  338,   38,   73,  197,   89,
      263,  175,  235,  350,  340,  391,   67,  357,  180,  256,
     5360, 1059, 5360,  111,  137,  222, 1065, 5360,    0, 1032,
     1031, 5360,    0,  449, 1015,  468, 5360,    0,  494, 5360,
       61,  537,   86,   89,  183,  193,  343,  221,  226,  390,
      272,  229,  373,  269,  380,  270,  386,  382,  258,  490,
      384,  409,  552,  402,  541,  529,  533,  276,  535,  539,
      279,  523,  381,  576,  571,  581,  562,  574,  604,  606,

      446,  454,  609,  590,  461,  591,  594,  619,  618,  623,
     5360,    0,  681, 1014,  700, 1013,  726,    0,  771,  745,
      814,  619,  617,  806,  622,  814,  647,  804,  809,  679,
      803,  831,  667,  836,  817,  854,  855,  846,  731,  847,
      856,  866,  867,  868,  883,  876,  895,  887,  891,  906,
      898,  900,  908,  919,  910,  918,  907,  920,  940,  937,
      943,  949,  958,  964,  953,  959,  971,  960,  713, 1029,
      789, 1011, 1009, 1005, 1076, 1048,  798, 1121, 1164, 1095,
     1207,  957, 1142, 1167,  962, 1201, 1196, 1081, 1206,  955,
     1199, 1200,  982, 1219, 1029, 1205, 1237, 1063, 1210, 1246,

     1125, 1238, 1240, 1250, 1257, 1011, 1275, 1253, 1254, 1271,
     1294, 1287, 1117, 1298, 1302, 1309, 1286, 1293, 1305, 1323,
     1326, 1303, 1334, 1339, 1348, 1203, 1345, 1344, 1343, 1372,
     1184,  994,  978,  921,  897, 1406, 1432, 1475, 1417, 1451,
     1520, 1494, 1565, 1539,  891, 1341, 1556, 1554, 1342, 1567,
     1453, 1507, 1561, 1565, 1563, 1597, 1599, 1569, 1602, 1385,
     1598, 1600, 1608, 1619, 1613, 1621, 1609, 1632, 1640, 1650,
     1617, 1636, 1657, 1649, 1664, 1660, 1656, 1654, 1689, 1672,
     1436, 1681, 1454, 1684, 1685, 1696, 1702, 1703, 1693, 1701,
     1694, 1739, 1712, 1725,  881,  872,  840,  835, 1773, 1799,

     1785, 1844, 1818, 1548, 1863,  834, 1889, 1932, 1908, 1797,
     1930, 1894, 1927, 1931, 1944, 1923, 1786, 2014, 1929, 1924,
     1935, 1544, 1981, 1933, 1934, 1994, 1962, 1984, 1995, 1996,
     2000, 2006, 1985, 1747, 1847, 2016, 2004, 2005, 1842, 2017,
     2033, 2038, 2051, 2036, 2037, 2048, 2047, 2049, 2056, 2050,
     2069, 2054, 2085, 2068, 2090, 2087, 2070,  833,  832,  827,
     2148, 2159,  798, 2171, 2214, 2190, 2233, 2259, 2270, 2289,
     2315, 2334, 2336, 2089, 2192, 2312, 2317, 2314, 2331, 2335,
     2070, 2366, 2333, 2088, 2376, 2346, 2249, 2365, 2370, 2388,
     2398, 2193, 2399, 2401, 2403, 2416, 2419, 2109, 2153, 2406,

     2351, 2354, 2407, 2418, 2212, 2453, 2421, 2440, 2435, 2454,
     2437, 2452, 2458, 2457, 2474, 2257, 2468, 2471, 2473,  752,
      751,  750,  749, 2534, 2545, 2556, 2575, 2601, 2620, 2584,
     2646,  748, 2658, 2701, 2677, 2679, 2687, 2695, 2459, 2699,
     2691, 2718, 2732, 2696, 2694, 2284, 2724, 2600, 2742, 2737,
     2736, 2740, 2749, 2735, 2746, 2764, 2748, 2787, 2770, 2318,
     2776, 2487, 2498, 2543, 2608, 2742, 2783, 2794, 2795, 2781,
     2798, 2816, 2806, 2792, 2800, 2803, 2801, 2835, 2825, 2822,
     2828, 2846, 2852, 2836, 2833,  747,  745,  708, 2910, 2921,
      707, 2933, 2976, 2952, 2961, 3021, 2995, 3066, 3040, 2974,

     2847, 2850, 2963, 3057, 3061, 2844, 3059, 3070, 2875, 2846,
     3082, 3055, 3067, 3089, 3097, 3111, 3101, 3008, 3100, 3110,
     3102, 3112, 3139, 3066, 3115, 3122, 3114, 3121, 3122, 3109,
     3143, 3157, 3150, 3158, 3149, 3159, 3154, 3153, 3155, 3156,
     3186, 3187,  706,  705,  704,  703, 3049, 3247, 3231, 3292,
     3266, 3311,  702, 3337, 3380, 3356, 3164, 3366, 3173, 3369,
     3373, 3358, 3394, 3376, 3163, 3381, 3243, 3377, 3245, 3400,
     3422, 3421, 3418, 3234, 3417, 3433, 3279, 3423, 3425, 3424,
     3297, 3414, 3415, 3416, 3427, 3446, 3428, 3464, 3471, 3435,
     3456, 3458, 3480,  668,  665,  664, 3538,  661, 3550, 3593,

     3569, 3638, 3612, 3683, 3657, 3492, 3463, 3473, 3465, 3469,
     3477, 3580, 3474, 3678, 3481, 3671, 3679, 3680, 3571, 3529,
     3682, 3683, 3681, 3703, 3716, 3727, 5360, 5360, 3726, 3715,
     3719, 3730, 3591,  659,  658,  653,  650, 3790, 3809, 3835,
     3854, 3880,  648, 3892, 3935, 3911, 3721, 3720, 3625, 3723,
     3913, 3834, 3727, 3728, 3930, 3924, 3933, 3732, 3938, 3751,
     3949, 3952, 3769, 3953, 3822, 3935, 3966,  647,  646,  615,
     4024,  611, 4036, 4079, 4055, 4124, 4098, 4169, 4143, 3928,
     4129, 3989, 4158,  617, 4077, 4157, 4181, 4172, 4169, 4163,
     4040, 4168, 4166, 4173, 4209,  602,  562,  558,  556, 4269,

     4241, 4314, 4253, 4288,  548, 4359, 4402, 4333, 4354, 4267,
     4397, 4406, 4391, 4418, 4327, 4419, 4058, 4421, 4401, 4406,
     4111, 4170,  547,  520,  519,    0, 4479,  518, 4491, 4534,
     4510, 4579, 4553, 4624, 4598, 4613, 4592, 4174, 4214, 4211,
     4627, 4521, 4617, 4248, 4649, 4256, 4641, 4622,  517,  516,
      515,  514,  513, 4709, 4685, 4754, 4728, 4773,  510, 4799,
        0, 4818, 4642, 4651, 4339, 4412, 4402, 4752, 4802, 4403,
     4825, 4513, 4470, 4813, 4814,  508,  507, 5360,  506,    0,
     4860,  505, 4885, 4904, 4930, 4949,    0, 4433, 4817, 4534,
     4662, 4818, 4864, 4696, 4688, 4733, 4645, 4822, 4741,  504,

      503,  475,  474, 4975, 4994, 5020,  473,    0, 4980, 4817,
        0, 4976, 5047, 4821, 4863, 4883, 4917, 4927,  472,  471,
      470,    0, 5047, 5360,    0, 4928,    0, 5044, 5072, 5055,
      469,  433,  417, 5360, 5058, 4982, 4982, 5060, 5066, 5052,
      415,  414,  364,    0, 4997, 5038, 5048, 5360, 5076, 5084,
     5049, 5059,  358,  357,  355, 5062, 5360, 5082, 5080, 5063,
     5111,  353,  346,  339,    0, 5103, 5360, 5113, 5090,  325,
      323,  314, 5360, 5094,    0,  309,  307,    0,  306,  303,
      276,  267,  265,  260,    0,  259,  253, 5360, 5183, 5187,
     5191, 5195, 5199, 5203, 5205,  248, 5207, 5209, 5211, 5213,

     5215, 5217, 5219, 5221, 5223, 5225, 5229, 5231, 5233, 5235,
     5237, 5239, 5241, 5243, 5245, 5247, 5249, 5251, 5253, 5255,
     5257, 5259, 5261, 5263, 5265, 5267, 5269, 5271, 5273, 5275,
     5277, 5279, 5281,  233, 5283, 5285, 5287,  231, 5289, 5291,
     5293,  230,  228, 5295, 5297, 5299,  219, 5303, 5307, 5309,
     5311,  217,  214, 5315, 5319, 5321, 5323, 5325, 5327, 5329,
      212, 5331, 5333, 5335, 5337, 5339,  145, 5341, 5343, 5345,
      131, 5347,  117, 5349, 5351, 5353,   80, 5355
    } ;

static yyconst flex_int16_t yy_def[979] =
    {   0,
      888,    1,  889,  889,  890,  890,  888,  888,  888,  888,
      888,  891,  892,  893,  888,  888,   16,  888,  888,  888,
       20,   20,   22,   22,   22,   22,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      888,  888,  888,  888,  888,  888,  891,  888,  892,  893,
      888,  888,  894,  888,  895,   54,  888,  896,  888,  888,
       26,   26,   62,   62,   26,   26,   26,   26,   62,   26,
       26,   62,   26,   26,   26,   26,   26,   26,   62,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      888,  894,  888,  897,  113,  898,  888,  896,  888,  119,
       62,  121,  121,   26,   26,   26,  121,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,  888,
      170,  899,  900,  901,  888,  175,  888,  888,  888,  178,
      121,  181,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,  888,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      171,  171,  900,  902,  903,  888,  888,  888,  237,  888,
      888,  241,  888,  243,  181,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,  888,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  904,  888,  905,  906,  888,  888,

      300,  888,  302,  888,  888,  888,  888,  888,  307,   26,
       26,   26,   26,   26,   26,   26,   26,  907,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  888,  888,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  908,  909,  910,
      888,  888,  888,  888,  888,  364,  888,  888,  888,  369,
      888,  371,   26,   26,   26,   26,   26,   26,   26,   26,
      888,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  888,  888,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,  905,
      888,  911,  912,  888,  888,  888,  426,  888,  428,  888,
      888,  888,  888,  888,  433,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  888,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  888,  888,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  913,  914,  915,  888,  888,
      888,  888,  888,  492,  888,  888,  496,  888,  498,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,  888,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  888,  888,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  916,  888,  917,  918,  888,  888,  548,  888,
      550,  888,  888,  888,  888,  554,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,  888,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      888,  888,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  919,  920,  921,  888,  888,  888,  888,

      599,  888,  602,  888,  604,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  888,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,  888,  888,   26,   26,
       26,   26,   26,  922,  888,  923,  924,  888,  638,  888,
      640,  888,  888,  888,  888,  644,   26,   26,   26,   26,
       26,   26,  888,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  925,  926,  927,
      888,  888,  888,  888,  673,  888,  676,  888,  678,   26,
       26,   26,   26,  888,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  928,  888,  929,  930,  888,

      700,  888,  702,  888,  888,  888,  888,  706,   26,   26,
       26,  888,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  931,  932,  933,  934,  888,  888,  888,  888,
      729,  888,  732,  888,  734,   26,   26,   26,  888,  888,
       26,   26,   26,   26,   26,   26,   26,   26,  935,  888,
      936,  888,  937,  888,  754,  888,  756,  888,  888,  888,
      938,  760,   26,   26,  888,  888,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  939,  940,  888,  941,  942,
      888,  888,  888,  783,  888,  785,  943,   26,   26,  888,
      888,   26,   26,   26,   26,   26,   26,   26,   26,  944,

      888,  945,  946,  888,  804,  888,  888,  947,   26,  888,
      948,   26,  949,   26,   26,   26,   26,   26,  950,  888,
      951,  952,  888,  888,  953,   26,  954,  888,  955,   26,
      956,  957,  958,  888,  888,  888,  888,   26,   26,   26,
      959,  888,  960,  961,  888,  888,  888,  888,   26,   26,
       26,   26,  962,  963,  964,  888,  888,  888,   26,   26,
       26,  965,  888,  966,  967,  888,  888,   26,   26,  968,
      969,  970,  888,   26,  971,  888,  972,  973,  888,  974,
      975,  968,  888,  976,  977,  978,  888,    0,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,

      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888
    } ;

static yyconst flex_int16_t yy_nxt[5436] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   27,   27,   29,   30,   31,   32,   33,   27,
       34,   35,   36,   37,   38,   39,   27,   40,   27,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   27,   27,
       29,   30,   31,   32,   33,   27,   34,   35,   36,   37,
       38,   39,   27,   40,   27,   44,   45,   46,   45,   52,
      888,   61,  757,   53,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   55,   62,   56,   56,   56,   56,   56,

       56,   82,   57,  106,   61,   61,  888,   61,   61,   83,
       61,  122,   86,   44,   45,  123,   61,   78,   58,  881,
       62,   56,   56,   56,   56,   56,   56,   82,   57,  106,
       61,   61,   61,  879,   61,   83,   61,  122,   86,   46,
       45,  123,   61,   78,   58,   61,   61,  872,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   55,   61,   62,
       62,   63,   64,   62,   62,   61,   65,   61,   61,   61,
       66,   61,   67,   61,   61,   61,   61,   61,   61,   68,
       61,   61,   61,   61,   61,   62,   62,   63,   64,   62,
       62,   61,   65,   61,   61,   61,   66,   61,   67,   61,

       61,   61,   61,   61,   61,   68,   61,   61,   61,   61,
       61,   62,   62,   90,  855,   91,  834,  109,   61,  833,
       61,  825,   61,   61,   44,   45,   61,  124,   84,   61,
      808,   79,  803,  787,   85,  753,   61,   62,   62,   90,
       61,   91,   61,  109,   61,   61,   61,   80,   61,   61,
      118,  127,   61,  124,   84,   61,   69,   79,   62,   62,
       85,   92,   61,  126,   61,  131,   61,   70,   61,   61,
       71,   61,   93,   80,  885,   94,   61,  127,   61,  135,
      885,  885,   69,  110,   62,   62,  878,   92,  888,  126,
       61,  131,  138,   70,   87,   61,   71,  885,   93,   61,

       88,   94,   61,   62,   61,   89,   61,   72,  130,  110,
      133,   73,   61,   61,   61,   61,   74,   75,  138,   61,
       87,   76,   61,   77,  878,   61,   88,  882,  878,   62,
      865,   89,   61,   72,  130,  878,  133,   73,   61,   61,
       61,   61,   74,   75,  865,   61,  778,   76,   61,   77,
       61,   61,   61,   61,   61,   61,   61,   61,   61,  888,
      865,   61,   61,   61,   61,   61,   61,  844,   61,  125,
       97,   98,   61,   95,  870,   61,  865,   96,  844,  752,
      107,   81,   99,  100,  108,  844,   61,   61,   61,   61,
       61,   61,   61,   61,   61,  125,   97,   98,   61,   95,

       61,   61,  132,   96,  101,  102,  107,   81,   99,  100,
      108,  140,   61,  128,  103,  134,   61,  136,  151,   61,
      137,  129,  104,   61,   61,   61,   61,   61,  132,   61,
      144,  105,  141,   61,   61,  822,  726,  140,  844,  128,
      103,  134,   61,  136,  151,   61,  137,  129,  104,   61,
       61,   61,   61,   61,  822,   61,  144,  105,  141,   61,
       61,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      114,   61,  115,  115,  115,  115,  115,  115,   61,   57,
      115,  115,  115,  115,  115,  115,  115,  115,  115,   61,
      841,  822,  780,  699,  761,  822,  780,   61,  115,  115,

      115,  115,  115,  115,  164,   57,  119,  119,  119,  119,
      119,  119,  119,  119,  119,   61,  139,  120,  120,  120,
      120,  120,  120,   61,  752,  117,  730,  780,  752,  800,
      164,  707,  150,   61,  780,  778,  752,  699,  637,  674,
      752,  699,  139,  120,  120,  120,  120,  120,  120,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  114,   61,
      121,  121,  121,  121,  121,  121,   61,   65,  117,  645,
      145,  146,   61,  148,  147,  142,   61,  726,   61,  699,
       61,  149,   61,  637,   61,  157,  121,  121,  121,  121,
      121,  121,   61,   65,  143,   61,  145,  146,   61,  148,

      147,  142,   61,  152,   61,   61,   61,  149,   61,  153,
       61,  157,  158,  154,   61,  155,  156,   61,  162,   61,
      143,   61,  165,  723,   61,  163,  712,  159,  166,  152,
      161,   61,  600,   61,   61,  153,  699,   61,  158,  154,
       61,  155,  156,   61,  160,   61,  182,   61,  165,   61,
       61,  163,   61,  159,  166,  167,  161,  183,  168,   61,
       61,   61,   61,   61,  169,   61,   61,  637,  546,  555,
      160,  117,  182,   61,  637,   61,  192,  186,   61,  546,
      117,  167,  493,  183,  168,  637,  546,   61,   61,  634,
      169,   61,   61,  170,  170,  170,  170,  170,  170,  170,

      170,  170,   55,  186,  171,  171,  171,  171,  171,  171,
       61,   57,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  189,   61,  434,  117,  546,  423,  423,  365,  546,
      171,  171,  171,  171,  171,  171,   61,   57,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  189,   61,  176,
      176,  176,  176,  176,  176,  888,   61,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  423,  198,  117,  308,
      117,  423,  298,  486,   61,  176,  176,  176,  176,  176,
      176,  177,   61,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  179,  198,  180,  180,  180,  180,  180,  180,

       61,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  238,
      180,  180,  180,  180,  180,  180,  181,  181,  181,  181,
      181,  181,  181,  181,  181,   55,  188,  181,  181,  181,
      181,  181,  181,  184,  185,  187,   61,   61,  423,   61,
      190,  194,   61,  298,  298,  179,  117,   61,  191,  193,
       61,  298,  188,  181,  181,  181,  181,  181,  181,  184,
      185,  187,   61,   61,   61,   61,  190,  194,   61,   61,
      195,  200,  196,   61,  191,  193,   61,  197,  199,   61,
       61,  201,  204,  174,  202,  203,  208,   61,   61,   61,

       61,  205,  117,  206,  207,   61,  195,  200,  196,   61,
       61,   61,  888,  197,  199,   61,   61,  201,  298,   61,
      202,  203,  209,   61,   61,   61,   61,  205,  214,  220,
       61,  210,  213,  217,   61,   61,   61,   61,   61,  215,
      211,   61,  174,   61,  212,   61,  216,  219,  209,   61,
       61,   61,   61,   61,  214,  218,   61,  210,  213,  217,
       61,   61,   61,   61,   61,  215,  211,   61,  222,   61,
      212,  250,  216,  219,  224,   61,   61,   61,  227,   61,
       61,  218,  221,   61,  223,  225,   61,   61,   61,   61,
      228,  226,   61,  230,  222,  246,   61,  229,   61,  295,

      224,   61,   61,   61,  227,   61,   61,   61,  221,   61,
      223,  225,   61,  257,   61,  888,  228,  226,   61,  230,
      270,  246,   61,  229,   61,   61,  117,   61,   61,   61,
      174,   61,  174,   61,  174,  117,  117,   50,   51,  257,
       61,  231,  231,  231,  231,  231,  231,  231,  231,  231,
       55,   61,  232,  232,  232,  232,  232,  232,  888,   57,
      239,  239,  239,  239,  239,  239,  239,  239,  239,   48,
      111,   60,   61,   59,   51,   48,  888,   42,  232,  232,
      232,  232,  232,  232,   42,   57,  236,  888,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  238,   61,  239,

      239,  239,  239,  239,  239,  888,   61,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  888,  253,  888,  888,
      888,  888,  888,  888,   61,  239,  239,  239,  239,  239,
      239,  177,   61,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  179,  253,  242,  242,  242,  242,  242,  242,
       61,  247,  888,  888,  888,  888,  888,  888,  888,  888,
       61,  888,  888,  888,  888,  888,  888,  263,   61,  248,
      242,  242,  242,  242,  242,  242,  243,  243,  243,  243,
      243,  243,  243,  243,  243,   61,   61,  244,  244,  244,
      244,  244,  244,  263,   61,  248,  231,  231,  231,  231,

      231,  231,  231,  231,  231,  888,  888,  888,  888,  888,
       61,   61,  249,  244,  244,  244,  244,  244,  244,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  251,  254,
      245,  245,  245,  245,  245,  245,   61,  252,  249,   61,
      255,  256,   61,   61,   61,  259,   61,  888,   61,   61,
      258,  261,  888,   61,  251,  254,  245,  245,  245,  245,
      245,  245,   61,  252,  260,   61,  255,  256,   61,   61,
       61,  259,   61,  262,   61,   61,  258,  261,  264,   61,
       61,   61,  265,   61,  266,  267,  268,  269,   61,   61,
      260,  274,  888,   61,  273,  888,   61,   61,  888,  262,

       61,  271,  888,  888,  264,  275,   61,   61,  265,   61,
      266,  267,  268,  269,   61,   61,  272,  274,   61,   61,
      273,  276,   61,   61,  277,  278,   61,  271,  279,   61,
       61,  275,  283,  281,  280,  282,   61,   61,  888,  287,
       61,   61,  272,  888,   61,   61,   61,  276,   61,  284,
      277,  278,   61,  286,  279,   61,   61,  290,  283,  281,
      280,  282,   61,   61,  285,  287,   61,   61,  291,   61,
      292,   61,   61,  289,   61,  284,  288,   61,   61,  286,
      293,  294,   61,  310,   61,   61,   61,   61,   61,  888,
      285,   61,   61,  888,  291,   61,  292,  888,  888,  289,

      888,  888,  288,   61,  888,  888,  293,  888,   61,  310,
       61,   61,   61,   61,   61,   61,  888,   61,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  888,   61,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  888,  888,
      888,   61,  236,  888,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  238,   61,  301,  301,  301,  301,  301,
      301,  304,  316,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  888,  888,  888,  888,  888,  888,  888,   61,
      888,  301,  301,  301,  301,  301,  301,  302,  302,  302,
      302,  302,  302,  302,  302,  302,   61,   61,  303,  303,

      303,  303,  303,  303,  888,   61,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  888,  317,  888,  888,  888,
      888,  888,   61,   61,  303,  303,  303,  303,  303,  303,
      177,  888,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  179,  888,  306,  306,  306,  306,  306,  306,  888,
       61,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  306,
      306,  306,  306,  306,  306,  177,   61,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  308,   61,  309,  309,
      309,  309,  309,  309,  311,  312,  319,   61,  888,   61,

      313,  314,  315,  318,   61,  320,   61,  325,   61,  326,
       61,  323,   61,   61,  309,  309,  309,  309,  309,  309,
      311,  312,  319,   61,  321,   61,  313,  314,  315,  318,
       61,  320,   61,  324,   61,  322,   61,  323,   61,  327,
       61,   61,   61,   61,  329,   61,  331,  328,  330,  333,
      321,   61,   61,  888,  336,  332,   61,  888,  888,  324,
       61,  322,   61,  337,   61,  327,   61,   61,   61,   61,
      329,   61,  331,  328,  330,   61,  334,   61,   61,   61,
      336,  332,   61,   61,  338,  339,   61,  340,   61,  337,
       61,  335,   61,  342,  343,  888,  341,   61,  344,   61,

       61,   61,  334,   61,  888,   61,  888,   61,  346,   61,
      338,  339,  348,  340,  345,   61,  352,  335,   61,  342,
      343,  347,  341,   61,   61,   61,   61,   61,   61,   61,
      349,  350,   61,   61,  346,  354,   61,   61,  348,   61,
      345,   61,  352,  351,   61,   61,   61,  347,  355,  353,
       61,  357,  356,   61,   61,   61,  349,  350,   61,  888,
      888,  354,   61,   61,  888,   61,  888,  888,   61,  351,
       61,   61,   61,  888,  888,  353,  888,  357,  356,  888,
      888,   61,   61,  361,  398,  299,  299,  299,  299,  299,
      299,  299,  299,  299,   61,  888,  888,  363,  363,  363,

      363,  363,  363,  363,  363,  363,  373,  888,   61,  236,
      398,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      238,  380,  363,  363,  363,  363,  363,  363,  888,   61,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  888,
       61,  888,  888,  888,  888,  888,  888,  380,  363,  363,
      363,  363,  363,  363,  236,   61,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  365,   61,  366,  366,  366,
      366,  366,  366,  177,  399,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  179,   61,  888,  888,  888,  888,
      888,  888,  888,  366,  366,  366,  366,  366,  366,  177,

      399,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      308,   61,  370,  370,  370,  370,  370,  370,  888,  888,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  888,
      888,  888,  888,  385,  888,  375,  888,   61,  370,  370,
      370,  370,  370,  370,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  374,  376,  372,  372,  372,  372,  372,
      372,  375,  377,   61,  379,  384,   61,   61,  388,  389,
       61,  378,   61,   61,   61,  386,   61,   61,   61,  374,
      376,  372,  372,  372,  372,  372,  372,   61,  377,  888,
      379,  384,   61,   61,  388,  389,   61,  378,   61,   61,

       61,  386,   61,   61,   61,   61,  391,  392,  387,  888,
      888,  888,  888,   61,  381,  381,  397,  381,  381,  381,
      381,  381,  381,  382,   61,  381,  395,   61,   61,  390,
      393,   61,  391,  392,  387,  381,  381,   61,   61,   61,
      394,  396,  397,   61,  401,  402,  408,   61,   61,   61,
       61,  400,  395,   61,   61,  390,  393,  409,  403,   61,
       61,  407,  404,   61,   61,   61,  394,  396,  888,   61,
      401,  402,  405,   61,   61,   61,   61,  400,  406,   61,
       61,   61,  410,  412,  403,   61,   61,  407,  404,  411,
       61,   61,   61,   61,   61,  414,  418,   61,  405,   61,

      413,  419,   61,  888,  406,   61,   61,   61,  410,  412,
      416,   61,   61,   61,  446,  411,   61,   61,   61,   61,
       61,  414,  415,   61,  417,   61,  413,  419,   61,  439,
       61,   61,   61,   61,  888,  888,  416,   61,   61,   61,
      446,  888,  888,  888,  465,  888,  888,  888,  415,  888,
      417,  888,  888,  888,   61,  439,   61,   61,   61,   61,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  236,
      465,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      238,  236,  888,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  365,  466,  427,  427,  427,  427,  427,  427,

      888,  440,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  888,  888,  888,  888,  888,  888,  888,  459,  466,
      427,  427,  427,  427,  427,  427,  428,  428,  428,  428,
      428,  428,  428,  428,  428,   61,   61,  429,  429,  429,
      429,  429,  429,  430,  459,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  888,   61,  888,  888,  454,  888,
      888,   61,   61,  429,  429,  429,  429,  429,  429,  177,
      888,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      177,   61,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  308,   61,  432,  432,  432,  432,  432,  432,  888,

       61,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      888,  510,  888,  888,  888,  888,  888,  888,   61,  432,
      432,  432,  432,  432,  432,  177,   61,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  434,  510,  435,  435,
      435,  435,  435,  435,  888,  442,  435,  435,  435,  435,
      435,  435,  435,  435,  435,   61,  443,   61,  445,  441,
       61,   61,  444,  888,  435,  435,  435,  435,  435,  435,
      436,  442,  888,  437,   61,  888,   61,  449,   61,  438,
      888,   61,  443,   61,  445,  441,   61,   61,  444,   61,
      453,  447,  455,  888,   61,  468,  436,   61,  469,  437,

       61,  448,   61,  449,   61,  438,  450,  456,   61,   61,
      449,  457,  451,   61,  452,   61,  453,  447,  455,   61,
       61,  468,  888,   61,  469,  458,  460,  448,  461,  467,
      462,   61,  450,  456,   61,   61,  449,  457,  451,   61,
      452,   61,   61,  463,   61,   61,   61,  464,  470,   61,
       61,  458,  460,  888,  461,  467,  462,   61,  474,   61,
      471,   61,   61,  888,   61,  475,  476,   61,   61,  463,
       61,  888,   61,  464,  470,   61,   61,  477,   61,  472,
       61,  478,  503,   61,  474,   61,  471,   61,   61,  473,
       61,  475,  476,  479,  480,   61,   61,   61,  481,  483,

       61,   61,   61,  477,   61,  472,   61,  478,  503,   61,
      482,   61,  484,  485,   61,  473,   61,   61,  888,  479,
      480,   61,   61,   61,  481,  483,   61,   61,   61,  888,
       61,  888,  888,  888,  888,  888,  482,   61,  484,  485,
       61,   61,   61,   61,  489,  888,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  236,   61,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  236,   61,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  365,  888,  491,
      491,  491,  491,  491,  491,  888,   61,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  495,  495,  495,  495,

      495,  495,  495,  495,  495,  491,  491,  491,  491,  491,
      491,  236,   61,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  493,  512,  494,  494,  494,  494,  494,  494,
      888,  525,  494,  494,  494,  494,  494,  494,  494,  494,
      494,  888,  888,   61,  888,  888,  888,  888,  888,  512,
      494,  494,  494,  494,  494,  494,  177,  525,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  308,  177,   61,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  434,
      888,  497,  497,  497,  497,  497,  497,  888,  888,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  888,  888,

      505,  888,  888,  888,  888,  888,  500,  497,  497,  497,
      497,  497,  497,  498,  498,  498,  498,  498,  498,  498,
      498,  498,   61,  501,  499,  499,  499,  499,  499,  499,
       61,  502,  500,  504,   61,  888,  888,   61,   61,   61,
      509,  888,   61,  888,  508,  506,  888,  888,   61,  501,
      499,  499,  499,  499,  499,  499,   61,  502,  511,  504,
       61,   61,  507,   61,   61,   61,  509,   61,   61,  513,
      508,  506,  514,  515,  516,   61,  517,  518,   61,   61,
       61,  888,  519,   61,  511,   61,  526,   61,  507,   61,
      520,   61,   61,   61,  521,  513,  522,  523,  514,  515,

      516,   61,  517,  518,   61,   61,   61,   61,  519,   61,
      524,   61,  526,   61,  527,   61,  520,   61,   61,   61,
      521,  528,  529,  523,   61,  531,   61,  533,  530,  535,
       61,  532,  536,   61,  534,   61,  524,   61,   61,   61,
      527,   61,  888,   61,   61,   61,   61,  528,  529,   61,
       61,  539,   61,  533,  530,  535,   61,  532,  536,   61,
      534,   61,  537,   61,   61,   61,  538,   61,   61,   61,
       61,   61,   61,  540,  542,   61,   61,  539,   61,   61,
      541,  558,  567,  559,  566,   61,  563,   61,  537,   61,
       61,   61,  538,   61,   61,   61,  888,   61,  888,  540,

      542,  888,   61,  888,   61,   61,  541,  558,  567,  559,
      888,  888,  563,   61,  888,   61,   61,  888,   61,   61,
      888,   61,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  236,  888,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  365,  236,   61,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  493,  888,  549,  549,  549,  549,
      549,  549,  888,  888,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  549,  549,  549,  549,  549,  549,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  557,  560,  551,

      551,  551,  551,  551,  551,  888,   61,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  888,   61,  888,  888,
      888,  888,  888,  557,  560,  551,  551,  551,  551,  551,
      551,  177,   61,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  434,   61,  553,  553,  553,  553,  553,  553,
      888,  575,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      553,  553,  553,  553,  553,  553,  177,  575,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  555,  561,  556,
      556,  556,  556,  556,  556,  562,  564,  565,   61,  888,

       61,  569,   61,  570,   61,  568,  888,  888,  888,   61,
       61,  578,  571,   61,  561,  556,  556,  556,  556,  556,
      556,  562,  564,  565,   61,   61,   61,  569,   61,  570,
       61,  568,   61,  572,  573,   61,   61,  577,  571,   61,
       61,  574,  576,   61,   61,   61,  581,  579,  580,  582,
      583,   61,   61,   61,   61,   61,  888,   61,   61,  572,
      573,  584,  585,  577,   61,   61,   61,  574,  576,   61,
       61,   61,  581,  579,  888,  582,  583,  586,   61,   61,
       61,   61,   61,   61,  587,  588,   61,  584,  585,  589,
       61,   61,   61,   61,  591,  590,   61,   61,   61,   61,

       61,   61,   61,  586,  888,  606,   61,   61,   61,  608,
      587,  588,   61,  592,  593,  589,   61,  888,   61,   61,
      591,  590,   61,   61,   61,   61,   61,   61,   61,   61,
       61,  606,   61,   61,  888,  608,  888,  888,  888,  592,
      593,  888,   61,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  888,  888,  617,   61,   61,  236,  888,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  493,  615,
      598,  598,  598,  598,  598,  598,  888,   61,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  888,   61,  888,
      888,  888,  888,  888,  888,  615,  598,  598,  598,  598,

      598,  598,  236,   61,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  600,   61,  601,  601,  601,  601,  601,
      601,  177,   61,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  434,  627,  888,  888,  888,  888,  888,  888,
      888,  601,  601,  601,  601,  601,  601,  177,   61,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  555,  627,
      603,  603,  603,  603,  603,  603,  888,  888,  603,  603,
      603,  603,  603,  603,  603,  603,  603,  888,  888,  888,
      888,  888,  888,  888,  888,  611,  603,  603,  603,  603,
      603,  603,  604,  604,  604,  604,  604,  604,  604,  604,

      604,   61,  613,  605,  605,  605,  605,  605,  605,   61,
      609,  611,   61,  607,  610,  614,   61,  888,  616,   61,
       61,  888,  888,  888,   61,  612,  618,   61,  613,  605,
      605,  605,  605,  605,  605,   61,  609,   61,   61,  607,
      610,  614,   61,   61,  616,   61,   61,  619,  620,  621,
       61,  612,  618,  622,  628,  626,  623,  624,   61,   61,
       61,   61,  625,   61,   61,   61,   61,   61,   61,   61,
       61,   61,  888,  619,  620,  621,   61,  629,   61,  622,
      628,  626,  623,  624,   61,   61,   61,   61,  625,   61,
       61,   61,   61,   61,   61,  630,   61,   61,  631,   61,

      632,   61,   61,  629,   61,  633,   61,   61,   61,  888,
      648,  649,   61,  650,   61,   61,   61,   61,  653,  647,
       61,  630,  888,   61,  631,   61,  632,   61,  888,  888,
      888,  633,   61,   61,   61,   61,  648,  649,   61,  650,
       61,  888,   61,   61,  653,  647,   61,  888,  236,   61,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  493,
      236,   61,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  600,   61,  639,  639,  639,  639,  639,  639,  888,
      657,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      888,  888,  888,  888,  888,  888,  888,  888,   61,  639,

      639,  639,  639,  639,  639,  640,  640,  640,  640,  640,
      640,  640,  640,  640,   61,  651,  641,  641,  641,  641,
      641,  641,  888,   61,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  888,   61,  888,  888,  888,  888,  888,
       61,  651,  641,  641,  641,  641,  641,  641,  177,   61,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  555,
       61,  643,  643,  643,  643,  643,  643,  888,   61,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  643,  643,  643,
      643,  643,  643,  177,   61,  644,  644,  644,  644,  644,

      644,  644,  644,  644,  645,  652,  646,  646,  646,  646,
      646,  646,  654,  655,   61,  660,  888,  656,  658,  659,
      888,   61,   61,   61,   61,   61,   61,  888,  888,  888,
      661,  652,  646,  646,  646,  646,  646,  646,  654,  655,
       61,  660,  662,  656,  658,  659,   61,   61,   61,   61,
       61,   61,   61,  663,  664,  666,  661,  665,   61,   61,
      680,  667,   61,   61,   61,  681,   61,  684,  662,   61,
       61,   61,   61,   61,  888,   61,  888,  888,  692,  663,
      664,  666,  888,  665,   61,   61,  680,  667,   61,   61,
       61,  681,   61,  684,   61,   61,   61,   61,  888,   61,

      236,   61,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  600,   61,  672,  672,  672,  672,  672,  672,  888,
       61,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      888,  888,  888,  888,  888,  888,  888,  888,   61,  672,
      672,  672,  672,  672,  672,  236,  888,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  674,  683,  675,  675,
      675,  675,  675,  675,  888,   61,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  888,  888,   61,  888,  888,
      888,  888,  888,  683,  675,  675,  675,  675,  675,  675,
      177,   61,  368,  368,  368,  368,  368,  368,  368,  368,

      368,  555,  177,   61,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  645,  888,  677,  677,  677,  677,  677,
      677,  888,  888,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  888,  888,  888,  888,  888,  888,  888,  888,
      682,  677,  677,  677,  677,  677,  677,  678,  678,  678,
      678,  678,  678,  678,  678,  678,   61,  685,  679,  679,
      679,  679,  679,  679,  686,  689,  682,   61,  687,  888,
      888,  709,  690,   61,  688,  888,   61,  694,   61,  691,
      693,   61,   61,  685,  679,  679,  679,  679,  679,  679,
      686,  689,   61,   61,  687,   61,   61,  709,  690,   61,

      688,  695,   61,  694,   61,  691,  693,   61,  888,   61,
      888,  888,  888,  888,  888,  888,  888,  888,   61,  888,
      888,   61,   61,  888,  888,  888,  888,  695,  888,  888,
      888,  888,   61,  888,  236,   61,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  600,  236,  888,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  674,   61,  701,
      701,  701,  701,  701,  701,  888,  888,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  888,  888,  888,  888,
      888,  888,  888,   61,  888,  701,  701,  701,  701,  701,
      701,  702,  702,  702,  702,  702,  702,  702,  702,  702,

      713,   61,  703,  703,  703,  703,  703,  703,  888,   61,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  888,
       61,  888,  888,  888,  888,  888,  713,   61,  703,  703,
      703,  703,  703,  703,  177,  888,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  645,   61,  705,  705,  705,
      705,  705,  705,  888,   61,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  888,  710,  714,  888,  888,  888,
      888,  888,   61,  705,  705,  705,  705,  705,  705,  177,
       61,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      707,  710,  708,  708,  708,  708,  708,  708,   61,  711,

       61,   61,  716,  717,  718,  719,   61,  715,  720,   61,
      888,   61,   61,   61,  721,   61,   61,   61,  708,  708,
      708,  708,  708,  708,   61,  711,   61,   61,  716,  717,
      718,  719,   61,  715,  720,   61,  722,   61,   61,   61,
      721,   61,   61,   61,  888,  888,  888,  888,  765,  766,
       61,  888,   61,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  722,  888,  888,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  765,  766,  737,  888,   61,  236,
      888,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      674,   61,  728,  728,  728,  728,  728,  728,  177,   61,

      368,  368,  368,  368,  368,  368,  368,  368,  368,  645,
       61,  888,  888,  888,  888,  888,  888,   61,  728,  728,
      728,  728,  728,  728,  236,   61,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  730,   61,  731,  731,  731,
      731,  731,  731,  888,  744,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  888,  888,  888,  888,  888,  888,
      888,  888,  790,  731,  731,  731,  731,  731,  731,  177,
       61,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      707,  736,  733,  733,  733,  733,  733,  733,  790,  888,
      888,  888,  888,  888,  888,  888,   61,   61,  888,  888,

      888,  888,  888,  888,  888,  888,  888,  736,  733,  733,
      733,  733,  733,  733,  734,  734,  734,  734,  734,  734,
      734,  734,  734,   61,  738,  735,  735,  735,  735,  735,
      735,  739,  741,  888,   61,  888,  888,  748,  888,  791,
       61,  747,  745,  742,   61,   61,   61,  740,  746,   61,
      738,  735,  735,  735,  735,  735,  735,  739,  741,  743,
       61,   61,   61,  748,   61,  791,   61,  747,  745,  742,
       61,   61,   61,  740,  746,   61,   61,  888,  888,  888,
      888,  888,  888,  797,  888,  743,  888,   61,   61,  236,
       61,  425,  425,  425,  425,  425,  425,  425,  425,  425,

      674,  236,   61,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  730,   61,  755,  755,  755,  755,  755,  755,
      888,  888,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  888,  888,  796,  888,  888,  888,  888,  888,   61,
      755,  755,  755,  755,  755,  755,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  768,   61,  757,  757,  757,
      757,  757,  757,  888,   61,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  888,  810,  888,  888,  888,  888,
      888,  768,   61,  757,  757,  757,  757,  757,  757,  177,
       61,  758,  758,  758,  758,  758,  758,  758,  758,  758,

      707,  810,  759,  759,  759,  759,  759,  759,  888,  888,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  888,
      764,  888,  888,  888,  888,  888,  888,  888,  759,  759,
      759,  759,  759,  759,  177,   61,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  761,  764,  762,  762,  762,
      762,  762,  762,  763,  767,  769,   61,  775,  888,  817,
       61,   61,  770,  771,  772,   61,  773,  774,  888,  888,
       61,  888,  888,  762,  762,  762,  762,  762,  762,  763,
      767,  769,   61,  775,   61,   61,   61,  811,   61,  788,
      789,   61,   61,  774,   61,  888,   61,  782,  782,  782,

      782,  782,  782,  782,  782,  782,  815,  888,  888,  888,
       61,   61,  814,  811,   61,  788,  789,  888,   61,  236,
       61,  781,  781,  781,  781,  781,  781,  781,  781,  781,
      730,   61,  782,  782,  782,  782,  782,  782,  888,   61,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  816,
      888,  888,  888,  888,  888,  888,  888,   61,  782,  782,
      782,  782,  782,  782,  236,   61,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  792,   61,  784,  784,  784,
      784,  784,  784,  177,   61,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  707,   61,  888,  888,  888,  888,

      888,  792,   61,  784,  784,  784,  784,  784,  784,  177,
       61,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      761,   61,  786,  786,  786,  786,  786,  786,  888,  793,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  794,
      798,  799,  795,  809,  888,   61,  888,  888,  786,  786,
      786,  786,  786,  786,  888,  793,   61,   61,  827,  812,
       61,   61,  818,  888,   61,   61,  798,  799,   61,  809,
      236,   61,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  730,   61,   61,  827,  812,   61,   61,  818,  813,
       61,   61,  888,  888,   61,  236,  888,  804,  804,  804,

      804,  804,  804,  804,  804,  804,   61,   61,  805,  805,
      805,  805,  805,  805,  888,  813,  805,  805,  805,  805,
      805,  805,  805,  805,  805,  888,   61,  888,  888,  888,
      888,  888,   61,   61,  805,  805,  805,  805,  805,  805,
      177,  888,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  761,   61,  807,  807,  807,  807,  807,  807,  888,
       61,  807,  807,  807,  807,  807,  807,  807,  807,  807,
       61,   61,  888,  888,  888,  888,  888,  888,  888,  807,
      807,  807,  807,  807,  807,  236,   61,  823,  823,  823,
      823,  823,  823,  823,  823,  823,   61,   61,  824,  824,

      824,  824,  824,  824,  888,  847,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  888,  826,  829,  848,   61,
      856,  888,  888,   61,  824,  824,  824,  824,  824,  824,
      177,  847,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  761,  826,  829,  848,   61,  856,  828,  828,   61,
      828,  828,  828,  828,  828,  828,  888,  236,  828,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  828,  828,
      836,  837,  835,  835,  857,  835,  835,  835,  835,  835,
      835,  839,  840,  835,  845,  846,  849,  850,  852,  851,
      858,  861,   61,  835,  835,   61,  836,  837,   61,  859,

      857,  888,   61,   61,  866,  867,   61,  839,  840,   61,
      845,  846,  849,  850,  852,  851,  858,  861,   61,   61,
      860,   61,  868,   61,   61,  859,  873,   61,   61,   61,
      866,  867,   61,   61,  869,   61,  874,   61,  888,  888,
      888,  888,  888,  888,  888,   61,  860,  888,  868,   61,
      888,  888,  873,   61,   61,  888,   61,  888,  888,   61,
      869,  888,  874,   61,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
       61,  888,   61,   41,   41,   41,   41,   43,   43,   43,
       43,   47,   47,   47,   47,   49,  888,   49,   49,   50,

       50,   50,   50,  112,  888,  112,  112,  116,  116,  172,
      172,  173,  173,  233,  233,  234,  234,  235,  235,  296,
      296,  297,  297,  358,  358,  359,  359,  360,  360,  383,
      888,  383,  383,  420,  420,  421,  421,  422,  422,  487,
      487,  488,  488,  543,  543,  544,  544,  545,  545,  594,
      594,  595,  595,  596,  596,  487,  487,  635,  635,  636,
      636,  668,  668,  669,  669,  670,  670,  696,  696,  697,
      697,  698,  698,  595,  595,  724,  724,  725,  725,  749,
      749,  750,  750,  751,  751,  776,  776,  777,  777,  779,
      779,  669,  669,  801,  801,  802,  802,  819,  819,  820,

      820,  821,  821,  828,  888,  828,  828,  830,  888,  830,
      830,  831,  831,  832,  832,  835,  888,  835,  835,  838,
      888,  838,  838,  724,  724,  842,  842,  843,  843,  853,
      853,  854,  854,  862,  862,  863,  863,  864,  864,  777,
      777,  871,  871,  875,  875,  876,  876,  877,  877,  880,
      880,  883,  883,  884,  884,  886,  886,  887,  887,    7,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,

      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888
    } ;

static yyconst flex_int16_t yy_chk[5436] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   10,   10,   11,   11,   15,
       17,   27,  977,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   24,   16,   16,   16,   16,   16,

       16,   28,   16,   37,   61,   24,   17,   27,   24,   28,
       37,   63,   30,   44,   44,   64,   28,   24,   16,  973,
       24,   16,   16,   16,   16,   16,   16,   28,   16,   37,
       61,   24,   30,  971,   24,   28,   37,   63,   30,   45,
       45,   64,   28,   24,   16,   20,   20,  967,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   30,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   21,   21,   32,  961,   32,  953,   39,   32,  952,
       21,  947,   21,   39,   46,   46,   65,   66,   29,   21,
      943,   25,  942,  938,   29,  934,   66,   21,   21,   32,
       29,   32,   25,   39,   32,   25,   21,   25,   21,   39,
      896,   69,   65,   66,   29,   21,   22,   25,   22,   22,
       29,   33,   66,   68,   68,   72,   29,   22,   25,   22,
       22,   25,   33,   25,  887,   33,   22,   69,   33,   76,
      886,  884,   22,   40,   22,   22,  883,   33,  882,   68,
       68,   72,   79,   22,   31,   22,   22,  881,   33,   40,

       31,   33,   22,   23,   33,   31,   31,   23,   71,   40,
       74,   23,   74,   76,   23,   71,   23,   23,   79,   88,
       31,   23,   91,   23,  880,   40,   31,  879,  877,   23,
      876,   31,   31,   23,   71,  872,   74,   23,   74,   76,
       23,   71,   23,   23,  871,   88,  870,   23,   91,   23,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      864,   26,   26,   26,   26,   26,   26,  863,   26,   67,
       35,   35,   26,   34,  862,   26,  855,   34,  854,  853,
       38,   26,   35,   35,   38,  843,   67,   26,   26,   26,
       26,   26,   26,   34,   26,   67,   35,   35,   26,   34,

       38,   26,   73,   34,   36,   36,   38,   26,   35,   35,
       38,   81,   67,   70,   36,   75,   73,   77,   93,   34,
       78,   70,   36,   75,   93,   78,   38,   81,   73,   77,
       84,   36,   82,   70,   36,  842,  841,   81,  833,   70,
       36,   75,   73,   77,   93,   84,   78,   70,   36,   75,
       93,   78,   82,   81,  832,   77,   84,   36,   82,   70,
       36,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   84,   54,   54,   54,   54,   54,   54,   82,   54,
       56,   56,   56,   56,   56,   56,   56,   56,   56,  101,
      831,  821,  820,  819,  807,  803,  802,  102,   54,   54,

       54,   54,   54,   54,  105,   54,   59,   59,   59,   59,
       59,   59,   59,   59,   59,  101,   80,   59,   59,   59,
       59,   59,   59,  102,  801,  800,  782,  779,  777,  776,
      105,  759,   92,   80,  753,  752,  751,  750,  749,  728,
      725,  724,   80,   59,   59,   59,   59,   59,   59,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   80,
       62,   62,   62,   62,   62,   62,   92,   62,  723,  705,
       85,   86,   86,   89,   87,   83,   87,  699,   89,  698,
       62,   90,   90,  697,   85,   97,   62,   62,   62,   62,
       62,   62,   92,   62,   83,   83,   85,   86,   86,   89,

       87,   83,   87,   94,   89,   97,   62,   90,   90,   95,
       85,   97,   98,   96,   95,   96,   96,   98,  103,   94,
       83,   83,  106,  696,   96,  104,  684,   99,  107,   94,
      100,   97,  672,  104,  106,   95,  670,  107,   98,   96,
       95,   96,   96,   98,   99,   94,  122,   99,  106,  100,
       96,  104,  103,   99,  107,  108,  100,  123,  109,  104,
      106,  109,  108,  107,  110,  125,  110,  669,  668,  643,
       99,  637,  122,   99,  636,  100,  133,  127,  103,  635,
      634,  108,  598,  123,  109,  596,  595,  109,  108,  594,
      110,  125,  110,  113,  113,  113,  113,  113,  113,  113,

      113,  113,  113,  127,  113,  113,  113,  113,  113,  113,
      133,  113,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  130,  130,  553,  546,  545,  544,  543,  491,  488,
      113,  113,  113,  113,  113,  113,  133,  113,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  130,  130,  117,
      117,  117,  117,  117,  117,  120,  169,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  487,  139,  486,  432,
      423,  422,  421,  420,  139,  117,  117,  117,  117,  117,
      117,  119,  169,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  139,  119,  119,  119,  119,  119,  119,

      139,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  363,
      119,  119,  119,  119,  119,  119,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  129,  121,  121,  121,
      121,  121,  121,  124,  126,  128,  131,  128,  360,  124,
      131,  135,  129,  359,  358,  306,  298,  126,  132,  134,
      135,  297,  129,  121,  121,  121,  121,  121,  121,  124,
      126,  128,  131,  128,  132,  124,  131,  135,  129,  134,
      136,  141,  137,  126,  132,  134,  135,  138,  140,  138,
      140,  142,  145,  296,  143,  144,  148,  136,  137,  141,

      132,  146,  295,  147,  147,  134,  136,  141,  137,  142,
      143,  144,  245,  138,  140,  138,  140,  142,  235,  146,
      143,  144,  149,  136,  137,  141,  145,  146,  152,  158,
      148,  150,  151,  155,  149,  142,  143,  144,  147,  153,
      150,  151,  234,  152,  150,  146,  154,  157,  149,  150,
      157,  153,  145,  155,  152,  156,  148,  150,  151,  155,
      149,  156,  154,  158,  147,  153,  150,  151,  160,  152,
      150,  185,  154,  157,  162,  150,  157,  153,  165,  155,
      160,  156,  159,  159,  161,  163,  161,  156,  154,  158,
      166,  164,  162,  168,  160,  182,  165,  167,  190,  233,

      162,  163,  166,  168,  165,  185,  160,  164,  159,  159,
      161,  163,  161,  193,  167,  232,  166,  164,  162,  168,
      206,  182,  165,  167,  190,  193,  174,  163,  166,  168,
      173,  185,  172,  164,  116,  114,   55,   51,   50,  193,
      167,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  193,  170,  170,  170,  170,  170,  170,  176,  170,
      176,  176,  176,  176,  176,  176,  176,  176,  176,   47,
       42,   19,  195,   18,   14,   12,    7,    4,  170,  170,
      170,  170,  170,  170,    3,  170,  175,    0,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  195,  175,

      175,  175,  175,  175,  175,  180,  198,  180,  180,  180,
      180,  180,  180,  180,  180,  180,    0,  188,    0,    0,
        0,    0,    0,    0,  188,  175,  175,  175,  175,  175,
      175,  178,  198,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  188,  178,  178,  178,  178,  178,  178,
      188,  183,    0,    0,    0,    0,    0,    0,    0,    0,
      213,    0,    0,    0,    0,    0,    0,  201,  201,  183,
      178,  178,  178,  178,  178,  178,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  183,  213,  179,  179,  179,
      179,  179,  179,  201,  201,  183,  231,  231,  231,  231,

      231,  231,  231,  231,  231,  231,    0,    0,    0,    0,
      184,  183,  184,  179,  179,  179,  179,  179,  179,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  186,  189,
      181,  181,  181,  181,  181,  181,  184,  187,  184,  187,
      191,  192,  191,  192,  186,  196,  226,    0,  196,  189,
      194,  199,    0,  199,  186,  189,  181,  181,  181,  181,
      181,  181,  194,  187,  197,  187,  191,  192,  191,  192,
      186,  196,  226,  200,  196,  189,  194,  199,  202,  199,
      197,  202,  203,  203,  204,  204,  204,  205,  194,  200,
      197,  209,    0,  204,  208,    0,  208,  209,    0,  200,

      205,  207,    0,    0,  202,  210,  197,  202,  203,  203,
      204,  204,  204,  205,  210,  200,  207,  209,  207,  204,
      208,  211,  208,  209,  212,  214,  205,  207,  215,  217,
      212,  210,  219,  217,  216,  218,  218,  211,    0,  222,
      210,  214,  207,    0,  207,  215,  222,  211,  219,  220,
      212,  214,  216,  221,  215,  217,  212,  225,  219,  217,
      216,  218,  218,  211,  220,  222,  220,  214,  227,  221,
      228,  215,  222,  224,  219,  220,  223,  223,  216,  221,
      229,  230,  224,  246,  246,  249,  229,  228,  227,    0,
      220,  225,  220,    0,  227,  221,  228,    0,    0,  224,

        0,    0,  223,  223,    0,    0,  229,    0,  224,  246,
      246,  249,  229,  228,  227,  230,    0,  225,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  239,  260,  239,
      239,  239,  239,  239,  239,  239,  239,  239,    0,    0,
        0,  230,  237,    0,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  260,  237,  237,  237,  237,  237,
      237,  240,  251,  240,  240,  240,  240,  240,  240,  240,
      240,  240,    0,    0,    0,    0,    0,    0,    0,  281,
        0,  237,  237,  237,  237,  237,  237,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  251,  283,  238,  238,

      238,  238,  238,  238,  242,  281,  242,  242,  242,  242,
      242,  242,  242,  242,  242,    0,  252,    0,    0,    0,
        0,    0,  251,  283,  238,  238,  238,  238,  238,  238,
      241,    0,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,    0,  241,  241,  241,  241,  241,  241,  244,
      252,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  241,
      241,  241,  241,  241,  241,  243,  252,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  322,  243,  243,
      243,  243,  243,  243,  247,  248,  254,  248,    0,  247,

      250,  250,  250,  253,  253,  255,  255,  261,  254,  262,
      250,  258,  258,  322,  243,  243,  243,  243,  243,  243,
      247,  248,  254,  248,  256,  247,  250,  250,  250,  253,
      253,  255,  255,  259,  254,  257,  250,  258,  258,  263,
      256,  261,  257,  262,  265,  259,  267,  264,  266,  269,
      256,  263,  267,    0,  271,  268,  265,    0,    0,  259,
      271,  257,  264,  272,  266,  263,  256,  261,  257,  262,
      265,  259,  267,  264,  266,  268,  270,  263,  267,  272,
      271,  268,  265,  269,  273,  274,  271,  275,  264,  272,
      266,  270,  274,  277,  278,    0,  276,  278,  279,  277,

      273,  268,  270,  276,    0,  272,    0,  275,  282,  269,
      273,  274,  285,  275,  280,  280,  289,  270,  274,  277,
      278,  284,  276,  278,  282,  277,  273,  284,  285,  276,
      286,  287,  279,  275,  282,  291,  289,  291,  285,  286,
      280,  280,  289,  288,  290,  287,  288,  284,  292,  290,
      282,  294,  293,  284,  285,  293,  286,  287,  279,    0,
        0,  291,  289,  291,    0,  286,    0,    0,  294,  288,
      290,  287,  288,    0,    0,  290,    0,  294,  293,    0,
        0,  293,  292,  299,  334,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  294,  301,    0,  301,  301,  301,

      301,  301,  301,  301,  301,  301,  310,    0,  292,  300,
      334,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  317,  300,  300,  300,  300,  300,  300,  303,  317,
      303,  303,  303,  303,  303,  303,  303,  303,  303,    0,
      310,    0,    0,    0,    0,    0,    0,  317,  300,  300,
      300,  300,  300,  300,  302,  317,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  310,  302,  302,  302,
      302,  302,  302,  305,  335,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  339,    0,    0,    0,    0,
        0,    0,    0,  302,  302,  302,  302,  302,  302,  307,

      335,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  339,  307,  307,  307,  307,  307,  307,  309,    0,
      309,  309,  309,  309,  309,  309,  309,  309,  309,    0,
        0,    0,    0,  320,    0,  312,    0,  312,  307,  307,
      307,  307,  307,  307,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  311,  313,  308,  308,  308,  308,  308,
      308,  312,  314,  312,  316,  319,  316,  320,  324,  325,
      313,  315,  319,  311,  314,  321,  324,  325,  321,  311,
      313,  308,  308,  308,  308,  308,  308,  315,  314,    0,
      316,  319,  316,  320,  324,  325,  313,  315,  319,  311,

      314,  321,  324,  325,  321,  327,  327,  328,  323,    0,
        0,    0,    0,  315,  318,  318,  333,  318,  318,  318,
      318,  318,  318,  318,  323,  318,  331,  328,  333,  326,
      329,  327,  327,  328,  323,  318,  318,  326,  329,  330,
      330,  332,  333,  331,  337,  338,  345,  337,  338,  332,
      323,  336,  331,  328,  333,  326,  329,  346,  340,  336,
      340,  344,  341,  326,  329,  330,  330,  332,    0,  331,
      337,  338,  342,  337,  338,  332,  341,  336,  343,  344,
      345,  342,  347,  349,  340,  336,  340,  344,  341,  348,
      347,  346,  348,  350,  343,  352,  356,  352,  342,  349,

      351,  357,  341,    0,  343,  344,  345,  342,  347,  349,
      354,  354,  351,  357,  381,  348,  347,  346,  348,  350,
      343,  352,  353,  352,  355,  349,  351,  357,  353,  374,
      356,  384,  374,  355,    0,    0,  354,  354,  351,  357,
      381,    0,    0,    0,  398,    0,    0,    0,  353,    0,
      355,    0,    0,    0,  353,  374,  356,  384,  374,  355,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  362,
      398,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  364,    0,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  399,  364,  364,  364,  364,  364,  364,

      366,  375,  366,  366,  366,  366,  366,  366,  366,  366,
      366,    0,    0,    0,    0,    0,    0,    0,  392,  399,
      364,  364,  364,  364,  364,  364,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  375,  392,  365,  365,  365,
      365,  365,  365,  367,  392,  367,  367,  367,  367,  367,
      367,  367,  367,  367,    0,  405,    0,    0,  387,    0,
        0,  375,  392,  365,  365,  365,  365,  365,  365,  368,
        0,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      369,  405,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  387,  369,  369,  369,  369,  369,  369,  370,

      416,  370,  370,  370,  370,  370,  370,  370,  370,  370,
        0,  446,    0,    0,    0,    0,    0,    0,  387,  369,
      369,  369,  369,  369,  369,  371,  416,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  446,  371,  371,
      371,  371,  371,  371,  372,  377,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  376,  378,  378,  380,  376,
      377,  460,  379,    0,  371,  371,  371,  371,  371,  371,
      373,  377,    0,  373,  379,    0,  383,  383,  380,  373,
        0,  376,  378,  378,  380,  376,  377,  460,  379,  386,
      386,  382,  388,    0,  401,  401,  373,  402,  402,  373,

      379,  382,  383,  383,  380,  373,  385,  389,  388,  382,
      382,  390,  385,  389,  385,  386,  386,  382,  388,  385,
      401,  401,    0,  402,  402,  391,  393,  382,  394,  400,
      395,  390,  385,  389,  388,  382,  382,  390,  385,  389,
      385,  391,  393,  396,  394,  385,  395,  397,  403,  400,
      403,  391,  393,    0,  394,  400,  395,  390,  407,  396,
      404,  404,  397,    0,  407,  408,  409,  391,  393,  396,
      394,    0,  395,  397,  403,  400,  403,  410,  409,  406,
      411,  411,  439,  408,  407,  396,  404,  404,  397,  406,
      407,  408,  409,  412,  413,  412,  406,  410,  414,  417,

      414,  413,  439,  410,  409,  406,  411,  411,  439,  408,
      415,  417,  418,  419,  418,  406,  419,  415,    0,  412,
      413,  412,  406,  410,  414,  417,  414,  413,  439,    0,
      462,    0,    0,    0,    0,    0,  415,  417,  418,  419,
      418,  463,  419,  415,  424,    0,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  425,  462,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  426,  463,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,    0,  426,
      426,  426,  426,  426,  426,  427,  464,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  430,  430,  430,  430,

      430,  430,  430,  430,  430,  426,  426,  426,  426,  426,
      426,  428,  464,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  448,  428,  428,  428,  428,  428,  428,
      429,  465,  429,  429,  429,  429,  429,  429,  429,  429,
      429,    0,    0,  448,    0,    0,    0,    0,    0,  448,
      428,  428,  428,  428,  428,  428,  431,  465,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  433,  448,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
        0,  433,  433,  433,  433,  433,  433,  435,    0,  435,
      435,  435,  435,  435,  435,  435,  435,  435,    0,    0,

      441,    0,    0,    0,    0,    0,  436,  433,  433,  433,
      433,  433,  433,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  436,  437,  434,  434,  434,  434,  434,  434,
      437,  438,  436,  440,  441,    0,    0,  445,  438,  444,
      445,    0,  440,    0,  444,  442,    0,    0,  436,  437,
      434,  434,  434,  434,  434,  434,  437,  438,  447,  440,
      441,  442,  443,  445,  438,  444,  445,  447,  440,  449,
      444,  442,  450,  451,  452,  443,  453,  454,  454,  451,
      450,    0,  455,  452,  447,  449,  466,  442,  443,  455,
      456,  457,  453,  447,  457,  449,  458,  459,  450,  451,

      452,  443,  453,  454,  454,  451,  450,  456,  455,  452,
      461,  449,  466,  459,  467,  455,  456,  457,  453,  461,
      457,  468,  469,  459,  470,  472,  467,  474,  471,  476,
      458,  473,  477,  456,  475,  474,  461,  468,  469,  459,
      467,  471,    0,  475,  477,  461,  476,  468,  469,  473,
      470,  480,  467,  474,  471,  476,  458,  473,  477,  472,
      475,  474,  478,  468,  469,  480,  479,  471,  479,  475,
      477,  481,  476,  482,  484,  473,  485,  480,  478,  484,
      483,  501,  510,  502,  509,  472,  506,  506,  478,  482,
      501,  480,  479,  502,  479,  483,    0,  481,    0,  482,

      484,    0,  485,    0,  478,  484,  483,  501,  510,  502,
        0,    0,  506,  506,    0,  482,  501,    0,  509,  502,
        0,  483,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  490,    0,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  492,  509,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,    0,  492,  492,  492,  492,
      492,  492,  494,    0,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  492,  492,  492,  492,  492,  492,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  500,  503,  493,

      493,  493,  493,  493,  493,  497,  503,  497,  497,  497,
      497,  497,  497,  497,  497,  497,    0,  500,    0,    0,
        0,    0,    0,  500,  503,  493,  493,  493,  493,  493,
      493,  496,  503,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  500,  496,  496,  496,  496,  496,  496,
      499,  518,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      496,  496,  496,  496,  496,  496,  498,  518,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  504,  498,
      498,  498,  498,  498,  498,  505,  507,  508,  512,    0,

      504,  512,  507,  513,  505,  511,    0,    0,    0,  524,
      513,  521,  514,  508,  504,  498,  498,  498,  498,  498,
      498,  505,  507,  508,  512,  511,  504,  512,  507,  513,
      505,  511,  514,  515,  516,  524,  513,  520,  514,  508,
      515,  517,  519,  519,  517,  521,  525,  522,  523,  526,
      527,  511,  530,  520,  516,  522,    0,  527,  514,  515,
      516,  528,  529,  520,  528,  529,  515,  517,  519,  519,
      517,  521,  525,  522,    0,  526,  527,  531,  530,  520,
      516,  522,  523,  527,  532,  533,  531,  528,  529,  534,
      528,  529,  535,  533,  537,  536,  538,  537,  539,  540,

      532,  534,  536,  531,    0,  557,  565,  557,  523,  559,
      532,  533,  531,  541,  542,  534,  559,    0,  535,  533,
      537,  536,  538,  537,  539,  540,  532,  534,  536,  541,
      542,  557,  565,  557,    0,  559,    0,    0,    0,  541,
      542,  549,  559,  549,  549,  549,  549,  549,  549,  549,
      549,  549,    0,    0,  569,  541,  542,  548,    0,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  567,
      548,  548,  548,  548,  548,  548,  551,  574,  551,  551,
      551,  551,  551,  551,  551,  551,  551,    0,  569,    0,
        0,    0,    0,    0,    0,  567,  548,  548,  548,  548,

      548,  548,  550,  574,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  569,  550,  550,  550,  550,  550,
      550,  552,  577,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  581,    0,    0,    0,    0,    0,    0,
        0,  550,  550,  550,  550,  550,  550,  554,  577,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  554,  581,
      554,  554,  554,  554,  554,  554,  556,    0,  556,  556,
      556,  556,  556,  556,  556,  556,  556,    0,    0,    0,
        0,    0,    0,    0,    0,  562,  554,  554,  554,  554,
      554,  554,  555,  555,  555,  555,  555,  555,  555,  555,

      555,  562,  564,  555,  555,  555,  555,  555,  555,  558,
      560,  562,  560,  558,  561,  566,  561,    0,  568,  564,
      568,    0,    0,    0,  566,  563,  570,  562,  564,  555,
      555,  555,  555,  555,  555,  558,  560,  563,  560,  558,
      561,  566,  561,  570,  568,  564,  568,  571,  572,  573,
      566,  563,  570,  575,  582,  580,  576,  578,  583,  584,
      575,  573,  579,  563,  572,  571,  578,  580,  579,  570,
      585,  587,    0,  571,  572,  573,  576,  586,  590,  575,
      582,  580,  576,  578,  583,  584,  575,  573,  579,  586,
      572,  571,  578,  580,  579,  588,  585,  587,  589,  591,

      592,  592,  576,  586,  590,  593,  607,  588,  609,    0,
      608,  610,  610,  611,  589,  586,  608,  613,  615,  606,
      611,  588,    0,  593,  589,  591,  592,  592,    0,    0,
        0,  593,  607,  588,  609,  606,  608,  610,  610,  611,
      589,    0,  608,  613,  615,  606,  611,    0,  597,  593,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      599,  606,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  620,  599,  599,  599,  599,  599,  599,  601,
      619,  601,  601,  601,  601,  601,  601,  601,  601,  601,
        0,    0,    0,    0,    0,    0,    0,    0,  620,  599,

      599,  599,  599,  599,  599,  600,  600,  600,  600,  600,
      600,  600,  600,  600,  619,  612,  600,  600,  600,  600,
      600,  600,  603,  612,  603,  603,  603,  603,  603,  603,
      603,  603,  603,    0,  633,    0,    0,    0,    0,    0,
      619,  612,  600,  600,  600,  600,  600,  600,  602,  612,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      633,  602,  602,  602,  602,  602,  602,  605,  649,  605,
      605,  605,  605,  605,  605,  605,  605,  605,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  602,  602,  602,
      602,  602,  602,  604,  649,  604,  604,  604,  604,  604,

      604,  604,  604,  604,  604,  614,  604,  604,  604,  604,
      604,  604,  616,  617,  616,  623,    0,  618,  621,  622,
        0,  614,  617,  618,  623,  621,  622,    0,    0,    0,
      624,  614,  604,  604,  604,  604,  604,  604,  616,  617,
      616,  623,  625,  618,  621,  622,  624,  614,  617,  618,
      623,  621,  622,  626,  629,  631,  624,  630,  630,  625,
      647,  632,  631,  648,  647,  648,  650,  653,  625,  629,
      626,  654,  624,  632,    0,  658,    0,    0,  663,  626,
      629,  631,    0,  630,  630,  625,  647,  632,  631,  648,
      647,  648,  650,  653,  660,  629,  626,  654,    0,  632,

      638,  658,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  663,  638,  638,  638,  638,  638,  638,  639,
      660,  639,  639,  639,  639,  639,  639,  639,  639,  639,
        0,    0,    0,    0,    0,    0,    0,    0,  663,  638,
      638,  638,  638,  638,  638,  640,    0,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  652,  640,  640,
      640,  640,  640,  640,  641,  665,  641,  641,  641,  641,
      641,  641,  641,  641,  641,    0,    0,  652,    0,    0,
        0,    0,    0,  652,  640,  640,  640,  640,  640,  640,
      642,  665,  642,  642,  642,  642,  642,  642,  642,  642,

      642,  642,  644,  652,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  644,    0,  644,  644,  644,  644,  644,
      644,  646,    0,  646,  646,  646,  646,  646,  646,  646,
      646,  646,    0,    0,    0,    0,    0,    0,    0,    0,
      651,  644,  644,  644,  644,  644,  644,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  651,  655,  645,  645,
      645,  645,  645,  645,  656,  659,  651,  656,  657,    0,
        0,  680,  661,  655,  657,    0,  657,  666,  666,  662,
      664,  659,  651,  655,  645,  645,  645,  645,  645,  645,
      656,  659,  661,  656,  657,  662,  664,  680,  661,  655,

      657,  667,  657,  666,  666,  662,  664,  659,    0,  667,
        0,    0,    0,    0,    0,    0,    0,    0,  661,    0,
        0,  662,  664,    0,    0,    0,    0,  667,    0,    0,
        0,    0,  682,    0,  671,  667,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  673,    0,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  682,  673,
      673,  673,  673,  673,  673,  675,    0,  675,  675,  675,
      675,  675,  675,  675,  675,  675,    0,    0,    0,    0,
        0,    0,    0,  691,    0,  673,  673,  673,  673,  673,
      673,  674,  674,  674,  674,  674,  674,  674,  674,  674,

      685,  717,  674,  674,  674,  674,  674,  674,  677,  691,
      677,  677,  677,  677,  677,  677,  677,  677,  677,    0,
      685,    0,    0,    0,    0,    0,  685,  717,  674,  674,
      674,  674,  674,  674,  676,    0,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  685,  676,  676,  676,
      676,  676,  676,  679,  721,  679,  679,  679,  679,  679,
      679,  679,  679,  679,    0,  681,  686,    0,    0,    0,
        0,    0,  681,  676,  676,  676,  676,  676,  676,  678,
      721,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  681,  678,  678,  678,  678,  678,  678,  681,  683,

      686,  683,  688,  689,  690,  692,  690,  687,  693,  693,
        0,  692,  689,  722,  694,  688,  694,  738,  678,  678,
      678,  678,  678,  678,  687,  683,  686,  683,  688,  689,
      690,  692,  690,  687,  693,  693,  695,  692,  689,  722,
      694,  688,  694,  738,    0,    0,    0,    0,  739,  740,
      687,  701,  695,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  695,  703,    0,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  739,  740,  710,    0,  695,  700,
        0,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  744,  700,  700,  700,  700,  700,  700,  704,  746,

      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      710,    0,    0,    0,    0,    0,    0,  744,  700,  700,
      700,  700,  700,  700,  702,  746,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  710,  702,  702,  702,
      702,  702,  702,  708,  715,  708,  708,  708,  708,  708,
      708,  708,  708,  708,    0,    0,    0,    0,    0,    0,
        0,    0,  765,  702,  702,  702,  702,  702,  702,  706,
      715,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  709,  706,  706,  706,  706,  706,  706,  765,    0,
        0,    0,    0,    0,    0,    0,  715,  709,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  709,  706,  706,
      706,  706,  706,  706,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  709,  711,  707,  707,  707,  707,  707,
      707,  712,  713,    0,  713,    0,    0,  720,    0,  766,
      711,  719,  716,  714,  719,  767,  770,  712,  718,  720,
      711,  707,  707,  707,  707,  707,  707,  712,  713,  714,
      713,  714,  716,  720,  718,  766,  711,  719,  716,  714,
      719,  767,  770,  712,  718,  720,  788,    0,    0,    0,
        0,    0,    0,  773,    0,  714,    0,  714,  716,  727,
      718,  727,  727,  727,  727,  727,  727,  727,  727,  727,

      727,  729,  788,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  773,  729,  729,  729,  729,  729,  729,
      731,    0,  731,  731,  731,  731,  731,  731,  731,  731,
      731,    0,    0,  772,    0,    0,    0,    0,    0,  773,
      729,  729,  729,  729,  729,  729,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  742,  772,  730,  730,  730,
      730,  730,  730,  733,  742,  733,  733,  733,  733,  733,
      733,  733,  733,  733,    0,  790,    0,    0,    0,    0,
        0,  742,  772,  730,  730,  730,  730,  730,  730,  732,
      742,  732,  732,  732,  732,  732,  732,  732,  732,  732,

      732,  790,  732,  732,  732,  732,  732,  732,  735,    0,
      735,  735,  735,  735,  735,  735,  735,  735,  735,    0,
      737,    0,    0,    0,    0,    0,    0,    0,  732,  732,
      732,  732,  732,  732,  734,  737,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  737,  734,  734,  734,
      734,  734,  734,  736,  741,  743,  736,  748,    0,  797,
      743,  737,  745,  745,  745,  748,  745,  747,    0,    0,
      741,    0,    0,  734,  734,  734,  734,  734,  734,  736,
      741,  743,  736,  748,  747,  763,  743,  791,  797,  763,
      764,  748,  745,  747,  764,  755,  741,  755,  755,  755,

      755,  755,  755,  755,  755,  755,  795,    0,    0,    0,
      747,  763,  794,  791,  797,  763,  764,    0,  745,  754,
      764,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  795,  754,  754,  754,  754,  754,  754,  757,  794,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  796,
        0,    0,    0,    0,    0,    0,    0,  795,  754,  754,
      754,  754,  754,  754,  756,  794,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  768,  796,  756,  756,  756,
      756,  756,  756,  758,  799,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  768,    0,    0,    0,    0,

        0,  768,  796,  756,  756,  756,  756,  756,  756,  760,
      799,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  768,  760,  760,  760,  760,  760,  760,  762,  769,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  771,
      774,  775,  771,  789,    0,  769,    0,    0,  760,  760,
      760,  760,  760,  760,    0,  769,  774,  775,  810,  792,
      789,  792,  798,    0,  814,  798,  774,  775,  771,  789,
      781,  769,  781,  781,  781,  781,  781,  781,  781,  781,
      781,  781,  774,  775,  810,  792,  789,  792,  798,  793,
      814,  798,    0,    0,  771,  783,    0,  783,  783,  783,

      783,  783,  783,  783,  783,  783,  815,  793,  783,  783,
      783,  783,  783,  783,  784,  793,  784,  784,  784,  784,
      784,  784,  784,  784,  784,    0,  816,    0,    0,    0,
        0,    0,  815,  793,  783,  783,  783,  783,  783,  783,
      785,    0,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  816,  785,  785,  785,  785,  785,  785,  786,
      817,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      818,  826,    0,    0,    0,    0,    0,    0,    0,  785,
      785,  785,  785,  785,  785,  804,  817,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  818,  826,  804,  804,

      804,  804,  804,  804,  805,  836,  805,  805,  805,  805,
      805,  805,  805,  805,  805,    0,  809,  812,  837,  812,
      845,    0,    0,  809,  804,  804,  804,  804,  804,  804,
      806,  836,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  809,  812,  837,  812,  845,  813,  813,  809,
      813,  813,  813,  813,  813,  813,    0,  823,  813,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  813,  813,
      828,  828,  829,  829,  846,  829,  829,  829,  829,  829,
      829,  830,  830,  829,  835,  835,  838,  838,  840,  839,
      847,  851,  851,  829,  829,  840,  828,  828,  830,  849,

      846,    0,  852,  838,  856,  858,  860,  830,  830,  839,
      835,  835,  838,  838,  840,  839,  847,  851,  851,  849,
      850,  840,  859,  859,  830,  849,  866,  850,  852,  838,
      856,  858,  860,  869,  861,  839,  868,  874,    0,    0,
        0,    0,    0,    0,    0,  849,  850,    0,  859,  859,
        0,    0,  866,  850,  861,    0,  868,    0,    0,  869,
      861,    0,  868,  874,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      861,    0,  868,  889,  889,  889,  889,  890,  890,  890,
      890,  891,  891,  891,  891,  892,    0,  892,  892,  893,

      893,  893,  893,  894,    0,  894,  894,  895,  895,  897,
      897,  898,  898,  899,  899,  900,  900,  901,  901,  902,
      902,  903,  903,  904,  904,  905,  905,  906,  906,  907,
        0,  907,  907,  908,  908,  909,  909,  910,  910,  911,
      911,  912,  912,  913,  913,  914,  914,  915,  915,  916,
      916,  917,  917,  918,  918,  919,  919,  920,  920,  921,
      921,  922,  922,  923,  923,  924,  924,  925,  925,  926,
      926,  927,  927,  928,  928,  929,  929,  930,  930,  931,
      931,  932,  932,  933,  933,  935,  935,  936,  936,  937,
      937,  939,  939,  940,  940,  941,  941,  944,  944,  945,

      945,  946,  946,  948,    0,  948,  948,  949,    0,  949,
      949,  950,  950,  951,  951,  954,    0,  954,  954,  955,
        0,  955,  955,  956,  956,  957,  957,  958,  958,  959,
      959,  960,  960,  962,  962,  963,  963,  964,  964,  965,
      965,  966,  966,  968,  968,  969,  969,  970,  970,  972,
      972,  974,  974,  975,  975,  976,  976,  978,  978,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,

      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[107] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 
    0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 1971 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 2081 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 889 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5360 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 60 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 62 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::ACCEPT_UNKNOWN_FQDN_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::DS_LITE_TUNNEL_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ return SrvParser::CLIENT_CLASS_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ return SrvParser::MATCH_IF_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 122 "SrvLexer.l"
{ return SrvParser::EQ_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{ return SrvParser::AND_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
{ return SrvParser::OR_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 125 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 126 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_DATA_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_EN_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_DATA_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{ return SrvParser::ALLOW_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 130 "SrvLexer.l"
{ return SrvParser::DENY_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 131 "SrvLexer.l"
{ return SrvParser::SUBSTRING_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
{ return SrvParser::CONTAIN_; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
{ return SrvParser::STRING_KEYWORD_; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 134 "SrvLexer.l"
{ return SrvParser::ADDRESS_LIST_; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 137 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 138 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 139 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 140 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 142 "SrvLexer.l"
;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 144 "SrvLexer.l"
;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 146 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno; 
}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 151 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 152 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 153 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 92:
YY_RULE_SETUP
#line 160 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 169 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 178 "SrvLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 187 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 196 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 205 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 214 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 226 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 233 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 254 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd then no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 286 "SrvLexer.l"
{
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   // Log(Crit) << "#### Detected [" << yytext << "] as DUID [len=" << len << "]" << LogEnd;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
        x = (toupper(*pos)-'A' + 10);
      else
        x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))	
        x += (toupper(*(pos+1))-'A' + 10);
      else
        x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }
   
   return SrvParser::DUID_;
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 314 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd; 
      YYABORT; 
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 324 "SrvLexer.l"
{ 
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) { 
        Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd; 
        YYABORT; 
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 333 "SrvLexer.l"
{ return yytext[0]; } 
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 336 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 2865 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 889 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 889 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 888);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 336 "SrvLexer.l"




