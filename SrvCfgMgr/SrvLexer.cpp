#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 57
#define YY_END_OF_BUFFER 58
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[525] =
    {   0,
        1,    1,    0,    0,    0,    0,   58,   56,    2,    1,
        1,   56,   39,   56,   56,   55,   55,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   43,   43,   57,    1,
        1,    1,    0,   51,   39,    0,   51,   41,   40,   55,
        0,    0,   54,    0,   48,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   36,   52,
       52,   52,   52,   52,   52,   52,   11,   12,   52,   52,
       52,   52,   52,   52,   42,   40,   55,    0,    0,   47,
       53,   46,   46,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   35,   55,    0,
        0,    0,   45,   45,    0,   46,    0,   46,   52,   52,
       52,   52,   52,   52,   52,   29,   52,   52,   52,    0,
       52,   52,   52,   17,   52,   52,   52,   52,   52,   37,
       52,   52,   52,   55,    0,    0,    0,    0,   45,    0,
       45,    0,   46,   46,   46,   46,   52,   52,    4,   52,
       52,   52,   38,    3,   52,   52,   52,   52,    0,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,    0,    0,    0,    0,   45,   45,   45,   45,

        0,   46,   46,   46,    0,   46,   52,   52,   52,   52,
       24,   52,   52,   52,   52,   52,    0,    0,   52,   52,
       52,   22,   52,   52,   52,   52,   52,   52,   52,   52,
       52,    0,    0,    0,   45,   45,   45,    0,   45,    0,
        0,   46,   46,   46,   46,   52,   52,   52,   52,   52,
       52,   52,   52,   52,    0,    0,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   15,   52,   52,    0,    0,
        0,    0,    0,   45,   45,   45,   45,    0,   46,   46,
       46,    0,   46,   52,   52,   52,   52,   52,   34,   52,
        7,    5,    0,    0,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,    8,    0,    0,    0,   45,
       45,   45,    0,   45,   50,   46,   46,   46,   46,   52,
       52,   52,   52,   52,    6,    0,    0,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   26,   52,    0,    0,
        0,   49,   45,   45,   45,   45,   46,   46,   46,    0,
       46,   52,   52,   52,   23,   52,    0,    0,   31,   30,
       25,   52,   16,   52,   52,   28,   27,   52,    0,    0,
       45,   45,   45,    0,   45,   46,   46,   46,   46,    9,
       52,   52,   52,   33,   32,   52,   52,   52,   52,    0,
        0,    0,   45,   45,   45,   45,   46,   46,   46,    0,

       46,   52,   52,   52,   52,   18,   52,   52,    0,    0,
       45,   45,   45,    0,   45,   46,   46,   46,   46,   52,
       52,   52,   52,   52,   52,    0,    0,    0,   45,   45,
       45,   45,   46,   46,   46,    0,   46,   52,   52,   52,
       52,   10,   14,    0,   44,   47,   45,   45,   45,    0,
       45,   46,   46,   46,   46,   20,   52,   19,   52,    0,
       44,    0,   45,   45,   45,   45,   45,   46,   46,   46,
        0,   46,   21,   52,   44,   47,   45,    0,   45,   45,
       45,   45,   46,   46,   46,   13,   44,   45,   45,   45,
       45,   46,   46,   46,   45,   45,    0,   45,   45,   46,

       45,   45,   46,   45,   45,    0,   45,   45,   45,   45,
        0,   45,   45,   45,   45,    0,   45,   45,   45,   45,
        0,   45,   45,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   16,   16,   16,   16,   16,   16,   17,    1,    1,
        1,    1,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
        1,    1,    1,    1,    1,    1,   18,   19,   20,   21,

       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[44] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        3,    1,    4,    4,    4,    4,    5,    4,    4,    4,
        4,    4,    4,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[604] =
    {   0,
        0,    0, 1794, 1793,    0,    0, 1800, 1803, 1803,   41,
       43, 1794,    0, 1791,   40,   40, 1756, 1779,   69,   82,
     1766,   18,   33, 1777,   47,   89,   91,   60,   92,   51,
       49,   96,   95,   54,   97,   57, 1803, 1781, 1803,  115,
      129,  131, 1787, 1803,    0, 1784, 1783, 1803,    0,  123,
     1772,  136, 1803,    0,  140, 1771,  144, 1767, 1769,  151,
      144,  153, 1756,   59,  154,  156,  157,  158, 1767,  159,
      161,  165,  103,  167,  168,  169, 1766, 1765,  171,  170,
      173,  174,  172,  176, 1803,    0,  200,  213, 1764,  217,
        0,  223,  236,  240, 1758,  188,  187,  247,  193,  231,

       99,  248,  249,  259,  263,  260,  257,  258,  261,  262,
      264,  272,  268,  274,  275,  276,  277, 1762,  293,  284,
     1761, 1760,  308,  321,  325,  331,  342,  348,  352, 1743,
      284,  286,  343,  352,  359, 1758,  360,  363,  366, 1764,
      367,  368,  369, 1756,  370,  372,  374,  381,  389, 1755,
      390,  388,  401,  399, 1754, 1753, 1752,  406,  412,  423,
      429,  435,  441,  454,  460,  473, 1751,  373,  475,  473,
      474,  476, 1750,  484,  478,  480,  481,  482,  482,  488,
      489,  492,  491,  495,  506,  498,  500,  502,  504,  430,
      516,  508, 1749, 1748, 1747,  523,  537,  529,  550,  563,

      567,  573, 1746,  580,  591,  597,  575,  511,  599,  514,
     1745,  545,  597,  598,  600,  601, 1729, 1738,  602,  603,
      605, 1742,  606,  609,  624,  613,  607,  616,  608,  424,
      618, 1741, 1740,  636,  642, 1739,  649,  660,  666,  672,
      678,  684,  697,  703,  716,  622,  629,  679,  698,  716,
      718,  719,  721,  722, 1725, 1719,  728,  711,  725,  730,
      731,  732,  736,  738,  739, 1736,  740,  741, 1735, 1734,
     1733,  758,  767,  773,  786,  792,  805,  809,  815, 1732,
      822,  833,  839,  748,  810,  742,  745,  817, 1731,  661,
     1730, 1729, 1727, 1705,  839,  840,  842,  758,  843,  768,

      844,  849,  850,  852,  853, 1726, 1725, 1724,  864,  870,
     1723,  877,  888,  894,  898,  904,  917,  923,  936,  931,
      872,  912,  937,  945, 1722, 1712, 1715,  939,  940,  941,
      942,  944,  787,  947,  946,  948, 1719,  952, 1718, 1717,
     1716,  965,  973,  986,  992, 1005, 1011, 1715, 1018, 1029,
     1035,  619, 1030, 1013, 1714, 1035, 1699, 1694, 1711, 1710,
     1709, 1036, 1708, 1037, 1038, 1707, 1706, 1039, 1705, 1704,
     1054, 1703, 1066, 1059, 1079, 1085, 1098, 1104, 1117, 1702,
     1044, 1112, 1117, 1803, 1803,  981, 1041,  951, 1118, 1701,
     1700, 1699, 1134, 1147, 1153, 1166, 1172, 1698, 1179, 1190,

     1196, 1119, 1121, 1196, 1198, 1697, 1191, 1080, 1696, 1695,
     1208, 1694, 1218, 1229, 1235, 1241, 1254, 1260, 1273,  510,
     1199,  899, 1210, 1123, 1268, 1693, 1692, 1691, 1280, 1293,
     1299, 1312, 1318, 1690, 1325, 1336, 1342, 1337, 1129, 1343,
     1344, 1689, 1688, 1687, 1686,    0, 1358, 1590, 1365, 1376,
     1382, 1388, 1401, 1407, 1420, 1577, 1345, 1556, 1161, 1549,
     1543, 1535, 1530, 1426, 1439, 1445, 1458, 1464, 1524, 1471,
        0, 1484, 1511, 1346, 1505, 1803, 1497,    0, 1490, 1492,
     1497, 1510, 1516, 1529,    0, 1485, 1479, 1466, 1459, 1535,
     1548, 1554, 1453,    0, 1445, 1440,    0, 1561, 1803,    0,

     1434, 1421, 1803, 1415, 1402,    0, 1396, 1383, 1377, 1360,
        0, 1349, 1347, 1320, 1313,    0, 1307, 1294, 1288, 1275,
        0, 1255, 1249, 1803, 1577, 1582, 1587, 1592, 1597, 1600,
     1605, 1607, 1249, 1226, 1609, 1222, 1611, 1613, 1214, 1615,
     1617, 1180, 1619, 1621, 1138, 1623, 1625, 1112, 1627, 1629,
     1087, 1631, 1633, 1053, 1635, 1637, 1013, 1639, 1641,  981,
     1643, 1645,  963, 1647, 1649,  902, 1651, 1653,  867, 1655,
     1657,  864,  680, 1659, 1661,  468, 1663, 1665,  420,  339,
     1667, 1669,  329, 1671,  300,  231, 1673, 1675, 1677,  202,
     1679, 1681, 1683,  192, 1685, 1687, 1689,  143, 1691, 1693,

     1695,   74, 1697
    } ;

static yyconst flex_int16_t yy_def[604] =
    {   0,
      524,    1,  525,  525,  526,  526,  524,  524,  524,  524,
      524,  527,  528,  529,  524,  524,   16,  524,  530,  530,
       20,   20,   20,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  524,  524,  524,  524,
      524,  524,  527,  524,  528,  529,  524,  524,  531,  524,
      532,   50,  524,  533,  534,  530,   20,   57,  530,  530,
      530,  530,   57,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  524,  531,  524,   87,  535,  536,
      533,  524,   92,   57,   94,  530,  530,  530,  530,  530,

      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  524,  119,
      537,  538,  524,  123,  524,  524,  539,  126,   94,  129,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  524,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  120,  120,  540,  541,  524,  524,  542,
      159,  524,  524,  163,  524,  165,  129,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  524,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  524,  543,  544,  524,  524,  197,  524,  199,

      524,  524,  524,  524,  545,  204,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  524,  524,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  546,  547,  524,  524,  524,  524,  548,  237,  524,
      524,  524,  242,  524,  244,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  524,  524,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  524,  549,
      550,  524,  524,  524,  274,  524,  276,  524,  524,  524,
      524,  551,  281,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  524,  524,  530,  530,  530,  530,  530,  530,

      530,  530,  530,  530,  530,  530,  552,  553,  524,  524,
      524,  524,  554,  312,  524,  524,  316,  524,  318,  530,
      530,  530,  530,  530,  530,  524,  524,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  524,  555,
      556,  524,  524,  343,  524,  345,  524,  524,  524,  557,
      349,  530,  530,  530,  530,  530,  524,  524,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  558,  559,
      524,  524,  524,  560,  373,  524,  376,  524,  378,  530,
      530,  530,  530,  524,  524,  530,  530,  530,  530,  524,
      561,  562,  524,  393,  524,  395,  524,  524,  524,  563,

      399,  530,  530,  530,  530,  530,  530,  530,  564,  565,
      524,  524,  524,  566,  413,  524,  416,  524,  418,  530,
      530,  530,  530,  530,  530,  524,  567,  568,  524,  429,
      524,  431,  524,  524,  524,  569,  435,  530,  530,  530,
      530,  530,  530,  570,  571,  572,  524,  524,  524,  573,
      449,  524,  452,  524,  454,  530,  530,  530,  530,  524,
      574,  524,  575,  524,  464,  524,  466,  524,  524,  524,
      576,  470,  530,  530,  577,  524,  578,  579,  524,  524,
      524,  481,  524,  483,  580,  530,  524,  581,  582,  524,
      490,  524,  524,  583,  524,  584,  585,  524,  524,  586,

      587,  588,  524,  524,  589,  590,  591,  592,  524,  593,
      594,  595,  596,  524,  597,  598,  599,  600,  524,  601,
      602,  603,  524,    0,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,

      524,  524,  524
    } ;

static yyconst flex_int16_t yy_nxt[1847] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   18,   19,   20,   21,
       22,   20,   23,   24,   24,   25,   24,   24,   26,   24,
       27,   28,   29,   24,   30,   31,   32,   33,   34,   35,
       24,   36,   24,   40,   41,   42,   41,   48,   61,   62,
       63,   49,   50,   50,   50,   50,   51,   52,   52,   52,
       52,   52,   52,  524,   53,  524,   64,  524,   74,   65,
      524,   82,   75,  524,   76,  524,  524,  467,   84,  101,
       54,   57,   57,   57,   57,   51,   57,   57,   58,   57,
       57,   57,   71,   59,   57,   57,   57,   57,   51,   57,

       57,   57,   57,   57,   57,  524,   59,  524,  524,   77,
       78,  524,  524,  524,   66,  524,   68,   40,   41,  524,
       67,   79,   69,   72,  109,   81,   73,   70,   83,  136,
       80,   42,   41,   40,   41,   87,   87,   87,   87,   51,
       88,   88,   88,   88,   88,   88,  518,   53,   88,   88,
       88,   88,   92,   92,   92,   92,   94,   94,   94,   94,
      524,   94,   94,   94,   94,   94,   94,  524,   96,  524,
      524,  102,  524,  524,  524,  524,   97,  524,  103,   98,
      104,  524,   99,  524,  524,  524,  524,  524,  524,  524,
      524,  106,  524,  105,  111,  513,  108,  107,  115,  110,

      113,  112,  116,  524,  524,  508,  117,  114,  132,  524,
      134,  118,  119,  119,  119,  119,   51,  120,  120,  120,
      120,  120,  120,  131,   53,  120,  120,  120,  120,  123,
      123,  123,  123,  125,  503,  126,  126,  126,  126,  127,
      128,  128,  128,  128,  128,  128,  524,  524,  128,  128,
      128,  128,  129,  129,  129,  129,  133,  129,  129,  129,
      129,  129,  129,  524,  524,  524,  135,  137,  139,  142,
      138,  140,  141,  524,  524,  524,  524,  524,  524,  524,
      524,  148,  143,  145,  524,  147,  144,  146,  524,  149,
      524,  524,  524,  524,  151,  150,  155,  155,  155,  155,

      524,  152,  524,  502,  153,  154,  154,  154,  154,   51,
      155,  155,  155,  155,  155,  155,  170,   53,  158,  169,
      159,  159,  159,  159,  160,  161,  161,  161,  161,  161,
      161,  524,  500,  161,  161,  161,  161,  162,  162,  162,
      162,  125,  494,  163,  163,  163,  163,  127,  164,  164,
      164,  164,  164,  164,  165,  165,  165,  165,  524,  524,
      164,  164,  164,  164,  167,  167,  167,  167,  524,  167,
      167,  167,  167,  167,  167,  524,  524,  172,  171,  524,
      173,  174,  524,  524,  524,  524,  524,  180,  524,  524,
      524,  184,  185,  186,  176,  177,  178,  524,  189,  175,

      183,  187,  181,  182,  524,  524,  524,  190,  191,  207,
      192,  154,  154,  154,  154,  524,  188,  524,  196,  196,
      196,  196,  158,  489,  197,  197,  197,  197,  160,  198,
      198,  198,  198,  198,  198,  199,  199,  199,  199,  524,
      524,  198,  198,  198,  198,  201,  524,  162,  162,  162,
      162,  125,  267,  202,  202,  202,  202,  127,  203,  203,
      203,  203,  203,  203,  524,  229,  203,  203,  203,  203,
      125,  485,  204,  204,  204,  204,  205,  206,  206,  206,
      206,  206,  206,  524,  208,  206,  206,  206,  206,  524,
      524,  524,  524,  212,  524,  210,  524,  524,  524,  216,

      524,  214,  217,  213,  524,  524,  211,  524,  524,  209,
      220,  524,  215,  221,  524,  224,  524,  218,  524,  219,
      524,  222,  524,  227,  524,  230,  524,  524,  231,  223,
      524,  226,  524,  234,  225,  196,  196,  196,  196,  524,
      247,  236,  236,  236,  236,  438,  228,  158,  249,  235,
      235,  235,  235,  160,  236,  236,  236,  236,  236,  236,
      158,  524,  237,  237,  237,  237,  238,  239,  239,  239,
      239,  239,  239,  524,  250,  239,  239,  239,  239,  240,
      240,  240,  240,  125,  246,  241,  241,  241,  241,  127,
      125,  524,  242,  242,  242,  242,  205,  243,  243,  243,

      243,  243,  243,  244,  244,  244,  244,  524,  248,  243,
      243,  243,  243,  524,  524,  524,  524,  524,  524,  524,
      253,  524,  524,  524,  524,  524,  251,  260,  261,  524,
      254,  257,  524,  262,  524,  524,  252,  258,  524,  259,
      524,  264,  263,  268,  266,  524,  285,  265,  272,  272,
      272,  272,  158,  284,  273,  273,  273,  273,  160,  158,
      380,  274,  274,  274,  274,  238,  275,  275,  275,  275,
      275,  275,  276,  276,  276,  276,  524,  524,  275,  275,
      275,  275,  278,  467,  240,  240,  240,  240,  125,  325,
      241,  241,  241,  241,  125,  524,  279,  279,  279,  279,

      205,  280,  280,  280,  280,  280,  280,  524,  286,  280,
      280,  280,  280,  125,  524,  281,  281,  281,  281,  282,
      283,  283,  283,  283,  283,  283,  524,  524,  283,  283,
      283,  283,  524,  288,  524,  524,  287,  524,  524,  289,
      290,  524,  291,  292,  524,  295,  524,  524,  524,  296,
      298,  301,  524,  302,  524,  524,  524,  524,  524,  322,
      299,  524,  300,  297,  524,  305,  323,  331,  309,  304,
      272,  272,  272,  272,  524,  306,  303,  158,  320,  273,
      273,  273,  273,  158,  524,  310,  310,  310,  310,  238,
      311,  311,  311,  311,  311,  311,  524,  333,  311,  311,

      311,  311,  158,  524,  312,  312,  312,  312,  313,  314,
      314,  314,  314,  314,  314,  524,  364,  314,  314,  314,
      314,  315,  315,  315,  315,  125,  524,  241,  241,  241,
      241,  205,  125,  524,  316,  316,  316,  316,  282,  317,
      317,  317,  317,  317,  317,  318,  318,  318,  318,  524,
      321,  317,  317,  317,  317,  524,  524,  324,  524,  524,
      524,  329,  332,  330,  328,  524,  524,  463,  524,  524,
      455,  336,  334,  337,  335,  338,  342,  342,  342,  342,
      158,  353,  273,  273,  273,  273,  238,  158,  524,  343,
      343,  343,  343,  313,  344,  344,  344,  344,  344,  344,

      345,  345,  345,  345,  524,  432,  344,  344,  344,  344,
      315,  315,  315,  315,  125,  524,  347,  347,  347,  347,
      282,  348,  348,  348,  348,  348,  348,  524,  524,  348,
      348,  348,  348,  125,  440,  349,  349,  349,  349,  350,
      351,  351,  351,  351,  351,  351,  524,  524,  351,  351,
      351,  351,  354,  524,  356,  524,  524,  524,  524,  352,
      524,  524,  524,  524,  524,  363,  419,  524,  524,  359,
      362,  355,  365,  368,  360,  361,  366,  342,  342,  342,
      342,  407,  367,  158,  396,  371,  371,  371,  371,  313,
      372,  372,  372,  372,  372,  372,  524,  524,  372,  372,

      372,  372,  158,  405,  373,  373,  373,  373,  374,  375,
      375,  375,  375,  375,  375,  524,  379,  375,  375,  375,
      375,  125,  382,  241,  241,  241,  241,  282,  125,  524,
      376,  376,  376,  376,  350,  377,  377,  377,  377,  377,
      377,  378,  378,  378,  378,  524,  524,  377,  377,  377,
      377,  524,  524,  524,  524,  524,  346,  524,  381,  388,
      524,  386,  387,  383,  158,  402,  273,  273,  273,  273,
      313,  395,  395,  395,  395,  389,  158,  406,  393,  393,
      393,  393,  374,  394,  394,  394,  394,  394,  394,  524,
      319,  394,  394,  394,  394,  125,  524,  397,  397,  397,

      397,  350,  398,  398,  398,  398,  398,  398,  524,  425,
      398,  398,  398,  398,  125,  277,  399,  399,  399,  399,
      400,  401,  401,  401,  401,  401,  401,  524,  524,  401,
      401,  401,  401,  524,  524,  524,  420,  524,  404,  524,
      403,  245,  421,  408,  158,  524,  411,  411,  411,  411,
      374,  412,  412,  412,  412,  412,  412,  524,  442,  412,
      412,  412,  412,  158,  457,  413,  413,  413,  413,  414,
      415,  415,  415,  415,  415,  415,  524,  524,  415,  415,
      415,  415,  125,  200,  241,  241,  241,  241,  350,  125,
      474,  416,  416,  416,  416,  400,  417,  417,  417,  417,

      417,  417,  418,  418,  418,  418,  524,  524,  417,  417,
      417,  417,  524,  422,  524,  524,  439,  166,  158,  423,
      273,  273,  273,  273,  374,  124,  524,  424,  158,   93,
      429,  429,  429,  429,  414,  430,  430,  430,  430,  430,
      430,  431,  431,  431,  431,  524,  441,  430,  430,  430,
      430,  125,   91,  433,  433,  433,  433,  400,  434,  434,
      434,  434,  434,  434,  524,  521,  434,  434,  434,  434,
      125,  521,  435,  435,  435,  435,  436,  437,  437,  437,
      437,  437,  437,  524,  524,  437,  437,  437,  437,  443,
      158,  521,  447,  447,  447,  447,  414,  448,  448,  448,

      448,  448,  448,  524,  516,  448,  448,  448,  448,  158,
      521,  449,  449,  449,  449,  450,  451,  451,  451,  451,
      451,  451,  524,  516,  451,  451,  451,  451,  125,  516,
      241,  241,  241,  241,  400,  125,  511,  452,  452,  452,
      452,  436,  453,  453,  453,  453,  453,  453,  454,  454,
      454,  454,  524,  524,  453,  453,  453,  453,  456,  524,
      524,  524,  524,  516,  458,  511,  473,  486,  158,  459,
      273,  273,  273,  273,  414,  158,  511,  464,  464,  464,
      464,  450,  465,  465,  465,  465,  465,  465,  466,  466,
      466,  466,  524,  506,  465,  465,  465,  465,  125,  511,

      468,  468,  468,  468,  436,  469,  469,  469,  469,  469,
      469,  524,  506,  469,  469,  469,  469,  125,  506,  470,
      470,  470,  470,  471,  472,  472,  472,  472,  472,  472,
      524,  497,  472,  472,  472,  472,  158,  506,  479,  479,
      479,  479,  450,  480,  480,  480,  480,  480,  480,  524,
      497,  480,  480,  480,  480,  158,  497,  481,  481,  481,
      481,  478,  482,  482,  482,  482,  482,  482,  524,  471,
      482,  482,  482,  482,  125,  497,  241,  241,  241,  241,
      436,  125,  478,  483,  483,  483,  483,  471,  484,  484,
      484,  484,  484,  484,  524,  462,  484,  484,  484,  484,

      158,  524,  273,  273,  273,  273,  450,  158,  450,  490,
      490,  490,  490,  478,  491,  491,  491,  491,  491,  491,
      524,  462,  491,  491,  491,  491,  125,  524,  492,  492,
      492,  492,  471,  493,  493,  493,  493,  493,  493,  524,
      436,  493,  493,  493,  493,  158,  478,  498,  498,  498,
      498,  476,  499,  499,  499,  499,  499,  499,  524,  462,
      499,  499,  499,  499,  125,  428,  241,  241,  241,  241,
      471,  158,  524,  273,  273,  273,  273,   37,   37,   37,
       37,   37,   39,   39,   39,   39,   39,   43,   43,   43,
       43,   43,   45,  524,   45,   45,   45,   46,   46,   46,

       46,   46,   56,   56,   56,   86,  414,   86,   86,   86,
       89,   89,  121,  121,  156,  156,  157,  157,  193,  193,
      194,  194,  232,  232,  233,  233,  269,  269,  270,  270,
      307,  307,  308,  308,  339,  339,  340,  340,  369,  369,
      370,  370,  390,  390,  391,  391,  409,  409,  410,  410,
      426,  426,  427,  427,  444,  444,  445,  445,  460,  460,
      461,  461,  475,  475,  477,  477,  487,  487,  488,  488,
      495,  495,  496,  496,  501,  501,  504,  504,  505,  505,
      507,  507,  509,  509,  510,  510,  512,  512,  514,  514,
      515,  515,  517,  517,  519,  519,  520,  520,  522,  522,

      523,  523,  462,  428,  524,  524,  400,  446,  428,  392,
      374,  428,  392,  524,  350,   90,  392,  341,  524,  313,
      392,  341,  524,  524,  524,  524,  524,  524,  385,  384,
      524,  282,   90,  341,  271,  524,  358,  357,  524,  238,
      341,  271,  524,  327,  326,  524,  524,  524,  205,   90,
      271,  195,  524,  294,  293,  160,  271,  195,  524,  256,
      255,  524,  127,   90,  195,  122,  524,  524,  195,  122,
      524,  524,  524,  179,  524,  168,   90,  122,  524,  130,
      122,  524,  524,  524,  100,  524,   95,  524,   90,   46,
       47,   44,   85,  524,   60,   55,  524,   47,   44,  524,

       38,   38,    7,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524
    } ;

static yyconst flex_int16_t yy_chk[1847] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   10,   10,   11,   11,   15,   22,   22,
       23,   15,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   25,   16,   31,   23,   30,   30,   25,
       34,   34,   30,   36,   31,   64,   28,  602,   36,   64,
       16,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   28,   19,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   26,   20,   27,   29,   32,
       32,   33,   32,   35,   26,  101,   27,   40,   40,   73,
       26,   32,   27,   29,   73,   33,   29,   27,   35,  101,
       32,   41,   41,   42,   42,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,  598,   50,   52,   52,
       52,   52,   55,   55,   55,   55,   57,   57,   57,   57,
       61,   57,   57,   57,   57,   57,   57,   60,   60,   62,
       65,   65,   66,   67,   68,   70,   60,   71,   66,   61,
       67,   72,   62,   74,   75,   76,   80,   79,   83,   81,
       82,   70,   84,   68,   75,  594,   72,   71,   81,   74,

       79,   76,   82,   97,   96,  590,   83,   80,   97,   99,
       99,   84,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   96,   87,   88,   88,   88,   88,   90,
       90,   90,   90,   92,  586,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   93,  100,   93,   93,
       93,   93,   94,   94,   94,   94,   98,   94,   94,   94,
       94,   94,   94,   98,  102,  103,  100,  102,  104,  106,
      103,  105,  105,  107,  108,  104,  106,  109,  110,  105,
      111,  112,  107,  109,  113,  111,  108,  110,  112,  113,
      114,  115,  116,  117,  115,  114,  120,  120,  120,  120,

      131,  116,  132,  585,  117,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  132,  119,  123,  131,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  124,  583,  124,  124,  124,  124,  125,  125,  125,
      125,  126,  580,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  127,  127,  127,  127,  128,  133,
      128,  128,  128,  128,  129,  129,  129,  129,  134,  129,
      129,  129,  129,  129,  129,  135,  137,  134,  133,  138,
      135,  137,  139,  141,  142,  143,  145,  141,  146,  168,
      147,  145,  146,  147,  139,  139,  139,  148,  149,  138,

      143,  148,  141,  142,  152,  149,  151,  151,  152,  168,
      153,  154,  154,  154,  154,  154,  148,  153,  158,  158,
      158,  158,  159,  579,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  160,  160,  160,  160,  161,
      230,  161,  161,  161,  161,  162,  190,  162,  162,  162,
      162,  163,  230,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  164,  190,  164,  164,  164,  164,
      165,  576,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  166,  169,  166,  166,  166,  166,  170,
      171,  169,  172,  174,  175,  171,  176,  177,  178,  178,

      174,  176,  179,  175,  180,  181,  172,  183,  182,  170,
      181,  184,  177,  182,  186,  185,  187,  179,  188,  180,
      189,  183,  185,  188,  192,  191,  420,  208,  192,  184,
      210,  187,  191,  196,  186,  196,  196,  196,  196,  198,
      208,  198,  198,  198,  198,  420,  189,  197,  210,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      199,  212,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  200,  212,  200,  200,  200,  200,  201,
      201,  201,  201,  202,  207,  202,  202,  202,  202,  202,
      204,  207,  204,  204,  204,  204,  204,  204,  204,  204,

      204,  204,  204,  205,  205,  205,  205,  206,  209,  206,
      206,  206,  206,  213,  214,  209,  215,  216,  219,  220,
      215,  221,  223,  227,  229,  224,  213,  223,  224,  226,
      216,  219,  228,  225,  231,  352,  214,  220,  246,  221,
      225,  227,  226,  231,  229,  247,  247,  228,  234,  234,
      234,  234,  235,  246,  235,  235,  235,  235,  235,  237,
      352,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  238,  238,  238,  238,  239,  290,  239,  239,
      239,  239,  240,  573,  240,  240,  240,  240,  241,  290,
      241,  241,  241,  241,  242,  248,  242,  242,  242,  242,

      242,  242,  242,  242,  242,  242,  242,  243,  248,  243,
      243,  243,  243,  244,  249,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  245,  258,  245,  245,
      245,  245,  250,  250,  251,  252,  249,  253,  254,  251,
      252,  259,  253,  254,  257,  257,  260,  261,  262,  258,
      260,  262,  263,  263,  264,  265,  267,  268,  286,  286,
      260,  287,  261,  259,  284,  267,  287,  298,  272,  265,
      272,  272,  272,  272,  298,  268,  264,  273,  284,  273,
      273,  273,  273,  274,  300,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  275,  300,  275,  275,

      275,  275,  276,  333,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  277,  333,  277,  277,  277,
      277,  278,  278,  278,  278,  279,  285,  279,  279,  279,
      279,  279,  281,  288,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  282,  282,  282,  282,  283,
      285,  283,  283,  283,  283,  295,  296,  288,  297,  299,
      301,  296,  299,  297,  295,  302,  303,  572,  304,  305,
      569,  303,  301,  304,  302,  305,  309,  309,  309,  309,
      310,  321,  310,  310,  310,  310,  310,  312,  321,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,

      313,  313,  313,  313,  314,  566,  314,  314,  314,  314,
      315,  315,  315,  315,  316,  422,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  317,  322,  317,
      317,  317,  317,  318,  422,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  319,  320,  319,  319,
      319,  319,  322,  323,  324,  328,  329,  330,  331,  320,
      332,  324,  335,  334,  336,  332,  563,  388,  338,  328,
      331,  323,  334,  338,  329,  330,  335,  342,  342,  342,
      342,  388,  336,  343,  560,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  344,  386,  344,  344,

      344,  344,  345,  386,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  346,  557,  346,  346,  346,
      346,  347,  354,  347,  347,  347,  347,  347,  349,  354,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  350,  350,  350,  350,  351,  353,  351,  351,  351,
      351,  356,  362,  364,  365,  368,  554,  387,  353,  365,
      381,  362,  364,  356,  371,  381,  371,  371,  371,  371,
      371,  374,  374,  374,  374,  368,  373,  387,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  375,
      551,  375,  375,  375,  375,  376,  408,  376,  376,  376,

      376,  376,  376,  376,  376,  376,  376,  376,  377,  408,
      377,  377,  377,  377,  378,  548,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  379,  382,  379,
      379,  379,  379,  383,  389,  402,  402,  403,  383,  424,
      382,  545,  403,  389,  393,  439,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  394,  424,  394,
      394,  394,  394,  395,  439,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  396,  459,  396,  396,
      396,  396,  397,  542,  397,  397,  397,  397,  397,  399,
      459,  399,  399,  399,  399,  399,  399,  399,  399,  399,

      399,  399,  400,  400,  400,  400,  401,  407,  401,  401,
      401,  401,  404,  404,  405,  421,  421,  539,  411,  405,
      411,  411,  411,  411,  411,  536,  423,  407,  413,  534,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  414,  414,  414,  414,  415,  423,  415,  415,  415,
      415,  416,  533,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  417,  523,  417,  417,  417,  417,
      418,  522,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  419,  425,  419,  419,  419,  419,  425,
      429,  520,  429,  429,  429,  429,  429,  429,  429,  429,

      429,  429,  429,  430,  519,  430,  430,  430,  430,  431,
      518,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  432,  517,  432,  432,  432,  432,  433,  515,
      433,  433,  433,  433,  433,  435,  514,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  436,  436,
      436,  436,  437,  438,  437,  437,  437,  437,  438,  440,
      441,  457,  474,  513,  440,  512,  457,  474,  447,  441,
      447,  447,  447,  447,  447,  449,  510,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  450,  450,
      450,  450,  451,  509,  451,  451,  451,  451,  452,  508,

      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  453,  507,  453,  453,  453,  453,  454,  505,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      455,  504,  455,  455,  455,  455,  464,  502,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  465,
      501,  465,  465,  465,  465,  466,  496,  466,  466,  466,
      466,  495,  466,  466,  466,  466,  466,  466,  467,  493,
      467,  467,  467,  467,  468,  489,  468,  468,  468,  468,
      468,  470,  488,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  472,  487,  472,  472,  472,  472,

      479,  486,  479,  479,  479,  479,  479,  481,  480,  481,
      481,  481,  481,  477,  481,  481,  481,  481,  481,  481,
      482,  475,  482,  482,  482,  482,  483,  473,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  484,
      469,  484,  484,  484,  484,  490,  463,  490,  490,  490,
      490,  462,  490,  490,  490,  490,  490,  490,  491,  461,
      491,  491,  491,  491,  492,  460,  492,  492,  492,  492,
      492,  498,  458,  498,  498,  498,  498,  525,  525,  525,
      525,  525,  526,  526,  526,  526,  526,  527,  527,  527,
      527,  527,  528,  456,  528,  528,  528,  529,  529,  529,

      529,  529,  530,  530,  530,  531,  448,  531,  531,  531,
      532,  532,  535,  535,  537,  537,  538,  538,  540,  540,
      541,  541,  543,  543,  544,  544,  546,  546,  547,  547,
      549,  549,  550,  550,  552,  552,  553,  553,  555,  555,
      556,  556,  558,  558,  559,  559,  561,  561,  562,  562,
      564,  564,  565,  565,  567,  567,  568,  568,  570,  570,
      571,  571,  574,  574,  575,  575,  577,  577,  578,  578,
      581,  581,  582,  582,  584,  584,  587,  587,  588,  588,
      589,  589,  591,  591,  592,  592,  593,  593,  595,  595,
      596,  596,  597,  597,  599,  599,  600,  600,  601,  601,

      603,  603,  445,  444,  443,  442,  434,  428,  427,  426,
      412,  410,  409,  406,  398,  392,  391,  390,  380,  372,
      370,  369,  367,  366,  363,  361,  360,  359,  358,  357,
      355,  348,  341,  340,  339,  337,  327,  326,  325,  311,
      308,  307,  306,  294,  293,  292,  291,  289,  280,  271,
      270,  269,  266,  256,  255,  236,  233,  232,  222,  218,
      217,  211,  203,  195,  194,  193,  173,  167,  157,  156,
      155,  150,  144,  140,  136,  130,  122,  121,  118,   95,
       89,   78,   77,   69,   63,   59,   58,   56,   51,   47,
       46,   43,   38,   24,   21,   18,   17,   14,   12,    7,

        4,    3,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[58] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
};
#line 1035 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 1138 "SrvLexer.cpp"

	if ( (yy_init) )
		{
		(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 525 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1803 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 55 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 60 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 61 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 62 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 69 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno; 
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 102 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 103 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 44:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 137 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 146 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 155 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 164 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 176 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 183 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 204 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd then no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 236 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd; 
      YYABORT; 
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 246 "SrvLexer.l"
{ 
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) { 
        Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd; 
        YYABORT; 
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 255 "SrvLexer.l"
{ return yytext[0]; } 
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 258 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 1651 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 525 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 525 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 524);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
    	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
    	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
#endif
#line 258 "SrvLexer.l"




