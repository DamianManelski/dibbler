#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 107
#define YY_END_OF_BUFFER 108
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[897] =
    {   0,
        1,    1,    0,    0,    0,    0,  108,  106,    2,    1,
        1,  106,   88,  106,  106,  105,  105,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
       92,   92,  107,    1,    1,    1,    0,  100,   88,    0,
      100,   90,   89,  105,    0,    0,  104,    0,   97,   71,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,   85,  101,
      101,   73,  101,  101,  101,  101,  101,  101,  101,  101,

      101,   16,   17,  101,  101,  101,  101,  101,  101,  101,
      101,   91,   89,  105,    0,    0,    0,   96,  102,   95,
       95,  101,  101,  101,  101,   72,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
       84,  105,    0,    0,    0,    0,   94,   94,    0,   95,
        0,   95,  101,  101,  101,  101,  101,  101,  101,  101,
      101,   79,  101,  101,  101,  101,   29,  101,  101,   40,

      101,  101,  101,  101,  101,  101,  101,  101,    0,  101,
      101,  101,  101,  101,  101,   22,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,   86,  101,
      101,  101,  101,  105,    0,  103,    0,    0,    0,   94,
        0,   94,    0,   95,   95,   95,   95,  101,  101,  101,
      101,   78,  101,  101,    4,  101,  101,  101,  101,  101,
      101,  101,   87,  101,    3,  101,  101,  101,  101,  101,
      101,  101,  101,    0,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,    7,  101,   23,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,    0,    0,

        0,    0,    0,   94,   94,   94,   94,    0,   95,   95,
       95,    0,   95,  101,  101,  101,  101,  101,  101,  101,
      101,   28,  101,  101,  101,   35,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,    0,    0,
      101,  101,  101,   33,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,   82,  101,  101,  101,  101,  101,
      101,  101,    0,    0,    0,    0,   94,   94,   94,    0,
       94,    0,    0,   95,   95,   95,   95,  101,  101,   31,
      101,  101,  101,  101,  101,    0,  101,  101,   81,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,

      101,  101,  101,    0,    0,  101,  101,  101,  101,  101,
       50,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,   20,  101,  101,  101,  103,    0,    0,    0,    0,
        0,   94,   94,   94,   94,    0,   95,   95,   95,    0,
       95,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,    0,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,   46,  101,   12,   10,   70,
      101,    0,    0,  101,  101,  101,   48,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,    5,  101,  101,
      101,   13,    0,    0,    0,    0,   94,   94,   94,    0,

       94,   99,   95,   95,   95,   95,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,    0,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
       11,   54,    0,    0,  101,  101,  101,   49,  101,  101,
      101,  101,   30,  101,  101,    6,   80,   37,  101,  101,
        0,    0,    0,    0,   98,   94,   94,   94,   94,   95,
       95,   95,    0,   95,  101,  101,  101,  101,  101,  101,
      101,  101,   47,  101,    0,  101,  101,  101,  101,  101,
      101,   34,  101,  101,   32,  101,  101,  101,    0,    0,
       43,   42,   36,  101,   21,  101,  101,   39,   38,  101,

      101,  103,    0,    0,   94,   94,   94,    0,   94,   95,
       95,   95,   95,  101,   14,  101,   53,  101,  101,  101,
       58,  101,    0,  101,  101,  101,  101,   61,  101,  101,
      101,  101,  101,  101,   45,   44,  101,  101,  101,  101,
       51,    0,    0,    0,    0,   94,   94,   94,   94,   95,
       95,   95,    0,   95,  101,  101,   83,   60,  101,  101,
        0,   69,  101,  101,  101,   62,  101,   52,  101,  101,
        8,  101,   24,  101,  101,    0,    0,    0,   94,   94,
       94,    0,   94,   95,   95,   95,   95,  101,  101,   59,
      101,    0,  101,  101,  101,  101,  101,  101,   56,  101,

      101,  101,  101,  103,    0,    0,    0,   94,   94,   94,
       94,   95,   95,   95,    0,   95,  101,  101,  101,    0,
      101,  101,  101,  101,   55,  101,  101,  101,   15,   19,
        0,    0,   93,   96,   94,   94,   94,    0,   94,   95,
       95,   95,   95,  101,  101,   26,    0,    0,  101,  101,
      101,   63,  101,   25,  101,  101,    0,    0,   93,    0,
       94,   94,   94,   94,   94,   95,   95,   95,    0,   95,
      101,  101,    0,    0,   27,  101,  101,   64,  101,  101,
      101,  101,  101,  103,   93,   96,   94,    0,   94,   94,
       94,   94,   95,   95,   95,   57,  101,    0,    0,  101,

      101,  101,  101,  101,  101,  101,   18,    0,   93,   94,
       94,   94,   94,   95,   95,   95,  101,    0,    0,  101,
      101,   65,   66,   67,   68,    9,    0,   94,   94,    0,
       94,   94,   95,   41,    0,    0,  101,  101,  103,   94,
       94,   95,    0,    0,    0,  101,  101,  101,    0,   94,
       94,    0,    0,    0,    0,   74,  101,  101,  101,   74,
       93,   94,   94,    0,   76,    0,  101,   76,  101,   93,
       94,   94,    0,    0,   75,  101,   75,    0,   94,   94,
       77,   77,    0,   94,   94,    0,  103,   94,   94,    0,
       94,   94,    0,   94,   94,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
       23,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        1,    1,    1,    1,    1,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    1,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[987] =
    {   0,
        0,    0, 1121, 1120,    0,    0, 1127, 5406, 5406,   73,
       75, 1121,    0, 1118,   72,   72,   34, 1101, 1071,  136,
      186,  233,  280,   71,  208,  338,   38,   73,  197,   89,
      267,  175,  249,  350,  193,  382,   67,  357,  237,  317,
     5406, 1071, 5406,  111,  137,  214, 1077, 5406,    0, 1074,
     1073, 5406,    0,  440, 1056,  459, 5406,    0,  485, 5406,
       61,  528,   86,   89,  182,  265,  279,  184,  239,  381,
      340,  229,  342,  373,  380,  270,  377,  519,  285,  481,
      532,  543,  547,  393,  544,  375,  560,  526,  298,  562,
      564,  426,  551,  561,  575,  571,  576,  598,  584,  615,

      599,  437,  445,  616,  608,  596,  619,  618,  620,  614,
      629, 5406,    0,  687, 1055,  503, 1054,  732,    0,  777,
      706,  820,  633,  626,  812,  628,  820,  679,  810,  815,
      685,  809,  837,  756,  719,  823,  859,  860,  819,  855,
      852,  869,  871,  872,  873,  858,  880,  875,  900,  923,
      902,  912,  905,  908,  904,  925,  911,  921,  913,  948,
      943,  944,  952,  945,  956,  962,  973,  975,  977,  964,
      737, 1035,  757, 1024, 1022, 1020, 1082,  797, 1054, 1127,
     1170, 1101, 1213,  962, 1148,  959, 1069, 1165,  967, 1021,
     1212, 1061, 1201, 1202, 1215, 1216, 1080, 1208, 1233, 1130,

     1211, 1248, 1214, 1247, 1246, 1260, 1249, 1263, 1031, 1282,
     1257, 1267, 1294, 1300, 1296, 1131, 1304, 1309, 1313, 1297,
     1299, 1319, 1334, 1328, 1340, 1337, 1350, 1349, 1305, 1364,
     1365, 1352, 1381, 1146, 1018, 1017, 1016, 1014, 1423, 1441,
     1484, 1460, 1503, 1529, 1548, 1574, 1593, 1006, 1357, 1576,
     1353, 1342, 1587, 1420, 1462, 1573, 1586, 1589, 1591, 1616,
     1593, 1606, 1361, 1516, 1595, 1608, 1625, 1623, 1640, 1633,
     1646, 1641, 1527, 1645, 1644, 1645, 1647, 1663, 1668, 1665,
     1681, 1679, 1695, 1678, 1380, 1696, 1445, 1692, 1699, 1697,
     1724, 1690, 1720, 1727, 1717, 1719, 1711, 1747, 1001,  946,

      889,  886, 1790, 1807, 1826, 1852, 1871, 1835, 1897,  876,
     1909, 1952, 1928, 1888, 1749, 1744, 1946, 1851, 1947, 1940,
     1949, 2019, 1952, 1942, 1989, 1463, 1990, 1996, 1999, 2001,
     1943, 2023, 2002, 2004, 2009, 2021, 2036, 2032, 1734, 1810,
     2041, 2011, 2043, 1831, 2044, 2060, 2054, 2064, 2073, 2085,
     2087, 2065, 2078, 2079, 1913, 2088, 2084, 2098, 2094, 2106,
     2095, 2112,  844,  840,  838, 2170, 2181,  833, 2193, 2236,
     2212, 2255, 2281, 2292, 2311, 2337, 2356, 2358, 2337, 2214,
     2103, 2339, 2336, 2353, 2371, 2095, 2372, 2355, 2109, 2396,
     2368, 2271, 2392, 2393, 2405, 2404, 2215, 2416, 2423, 2424,

     2428, 2421, 2439, 2180, 2237, 2440, 2443, 2451, 2403, 2456,
     2279, 2474, 2459, 2463, 2472, 2484, 2475, 2494, 2480, 2497,
     2503, 2290, 2516, 2507, 2491,  803,  802,  801,  800, 2574,
     2585, 2596, 2615, 2641, 2660, 2624, 2686,  799, 2698, 2741,
     2717, 2527, 2727, 2735, 2640, 2738, 2677, 2756, 2732, 2508,
     2509, 2356, 2742, 2757, 2760, 2773, 2775, 2771, 2790, 2777,
     2779, 2784, 2778, 2814, 2808, 2435, 2794, 2583, 2628, 2787,
     2817, 2816, 2805, 2821, 2828, 2839, 2819, 2837, 2859, 2844,
     2856, 2836, 2846, 2869, 2858, 2866, 2875, 2851, 2876, 2888,
     2894, 2867,  798,  797,  787, 2934, 2952,  758, 2964, 3007,

     2983, 2992, 3052, 3026, 3097, 3071, 2891, 2994, 3086, 3039,
     3095, 3093, 3088, 3091, 3115, 3090, 2993, 3118, 3094, 3129,
     3146, 3134, 3150, 3131, 3132, 3136, 3149, 3171, 3147, 3174,
     3138, 3142, 3155, 3167, 3170, 3181, 3182, 3166, 3193, 3199,
     3188, 3198, 3185, 3194, 3218, 3190, 3191, 3195, 3238, 3239,
      757,  746,  745,  743, 3257, 3299, 3283, 3344, 3318, 3363,
      742, 3389, 3432, 3408, 3237, 3418, 3426, 3423, 3427, 3410,
     3446, 3428, 3236, 3433, 3295, 3431, 3331, 3473, 3476, 3477,
     3474, 3286, 3470, 3485, 3323, 3475, 3486, 3479, 3349, 3467,
     3468, 3469, 3471, 3510, 3478, 3519, 3525, 3508, 3513, 3515,

     3538,  740,  713,  712, 3583,  711, 3598, 3641, 3617, 3686,
     3660, 3731, 3705, 3537, 3516, 3523, 3518, 3620, 3691, 3726,
     3522, 3735, 3583, 3722, 3730, 3729, 3673, 3602, 3731, 3732,
     3736, 3759, 3771, 3777, 5406, 5406, 3778, 3765, 3773, 3779,
     3768,  710,  709,  708,  674, 3839, 3858, 3884, 3903, 3929,
      673, 3941, 3984, 3960, 3774, 3944, 3772, 3775, 3978, 3883,
     3779, 3781, 3979, 3974, 3983, 3818, 3996, 3826, 4002, 4003,
     3871, 4014, 3973, 3985, 4020,  672,  670,  669, 4078,  658,
     4090, 4133, 4109, 4178, 4152, 4223, 4197, 4015, 4183, 4016,
     4212,  666, 4131, 4069, 4228, 4226, 4223, 4217, 4017, 4222,

     4219, 4227, 4262,  653,  652,  625,  555, 4322, 4294, 4367,
     4306, 4341,  553, 4412, 4455, 4386, 4407, 4258, 4450, 4459,
     4444, 4471, 4120, 4472, 4018, 4474, 4454, 4459, 4032, 4112,
      551,  547,  544,    0, 4532,  543, 4544, 4587, 4439, 4632,
     4563, 4677, 4606, 4666, 4600, 4165, 4230, 4264, 4672, 4673,
     4670, 4260, 4697, 4301, 4565, 4354,  542,  540,  511,  510,
      509, 4757, 4658, 4802, 4733, 4744,  508, 4847,    0, 4776,
     4833, 4838, 4329, 4465, 4455, 4800, 4851, 4456, 4865, 4566,
     4523, 4862, 4866,  507,  506, 5406,  505,    0, 4821,  504,
     4926, 4945, 4971, 4990,    0, 4486, 4904, 4621, 4693, 4843,

     4968, 4781, 4905, 4789, 4958, 4845, 4744,  466,  465,  464,
      463, 5028, 5016, 5047,  462,    0, 5033, 4846,    0, 4849,
     5083, 4848, 4852, 4970, 5006, 5027,  461,  460,  424,    0,
     5096, 5406,    0, 5028,    0, 5046, 5117, 5100,  416,  414,
      412, 5406, 5103, 5051, 5057, 5105, 5111, 5097,  411,  408,
      407,    0, 5112, 5100, 5095, 5406, 5121, 5106, 5103, 5098,
      406,  361,  358, 5105, 5406, 5127, 5135, 5122, 5156,  357,
      353,  348,    0, 5158, 5406, 5159, 5140,  325,  317,  311,
     5406, 5141,    0,  307,  306,    0,  305,  276,  267,  266,
      262,  260,    0,  257,  256, 5406, 5229, 5233, 5237, 5241,

     5245, 5249, 5251,  270, 5253, 5255, 5257, 5259, 5261, 5263,
     5265, 5267, 5269, 5271, 5275, 5277, 5279, 5281, 5283, 5285,
     5287, 5289, 5291, 5293, 5295, 5297, 5299, 5301, 5303, 5305,
     5307, 5309, 5311, 5313, 5315, 5317, 5319, 5321, 5323, 5325,
     5327,  261, 5329, 5331, 5333,  241, 5335, 5337, 5339,  231,
      230, 5341, 5343, 5345,  228, 5349, 5353, 5355, 5357,  219,
      217, 5361, 5365, 5367, 5369, 5371, 5373, 5375,  212, 5377,
     5379, 5381, 5383, 5385,  145, 5387, 5389, 5391,  131, 5393,
      117, 5395, 5397, 5399,   80, 5401
    } ;

static yyconst flex_int16_t yy_def[987] =
    {   0,
      896,    1,  897,  897,  898,  898,  896,  896,  896,  896,
      896,  899,  900,  901,  896,  896,   16,  896,  896,  896,
       20,   20,   22,   22,   22,   22,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      896,  896,  896,  896,  896,  896,  899,  896,  900,  901,
      896,  896,  902,  896,  903,   54,  896,  904,  896,  896,
       26,   26,   62,   62,   26,   26,   26,   26,   62,   26,
       26,   62,   26,   26,   26,   26,   26,   26,   62,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  896,  902,  896,  905,  114,  906,  896,  904,  896,
      120,   62,  122,  122,   26,   26,   26,  122,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  896,  172,  907,  908,  909,  896,  177,  896,  896,
      896,  180,  122,  183,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,  896,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  173,  173,  908,  910,  911,  896,  896,
      896,  240,  896,  896,  244,  896,  246,  183,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  896,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  912,  896,

      913,  914,  896,  896,  304,  896,  306,  896,  896,  896,
      896,  896,  311,   26,   26,   26,   26,   26,   26,   26,
       26,  915,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  896,  896,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  916,  917,  918,  896,  896,  896,  896,  896,
      369,  896,  896,  896,  374,  896,  376,   26,   26,   26,
       26,   26,   26,   26,   26,  896,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,  896,  896,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  913,  896,  919,  920,  896,
      896,  896,  432,  896,  434,  896,  896,  896,  896,  896,
      439,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  896,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  896,  896,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  921,  922,  923,  896,  896,  896,  896,  896,

      499,  896,  896,  503,  896,  505,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,  896,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  896,  896,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      924,  896,  925,  926,  896,  896,  556,  896,  558,  896,
      896,  896,  896,  562,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  896,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  896,  896,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,  927,  928,  929,  896,  896,  896,  896,  607,  896,
      610,  896,  612,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  896,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  896,  896,   26,   26,   26,   26,
       26,  930,  896,  931,  932,  896,  646,  896,  648,  896,
      896,  896,  896,  652,   26,   26,   26,   26,   26,   26,
      896,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  933,  934,  935,  896,  896,
      896,  896,  681,  896,  684,  896,  686,   26,   26,   26,
       26,  896,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,  936,  896,  937,  938,  896,  708,  896,
      710,  896,  896,  896,  896,  714,   26,   26,   26,  896,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      939,  940,  941,  942,  896,  896,  896,  896,  737,  896,
      740,  896,  742,   26,   26,   26,  896,  896,   26,   26,
       26,   26,   26,   26,   26,   26,  943,  896,  944,  896,
      945,  896,  762,  896,  764,  896,  896,  896,  946,  768,
       26,   26,  896,  896,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  947,  948,  896,  949,  950,  896,  896,
      896,  791,  896,  793,  951,   26,   26,  896,  896,   26,

       26,   26,   26,   26,   26,   26,   26,  952,  896,  953,
      954,  896,  812,  896,  896,  955,   26,  896,  956,   26,
      957,   26,   26,   26,   26,   26,  958,  896,  959,  960,
      896,  896,  961,   26,  962,  896,  963,   26,  964,  965,
      966,  896,  896,  896,  896,   26,   26,   26,  967,  896,
      968,  969,  896,  896,  896,  896,   26,   26,   26,   26,
      970,  971,  972,  896,  896,  896,   26,   26,   26,  973,
      896,  974,  975,  896,  896,   26,   26,  976,  977,  978,
      896,   26,  979,  896,  980,  981,  896,  982,  983,  976,
      896,  984,  985,  986,  896,    0,  896,  896,  896,  896,

      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896
    } ;

static yyconst flex_int16_t yy_nxt[5482] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   27,   27,   29,   30,   31,   32,   33,   27,
       34,   35,   36,   37,   38,   39,   27,   40,   27,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   27,   27,
       29,   30,   31,   32,   33,   27,   34,   35,   36,   37,
       38,   39,   27,   40,   27,   44,   45,   46,   45,   52,
      896,   61,  765,   53,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   55,   62,   56,   56,   56,   56,   56,

       56,   82,   57,  107,   61,   61,  896,   61,   61,   83,
       61,  123,   86,   44,   45,  124,   61,   78,   58,  889,
       62,   56,   56,   56,   56,   56,   56,   82,   57,  107,
       61,   61,   61,  887,   61,   83,   61,  123,   86,   46,
       45,  124,   61,   78,   58,   61,   61,  880,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   55,   61,   62,
       62,   63,   64,   62,   62,   61,   65,   61,   61,   61,
       66,   61,   67,   61,   61,   61,   61,   61,   61,   68,
       61,   61,   61,   61,   61,   62,   62,   63,   64,   62,
       62,   61,   65,   61,   61,   61,   66,   61,   67,   61,

       61,   61,   61,   61,   61,   68,   61,   61,   61,   61,
       61,   62,   62,   91,  863,   92,   44,   45,   61,  842,
       61,  841,   61,   98,   99,   61,  127,   61,   84,   61,
      833,   79,  816,  811,   85,  100,  101,   62,   62,   91,
       61,   92,   61,  795,   61,   61,   61,   80,   61,   98,
       99,   61,  127,   61,   84,   61,   69,   79,   62,   62,
       85,  100,  101,  761,  128,  132,   61,   70,   61,   61,
       71,   61,  119,   80,  110,   93,   61,  893,  893,  136,
       61,  893,   69,  886,   62,   62,   94,  896,  893,   95,
      128,  132,   61,   70,   87,   61,   71,  886,   88,  125,

      110,   93,   61,   62,   89,  126,   61,   72,   61,   90,
       61,   73,   94,   61,   61,   95,   74,   75,   61,  139,
       87,   76,   61,   77,   88,  125,  890,  886,  873,   62,
       89,  126,  886,   72,   61,   90,   61,   73,  873,   61,
       61,   61,   74,   75,  111,  139,  786,   76,   61,   77,
       61,   61,   61,   61,   61,   61,   61,   61,   61,  896,
       61,   61,   61,   61,   61,   61,   61,   61,   61,  873,
      111,  133,   61,   96,  852,   61,  131,   97,  878,  873,
      108,   81,  852,   61,  109,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,  102,  103,  133,   61,   96,

       61,   61,  131,   97,  129,  104,  108,   81,  137,   61,
      109,   61,  130,  105,  134,  135,   61,  147,   61,   61,
       61,  145,  106,   61,   61,   61,   61,  760,  852,  830,
      129,  104,  734,  852,  137,  830,   61,  849,  130,  105,
      134,  135,   61,  147,   61,  830,   61,  145,  106,   61,
       61,   61,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  115,   61,  116,  116,  116,  116,  116,  116,   61,
       57,  116,  116,  116,  116,  116,  116,  116,  116,  116,
       61,  788,  707,  769,  830,  788,  760,  118,   61,  116,
      116,  116,  116,  116,  116,   61,   57,  120,  120,  120,

      120,  120,  120,  120,  120,  120,   61,  140,  121,  121,
      121,  121,  121,  121,   61,  173,  173,  173,  173,  173,
      173,  173,  173,  173,   61,  738,  788,  760,  808,  715,
      788,  786,  760,  140,  121,  121,  121,  121,  121,  121,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  115,
       61,  122,  122,  122,  122,  122,  122,  138,   65,  141,
      152,  707,   61,  645,  682,  760,  142,  149,  707,   61,
      143,   61,  118,  146,  653,   61,  734,  122,  122,  122,
      122,  122,  122,  138,   65,  141,   61,   61,   61,  144,
       61,  148,  142,  149,   61,   61,  143,   61,  153,  146,

      150,   61,  154,   61,   61,   61,  151,   61,  156,  155,
      157,  158,   61,   61,   61,  144,   61,  148,   61,   61,
       61,  159,  160,  163,  153,  164,  150,   61,  154,   61,
       61,   61,  151,   61,  156,  155,  157,  158,  161,  166,
       61,   61,   61,  165,   61,   61,  707,  159,  160,  163,
      167,   61,  168,   61,  170,  162,  169,   61,   61,   61,
      184,   61,   61,   61,  161,  166,  185,   61,   61,  165,
      171,   61,   61,  645,  731,  720,  167,   61,  168,  608,
      170,  162,  169,   61,   61,   61,  184,   61,   61,   61,
      707,  645,  185,  554,  563,  118,  171,   61,   61,  172,

      172,  172,  172,  172,  172,  172,  172,  172,   55,  188,
      173,  173,  173,  173,  173,  173,  896,   57,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  191,   61,  645,
      554,  118,  500,  645,  554,  188,  173,  173,  173,  173,
      173,  173,  195,   57,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  191,   61,  178,  178,  178,  178,  178,
      178,  642,   61,  440,  118,  194,  554,  429,  195,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  429,  370,
       61,  178,  178,  178,  178,  178,  178,  179,   61,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  181,   61,

      182,  182,  182,  182,  182,  182,   61,  896,  554,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  429,  118,
      312,  118,  429,  302,  493,   61,  182,  182,  182,  182,
      182,  182,  183,  183,  183,  183,  183,  183,  183,  183,
      183,   55,  190,  183,  183,  183,  183,  183,  183,  186,
      187,  189,   61,   61,  241,   61,  192,  196,   61,  429,
      199,  302,   61,   61,  193,  302,   61,  206,  190,  183,
      183,  183,  183,  183,  183,  186,  187,  189,   61,   61,
       61,   61,  192,  196,   61,  197,  199,  198,   61,   61,
      193,  200,   61,  201,  202,   61,  203,  181,   61,  204,

      205,   61,   61,   61,  208,  207,   61,  118,  209,  210,
      302,  197,   61,  198,   61,   61,   61,  200,   61,  201,
      202,   61,  203,   61,   61,  204,  205,   61,   61,   61,
      208,  207,  211,  212,  220,  218,  217,  213,   61,  216,
       61,   61,   61,   61,   61,   61,  214,   61,   61,   61,
      215,   61,  219,  222,   61,   61,   61,  223,  221,  212,
      220,  218,  217,  213,   61,  216,   61,  176,   61,   61,
      227,   61,  214,   61,   61,  225,  215,   61,  219,  222,
       61,   61,   61,  228,  221,  224,   61,   61,   61,  229,
       61,   61,   61,  226,   61,   61,  227,  233,  230,   61,

      249,  225,   61,  232,  252,   61,  231,   61,  255,  228,
       61,  224,   61,   61,   61,  229,   61,   61,   61,  226,
       61,   61,  118,  233,  230,   61,  249,  896,   61,  232,
      252,   61,  231,   61,  255,  302,   61,  176,  299,  896,
      274,  118,   61,  176,   61,  176,   61,  234,  234,  234,
      234,  234,  234,  234,  234,  234,   55,  256,  235,  235,
      235,  235,  235,  235,   61,   57,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  176,  118,  118,  253,   50,
       51,   48,  112,  256,  235,  235,  235,  235,  235,  235,
       61,   57,  239,   60,  240,  240,  240,  240,  240,  240,

      240,  240,  240,  241,   61,  242,  242,  242,  242,  242,
      242,  896,   61,  245,  245,  245,  245,  245,  245,  245,
      245,  245,   59,   61,   51,   48,  896,   42,   42,  896,
       61,  242,  242,  242,  242,  242,  242,  179,   61,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  181,   61,
      245,  245,  245,  245,  245,  245,  896,  250,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  896,  896,  896,
      896,  896,  896,   61,   61,  251,  245,  245,  245,  245,
      245,  245,  246,  246,  246,  246,  246,  246,  246,  246,
      246,   61,  254,  247,  247,  247,  247,  247,  247,   61,

       61,  251,  896,  896,  896,  896,  896,  896,   61,  896,
      896,  896,  896,  896,  896,  896,  896,   61,  254,  247,
      247,  247,  247,  247,  247,  248,  248,  248,  248,  248,
      248,  248,  248,  248,   61,  257,  248,  248,  248,  248,
      248,  248,  258,  259,   61,   61,  260,  261,  262,  896,
      896,   61,  264,  896,   61,   61,  266,   61,   61,   61,
      263,  257,  248,  248,  248,  248,  248,  248,  258,  259,
       61,   61,  260,  261,  262,  265,   61,   61,  264,  272,
       61,   61,  266,   61,   61,   61,  263,  267,  268,   61,
       61,   61,   61,  273,  269,  270,  271,  896,  277,  896,

       61,  265,   61,   61,  278,  272,   61,  896,  275,  896,
       61,  896,  896,  267,  268,   61,   61,   61,   61,  273,
      269,  270,  271,  276,  277,   61,   61,  280,  279,   61,
      278,  282,   61,  281,  275,  283,   61,   61,  284,   61,
       61,  286,   61,   61,  285,  896,  287,   61,   61,  276,
      896,   61,   61,  280,  279,  290,   61,  282,  294,  281,
      288,  283,   61,   61,  284,   61,   61,  286,   61,   61,
      285,   61,  287,   61,   61,  289,  291,   61,   61,  292,
       61,  290,   61,   61,  293,   61,  288,  295,   61,  297,
      298,  296,   61,   61,  316,   61,   61,   61,  896,  314,

       61,  289,  291,   61,   61,  292,   61,   61,   61,   61,
      293,   61,  896,  295,  896,  297,  896,  296,   61,   61,
      316,   61,   61,   61,   61,  314,   61,  896,  896,  320,
       61,  896,  896,   61,   61,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  896,  896,  896,  896,  896,   61,
       61,  239,  896,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  241,   61,  305,  305,  305,  305,  305,  305,
      896,  321,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  896,  896,  896,  896,  896,  896,  896,   61,   61,
      305,  305,  305,  305,  305,  305,  306,  306,  306,  306,

      306,  306,  306,  306,  306,   61,   61,  307,  307,  307,
      307,  307,  307,  308,   61,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  896,  329,  896,  896,  896,  896,
      896,   61,   61,  307,  307,  307,  307,  307,  307,  179,
      896,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      181,  338,  310,  310,  310,  310,  310,  310,  896,   61,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  896,
       61,  896,  896,  896,  896,  896,  896,  338,  310,  310,
      310,  310,  310,  310,  179,   61,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  312,   61,  313,  313,  313,

      313,  313,  313,  896,  330,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  315,  322,   61,  323,  325,   61,
      317,  318,  319,  313,  313,  313,  313,  313,  313,   61,
       61,  324,   61,  896,   61,  327,   61,  328,   61,  331,
      315,  322,   61,  323,  325,   61,  317,  318,  319,   61,
      337,   61,  326,  332,  333,   61,   61,  324,   61,   61,
       61,  327,   61,  328,   61,  331,   61,  334,   61,  336,
      335,  339,  342,  896,  343,   61,   61,   61,  326,  332,
      333,  341,  896,   61,   61,   61,  340,   61,   61,   61,
       61,  345,   61,  334,   61,  336,  335,  339,  342,  344,

      343,  346,   61,  896,  349,  896,   61,  341,   61,   61,
       61,   61,  340,   61,   61,   61,   61,  345,  347,  348,
      350,   61,   61,  351,   61,  344,  353,  346,  360,  352,
      356,  354,   61,   61,   61,   61,  896,   61,   61,   61,
       61,  896,   61,  357,  347,  348,  350,   61,   61,  351,
       61,  361,  353,  355,   61,  352,  356,  354,  359,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,  357,
       61,  404,  379,  362,  896,  358,  896,  361,  896,  355,
       61,  896,  896,  896,  359,  380,   61,   61,   61,   61,
       61,  896,   61,   61,  896,  896,   61,  404,  379,  362,

      366,  358,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  380,  896,   61,  896,  896,   61,  239,   61,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  241,  896,
      368,  368,  368,  368,  368,  368,  896,  405,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  368,  368,  368,  368,
      368,  368,  239,  405,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  370,   61,  371,  371,  371,  371,  371,
      371,  896,  382,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  896,  896,   61,  896,  896,  378,  896,  896,

       61,  371,  371,  371,  371,  371,  371,  179,  382,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  181,  179,
       61,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      312,   61,  375,  375,  375,  375,  375,  375,  896,  896,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  896,
      896,  390,  896,  896,  896,  896,   61,   61,  375,  375,
      375,  375,  375,  375,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  381,  383,  377,  377,  377,  377,  377,
      377,  384,   61,   61,  385,   61,   61,  396,  389,   61,
       61,  896,   61,  896,  896,   61,  896,  896,  896,  381,

      383,  377,  377,  377,  377,  377,  377,  384,  896,   61,
      385,   61,   61,  396,  389,   61,   61,  392,   61,  386,
      386,   61,  386,  386,  386,  386,  386,  386,  387,  391,
      386,  393,   61,   61,  394,  400,  395,  398,  896,   61,
      386,  386,   61,  392,   61,   61,  397,   61,  399,  896,
      896,  407,   61,  896,   61,  391,  401,  393,   61,   61,
      394,  400,  395,  398,   61,   61,   61,  402,   61,  403,
       61,   61,  397,   61,  399,   61,  406,  407,   61,   61,
       61,  896,  401,  408,   61,  409,   61,   61,  411,  410,
       61,  412,   61,  402,  414,  403,  415,   61,  413,  896,

      416,   61,  406,   61,  424,   61,  418,   61,   61,  408,
       61,  409,   61,   61,  411,  410,   61,  412,  417,  419,
      896,   61,   61,   61,  413,  420,  416,   61,   61,   61,
       61,   61,  418,   61,   61,  421,  422,   61,   61,  452,
      423,   61,   61,  425,  417,  419,   61,   61,   61,   61,
      447,  420,   61,   61,   61,   61,   61,   61,  896,  896,
      896,  421,  422,   61,   61,  452,  423,   61,  896,  425,
      896,  896,   61,  896,  896,   61,  447,  896,   61,  896,
      896,   61,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  239,  896,  431,  431,  431,  431,  431,  431,  431,

      431,  431,  241,  239,  896,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  370,  472,  433,  433,  433,  433,
      433,  433,  896,  446,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  896,  896,  896,  896,  896,  896,  896,
      465,  472,  433,  433,  433,  433,  433,  433,  434,  434,
      434,  434,  434,  434,  434,  434,  434,   61,   61,  435,
      435,  435,  435,  435,  435,  436,  465,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  896,  473,  896,  896,
      460,  896,  896,   61,   61,  435,  435,  435,  435,  435,
      435,  179,  896,  373,  373,  373,  373,  373,  373,  373,

      373,  373,  179,  473,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  312,   61,  438,  438,  438,  438,  438,
      438,  896,   61,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  896,   61,  896,  896,  896,  896,  896,  896,
       61,  438,  438,  438,  438,  438,  438,  179,   61,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  440,   61,
      441,  441,  441,  441,  441,  441,  896,  448,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  445,  449,   61,
       61,  896,   61,  517,  450,  896,  441,  441,  441,  441,
      441,  441,  442,  448,  451,  443,   61,  453,   61,  455,

      896,  444,  896,  445,  449,   61,   61,  454,   61,  517,
      450,   61,  459,  896,   61,   61,  455,  896,  442,  461,
      451,  443,   61,  453,   61,  455,  456,  444,  463,  896,
      462,  464,  457,  454,  458,   61,   61,   61,  459,   61,
       61,   61,  455,  466,  477,  461,   61,   61,   61,  470,
      467,  468,  456,  896,  463,  469,  462,  464,  457,   61,
      458,   61,   61,  474,   61,   61,   61,   61,  896,  466,
      477,   61,   61,   61,   61,  470,  467,  468,   61,  471,
      896,  469,   61,   61,  896,   61,   61,  475,  482,  474,
       61,  896,   61,   61,   61,  476,  481,   61,  478,   61,

      479,  896,   61,  483,   61,  471,   61,  484,   61,   61,
      480,  896,   61,  475,  482,   61,  487,   61,   61,  485,
       61,  476,  481,   61,  478,   61,  479,   61,   61,  483,
      896,  492,   61,  484,   61,  486,  480,   61,  488,  489,
       61,   61,  487,   61,   61,  485,   61,  490,  491,   61,
       61,   61,   61,   61,  507,  516,  515,  492,  896,   61,
       61,  486,  896,   61,  488,  489,   61,  896,  896,  896,
       61,  896,   61,  490,  491,  896,   61,   61,   61,  896,
      507,  516,  515,  896,  496,   61,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  239,   61,  431,  431,  431,

      431,  431,  431,  431,  431,  431,  239,  896,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  370,  896,  498,
      498,  498,  498,  498,  498,  896,   61,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  498,  498,  498,  498,  498,
      498,  239,   61,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  500,  510,  501,  501,  501,  501,  501,  501,
      896,   61,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  896,  896,   61,  896,  896,  512,  896,  896,  510,
      501,  501,  501,  501,  501,  501,  179,   61,  373,  373,

      373,  373,  373,  373,  373,  373,  373,  312,  179,   61,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  440,
       61,  504,  504,  504,  504,  504,  504,  896,  896,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  896,  896,
      896,  896,  896,  896,  896,  896,   61,  504,  504,  504,
      504,  504,  504,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  514,  508,  506,  506,  506,  506,  506,  506,
       61,  509,  511,  896,  896,   61,  518,  896,   61,  896,
      519,   61,  896,  513,  896,   61,  896,  520,  514,  508,
      506,  506,  506,  506,  506,  506,   61,  509,  511,   61,

       61,   61,  518,   61,   61,  523,  519,   61,  521,  513,
      527,   61,  522,  520,   61,  526,   61,  524,   61,  525,
       61,   61,   61,  529,  528,   61,   61,   61,  531,   61,
       61,  523,  896,   61,  521,  530,  527,   61,  522,  533,
       61,  526,   61,  524,   61,  525,   61,   61,   61,  534,
      528,   61,  535,   61,  531,  536,   61,   61,  532,   61,
       61,  530,   61,   61,   61,  533,  537,  538,  539,  540,
      542,   61,  543,  896,  896,  534,  896,   61,  535,   61,
       61,  536,   61,   61,  532,  545,   61,   61,   61,   61,
       61,  541,  537,  538,   61,  540,  542,   61,  543,   61,

      544,   61,   61,  548,  547,   61,   61,  546,   61,   61,
       61,  545,   61,   61,  565,   61,  549,  541,   61,   61,
       61,  896,  896,  896,  896,   61,  544,   61,   61,  548,
      547,   61,  550,  546,   61,   61,   61,   61,   61,  896,
      565,  896,  549,  896,   61,   61,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  896,  896,   61,  550,  896,
       61,  896,  239,   61,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  370,  239,  896,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  500,  896,  557,  557,  557,
      557,  557,  557,  896,  896,  557,  557,  557,  557,  557,

      557,  557,  557,  557,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  557,  557,  557,  557,  557,  557,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  566,  575,
      559,  559,  559,  559,  559,  559,  896,   61,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  896,  896,  896,
      896,  896,  896,  896,  566,  575,  559,  559,  559,  559,
      559,  559,  179,   61,  560,  560,  560,  560,  560,  560,
      560,  560,  560,  440,  568,  561,  561,  561,  561,  561,
      561,  896,   61,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  896,  896,  896,  896,  896,  896,  896,  574,

      568,  561,  561,  561,  561,  561,  561,  179,   61,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  563,  567,
      564,  564,  564,  564,  564,  564,  569,  570,  572,   61,
      571,   61,  896,   61,   61,  896,   61,   61,   61,  896,
      577,  576,  573,  896,  896,  567,  564,  564,  564,  564,
      564,  564,  569,  570,  572,   61,  571,   61,   61,   61,
       61,   61,   61,   61,   61,  578,  577,  576,  573,  579,
      580,  582,   61,  581,   61,  583,  585,   61,  584,   61,
      586,   61,  587,  588,   61,   61,  589,   61,  896,   61,
       61,  578,   61,   61,  590,  579,  580,  582,   61,  581,

       61,  583,  585,   61,  584,   61,  591,   61,  587,   61,
      896,   61,  589,   61,   61,   61,   61,   61,   61,   61,
      590,  592,  593,  596,   61,   61,  595,  594,   61,  597,
      598,   61,  591,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,  896,  896,  896,  592,  593,  596,
       61,   61,  595,  594,   61,  597,  598,   61,  599,   61,
       61,   61,   61,   61,   61,  600,  601,   61,   61,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  614,   61,
       61,   61,   61,  896,  599,  896,  896,   61,  896,  896,
      896,  600,  601,  896,  896,  606,  606,  606,  606,  606,

      606,  606,  606,  606,  614,   61,   61,   61,   61,  239,
      896,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      500,  623,  606,  606,  606,  606,  606,  606,  896,   61,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  896,
      625,  896,  896,  896,  896,  896,  896,  623,  606,  606,
      606,  606,  606,  606,  239,   61,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  608,   61,  609,  609,  609,
      609,  609,  609,  179,   61,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  440,  635,  896,  896,  896,  896,
      896,  896,   61,  609,  609,  609,  609,  609,  609,  179,

       61,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      563,  635,  611,  611,  611,  611,  611,  611,  896,  896,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  896,
      896,  896,  896,  896,  896,  896,  896,  619,  611,  611,
      611,  611,  611,  611,  612,  612,  612,  612,  612,  612,
      612,  612,  612,   61,  621,  613,  613,  613,  613,  613,
      613,   61,  616,  619,  617,  615,   61,  622,  618,   61,
       61,   61,  624,  896,   61,  896,   61,  620,  896,   61,
      621,  613,  613,  613,  613,  613,  613,   61,  616,   61,
      617,  615,   61,  622,  618,   61,   61,   61,  624,  626,

       61,  627,   61,  620,  628,  629,  630,  636,  631,  632,
      634,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,  633,  896,  626,  896,  627,   61,   61,
      628,  629,  630,  636,  631,  632,  634,   61,   61,   61,
       61,  637,   61,   61,   61,   61,   61,   61,   61,  633,
      638,   61,  639,   61,   61,   61,   61,  640,   61,   61,
      656,   61,   61,  641,  655,   61,   61,  637,   61,  896,
      896,  896,  896,  896,  896,  896,  638,   61,  639,   61,
       61,   61,   61,  640,   61,   61,  656,   61,   61,  641,
      655,   61,   61,  239,   61,  431,  431,  431,  431,  431,

      431,  431,  431,  431,  500,  896,   61,   61,  239,  896,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  608,
      661,  647,  647,  647,  647,  647,  647,  896,  896,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  896,  896,
      896,  896,  896,  896,  896,   61,  661,  647,  647,  647,
      647,  647,  647,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  657,   61,  649,  649,  649,  649,  649,  649,
      896,   61,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  896,  665,  896,  896,  896,  896,  896,  657,   61,
      649,  649,  649,  649,  649,  649,  179,  896,  650,  650,

      650,  650,  650,  650,  650,  650,  650,  563,  896,  651,
      651,  651,  651,  651,  651,  896,   61,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  896,  658,  896,  896,
      896,  896,  896,  896,   61,  651,  651,  651,  651,  651,
      651,  179,   61,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  653,  658,  654,  654,  654,  654,  654,  654,
       61,  659,  660,  662,  663,   61,  664,  666,  667,   61,
      668,  896,   61,   61,   61,   61,  896,  896,   61,   61,
      654,  654,  654,  654,  654,  654,  669,  659,  660,  662,
      663,   61,  664,  666,  667,   61,  668,  670,   61,   61,

       61,   61,   61,  671,   61,   61,  672,  673,   61,  674,
      675,   61,  669,  688,   61,   61,   61,   61,   61,  692,
       61,   61,   61,  670,   61,  896,  896,  896,   61,  671,
      896,  896,  672,  673,   61,  674,  675,   61,  896,  688,
       61,   61,   61,   61,   61,  692,   61,   61,   61,  239,
       61,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      608,   61,  680,  680,  680,  680,  680,  680,  896,   61,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  896,
      700,  896,  896,  896,  896,  896,  896,   61,  680,  680,
      680,  680,  680,  680,  239,   61,  681,  681,  681,  681,

      681,  681,  681,  681,  681,  682,  691,  683,  683,  683,
      683,  683,  683,  896,   61,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  896,  896,   61,  896,  896,  896,
      896,  896,  691,  683,  683,  683,  683,  683,  683,  179,
       61,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      563,  179,   61,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  653,  896,  685,  685,  685,  685,  685,  685,
      896,  896,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  896,  896,  896,  896,  896,  896,   61,  896,  689,
      685,  685,  685,  685,  685,  685,  686,  686,  686,  686,

      686,  686,  686,  686,  686,  690,  693,  687,  687,  687,
      687,  687,  687,   61,  694,  689,   61,   61,  695,  896,
      896,   61,   61,  697,  696,  698,   61,  702,   61,  896,
      699,  690,  693,  687,  687,  687,  687,  687,  687,   61,
      694,  701,   61,   61,  695,   61,   61,   61,   61,  697,
      696,  698,   61,  702,   61,  703,  699,   61,  717,   61,
       61,   61,  896,   61,  896,   61,  896,  701,  896,  896,
      896,   61,   61,  896,  896,   61,  896,  896,  722,  896,
      896,  703,  896,   61,  717,   61,   61,   61,  239,   61,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  608,

      239,   61,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  682,   61,  709,  709,  709,  709,  709,  709,  896,
      896,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      896,  896,  896,  896,  896,  896,  896,  752,   61,  709,
      709,  709,  709,  709,  709,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  721,   61,  711,  711,  711,  711,
      711,  711,  896,   61,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  896,   61,  896,  896,  896,  896,  896,
      721,   61,  711,  711,  711,  711,  711,  711,  179,   61,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  653,

       61,  713,  713,  713,  713,  713,  713,  896,   61,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  896,  718,
      896,  896,  896,  896,  896,  896,   61,  713,  713,  713,
      713,  713,  713,  179,   61,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  715,  718,  716,  716,  716,  716,
      716,  716,   61,  719,  723,   61,  724,  725,  726,  727,
       61,  728,   61,  896,  773,   61,   61,  745,  729,   61,
       61,   61,  716,  716,  716,  716,  716,  716,  896,  719,
      723,   61,  724,  725,  726,  727,   61,  728,   61,  730,
      773,   61,   61,  896,  729,   61,   61,   61,  896,  896,

      896,   61,  774,   61,  896,   61,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  730,  896,  896,  739,  739,
      739,  739,  739,  739,  739,  739,  739,   61,  774,   61,
      896,   61,  239,  896,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  682,   61,  736,  736,  736,  736,  736,
      736,  179,  798,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  653,  896,  896,  896,  896,  896,  896,  896,
       61,  736,  736,  736,  736,  736,  736,  239,  798,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  738,  783,
      739,  739,  739,  739,  739,  739,  896,   61,  741,  741,

      741,  741,  741,  741,  741,  741,  741,  896,  896,  896,
      896,  896,  896,  896,  896,  783,  739,  739,  739,  739,
      739,  739,  179,   61,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  715,  744,  741,  741,  741,  741,  741,
      741,  896,  896,  896,  896,  896,  896,  896,  896,  896,
       61,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      744,  741,  741,  741,  741,  741,  741,  742,  742,  742,
      742,  742,  742,  742,  742,  742,   61,  746,  743,  743,
      743,  743,  743,  743,  747,  749,  896,   61,  896,  896,
      756,  896,  799,   61,  755,  753,  750,   61,   61,   61,

      748,  754,   61,  746,  743,  743,  743,  743,  743,  743,
      747,  749,  751,   61,   61,   61,  756,   61,  799,   61,
      755,  753,  750,   61,   61,   61,  748,  754,   61,   61,
      896,  896,  896,  896,  896,  896,  805,  896,  751,  896,
       61,   61,  239,   61,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  682,  239,   61,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  738,   61,  763,  763,  763,
      763,  763,  763,  896,  896,  767,  767,  767,  767,  767,
      767,  767,  767,  767,  896,  896,  804,  896,  896,  896,
      896,  782,   61,  763,  763,  763,  763,  763,  763,  764,

      764,  764,  764,  764,  764,  764,  764,  764,   61,   61,
      765,  765,  765,  765,  765,  765,  896,  782,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  896,  772,  896,
      896,  896,  896,  896,   61,   61,  765,  765,  765,  765,
      765,  765,  179,   61,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  715,  772,  767,  767,  767,  767,  767,
      767,  896,  818,  896,  896,  896,  896,  896,  896,   61,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  896,
      896,  767,  767,  767,  767,  767,  767,  179,  818,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  769,  775,

      770,  770,  770,  770,  770,  770,  771,  776,  777,   61,
      778,  779,  780,   61,  781,   61,   61,  896,  819,  896,
      896,  896,  896,  896,  896,  775,  770,  770,  770,  770,
      770,  770,  771,  776,  777,   61,  896,  896,  896,   61,
       61,   61,   61,  896,  819,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  179,  896,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  715,   61,  239,  896,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  738,  896,
      790,  790,  790,  790,  790,  790,  896,   61,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  822,  896,  896,

      896,  896,  896,  896,  896,  824,  790,  790,  790,  790,
      790,  790,  239,   61,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  800,   61,  792,  792,  792,  792,  792,
      792,  239,   61,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  738,   61,  896,  896,  896,  896,  896,  800,
       61,  792,  792,  792,  792,  792,  792,  179,   61,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  769,   61,
      794,  794,  794,  794,  794,  794,   61,  797,  801,  802,
      796,   61,  803,  896,  820,  826,   61,  835,   61,  806,
      837,   61,   61,  807,   61,   61,  794,  794,  794,  794,

      794,  794,   61,  797,  801,   61,  796,   61,   61,   61,
      820,  826,   61,  835,   61,  806,  837,   61,   61,  807,
       61,   61,  896,  823,  896,  896,  896,  896,  896,  896,
      817,   61,  896,  896,   61,   61,  239,  896,  812,  812,
      812,  812,  812,  812,  812,  812,  812,   61,   61,  813,
      813,  813,  813,  813,  813,  896,  817,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  896,  896,  896,  896,
      896,  896,  825,   61,   61,  813,  813,  813,  813,  813,
      813,  179,  896,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  769,  821,  815,  815,  815,  815,  815,  815,

      896,   61,  815,  815,  815,  815,  815,  815,  815,  815,
      815,   61,  896,   61,  896,  896,  896,  896,  896,  821,
      815,  815,  815,  815,  815,  815,  896,   61,  832,  832,
      832,  832,  832,  832,  832,  832,  832,   61,  239,   61,
      831,  831,  831,  831,  831,  831,  831,  831,  831,   61,
      896,  832,  832,  832,  832,  832,  832,  179,  896,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  769,  834,
       61,   61,  844,  845,  855,   61,   61,  832,  832,  832,
      832,  832,  832,  836,  836,  896,  836,  836,  836,  836,
      836,  836,  896,  856,  836,  834,   61,   61,  844,  845,

      855,  896,   61,  896,  836,  836,  239,  896,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  843,  843,  856,
      843,  843,  843,  843,  843,  843,  847,  848,  843,  853,
      854,  857,  858,  860,  859,  864,  865,  866,  843,  843,
       61,   61,  868,   61,  867,  869,   61,  874,   61,   61,
      875,  896,  847,  848,   61,  853,  854,  857,  858,  860,
      859,  864,  865,  866,   61,   61,   61,   61,  868,   61,
      867,  869,   61,  874,   61,   61,  875,  876,   61,  877,
       61,  881,  882,   61,   61,  896,  896,  896,  896,  896,
       61,   61,  896,  896,  896,  896,  896,  896,  896,   61,

      896,  896,   61,  876,   61,  877,  896,  881,  882,   61,
       61,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,   61,  896,  896,   61,   41,
       41,   41,   41,   43,   43,   43,   43,   47,   47,   47,
       47,   49,  896,   49,   49,   50,   50,   50,   50,  113,
      896,  113,  113,  117,  117,  174,  174,  175,  175,  236,
      236,  237,  237,  238,  238,  300,  300,  301,  301,  363,
      363,  364,  364,  365,  365,  388,  896,  388,  388,  426,
      426,  427,  427,  428,  428,  494,  494,  495,  495,  551,
      551,  552,  552,  553,  553,  602,  602,  603,  603,  604,

      604,  494,  494,  643,  643,  644,  644,  676,  676,  677,
      677,  678,  678,  704,  704,  705,  705,  706,  706,  603,
      603,  732,  732,  733,  733,  757,  757,  758,  758,  759,
      759,  784,  784,  785,  785,  787,  787,  677,  677,  809,
      809,  810,  810,  827,  827,  828,  828,  829,  829,  836,
      896,  836,  836,  838,  896,  838,  838,  839,  839,  840,
      840,  843,  896,  843,  843,  846,  896,  846,  846,  732,
      732,  850,  850,  851,  851,  861,  861,  862,  862,  870,
      870,  871,  871,  872,  872,  785,  785,  879,  879,  883,
      883,  884,  884,  885,  885,  888,  888,  891,  891,  892,

      892,  894,  894,  895,  895,    7,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896
    } ;

static yyconst flex_int16_t yy_chk[5482] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   10,   10,   11,   11,   15,
       17,   27,  985,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   24,   16,   16,   16,   16,   16,

       16,   28,   16,   37,   61,   24,   17,   27,   24,   28,
       37,   63,   30,   44,   44,   64,   28,   24,   16,  981,
       24,   16,   16,   16,   16,   16,   16,   28,   16,   37,
       61,   24,   30,  979,   24,   28,   37,   63,   30,   45,
       45,   64,   28,   24,   16,   20,   20,  975,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   30,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   21,   21,   32,  969,   32,   46,   46,   32,  961,
       21,  960,   21,   35,   35,   65,   68,   68,   29,   21,
      955,   25,  951,  950,   29,   35,   35,   21,   21,   32,
       29,   32,   25,  946,   32,   25,   21,   25,   21,   35,
       35,   65,   68,   68,   29,   21,   22,   25,   22,   22,
       29,   35,   35,  942,   69,   72,   29,   22,   25,   22,
       22,   25,  904,   25,   39,   33,   22,  895,  894,   76,
       39,  892,   22,  891,   22,   22,   33,  890,  889,   33,
       69,   72,   33,   22,   31,   22,   22,  888,   31,   66,

       39,   33,   22,   23,   31,   67,   39,   23,   66,   31,
       31,   23,   33,   76,   23,   33,   23,   23,   33,   79,
       31,   23,   67,   23,   31,   66,  887,  885,  884,   23,
       31,   67,  880,   23,   66,   31,   31,   23,  879,   76,
       23,   89,   23,   23,   40,   79,  878,   23,   67,   23,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       40,   26,   26,   26,   26,   26,   26,   89,   26,  872,
       40,   73,   26,   34,  871,   26,   71,   34,  870,  863,
       38,   26,  862,   71,   38,   73,   40,   26,   26,   26,
       26,   26,   26,   34,   26,   36,   36,   73,   26,   34,

       38,   26,   71,   34,   70,   36,   38,   26,   77,   71,
       38,   73,   70,   36,   74,   75,   74,   86,   86,   34,
       77,   84,   36,   75,   70,   36,   38,  861,  851,  850,
       70,   36,  849,  841,   77,  840,   84,  839,   70,   36,
       74,   75,   74,   86,   86,  829,   77,   84,   36,   75,
       70,   36,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   84,   54,   54,   54,   54,   54,   54,   92,
       54,   56,   56,   56,   56,   56,   56,   56,   56,   56,
      102,  828,  827,  815,  811,  810,  809,  808,  103,   54,
       54,   54,   54,   54,   54,   92,   54,   59,   59,   59,

       59,   59,   59,   59,   59,   59,  102,   80,   59,   59,
       59,   59,   59,   59,  103,  116,  116,  116,  116,  116,
      116,  116,  116,  116,   80,  790,  787,  785,  784,  767,
      761,  760,  759,   80,   59,   59,   59,   59,   59,   59,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       80,   62,   62,   62,   62,   62,   62,   78,   62,   81,
       93,  758,   78,  757,  736,  733,   82,   88,  732,   88,
       83,   62,  731,   85,  713,   81,  707,   62,   62,   62,
       62,   62,   62,   78,   62,   81,   82,   85,   78,   83,
       83,   87,   82,   88,   93,   88,   83,   62,   94,   85,

       90,   81,   95,   87,   94,   90,   91,   91,   97,   96,
       97,   97,   82,   85,   96,   83,   83,   87,   95,   97,
       93,   98,   99,  101,   94,  104,   90,   99,   95,   87,
       94,   90,   91,   91,   97,   96,   97,   97,  100,  106,
       96,   98,  101,  105,   95,   97,  706,   98,   99,  101,
      107,  105,  108,   99,  110,  100,  109,  110,  100,  104,
      123,  108,  107,  109,  100,  106,  124,   98,  101,  105,
      111,  126,  111,  705,  704,  692,  107,  105,  108,  680,
      110,  100,  109,  110,  100,  104,  123,  108,  107,  109,
      678,  677,  124,  676,  651,  645,  111,  126,  111,  114,

      114,  114,  114,  114,  114,  114,  114,  114,  114,  128,
      114,  114,  114,  114,  114,  114,  121,  114,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  131,  131,  644,
      643,  642,  606,  604,  603,  128,  114,  114,  114,  114,
      114,  114,  135,  114,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  131,  131,  118,  118,  118,  118,  118,
      118,  602,  135,  561,  554,  134,  553,  552,  135,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  551,  498,
      171,  118,  118,  118,  118,  118,  118,  120,  135,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  134,

      120,  120,  120,  120,  120,  120,  171,  178,  495,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  494,  493,
      438,  429,  428,  427,  426,  134,  120,  120,  120,  120,
      120,  120,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  130,  122,  122,  122,  122,  122,  122,  125,
      127,  129,  132,  129,  368,  125,  132,  136,  130,  365,
      139,  364,  139,  127,  133,  363,  136,  146,  130,  122,
      122,  122,  122,  122,  122,  125,  127,  129,  132,  129,
      133,  125,  132,  136,  130,  137,  139,  138,  139,  127,
      133,  140,  136,  141,  142,  141,  143,  310,  140,  144,

      145,  146,  137,  138,  148,  147,  133,  302,  149,  149,
      301,  137,  142,  138,  143,  144,  145,  140,  148,  141,
      142,  141,  143,  147,  140,  144,  145,  146,  137,  138,
      148,  147,  150,  151,  157,  155,  154,  152,  142,  153,
      143,  144,  145,  149,  148,  151,  152,  155,  153,  147,
      152,  154,  156,  159,  157,  152,  159,  160,  158,  151,
      157,  155,  154,  152,  158,  153,  150,  300,  156,  149,
      164,  151,  152,  155,  153,  162,  152,  154,  156,  159,
      157,  152,  159,  165,  158,  161,  161,  162,  164,  166,
      158,  160,  150,  163,  156,  163,  164,  170,  167,  165,

      184,  162,  186,  169,  186,  166,  168,  170,  189,  165,
      189,  161,  161,  162,  164,  166,  167,  160,  168,  163,
      169,  163,  299,  170,  167,  165,  184,  248,  186,  169,
      186,  166,  168,  170,  189,  238,  189,  237,  236,  235,
      209,  176,  167,  175,  168,  174,  169,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  190,  172,  172,
      172,  172,  172,  172,  190,  172,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  117,  115,   55,  187,   51,
       50,   47,   42,  190,  172,  172,  172,  172,  172,  172,
      190,  172,  177,   19,  177,  177,  177,  177,  177,  177,

      177,  177,  177,  177,  192,  177,  177,  177,  177,  177,
      177,  182,  187,  182,  182,  182,  182,  182,  182,  182,
      182,  182,   18,  197,   14,   12,    7,    4,    3,    0,
      192,  177,  177,  177,  177,  177,  177,  180,  187,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  197,
      180,  180,  180,  180,  180,  180,    0,  185,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,    0,    0,
        0,    0,    0,  200,  216,  185,  180,  180,  180,  180,
      180,  180,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  185,  188,  181,  181,  181,  181,  181,  181,  200,

      216,  185,    0,    0,    0,    0,    0,    0,  188,    0,
        0,    0,    0,    0,    0,    0,    0,  185,  188,  181,
      181,  181,  181,  181,  181,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  188,  191,  183,  183,  183,  183,
      183,  183,  193,  194,  193,  194,  195,  196,  198,    0,
        0,  198,  201,    0,  201,  191,  203,  203,  195,  196,
      199,  191,  183,  183,  183,  183,  183,  183,  193,  194,
      193,  194,  195,  196,  198,  202,  199,  198,  201,  207,
      201,  191,  203,  203,  195,  196,  199,  204,  205,  205,
      204,  202,  207,  208,  206,  206,  206,    0,  211,    0,

      211,  202,  199,  206,  212,  207,  208,    0,  210,    0,
      212,    0,    0,  204,  205,  205,  204,  202,  207,  208,
      206,  206,  206,  210,  211,  210,  211,  214,  213,  206,
      212,  217,  208,  215,  210,  218,  212,  213,  219,  215,
      220,  221,  221,  214,  220,    0,  222,  217,  229,  210,
        0,  210,  218,  214,  213,  224,  219,  217,  228,  215,
      223,  218,  222,  213,  219,  215,  220,  221,  221,  214,
      220,  224,  222,  217,  229,  223,  225,  223,  218,  226,
      226,  224,  219,  225,  227,  252,  223,  230,  222,  232,
      233,  231,  228,  227,  251,  232,  251,  224,    0,  249,

      249,  223,  225,  223,  263,  226,  226,  230,  231,  225,
      227,  252,    0,  230,    0,  232,    0,  231,  228,  227,
      251,  232,  251,  285,  233,  249,  249,    0,    0,  254,
      263,    0,    0,  230,  231,  239,  239,  239,  239,  239,
      239,  239,  239,  239,    0,    0,    0,    0,    0,  285,
      233,  240,    0,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  254,  240,  240,  240,  240,  240,  240,
      242,  255,  242,  242,  242,  242,  242,  242,  242,  242,
      242,    0,    0,    0,    0,    0,    0,    0,  287,  254,
      240,  240,  240,  240,  240,  240,  241,  241,  241,  241,

      241,  241,  241,  241,  241,  255,  326,  241,  241,  241,
      241,  241,  241,  243,  287,  243,  243,  243,  243,  243,
      243,  243,  243,  243,    0,  264,    0,    0,    0,    0,
        0,  255,  326,  241,  241,  241,  241,  241,  241,  244,
        0,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  273,  244,  244,  244,  244,  244,  244,  245,  264,
      245,  245,  245,  245,  245,  245,  245,  245,  245,    0,
      273,    0,    0,    0,    0,    0,    0,  273,  244,  244,
      244,  244,  244,  244,  246,  264,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  273,  246,  246,  246,

      246,  246,  246,  247,  265,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  250,  256,  256,  257,  259,  250,
      253,  253,  253,  246,  246,  246,  246,  246,  246,  257,
      253,  258,  258,    0,  259,  261,  261,  262,  265,  266,
      250,  256,  256,  257,  259,  250,  253,  253,  253,  262,
      272,  266,  260,  267,  268,  257,  253,  258,  258,  260,
      259,  261,  261,  262,  265,  266,  268,  269,  267,  271,
      270,  274,  276,    0,  277,  262,  270,  266,  260,  267,
      268,  275,    0,  269,  272,  260,  274,  275,  276,  271,
      277,  279,  268,  269,  267,  271,  270,  274,  276,  278,

      277,  280,  270,    0,  283,    0,  278,  275,  280,  269,
      272,  279,  274,  275,  276,  271,  277,  279,  281,  282,
      284,  284,  282,  286,  281,  278,  289,  280,  296,  288,
      292,  290,  278,  292,  280,  288,    0,  279,  283,  286,
      290,    0,  289,  293,  281,  282,  284,  284,  282,  286,
      281,  297,  289,  291,  297,  288,  292,  290,  295,  292,
      295,  288,  296,  293,  283,  286,  290,  291,  289,  293,
      294,  339,  315,  298,    0,  294,    0,  297,    0,  291,
      297,    0,    0,    0,  295,  316,  295,  316,  296,  293,
      298,    0,  315,  291,    0,    0,  294,  339,  315,  298,

      303,  294,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  316,    0,  316,    0,    0,  298,  304,  315,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,    0,
      304,  304,  304,  304,  304,  304,  305,  340,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  304,  304,  304,  304,
      304,  304,  306,  340,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  344,  306,  306,  306,  306,  306,
      306,  307,  318,  307,  307,  307,  307,  307,  307,  307,
      307,  307,    0,    0,  318,    0,    0,  314,    0,    0,

      344,  306,  306,  306,  306,  306,  306,  309,  318,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  311,
      318,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  314,  311,  311,  311,  311,  311,  311,  313,    0,
      313,  313,  313,  313,  313,  313,  313,  313,  313,    0,
        0,  324,    0,    0,    0,    0,  355,  314,  311,  311,
      311,  311,  311,  311,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  317,  319,  312,  312,  312,  312,  312,
      312,  320,  355,  320,  321,  324,  331,  331,  323,  317,
      319,    0,  321,    0,    0,  323,    0,    0,    0,  317,

      319,  312,  312,  312,  312,  312,  312,  320,    0,  320,
      321,  324,  331,  331,  323,  317,  319,  327,  321,  322,
      322,  323,  322,  322,  322,  322,  322,  322,  322,  325,
      322,  328,  325,  327,  329,  335,  330,  333,    0,  328,
      322,  322,  329,  327,  330,  333,  332,  334,  334,    0,
        0,  342,  335,    0,  342,  325,  336,  328,  325,  327,
      329,  335,  330,  333,  336,  328,  332,  337,  329,  338,
      330,  333,  332,  334,  334,  338,  341,  342,  335,  337,
      342,    0,  336,  343,  341,  345,  343,  345,  347,  346,
      336,  348,  332,  337,  350,  338,  351,  347,  349,    0,

      352,  338,  341,  346,  361,  337,  354,  348,  352,  343,
      341,  345,  343,  345,  347,  346,  349,  348,  353,  356,
        0,  353,  354,  347,  349,  357,  352,  357,  350,  346,
      351,  356,  354,  348,  352,  358,  359,  359,  361,  386,
      360,  358,  349,  362,  353,  356,  381,  353,  354,  360,
      381,  357,  389,  357,  350,  362,  351,  356,    0,    0,
        0,  358,  359,  359,  361,  386,  360,  358,    0,  362,
        0,    0,  381,    0,    0,  360,  381,    0,  389,    0,
        0,  362,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  367,    0,  367,  367,  367,  367,  367,  367,  367,

      367,  367,  367,  369,    0,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  404,  369,  369,  369,  369,
      369,  369,  371,  380,  371,  371,  371,  371,  371,  371,
      371,  371,  371,    0,    0,    0,    0,    0,    0,    0,
      397,  404,  369,  369,  369,  369,  369,  369,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  380,  397,  370,
      370,  370,  370,  370,  370,  372,  397,  372,  372,  372,
      372,  372,  372,  372,  372,  372,    0,  405,    0,    0,
      392,    0,    0,  380,  397,  370,  370,  370,  370,  370,
      370,  373,    0,  373,  373,  373,  373,  373,  373,  373,

      373,  373,  374,  405,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  392,  374,  374,  374,  374,  374,
      374,  375,  411,  375,  375,  375,  375,  375,  375,  375,
      375,  375,    0,  422,    0,    0,    0,    0,    0,    0,
      392,  374,  374,  374,  374,  374,  374,  376,  411,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  422,
      376,  376,  376,  376,  376,  376,  377,  382,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  379,  383,  383,
      379,    0,  382,  452,  384,    0,  376,  376,  376,  376,
      376,  376,  378,  382,  385,  378,  384,  387,  388,  388,

        0,  378,    0,  379,  383,  383,  379,  387,  382,  452,
      384,  391,  391,    0,  385,  387,  387,    0,  378,  393,
      385,  378,  384,  387,  388,  388,  390,  378,  395,    0,
      394,  396,  390,  387,  390,  393,  394,  391,  391,  390,
      385,  387,  387,  398,  409,  393,  409,  396,  395,  402,
      399,  400,  390,    0,  395,  401,  394,  396,  390,  398,
      390,  393,  394,  406,  402,  390,  399,  400,    0,  398,
      409,  401,  409,  396,  395,  402,  399,  400,  466,  403,
        0,  401,  403,  406,    0,  398,  407,  407,  414,  406,
      402,    0,  399,  400,  408,  408,  413,  401,  410,  410,

      412,    0,  413,  415,  466,  403,  414,  416,  403,  406,
      412,    0,  407,  407,  414,  415,  419,  412,  417,  417,
      408,  408,  413,  419,  410,  410,  412,  416,  413,  415,
        0,  425,  414,  416,  425,  418,  412,  418,  420,  421,
      420,  415,  419,  412,  417,  417,  421,  423,  424,  419,
      424,  450,  451,  416,  442,  451,  450,  425,    0,  423,
      425,  418,    0,  418,  420,  421,  420,    0,    0,    0,
      442,    0,  421,  423,  424,    0,  424,  450,  451,    0,
      442,  451,  450,    0,  430,  423,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  431,  442,  431,  431,  431,

      431,  431,  431,  431,  431,  431,  432,    0,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,    0,  432,
      432,  432,  432,  432,  432,  433,  468,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  432,  432,  432,  432,  432,
      432,  434,  468,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  445,  434,  434,  434,  434,  434,  434,
      435,  469,  435,  435,  435,  435,  435,  435,  435,  435,
      435,    0,    0,  445,    0,    0,  447,    0,    0,  445,
      434,  434,  434,  434,  434,  434,  437,  469,  437,  437,

      437,  437,  437,  437,  437,  437,  437,  437,  439,  445,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      447,  439,  439,  439,  439,  439,  439,  441,    0,  441,
      441,  441,  441,  441,  441,  441,  441,  441,    0,    0,
        0,    0,    0,    0,    0,    0,  447,  439,  439,  439,
      439,  439,  439,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  449,  443,  440,  440,  440,  440,  440,  440,
      443,  444,  446,    0,    0,  449,  453,    0,  444,    0,
      454,  446,    0,  448,    0,  453,    0,  455,  449,  443,
      440,  440,  440,  440,  440,  440,  443,  444,  446,  448,

      454,  449,  453,  455,  444,  458,  454,  446,  456,  448,
      462,  453,  457,  455,  458,  461,  456,  459,  457,  460,
      460,  463,  461,  464,  463,  448,  454,  462,  467,  455,
      470,  458,    0,  459,  456,  465,  462,  467,  457,  472,
      458,  461,  456,  459,  457,  460,  460,  463,  461,  473,
      463,  465,  474,  462,  467,  475,  470,  464,  471,  459,
      471,  465,  477,  467,  474,  472,  476,  478,  479,  480,
      482,  475,  483,    0,    0,  473,    0,  465,  474,  482,
      478,  475,  476,  464,  471,  485,  471,  480,  477,  483,
      474,  481,  476,  478,  488,  480,  482,  475,  483,  481,

      484,  485,  479,  489,  487,  482,  478,  486,  476,  486,
      492,  485,  484,  480,  507,  483,  490,  481,  487,  489,
      488,    0,    0,    0,    0,  481,  484,  485,  479,  489,
      487,  490,  491,  486,  507,  486,  492,  491,  484,    0,
      507,    0,  490,    0,  487,  489,  496,  496,  496,  496,
      496,  496,  496,  496,  496,    0,    0,  490,  491,    0,
      507,    0,  497,  491,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  499,    0,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,    0,  499,  499,  499,
      499,  499,  499,  501,    0,  501,  501,  501,  501,  501,

      501,  501,  501,  501,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  499,  499,  499,  499,  499,  499,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  508,  517,
      500,  500,  500,  500,  500,  500,  504,  508,  504,  504,
      504,  504,  504,  504,  504,  504,  504,    0,    0,    0,
        0,    0,    0,    0,  508,  517,  500,  500,  500,  500,
      500,  500,  503,  508,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  510,  503,  503,  503,  503,  503,
      503,  506,  510,  506,  506,  506,  506,  506,  506,  506,
      506,  506,    0,    0,    0,    0,    0,    0,    0,  516,

      510,  503,  503,  503,  503,  503,  503,  505,  510,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  509,
      505,  505,  505,  505,  505,  505,  511,  512,  514,  509,
      513,  513,    0,  516,  514,    0,  512,  519,  511,    0,
      519,  518,  515,    0,    0,  509,  505,  505,  505,  505,
      505,  505,  511,  512,  514,  509,  513,  513,  515,  516,
      514,  518,  512,  519,  511,  520,  519,  518,  515,  521,
      522,  524,  520,  523,  524,  525,  527,  522,  526,  526,
      528,  531,  529,  530,  515,  532,  533,  518,    0,  521,
      529,  520,  527,  523,  534,  521,  522,  524,  520,  523,

      524,  525,  527,  522,  526,  526,  535,  531,  529,  538,
        0,  532,  533,  535,  528,  521,  529,  530,  527,  523,
      534,  536,  537,  541,  536,  537,  540,  539,  543,  542,
      544,  541,  535,  546,  547,  538,  539,  544,  548,  535,
      528,  542,  540,  530,    0,    0,    0,  536,  537,  541,
      536,  537,  540,  539,  543,  542,  544,  541,  545,  546,
      547,  545,  539,  544,  548,  549,  550,  542,  540,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  565,  573,
      565,  549,  550,    0,  545,    0,    0,  545,    0,    0,
        0,  549,  550,  557,    0,  557,  557,  557,  557,  557,

      557,  557,  557,  557,  565,  573,  565,  549,  550,  556,
        0,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  575,  556,  556,  556,  556,  556,  556,  559,  582,
      559,  559,  559,  559,  559,  559,  559,  559,  559,    0,
      577,    0,    0,    0,    0,    0,    0,  575,  556,  556,
      556,  556,  556,  556,  558,  582,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  585,  558,  558,  558,
      558,  558,  558,  560,  577,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  560,  589,    0,    0,    0,    0,
        0,    0,  585,  558,  558,  558,  558,  558,  558,  562,

      577,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  589,  562,  562,  562,  562,  562,  562,  564,    0,
      564,  564,  564,  564,  564,  564,  564,  564,  564,    0,
        0,    0,    0,    0,    0,    0,    0,  570,  562,  562,
      562,  562,  562,  562,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  570,  572,  563,  563,  563,  563,  563,
      563,  566,  567,  570,  568,  566,  568,  574,  569,  567,
      569,  572,  576,    0,  576,    0,  574,  571,    0,  570,
      572,  563,  563,  563,  563,  563,  563,  566,  567,  571,
      568,  566,  568,  574,  569,  567,  569,  572,  576,  578,

      576,  579,  574,  571,  580,  581,  583,  590,  584,  586,
      588,  591,  592,  583,  593,  571,  578,  581,  586,  579,
      580,  595,  588,  587,    0,  578,    0,  579,  584,  587,
      580,  581,  583,  590,  584,  586,  588,  591,  592,  583,
      593,  594,  578,  581,  586,  579,  580,  595,  588,  587,
      596,  598,  597,  594,  584,  587,  599,  600,  600,  615,
      616,  617,  596,  601,  614,  621,  616,  594,  597,    0,
        0,    0,    0,    0,    0,    0,  596,  598,  597,  594,
      614,  601,  599,  600,  600,  615,  616,  617,  596,  601,
      614,  621,  616,  605,  597,  605,  605,  605,  605,  605,

      605,  605,  605,  605,  605,    0,  614,  601,  607,    0,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      623,  607,  607,  607,  607,  607,  607,  609,    0,  609,
      609,  609,  609,  609,  609,  609,  609,  609,    0,    0,
        0,    0,    0,    0,    0,  628,  623,  607,  607,  607,
      607,  607,  607,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  618,  618,  608,  608,  608,  608,  608,  608,
      611,  628,  611,  611,  611,  611,  611,  611,  611,  611,
      611,    0,  627,    0,    0,    0,    0,    0,  618,  618,
      608,  608,  608,  608,  608,  608,  610,    0,  610,  610,

      610,  610,  610,  610,  610,  610,  610,  610,    0,  610,
      610,  610,  610,  610,  610,  613,  627,  613,  613,  613,
      613,  613,  613,  613,  613,  613,    0,  619,    0,    0,
        0,    0,    0,    0,  619,  610,  610,  610,  610,  610,
      610,  612,  627,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  619,  612,  612,  612,  612,  612,  612,
      619,  620,  622,  624,  625,  624,  626,  629,  630,  620,
      631,    0,  626,  625,  629,  630,    0,    0,  622,  631,
      612,  612,  612,  612,  612,  612,  632,  620,  622,  624,
      625,  624,  626,  629,  630,  620,  631,  633,  626,  625,

      629,  630,  632,  634,  622,  631,  637,  638,  638,  639,
      640,  641,  632,  655,  633,  657,  639,  655,  658,  661,
      634,  637,  640,  633,  662,    0,    0,    0,  632,  634,
        0,    0,  637,  638,  638,  639,  640,  641,    0,  655,
      633,  657,  639,  655,  658,  661,  634,  637,  640,  646,
      662,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  666,  646,  646,  646,  646,  646,  646,  647,  668,
      647,  647,  647,  647,  647,  647,  647,  647,  647,    0,
      671,    0,    0,    0,    0,    0,    0,  666,  646,  646,
      646,  646,  646,  646,  648,  668,  648,  648,  648,  648,

      648,  648,  648,  648,  648,  648,  660,  648,  648,  648,
      648,  648,  648,  649,  671,  649,  649,  649,  649,  649,
      649,  649,  649,  649,    0,    0,  660,    0,    0,    0,
        0,    0,  660,  648,  648,  648,  648,  648,  648,  650,
      671,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  652,  660,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,    0,  652,  652,  652,  652,  652,  652,
      654,    0,  654,  654,  654,  654,  654,  654,  654,  654,
      654,    0,    0,    0,    0,    0,    0,  656,    0,  656,
      652,  652,  652,  652,  652,  652,  653,  653,  653,  653,

      653,  653,  653,  653,  653,  659,  663,  653,  653,  653,
      653,  653,  653,  656,  664,  656,  673,  664,  665,    0,
        0,  659,  663,  667,  665,  669,  665,  674,  674,    0,
      670,  659,  663,  653,  653,  653,  653,  653,  653,  667,
      664,  672,  673,  664,  665,  669,  670,  659,  663,  667,
      665,  669,  665,  674,  674,  675,  670,  672,  688,  690,
      699,  725,    0,  675,    0,  667,    0,  672,    0,    0,
        0,  669,  670,    0,    0,  729,    0,    0,  694,    0,
        0,  675,    0,  672,  688,  690,  699,  725,  679,  675,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,

      681,  729,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  694,  681,  681,  681,  681,  681,  681,  683,
        0,  683,  683,  683,  683,  683,  683,  683,  683,  683,
        0,    0,    0,    0,    0,    0,    0,  723,  694,  681,
      681,  681,  681,  681,  681,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  693,  730,  682,  682,  682,  682,
      682,  682,  685,  723,  685,  685,  685,  685,  685,  685,
      685,  685,  685,    0,  693,    0,    0,    0,    0,    0,
      693,  730,  682,  682,  682,  682,  682,  682,  684,  723,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,

      693,  684,  684,  684,  684,  684,  684,  687,  746,  687,
      687,  687,  687,  687,  687,  687,  687,  687,    0,  689,
        0,    0,    0,    0,    0,    0,  689,  684,  684,  684,
      684,  684,  684,  686,  746,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  689,  686,  686,  686,  686,
      686,  686,  689,  691,  695,  691,  696,  697,  698,  700,
      698,  701,  701,    0,  747,  700,  697,  718,  702,  696,
      702,  695,  686,  686,  686,  686,  686,  686,    0,  691,
      695,  691,  696,  697,  698,  700,  698,  701,  701,  703,
      747,  700,  697,    0,  702,  696,  702,  695,    0,    0,

        0,  718,  748,  752,  709,  703,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  703,  711,    0,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  718,  748,  752,
        0,  703,  708,    0,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  754,  708,  708,  708,  708,  708,
      708,  712,  773,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,    0,    0,    0,    0,    0,    0,    0,
      754,  708,  708,  708,  708,  708,  708,  710,  773,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  756,
      710,  710,  710,  710,  710,  710,  716,  756,  716,  716,

      716,  716,  716,  716,  716,  716,  716,    0,    0,    0,
        0,    0,    0,    0,    0,  756,  710,  710,  710,  710,
      710,  710,  714,  756,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  717,  714,  714,  714,  714,  714,
      714,    0,    0,    0,    0,    0,    0,    0,    0,  739,
      717,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      717,  714,  714,  714,  714,  714,  714,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  717,  719,  715,  715,
      715,  715,  715,  715,  720,  721,    0,  721,    0,    0,
      728,    0,  774,  719,  727,  724,  722,  727,  775,  778,

      720,  726,  728,  719,  715,  715,  715,  715,  715,  715,
      720,  721,  722,  721,  722,  724,  728,  726,  774,  719,
      727,  724,  722,  727,  775,  778,  720,  726,  728,  796,
        0,    0,    0,    0,    0,    0,  781,    0,  722,    0,
      722,  724,  735,  726,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  737,  796,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  781,  737,  737,  737,
      737,  737,  737,  741,    0,  741,  741,  741,  741,  741,
      741,  741,  741,  741,    0,    0,  780,    0,    0,    0,
        0,  755,  781,  737,  737,  737,  737,  737,  737,  738,

      738,  738,  738,  738,  738,  738,  738,  738,  755,  780,
      738,  738,  738,  738,  738,  738,  743,  755,  743,  743,
      743,  743,  743,  743,  743,  743,  743,    0,  745,    0,
        0,    0,    0,    0,  755,  780,  738,  738,  738,  738,
      738,  738,  740,  745,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  745,  740,  740,  740,  740,  740,
      740,    0,  798,    0,    0,    0,    0,    0,  763,  745,
      763,  763,  763,  763,  763,  763,  763,  763,  763,    0,
        0,  740,  740,  740,  740,  740,  740,  742,  798,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  749,

      742,  742,  742,  742,  742,  742,  744,  750,  751,  744,
      753,  753,  753,  751,  753,  749,  750,    0,  799,    0,
        0,    0,    0,    0,    0,  749,  742,  742,  742,  742,
      742,  742,  744,  750,  751,  744,    0,    0,    0,  751,
      753,  749,  750,  765,  799,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  766,    0,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  753,  762,    0,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,    0,
      762,  762,  762,  762,  762,  762,  770,  807,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  802,    0,    0,

        0,    0,    0,    0,    0,  804,  762,  762,  762,  762,
      762,  762,  764,  807,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  776,  802,  764,  764,  764,  764,  764,
      764,  789,  804,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  776,    0,    0,    0,    0,    0,  776,
      802,  764,  764,  764,  764,  764,  764,  768,  804,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  776,
      768,  768,  768,  768,  768,  768,  771,  772,  777,  779,
      771,  772,  779,    0,  800,  806,  800,  818,  806,  782,
      820,  822,  820,  783,  777,  823,  768,  768,  768,  768,

      768,  768,  771,  772,  777,  782,  771,  772,  779,  783,
      800,  806,  800,  818,  806,  782,  820,  822,  820,  783,
      777,  823,    0,  803,    0,    0,    0,    0,    0,    0,
      797,  782,    0,    0,  779,  783,  791,    0,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  797,  803,  791,
      791,  791,  791,  791,  791,  792,  797,  792,  792,  792,
      792,  792,  792,  792,  792,  792,    0,    0,    0,    0,
        0,    0,  805,  797,  803,  791,  791,  791,  791,  791,
      791,  793,    0,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  801,  793,  793,  793,  793,  793,  793,

      794,  805,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  801,    0,  824,    0,    0,    0,    0,    0,  801,
      793,  793,  793,  793,  793,  793,  813,  805,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  801,  812,  824,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  825,
        0,  812,  812,  812,  812,  812,  812,  814,    0,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  817,
      826,  834,  836,  836,  844,  825,  817,  812,  812,  812,
      812,  812,  812,  821,  821,    0,  821,  821,  821,  821,
      821,  821,    0,  845,  821,  817,  826,  834,  836,  836,

      844,    0,  817,    0,  821,  821,  831,    0,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  837,  837,  845,
      837,  837,  837,  837,  837,  837,  838,  838,  837,  843,
      843,  846,  846,  848,  847,  853,  854,  855,  837,  837,
      848,  860,  858,  838,  857,  859,  859,  864,  846,  858,
      866,    0,  838,  838,  847,  843,  843,  846,  846,  848,
      847,  853,  854,  855,  857,  868,  848,  860,  858,  838,
      857,  859,  859,  864,  846,  858,  866,  867,  867,  869,
      847,  874,  876,  877,  882,    0,    0,    0,    0,    0,
      857,  868,    0,    0,    0,    0,    0,    0,    0,  869,

        0,    0,  876,  867,  867,  869,    0,  874,  876,  877,
      882,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  869,    0,    0,  876,  897,
      897,  897,  897,  898,  898,  898,  898,  899,  899,  899,
      899,  900,    0,  900,  900,  901,  901,  901,  901,  902,
        0,  902,  902,  903,  903,  905,  905,  906,  906,  907,
      907,  908,  908,  909,  909,  910,  910,  911,  911,  912,
      912,  913,  913,  914,  914,  915,    0,  915,  915,  916,
      916,  917,  917,  918,  918,  919,  919,  920,  920,  921,
      921,  922,  922,  923,  923,  924,  924,  925,  925,  926,

      926,  927,  927,  928,  928,  929,  929,  930,  930,  931,
      931,  932,  932,  933,  933,  934,  934,  935,  935,  936,
      936,  937,  937,  938,  938,  939,  939,  940,  940,  941,
      941,  943,  943,  944,  944,  945,  945,  947,  947,  948,
      948,  949,  949,  952,  952,  953,  953,  954,  954,  956,
        0,  956,  956,  957,    0,  957,  957,  958,  958,  959,
      959,  962,    0,  962,  962,  963,    0,  963,  963,  964,
      964,  965,  965,  966,  966,  967,  967,  968,  968,  970,
      970,  971,  971,  972,  972,  973,  973,  974,  974,  976,
      976,  977,  977,  978,  978,  980,  980,  982,  982,  983,

      983,  984,  984,  986,  986,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[108] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
    1, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 1985 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 2095 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 897 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5406 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 60 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 62 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::ACCEPT_UNKNOWN_FQDN_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::REMOTE_AUTOCONF_NEIGHBORS_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 108 "SrvLexer.l"
{ return SrvParser::DS_LITE_TUNNEL_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 122 "SrvLexer.l"
{ return SrvParser::CLIENT_CLASS_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{ return SrvParser::MATCH_IF_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
{ return SrvParser::EQ_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 125 "SrvLexer.l"
{ return SrvParser::AND_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 126 "SrvLexer.l"
{ return SrvParser::OR_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_DATA_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_EN_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 130 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_DATA_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 131 "SrvLexer.l"
{ return SrvParser::ALLOW_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
{ return SrvParser::DENY_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
{ return SrvParser::SUBSTRING_; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 134 "SrvLexer.l"
{ return SrvParser::CONTAIN_; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 135 "SrvLexer.l"
{ return SrvParser::STRING_KEYWORD_; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 136 "SrvLexer.l"
{ return SrvParser::ADDRESS_LIST_; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 139 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 140 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 141 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 142 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 144 "SrvLexer.l"
;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 146 "SrvLexer.l"
;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 148 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno; 
}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 153 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 154 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 155 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 93:
YY_RULE_SETUP
#line 162 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 171 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 180 "SrvLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 189 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 198 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 207 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 216 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 228 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 235 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 256 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd then no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 288 "SrvLexer.l"
{
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   // Log(Crit) << "#### Detected [" << yytext << "] as DUID [len=" << len << "]" << LogEnd;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
        x = (toupper(*pos)-'A' + 10);
      else
        x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))	
        x += (toupper(*(pos+1))-'A' + 10);
      else
        x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }
   
   return SrvParser::DUID_;
}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 316 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd; 
      YYABORT; 
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 326 "SrvLexer.l"
{ 
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) { 
        Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd; 
        YYABORT; 
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 335 "SrvLexer.l"
{ return yytext[0]; } 
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 338 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 2884 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 897 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 897 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 896);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 338 "SrvLexer.l"




