#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 88
#define YY_END_OF_BUFFER 89
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[729] =
    {   0,
        1,    1,    0,    0,    0,    0,   89,   87,    2,    1,
        1,   87,   70,   87,   87,   86,   86,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   74,   74,
       88,    1,    1,    1,    0,   82,   70,    0,   82,   72,
       71,   86,    0,    0,   85,    0,   79,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   67,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   16,
       17,   83,   83,   83,   83,   83,   83,   83,   83,   73,

       71,   86,    0,    0,   78,   84,   77,   77,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   66,   86,
        0,    0,    0,   76,   76,    0,   77,    0,   77,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   29,
       83,   83,   40,   83,   83,   83,   83,   83,   83,    0,
       83,   83,   83,   83,   83,   83,   22,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   68,   83,   83,

       83,   83,   86,    0,    0,    0,    0,   76,    0,   76,
        0,   77,   77,   77,   77,   83,   83,   83,   83,   83,
       83,    4,   83,   83,   83,   83,   83,   69,   83,    3,
       83,   83,   83,   83,   83,   83,    0,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,    7,   83,   23,
       83,   83,   83,   83,   83,   83,   83,   83,   83,    0,
        0,    0,    0,   76,   76,   76,   76,    0,   77,   77,
       77,    0,   77,   83,   83,   83,   83,   83,   83,   83,
       83,   28,   83,   83,   35,   83,   83,   83,   83,   83,
       83,   83,   83,   83,    0,    0,   83,   83,   83,   33,

       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,    0,    0,    0,   76,
       76,   76,    0,   76,    0,    0,   77,   77,   77,   77,
       83,   83,   31,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
        0,    0,   83,   83,   83,   83,   83,   49,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   20,   83,   83,
       83,    0,    0,    0,    0,    0,   76,   76,   76,   76,
        0,   77,   77,   77,    0,   77,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,

       83,   83,   83,   83,   45,   83,   12,   10,    0,    0,
       83,   83,   83,   47,   83,   83,   83,   83,   83,   83,
       83,   83,   83,    5,   83,   83,   83,   13,    0,    0,
        0,   76,   76,   76,    0,   76,   81,   77,   77,   77,
       77,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   11,
        0,    0,   83,   83,   83,   48,   83,   83,   83,   83,
       30,   83,   83,    6,   37,   83,   83,    0,    0,    0,
       80,   76,   76,   76,   76,   77,   77,   77,    0,   77,
       83,   83,   83,   83,   83,   83,   46,   83,   83,   83,

       83,   83,   34,   83,   32,   83,   83,   83,    0,    0,
       42,   41,   36,   83,   21,   83,   83,   39,   38,   83,
       83,    0,    0,   76,   76,   76,    0,   76,   77,   77,
       77,   77,   83,   14,   51,   83,   83,   55,   83,   83,
       83,   58,   83,   83,   83,   83,   83,   44,   43,   83,
       83,   83,   83,   50,    0,    0,    0,   76,   76,   76,
       76,   77,   77,   77,    0,   77,   83,   57,   83,   83,
       83,   83,   59,   52,   83,   83,    8,   83,   24,   83,
       83,    0,    0,   76,   76,   76,    0,   76,   77,   77,
       77,   77,   83,   56,   83,   83,   83,   83,   83,   53,

       83,   83,   83,   83,    0,    0,    0,   76,   76,   76,
       76,   77,   77,   77,    0,   77,   83,   83,   83,   83,
       83,   83,   83,   83,   15,   19,    0,   75,   78,   76,
       76,   76,    0,   76,   77,   77,   77,   77,   83,   26,
       83,   60,   83,   25,   83,   83,    0,   75,    0,   76,
       76,   76,   76,   76,   77,   77,   77,    0,   77,   83,
       27,   61,   83,   83,   83,   83,   83,   75,   78,   76,
        0,   76,   76,   76,   76,   77,   77,   77,   54,   83,
       83,   83,   83,   83,   18,   75,   76,   76,   76,   76,
       77,   77,   77,   62,   63,   64,   65,    9,   76,   76,

        0,   76,   76,   77,   76,   76,   77,   76,   76,    0,
       76,   76,   76,   76,    0,   76,   76,   76,   76,    0,
       76,   76,   76,   76,    0,   76,   76,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
        1,    1,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,    1,    1,    1,    1,    1,   23,   24,   25,   26,

       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[49] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        3,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    5,    6,    6,    6,    6,    6,    6,    1,    7,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[860] =
    {   0,
        0,    0, 2440, 2439,    0,    0, 2446, 2449, 2449,   46,
       48, 2440,    0, 2437,   45,   45, 2397, 2420,   82,   51,
      108,  110,  112,  131,  162, 2398,   46,   47,  129,   42,
      122,  168,  166,  179,   43,  177,   44,  118, 2449, 2428,
     2449,   51,  136,  140, 2434, 2449,    0, 2431, 2430, 2449,
        0,  210, 2414,  176, 2449,    0,  189, 2392,  228, 2409,
     2407, 2389,  107, 2406,  227,  178,  126,  222,  121,   45,
     2396,  175,  232,  237,  239,  233,  234,  223, 2386,  125,
      225,  229,  236,  242,  240,  252,  251,  250,  266, 2385,
     2384,  280,  256, 2383,  261,  262,  264,  258,  265, 2449,

        0,  311,  280, 2403,  288,    0,  331, 2402,  347, 2396,
     2382,  339, 2391,  276,  349,  350,  368,  297,  353,  354,
      342,  344,  343,  278,  363,  362,  364,  380,  385,  388,
      369,  376,  365,  374,  372,  377,  386,  379,  378,  403,
      382,  401,  400,  405,  408,  399,  409,  404, 2377,  440,
      419, 2397, 2396,  460, 2395,    0,  478,  484, 2394,  500,
     2377,  512,  426,  407,  397,  493,  489,  490,  503, 2371,
      495,  510, 2370,  499,  514,  501,  505,  507,  524, 2402,
      521,  511,  402,  522,  534,  526, 2368,  539,  525,  447,
      156,  528,  545,  548,  549,  541,  563, 2367,  555,  553,

      543,  571, 2387,  563, 2386, 2385,    0,  604,  576, 2384,
     2394,  622, 2382,  640, 2381, 2380,  552,  567,  566,  636,
      573,  642,  569,  630,  570,  638,  644, 2358,  666,  667,
      647,  652,  651,  656,  649,  661,  662,  654,  662,  669,
      657,  675,  665,  670,  547,  692,  672, 2357,  679, 2356,
      674,  689,  685,  697,  678,  682,  714,  687,  703, 2376,
     2375, 2374, 2384,  747, 2372,  765, 2371,    0,  720, 2370,
      783,  724, 2369,  734,  710,  693,  711,  712,  785,  696,
      778,  804,  805,  716, 2347,  781,  782,  783,  776,  799,
      788,  786,  801,  797, 2352, 2361,  798,  794,  795, 2344,

      802,  807,  812,  822,  814,  841,  842,  818,  816,  827,
      817,  825,  821,  832,  857,  838, 2364, 2363,    0,  860,
     2362,  890,  863, 2361, 2371,  861,  908, 2359,  926, 2358,
      859,  833, 2336,  275,  849,  836,  924,  851,  921,  927,
      854,  931,  923,  936,  934,  895,  935,  941,  942,  944,
     2343, 2337,  949,  932,  937,  945,  940, 2333,  963,  953,
      948,  962,  971,  954,  959,  960,  968, 2332,  964,  967,
      969, 2352, 2351, 2350, 2360, 1002, 1014, 2348, 1032, 2347,
        0, 2346, 2345, 1050,  992, 2344, 1052, 1044, 1039, 1071,
     1056, 1054,  978, 1042, 1063, 1055, 1057, 1058, 1062, 1060,

     1065, 1061, 1083, 1075, 2322, 1076, 2321, 2320, 2339, 2317,
     1078, 1084, 1085, 2317, 1086, 1103, 1090, 1082, 1088, 1094,
     1092, 1097, 1089, 2316, 1107,  852, 1098, 2315, 2335, 2334,
        0, 2333, 2332, 1140, 1146, 2331,    0, 1164, 2330, 1182,
     2329, 1171, 1104, 1109, 1105,  980, 1106, 1184, 1202, 1099,
     1190, 1179, 1193, 1177, 1176, 1194, 1213, 1189, 1215, 2307,
     2318, 2321, 1192, 1186, 1191, 2304, 1196, 1211, 1205, 1210,
     2303, 1206, 1203, 2302, 2301, 1217, 1220, 2321, 2320, 2319,
        0, 1253, 2318, 1271, 2317, 2316, 2315, 1289, 1295, 2314,
     1209,  698, 1214, 1297, 1294, 1300, 2292, 1293, 1291, 1240,

     1301, 1298, 2291, 1307, 2290, 1299, 1295, 1304, 2296, 2291,
     2287, 2286, 2285, 1308, 2284, 1314, 1319, 2283, 2282, 1219,
     1306, 2302, 2301, 2300, 2299, 1352, 1358, 2298, 1376, 2297,
     1394, 2296, 1321, 2274, 2273, 1316, 1216, 2272, 1396, 1390,
     1345, 2271, 1317, 1391, 1399, 1401, 1402, 2449, 2449, 1403,
     1387, 1318, 1404, 2270, 2290, 2289, 2288, 1437, 2287, 1455,
     2286, 2285, 2284, 1473, 1479, 2283, 1393, 2261, 1481, 1486,
     1483, 1476, 2260, 2259, 1489, 1487, 1475, 1488, 2258, 1395,
     1406, 2278, 2277, 2276, 2275, 1522, 1528, 2274, 1546, 2273,
     1564, 2272, 2250, 2249, 1315, 1553, 1567, 1491, 1479, 2248,

     1557, 1485, 1482, 1568, 2268, 2263, 2251, 1601, 2239, 1619,
     2227, 2215, 2212, 1637, 1578, 2206, 1570, 1639, 1566, 1631,
     1644, 1641, 1400, 1638, 2182, 2173, 2188, 2185,    0, 2173,
     2170, 1677, 1652, 2149, 1695, 2146, 1713, 2134, 1473, 2089,
     1643, 2077, 1728, 2053, 1646, 1710, 2062, 2038, 2026, 2002,
     1761, 1987, 1779,    0, 1960, 1948, 1797,    0, 1929, 1704,
     1898, 1895, 1748, 1664, 1711, 1721, 1722, 1902, 2449, 1888,
        0, 1859, 1849, 1815,    0, 1833, 1846,    0, 1824,  591,
     1826, 1784, 1794, 1712, 1823, 1843, 1842, 1841, 1859,    0,
     1840, 1751,    0, 1727, 1726, 1725, 1724, 1719, 1739, 1738,

        0,    0, 2449,    0, 1737, 1736, 2449, 1735, 1734,    0,
     1728, 1661, 1651, 1649,    0, 1609, 1586, 1577, 1576,    0,
     1536, 1445, 1384, 1154,    0, 1022,  877, 2449, 1887, 1894,
     1901, 1908, 1915, 1922, 1926, 1929, 1933, 1936, 1939, 1943,
     1946, 1949, 1952, 1956, 1959, 1962,  791, 1965, 1968, 1971,
     1974,  339, 1977, 1980, 1983, 1986, 1989, 1992, 1995, 1998,
      293, 2002, 2004, 2007, 2010, 2013,  169, 2017, 2019, 2022,
     2025, 2028, 2031, 2034, 2037, 2040,  128, 2043, 2046, 2049,
     2052,   52, 2055, 2058, 2061, 2064, 2067, 2070, 2073, 2076,
     2079, 2082, 2085, 2088, 2091, 2094, 2097, 2100, 2103, 2106,

     2109, 2112, 2115, 2118, 2121, 2124, 2127, 2130, 2133, 2136,
     2139, 2142, 2145, 2148, 2151, 2154, 2157, 2160, 2163, 2166,
     2169, 2172, 2175, 2178, 2181, 2184, 2187, 2190, 2193, 2196,
     2199, 2202, 2205, 2208, 2211, 2214, 2217, 2220, 2223, 2226,
     2229, 2232, 2235, 2238, 2241, 2244, 2247, 2250, 2253, 2256,
     2259, 2262, 2265, 2268, 2271, 2274, 2277, 2280, 2283
    } ;

static yyconst flex_int16_t yy_def[860] =
    {   0,
      728,    1,  729,  729,  730,  730,  728,  728,  728,  728,
      728,  731,  732,  733,  728,  728,   16,  728,  728,   19,
       19,   19,   19,   19,   19,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,  728,  728,
      728,  728,  728,  728,  731,  728,  732,  733,  728,  728,
      734,  728,  735,  736,  728,  737,  738,   25,   19,   59,
       59,   25,   25,   59,   25,   25,   25,   25,   25,   25,
       59,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,  728,

      734,  728,  739,  740,  741,  737,  728,  742,   59,  109,
      109,   25,  109,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,  728,
      743,  744,  745,  728,  746,  747,  728,  748,  749,  109,
      160,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,  728,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,  150,  743,  750,  751,  752,  728,  753,  754,
      747,  728,  755,  728,  756,  160,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,  728,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,  728,
      757,  758,  752,  728,  759,  728,  760,  761,  762,  728,
      728,  763,  764,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,  728,  728,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,  765,  766,  767,  768,
      728,  728,  769,  770,  761,  762,  728,  771,  728,  772,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
      728,  728,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,  728,  773,  774,  767,  768,  728,  775,  728,  776,
      777,  326,  728,  728,  778,  779,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   25,  728,  728,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,  780,  781,
      782,  376,  728,  728,  783,  784,  777,  728,  785,  728,
      786,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
      728,  728,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,  728,  787,  788,
      782,  728,  789,  728,  790,  326,  728,  728,  791,  792,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   25,  728,  728,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,  793,  794,  376,  728,  728,  795,  796,  728,  797,
      728,  798,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,  728,  728,   25,
       25,   25,   25,   25,  728,  799,  800,  728,  801,  728,
      802,  326,  728,  728,  803,  804,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,  805,  806,  376,  728,  728,  807,  808,  728,  809,
      728,  810,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,  728,  811,  812,  728,  813,  728,
      814,  326,  728,  728,  815,  816,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,  817,  818,  819,  376,
      728,  728,  820,  821,  728,  822,  728,  823,   25,   25,
       25,   25,   25,   25,   25,   25,  728,  824,  728,  825,
      728,  826,  728,  827,  326,  728,  728,  828,  829,   25,
       25,   25,   25,   25,   25,   25,   25,  830,  728,  831,
      832,  376,  728,  728,  833,  728,  834,  835,   25,   25,
       25,   25,   25,   25,   25,  728,  836,  837,  728,  838,
      326,  728,  839,   25,   25,   25,   25,   25,  728,  840,

      841,  376,  728,  842,  843,  844,  728,  728,  845,  846,
      847,  848,  728,  849,  850,  851,  852,  728,  853,  854,
      855,  856,  728,  857,  858,  859,  728,    0,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,

      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728
    } ;

static yyconst flex_int16_t yy_nxt[2498] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   26,   26,   28,   26,   29,   30,   31,   26,   32,
       33,   34,   35,   36,   37,   26,   38,   26,   42,   43,
       44,   43,   50,   42,   43,  481,   51,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   53,   54,   54,   54,
       54,   54,   54,   74,   55,   59,   59,   76,   95,   81,
       98,   75,  120,   77,   58,   58,   58,   58,   58,   58,
       56,   58,   58,   58,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   53,   59,   59,   60,   61,   59,   59,
       58,   62,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   63,   58,   58,   58,   58,   58,
       64,  437,   59,   59,   59,   59,   59,   59,   44,   43,
       66,   65,   42,   43,   99,   67,   68,   82,  112,   58,
       58,  119,   69,   71,   58,   59,   59,   70,   83,   78,
       58,   84,  130,   58,   58,   79,  117,   58,   58,   72,
       80,   58,  375,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,  728,   58,   58,   58,   58,   58,   58,
       85,   58,   90,   91,   86,   87,   88,   53,   58,   96,

      122,   92,  248,   97,   73,   55,  116,   89,   58,   93,
       58,  108,  108,  108,  108,  108,  108,   58,   94,   58,
       58,   58,  102,  102,  102,  102,  102,  102,  102,  102,
      102,   53,  103,  103,  103,  103,  103,  103,  132,   55,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  114,
      109,  109,  109,  109,  109,  109,  118,  115,  123,  124,
      127,  125,  128,  129,   58,   58,  131,   58,  134,   58,
       58,   58,  133,  139,   58,   58,   58,  135,   58,   58,
      126,   58,   58,  136,   58,  137,  138,  140,  141,  142,
      143,  145,   58,   58,   58,  146,  325,  148,   58,  147,

       58,   53,  175,   58,   58,  149,   58,   58,   58,   55,
      155,  155,  155,  155,  155,  155,  165,   58,   58,  169,
       58,  390,   58,  150,  150,  150,  150,  150,  150,  150,
      150,  150,   53,  151,  151,  151,  151,  151,  151,   58,
       55,  156,  263,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  158,  159,  159,  159,  159,  159,  159,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  163,  160,
      160,  160,  160,  160,  160,  166,  167,  168,  170,  173,
      171,   58,  172,  174,   58,   58,   58,  176,  177,  179,
      178,   58,   58,  180,  181,   58,   58,  182,  187,  183,

      184,  188,  189,  190,   58,   58,   58,   58,  191,  185,
       58,   58,  194,  186,   58,  192,   58,  193,   58,   58,
       58,   58,   58,  195,   58,  196,  197,   58,   58,  200,
       58,  198,  199,  221,  201,  220,  202,  222,  241,   58,
       53,   58,   58,   58,   58,   58,   58,   58,   55,   58,
       58,   58,  203,  203,  203,  203,  203,  203,  203,  203,
      203,   53,  204,  204,  204,  204,  204,  204,   58,   55,
      207,  247,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  209,  210,  210,  210,  210,  210,  210,  156,   58,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  158,

      213,  213,  213,  213,  213,  213,  215,  215,  215,  215,
      215,  215,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  218,  216,  216,  216,  216,  216,  216,  223,  224,
      225,   58,   58,  226,  227,   58,  228,   58,  219,  229,
      230,   58,  231,   58,  232,   58,  238,   58,  233,   58,
      246,  240,   58,   58,   58,  242,   58,  234,  235,  236,
      243,  239,  244,   58,   58,  245,   58,   58,   58,  249,
       58,  250,  255,  251,  254,  253,   58,  256,  257,  258,
      259,   58,  280,   58,  728,   58,  304,   58,  252,   58,
       58,   58,   55,  274,   58,   58,  284,   58,  267,  267,

      267,  267,  267,  267,  275,   58,  276,  694,   58,   58,
      282,   58,   58,   58,  207,   58,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  209,  265,  265,  265,  265,
      265,  265,  156,   58,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  158,  270,  270,  270,  270,  270,  270,
      156,  281,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  272,  273,  273,  273,  273,  273,  273,  277,  278,
      279,  283,   58,  285,  286,  287,  288,  289,   58,  290,
       58,  291,  292,  294,   58,  293,   58,  295,  298,   58,
      297,   58,  300,   58,   58,  299,   58,  301,   58,   58,

      302,  305,  296,   58,   58,  307,  303,   58,   58,   58,
      308,   58,   58,  306,   58,  309,   58,   58,  310,  311,
       58,   58,  313,  314,   58,  312,  315,   58,  316,   58,
      156,   58,  332,  333,   58,   58,  337,  334,   58,   58,
       58,  158,  335,  331,  534,   58,  330,  330,  330,  330,
      330,  330,   58,   58,   58,  341,   58,  207,   58,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  209,  321,
      321,  321,  321,  321,  321,  207,   58,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  323,  324,  324,  324,
      324,  324,  324,  156,  211,  327,  327,  327,  327,  327,

      327,  327,  327,  327,  272,  328,  328,  328,  328,  328,
      328,  336,  338,  339,  340,  342,  343,  344,   58,  345,
       58,  346,  347,   58,   58,   58,  349,   58,   58,  348,
       58,  350,  353,  354,  355,  357,   58,   58,  360,   58,
       58,   58,  356,   58,   58,  358,   58,   58,  359,   58,
      361,  362,  363,  365,   58,  364,   58,  366,   58,   58,
       58,  367,  368,   58,   58,  369,  370,   58,  371,   58,
      207,  156,  389,  394,   58,   58,  391,  392,   58,  476,
       58,  209,  728,   58,   58,  380,  380,  380,  380,  380,
      380,   58,  387,   58,   58,  388,   58,  399,  725,   58,

      207,   58,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  323,  378,  378,  378,  378,  378,  378,  156,  404,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  272,
      383,  383,  383,  383,  383,  383,  156,   58,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  385,  386,  386,
      386,  386,  386,  386,  393,  395,  396,  400,  402,  401,
      403,  405,  397,   58,  398,   58,   58,  406,  407,   58,
      408,  411,  419,   58,   58,  412,   58,   58,   58,   58,
      413,  415,   58,   58,   58,  414,   58,   58,  416,  418,
       58,   58,  420,  421,  426,   58,   58,  422,  417,  423,

      424,   58,   58,  425,   58,   58,   58,  427,  428,   58,
       58,   58,  207,   58,  441,  441,  441,  441,  441,  441,
       58,  495,   58,  728,  207,  448,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  323,  433,  433,  433,  433,
      433,  433,  207,  725,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  435,  436,  436,  436,  436,  436,  436,
      156,  444,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  385,  439,  439,  439,  439,  439,  439,  442,  443,
      445,   58,  446,  447,   58,  450,   58,  449,  454,  451,
      456,  453,  458,  452,   58,  455,   58,   58,   58,   58,

       58,  459,   58,   58,   58,   58,  457,   58,  463,  460,
      464,  465,  467,   58,  468,  466,  469,   58,   58,  471,
       58,  470,  472,  473,   58,   58,   58,   58,   58,  474,
       58,   58,   58,  475,   58,  477,   58,  492,  494,   58,
       58,   58,  496,  493,  499,   58,   58,   58,   58,   58,
      207,   58,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  435,  483,  483,  483,  483,  483,  483,  485,  485,
      485,  485,  485,  485,  156,  725,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  385,  487,  487,  487,  487,
      487,  487,  156,  491,  488,  488,  488,  488,  488,  488,

      488,  488,  488,  489,  490,  490,  490,  490,  490,  490,
      497,  498,  500,   58,  501,  502,  503,  504,   58,   58,
      505,   58,  506,  507,  508,  512,   58,  511,   58,  514,
      513,   58,   58,   58,   58,   58,   58,  515,   58,  516,
      517,  518,  519,  520,   58,   58,  521,   58,   58,  533,
      569,   58,   58,   58,  535,   58,   58,   58,   58,   58,
      553,   58,   58,  207,  541,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  435,  525,  525,  525,  525,  525,
      525,  207,   58,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  527,  528,  528,  528,  528,  528,  528,  156,

      540,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      489,  530,  530,  530,  530,  530,  530,  532,  532,  532,
      532,  532,  532,  536,  537,  538,  539,  542,  543,  544,
      554,  546,  545,   58,  547,   58,   58,   58,  550,   58,
       58,   58,   58,   58,  551,  552,   58,  567,   58,   58,
       58,  568,  573,  580,  572,  618,   58,   58,   58,   58,
       58,   58,  207,   58,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  527,  559,  559,  559,  559,  559,  559,
      561,  561,  561,  561,  561,  561,  156,   58,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  489,  563,  563,

      563,  563,  563,  563,  156,  720,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  565,  566,  566,  566,  566,
      566,  566,  570,  571,  574,  575,  576,  577,  579,   58,
      578,  593,   58,   58,  581,   58,  603,   58,   58,  645,
      604,   58,   58,   58,   58,   58,   58,  207,   58,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  527,  585,
      585,  585,  585,  585,  585,  207,  725,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  587,  588,  588,  588,
      588,  588,  588,  156,  601,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  565,  590,  590,  590,  590,  590,

      590,  592,  592,  592,  592,  592,  592,  594,  595,  596,
      597,  599,  660,  600,  602,   58,  598,   58,   58,  622,
      621,   58,  625,   58,   58,   58,  624,   58,   58,   58,
       58,   58,  207,   58,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  587,  609,  609,  609,  609,  609,  609,
      611,  611,  611,  611,  611,  611,  156,  720,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  565,  613,  613,
      613,  613,  613,  613,  156,  619,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  615,  616,  616,  616,  616,
      616,  616,  620,  623,  626,   58,  639,  720,  715,   58,

      638,  638,  638,  638,  638,  638,  641,  720,   58,   58,
       58,  207,   58,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  587,  631,  631,  631,  631,  631,  631,  207,
      715,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      633,  634,  634,  634,  634,  634,  634,  156,  642,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  615,  636,
      636,  636,  636,  636,  636,  640,  643,  644,  646,  661,
      715,  666,  710,   58,  654,  654,  654,  654,  654,  654,
       58,   58,  715,   58,  682,   58,   58,  207,   58,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  633,  652,

      652,  652,  652,  652,  652,  156,   58,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  615,  656,  656,  656,
      656,  656,  656,  156,  683,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  658,  659,  659,  659,  659,  659,
      659,  662,  663,  664,  667,  665,   58,  684,  685,  710,
      679,  698,   58,   58,   58,  710,  701,  710,  701,  701,
      671,   58,  680,   58,   58,  681,   58,   58,   58,   58,
       58,  207,  658,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  633,  673,  673,  673,  673,  673,  673,  207,
       58,  674,  674,  674,  674,  674,  674,  674,  674,  674,

      696,  675,  675,  675,  675,  675,  675,  156,  697,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  658,  677,
      677,  677,  677,  677,  677,  207,   58,  689,  689,  689,
      689,  689,  689,  689,  689,  689,   58,  690,  690,  690,
      690,  690,  690,  156,  695,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  658,  692,  692,  692,  692,  692,
      692,  658,  701,  671,  649,   58,   58,  658,   58,  207,
      633,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      633,  703,  703,  703,  703,  703,  703,   39,   39,   39,
       39,   39,   39,   39,   41,   41,   41,   41,   41,   41,

       41,   45,   45,   45,   45,   45,   45,   45,   47,  671,
       47,   47,   47,   47,   47,   48,   48,   48,   48,   48,
       48,   48,  101,  649,  101,  101,  101,  101,  101,  104,
      104,  104,  103,  103,  103,  103,  106,   58,  106,  107,
       58,  107,  151,  151,  151,  151,  152,  152,  152,  154,
      658,  154,  159,  159,  159,  204,  204,  204,  204,  205,
      205,  205,  206,  206,  206,  210,  210,  210,  214,  615,
      214,  213,  213,  213,  260,  260,  260,  261,  261,  261,
      266,  615,  266,  265,  265,  265,  270,  270,  270,  273,
      273,  273,  317,  317,  317,  318,  318,  318,  321,  321,

      321,  324,  324,  324,  326,  326,  326,  329,  633,  329,
      328,  328,  328,  372,  372,  372,  373,  373,  373,  376,
      376,  376,  379,  671,  379,  378,  378,  378,  383,  383,
      383,  386,  386,  386,  429,  429,  429,  430,  430,  430,
      433,  433,  433,  436,  436,  436,  440,  669,  440,  439,
      439,  439,  478,  478,  478,  479,  479,  479,  484,  649,
      484,  483,  483,  483,  487,  487,  487,  490,  490,  490,
      522,  522,  522,  523,  523,  523,  525,  525,  525,  528,
      528,  528,  531,  607,  531,  530,  530,  530,  555,  555,
      555,  556,  556,  556,  560,   58,  560,  559,  559,  559,

      563,  563,  563,  566,  566,  566,  582,  582,  582,  583,
      583,  583,  585,  585,  585,  588,  588,  588,  591,   58,
      591,  590,  590,  590,  605,  605,  605,  606,  606,  606,
      610,   58,  610,  609,  609,  609,  613,  613,  613,  616,
      616,  616,  627,  627,  627,  628,  628,  628,  631,  631,
      631,  634,  634,  634,  637,  658,  637,  636,  636,  636,
      647,  647,  647,  648,  648,  648,  650,  615,  650,  653,
      633,  653,  652,  652,  652,  656,  656,  656,  659,  659,
      659,  668,  668,  668,  670,  670,  670,  673,  673,  673,
      675,  587,  675,  678,  587,  678,  677,  677,  677,  686,

      686,  686,  687,  687,  687,  688,  649,  688,  690,  607,
      690,  692,  692,  692,  693,   58,  693,  699,  699,  699,
      700,  700,  700,  703,   58,  703,  704,  615,  704,  705,
      705,  705,  706,  565,  706,  707,  565,  707,  708,  708,
      708,  709,  709,  709,  711,  711,  711,  712,  633,  712,
      713,  713,  713,  714,  714,  714,  716,  716,  716,  717,
      587,  717,  718,  718,  718,  719,  719,  719,  721,  721,
      721,  722,  629,  722,  723,  723,  723,  724,  724,  724,
      726,  726,  726,  654,  607,  654,  727,  727,  727,  557,
       58,   58,  617,  615,  565,  587,  527,  527,  607,  557,

       58,   58,   58,   58,  565,  489,  489,  587,  527,  105,
      557,  480,   58,   58,   58,   58,   58,  565,  489,  527,
      435,  435,  557,  480,   58,   58,   58,   58,   58,   58,
      549,  548,   58,   58,   58,  489,  385,  385,  527,  435,
      105,  480,  374,   58,   58,   58,   58,  510,  509,   58,
      489,  385,  435,  323,  323,  480,  374,   58,   58,   58,
      462,  461,   58,   58,   58,  385,  272,  272,  435,  323,
      431,  105,  374,  262,   58,   58,  410,  409,   58,  385,
      272,  381,  323,  209,  374,  262,   58,  352,  351,   58,
      272,  158,  323,  209,  319,  105,  262,  153,   58,   58,

       58,  728,  272,  158,  268,  209,  262,  153,  728,   58,
       58,  237,   58,   58,  217,  158,  209,  105,  153,   58,
      164,  162,  161,  158,  153,  144,   58,   58,   58,  121,
      113,   58,  111,  110,   58,  105,   48,   49,   46,  100,
       58,   57,  728,   49,   46,  728,   40,   40,    7,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728

    } ;

static yyconst flex_int16_t yy_chk[2498] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   10,   10,
       11,   11,   15,   42,   42,  782,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   27,   16,   20,   20,   28,   35,   30,
       37,   27,   70,   28,   30,   35,   37,   70,   27,   28,
       16,   19,   19,   20,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       21,  777,   21,   21,   22,   22,   23,   23,   43,   43,
       22,   21,   44,   44,   38,   22,   22,   31,   63,   63,
       21,   69,   22,   24,   23,   24,   24,   23,   31,   29,
       38,   31,   80,   69,   31,   29,   67,   80,   67,   24,
       29,   29,  767,   24,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       32,   25,   34,   34,   32,   33,   33,   54,  191,   36,

       72,   34,  191,   36,   25,   54,   66,   33,   33,   34,
       32,   57,   57,   57,   57,   57,   57,   72,   34,   36,
       66,   34,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   82,   52,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   65,
       59,   59,   59,   59,   59,   59,   68,   65,   73,   74,
       76,   75,   77,   78,   68,   78,   81,   81,   84,   65,
       59,   82,   83,   87,   73,   76,   77,   85,   83,   74,
       75,   75,   85,   86,   84,   86,   86,   88,   89,   92,
       93,   95,   88,   87,   86,   96,  761,   98,   93,   97,

       98,  103,  124,   95,   96,   99,   97,   99,   89,  103,
      105,  105,  105,  105,  105,  105,  114,  334,  114,  118,
      124,  334,   92,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  118,
      102,  107,  752,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  112,  109,
      109,  109,  109,  109,  109,  115,  116,  117,  119,  122,
      120,  112,  121,  123,  121,  123,  122,  125,  126,  128,
      127,  115,  116,  129,  129,  119,  120,  130,  133,  131,

      132,  134,  135,  136,  126,  125,  127,  133,  137,  132,
      117,  131,  140,  132,  135,  138,  134,  139,  132,  136,
      139,  138,  128,  141,  141,  142,  143,  129,  137,  146,
      130,  144,  145,  164,  147,  163,  148,  165,  183,  165,
      151,  146,  143,  142,  183,  140,  148,  144,  151,  164,
      145,  147,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  163,  150,
      154,  190,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  157,  190,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,

      157,  157,  157,  157,  157,  157,  158,  158,  158,  158,
      158,  158,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  162,  160,  160,  160,  160,  160,  160,  166,  167,
      168,  167,  168,  169,  171,  166,  172,  171,  162,  174,
      175,  174,  176,  176,  177,  169,  181,  177,  178,  178,
      189,  182,  172,  182,  162,  184,  175,  179,  179,  179,
      185,  181,  186,  181,  184,  188,  179,  189,  186,  192,
      192,  193,  197,  194,  196,  195,  185,  199,  200,  201,
      202,  188,  221,  196,  204,  201,  245,  193,  194,  245,
      194,  195,  204,  217,  217,  200,  225,  199,  209,  209,

      209,  209,  209,  209,  218,  197,  219,  680,  219,  218,
      223,  223,  225,  202,  208,  221,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  212,  680,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      214,  222,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  220,  220,
      220,  224,  224,  226,  227,  229,  230,  231,  220,  232,
      226,  233,  234,  236,  222,  235,  227,  237,  239,  231,
      238,  235,  241,  233,  232,  240,  238,  242,  234,  241,

      243,  246,  237,  236,  239,  249,  244,  243,  229,  230,
      251,  240,  244,  247,  247,  252,  251,  242,  253,  254,
      255,  249,  256,  257,  256,  255,  258,  253,  259,  258,
      269,  252,  275,  276,  246,  276,  280,  277,  280,  254,
      492,  269,  278,  274,  492,  259,  272,  272,  272,  272,
      272,  272,  275,  277,  278,  284,  257,  264,  284,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  266,  274,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  271,  747,  271,  271,  271,  271,  271,

      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  279,  281,  282,  283,  286,  287,  288,  289,  289,
      281,  290,  291,  286,  287,  288,  293,  279,  292,  292,
      291,  294,  297,  298,  299,  302,  298,  299,  305,  294,
      297,  290,  301,  293,  301,  303,  282,  283,  304,  302,
      306,  307,  308,  310,  303,  309,  305,  311,  309,  311,
      308,  312,  313,  313,  304,  314,  315,  312,  316,  310,
      320,  326,  332,  338,  314,  332,  335,  336,  336,  426,
      316,  320,  326,  306,  307,  323,  323,  323,  323,  323,
      323,  335,  331,  338,  426,  331,  341,  341,  727,  315,

      322,  331,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  327,  346,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  329,  346,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  337,  339,  340,  342,  344,  343,
      345,  347,  340,  339,  340,  343,  337,  348,  349,  340,
      350,  353,  361,  342,  354,  354,  345,  347,  344,  355,
      355,  357,  357,  348,  349,  356,  350,  356,  359,  360,
      361,  353,  362,  363,  369,  360,  364,  364,  359,  365,

      366,  365,  366,  367,  362,  359,  369,  370,  371,  370,
      367,  371,  376,  363,  385,  385,  385,  385,  385,  385,
      393,  446,  446,  376,  377,  393,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  379,  726,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      384,  389,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  387,  388,
      390,  389,  391,  392,  394,  395,  388,  394,  399,  396,
      401,  398,  403,  397,  387,  400,  392,  396,  391,  397,

      398,  404,  400,  402,  399,  395,  402,  401,  411,  406,
      412,  413,  416,  390,  417,  415,  418,  404,  406,  420,
      411,  419,  421,  422,  418,  403,  412,  413,  415,  423,
      419,  423,  417,  425,  421,  427,  420,  443,  445,  422,
      427,  450,  447,  444,  450,  416,  443,  445,  447,  425,
      434,  444,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  435,  435,
      435,  435,  435,  435,  438,  724,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  440,  442,  440,  440,  440,  440,  440,  440,

      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      448,  449,  451,  442,  452,  453,  454,  455,  455,  454,
      456,  452,  457,  458,  459,  464,  448,  463,  464,  467,
      465,  458,  451,  465,  463,  453,  456,  468,  467,  469,
      470,  472,  473,  476,  449,  473,  477,  469,  472,  491,
      537,  491,  470,  468,  493,  457,  493,  459,  537,  476,
      520,  520,  477,  482,  500,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  484,  500,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  488,

      499,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  489,  489,  489,
      489,  489,  489,  494,  495,  496,  498,  501,  502,  504,
      521,  507,  506,  499,  508,  498,  495,  507,  514,  494,
      502,  506,  496,  501,  516,  517,  508,  533,  521,  504,
      514,  536,  543,  552,  541,  595,  516,  595,  536,  543,
      552,  517,  526,  533,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      527,  527,  527,  527,  527,  527,  529,  541,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,

      529,  529,  529,  529,  531,  723,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  539,  540,  544,  545,  546,  547,  551,  551,
      550,  567,  540,  544,  553,  567,  580,  580,  539,  623,
      581,  545,  623,  546,  547,  550,  553,  558,  581,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  560,  722,  560,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  560,  560,  564,  577,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,

      564,  565,  565,  565,  565,  565,  565,  569,  570,  571,
      572,  575,  639,  576,  578,  639,  572,  577,  572,  599,
      598,  599,  603,  569,  603,  571,  602,  602,  570,  576,
      578,  575,  586,  598,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      587,  587,  587,  587,  587,  587,  589,  721,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  591,  596,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  597,  601,  604,  596,  617,  719,  718,  601,

      615,  615,  615,  615,  615,  615,  619,  717,  619,  597,
      604,  608,  617,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  610,
      716,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  614,  620,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  618,  621,  622,  624,  641,
      714,  645,  713,  620,  633,  633,  633,  633,  633,  633,
      624,  618,  712,  622,  664,  641,  621,  632,  645,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,

      632,  632,  632,  632,  632,  635,  664,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  637,  665,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  643,  643,  643,  646,  643,  660,  666,  667,  711,
      660,  684,  646,  665,  684,  709,  708,  706,  705,  700,
      699,  698,  663,  666,  667,  663,  697,  696,  695,  694,
      643,  651,  692,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  653,
      663,  653,  653,  653,  653,  653,  653,  653,  653,  653,

      682,  653,  653,  653,  653,  653,  653,  657,  683,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  674,  682,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  683,  674,  674,  674,
      674,  674,  674,  676,  681,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  691,  688,  687,  686,  685,  679,  677,  681,  689,
      673,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      672,  689,  689,  689,  689,  689,  689,  729,  729,  729,
      729,  729,  729,  729,  730,  730,  730,  730,  730,  730,

      730,  731,  731,  731,  731,  731,  731,  731,  732,  670,
      732,  732,  732,  732,  732,  733,  733,  733,  733,  733,
      733,  733,  734,  668,  734,  734,  734,  734,  734,  735,
      735,  735,  736,  736,  736,  736,  737,  662,  737,  738,
      661,  738,  739,  739,  739,  739,  740,  740,  740,  741,
      659,  741,  742,  742,  742,  743,  743,  743,  743,  744,
      744,  744,  745,  745,  745,  746,  746,  746,  748,  656,
      748,  749,  749,  749,  750,  750,  750,  751,  751,  751,
      753,  655,  753,  754,  754,  754,  755,  755,  755,  756,
      756,  756,  757,  757,  757,  758,  758,  758,  759,  759,

      759,  760,  760,  760,  762,  762,  762,  763,  652,  763,
      764,  764,  764,  765,  765,  765,  766,  766,  766,  768,
      768,  768,  769,  650,  769,  770,  770,  770,  771,  771,
      771,  772,  772,  772,  773,  773,  773,  774,  774,  774,
      775,  775,  775,  776,  776,  776,  778,  649,  778,  779,
      779,  779,  780,  780,  780,  781,  781,  781,  783,  648,
      783,  784,  784,  784,  785,  785,  785,  786,  786,  786,
      787,  787,  787,  788,  788,  788,  789,  789,  789,  790,
      790,  790,  791,  647,  791,  792,  792,  792,  793,  793,
      793,  794,  794,  794,  795,  644,  795,  796,  796,  796,

      797,  797,  797,  798,  798,  798,  799,  799,  799,  800,
      800,  800,  801,  801,  801,  802,  802,  802,  803,  642,
      803,  804,  804,  804,  805,  805,  805,  806,  806,  806,
      807,  640,  807,  808,  808,  808,  809,  809,  809,  810,
      810,  810,  811,  811,  811,  812,  812,  812,  813,  813,
      813,  814,  814,  814,  815,  638,  815,  816,  816,  816,
      817,  817,  817,  818,  818,  818,  819,  636,  819,  820,
      634,  820,  821,  821,  821,  822,  822,  822,  823,  823,
      823,  824,  824,  824,  825,  825,  825,  826,  826,  826,
      827,  631,  827,  828,  630,  828,  829,  829,  829,  830,

      830,  830,  831,  831,  831,  832,  628,  832,  833,  627,
      833,  834,  834,  834,  835,  626,  835,  836,  836,  836,
      837,  837,  837,  838,  625,  838,  839,  616,  839,  840,
      840,  840,  841,  613,  841,  842,  612,  842,  843,  843,
      843,  844,  844,  844,  845,  845,  845,  846,  611,  846,
      847,  847,  847,  848,  848,  848,  849,  849,  849,  850,
      609,  850,  851,  851,  851,  852,  852,  852,  853,  853,
      853,  854,  607,  854,  855,  855,  855,  856,  856,  856,
      857,  857,  857,  858,  606,  858,  859,  859,  859,  605,
      600,  594,  593,  592,  590,  588,  585,  584,  583,  582,

      579,  574,  573,  568,  566,  563,  562,  561,  559,  557,
      556,  555,  554,  542,  538,  535,  534,  532,  530,  528,
      525,  524,  523,  522,  519,  518,  515,  513,  512,  511,
      510,  509,  505,  503,  497,  490,  487,  486,  485,  483,
      480,  479,  478,  475,  474,  471,  466,  462,  461,  460,
      441,  439,  436,  433,  432,  430,  429,  428,  424,  414,
      410,  409,  408,  407,  405,  386,  383,  382,  380,  378,
      375,  374,  373,  372,  368,  358,  352,  351,  333,  330,
      328,  325,  324,  321,  318,  317,  300,  296,  295,  285,
      273,  270,  267,  265,  263,  262,  261,  260,  250,  248,

      228,  216,  215,  213,  211,  210,  206,  205,  203,  198,
      187,  180,  173,  170,  161,  159,  155,  153,  152,  149,
      113,  111,  110,  108,  104,   94,   91,   90,   79,   71,
       64,   62,   61,   60,   58,   53,   49,   48,   45,   40,
       26,   18,   17,   14,   12,    7,    4,    3,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728

    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[89] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
    0, 0, 1, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 1272 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 1377 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 729 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2449 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 60 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 62 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 108 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 122 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 126 "SrvLexer.l"
;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno; 
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 134 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 135 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 75:
YY_RULE_SETUP
#line 142 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 151 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 160 "SrvLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 169 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 178 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 187 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 196 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 208 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 215 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 236 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd then no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 268 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd; 
      YYABORT; 
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 278 "SrvLexer.l"
{ 
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) { 
        Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd; 
        YYABORT; 
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 287 "SrvLexer.l"
{ return yytext[0]; } 
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 290 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 2045 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 729 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 729 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 728);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

yyFlexLexer::~yyFlexLexer()
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

	delete [] (yy_state_buf);
	yyfree((yy_start_stack)  );

}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 290 "SrvLexer.l"




