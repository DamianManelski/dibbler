#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 58
#define YY_END_OF_BUFFER 59
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[533] =
    {   0,
        1,    1,    0,    0,    0,    0,   59,   57,    2,    1,
        1,   57,   40,   57,   57,   56,   56,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   44,   44,   58,    1,
        1,    1,    0,   52,   40,    0,   52,   42,   41,   56,
        0,    0,   55,    0,   49,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   37,   53,
       53,   53,   53,   53,   53,   53,   53,   12,   13,   53,
       53,   53,   53,   53,   53,   43,   41,   56,    0,    0,
       48,   54,   47,   47,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   36,
       56,    0,    0,    0,   46,   46,    0,   47,    0,   47,
       53,   53,   53,   53,   53,   53,   53,   30,   53,   53,
       53,    0,   53,   53,   53,   18,   53,   53,   53,   53,
       53,   53,   38,   53,   53,   53,   56,    0,    0,    0,
        0,   46,    0,   46,    0,   47,   47,   47,   47,   53,
       53,    4,   53,   53,   53,   39,    3,   53,   53,   53,
       53,    0,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,    0,    0,    0,    0,

       46,   46,   46,   46,    0,   47,   47,   47,    0,   47,
       53,   53,   53,   53,   25,   53,   53,   53,   53,   53,
        0,    0,   53,   53,   53,   23,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,    0,    0,    0,   46,
       46,   46,    0,   46,    0,    0,   47,   47,   47,   47,
       53,   53,   53,   53,   53,   53,   53,   53,   53,    0,
        0,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   16,   53,   53,    0,    0,    0,    0,    0,   46,
       46,   46,   46,    0,   47,   47,   47,    0,   47,   53,
       53,   53,   53,   53,   35,   53,    8,    6,    0,    0,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,    9,    0,    0,    0,   46,   46,   46,    0,
       46,   51,   47,   47,   47,   47,   53,   53,   53,   53,
       53,    7,    0,    0,   53,   53,   53,   53,   53,   53,
       53,   53,   53,    5,   27,   53,    0,    0,    0,   50,
       46,   46,   46,   46,   47,   47,   47,    0,   47,   53,
       53,   53,   24,   53,    0,    0,   32,   31,   26,   53,
       17,   53,   53,   29,   28,   53,    0,    0,   46,   46,
       46,    0,   46,   47,   47,   47,   47,   10,   53,   53,
       53,   34,   33,   53,   53,   53,   53,    0,    0,    0,

       46,   46,   46,   46,   47,   47,   47,    0,   47,   53,
       53,   53,   53,   19,   53,   53,    0,    0,   46,   46,
       46,    0,   46,   47,   47,   47,   47,   53,   53,   53,
       53,   53,   53,    0,    0,    0,   46,   46,   46,   46,
       47,   47,   47,    0,   47,   53,   53,   53,   53,   11,
       15,    0,   45,   48,   46,   46,   46,    0,   46,   47,
       47,   47,   47,   21,   53,   20,   53,    0,   45,    0,
       46,   46,   46,   46,   46,   47,   47,   47,    0,   47,
       22,   53,   45,   48,   46,    0,   46,   46,   46,   46,
       47,   47,   47,   14,   45,   46,   46,   46,   46,   47,

       47,   47,   46,   46,    0,   46,   46,   47,   46,   46,
       47,   46,   46,    0,   46,   46,   46,   46,    0,   46,
       46,   46,   46,    0,   46,   46,   46,   46,    0,   46,
       46,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   16,   16,   16,   16,   16,   16,   17,    1,    1,
        1,    1,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
        1,    1,    1,    1,    1,    1,   18,   19,   20,   21,

       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[44] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        3,    1,    4,    4,    4,    4,    5,    4,    4,    4,
        4,    4,    4,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[612] =
    {   0,
        0,    0, 1810, 1809,    0,    0, 1816, 1819, 1819,   41,
       43, 1810,    0, 1807,   40,   40, 1772, 1795,   69,   82,
     1782,   18,   33, 1793,   47,   89,   91,   60,   92,   51,
       93,   99,   49,   54,   94,   57, 1819, 1797, 1819,   72,
      128,  132, 1803, 1819,    0, 1800, 1799, 1819,    0,  124,
     1788,  137, 1819,    0,  141, 1787,  145, 1783, 1785,  152,
      112,  103, 1772,  101,  154,  156,  157,  158, 1783,  159,
      145,  163,  166,  160,  169,  167,  172, 1782, 1781,  168,
      170,  180,  174,  182,  184, 1819,    0,  208,  196, 1780,
      200,    0,  223,  236,  240, 1774,  231,  185,  247,  187,

      248,  201,  249,  251,  260,  262,  264,  259,  258,  263,
      265,  261,  278,  272,  275,  276,  279,  277,  273, 1778,
      297,  291, 1777, 1776,  312,  325,  329,  335,  346,  352,
      356, 1759,  285,  356,  347,  363,  364, 1774,  368,  365,
      367, 1780,  371,  374,  376, 1772,  377,  383,  386,  384,
      392,  401, 1771,  395,  398,  406,  411, 1770, 1769, 1768,
      416,  422,  433,  439,  445,  451,  464,  470,  483, 1767,
      465,  490,  478,  400,  486, 1766,  491,  487,  488,  489,
      494,  488,  497,  501,  503,  499,  502,  516,  505,  511,
      510,  434,  378,  440,  521,  518, 1765, 1764, 1763,  533,

      539,  552,  558,  571,  575,  581, 1762,  588,  599,  605,
      524,  307,  583,  600, 1761,  534,  553,  605,  519,  606,
     1745, 1754,  607,  608,  610, 1758,  609,  612,  623,  611,
      613,  617,  621,  625,  629,  630, 1757, 1756,  636,  650,
     1755,  657,  668,  674,  680,  686,  692,  705,  711,  724,
      637,  642,  687,  706,  724,  726,  727,  729,  730, 1741,
     1735,  736,  719,  733,  738,  739,  740,  744,  746,  747,
      748, 1752,  749,  751, 1751, 1750, 1749,  776,  782,  788,
      801,  807,  820,  824,  830, 1748,  837,  848,  854,  750,
      753,  756,  760,  759, 1747,  669, 1746, 1745, 1743, 1721,

      849,  854,  855,  832,  861,  802,  856,  857,  862,  863,
      865,  761, 1742, 1741, 1740,  875,  881, 1739,  889,  900,
      906,  910,  916,  929,  935,  948,  943,  876,  924,  949,
      957, 1738, 1728, 1731,  951,  952,  953,  954,  956,  959,
      960,  962,  963, 1735, 1734,  968, 1733, 1732, 1731,  981,
      988, 1001, 1007, 1020, 1026, 1730, 1033, 1044, 1050,  771,
     1045, 1028, 1729, 1050, 1714, 1709, 1726, 1725, 1724,  974,
     1723, 1051, 1053, 1722, 1721, 1052, 1720, 1719, 1067, 1718,
     1079, 1072, 1092, 1098, 1111, 1117, 1130, 1717, 1054, 1125,
     1130, 1819, 1819,  958, 1112, 1131, 1133, 1716, 1715, 1714,

     1152, 1142, 1165, 1178, 1184, 1713, 1191, 1202, 1208, 1055,
     1203, 1143, 1209, 1712, 1210, 1002, 1711, 1710, 1219, 1709,
     1237, 1224, 1230, 1250, 1263, 1269, 1282,  911, 1211, 1074,
     1225, 1087, 1277, 1708, 1707, 1706, 1289, 1302, 1308, 1321,
     1327, 1705, 1334, 1345, 1351, 1346, 1160, 1352, 1353, 1704,
     1703, 1702, 1701,    0, 1367, 1700, 1374, 1385, 1391, 1397,
     1410, 1416, 1429, 1699, 1354, 1698, 1134, 1697, 1696, 1695,
     1599, 1435, 1448, 1454, 1467, 1473, 1586, 1480,    0, 1493,
     1565, 1355, 1558, 1819, 1552,    0, 1499, 1544, 1506, 1519,
     1525, 1538,    0, 1539, 1533, 1520, 1514, 1544, 1557, 1563,

     1506,    0, 1501, 1494,    0, 1570, 1819,    0, 1488, 1475,
     1819, 1468, 1462,    0, 1454, 1449, 1443, 1430,    0, 1424,
     1411, 1405, 1392,    0, 1386, 1369, 1358, 1356,    0, 1329,
     1322, 1819, 1586, 1591, 1596, 1601, 1606, 1609, 1614, 1616,
     1329, 1316, 1618, 1310, 1620, 1622, 1297, 1624, 1626, 1277,
     1628, 1630, 1271, 1632, 1634, 1245, 1636, 1638, 1199, 1640,
     1642, 1186, 1644, 1646, 1009, 1648, 1650,  988, 1652, 1654,
      914, 1656, 1658,  897, 1660, 1662,  776, 1664, 1666,  688,
      653, 1668, 1670,  651, 1672, 1674,  541,  430, 1676, 1678,
      343, 1680,  304,  296, 1682, 1684, 1686,  231, 1688, 1690,

     1692,  215, 1694, 1696, 1698,  108, 1700, 1702, 1704,   74,
     1706
    } ;

static yyconst flex_int16_t yy_def[612] =
    {   0,
      532,    1,  533,  533,  534,  534,  532,  532,  532,  532,
      532,  535,  536,  537,  532,  532,   16,  532,  538,  538,
       20,   20,   20,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  532,  532,  532,  532,
      532,  532,  535,  532,  536,  537,  532,  532,  539,  532,
      540,   50,  532,  541,  542,  538,   20,   57,  538,  538,
      538,  538,   57,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  532,  539,  532,   88,  543,
      544,  541,  532,   93,   57,   95,  538,  538,  538,  538,

      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      532,  121,  545,  546,  532,  125,  532,  532,  547,  128,
       95,  131,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  532,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  122,  122,  548,  549,
      532,  532,  550,  162,  532,  532,  166,  532,  168,  131,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  532,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  532,  551,  552,  532,

      532,  201,  532,  203,  532,  532,  532,  532,  553,  208,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      532,  532,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  554,  555,  532,  532,
      532,  532,  556,  242,  532,  532,  532,  247,  532,  249,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  532,
      532,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  532,  557,  558,  532,  532,  532,
      280,  532,  282,  532,  532,  532,  532,  559,  287,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  532,  532,

      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  560,  561,  532,  532,  532,  532,  562,
      319,  532,  532,  323,  532,  325,  538,  538,  538,  538,
      538,  538,  532,  532,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  532,  563,  564,  532,
      532,  351,  532,  353,  532,  532,  532,  565,  357,  538,
      538,  538,  538,  538,  532,  532,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  566,  567,  532,  532,
      532,  568,  381,  532,  384,  532,  386,  538,  538,  538,
      538,  532,  532,  538,  538,  538,  538,  532,  569,  570,

      532,  401,  532,  403,  532,  532,  532,  571,  407,  538,
      538,  538,  538,  538,  538,  538,  572,  573,  532,  532,
      532,  574,  421,  532,  424,  532,  426,  538,  538,  538,
      538,  538,  538,  532,  575,  576,  532,  437,  532,  439,
      532,  532,  532,  577,  443,  538,  538,  538,  538,  538,
      538,  578,  579,  580,  532,  532,  532,  581,  457,  532,
      460,  532,  462,  538,  538,  538,  538,  532,  582,  532,
      583,  532,  472,  532,  474,  532,  532,  532,  584,  478,
      538,  538,  585,  532,  586,  587,  532,  532,  532,  489,
      532,  491,  588,  538,  532,  589,  590,  532,  498,  532,

      532,  591,  532,  592,  593,  532,  532,  594,  595,  596,
      532,  532,  597,  598,  599,  600,  532,  601,  602,  603,
      604,  532,  605,  606,  607,  608,  532,  609,  610,  611,
      532,    0,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,

      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532
    } ;

static yyconst flex_int16_t yy_nxt[1863] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   18,   19,   20,   21,
       22,   20,   23,   24,   24,   25,   24,   24,   26,   24,
       27,   28,   29,   24,   30,   31,   32,   33,   34,   35,
       24,   36,   24,   40,   41,   42,   41,   48,   61,   62,
       63,   49,   50,   50,   50,   50,   51,   52,   52,   52,
       52,   52,   52,  532,   53,  532,   64,  532,   74,   65,
      532,   83,   75,  532,   40,   41,  532,  475,   85,   82,
       54,   57,   57,   57,   57,   51,   57,   57,   58,   57,
       57,   57,   71,   59,   57,   57,   57,   57,   51,   57,

       57,   57,   57,   57,   57,  532,   59,  532,  532,  532,
      532,  526,   78,   79,   66,  532,   68,  532,   76,  532,
       67,  102,   69,   72,   80,   84,   73,   70,  532,   77,
       42,   41,  100,   81,   40,   41,   88,   88,   88,   88,
       51,   89,   89,   89,   89,   89,   89,   99,   53,   89,
       89,   89,   89,   93,   93,   93,   93,   95,   95,   95,
       95,  532,   95,   95,   95,   95,   95,   95,  532,   97,
      532,  103,  532,  532,  532,  532,  532,   98,  104,  532,
      105,  108,  532,  532,  532,  532,  532,  110,  532,  114,
      532,  107,  111,  106,  109,  112,  532,  115,  532,  113,

      532,  532,  118,  532,  136,  117,  134,  116,  122,  122,
      122,  122,  125,  125,  125,  125,  119,  532,  521,  120,
      121,  121,  121,  121,   51,  122,  122,  122,  122,  122,
      122,  138,   53,  127,  516,  128,  128,  128,  128,  129,
      130,  130,  130,  130,  130,  130,  532,  532,  130,  130,
      130,  130,  131,  131,  131,  131,  135,  131,  131,  131,
      131,  131,  131,  532,  532,  532,  133,  532,  139,  141,
      142,  143,  140,  144,  532,  532,  532,  532,  532,  532,
      532,  532,  149,  137,  145,  147,  146,  150,  532,  532,
      148,  532,  532,  532,  532,  532,  152,  153,  154,  511,

      156,  532,  155,  158,  158,  158,  158,  510,  151,  157,
      157,  157,  157,   51,  158,  158,  158,  158,  158,  158,
      172,   53,  161,  532,  162,  162,  162,  162,  163,  164,
      164,  164,  164,  164,  164,  532,  252,  164,  164,  164,
      164,  165,  165,  165,  165,  127,  508,  166,  166,  166,
      166,  129,  167,  167,  167,  167,  167,  167,  168,  168,
      168,  168,  532,  532,  167,  167,  167,  167,  170,  170,
      170,  170,  532,  170,  170,  170,  170,  170,  170,  532,
      532,  532,  174,  532,  532,  176,  173,  532,  175,  177,
      532,  183,  532,  532,  532,  179,  180,  181,  187,  532,

      532,  178,  532,  188,  190,  189,  184,  186,  532,  185,
      193,  532,  194,  192,  532,  196,  532,  532,  195,  191,
      233,  214,  532,  157,  157,  157,  157,  532,  200,  200,
      200,  200,  161,  502,  201,  201,  201,  201,  163,  202,
      202,  202,  202,  202,  202,  203,  203,  203,  203,  532,
      532,  202,  202,  202,  202,  205,  532,  165,  165,  165,
      165,  127,  232,  206,  206,  206,  206,  129,  207,  207,
      207,  207,  207,  207,  532,  234,  207,  207,  207,  207,
      127,  532,  208,  208,  208,  208,  209,  210,  210,  210,
      210,  210,  210,  532,  532,  210,  210,  210,  210,  212,

      216,  211,  532,  532,  532,  532,  532,  532,  221,  218,
      532,  220,  217,  532,  213,  532,  215,  532,  532,  532,
      219,  532,  224,  222,  225,  228,  532,  532,  223,  226,
      235,  231,  532,  251,  532,  532,  227,  532,  236,  258,
      532,  229,  230,  239,  497,  200,  200,  200,  200,  161,
      532,  240,  240,  240,  240,  163,  241,  241,  241,  241,
      241,  241,  532,  255,  241,  241,  241,  241,  161,  532,
      242,  242,  242,  242,  243,  244,  244,  244,  244,  244,
      244,  532,  256,  244,  244,  244,  244,  245,  245,  245,
      245,  127,  253,  246,  246,  246,  246,  129,  127,  532,

      247,  247,  247,  247,  209,  248,  248,  248,  248,  248,
      248,  249,  249,  249,  249,  532,  532,  248,  248,  248,
      248,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      265,  266,  267,  532,  254,  259,  262,  532,  270,  532,
      268,  532,  263,  257,  264,  532,  532,  269,  278,  278,
      278,  278,  271,  532,  493,  274,  475,  273,  532,  291,
      161,  272,  279,  279,  279,  279,  163,  161,  290,  280,
      280,  280,  280,  243,  281,  281,  281,  281,  281,  281,
      282,  282,  282,  282,  532,  532,  281,  281,  281,  281,
      284,  471,  245,  245,  245,  245,  127,  332,  246,  246,

      246,  246,  127,  532,  285,  285,  285,  285,  209,  286,
      286,  286,  286,  286,  286,  532,  292,  286,  286,  286,
      286,  127,  532,  287,  287,  287,  287,  288,  289,  289,
      289,  289,  289,  289,  532,  532,  289,  289,  289,  289,
      532,  294,  532,  532,  293,  532,  532,  295,  296,  532,
      297,  298,  532,  301,  532,  532,  532,  302,  304,  307,
      532,  308,  532,  532,  532,  532,  532,  532,  305,  532,
      306,  303,  532,  329,  312,  532,  532,  532,  311,  463,
      327,  330,  310,  346,  309,  313,  316,  532,  278,  278,
      278,  278,  161,  328,  279,  279,  279,  279,  161,  331,

      317,  317,  317,  317,  243,  318,  318,  318,  318,  318,
      318,  532,  388,  318,  318,  318,  318,  161,  532,  319,
      319,  319,  319,  320,  321,  321,  321,  321,  321,  321,
      532,  340,  321,  321,  321,  321,  322,  322,  322,  322,
      127,  338,  246,  246,  246,  246,  209,  127,  532,  323,
      323,  323,  323,  288,  324,  324,  324,  324,  324,  324,
      325,  325,  325,  325,  532,  532,  324,  324,  324,  324,
      532,  532,  532,  532,  335,  336,  337,  532,  532,  532,
      339,  532,  342,  343,  341,  361,  345,  350,  350,  350,
      350,  161,  532,  279,  279,  279,  279,  243,  344,  161,

      440,  351,  351,  351,  351,  320,  352,  352,  352,  352,
      352,  352,  353,  353,  353,  353,  532,  427,  352,  352,
      352,  352,  322,  322,  322,  322,  127,  532,  355,  355,
      355,  355,  288,  356,  356,  356,  356,  356,  356,  532,
      532,  356,  356,  356,  356,  127,  446,  357,  357,  357,
      357,  358,  359,  359,  359,  359,  359,  359,  532,  532,
      359,  359,  359,  359,  362,  532,  364,  532,  532,  532,
      532,  360,  532,  532,  532,  532,  532,  371,  532,  532,
      413,  367,  370,  363,  532,  373,  368,  369,  372,  376,
      532,  404,  374,  350,  350,  350,  350,  375,  161,  394,

      379,  379,  379,  379,  320,  380,  380,  380,  380,  380,
      380,  532,  387,  380,  380,  380,  380,  161,  532,  381,
      381,  381,  381,  382,  383,  383,  383,  383,  383,  383,
      532,  433,  383,  383,  383,  383,  127,  390,  246,  246,
      246,  246,  288,  127,  532,  384,  384,  384,  384,  358,
      385,  385,  385,  385,  385,  385,  386,  386,  386,  386,
      532,  532,  385,  385,  385,  385,  532,  532,  532,  532,
      532,  532,  428,  389,  396,  410,  395,  161,  391,  279,
      279,  279,  279,  320,  403,  403,  403,  403,  397,  161,
      532,  401,  401,  401,  401,  382,  402,  402,  402,  402,

      402,  402,  532,  532,  402,  402,  402,  402,  127,  448,
      405,  405,  405,  405,  358,  406,  406,  406,  406,  406,
      406,  532,  450,  406,  406,  406,  406,  127,  532,  407,
      407,  407,  407,  408,  409,  409,  409,  409,  409,  409,
      532,  532,  409,  409,  409,  409,  532,  532,  414,  532,
      532,  412,  532,  411,  420,  420,  420,  420,  416,  532,
      430,  415,  161,  482,  419,  419,  419,  419,  382,  420,
      420,  420,  420,  420,  420,  161,  532,  421,  421,  421,
      421,  422,  423,  423,  423,  423,  423,  423,  532,  354,
      423,  423,  423,  423,  127,  465,  246,  246,  246,  246,

      358,  127,  326,  424,  424,  424,  424,  408,  425,  425,
      425,  425,  425,  425,  426,  426,  426,  426,  532,  532,
      425,  425,  425,  425,  429,  532,  532,  532,  447,  161,
      431,  279,  279,  279,  279,  382,  439,  439,  439,  439,
      532,  532,  438,  438,  438,  438,  432,  161,  283,  437,
      437,  437,  437,  422,  438,  438,  438,  438,  438,  438,
      127,  449,  441,  441,  441,  441,  408,  442,  442,  442,
      442,  442,  442,  532,  250,  442,  442,  442,  442,  127,
      204,  443,  443,  443,  443,  444,  445,  445,  445,  445,
      445,  445,  532,  532,  445,  445,  445,  445,  451,  161,

      169,  455,  455,  455,  455,  422,  456,  456,  456,  456,
      456,  456,  532,  126,  456,  456,  456,  456,  161,   94,
      457,  457,  457,  457,  458,  459,  459,  459,  459,  459,
      459,  532,   92,  459,  459,  459,  459,  127,  529,  246,
      246,  246,  246,  408,  127,  529,  460,  460,  460,  460,
      444,  461,  461,  461,  461,  461,  461,  462,  462,  462,
      462,  532,  532,  461,  461,  461,  461,  464,  532,  532,
      532,  532,  529,  466,  524,  481,  494,  161,  467,  279,
      279,  279,  279,  422,  161,  529,  472,  472,  472,  472,
      458,  473,  473,  473,  473,  473,  473,  474,  474,  474,

      474,  532,  524,  473,  473,  473,  473,  127,  524,  476,
      476,  476,  476,  444,  477,  477,  477,  477,  477,  477,
      532,  519,  477,  477,  477,  477,  127,  524,  478,  478,
      478,  478,  479,  480,  480,  480,  480,  480,  480,  532,
      519,  480,  480,  480,  480,  161,  519,  487,  487,  487,
      487,  458,  488,  488,  488,  488,  488,  488,  532,  514,
      488,  488,  488,  488,  161,  519,  489,  489,  489,  489,
      514,  490,  490,  490,  490,  490,  490,  532,  514,  490,
      490,  490,  490,  127,  505,  246,  246,  246,  246,  444,
      127,  514,  491,  491,  491,  491,  479,  492,  492,  492,

      492,  492,  492,  532,  505,  492,  492,  492,  492,  161,
      505,  279,  279,  279,  279,  458,  161,  486,  498,  498,
      498,  498,  479,  499,  499,  499,  499,  499,  499,  532,
      505,  499,  499,  499,  499,  127,  486,  500,  500,  500,
      500,  479,  501,  501,  501,  501,  501,  501,  532,  470,
      501,  501,  501,  501,  161,  532,  506,  506,  506,  506,
      458,  507,  507,  507,  507,  507,  507,  532,  486,  507,
      507,  507,  507,  127,  470,  246,  246,  246,  246,  479,
      161,  532,  279,  279,  279,  279,   37,   37,   37,   37,
       37,   39,   39,   39,   39,   39,   43,   43,   43,   43,

       43,   45,  444,   45,   45,   45,   46,   46,   46,   46,
       46,   56,   56,   56,   87,  486,   87,   87,   87,   90,
       90,  123,  123,  159,  159,  160,  160,  197,  197,  198,
      198,  237,  237,  238,  238,  275,  275,  276,  276,  314,
      314,  315,  315,  347,  347,  348,  348,  377,  377,  378,
      378,  398,  398,  399,  399,  417,  417,  418,  418,  434,
      434,  435,  435,  452,  452,  453,  453,  468,  468,  469,
      469,  483,  483,  485,  485,  495,  495,  496,  496,  503,
      503,  504,  504,  509,  509,  512,  512,  513,  513,  515,
      515,  517,  517,  518,  518,  520,  520,  522,  522,  523,

      523,  525,  525,  527,  527,  528,  528,  530,  530,  531,
      531,  484,  470,  436,  532,  532,  422,  470,  436,  532,
      532,  408,  454,  436,  400,  382,  436,  400,  532,  358,
       91,  400,  349,  532,  320,  400,  349,  532,  532,  532,
      532,  532,  532,  393,  392,  532,  288,   91,  349,  277,
      532,  532,  366,  365,  532,  243,  349,  277,  532,  334,
      333,  532,  532,  532,  209,   91,  277,  199,  532,  300,
      299,  163,  277,  199,  532,  261,  260,  532,  129,   91,
      199,  124,  532,  532,  199,  124,  532,  532,  532,  182,
      532,  171,   91,  124,  532,  132,  124,  532,  532,  532,

      101,  532,   96,  532,   91,   46,   47,   44,   86,  532,
       60,   55,  532,   47,   44,  532,   38,   38,    7,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532
    } ;

static yyconst flex_int16_t yy_chk[1863] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   10,   10,   11,   11,   15,   22,   22,
       23,   15,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   25,   16,   33,   23,   30,   30,   25,
       34,   34,   30,   36,   40,   40,   28,  610,   36,   33,
       16,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   28,   19,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   26,   20,   27,   29,   31,
       35,  606,   32,   32,   26,   32,   27,   64,   31,   62,
       26,   64,   27,   29,   32,   35,   29,   27,   61,   31,
       41,   41,   62,   32,   42,   42,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   61,   50,   52,
       52,   52,   52,   55,   55,   55,   55,   57,   57,   57,
       57,   71,   57,   57,   57,   57,   57,   57,   60,   60,
       65,   65,   66,   67,   68,   70,   74,   60,   66,   72,
       67,   71,   73,   76,   80,   75,   81,   73,   77,   77,
       83,   70,   74,   68,   72,   75,   82,   80,   84,   76,

       85,   98,   83,  100,  100,   82,   98,   81,   89,   89,
       89,   89,   91,   91,   91,   91,   84,  102,  602,   85,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,  102,   88,   93,  598,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   94,   97,   94,   94,
       94,   94,   95,   95,   95,   95,   99,   95,   95,   95,
       95,   95,   95,   99,  101,  103,   97,  104,  103,  105,
      106,  106,  104,  107,  109,  108,  105,  112,  106,  110,
      107,  111,  112,  101,  108,  110,  109,  113,  114,  119,
      111,  115,  116,  118,  113,  117,  115,  116,  117,  594,

      119,  133,  118,  122,  122,  122,  122,  593,  114,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      133,  121,  125,  212,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  126,  212,  126,  126,  126,
      126,  127,  127,  127,  127,  128,  591,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  129,  129,
      129,  129,  130,  135,  130,  130,  130,  130,  131,  131,
      131,  131,  134,  131,  131,  131,  131,  131,  131,  136,
      137,  140,  135,  141,  139,  137,  134,  143,  136,  139,
      144,  143,  145,  147,  193,  141,  141,  141,  147,  148,

      150,  140,  149,  148,  150,  149,  143,  145,  151,  144,
      152,  154,  154,  151,  155,  156,  174,  152,  155,  150,
      193,  174,  156,  157,  157,  157,  157,  157,  161,  161,
      161,  161,  162,  588,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  163,  163,  163,  163,  164,
      192,  164,  164,  164,  164,  165,  194,  165,  165,  165,
      165,  166,  192,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  167,  194,  167,  167,  167,  167,
      168,  171,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  169,  173,  169,  169,  169,  169,  172,

      177,  171,  175,  178,  179,  180,  172,  177,  182,  179,
      181,  181,  178,  183,  173,  186,  175,  184,  187,  185,
      180,  189,  184,  182,  185,  188,  191,  190,  183,  186,
      195,  191,  188,  211,  196,  219,  187,  195,  196,  219,
      211,  189,  190,  200,  587,  200,  200,  200,  200,  201,
      216,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  202,  216,  202,  202,  202,  202,  203,  217,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  204,  217,  204,  204,  204,  204,  205,  205,  205,
      205,  206,  213,  206,  206,  206,  206,  206,  208,  213,

      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  209,  209,  209,  209,  210,  214,  210,  210,  210,
      210,  218,  220,  223,  224,  227,  225,  230,  228,  231,
      227,  228,  229,  232,  214,  220,  223,  233,  232,  229,
      230,  234,  224,  218,  225,  235,  236,  231,  239,  239,
      239,  239,  233,  251,  584,  236,  581,  235,  252,  252,
      240,  234,  240,  240,  240,  240,  240,  242,  251,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      243,  243,  243,  243,  244,  296,  244,  244,  244,  244,
      245,  580,  245,  245,  245,  245,  246,  296,  246,  246,

      246,  246,  247,  253,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  248,  253,  248,  248,  248,
      248,  249,  254,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  250,  263,  250,  250,  250,  250,
      255,  255,  256,  257,  254,  258,  259,  256,  257,  264,
      258,  259,  262,  262,  265,  266,  267,  263,  265,  267,
      268,  268,  269,  270,  271,  273,  290,  274,  265,  291,
      266,  264,  292,  292,  273,  294,  293,  312,  271,  577,
      290,  293,  270,  312,  269,  274,  278,  360,  278,  278,
      278,  278,  279,  291,  279,  279,  279,  279,  280,  294,

      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  281,  360,  281,  281,  281,  281,  282,  306,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      283,  306,  283,  283,  283,  283,  284,  284,  284,  284,
      285,  304,  285,  285,  285,  285,  285,  287,  304,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      288,  288,  288,  288,  289,  301,  289,  289,  289,  289,
      302,  303,  307,  308,  301,  302,  303,  305,  309,  310,
      305,  311,  308,  309,  307,  328,  311,  316,  316,  316,
      316,  317,  328,  317,  317,  317,  317,  317,  310,  319,

      574,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  320,  320,  320,  320,  321,  571,  321,  321,
      321,  321,  322,  322,  322,  322,  323,  428,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  324,
      329,  324,  324,  324,  324,  325,  428,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  326,  327,
      326,  326,  326,  326,  329,  330,  331,  335,  336,  337,
      338,  327,  339,  331,  394,  340,  341,  339,  342,  343,
      394,  335,  338,  330,  346,  341,  336,  337,  340,  346,
      370,  568,  342,  350,  350,  350,  350,  343,  351,  370,

      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  352,  565,  352,  352,  352,  352,  353,  416,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      354,  416,  354,  354,  354,  354,  355,  362,  355,  355,
      355,  355,  355,  357,  362,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  358,  358,  358,  358,
      359,  361,  359,  359,  359,  359,  364,  372,  376,  373,
      389,  410,  410,  361,  373,  389,  372,  379,  364,  379,
      379,  379,  379,  379,  382,  382,  382,  382,  376,  381,
      430,  381,  381,  381,  381,  381,  381,  381,  381,  381,

      381,  381,  383,  432,  383,  383,  383,  383,  384,  430,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  385,  432,  385,  385,  385,  385,  386,  395,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      387,  390,  387,  387,  387,  387,  391,  396,  395,  397,
      467,  391,  402,  390,  402,  402,  402,  402,  397,  412,
      412,  396,  401,  467,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  403,  447,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  404,  562,
      404,  404,  404,  404,  405,  447,  405,  405,  405,  405,

      405,  407,  559,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  408,  408,  408,  408,  409,  411,
      409,  409,  409,  409,  411,  413,  415,  429,  429,  419,
      413,  419,  419,  419,  419,  419,  422,  422,  422,  422,
      423,  431,  423,  423,  423,  423,  415,  421,  556,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      424,  431,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  425,  553,  425,  425,  425,  425,  426,
      550,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  427,  433,  427,  427,  427,  427,  433,  437,

      547,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  438,  544,  438,  438,  438,  438,  439,  542,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  440,  541,  440,  440,  440,  440,  441,  531,  441,
      441,  441,  441,  441,  443,  530,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  444,  444,  444,
      444,  445,  446,  445,  445,  445,  445,  446,  448,  449,
      465,  482,  528,  448,  527,  465,  482,  455,  449,  455,
      455,  455,  455,  455,  457,  526,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  458,  458,  458,

      458,  459,  525,  459,  459,  459,  459,  460,  523,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      461,  522,  461,  461,  461,  461,  462,  521,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  463,
      520,  463,  463,  463,  463,  472,  518,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  473,  517,
      473,  473,  473,  473,  474,  516,  474,  474,  474,  474,
      515,  474,  474,  474,  474,  474,  474,  475,  513,  475,
      475,  475,  475,  476,  512,  476,  476,  476,  476,  476,
      478,  510,  478,  478,  478,  478,  478,  478,  478,  478,

      478,  478,  478,  480,  509,  480,  480,  480,  480,  487,
      504,  487,  487,  487,  487,  487,  489,  503,  489,  489,
      489,  489,  501,  489,  489,  489,  489,  489,  489,  490,
      497,  490,  490,  490,  490,  491,  496,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  492,  495,
      492,  492,  492,  492,  498,  494,  498,  498,  498,  498,
      488,  498,  498,  498,  498,  498,  498,  499,  485,  499,
      499,  499,  499,  500,  483,  500,  500,  500,  500,  500,
      506,  481,  506,  506,  506,  506,  533,  533,  533,  533,
      533,  534,  534,  534,  534,  534,  535,  535,  535,  535,

      535,  536,  477,  536,  536,  536,  537,  537,  537,  537,
      537,  538,  538,  538,  539,  471,  539,  539,  539,  540,
      540,  543,  543,  545,  545,  546,  546,  548,  548,  549,
      549,  551,  551,  552,  552,  554,  554,  555,  555,  557,
      557,  558,  558,  560,  560,  561,  561,  563,  563,  564,
      564,  566,  566,  567,  567,  569,  569,  570,  570,  572,
      572,  573,  573,  575,  575,  576,  576,  578,  578,  579,
      579,  582,  582,  583,  583,  585,  585,  586,  586,  589,
      589,  590,  590,  592,  592,  595,  595,  596,  596,  597,
      597,  599,  599,  600,  600,  601,  601,  603,  603,  604,

      604,  605,  605,  607,  607,  608,  608,  609,  609,  611,
      611,  470,  469,  468,  466,  464,  456,  453,  452,  451,
      450,  442,  436,  435,  434,  420,  418,  417,  414,  406,
      400,  399,  398,  388,  380,  378,  377,  375,  374,  371,
      369,  368,  367,  366,  365,  363,  356,  349,  348,  347,
      345,  344,  334,  333,  332,  318,  315,  314,  313,  300,
      299,  298,  297,  295,  286,  277,  276,  275,  272,  261,
      260,  241,  238,  237,  226,  222,  221,  215,  207,  199,
      198,  197,  176,  170,  160,  159,  158,  153,  146,  142,
      138,  132,  124,  123,  120,   96,   90,   79,   78,   69,

       63,   59,   58,   56,   51,   47,   46,   43,   38,   24,
       21,   18,   17,   14,   12,    7,    4,    3,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[59] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
};
#line 1042 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 1147 "SrvLexer.cpp"

	if ( (yy_init) )
		{
		(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 533 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1819 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 54 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 59 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 61 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 62 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 64 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 69 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno; 
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 103 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 104 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 45:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 138 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 147 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 156 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 165 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 177 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 184 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 205 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd then no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 237 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd; 
      YYABORT; 
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 247 "SrvLexer.l"
{ 
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) { 
        Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd; 
        YYABORT; 
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 256 "SrvLexer.l"
{ return yytext[0]; } 
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 259 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 1665 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 533 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 533 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 532);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
    	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
    	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef yytext_ptr
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
#endif
#line 259 "SrvLexer.l"




