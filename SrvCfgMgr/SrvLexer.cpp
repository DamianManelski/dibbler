#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 90
#define YY_END_OF_BUFFER 91
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[742] =
    {   0,
        1,    1,    0,    0,    0,    0,   91,   89,    2,    1,
        1,   89,   72,   89,   89,   88,   88,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   76,   76,
       90,    1,    1,    1,    0,   84,   72,    0,   84,   74,
       73,   88,    0,    0,   87,    0,   81,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   69,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   16,
       17,   85,   85,   85,   85,   85,   85,   85,   85,   85,

       75,   73,   88,    0,    0,   80,   86,   79,   79,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   68,   88,    0,    0,    0,   78,   78,    0,   79,
        0,   79,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   29,   85,   85,   85,   40,   85,   85,   85,
       85,   85,   85,    0,   85,   85,   85,   85,   85,   85,
       22,   85,   85,   85,   85,   85,   85,   85,   85,   85,

       85,   70,   85,   85,   85,   85,   85,   88,    0,    0,
        0,    0,   78,    0,   78,    0,   79,   79,   79,   79,
       85,   85,   85,   85,   85,   85,    4,   85,   85,   85,
       85,   85,   46,   71,   85,    3,   85,   85,   85,   85,
       85,   85,    0,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,    7,   85,   23,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,    0,    0,    0,    0,
       78,   78,   78,   78,    0,   79,   79,   79,    0,   79,
       85,   85,   85,   85,   85,   85,   85,   85,   28,   85,
       85,   35,   85,   85,   85,   85,   85,   85,   85,   85,

       85,    0,    0,   85,   85,   85,   33,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,    0,    0,    0,   78,   78,   78,
        0,   78,    0,    0,   79,   79,   79,   79,   85,   85,
       31,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,    0,    0,
       85,   85,   85,   85,   85,   50,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   20,   85,   85,   85,
        0,    0,    0,    0,    0,   78,   78,   78,   78,    0,
       79,   79,   79,    0,   79,   85,   85,   85,   85,   85,

       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   45,   85,   12,   10,    0,    0,   85,
       85,   85,   48,   85,   85,   85,   85,   85,   85,   85,
       85,   85,    5,   85,   85,   85,   85,   13,    0,    0,
        0,   78,   78,   78,    0,   78,   83,   79,   79,   79,
       79,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   11,
        0,    0,   85,   85,   85,   49,   85,   85,   85,   85,
       30,   85,   85,    6,   37,   85,   85,   85,    0,    0,
        0,   82,   78,   78,   78,   78,   79,   79,   79,    0,

       79,   85,   85,   85,   85,   85,   85,   47,   85,   85,
       85,   85,   85,   34,   85,   32,   85,   85,   85,    0,
        0,   42,   41,   36,   85,   21,   85,   85,   39,   38,
       85,   85,   85,    0,    0,   78,   78,   78,    0,   78,
       79,   79,   79,   79,   85,   14,   52,   85,   85,   57,
       85,   85,   85,   60,   85,   85,   85,   85,   85,   44,
       43,   85,   85,   85,   54,   85,   51,    0,    0,    0,
       78,   78,   78,   78,   79,   79,   79,    0,   79,   85,
       59,   85,   85,   85,   85,   61,   53,   85,   85,    8,
       85,   24,   85,   85,    0,    0,   78,   78,   78,    0,

       78,   79,   79,   79,   79,   85,   58,   85,   85,   85,
       85,   85,   55,   85,   85,   85,   85,    0,    0,    0,
       78,   78,   78,   78,   79,   79,   79,    0,   79,   85,
       85,   85,   85,   85,   85,   85,   85,   15,   19,    0,
       77,   80,   78,   78,   78,    0,   78,   79,   79,   79,
       79,   85,   26,   85,   62,   85,   25,   85,   85,    0,
       77,    0,   78,   78,   78,   78,   78,   79,   79,   79,
        0,   79,   85,   27,   63,   85,   85,   85,   85,   85,
       77,   80,   78,    0,   78,   78,   78,   78,   79,   79,
       79,   56,   85,   85,   85,   85,   85,   18,   77,   78,

       78,   78,   78,   79,   79,   79,   64,   65,   66,   67,
        9,   78,   78,    0,   78,   78,   79,   78,   78,   79,
       78,   78,    0,   78,   78,   78,   78,    0,   78,   78,
       78,   78,    0,   78,   78,   78,   78,    0,   78,   78,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
        1,    1,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,    1,    1,    1,    1,    1,   49,   24,   50,   51,

       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[74] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        4,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    6,    7,    7,    7,    7,    7,    7,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    7,    7,
        7,    7,    7,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[809] =
    {   0,
        0,    0, 2011, 2010,    0,    0, 2017, 4066, 4066,   71,
       73, 2010,    0, 2007,   70,   70,   33, 1991,  129,  185,
       78,   72,   34,  193,   92, 1955,  192,  196,  217,  154,
      204,  109,  234,  288,   77,  141,  209,  143, 4066, 1964,
     4066,  103,  107,  114, 1970, 4066,    0, 1967, 1965, 4066,
        0,  344, 1949,  278, 4066,    0,  387, 1948,  428,  137,
      140, 1907,  152,  146,  283,  221,  241,  225,  252,  278,
      190,  287,  290,  239,  367,  293,  296,  282, 1906,  313,
      312,  163,  318,  300,  360,  428,  369,  395,  408, 1905,
     1892,  167,  437,  439,  447,  442,  452,  448,  449,  453,

     4066,    0,  507,  525, 1891,  550,    0,  593,  568,  634,
      297,  425,  446,  436,  495,  528,  570,  258,  607,  572,
      611,  642,  647,  604,  648,  646,  650,  614,  651,  363,
      410,  365,  645,  668,  657,  652,  673,  670,  676,  672,
      686,  482,  688,  690,  697,  701,  699,  695,  710,  711,
      714, 1890,  760,  778, 1889, 1883,  805,  823,  787,  848,
      889,  866,  930,  455,  868,  490,  716,  748,  899,  870,
      896,  903, 1873,  795,  941,  717, 1872,  911,  867,  943,
      944,  945,  939, 1880,  950,  947,  949,  970,  967,  956,
     1852,  975,  720,  981,  948,  983,  995, 1002,  999,  974,

      493, 1783, 1008,  992, 1010, 1001,  583, 1773, 1677, 1675,
     1674,  832, 1058, 1099, 1076, 1117, 1142, 1160, 1185, 1203,
     1673, 1079, 1066, 1203, 1193,  615,  617, 1207, 1208, 1012,
     1209, 1210, 1671, 1669,  742, 1027, 1211, 1119, 1217, 1018,
     1218, 1234, 1220, 1225, 1232, 1236, 1242, 1259, 1243, 1254,
     1250, 1032, 1255, 1636, 1267, 1635, 1263, 1271, 1273, 1279,
     1270, 1277, 1283, 1034, 1274, 1284, 1632, 1631, 1628, 1337,
     1348, 1366, 1391, 1409, 1169,  164, 1586, 1434, 1475, 1452,
     1036, 1298, 1456, 1290, 1482, 1369, 1488, 1483, 1045, 1132,
     1338, 1585, 1484, 1485, 1486, 1487, 1415, 1495, 1489, 1287,

     1501,  510, 1216, 1512, 1492, 1513, 1581, 1518, 1519, 1515,
     1538, 1517, 1319, 1323, 1528, 1529, 1544, 1540, 1542, 1324,
     1553, 1546, 1424, 1554, 1578, 1571, 1598,  256, 1570, 1610,
     1651, 1628, 1669, 1694, 1705, 1723, 1748, 1766, 1756, 1633,
     1548, 1530, 1569, 1766, 1772, 1560, 1767, 1774, 1769, 1629,
     1770, 1794, 1784, 1797, 1787, 1798, 1799, 1818, 1657, 1695,
     1808, 1802, 1812, 1801, 1819, 1494, 1822, 1827, 1830, 1831,
     1843, 1832, 1837, 1838, 1841, 1847, 1493, 1853, 1850, 1866,
     1490, 1460, 1459, 1904, 1919, 1930, 1948, 1973, 1991, 1732,
      259, 1458, 2016, 2057, 2034, 1951, 2057, 1877, 1576, 1994,

     2034, 2038, 2041, 2039, 2068, 2076, 2070, 2069, 2078, 2073,
     2079, 1577, 2075, 1457, 2083, 1455, 1454,  202, 1824, 2100,
     2093, 2108, 1453, 2104, 1579, 2094, 2101, 2115, 2121, 2110,
     2124, 2111, 1452, 2126, 2118, 2135, 2132, 1417, 1414, 1413,
     2183,  325, 1411, 2194, 2235, 2212, 2221, 2278, 2253, 2321,
     2296, 2142, 2147, 2298, 2328, 2333, 2329, 2140, 1630, 2330,
     2259, 2331, 2334, 1920, 2337, 2338, 1684, 2342, 1875, 1410,
     2127, 2141, 2332, 2341, 2356, 1409, 2360, 2358, 2362, 2364,
     1373, 2367, 2376, 1372, 1371, 2383, 2385, 2386, 1370, 1368,
     1367, 2429, 2440, 2458, 2483, 2501,  366, 1366, 2526, 2567,

     2544, 2548, 2466, 2574, 2504, 2396, 2389, 1322, 2575, 1886,
     2549, 2546, 2579, 1318, 2580, 1315, 2578, 2377, 2582, 2229,
     2430, 1309, 1308, 1305, 2599, 1304, 2600, 2584, 1238, 1175,
     2601, 2583, 2602, 1123, 1122,  413, 1121, 2646, 2687, 2628,
     2730, 2664, 2773, 2705, 2665, 1118, 1117, 2706, 2742, 1084,
     2707, 2744, 1888, 1083, 2749, 2782, 2708, 2783, 2785, 4066,
     4066, 2784, 2786, 2791, 1081, 2798, 1080, 1078, 1077, 1076,
     2844, 2829, 2887, 2862,  484, 1044, 2930, 2971, 2905, 2792,
     1043, 2865, 2910, 2908, 2971, 1040, 1035, 2951, 2949, 2163,
     2950, 1030, 2983, 2907,  985,  946,  488,  910, 3040, 3081,

     3025, 3124, 3058, 3167, 3099, 3060,  909, 2585, 2981, 3103,
     2997, 3131,  908, 3099, 3137, 3174, 3059,  907,  906,  905,
     3230, 3149, 3273, 3192,  491,  904, 3316, 3357, 3210, 3210,
     3211, 3237,  108, 2985, 3212, 3220, 3246,  902,  901,  900,
      874,    0,  494,  871, 3400, 3441, 3293, 3484, 3334, 3527,
     3375, 3339,  869, 3294,  866,  743,  741, 3336, 3377,  732,
      728,  726,  689, 3570, 3425, 3613, 3459,  613,  659, 3656,
        0, 3502, 2586,  655,  612,  311,  200,  364, 3378, 3462,
      610, 4066,  609,    0,  745,  606, 3699, 3545, 3742, 3588,
        0,  574,  107,  362,  166,  406, 3517,  573,  569,  568,

      532, 3785, 3631, 1037,  531,    0,  530,  529,  527,  526,
      474,  445,  407,    0, 3674, 4066,    0,  405,  404, 4066,
      403,  400,    0,  361,  321,  308,  265,    0,  264,  255,
      250,  207,    0,  201,  147,  145,  117,    0,   80,   59,
     4066, 3838, 3845, 3852, 3859, 3866, 3871, 3878, 3881, 3884,
     3887, 3890, 3893, 3896, 3899, 3902, 3905, 3909, 3911, 3914,
     3918, 3920, 3923, 3926, 3929, 3932, 3935, 3938, 3941, 3944,
     3947, 3950, 3953, 3956, 3959, 3962, 3965, 3968, 3971, 3974,
     3977, 3980, 3983, 3986, 3989, 3992, 3995, 3998, 4001, 4004,
     4007, 4010, 4013, 4016, 4019, 4022, 4025, 4028, 4031, 4034,

     4037, 4040, 4043, 4046, 4049, 4052, 4055, 4058
    } ;

static yyconst flex_int16_t yy_def[809] =
    {   0,
      741,    1,  742,  742,  743,  743,  741,  741,  741,  741,
      741,  744,  745,  746,  741,  741,   16,  741,  747,  747,
       20,   20,   20,   20,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  741,  741,
      741,  741,  741,  741,  744,  741,  745,  746,  741,  741,
      748,  741,  749,   52,  741,  750,  741,  747,   20,   59,
       59,  747,  747,   59,  747,  747,  747,  747,  747,  747,
       59,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,

      741,  748,  741,  103,  751,  741,  750,  741,  108,   59,
      110,  110,  747,  110,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  741,  153,  752,  753,  741,  157,  741,  741,
      741,  160,  110,  163,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  741,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,

      747,  747,  747,  747,  747,  747,  747,  153,  154,  754,
      755,  741,  741,  741,  213,  741,  741,  217,  741,  219,
      163,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  741,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  741,  756,  757,  741,
      741,  271,  741,  273,  741,  758,  741,  741,  741,  278,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,

      747,  741,  741,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  759,  760,  741,  761,  741,  741,
      741,  330,  741,  741,  741,  335,  741,  337,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  741,  741,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      741,  762,  763,  741,  741,  741,  386,  741,  388,  741,
      758,  741,  741,  741,  393,  747,  747,  747,  747,  747,

      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  741,  741,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  764,  765,
      741,  761,  741,  741,  741,  444,  741,  741,  448,  741,
      450,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      741,  741,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  741,  766,
      767,  741,  741,  493,  741,  495,  758,  741,  741,  741,

      499,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  741,
      741,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  768,  769,  761,  741,  741,  741,  538,
      741,  541,  741,  543,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  741,
      741,  747,  747,  747,  747,  747,  747,  741,  770,  771,
      741,  571,  741,  573,  758,  741,  741,  741,  577,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  772,  773,  761,  741,  741,  741,

      599,  741,  602,  741,  604,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  741,  774,  775,
      741,  621,  741,  623,  758,  741,  741,  741,  627,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  776,
      777,  778,  761,  741,  741,  741,  645,  741,  648,  741,
      650,  747,  747,  747,  747,  747,  747,  747,  747,  741,
      779,  741,  780,  741,  664,  741,  666,  758,  741,  741,
      781,  670,  747,  747,  747,  747,  747,  747,  747,  747,
      782,  741,  783,  784,  761,  741,  741,  687,  741,  689,
      785,  747,  747,  747,  747,  747,  747,  747,  741,  786,

      787,  741,  702,  758,  741,  788,  747,  747,  747,  747,
      747,  741,  789,  790,  741,  741,  791,  792,  793,  741,
      741,  794,  795,  796,  797,  741,  798,  799,  800,  801,
      741,  802,  803,  804,  805,  741,  806,  807,  808,  741,
        0,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,

      741,  741,  741,  741,  741,  741,  741,  741
    } ;

static yyconst flex_int16_t yy_nxt[4140] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   26,   26,   28,   26,   29,   30,   31,   26,   32,
       33,   34,   35,   36,   37,   26,   38,   26,   19,   21,
       22,   23,   24,   25,   26,   27,   26,   26,   28,   26,
       29,   30,   31,   26,   32,   33,   34,   35,   36,   37,
       26,   38,   26,   42,   43,   44,   43,   50,  741,   70,
      738,   51,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   53,   54,   54,   54,   54,   54,   54,  741,   55,

       64,  738,   66,  741,   70,   42,   43,   67,   68,   44,
       43,   65,   96,  741,   69,   56,   42,   43,   54,   54,
       54,   54,   54,  707,   55,  655,   64,   66,  741,  741,
      741,   85,   67,   68,   73,   86,   65,   96,  738,   69,
       56,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       53,   59,   59,   60,   61,   59,   59,   85,   62,   73,
       86,  111,  741,   97,  741,  112,  733,   98,  738,  100,
      114,   63,  134,  741,  159,  741,  144,   59,   60,   61,
       59,   59,  709,   62,  741,  161,  111,  741,  741,   97,
      112,   81,   98,  113,  100,  114,   63,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   53,   59,   59,   59,
       59,   59,   59,  741,   62,   71,   81,  741,  113,   74,
      695,  741,  733,  123,  471,  741,   76,   75,  733,   82,
      741,   72,   77,   59,   59,   59,   59,   59,  741,   62,
       83,   71,  741,   84,   74,   99,  741,   78,  123,  117,
      471,   76,   75,   79,   82,  741,   72,   77,   80,  119,
      741,  126,  741,   87,   88,   83,  212,  171,   84,  159,
       99,  728,   78,  741,  117,   89,  733,  214,   79,  741,
      279,  118,  120,   80,  119,  728,  728,  126,   87,   88,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  741,

       89,   90,   91,  741,  741,  115,  118,  120,  741,  741,
       92,  741,  124,  116,  741,  121,  125,  741,   93,  122,
      129,  741,  131,  164,  130,  693,  136,   94,  694,  723,
       95,  115,  741,  741,  741,  212,   92,  124,  116,  741,
      121,  125,  728,   93,  122,  129,  331,  131,  164,  130,
      132,  136,   94,  133,  135,   95,  103,  103,  103,  103,
      103,  103,  103,  103,  103,   53,  104,  104,  104,  104,
      104,  104,  183,   55,  186,  132,  159,  696,  133,  135,
      708,  741,  723,  741,  741,  741,  741,  394,  741,  127,
      741,  141,  104,  104,  104,  104,  104,  137,   55,  108,

      108,  108,  108,  108,  108,  108,  108,  108,  128,  109,
      109,  109,  109,  109,  109,  127,  741,  141,  184,  185,
      710,  723,  137,  212,  714,  723,  714,  741,  714,  741,
      143,  741,  142,  128,  445,  109,  109,  109,  109,  109,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  741,
      110,  110,  110,  110,  110,  110,  143,  142,  741,  138,
      741,  139,  140,  741,  165,  167,  684,  741,  741,  741,
      741,  145,  148,  741,  741,  166,  110,  110,  110,  110,
      110,  146,  147,  150,  138,  149,  139,  140,  151,  165,
      167,  198,  222,  152,  159,  741,  145,  148,  212,  225,

      166,  159,  261,  741,  212,  500,  146,  147,  150,  539,
      149,  741,  578,  151,  741,  600,  741,  222,  152,  153,
      153,  153,  153,  153,  153,  153,  153,  153,   53,  154,
      154,  154,  154,  154,  154,  168,   55,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  359,  741,  741,  741,
      741,  741,  671,  714,  169,  154,  154,  154,  154,  154,
      168,   55,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  359,  158,  158,  158,  158,  158,  158,  741,  169,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  684,
      662,  741,  266,  741,  741,  741,  170,  173,  158,  158,

      158,  158,  158,  159,  741,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  161,  162,  162,  162,  162,  162,
      162,  170,  173,  159,  287,  741,  288,  646,  741,  172,
      684,  662,  741,  741,  628,  741,  741,  174,  741,  177,
      181,  162,  162,  162,  162,  162,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  172,  163,  163,  163,  163,
      163,  163,  174,  741,  177,  181,  741,  741,  741,  741,
      179,  741,  741,  741,  180,  187,  741,  182,  741,  192,
      628,  175,  163,  163,  163,  163,  163,  176,  178,  741,
      191,  741,  188,  741,  741,  179,  194,  741,  195,  180,

      187,  189,  182,  193,  192,  190,  175,  741,  196,  741,
      684,  741,  176,  178,  200,  191,  741,  188,  741,  204,
      741,  194,  741,  201,  195,  197,  189,  202,  193,  199,
      190,  741,  741,  196,  203,  741,  206,  741,  741,  200,
      205,  741,  226,  234,  204,  252,  207,  682,  201,  662,
      197,  294,  202,  620,  199,  212,  675,  676,  677,  203,
      678,  206,  741,  741,  741,  205,  646,  226,  234,  741,
      252,  207,  208,  208,  208,  208,  208,  208,  208,  208,
      208,   53,  209,  209,  209,  209,  209,  209,  227,   55,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  216,

      216,  216,  216,  216,  216,  216,  216,  216,  209,  209,
      209,  209,  209,  227,   55,  212,  741,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  214,  215,  215,  215,
      215,  215,  215,  741,  232,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  215,  215,  215,  215,  215,  159,  232,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  161,
      218,  218,  218,  218,  218,  218,  741,  223,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  741,  741,  741,
      741,  741,  600,  236,  224,  662,  218,  218,  218,  218,

      218,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      229,  220,  220,  220,  220,  220,  220,  741,  236,  224,
      741,  620,  741,  741,  741,  578,  642,  620,  570,  741,
      741,  539,  741,  231,  228,  229,  230,  220,  220,  220,
      220,  220,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  235,  221,  221,  221,  221,  221,  221,  231,  228,
      741,  230,  741,  233,  741,  741,  741,  620,  741,  741,
      741,  741,  240,  241,  242,  244,  235,  741,  221,  221,
      221,  221,  221,  238,  237,  247,  239,  246,  741,  233,
      245,  741,  250,  249,  254,  741,  741,  240,  241,  242,

      244,  251,  741,  248,  741,  253,  570,  260,  238,  237,
      247,  239,  246,  741,  263,  245,  741,  250,  249,  254,
      741,  256,  741,  741,  255,  259,  251,  257,  248,  741,
      253,  741,  260,  741,  262,  264,  295,  265,  291,  741,
      263,  312,  258,  322,  299,  339,  256,  159,  741,  255,
      259,  741,  257,  741,  347,  741,  741,  741,  671,  262,
      264,  741,  265,  291,  741,  500,  741,  258,  212,  299,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  214,
      272,  272,  272,  272,  272,  272,  741,  741,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  106,  570,  491,

      741,  741,  741,  282,  741,  741,  272,  272,  272,  272,
      272,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      281,  274,  274,  274,  274,  274,  274,  275,  282,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  741,  741,
      741,  348,  445,  570,  491,  281,  297,  274,  274,  274,
      274,  274,  159,  741,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  161,  277,  277,  277,  277,  277,  277,
      741,  297,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      277,  277,  277,  277,  277,  159,  741,  278,  278,  278,

      278,  278,  278,  278,  278,  278,  279,  280,  280,  280,
      280,  280,  280,  741,  741,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  741,  284,  285,  286,  741,  741,
      741,  741,  741,  280,  280,  280,  280,  280,  741,  741,
      293,  296,  360,  283,  292,  302,  741,  298,  289,  290,
      284,  285,  286,  741,  300,  741,  301,  741,  305,  741,
      303,  304,  306,  741,  741,  293,  296,  360,  283,  292,
      302,  741,  298,  289,  290,  741,  741,  307,  309,  300,
      741,  308,  301,  305,  741,  303,  304,  306,  741,  311,
      310,  741,  741,  314,  741,  741,  313,  316,  741,  315,

      741,  318,  307,  309,  741,  741,  317,  308,  741,  324,
      320,  741,  357,  323,  311,  310,  342,  319,  314,  741,
      340,  313,  316,  321,  315,  741,  741,  318,  369,  741,
      741,  317,  370,  376,  324,  320,  741,  357,  323,  741,
      741,  342,  319,  741,  741,  741,  340,  327,  321,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  212,  741,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  214,
      329,  329,  329,  329,  329,  329,  741,  349,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  394,  106,  491,
      741,  383,  741,  741,  741,  344,  329,  329,  329,  329,

      329,  212,  349,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  331,  332,  332,  332,  332,  332,  332,  741,
      344,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      741,  741,  331,  379,  491,  383,  741,  354,  741,  332,
      332,  332,  332,  332,  159,  741,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  279,  336,  336,  336,  336,
      336,  336,  741,  354,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  741,  741,  741,  741,  741,  741,  279,
      106,  383,  336,  336,  336,  336,  336,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  341,  338,  338,  338,

      338,  338,  338,  741,  741,  741,  741,  741,  741,  741,
      741,  269,  343,  741,  741,  741,  741,  346,  350,  351,
      352,  341,  741,  338,  338,  338,  338,  338,  345,  355,
      353,  362,  356,  741,  741,  358,  741,  343,  741,  741,
      741,  368,  346,  350,  351,  352,  361,  365,  366,  741,
      741,  741,  363,  345,  355,  353,  362,  356,  364,  741,
      358,  741,  371,  741,  367,  741,  368,  741,  372,  741,
      373,  361,  365,  366,  741,  741,  399,  363,  375,  378,
      374,  741,  403,  364,  380,  455,  468,  371,  477,  367,
      741,  214,  383,  372,  377,  373,  400,  741,  741,  269,

      741,  399,  741,  375,  378,  374,  741,  161,  403,  380,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  377,
      212,  400,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  331,  387,  387,  387,  387,  387,  387,  741,  509,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  106,
      741,  741,  269,  156,  741,  409,  741,  741,  387,  387,
      387,  387,  387,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  398,  389,  389,  389,  389,  389,  389,  390,
      409,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      741,  418,  741,  517,  741,  269,  156,  398,  741,  389,

      389,  389,  389,  389,  159,  741,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  159,  418,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  279,  392,  392,  392,
      392,  392,  392,  741,  419,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  392,  392,  392,  392,  392,  159,  419,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  394,
      395,  395,  395,  395,  395,  395,  741,  741,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  741,  741,  396,
      741,  741,  397,  741,  741,  741,  395,  395,  395,  395,

      395,  404,  402,  405,  741,  741,  410,  401,  741,  406,
      412,  407,  408,  414,  396,  741,  411,  397,  741,  741,
      741,  413,  741,  741,  415,  416,  404,  402,  405,  741,
      420,  410,  401,  741,  406,  412,  407,  408,  414,  741,
      741,  423,  411,  741,  417,  421,  413,  425,  741,  415,
      416,  741,  741,  741,  428,  422,  420,  426,  741,  741,
      424,  429,  741,  427,  741,  430,  423,  472,  741,  417,
      421,  741,  425,  741,  741,  431,  434,  432,  433,  428,
      422,  435,  426,  436,  519,  424,  429,  741,  427,  243,
      437,  430,  472,  741,  741,  552,  741,  585,  741,  454,

      431,  434,  432,  433,  106,  438,  435,  741,  436,  741,
      156,  741,  156,  741,  441,  437,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  454,  741,  741,  741,  212,
      438,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      212,  741,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  331,  443,  443,  443,  443,  443,  443,  741,  514,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  741,
      106,   48,  741,   49,   46,  101,  741,  452,  443,  443,
      443,  443,  443,  212,  514,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  445,  446,  446,  446,  446,  446,

      446,  741,  452,  446,  446,  446,  446,  446,  446,  446,
      446,  446,   57,   49,   46,  741,  741,   40,   40,  741,
      456,  446,  446,  446,  446,  446,  159,  741,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  394,  449,  449,
      449,  449,  449,  449,  741,  456,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  741,  741,  741,  741,  741,
      741,  460,  741,  457,  449,  449,  449,  449,  449,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  741,  451,
      451,  451,  451,  451,  451,  458,  459,  460,  457,  741,
      741,  741,  453,  741,  741,  464,  741,  741,  466,  741,

      741,  469,  461,  463,  741,  451,  451,  451,  451,  451,
      458,  459,  462,  465,  741,  741,  470,  453,  478,  474,
      464,  741,  741,  466,  467,  741,  469,  461,  463,  741,
      473,  741,  741,  476,  475,  479,  741,  462,  465,  741,
      482,  470,  741,  478,  474,  741,  481,  741,  480,  467,
      483,  484,  485,  741,  486,  473,  741,  520,  476,  475,
      479,  741,  487,  741,  502,  482,  508,  521,  741,  488,
      741,  481,  614,  480,  741,  483,  484,  485,  741,  486,
      503,  741,  520,  741,  741,  741,  741,  487,  741,  741,
      502,  508,  521,  741,  488,  492,  492,  492,  492,  492,

      492,  492,  492,  492,  212,  503,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  445,  494,  494,  494,  494,
      494,  494,  741,  741,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  494,  494,  494,  494,  494,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  741,  496,  496,  496,
      496,  496,  496,  741,  560,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  741,  741,  741,  741,  741,  741,
      741,  511,  741,  496,  496,  496,  496,  496,  159,  560,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  394,

      498,  498,  498,  498,  498,  498,  741,  511,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  498,  498,  498,  498,
      498,  159,  504,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  500,  501,  501,  501,  501,  501,  501,  741,
      741,  741,  741,  741,  741,  741,  513,  504,  741,  741,
      741,  505,  741,  741,  516,  507,  512,  522,  741,  501,
      501,  501,  501,  501,  506,  510,  518,  741,  515,  741,
      523,  741,  513,  741,  526,  741,  505,  741,  741,  516,
      507,  512,  522,  525,  528,  524,  527,  741,  741,  506,

      510,  518,  529,  515,  741,  523,  741,  741,  531,  526,
      741,  532,  533,  558,  550,  530,  741,  741,  525,  528,
      524,  527,  741,  741,  741,  741,  549,  529,  741,  741,
      741,  741,  741,  531,  741,  741,  532,  533,  558,  550,
      530,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      212,  549,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  445,  537,  537,  537,  537,  537,  537,  741,  561,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  537,  537,
      537,  537,  537,  212,  561,  538,  538,  538,  538,  538,

      538,  538,  538,  538,  539,  540,  540,  540,  540,  540,
      540,  741,  546,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  741,  741,  741,  741,  741,  741,  741,  741,
      548,  540,  540,  540,  540,  540,  159,  546,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  500,  542,  542,
      542,  542,  542,  542,  741,  548,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  741,  741,  741,  741,  741,
      741,  741,  554,  553,  542,  542,  542,  542,  542,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  545,  544,
      544,  544,  544,  544,  544,  741,  741,  554,  553,  741,

      741,  741,  556,  741,  741,  741,  741,  741,  551,  555,
      564,  557,  559,  545,  547,  544,  544,  544,  544,  544,
      741,  741,  741,  741,  566,  631,  567,  565,  556,  562,
      563,  741,  692,  551,  555,  564,  557,  559,  741,  547,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  566,
      631,  567,  565,  741,  562,  563,  212,  692,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  539,  572,  572,
      572,  572,  572,  572,  741,  741,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  741,  741,  741,  741,  741,
      741,  580,  741,  741,  572,  572,  572,  572,  572,  573,

      573,  573,  573,  573,  573,  573,  573,  573,  741,  574,
      574,  574,  574,  574,  574,  741,  580,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  741,  741,  741,  741,
      741,  741,  741,  583,  588,  574,  574,  574,  574,  574,
      159,  581,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  500,  576,  576,  576,  576,  576,  576,  583,  588,
      741,  741,  741,  741,  741,  741,  581,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  582,  584,  576,  576,
      576,  576,  576,  159,  586,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  578,  579,  579,  579,  579,  579,

      579,  582,  584,  741,  741,  741,  741,  741,  589,  586,
      590,  591,  741,  741,  741,  587,  741,  741,  741,  741,
      741,  579,  579,  579,  579,  579,  593,  592,  594,  741,
      606,  741,  741,  589,  741,  590,  591,  741,  741,  741,
      587,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      741,  593,  592,  594,  212,  606,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  539,  598,  598,  598,  598,
      598,  598,  741,  741,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  741,  741,  741,  741,  741,  741,  741,
      741,  607,  598,  598,  598,  598,  598,  212,  741,  599,

      599,  599,  599,  599,  599,  599,  599,  599,  600,  601,
      601,  601,  601,  601,  601,  741,  607,  603,  603,  603,
      603,  603,  603,  603,  603,  603,  741,  741,  741,  741,
      741,  741,  608,  741,  609,  601,  601,  601,  601,  601,
      159,  617,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  578,  603,  603,  603,  603,  603,  603,  608,  609,
      741,  741,  741,  741,  741,  741,  617,  741,  741,  741,
      741,  741,  741,  612,  741,  613,  615,  741,  603,  603,
      603,  603,  603,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  741,  605,  605,  605,  605,  605,  605,  612,

      613,  615,  741,  632,  741,  610,  741,  656,  741,  741,
      741,  611,  741,  741,  741,  741,  741,  741,  741,  605,
      605,  605,  605,  605,  616,  741,  634,  741,  741,  632,
      610,  741,  741,  656,  741,  741,  611,  622,  622,  622,
      622,  622,  622,  622,  622,  622,  741,  741,  741,  616,
      212,  634,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  600,  622,  622,  622,  622,  622,  622,  741,  741,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  741,
      741,  741,  741,  741,  741,  639,  741,  741,  622,  622,
      622,  622,  622,  623,  623,  623,  623,  623,  623,  623,

      623,  623,  630,  624,  624,  624,  624,  624,  624,  741,
      639,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      741,  741,  741,  741,  741,  741,  741,  630,  633,  624,
      624,  624,  624,  624,  159,  636,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  578,  626,  626,  626,  626,
      626,  626,  741,  633,  741,  741,  741,  741,  741,  741,
      636,  644,  644,  644,  644,  644,  644,  644,  644,  644,
      741,  635,  626,  626,  626,  626,  626,  159,  637,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  628,  629,
      629,  629,  629,  629,  629,  741,  635,  741,  741,  741,

      741,  741,  741,  637,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  741,  638,  629,  629,  629,  629,  629,
      741,  741,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  741,  741,  741,  741,  741,  652,  653,  657,  638,
      212,  741,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  600,  644,  644,  644,  644,  644,  644,  741,  658,
      741,  652,  653,  657,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  659,  654,  644,  644,
      644,  644,  644,  212,  658,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  646,  647,  647,  647,  647,  647,

      647,  659,  654,  741,  741,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  741,  741,  741,  741,  741,  741,
      674,  647,  647,  647,  647,  647,  159,  741,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  628,  649,  649,
      649,  649,  649,  649,  741,  674,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  741,  741,  741,  741,  741,
      741,  679,  741,  741,  649,  649,  649,  649,  649,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  673,  651,
      651,  651,  651,  651,  651,  741,  679,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  741,  741,  741,  741,

      741,  741,  741,  673,  697,  651,  651,  651,  651,  651,
      212,  680,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  646,  665,  665,  665,  665,  665,  665,  741,  697,
      741,  741,  741,  741,  741,  741,  680,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  741,  741,  665,  665,
      665,  665,  665,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  741,  667,  667,  667,  667,  667,  667,  741,
      741,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      741,  741,  741,  741,  741,  741,  741,  741,  698,  667,
      667,  667,  667,  667,  159,  741,  668,  668,  668,  668,

      668,  668,  668,  668,  668,  628,  669,  669,  669,  669,
      669,  669,  741,  698,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  669,  669,  669,  669,  669,  159,  741,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  671,  672,
      672,  672,  672,  672,  672,  741,  711,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  672,  672,  672,  672,  672,
      212,  711,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  646,  686,  686,  686,  686,  686,  686,  741,  741,

      705,  705,  705,  705,  705,  705,  705,  705,  705,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  686,  686,
      686,  686,  686,  212,  741,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  741,  688,  688,  688,  688,  688,
      688,  741,  741,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  688,  688,  688,  688,  688,  159,  741,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  671,  690,  690,
      690,  690,  690,  690,  212,  741,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  741,  741,  741,  741,  741,

      741,  741,  741,  741,  690,  690,  690,  690,  690,  212,
      741,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      741,  703,  703,  703,  703,  703,  703,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  703,  703,  703,
      703,  703,  159,  741,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  671,  705,  705,  705,  705,  705,  705,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      705,  705,  705,  705,  705,  212,  741,  715,  715,  715,

      715,  715,  715,  715,  715,  715,  741,  716,  716,  716,
      716,  716,  716,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  716,  716,  716,  716,  716,   39,   39,
       39,   39,   39,   39,   39,   41,   41,   41,   41,   41,
       41,   41,   45,   45,   45,   45,   45,   45,   45,   47,
      741,   47,   47,   47,   47,   47,   48,   48,   48,   48,
       48,   48,   48,   58,   58,   58,   58,   58,  102,  741,
      102,  102,  102,  102,  102,  105,  105,  105,  107,  741,
      107,  155,  155,  155,  210,  210,  210,  211,  211,  211,

      267,  267,  267,  268,  268,  268,  325,  325,  325,  326,
      326,  326,  334,  334,  334,  381,  381,  381,  382,  382,
      382,  385,  385,  385,  439,  439,  439,  440,  440,  440,
      489,  489,  489,  490,  490,  490,  534,  534,  534,  535,
      535,  535,  568,  568,  568,  569,  569,  569,  595,  595,
      595,  596,  596,  596,  618,  618,  618,  619,  619,  619,
      640,  640,  640,  641,  641,  641,  660,  660,  660,  661,
      661,  661,  663,  741,  663,  681,  681,  681,  683,  683,
      683,  691,  741,  691,  699,  699,  699,  700,  700,  700,
      701,  741,  701,  706,  741,  706,  712,  712,  712,  713,

      713,  713,  717,  741,  717,  718,  718,  718,  719,  741,
      719,  720,  741,  720,  721,  721,  721,  722,  722,  722,
      724,  724,  724,  725,  741,  725,  726,  726,  726,  727,
      727,  727,  729,  729,  729,  730,  741,  730,  731,  731,
      731,  732,  732,  732,  734,  734,  734,  735,  741,  735,
      736,  736,  736,  737,  737,  737,  739,  739,  739,  667,
      741,  667,  740,  740,  740,    7,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,

      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741
    } ;

static yyconst flex_int16_t yy_chk[4140] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   10,   10,   11,   11,   15,   17,   23,
      740,   15,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   35,   16,

       21,  739,   22,   17,   23,   42,   42,   22,   22,   43,
       43,   21,   35,   25,   22,   16,   44,   44,   16,   16,
       16,   16,   16,  693,   16,  633,   21,   22,  693,  633,
       32,   32,   22,   22,   25,   32,   21,   35,  737,   22,
       16,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   32,   19,   25,
       32,   60,   36,   36,   38,   61,  736,   36,  735,   38,
       64,   19,   82,   63,  276,   30,   92,   19,   19,   19,
       19,   19,  695,   19,   82,  276,   60,  695,   92,   36,
       61,   30,   36,   63,   38,   64,   19,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   27,   20,   24,   30,   28,   63,   27,
      677,  677,  734,   71,  418,   31,   28,   27,  732,   31,
       37,   24,   28,   20,   20,   20,   20,   20,   29,   20,
       31,   24,   66,   31,   27,   37,   68,   29,   71,   66,
      418,   28,   27,   29,   31,   33,   24,   28,   29,   68,
       74,   74,   67,   33,   33,   31,  328,  118,   31,  391,
       37,  731,   29,   69,   66,   33,  730,  328,   29,  118,
      391,   67,   69,   29,   68,  729,  727,   74,   33,   33,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   70,

       33,   34,   34,   78,   65,   65,   67,   69,   72,   34,
       34,   73,   72,   65,   76,   70,   73,   77,   34,   70,
       76,   84,   78,  111,   77,  676,   84,   34,  676,  726,
       34,   65,  676,   81,   80,  442,   34,   72,   65,   83,
       70,   73,  725,   34,   70,   76,  442,   78,  111,   77,
       80,   84,   34,   81,   83,   34,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,  130,   52,  132,   80,  497,  678,   81,   83,
      694,   85,  724,  694,  130,  678,  132,  497,   75,   75,
       87,   87,   52,   52,   52,   52,   52,   85,   52,   57,

       57,   57,   57,   57,   57,   57,   57,   57,   75,   57,
       57,   57,   57,   57,   57,   75,   88,   87,  131,  131,
      696,  722,   85,  536,  721,  719,  718,  696,  713,   89,
       89,  131,   88,   75,  536,   57,   57,   57,   57,   57,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   86,
       59,   59,   59,   59,   59,   59,   89,   88,   93,   86,
       94,   86,   86,   96,  112,  114,  712,  113,   95,   98,
       99,   93,   96,   97,  100,  113,   59,   59,   59,   59,
       59,   94,   95,   98,   86,   97,   86,   86,   99,  112,
      114,  142,  164,  100,  575,  711,   93,   96,  597,  166,

      113,  625,  201,  142,  643,  575,   94,   95,   98,  597,
       97,  166,  625,   99,  201,  643,  115,  164,  100,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  115,  103,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  302,  710,  709,  116,
      708,  707,  705,  701,  116,  103,  103,  103,  103,  103,
      115,  103,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  302,  106,  106,  106,  106,  106,  106,  109,  116,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  700,
      699,  117,  207,  120,  698,  692,  117,  120,  106,  106,

      106,  106,  106,  108,  207,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  117,  120,  668,  226,  124,  227,  686,  119,  119,
      683,  681,  121,  675,  668,  128,  226,  121,  227,  124,
      128,  108,  108,  108,  108,  108,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  119,  110,  110,  110,  110,
      110,  110,  121,  122,  124,  128,  133,  126,  123,  125,
      126,  127,  129,  136,  127,  133,  674,  129,  135,  136,
      669,  122,  110,  110,  110,  110,  110,  123,  125,  134,
      135,  138,  134,  140,  137,  126,  138,  139,  139,  127,

      133,  134,  129,  137,  136,  134,  122,  141,  140,  143,
      663,  144,  123,  125,  144,  135,  148,  134,  145,  148,
      147,  138,  146,  145,  139,  141,  134,  146,  137,  143,
      134,  149,  150,  140,  147,  151,  150,  167,  176,  144,
      149,  193,  167,  176,  148,  193,  151,  662,  145,  661,
      141,  235,  146,  660,  143,  685,  656,  656,  656,  147,
      656,  150,  657,  235,  656,  149,  685,  167,  176,  168,
      193,  151,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  168,  153,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  159,

      159,  159,  159,  159,  159,  159,  159,  159,  153,  153,
      153,  153,  153,  168,  153,  157,  174,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  158,  174,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  157,  157,  157,  157,  157,  160,  174,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  162,  165,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  655,  179,  165,
      653,  170,  644,  179,  165,  641,  160,  160,  160,  160,

      160,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      170,  161,  161,  161,  161,  161,  161,  171,  179,  165,
      169,  640,  639,  638,  172,  626,  620,  619,  618,  613,
      607,  598,  178,  172,  169,  170,  171,  161,  161,  161,
      161,  161,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  178,  163,  163,  163,  163,  163,  163,  172,  169,
      183,  171,  175,  175,  180,  181,  182,  596,  186,  195,
      187,  185,  183,  183,  183,  185,  178,  190,  163,  163,
      163,  163,  163,  181,  180,  187,  182,  186,  189,  175,
      185,  188,  190,  189,  195,  200,  192,  183,  183,  183,

      185,  192,  194,  188,  196,  194,  595,  200,  181,  180,
      187,  182,  186,  204,  204,  185,  197,  190,  189,  195,
      199,  197,  206,  198,  196,  199,  192,  198,  188,  203,
      194,  205,  200,  230,  203,  205,  236,  206,  230,  240,
      204,  252,  198,  264,  240,  281,  197,  704,  236,  196,
      199,  592,  198,  252,  289,  264,  587,  281,  704,  203,
      205,  586,  206,  230,  581,  576,  289,  198,  213,  240,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  215,  223,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  570,  569,  568,

      222,  567,  565,  223,  554,  550,  213,  213,  213,  213,
      213,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      222,  214,  214,  214,  214,  214,  214,  216,  223,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  547,  546,
      238,  290,  537,  535,  534,  222,  238,  214,  214,  214,
      214,  214,  217,  290,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      218,  238,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      217,  217,  217,  217,  217,  219,  530,  219,  219,  219,

      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  220,  225,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  224,  225,  225,  225,  228,  229,
      231,  232,  237,  219,  219,  219,  219,  219,  239,  241,
      232,  237,  303,  224,  231,  243,  244,  239,  228,  229,
      225,  225,  225,  245,  241,  242,  242,  246,  245,  529,
      243,  244,  246,  247,  249,  232,  237,  303,  224,  231,
      243,  251,  239,  228,  229,  250,  253,  247,  249,  241,
      248,  248,  242,  245,  257,  243,  244,  246,  255,  251,
      250,  261,  258,  255,  259,  265,  253,  258,  262,  257,

      260,  260,  247,  249,  263,  266,  259,  248,  300,  266,
      262,  284,  300,  265,  251,  250,  284,  261,  255,  282,
      282,  253,  258,  263,  257,  526,  524,  260,  313,  523,
      522,  259,  314,  320,  266,  262,  516,  300,  265,  514,
      313,  284,  261,  508,  314,  320,  282,  270,  263,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  271,  291,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  272,  291,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  498,  491,  490,
      286,  489,  485,  484,  481,  286,  271,  271,  271,  271,

      271,  273,  291,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  274,
      286,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      476,  470,  443,  323,  440,  439,  297,  297,  438,  273,
      273,  273,  273,  273,  278,  323,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  280,  297,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  433,  423,  417,  416,  283,  414,  392,
      383,  382,  278,  278,  278,  278,  278,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  283,  279,  279,  279,

      279,  279,  279,  285,  288,  293,  294,  295,  296,  287,
      299,  381,  285,  305,  377,  366,  298,  288,  293,  294,
      295,  283,  301,  279,  279,  279,  279,  279,  287,  298,
      296,  305,  299,  304,  306,  301,  310,  285,  312,  308,
      309,  312,  288,  293,  294,  295,  304,  309,  310,  315,
      316,  342,  306,  287,  298,  296,  305,  299,  308,  311,
      301,  318,  315,  319,  311,  317,  312,  322,  316,  341,
      317,  304,  309,  310,  321,  324,  342,  306,  319,  322,
      318,  346,  346,  308,  324,  399,  412,  315,  425,  311,
      343,  329,  326,  316,  321,  317,  343,  399,  412,  325,

      425,  342,  307,  319,  322,  318,  292,  277,  346,  324,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  321,
      330,  343,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  332,  459,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  269,
      350,  459,  268,  267,  340,  350,  256,  254,  330,  330,
      330,  330,  330,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  340,  331,  331,  331,  331,  331,  331,  333,
      350,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      234,  359,  233,  467,  221,  211,  210,  340,  209,  331,

      331,  331,  331,  331,  334,  467,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  335,  359,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  336,  360,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  335,  335,  335,  335,  335,  337,  360,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  338,  339,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  344,  347,  339,
      349,  351,  339,  345,  208,  348,  337,  337,  337,  337,

      337,  347,  345,  348,  202,  353,  351,  344,  355,  348,
      353,  348,  349,  355,  339,  352,  352,  339,  354,  356,
      357,  354,  364,  362,  356,  357,  347,  345,  348,  361,
      361,  351,  344,  363,  348,  353,  348,  349,  355,  358,
      365,  364,  352,  367,  358,  362,  354,  367,  368,  356,
      357,  369,  370,  372,  369,  363,  361,  367,  373,  374,
      365,  370,  375,  368,  371,  371,  364,  419,  376,  358,
      362,  379,  367,  191,  378,  372,  375,  373,  374,  369,
      363,  376,  367,  378,  469,  365,  370,  380,  368,  184,
      379,  371,  419,  177,  173,  510,  469,  553,  398,  398,

      372,  375,  373,  374,  156,  380,  376,  510,  378,  553,
      155,  152,  105,   91,  384,  379,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  398,   90,   79,   62,  385,
      380,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      386,  464,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  387,  464,
      387,  387,  387,  387,  387,  387,  387,  387,  387,   58,
       53,   49,  396,   48,   45,   40,   26,  396,  386,  386,
      386,  386,  386,  388,  464,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,

      388,  389,  396,  389,  389,  389,  389,  389,  389,  389,
      389,  389,   18,   14,   12,  400,    7,    4,    3,    0,
      400,  388,  388,  388,  388,  388,  393,    0,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  395,  400,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  401,    0,    0,    0,  402,
      404,  404,  403,  401,  393,  393,  393,  393,  393,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  397,  394,
      394,  394,  394,  394,  394,  402,  403,  404,  401,  405,
      408,  407,  397,    0,  410,  408,  413,  406,  410,  409,

      411,  413,  405,  407,  415,  394,  394,  394,  394,  394,
      402,  403,  406,  409,  421,  426,  415,  397,  426,  421,
      408,  420,  427,  410,  411,  424,  413,  405,  407,  422,
      420,  430,  432,  424,  422,  427,  428,  406,  409,  435,
      430,  415,  429,  426,  421,  431,  429,  434,  428,  411,
      431,  432,  434,  437,  435,  420,  436,  471,  424,  422,
      427,  458,  436,  452,  452,  430,  458,  472,  453,  437,
        0,  429,  590,  428,    0,  431,  432,  434,    0,  435,
      453,    0,  471,    0,  590,    0,    0,  436,    0,    0,
      452,  458,  472,    0,  437,  441,  441,  441,  441,  441,

      441,  441,  441,  441,  444,  453,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  446,    0,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  444,  444,  444,  444,  444,  445,  445,  445,
      445,  445,  445,  445,  445,  445,    0,  445,  445,  445,
      445,  445,  445,  449,  520,  449,  449,  449,  449,  449,
      449,  449,  449,  449,    0,    0,    0,    0,    0,    0,
      461,  461,    0,  445,  445,  445,  445,  445,  448,  520,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,

      448,  448,  448,  448,  448,  448,  451,  461,  451,  451,
      451,  451,  451,  451,  451,  451,  451,    0,    0,  454,
        0,    0,    0,    0,    0,    0,  448,  448,  448,  448,
      448,  450,  454,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  455,
      457,  460,  462,  473,  456,  463,  463,  454,  465,  466,
        0,  455,  474,  468,  466,  457,  462,  473,    0,  450,
      450,  450,  450,  450,  456,  460,  468,  475,  465,  478,
      474,  477,  463,  479,  478,  480,  455,    0,  482,  466,
      457,  462,  473,  477,  480,  475,  479,  483,  518,  456,

      460,  468,  482,  465,  486,  474,  487,  488,  486,  478,
      507,  487,  488,  518,  507,  483,    0,  506,  477,  480,
      475,  479,    0,    0,    0,    0,  506,  482,    0,    0,
        0,    0,    0,  486,    0,    0,  487,  488,  518,  507,
      483,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      493,  506,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  494,  521,
      494,  494,  494,  494,  494,  494,  494,  494,  494,    0,
        0,    0,    0,    0,    0,    0,    0,  503,  493,  493,
      493,  493,  493,  495,  521,  495,  495,  495,  495,  495,

      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  496,  503,  496,  496,  496,  496,  496,  496,  496,
      496,  496,    0,    0,    0,  505,    0,    0,    0,    0,
      505,  495,  495,  495,  495,  495,  499,  503,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  501,  505,  501,  501,  501,  501,
      501,  501,  501,  501,  501,    0,    0,  512,    0,  502,
      511,    0,  512,  511,  499,  499,  499,  499,  499,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  502,  500,
      500,  500,  500,  500,  500,  504,  509,  512,  511,  517,

      513,  515,  515,  519,  532,  528,  608,  673,  509,  513,
      528,  517,  519,  502,  504,  500,  500,  500,  500,  500,
      525,  527,  531,  533,  532,  608,  533,  531,  515,  525,
      527,    0,  673,  509,  513,  528,  517,  519,  540,  504,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  532,
      608,  533,  531,    0,  525,  527,  538,  673,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  542,    0,  542,  542,  542,  542,
      542,  542,  542,  542,  542,    0,  545,    0,    0,    0,
        0,  545,    0,    0,  538,  538,  538,  538,  538,  539,

      539,  539,  539,  539,  539,  539,  539,  539,    0,  539,
      539,  539,  539,  539,  539,  544,  545,  544,  544,  544,
      544,  544,  544,  544,  544,  544,    0,  548,  551,  557,
        0,    0,    0,  551,  557,  539,  539,  539,  539,  539,
      541,  548,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  551,  557,
        0,    0,    0,  549,    0,  552,  548,    0,    0,    0,
      555,    0,    0,    0,    0,    0,  549,  552,  541,  541,
      541,  541,  541,  543,  555,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,

      543,  549,  552,  556,  558,  562,  559,  563,  558,  555,
      559,  562,  564,  580,    0,  556,    0,    0,    0,  566,
        0,  543,  543,  543,  543,  543,  564,  563,  566,    0,
      580,    0,    0,  558,    0,  559,  562,    0,    0,  572,
      556,  572,  572,  572,  572,  572,  572,  572,  572,  572,
        0,  564,  563,  566,  571,  580,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  574,    0,  574,  574,  574,  574,  574,  574,
      574,  574,  574,    0,    0,    0,  582,    0,    0,    0,
        0,  582,  571,  571,  571,  571,  571,  573,    0,  573,

      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  579,  582,  579,  579,  579,
      579,  579,  579,  579,  579,  579,    0,    0,  594,  584,
        0,  583,  583,    0,  584,  573,  573,  573,  573,  573,
      577,  594,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  583,  584,
        0,    0,    0,    0,    0,    0,  594,    0,    0,    0,
      589,  591,  588,  588,    0,  589,  591,    0,  577,  577,
      577,  577,  577,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  585,  578,  578,  578,  578,  578,  578,  588,

      589,  591,  609,  609,  593,  585,  634,  634,    0,    0,
        0,  585,    0,    0,    0,    0,    0,    0,  611,  578,
      578,  578,  578,  578,  593,    0,  611,    0,    0,  609,
      585,    0,    0,  634,    0,  601,  585,  601,  601,  601,
      601,  601,  601,  601,  601,  601,    0,    0,    0,  593,
      599,  611,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  603,    0,
      603,  603,  603,  603,  603,  603,  603,  603,  603,    0,
      617,  606,    0,    0,    0,  617,    0,    0,  599,  599,
      599,  599,  599,  600,  600,  600,  600,  600,  600,  600,

      600,  600,  606,  600,  600,  600,  600,  600,  600,  605,
      617,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      614,    0,    0,    0,  610,    0,    0,  606,  610,  600,
      600,  600,  600,  600,  602,  614,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  612,  610,    0,    0,    0,    0,  615,  622,
      614,  622,  622,  622,  622,  622,  622,  622,  622,  622,
        0,  612,  602,  602,  602,  602,  602,  604,  615,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  616,  612,    0,    0,    0,

        0,    0,  624,  615,  624,  624,  624,  624,  624,  624,
      624,  624,  624,    0,  616,  604,  604,  604,  604,  604,
      629,    0,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  630,  631,  635,    0,    0,  630,  631,  635,  616,
      621,  636,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  632,  636,
        0,  630,  631,  635,    0,    0,    0,  637,    0,    0,
        0,    0,    0,    0,    0,    0,  637,  632,  621,  621,
      621,  621,  621,  623,  636,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,

      623,  637,  632,  647,    0,  647,  647,  647,  647,  647,
      647,  647,  647,  647,    0,  654,    0,    0,    0,    0,
      654,  623,  623,  623,  623,  623,  627,    0,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  649,  654,  649,  649,  649,  649,
      649,  649,  649,  649,  649,    0,    0,  658,    0,    0,
      652,  658,    0,    0,  627,  627,  627,  627,  627,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  652,  628,
      628,  628,  628,  628,  628,  651,  658,  651,  651,  651,
      651,  651,  651,  651,  651,  651,    0,    0,  659,  679,

        0,    0,    0,  652,  679,  628,  628,  628,  628,  628,
      645,  659,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,    0,  679,
        0,    0,    0,    0,    0,  665,  659,  665,  665,  665,
      665,  665,  665,  665,  665,  665,    0,    0,  645,  645,
      645,  645,  645,  646,  646,  646,  646,  646,  646,  646,
      646,  646,    0,  646,  646,  646,  646,  646,  646,  667,
        0,  667,  667,  667,  667,  667,  667,  667,  667,  667,
        0,    0,    0,  680,    0,    0,    0,    0,  680,  646,
      646,  646,  646,  646,  648,    0,  648,  648,  648,  648,

      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  672,  680,  672,  672,  672,  672,  672,  672,
      672,  672,  672,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  648,  648,  648,  648,  648,  650,  697,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  688,  697,  688,  688,  688,
      688,  688,  688,  688,  688,  688,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  650,  650,  650,  650,  650,
      664,  697,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  690,    0,

      690,  690,  690,  690,  690,  690,  690,  690,  690,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  664,  664,
      664,  664,  664,  666,    0,  666,  666,  666,  666,  666,
      666,  666,  666,  666,    0,  666,  666,  666,  666,  666,
      666,  703,    0,  703,  703,  703,  703,  703,  703,  703,
      703,  703,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  666,  666,  666,  666,  666,  670,    0,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  715,    0,  715,  715,  715,  715,
      715,  715,  715,  715,  715,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  670,  670,  670,  670,  670,  687,
        0,  687,  687,  687,  687,  687,  687,  687,  687,  687,
        0,  687,  687,  687,  687,  687,  687,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  687,  687,  687,
      687,  687,  689,    0,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      689,  689,  689,  689,  689,  702,    0,  702,  702,  702,

      702,  702,  702,  702,  702,  702,    0,  702,  702,  702,
      702,  702,  702,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  702,  702,  702,  702,  702,  742,  742,
      742,  742,  742,  742,  742,  743,  743,  743,  743,  743,
      743,  743,  744,  744,  744,  744,  744,  744,  744,  745,
        0,  745,  745,  745,  745,  745,  746,  746,  746,  746,
      746,  746,  746,  747,  747,  747,  747,  747,  748,    0,
      748,  748,  748,  748,  748,  749,  749,  749,  750,    0,
      750,  751,  751,  751,  752,  752,  752,  753,  753,  753,

      754,  754,  754,  755,  755,  755,  756,  756,  756,  757,
      757,  757,  758,  758,  758,  759,  759,  759,  760,  760,
      760,  761,  761,  761,  762,  762,  762,  763,  763,  763,
      764,  764,  764,  765,  765,  765,  766,  766,  766,  767,
      767,  767,  768,  768,  768,  769,  769,  769,  770,  770,
      770,  771,  771,  771,  772,  772,  772,  773,  773,  773,
      774,  774,  774,  775,  775,  775,  776,  776,  776,  777,
      777,  777,  778,    0,  778,  779,  779,  779,  780,  780,
      780,  781,    0,  781,  782,  782,  782,  783,  783,  783,
      784,    0,  784,  785,    0,  785,  786,  786,  786,  787,

      787,  787,  788,    0,  788,  789,  789,  789,  790,    0,
      790,  791,    0,  791,  792,  792,  792,  793,  793,  793,
      794,  794,  794,  795,    0,  795,  796,  796,  796,  797,
      797,  797,  798,  798,  798,  799,    0,  799,  800,  800,
      800,  801,  801,  801,  802,  802,  802,  803,    0,  803,
      804,  804,  804,  805,  805,  805,  806,  806,  806,  807,
        0,  807,  808,  808,  808,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,

      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[91] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 1624 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 1729 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 742 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4066 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 60 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 62 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::EXTRA_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::TUNNEL_MODE_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 122 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 126 "SrvLexer.l"
;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 130 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno; 
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 136 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 137 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 77:
YY_RULE_SETUP
#line 144 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 153 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 162 "SrvLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 171 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 180 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 189 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 198 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 210 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 217 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 238 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd then no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 270 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd; 
      YYABORT; 
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 280 "SrvLexer.l"
{ 
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) { 
        Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd; 
        YYABORT; 
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 289 "SrvLexer.l"
{ return yytext[0]; } 
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 292 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 2407 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 742 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 742 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 741);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 292 "SrvLexer.l"




