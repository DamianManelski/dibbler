#line 2 "RelLexer.cpp"

#line 4 "RelLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 40
#define YY_END_OF_BUFFER 41
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[393] =
    {   0,
        1,    1,    0,    0,    0,    0,   41,   39,    2,    1,
        1,   39,   22,   39,   39,   37,   37,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   26,   26,   40,    1,    1,
        1,    0,   34,   22,    0,   34,   24,   23,   37,    0,
        0,   36,    0,   31,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   19,   35,   35,   35,   35,
       35,   35,   35,   25,   23,   37,    0,    0,   30,   38,
       29,   29,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   18,   37,    0,

        0,    0,   28,   28,    0,   29,    0,   29,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       20,   35,   35,   37,    0,    0,    0,    0,   28,    0,
       28,    0,   29,   29,   29,   29,   35,   35,   35,   21,
       35,    3,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,    0,    0,    0,    0,   28,   28,   28,   28,
        0,   29,   29,   29,    0,   29,    4,   35,   35,   35,
       35,   35,   35,   35,   11,   35,    5,   35,   35,    0,
        0,    0,   28,   28,   28,    0,   28,    0,    0,   29,
       29,   29,   29,   35,   35,   35,   35,   35,   35,   35,

       35,    6,   35,    0,    0,    0,    0,    0,   28,   28,
       28,   28,    0,   29,   29,   29,    0,   29,   35,   35,
       35,   35,   16,   14,   35,   35,   17,    0,    0,    0,
       28,   28,   28,    0,   28,   33,   29,   29,   29,   29,
       35,   35,   35,   15,    7,   12,    0,    0,    0,   32,
       28,   28,   28,   28,   29,   29,   29,    0,   29,   35,
       10,   35,    0,    0,   28,   28,   28,    0,   28,   29,
       29,   29,   29,   35,   35,    0,    0,    0,   28,   28,
       28,   28,   29,   29,   29,    0,   29,   13,    8,    0,
        0,   28,   28,   28,    0,   28,   29,   29,   29,   29,

       35,    0,    0,    0,   28,   28,   28,   28,   29,   29,
       29,    0,   29,   35,    0,   27,   30,   28,   28,   28,
        0,   28,   29,   29,   29,   29,   35,    0,   27,    0,
       28,   28,   28,   28,   28,   29,   29,   29,    0,   29,
       35,   27,   30,   28,    0,   28,   28,   28,   28,   29,
       29,   29,   35,   27,   28,   28,   28,   28,   29,   29,
       29,    9,   28,   28,    0,   28,   28,   29,   28,   28,
       29,   28,   28,    0,   28,   28,   28,   28,    0,   28,
       28,   28,   28,    0,   28,   28,   28,   28,    0,   28,
       28,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    1,    1,    9,   10,   11,   12,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,    1,    1,
        1,    1,    1,    1,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   24,
        1,    1,    1,    1,    1,    1,   15,   16,   17,   18,

       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   24,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[40] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    4,
        1,    5,    5,    6,    5,    5,    5,    5,    5,    5,
        3,    7,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[516] =
    {   0,
        0,    0, 1100, 1099,    0,    0, 1106, 1109, 1109,   37,
       39, 1100,    0, 1097,   36,   36, 1065, 1088,   63,   74,
       40,   44,   32, 1087,   81,   31,   49,   83,   84,   50,
       54,   85,   88,   89,   91, 1109, 1089, 1109,   58,   68,
      103, 1094, 1109,    0, 1091, 1090, 1109,    0,  107, 1082,
      101, 1109,    0,  112, 1081,  118, 1080,   90, 1071, 1066,
      108,  125,   94,  127,  128, 1077,  112,  118,  129,  133,
      135,  137,  138, 1109,    0,  143,  145, 1076,  150,    0,
      160,  150,  163,  170,  163,  152,  172,  136,  174,  181,
      173,  177,  180,  182,  183,  184,  185, 1075,  199,  192,

     1074, 1073,  210,  194,  203,  215,  218,  222,  225,  189,
      225,  232,  219,  234,  233,  235,  212,  240,  236,  241,
     1072,  242,  250,  254, 1071, 1070, 1069,  259,  263,  266,
      270,  273,  277,  278,  283,  284, 1068,  267,  268, 1067,
      290, 1066,  288,  291,  289,  292,  295,  297,  300,  299,
      301,  302, 1065, 1064, 1063,  311,  316,  322,  325,  330,
      329,  333, 1062,  338,  341,  345, 1061,  303,  335,  342,
      344,  346,  347,  351, 1060,  354, 1059,  353,  355, 1058,
     1057,  358,  363, 1056,  369,  372,  376,  379,  383,  387,
      384,  392,  393,  394,  395,  396,  397,  398,  400,  401,

      404, 1055,  406, 1054, 1053, 1052,  416,  420,  427,  421,
      432,  433,  409,  438, 1051,  443,  446,  450,  435,  447,
      448,  440, 1050, 1049,  449,  454, 1048, 1047, 1046,  461,
      465, 1045,  472,  468,  477,  476,  480,  485,  488,  493,
      457,  490,  496, 1044, 1043, 1042, 1041, 1040, 1039,  484,
      501,  498,  506,  507,  512, 1038,  517,  520,  524,  509,
     1037,  514, 1036, 1035,  531, 1034,  536,  523,  537,  542,
      543,  548,  549,  550,  551, 1033, 1032, 1031,  558,  563,
      566,  571,  576, 1030,  581,  527,  573, 1029,  583, 1028,
     1027,  586, 1026,  591,  554,  592,  597,  598,  603,  604,

      605, 1025, 1024, 1023,  610,  611,  616,  617,  623, 1022,
      628,  562,  629,  618, 1021, 1020,    0,  634, 1019,  639,
      642,  646,  649,  654,  657,  662,  659, 1018, 1017, 1016,
     1015,  668,  665,  673, 1018,  677, 1013,  682,    0,  674,
      679, 1012, 1109, 1011,    0,  687, 1010,  692, 1013,  696,
      693,    0,  697, 1008, 1007, 1006,  702, 1009,  706, 1004,
        0, 1003, 1002, 1001,    0,  711, 1109,    0, 1000,  999,
     1109,  998,  997,    0,  996,  995,  994,  993,    0,  992,
      991,  990,  989,    0,  988,  987,  757,  738,    0,  714,
      713, 1109,  729,  736,  743,  750,  757,  762,  769,  772,

      775,  721,  720,  777,  780,  717,  783,  785,  788,  790,
      793,  796,  712,  798,  800,  803,  708,  806,  809,  811,
      813,  816,  819,  822,  669,  824,  826,  829,  661,  832,
      835,  837,  839,  842,  845,  848,  660,  850,  852,  855,
      653,  858,  861,  863,  865,  868,  871,  874,  652,  876,
      878,  881,  640,  884,  887,  889,  891,  894,  897,  900,
      577,  902,  904,  907,  501,  910,  913,  915,  917,  920,
      923,  926,  464,  928,  930,  431,  933,  418,  936,  939,
      941,  943,  946,  949,  951,  383,  953,  955,  367,  958,
      960,  328,  962,  964,  967,  322,  968,  269,  253,  970,

      972,  974,  214,  976,  978,  980,  106,  982,  984,  986,
       60,  988,  990,  992,  994
    } ;

static yyconst flex_int16_t yy_def[516] =
    {   0,
      392,    1,  393,  393,  394,  394,  392,  392,  392,  392,
      392,  395,  396,  397,  392,  392,   16,  392,  398,  398,
       20,   20,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  392,  392,  392,  392,  392,
      392,  395,  392,  396,  397,  392,  392,  399,  400,  401,
      400,  392,  402,  403,  398,   20,  398,  398,   56,   56,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  392,  399,  404,  404,  405,  406,  402,
      407,  407,   56,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  408,  408,

      409,  410,  411,  411,  392,  412,  413,  412,   56,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  100,  100,  414,  415,  392,  416,  417,
      416,  392,  418,  418,  419,  419,  109,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  392,  420,  421,  392,  422,  422,  423,  423,
      392,  392,  392,  424,  425,  424,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  426,
      427,  392,  392,  392,  428,  429,  428,  392,  392,  430,
      430,  431,  431,  398,  398,  398,  398,  398,  398,  398,

      398,  398,  398,  392,  432,  433,  392,  392,  434,  434,
      435,  435,  392,  392,  392,  436,  437,  436,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  438,  439,  392,
      392,  392,  440,  441,  440,  392,  442,  442,  443,  443,
      398,  398,  398,  398,  398,  398,  392,  444,  445,  392,
      446,  446,  447,  447,  392,  392,  448,  449,  448,  398,
      398,  398,  450,  451,  392,  392,  452,  453,  452,  454,
      454,  455,  455,  398,  398,  392,  456,  457,  458,  458,
      459,  459,  392,  392,  460,  461,  460,  398,  398,  462,
      463,  392,  392,  464,  465,  464,  466,  466,  467,  467,

      398,  392,  468,  469,  470,  470,  471,  471,  392,  392,
      472,  473,  472,  398,  474,  475,  476,  392,  392,  477,
      478,  477,  479,  479,  480,  480,  398,  392,  481,  392,
      482,  483,  483,  484,  484,  392,  392,  485,  486,  485,
      398,  487,  392,  488,  489,  392,  392,  490,  490,  491,
      491,  492,  398,  392,  493,  494,  495,  495,  392,  392,
      496,  398,  392,  497,  498,  392,  392,  499,  500,  501,
      392,  392,  502,  503,  504,  505,  392,  506,  507,  508,
      509,  392,  510,  511,  512,  513,  392,  514,  478,  515,
      392,    0,  392,  392,  392,  392,  392,  392,  392,  392,

      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,

      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392
    } ;

static yyconst flex_int16_t yy_nxt[1149] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
       15,   16,   17,   18,   19,   19,   20,   19,   21,   22,
       23,   24,   25,   24,   24,   26,   27,   28,   29,   24,
       24,   30,   31,   32,   33,   24,   34,   24,   35,   39,
       40,   41,   40,   47,  392,  392,   48,   49,   49,   50,
       51,   51,   51,   51,   51,   51,   59,   52,   60,   64,
       39,   40,  392,  392,  386,   55,   61,  392,   68,   55,
       41,   40,   69,   53,   56,   56,   50,   56,   56,   56,
       56,   56,   56,   65,   57,   56,   56,   50,   56,   56,
       56,   56,   56,   56,  392,   57,  392,  392,  392,   58,

       62,  392,  392,  392,  392,   39,   40,  392,   63,   73,
      381,   66,   84,   67,   50,   71,   70,   72,   76,   76,
       50,  392,   52,   81,   81,  392,   87,   89,   52,   83,
       83,  392,   83,   83,   83,   83,   83,   83,  392,   88,
      392,  392,  392,   55,   93,   92,  392,   90,  392,  392,
      392,  392,  114,   91,   99,   99,   50,   96,   50,  392,
       94,  103,  103,  107,   52,  392,   52,   95,   97,  105,
       98,  106,  106,  107,  109,  109,  392,  109,  109,  109,
      109,  109,  109,  392,  112,  392,  392,  392,  110,  116,
      392,  111,  115,  392,  392,  392,  392,  392,  392,  118,

      122,  121,  392,  392,  113,   50,  117,  130,  119,  123,
      124,  124,   50,   52,  132,  132,  138,  120,  376,  128,
       52,  129,  129,  130,  105,  392,  133,  133,  107,  135,
      135,  392,  392,  139,  147,  107,  137,  137,  392,  137,
      137,  137,  137,  137,  137,  392,  392,  392,  392,  392,
      140,  141,  142,  392,  392,  392,  151,  371,  152,  150,
      144,  145,  146,  392,  143,  124,  124,  392,  148,  149,
      156,  156,  128,  370,  157,  157,  130,  159,  159,  392,
      392,  392,  161,  130,  132,  132,  105,  392,  162,  162,
      107,  107,  105,  392,  164,  164,  165,  165,  169,  168,

      167,  392,  392,  392,  392,  392,  173,  170,  392,  171,
      392,  174,  392,  392,  392,  392,  392,  172,  176,  179,
      182,  194,  156,  156,  175,  128,  368,  183,  183,  130,
      177,  392,  361,  178,  128,  130,  185,  185,  186,  392,
      188,  188,  105,  186,  189,  189,  107,  105,  392,  190,
      190,  165,  192,  192,  392,  392,  196,  392,  165,  392,
      392,  195,  201,  198,  392,  200,  392,  392,  392,  207,
      207,  356,  128,  199,  208,  208,  130,  203,  128,  197,
      209,  209,  186,  211,  211,  392,  202,  352,  213,  186,
      188,  188,  105,  392,  189,  189,  105,  165,  214,  214,

      165,  105,  392,  216,  216,  217,  217,  392,  392,  392,
      392,  392,  221,  392,  392,  222,  223,  392,  224,  392,
      236,  236,  335,  220,  219,  230,  226,  207,  207,  128,
      392,  208,  208,  225,  186,  331,  128,  227,  231,  231,
      186,  128,  392,  233,  233,  234,  234,  105,  392,  189,
      189,  165,  105,  392,  237,  237,  217,  239,  239,  392,
      392,  392,  392,  217,  242,  244,  243,  392,  326,  241,
      392,  246,  250,  250,  128,  260,  208,  208,  186,  253,
      253,  128,  245,  251,  251,  234,  392,  236,  236,  105,
      234,  255,  255,  217,  392,  250,  250,  105,  217,  257,

      257,  258,  392,  392,  262,  308,  258,  392,  261,  392,
      128,  234,  265,  265,  234,  128,  392,  267,  267,  268,
      268,  105,  392,  189,  189,  217,  105,  392,  270,  270,
      258,  272,  272,  392,  281,  281,  275,  258,  299,  299,
      128,  274,  208,  208,  234,  128,  392,  279,  279,  268,
      268,  105,  392,  283,  283,  258,  258,  105,  392,  285,
      285,  286,  286,  392,  392,  307,  307,  128,  289,  292,
      292,  268,  392,  325,  325,  128,  268,  294,  294,  295,
      392,  300,  392,  288,  295,  105,  286,  189,  189,  258,
      105,  301,  297,  297,  286,  128,  392,  208,  208,  268,

      128,  392,  305,  305,  295,  295,  105,  392,  309,  309,
      286,  286,  105,  392,  311,  311,  312,  312,  392,  128,
      392,  318,  318,  295,  295,  128,  392,  320,  320,  321,
      321,  392,  105,  314,  189,  189,  286,  105,  392,  323,
      323,  312,  312,  128,  282,  208,  208,  295,  128,  327,
      332,  332,  321,  334,  334,  392,  273,  254,  105,  321,
      336,  336,  312,  392,  240,  212,  105,  312,  338,  338,
      339,  392,  392,  193,  392,  339,  341,  128,  321,  346,
      346,  321,  128,  392,  348,  348,  105,  339,  189,  189,
      312,  105,  392,  350,  350,  339,  128,  353,  208,  208,

      321,  128,  392,  357,  357,  105,  339,  359,  359,  339,
      392,  128,  160,  366,  366,  105,  136,  189,  189,  339,
      128,  104,  208,  208,   82,   80,  389,  389,  362,   36,
       36,   36,   36,   36,   36,   36,   38,   38,   38,   38,
       38,   38,   38,   42,   42,   42,   42,   42,   42,   42,
       44,  389,   44,   44,   44,   44,   44,   45,   45,   45,
       45,   45,   45,   45,   55,   55,   55,   55,   55,   75,
      384,   75,   75,   75,   75,   75,   77,   77,   77,   78,
       78,  100,  100,  100,  101,  101,  108,  108,  108,  125,
      125,  125,  126,  126,  127,  127,  131,  131,  131,  134,

      134,  134,  153,  153,  154,  154,  158,  158,  158,  163,
      163,  163,  166,  166,  166,  180,  180,  181,  181,  184,
      184,  184,  187,  187,  187,  191,  191,  191,  204,  204,
      205,  205,  210,  210,  210,  215,  215,  215,  218,  218,
      218,  228,  228,  229,  229,  232,  232,  232,  235,  235,
      235,  238,  238,  238,  247,  247,  248,  248,  252,  252,
      252,  256,  256,  256,  259,  259,  259,  263,  263,  264,
      264,  266,  266,  266,  269,  269,  269,  271,  271,  271,
      276,  276,  277,  277,  280,  280,  280,  284,  284,  284,
      287,  287,  287,  290,  290,  291,  291,  293,  293,  293,

      296,  296,  296,  298,  298,  298,  302,  302,  303,  303,
      306,  306,  306,  310,  310,  310,  313,  313,  313,  315,
      315,  316,  316,  319,  319,  319,  322,  322,  322,  324,
      324,  324,  328,  328,  329,  329,  333,  333,  333,  337,
      337,  337,  340,  340,  340,  342,  342,  344,  344,  347,
      347,  347,  349,  349,  351,  351,  351,  354,  354,  355,
      355,  358,  358,  360,  360,  360,  363,  363,  364,  364,
      367,  367,  369,  369,  372,  372,  373,  373,  375,  375,
      377,  377,  378,  378,  380,  380,  382,  382,  383,  383,
      385,  385,  387,  387,  388,  388,  390,  390,  391,  391,

      389,  384,  384,  379,  384,  379,  379,  374,  379,  374,
      374,  365,  374,  365,  365,  345,  392,  339,  392,  365,
      345,  330,  392,  321,  345,  330,  312,  392,  345,  343,
      330,  304,  295,  330,  304,  286,  317,  304,  278,  268,
      304,  278,  392,  258,   79,  278,  249,  234,  278,  249,
      392,  217,   79,  249,  206,  392,  392,  392,  186,  249,
      206,  392,  392,  392,  165,   79,  206,  155,  392,  130,
      206,  155,  392,  392,  392,  107,   79,  155,  102,  392,
      392,  392,  155,  102,  392,  392,   79,  102,  392,  102,
      392,   86,   85,  392,  392,   79,   45,   46,   43,   74,

      392,   54,  392,   46,   43,  392,   37,   37,    7,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392
    } ;

static yyconst flex_int16_t yy_chk[1149] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   10,
       10,   11,   11,   15,   26,   23,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   21,   16,   22,   26,
       39,   39,   27,   30,  511,   21,   23,   31,   30,   22,
       40,   40,   31,   16,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   27,   19,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   25,   20,   28,   29,   32,   20,

       25,   33,   34,   58,   35,   41,   41,   63,   25,   35,
      507,   28,   58,   29,   51,   33,   32,   34,   49,   49,
       49,   61,   51,   54,   54,   67,   61,   63,   49,   56,
       56,   68,   56,   56,   56,   56,   56,   56,   62,   62,
       64,   65,   69,   56,   68,   67,   70,   64,   71,   88,
       72,   73,   88,   65,   76,   76,   76,   71,   77,   82,
       69,   79,   79,   82,   76,   86,   77,   70,   72,   81,
       73,   81,   81,   81,   83,   83,   85,   83,   83,   83,
       83,   83,   83,   84,   86,   87,   91,   89,   84,   90,
       92,   85,   89,   93,   90,   94,   95,   96,   97,   92,

       96,   95,  110,  104,   87,  100,   91,  104,   93,   97,
       99,   99,   99,  100,  105,  105,  110,   94,  503,  103,
       99,  103,  103,  103,  106,  117,  106,  106,  106,  107,
      107,  108,  113,  111,  117,  108,  109,  109,  111,  109,
      109,  109,  109,  109,  109,  112,  115,  114,  116,  119,
      112,  113,  114,  118,  120,  122,  122,  499,  123,  120,
      116,  116,  116,  123,  115,  124,  124,  124,  118,  119,
      128,  128,  129,  498,  129,  129,  129,  130,  130,  131,
      138,  139,  132,  131,  132,  132,  133,  134,  133,  133,
      133,  134,  135,  136,  135,  135,  135,  136,  141,  139,

      138,  143,  145,  141,  144,  146,  146,  143,  147,  144,
      148,  147,  150,  149,  151,  152,  168,  145,  149,  152,
      156,  168,  156,  156,  148,  157,  496,  157,  157,  157,
      150,  158,  492,  151,  159,  158,  159,  159,  159,  160,
      161,  161,  162,  160,  162,  162,  162,  164,  169,  164,
      164,  164,  165,  165,  166,  170,  170,  171,  166,  172,
      173,  169,  176,  172,  174,  174,  178,  176,  179,  182,
      182,  489,  183,  173,  183,  183,  183,  179,  185,  171,
      185,  185,  185,  186,  186,  187,  178,  486,  188,  187,
      188,  188,  189,  191,  189,  189,  190,  191,  190,  190,

      190,  192,  193,  192,  192,  192,  193,  194,  195,  196,
      197,  198,  196,  199,  200,  197,  198,  201,  199,  203,
      213,  213,  478,  195,  194,  207,  201,  207,  207,  208,
      210,  208,  208,  200,  210,  476,  209,  203,  209,  209,
      209,  211,  212,  211,  211,  211,  212,  214,  219,  214,
      214,  214,  216,  222,  216,  216,  216,  217,  217,  218,
      220,  221,  225,  218,  220,  222,  221,  226,  473,  219,
      241,  226,  230,  230,  231,  241,  231,  231,  231,  234,
      234,  233,  225,  233,  233,  233,  235,  236,  236,  237,
      235,  237,  237,  237,  238,  250,  250,  239,  238,  239,

      239,  239,  240,  242,  243,  465,  240,  252,  242,  243,
      251,  252,  251,  251,  251,  253,  254,  253,  253,  253,
      254,  255,  260,  255,  255,  255,  257,  262,  257,  257,
      257,  258,  258,  259,  268,  268,  262,  259,  286,  286,
      265,  260,  265,  265,  265,  267,  269,  267,  267,  267,
      269,  270,  271,  270,  270,  270,  271,  272,  273,  272,
      272,  272,  273,  274,  275,  295,  295,  279,  275,  279,
      279,  279,  280,  312,  312,  281,  280,  281,  281,  281,
      282,  461,  287,  274,  282,  283,  287,  283,  283,  283,
      285,  289,  285,  285,  285,  292,  289,  292,  292,  292,

      294,  296,  294,  294,  294,  296,  297,  298,  297,  297,
      297,  298,  299,  300,  299,  299,  299,  300,  301,  305,
      306,  305,  305,  305,  306,  307,  308,  307,  307,  307,
      308,  314,  309,  301,  309,  309,  309,  311,  313,  311,
      311,  311,  313,  318,  453,  318,  318,  318,  320,  314,
      320,  320,  320,  321,  321,  322,  449,  441,  323,  322,
      323,  323,  323,  324,  437,  429,  325,  324,  325,  325,
      325,  326,  327,  425,  333,  326,  327,  332,  333,  332,
      332,  332,  334,  340,  334,  334,  336,  340,  336,  336,
      336,  338,  341,  338,  338,  338,  346,  341,  346,  346,

      346,  348,  351,  348,  348,  350,  351,  350,  350,  350,
      353,  357,  417,  357,  357,  359,  413,  359,  359,  359,
      366,  406,  366,  366,  403,  402,  391,  390,  353,  393,
      393,  393,  393,  393,  393,  393,  394,  394,  394,  394,
      394,  394,  394,  395,  395,  395,  395,  395,  395,  395,
      396,  388,  396,  396,  396,  396,  396,  397,  397,  397,
      397,  397,  397,  397,  398,  398,  398,  398,  398,  399,
      387,  399,  399,  399,  399,  399,  400,  400,  400,  401,
      401,  404,  404,  404,  405,  405,  407,  407,  407,  408,
      408,  408,  409,  409,  410,  410,  411,  411,  411,  412,

      412,  412,  414,  414,  415,  415,  416,  416,  416,  418,
      418,  418,  419,  419,  419,  420,  420,  421,  421,  422,
      422,  422,  423,  423,  423,  424,  424,  424,  426,  426,
      427,  427,  428,  428,  428,  430,  430,  430,  431,  431,
      431,  432,  432,  433,  433,  434,  434,  434,  435,  435,
      435,  436,  436,  436,  438,  438,  439,  439,  440,  440,
      440,  442,  442,  442,  443,  443,  443,  444,  444,  445,
      445,  446,  446,  446,  447,  447,  447,  448,  448,  448,
      450,  450,  451,  451,  452,  452,  452,  454,  454,  454,
      455,  455,  455,  456,  456,  457,  457,  458,  458,  458,

      459,  459,  459,  460,  460,  460,  462,  462,  463,  463,
      464,  464,  464,  466,  466,  466,  467,  467,  467,  468,
      468,  469,  469,  470,  470,  470,  471,  471,  471,  472,
      472,  472,  474,  474,  475,  475,  477,  477,  477,  479,
      479,  479,  480,  480,  480,  481,  481,  482,  482,  483,
      483,  483,  484,  484,  485,  485,  485,  487,  487,  488,
      488,  490,  490,  491,  491,  491,  493,  493,  494,  494,
      495,  495,  497,  497,  500,  500,  501,  501,  502,  502,
      504,  504,  505,  505,  506,  506,  508,  508,  509,  509,
      510,  510,  512,  512,  513,  513,  514,  514,  515,  515,

      386,  385,  383,  382,  381,  380,  378,  377,  376,  375,
      373,  372,  370,  369,  364,  363,  362,  360,  358,  356,
      355,  354,  349,  347,  344,  342,  337,  335,  331,  330,
      329,  328,  319,  316,  315,  310,  304,  303,  302,  293,
      291,  290,  288,  284,  278,  277,  276,  266,  264,  263,
      261,  256,  249,  248,  247,  246,  245,  244,  232,  229,
      228,  227,  224,  223,  215,  206,  205,  204,  202,  184,
      181,  180,  177,  175,  167,  163,  155,  154,  153,  142,
      140,  137,  127,  126,  125,  121,  102,  101,   98,   78,
       66,   60,   59,   57,   55,   50,   46,   45,   42,   37,

       24,   18,   17,   14,   12,    7,    4,    3,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[41] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
    0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "RelLexer.l"
#line 5 "RelLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "RelParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "RelLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_RelParser_stype yylval;
}
#line 861 "RelLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "RelLexer.l"


#line 966 "RelLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 393 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1109 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "RelLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "RelLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "RelLexer.l"
{ return RelParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "RelLexer.l"
{ return RelParser::CLIENT_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "RelLexer.l"
{ return RelParser::SERVER_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "RelLexer.l"
{ return RelParser::UNICAST_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "RelLexer.l"
{ return RelParser::MULTICAST_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "RelLexer.l"
{ return RelParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "RelLexer.l"
{ return RelParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 55 "RelLexer.l"
{ return RelParser::GUESS_MODE_; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 56 "RelLexer.l"
{ return RelParser::OPTION_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 57 "RelLexer.l"
{ return RelParser::REMOTE_ID_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 58 "RelLexer.l"
{ return RelParser::ECHO_REQUEST_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 60 "RelLexer.l"
{ return RelParser::LOGNAME_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 61 "RelLexer.l"
{ return RelParser::LOGLEVEL_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 62 "RelLexer.l"
{ return RelParser::LOGMODE_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 64 "RelLexer.l"
{ return RelParser::WORKDIR_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 66 "RelLexer.l"
{ yylval.ival=1; return RelParser::INTNUMBER_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 67 "RelLexer.l"
{ yylval.ival=0; return RelParser::INTNUMBER_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 68 "RelLexer.l"
{ yylval.ival=1; return RelParser::INTNUMBER_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 69 "RelLexer.l"
{ yylval.ival=0; return RelParser::INTNUMBER_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 71 "RelLexer.l"
;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "RelLexer.l"
;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 75 "RelLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno; 
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 80 "RelLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 81 "RelLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 82 "RelLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 27:
YY_RULE_SETUP
#line 89 "RelLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return RelParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 98 "RelLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return RelParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 107 "RelLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return RelParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 116 "RelLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return RelParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 125 "RelLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return RelParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 134 "RelLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return RelParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 143 "RelLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return RelParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 152 "RelLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return RelParser::STRING_;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 159 "RelLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return RelParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return RelParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return RelParser::STRING_;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 180 "RelLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd; 
      YYABORT; 
    }
    return RelParser::HEXNUMBER_;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 190 "RelLexer.l"
{ 
    if(!sscanf(yytext,"%u",&(yylval.ival))) { 
        Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd; 
        YYABORT; 
    }
    return RelParser::INTNUMBER_;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 198 "RelLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd then no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return RelParser::DUID_;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 230 "RelLexer.l"
{ return yytext[0]; } 
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 233 "RelLexer.l"
ECHO;
	YY_BREAK
#line 1391 "RelLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 393 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 393 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 392);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

// extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

yyFlexLexer::~yyFlexLexer()
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

	delete [] (yy_state_buf);
	yyfree((yy_start_stack)  );

}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 233 "RelLexer.l"



