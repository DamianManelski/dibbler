#line 2 "RelLexer.cpp"

#line 4 "RelLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 36
#define YY_END_OF_BUFFER 37
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[363] =
    {   0,
        1,    1,    0,    0,    0,    0,   37,   35,    2,    1,
        1,   35,   19,   35,   35,   34,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   23,   23,   36,    1,    1,    1,    0,   31,   19,
        0,   31,   21,   20,   34,    0,    0,   33,   28,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   16,
       32,   32,   32,   32,   32,   22,   20,   34,    0,    0,
       27,   26,   26,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   15,   34,    0,    0,    0,
       25,   25,    0,   26,    0,   26,   32,   32,   32,   32,

       32,   32,   32,   32,   32,   17,   32,   32,   34,    0,
        0,    0,    0,   25,    0,   25,    0,   26,   26,   26,
       26,   32,   32,   18,   32,    3,   32,   32,   32,   32,
       32,   32,   32,   32,    0,    0,    0,    0,   25,   25,
       25,   25,    0,   26,   26,   26,    0,   26,    4,   32,
       32,   32,   32,   32,   32,    5,   32,   32,    0,    0,
        0,   25,   25,   25,    0,   25,    0,    0,   26,   26,
       26,   26,   32,   32,   32,   32,   32,   32,    6,   32,
        0,    0,    0,    0,    0,   25,   25,   25,   25,    0,
       26,   26,   26,    0,   26,   32,   32,   32,   13,   11,

       32,   14,    0,    0,    0,   25,   25,   25,    0,   25,
       30,   26,   26,   26,   26,   32,   32,   12,    7,    0,
        0,    0,   29,   25,   25,   25,   25,   26,   26,   26,
        0,   26,   10,   32,    0,    0,   25,   25,   25,    0,
       25,   26,   26,   26,   26,   32,    0,    0,    0,   25,
       25,   25,   25,   26,   26,   26,    0,   26,    8,    0,
        0,   25,   25,   25,    0,   25,   26,   26,   26,   26,
       32,    0,    0,    0,   25,   25,   25,   25,   26,   26,
       26,    0,   26,   32,    0,   24,   27,   25,   25,   25,
        0,   25,   26,   26,   26,   26,   32,    0,   24,    0,

       25,   25,   25,   25,   25,   26,   26,   26,    0,   26,
       32,   24,   27,   25,    0,   25,   25,   25,   25,   26,
       26,   26,   32,   24,   25,   25,   25,   25,   26,   26,
       26,    9,   25,   25,    0,   25,   25,   26,   25,   25,
       26,   25,   25,    0,   25,   25,   25,   25,    0,   25,
       25,   25,   25,    0,   25,   25,   25,   25,    0,   25,
       25,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    1,    1,    9,   10,   11,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   13,    1,    1,
        1,    1,    1,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   23,
       23,   29,   30,   31,   32,   33,   34,   23,   35,   23,
        1,    1,    1,    1,    1,    1,   14,   15,   16,   17,

       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   23,   23,   29,   30,   31,   32,   33,   34,   23,
       35,   23,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[36] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    4,
        1,    5,    6,    5,    5,    5,    5,    5,    5,    3,
        7,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[486] =
    {   0,
        0,    0,  946,  945,    0,    0,  952,  955,  955,   33,
       35,  946,    0,  943,   32,   29,  936,   39,   49,   34,
       56,  935,   58,   59,   60,   62,   31,   65,   66,   63,
       68,  955,  936,  955,   42,   79,   92,  941,  955,    0,
      938,  937,  955,    0,   85,  930,   86,  955,  930,  928,
       96,  927,   67,  914,   87,   88,   91,   96,  104,  925,
       90,  105,  110,  107,  111,  955,    0,  113,  114,  924,
      924,  118,  129,  131,  120,  127,  131,  138,  140,  143,
      142,  146,  147,  150,  151,  922,  155,  149,  921,  920,
      159,  164,  920,  168,  919,  172,  174,  170,  181,  171,

      182,  174,  183,  185,  193,  917,  191,  203,  201,  916,
      915,  914,  914,  205,  913,  209,  211,  214,  215,  219,
      220,  911,  189,  910,  225,  909,  222,  224,  223,  226,
      230,  231,  232,  235,  908,  907,  906,  237,  243,  244,
      251,  255,  906,  257,  904,  261,  904,  262,  902,  253,
      245,  263,  264,  265,  269,  901,  267,  271,  900,  899,
      899,  275,  897,  282,  897,  276,  287,  290,  291,  295,
      297,  301,  293,  299,  300,  304,  306,  303,  895,  307,
      894,  893,  892,  313,  316,  317,  321,  325,  329,  892,
      331,  890,  335,  890,  336,  337,  338,  327,  888,  887,

      340,  886,  885,  884,  884,  345,  882,  349,  882,  350,
      881,  354,  355,  360,  364,  362,  369,  879,  878,  877,
      876,  875,  875,  371,  366,  375,  376,  380,  873,  384,
      873,  385,  871,  378,  870,  869,  389,  868,  393,  868,
      394,  398,  399,  403,  404,  405,  866,  865,  864,  411,
      415,  417,  421,  423,  863,  427,  863,  428,  433,  861,
      860,  435,  859,  439,  859,  440,  444,  445,  449,  450,
      451,  857,  856,  855,  455,  456,  460,  461,  465,  854,
      470,  854,  471,  463,  852,  851,    0,  475,  850,  481,
      850,  476,  485,  486,  490,  491,  492,  848,  847,  846,

      845,  498,  502,  504,  847,  507,  843,  511,    0,  512,
      500,  842,  955,  841,    0,  516,  840,  520,  842,  521,
      525,    0,  477,  838,  837,  836,  527,  838,  530,  834,
        0,  833,  832,  831,    0,  534,  955,    0,  830,  829,
      955,  828,  827,    0,  826,  825,  824,  823,    0,  822,
      821,  820,  819,    0,  818,  817,  816,  815,    0,  814,
      813,  955,  546,  553,  560,  567,  574,  577,  582,  589,
      592,  595,  820,  597,  600,  819,  603,  605,  608,  610,
      613,  616,  818,  618,  620,  623,  817,  626,  629,  631,
      633,  636,  639,  642,  816,  644,  646,  649,  586,  652,

      655,  657,  659,  662,  665,  668,  564,  670,  672,  675,
      540,  678,  681,  683,  685,  688,  691,  694,  536,  696,
      698,  701,  531,  704,  707,  709,  711,  714,  717,  720,
      522,  722,  724,  727,  502,  730,  733,  735,  737,  740,
      743,  746,  439,  748,  750,  438,  753,  427,  756,  759,
      761,  763,  766,  769,  771,  421,  773,  775,  415,  778,
      780,  414,  782,  784,  787,  364,  788,  327,  285,  790,
      792,  794,  245,  796,  798,  800,   79,  802,  804,  806,
       42,  808,  810,  812,  814
    } ;

static yyconst flex_int16_t yy_def[486] =
    {   0,
      362,    1,  363,  363,  364,  364,  362,  362,  362,  362,
      362,  365,  366,  367,  362,  368,  362,  369,  369,   19,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  362,  362,  362,  362,  362,  362,  365,  362,  366,
      367,  362,  362,  370,  371,  372,  371,  362,  373,  369,
       19,  369,  369,   51,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  362,  370,  374,  374,  375,
      376,  377,  377,   51,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  378,  378,  379,  380,
      381,  381,  362,  382,  383,  382,   51,  369,  369,  369,

      369,  369,  369,  369,  369,  369,  369,  369,   88,   88,
      384,  385,  362,  386,  387,  386,  362,  388,  388,  389,
      389,   97,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  362,  390,  391,  362,  392,  392,
      393,  393,  362,  362,  362,  394,  395,  394,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  396,  397,
      362,  362,  362,  398,  399,  398,  362,  362,  400,  400,
      401,  401,  369,  369,  369,  369,  369,  369,  369,  369,
      362,  402,  403,  362,  362,  404,  404,  405,  405,  362,
      362,  362,  406,  407,  406,  369,  369,  369,  369,  369,

      369,  369,  408,  409,  362,  362,  362,  410,  411,  410,
      362,  412,  412,  413,  413,  369,  369,  369,  369,  362,
      414,  415,  362,  416,  416,  417,  417,  362,  362,  418,
      419,  418,  369,  369,  420,  421,  362,  362,  422,  423,
      422,  424,  424,  425,  425,  369,  362,  426,  427,  428,
      428,  429,  429,  362,  362,  430,  431,  430,  369,  432,
      433,  362,  362,  434,  435,  434,  436,  436,  437,  437,
      369,  362,  438,  439,  440,  440,  441,  441,  362,  362,
      442,  443,  442,  369,  444,  445,  446,  362,  362,  447,
      448,  447,  449,  449,  450,  450,  369,  362,  451,  362,

      452,  453,  453,  454,  454,  362,  362,  455,  456,  455,
      369,  457,  362,  458,  459,  362,  362,  460,  460,  461,
      461,  462,  369,  362,  463,  464,  465,  465,  362,  362,
      466,  369,  362,  467,  468,  362,  362,  469,  470,  471,
      362,  362,  472,  473,  474,  475,  362,  476,  477,  478,
      479,  362,  480,  481,  482,  483,  362,  484,  448,  485,
      362,    0,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,

      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362
    } ;

static yyconst flex_int16_t yy_nxt[991] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
       15,   16,   17,   18,   18,   19,   18,   18,   20,   21,
       22,   23,   22,   22,   24,   25,   26,   22,   22,   27,
       28,   29,   22,   30,   31,   35,   36,   37,   36,   43,
       45,   46,   44,  362,   35,   36,  356,   54,   61,   48,
       51,   46,   51,   51,   51,   51,   51,   51,   50,   52,
       51,   46,   51,   51,   51,   51,   51,   51,  362,   52,
      362,  362,  362,   53,  362,  362,   56,  362,  362,  362,
      362,   37,   36,  351,   57,   65,   58,   55,   75,   60,
       64,   59,   63,   62,   35,   36,   68,   46,   46,  362,

      362,   78,  362,  362,   77,   48,   48,   74,  362,   74,
       74,   74,   74,   74,   74,   80,  362,  362,   82,  362,
       50,   79,  362,  362,   87,   46,   46,   93,   81,   94,
       95,   84,  362,   48,   48,   85,   83,   98,  362,  362,
       86,   95,   97,  362,   97,   97,   97,   97,   97,   97,
      362,  103,  362,  101,  362,  362,   99,  102,  362,  362,
      100,   46,  362,  362,  106,  107,  109,   46,  113,   48,
      114,  115,  104,  362,  108,   48,  115,   93,  105,  118,
       95,  362,  362,  362,   95,  122,  362,  122,  122,  122,
      122,  122,  122,  362,  362,  362,  123,  362,  124,  126,

      125,  362,  127,  362,  133,  362,  131,  128,  129,  130,
      132,  134,  109,  362,  113,  362,  139,  115,  362,  149,
      143,  115,  117,   93,  362,  144,   95,   95,   93,  362,
      146,  147,  147,  150,  362,  362,  362,  362,  362,  154,
      151,  152,  362,  362,  362,  155,  161,  362,  138,  346,
      153,  158,  113,  362,  162,  115,  115,  362,  174,  156,
      113,  157,  164,  165,  362,  362,   93,  165,  168,   95,
       93,  362,  169,  147,  147,  362,  362,  362,  173,  362,
      176,  362,  178,  362,  113,  362,  185,  115,  165,  341,
      177,  113,  180,  186,  165,  175,  190,  179,  167,   93,

       93,  168,  191,  147,  362,  362,   93,  147,  193,  194,
      362,  362,  362,  194,  197,  362,  362,  198,  362,  362,
      196,  199,  205,  200,  184,  113,  113,  185,  206,  165,
      362,  340,  201,  165,  113,  202,  208,  209,  362,  362,
       93,  209,  168,  147,   93,  362,  212,  194,  194,  362,
      362,  218,  362,  216,  113,  217,  185,  165,  113,  362,
      224,  209,  209,   93,  362,  228,  194,  194,  338,   93,
      219,  230,  231,  362,  362,  362,  231,  234,  209,  233,
      113,  362,  237,  209,  113,  362,  239,  240,  240,   93,
      362,  168,  194,   93,  362,  242,  231,  231,  113,  246,

      185,  209,  113,  362,  250,  240,  240,   93,  362,  254,
      231,  231,   93,  362,  256,  257,  257,  362,  331,  326,
      113,  259,  262,  240,  362,  322,  113,  240,  264,  265,
      362,  305,   93,  265,  168,  231,   93,  362,  267,  257,
      257,  271,  301,  296,  113,  362,  185,  240,  113,  362,
      275,  265,  265,   93,  362,  279,  257,  257,   93,  362,
      281,  282,  282,  362,  113,  362,  288,  265,  265,  113,
      362,  290,  291,  291,   93,  362,  168,  257,  284,   93,
      362,  293,  282,  282,  113,  362,  185,  265,  291,  362,
      113,  297,  302,  291,   93,  362,  306,  282,  282,   93,

      362,  308,  309,  309,  362,  332,  278,  113,  311,  316,
      291,  362,  362,  113,  291,  318,   93,  323,  168,  282,
       93,  362,  320,  309,  309,  113,  270,  185,  291,  113,
       93,  327,  329,  309,  362,  253,  113,  309,  336,   93,
      245,  168,  309,  113,  227,  185,   32,   32,   32,   32,
       32,   32,   32,   34,   34,   34,   34,   34,   34,   34,
       38,   38,   38,   38,   38,   38,   38,   40,  215,   40,
       40,   40,   40,   40,   41,   41,   41,   41,   41,   41,
       41,   47,   47,   47,   50,   50,   50,   50,   50,   67,
      189,   67,   67,   67,   67,   67,   69,   69,   69,   70,

       70,   88,   88,   88,   89,   89,   96,   96,   96,  110,
      110,  110,  111,  111,  112,  112,  116,  116,  116,  119,
      119,  119,  135,  135,  136,  136,  140,  140,  140,  145,
      145,  145,  148,  148,  148,  159,  159,  160,  160,  163,
      163,  163,  166,  166,  166,  170,  170,  170,  181,  181,
      182,  182,  187,  187,  187,  192,  192,  192,  195,  195,
      195,  203,  203,  204,  204,  207,  207,  207,  210,  210,
      210,  213,  213,  213,  220,  220,  221,  221,  225,  225,
      225,  229,  229,  229,  232,  232,  232,  235,  235,  236,
      236,  238,  238,  238,  241,  241,  241,  243,  243,  243,

      247,  247,  248,  248,  251,  251,  251,  255,  255,  255,
      258,  258,  258,  260,  260,  261,  261,  263,  263,  263,
      266,  266,  266,  268,  268,  268,  272,  272,  273,  273,
      276,  276,  276,  280,  280,  280,  283,  283,  283,  285,
      285,  286,  286,  289,  289,  289,  292,  292,  292,  294,
      294,  294,  298,  298,  299,  299,  303,  303,  303,  307,
      307,  307,  310,  310,  310,  312,  312,  314,  314,  317,
      317,  317,  319,  319,  321,  321,  321,  324,  324,  325,
      325,  328,  328,  330,  330,  330,  333,  333,  334,  334,
      337,  337,  339,  339,  342,  342,  343,  343,  345,  345,

      347,  347,  348,  348,  350,  350,  352,  352,  353,  353,
      355,  355,  357,  357,  358,  358,  360,  360,  361,  361,
      172,  142,  121,   92,   73,  359,  359,  359,  354,  359,
      354,  354,  349,  354,  349,  349,  344,  349,  344,  344,
      335,  344,  335,  335,  315,  362,  309,  362,  335,  315,
      300,  362,  291,  315,  300,  282,  362,  315,  313,  300,
      274,  304,  265,  300,  274,  295,  257,  287,  274,  249,
      277,  240,  274,  249,  269,  231,   71,  249,  222,  252,
      209,  249,  222,  362,  244,  194,  223,   71,  222,  183,
      362,  362,  211,  226,  165,  223,  222,  183,  362,  362,

      362,  214,  147,  211,   71,  183,  137,  362,  188,  115,
      184,  183,  137,  362,  362,  171,   95,  167,   71,  137,
       90,  362,  362,  362,  141,  138,  137,   90,  362,  362,
      120,  117,   71,   90,  362,   91,   90,  362,   76,  362,
      362,   72,   71,   41,   42,   39,   66,  362,   49,   42,
       39,  362,   33,   33,    7,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362
    } ;

static yyconst flex_int16_t yy_chk[991] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   10,   10,   11,   11,   15,
       16,   16,   15,   27,   35,   35,  481,   20,   27,   16,
       18,   18,   18,   18,   18,   18,   18,   18,   20,   18,
       19,   19,   19,   19,   19,   19,   19,   19,   21,   19,
       23,   24,   25,   19,   26,   30,   23,   28,   29,   53,
       31,   36,   36,  477,   23,   31,   24,   21,   53,   26,
       30,   25,   29,   28,   37,   37,   45,   45,   47,   55,

       56,   56,   61,   57,   55,   45,   47,   51,   58,   51,
       51,   51,   51,   51,   51,   58,   59,   62,   61,   64,
       51,   57,   63,   65,   68,   68,   69,   72,   59,   72,
       72,   63,   75,   68,   69,   64,   62,   75,   73,   76,
       65,   73,   74,   77,   74,   74,   74,   74,   74,   74,
       78,   80,   79,   78,   81,   80,   76,   79,   82,   83,
       77,   88,   84,   85,   83,   84,   87,   87,   91,   88,
       91,   91,   81,   92,   85,   87,   92,   94,   82,   94,
       94,   96,   98,  100,   96,   97,  102,   97,   97,   97,
       97,   97,   97,   99,  101,  103,   98,  104,   99,  101,

      100,  123,  102,  107,  107,  105,  104,  103,  103,  103,
      105,  108,  109,  109,  114,  108,  114,  114,  116,  123,
      117,  116,  117,  118,  119,  118,  118,  119,  120,  121,
      120,  120,  121,  125,  127,  129,  128,  125,  130,  130,
      127,  128,  131,  132,  133,  131,  138,  134,  138,  473,
      129,  134,  139,  140,  139,  139,  140,  151,  151,  132,
      141,  133,  141,  141,  142,  150,  144,  142,  144,  144,
      146,  148,  146,  146,  148,  152,  153,  154,  150,  157,
      153,  155,  155,  158,  162,  166,  162,  162,  166,  469,
      154,  164,  158,  164,  164,  152,  167,  157,  167,  168,

      169,  168,  169,  169,  170,  173,  171,  170,  171,  171,
      172,  174,  175,  172,  174,  178,  176,  175,  177,  180,
      173,  176,  184,  177,  184,  185,  186,  185,  186,  186,
      187,  468,  178,  187,  188,  180,  188,  188,  189,  198,
      191,  189,  191,  191,  193,  195,  193,  193,  195,  196,
      197,  198,  201,  196,  206,  197,  206,  206,  208,  210,
      208,  208,  210,  212,  213,  212,  212,  213,  466,  214,
      201,  214,  214,  215,  216,  225,  215,  217,  225,  216,
      224,  217,  224,  224,  226,  227,  226,  226,  227,  228,
      234,  228,  228,  230,  232,  230,  230,  232,  237,  234,

      237,  237,  239,  241,  239,  239,  241,  242,  243,  242,
      242,  243,  244,  245,  244,  244,  245,  246,  462,  459,
      250,  246,  250,  250,  251,  456,  252,  251,  252,  252,
      253,  448,  254,  253,  254,  254,  256,  258,  256,  256,
      258,  259,  446,  443,  262,  259,  262,  262,  264,  266,
      264,  264,  266,  267,  268,  267,  267,  268,  269,  270,
      269,  269,  270,  271,  275,  276,  275,  275,  276,  277,
      278,  277,  277,  278,  279,  284,  279,  279,  271,  281,
      283,  281,  281,  283,  288,  292,  288,  288,  292,  323,
      290,  284,  290,  290,  293,  294,  293,  293,  294,  295,

      296,  295,  295,  296,  297,  323,  435,  302,  297,  302,
      302,  303,  311,  304,  303,  304,  306,  311,  306,  306,
      308,  310,  308,  308,  310,  316,  431,  316,  316,  318,
      320,  318,  320,  320,  321,  423,  327,  321,  327,  329,
      419,  329,  329,  336,  411,  336,  363,  363,  363,  363,
      363,  363,  363,  364,  364,  364,  364,  364,  364,  364,
      365,  365,  365,  365,  365,  365,  365,  366,  407,  366,
      366,  366,  366,  366,  367,  367,  367,  367,  367,  367,
      367,  368,  368,  368,  369,  369,  369,  369,  369,  370,
      399,  370,  370,  370,  370,  370,  371,  371,  371,  372,

      372,  374,  374,  374,  375,  375,  377,  377,  377,  378,
      378,  378,  379,  379,  380,  380,  381,  381,  381,  382,
      382,  382,  384,  384,  385,  385,  386,  386,  386,  388,
      388,  388,  389,  389,  389,  390,  390,  391,  391,  392,
      392,  392,  393,  393,  393,  394,  394,  394,  396,  396,
      397,  397,  398,  398,  398,  400,  400,  400,  401,  401,
      401,  402,  402,  403,  403,  404,  404,  404,  405,  405,
      405,  406,  406,  406,  408,  408,  409,  409,  410,  410,
      410,  412,  412,  412,  413,  413,  413,  414,  414,  415,
      415,  416,  416,  416,  417,  417,  417,  418,  418,  418,

      420,  420,  421,  421,  422,  422,  422,  424,  424,  424,
      425,  425,  425,  426,  426,  427,  427,  428,  428,  428,
      429,  429,  429,  430,  430,  430,  432,  432,  433,  433,
      434,  434,  434,  436,  436,  436,  437,  437,  437,  438,
      438,  439,  439,  440,  440,  440,  441,  441,  441,  442,
      442,  442,  444,  444,  445,  445,  447,  447,  447,  449,
      449,  449,  450,  450,  450,  451,  451,  452,  452,  453,
      453,  453,  454,  454,  455,  455,  455,  457,  457,  458,
      458,  460,  460,  461,  461,  461,  463,  463,  464,  464,
      465,  465,  467,  467,  470,  470,  471,  471,  472,  472,

      474,  474,  475,  475,  476,  476,  478,  478,  479,  479,
      480,  480,  482,  482,  483,  483,  484,  484,  485,  485,
      395,  387,  383,  376,  373,  361,  360,  358,  357,  356,
      355,  353,  352,  351,  350,  348,  347,  346,  345,  343,
      342,  340,  339,  334,  333,  332,  330,  328,  326,  325,
      324,  319,  317,  314,  312,  307,  305,  301,  300,  299,
      298,  291,  289,  286,  285,  282,  280,  274,  273,  272,
      265,  263,  261,  260,  257,  255,  249,  248,  247,  240,
      238,  236,  235,  233,  231,  229,  223,  222,  221,  220,
      219,  218,  211,  209,  207,  205,  204,  203,  202,  200,

      199,  194,  192,  190,  183,  182,  181,  179,  165,  163,
      161,  160,  159,  156,  149,  147,  145,  143,  137,  136,
      135,  126,  124,  122,  115,  113,  112,  111,  110,  106,
       95,   93,   90,   89,   86,   71,   70,   60,   54,   52,
       50,   49,   46,   42,   41,   38,   33,   22,   17,   14,
       12,    7,    4,    3,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[37] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "RelLexer.l"
#line 5 "RelLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "RelParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "RelLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_RelParser_stype yylval;
}
#line 812 "RelLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "RelLexer.l"


#line 917 "RelLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 363 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 955 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "RelLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "RelLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "RelLexer.l"
{ return RelParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "RelLexer.l"
{ return RelParser::CLIENT_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "RelLexer.l"
{ return RelParser::SERVER_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "RelLexer.l"
{ return RelParser::UNICAST_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "RelLexer.l"
{ return RelParser::MULTICAST_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "RelLexer.l"
{ return RelParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "RelLexer.l"
{ return RelParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 55 "RelLexer.l"
{ return RelParser::GUESS_MODE_; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "RelLexer.l"
{ return RelParser::LOGNAME_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "RelLexer.l"
{ return RelParser::LOGLEVEL_;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 59 "RelLexer.l"
{ return RelParser::LOGMODE_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 61 "RelLexer.l"
{ return RelParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "RelLexer.l"
{ yylval.ival=1; return RelParser::INTNUMBER_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 64 "RelLexer.l"
{ yylval.ival=0; return RelParser::INTNUMBER_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 65 "RelLexer.l"
{ yylval.ival=1; return RelParser::INTNUMBER_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 66 "RelLexer.l"
{ yylval.ival=0; return RelParser::INTNUMBER_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 "RelLexer.l"
;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 70 "RelLexer.l"
;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 72 "RelLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno; 
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 77 "RelLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 78 "RelLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 79 "RelLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 24:
YY_RULE_SETUP
#line 86 "RelLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return RelParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 95 "RelLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return RelParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 104 "RelLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return RelParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 113 "RelLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return RelParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 122 "RelLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return RelParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 131 "RelLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return RelParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 140 "RelLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return RelParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 149 "RelLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return RelParser::STRING_;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 156 "RelLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return RelParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return RelParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return RelParser::STRING_;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 177 "RelLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd; 
      YYABORT; 
    }
    return RelParser::HEXNUMBER_;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 187 "RelLexer.l"
{ 
    if(!sscanf(yytext,"%u",&(yylval.ival))) { 
        Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd; 
        YYABORT; 
    }
    return RelParser::INTNUMBER_;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 195 "RelLexer.l"
{ return yytext[0]; } 
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 198 "RelLexer.l"
ECHO;
	YY_BREAK
#line 1292 "RelLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 363 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 363 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 362);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

// extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

yyFlexLexer::~yyFlexLexer()
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

	delete [] (yy_state_buf);
	yyfree((yy_start_stack)  );

}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 198 "RelLexer.l"



